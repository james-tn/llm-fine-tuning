User Question,Ground Truth SQL Query,Generated SQL by Base Model,Explanation by Base Model,Generated SQL by FT Model,Explanation by FT Model,Model that got it right
Which countries have the most delayed shipments?,"SELECT ShipCountry, COUNT(OrderID) AS DelayedShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipCountry ORDER BY DelayedShipments DESC;","```sql
SELECT ShipCountry, COUNT(OrderID) AS DelayedShipments
FROM orders
WHERE ShippedDate > RequiredDate
GROUP BY ShipCountry
ORDER BY DelayedShipments DESC;
```",The generated SQL query accurately answers the user's question and matches the ground truth query in logic and outcome. Both queries count the number of delayed shipments per country and order by the descending count of delayed shipments.,"SELECT ShipCountry, COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) AS DelayedShipments FROM orders GROUP BY ShipCountry;","The generated SQL query does not order the results, whereas the ground truth query orders by DelayedShipments in descending order. This could affect whether it truly answers the question about which countries have the most delayed shipments.",Base
Which shipper method is used most frequently?,"SELECT ShipVia, COUNT(OrderID) AS NumberOfShipments FROM orders GROUP BY ShipVia ORDER BY NumberOfShipments DESC LIMIT 1;","```sql
SELECT ShipVia, COUNT(*) AS OrderCount
FROM orders
GROUP BY ShipVia
ORDER BY OrderCount DESC
LIMIT 1;
```",Both queries count orders grouped by ShipVia and return the ShipVia used most frequently.,"SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;","Both queries count the number of orders grouped by the shipping method and return the most frequently used one. They differ only in alias naming, which does not affect the result.",both
Determine the revenue generated by each product category.,"SELECT p.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID;","```sql
SELECT products.CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Revenue
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY products.CategoryID
```","Both queries calculate the total revenue per product category using the same logic and tables, though the generated query includes an unnecessary join with 'orders'.","SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY CategoryID;","Both queries calculate the revenue for each product category by joining the products and order details tables, and aggregating the results by CategoryID. They both perform the same calculation for TotalRevenue.",both
Which customer spent the most in June 2023?,"SELECT CustomerID, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSpent FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE O.OrderDate BETWEEN '2023-06-01' AND '2023-06-30' GROUP BY CustomerID ORDER BY TotalSpent DESC LIMIT 1;","```sql
SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSpent
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= '2023-06-01' AND o.OrderDate < '2023-07-01'
GROUP BY o.CustomerID
ORDER BY TotalSpent DESC
LIMIT 1;
```","Both queries aim to find the customer who spent the most in June 2023 by calculating total spending per customer on orders placed within June. They differ slightly in the date range syntax but are functionally equivalent. The generated query correctly defines the date range to include all of June and orders the results by total spending, selecting the highest spender.","SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_spending FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE EXTRACT(MONTH FROM orders.OrderDate) = 6 AND EXTRACT(YEAR FROM orders.OrderDate) = 2023 GROUP BY customers.CustomerID ORDER BY total_spending DESC LIMIT 1","Both queries correctly calculate the total spending by each customer for June 2023, sort the results in descending order, and limit the output to the customer with the highest spending. The only difference is the way the date is filtered.",both
Which products have less than the reorder level in stock?,SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock < ReorderLevel;
```","Both queries identify products where the stock is less than the reorder level. The difference is that the generated query retrieves additional fields (ProductID, UnitsInStock, ReorderLevel), but this does not affect the correctness related to the user's question.",SELECT p.ProductName FROM products p WHERE p.UnitsInStock < p.ReorderLevel;,"Both queries select ProductName from products where UnitsInStock is less than ReorderLevel, achieving the same result.",both
How many customers have more than one order in the system?,SELECT COUNT(*) FROM (SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID HAVING COUNT(o.OrderID) > 1) subquery;,"```sql
SELECT COUNT(DISTINCT CustomerID) AS CustomerCount
FROM orders
GROUP BY CustomerID
HAVING COUNT(OrderID) > 1;
```",Both queries count distinct customers with more than one order by grouping customers and applying a HAVING clause on the order count.,"SELECT COUNT(DISTINCT CustomerID) AS CustomerCount FROM (SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 1) AS Subquery;",Both queries count distinct customers with more than one order by aggregating orders per customer and applying a count filter. They effectively yield the same results.,both
Which city received the most shipments?,"SELECT ShipCity, COUNT(*) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 1","```sql
SELECT ShipCity, COUNT(OrderID) AS ShipmentCount
FROM orders
GROUP BY ShipCity
ORDER BY ShipmentCount DESC
LIMIT 1;
```",Both queries correctly count shipments per city and order the results to find the city with the most shipments. They yield the same result.,"SELECT o.ShipCity, COUNT(o.OrderID) AS number_of_shipments FROM orders o GROUP BY o.ShipCity ORDER BY number_of_shipments DESC LIMIT 1;",Both queries count the shipments per city and return the city with the most shipments. They produce the same result even though one counts OrderID and the other counts all rows.,both
What is the average order value per month?,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    Month
```","Both queries calculate the average order value per month by grouping on the formatted month and dividing the total by the count of distinct order IDs, resulting in equivalent outputs.","SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS average_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')","Both queries calculate the average order value per month by dividing the total order value by the count of distinct orders within each month. The logic and grouping are consistent, leading to the same results despite differences in SQL functions or formatting of table names.",both
Which cities have the most sales attributed to each employee?,"SELECT e.EmployeeID, o.ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CitySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, o.ShipCity","```sql
SELECT e.FirstName, e.LastName, o.ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, o.ShipCity
ORDER BY e.EmployeeID, TotalSales DESC;
```","The generated query orders results by TotalSales within each employee, but it doesn't ensure that only the top city per employee is selected. The ground truth does not include this ordering.","SELECT e.EmployeeID, o.ShipCity, COUNT(*) AS CitySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, o.ShipCity ORDER BY EmployeeID, CitySales DESC;","The generated query only counts orders per city and employee, while the ground truth calculates sales based on order details, considering unit price, quantity, and discounts.",None
Find the average discount given per order for each supplier.,"SELECT s.CompanyName, AVG(d.Discount) AS AverageDiscount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] d ON p.ProductID = d.ProductID JOIN orders o ON o.OrderID = d.OrderID GROUP BY s.CompanyName;","```sql
SELECT 
    s.CompanyName,
    AVG(od.Discount) as AverageDiscount
FROM 
    suppliers s
JOIN 
    products p ON s.SupplierID = p.SupplierID
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
JOIN 
    orders o ON od.OrderID = o.OrderID
GROUP BY 
    s.CompanyName;
```",The generated SQL query and the ground truth SQL query are functionally equivalent. Both queries calculate the average discount given per order for each supplier by joining the same tables and grouping by the supplier's company name.,"SELECT s.SupplierName, AVG(od.Discount) AS AverageDiscount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierName;","Both queries compute the average discount per order for each supplier by joining the suppliers, products, and order details tables. Although the Generated SQL Query does not explicitly join the orders table, it is not necessary for calculating the average discount per supplier. Both use appropriate aggregation functions and group by supplier name, which will yield the same results.",both
"Calculate the total sales amount for each product, considering discounts.","SELECT od.ProductID, SUM(od.Quantity * (od.UnitPrice - od.UnitPrice * od.Discount)) AS TotalSales FROM [Order Details] od GROUP BY od.ProductID;","```sql
SELECT 
    p.ProductID,
    p.ProductName,
    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalSales
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.ProductName
```","Both queries calculate the total sales amount considering discounts for each product, and the results will be equivalent despite the inclusion of additional details in the generated query.","SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od GROUP BY od.ProductID;","Both queries calculate total sales by accounting for discounts in equivalent ways, yielding the same results.",both
How many orders have a quantity greater than 10 units in the last year?,SELECT COUNT(DISTINCT orders.OrderID) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE [Order Details].Quantity > 10 AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1,"```sql
SELECT COUNT(*) 
FROM [Order Details] 
WHERE Quantity > 10 
AND OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR));
```","The generated query counts all rows in 'Order Details' with Quantity > 10 for orders in the last year, but may double-count orders. The ground truth counts distinct orders with any item having Quantity > 10 from the previous year.",SELECT COUNT(o.OrderID) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Quantity > 10 AND o.OrderDate > CURRENT_DATE - INTERVAL '1 year';,"The generated query checks for orders in the last 365 days, whereas the ground truth query checks for orders specifically from the last calendar year.",None
Which product has the highest sales volume?,"SELECT ProductID, SUM([Order Details].Quantity) AS SalesVolume FROM [Order Details] GROUP BY ProductID ORDER BY SalesVolume DESC LIMIT 1;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries correctly calculate the product with the highest sales volume by summing quantities from the 'Order Details' table and ordering by the result. The generated query includes the ProductName, which doesn't affect the result correctness.","SELECT p.ProductName, SUM(od.Quantity) AS SalesVolume FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SalesVolume DESC LIMIT 1;","The Generated SQL query returns the product name with the highest sales volume, while the Ground Truth SQL query returns the ProductID. They produce different output formats.",Base
Which suppliers provide products that are currently out of stock?,SELECT DISTINCT SupplierID FROM products WHERE UnitsInStock = 0;,"```sql
SELECT DISTINCT p.SupplierID
FROM products p
WHERE p.UnitsInStock = 0;
```","Both queries select distinct SupplierIDs from the products table where UnitsInStock is zero, achieving the same result.",SELECT DISTINCT SupplierID FROM products WHERE UnitsInStock = 0 AND Discontinued = 0;,"The generated query excludes discontinued products, which may also be out of stock.",Base
Calculate the percentage of discontinued products in the inventory.,SELECT SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END) / COUNT(ProductID) * 100.0 AS percentage FROM products,"```sql
SELECT (COUNT(*) FILTER (WHERE products.Discontinued = 1) * 100.0 / COUNT(*)) AS discontinued_percentage 
FROM products;
```","Both queries correctly calculate the percentage of discontinued products. The generated query uses FILTER with COUNT, while the ground truth uses a CASE statement. Both approaches yield the same result.",SELECT (CAST(COUNT(*) FILTER(WHERE Discontinued = 1) AS DECIMAL) / COUNT(*) * 100) AS DiscontinuedPercentage FROM products;,"Both queries calculate the percentage of discontinued products by dividing the count of discontinued products by the total count, then multiplying by 100. They use different methods (FILTER vs CASE) but yield the same result.",both
Find the reorder level for the most ordered products.,"SELECT p.ProductName, p.ReorderLevel FROM products p JOIN (SELECT ProductID, SUM(Quantity) AS TotalOrdered FROM [Order Details] GROUP BY ProductID) od ON p.ProductID = od.ProductID ORDER BY TotalOrdered DESC LIMIT 1;","```sql
SELECT p.ProductID, p.ReorderLevel
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ReorderLevel
ORDER BY SUM(od.Quantity) DESC
LIMIT 1;
```","The generated query returns ProductID and Ground Truth returns ProductName. Also, 'LIMIT 1' is SQL syntax but not entirely valid in ANSI SQL without a FETCH clause.","SELECT products.ProductName, products.ReorderLevel, COUNT(*) AS OrderCount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName, products.ReorderLevel ORDER BY OrderCount DESC;","The generated query finds the reorder level for all products sorted by the count of orders, while the ground truth query finds the reorder level for the single most ordered product by total quantity.",None
Find low-performing products based on sales and stock levels.,"SELECT p.ProductName, SUM(od.Quantity) AS TotalSales, p.UnitsInStock FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName, p.UnitsInStock HAVING SUM(od.Quantity) < p.UnitsInStock","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales, p.UnitsInStock
FROM products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
HAVING SUM(od.Quantity) < p.ReorderLevel
ORDER BY TotalSales ASC;
```","The generated query includes 'ProductID' which is not present in the ground truth query. The ground truth compares 'SUM(od.Quantity)' with 'p.UnitsInStock', whereas the generated query compares with 'p.ReorderLevel'.","SELECT p.ProductID, ProductName, UnitsInStock, SUM(od.Quantity) as TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName HAVING SUM(od.Quantity) < 50 AND UnitsInStock < 20;","The generated query and the ground truth query have different conditions for identifying low-performing products. The generated query filters products with TotalSales < 50 and UnitsInStock < 20, whereas the ground truth filters products with TotalSales < UnitsInStock.",None
Are there any products that have never been ordered?,SELECT ProductID FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"```sql
SELECT p.ProductID, p.ProductName
FROM products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.ProductID IS NULL;
```",Both queries correctly identify products that have never been ordered by checking for ProductIDs in 'products' that do not appear in 'Order Details'. The methods differ but yield the same results.,SELECT p.ProductName FROM products p WHERE NOT EXISTS (SELECT 1 FROM [Order Details] od WHERE p.ProductID = od.ProductID);,"Both queries effectively identify products that have never been ordered. The generated query uses NOT EXISTS to check for the absence of any matching rows in the subquery, whereas the ground truth query employs a NOT IN clause with DISTINCT. Both approaches yield the same result.",both
Find suppliers who have not shipped any orders in the past year.,"SELECT s.SupplierID, s.CompanyName FROM suppliers s LEFT JOIN products p ON s.SupplierID = p.SupplierID LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID LEFT JOIN orders o ON od.OrderID = o.OrderID WHERE o.ShippedDate IS NULL OR o.ShippedDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY s.SupplierID, s.CompanyName HAVING COUNT(o.OrderID) = 0;","```sql
SELECT s.*
FROM suppliers s
LEFT JOIN products p ON s.SupplierID = p.SupplierID
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
LEFT JOIN orders o ON od.OrderID = o.OrderID AND o.ShippedDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
WHERE o.OrderID IS NULL;
```","Both queries aim to find suppliers who have not shipped any orders in the past year. The generated query uses a LEFT JOIN with a condition that results in nulls for suppliers without shipments in the specified time, while the ground truth uses HAVING with a GROUP BY. Both effectively filter out suppliers with shipments in the past year.","SELECT suppliers.SupplierID, suppliers.CompanyName FROM suppliers WHERE suppliers.SupplierID NOT IN (SELECT DISTINCT products.SupplierID FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR));","The generated query checks for suppliers with no orders in the past year, while the ground truth checks for suppliers with no shipped orders in the past year and includes handling for null ShippedDate values.",Base
Calculate the correlation between order fulfillment time and freight cost.,"SELECT CORR(DATEDIFF(ShippedDate, OrderDate), Freight) AS Correlation FROM orders;","```sql
SELECT CORR(DATEDIFF(orders.ShippedDate, orders.OrderDate), orders.Freight) AS correlation
FROM orders
WHERE orders.ShippedDate IS NOT NULL AND orders.OrderDate IS NOT NULL;
```","Both queries calculate the correlation between order fulfillment time and freight cost, considering only non-null dates, which aligns with the intent.","SELECT CORR(DATEDIFF(ShippedDate, OrderDate), Freight) AS Correlation FROM orders;","The generated SQL query and the ground truth SQL query are identical, indicating they would yield the same results and accurately answer the user's question.",both
Which suppliers have not been used in any orders in the past year?,"SELECT SupplierID, CompanyName FROM suppliers WHERE SupplierID NOT IN (SELECT products.SupplierID FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate > CURRENT_DATE - INTERVAL '1 YEAR');","```sql
SELECT s.SupplierID, s.CompanyName
FROM suppliers s
LEFT JOIN products p ON s.SupplierID = p.SupplierID
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
LEFT JOIN orders o ON od.OrderID = o.OrderID AND o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
WHERE o.OrderID IS NULL;
```","Both queries select suppliers who have not been associated with any orders in the past year. The first query uses LEFT JOIN with a NULL check, while the second uses a NOT IN subquery, but they achieve the same result.","SELECT s.SupplierID FROM suppliers s WHERE NOT EXISTS (SELECT 1 FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID WHERE p.SupplierID = s.SupplierID AND o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR));","The generated query uses a subquery with 'NOT EXISTS' and DATE_SUB, which may not be supported in standard SQL. The ground truth uses 'NOT IN' with date subtraction using standard syntax.",Base
What is the total number of orders placed by each customer?,"SELECT orders.CustomerID, COUNT(*) AS TotalOrders FROM orders GROUP BY orders.CustomerID;","```sql
SELECT CustomerID, COUNT(OrderID) AS TotalOrders
FROM orders
GROUP BY CustomerID;
```",Both queries count the number of orders for each customer by using GROUP BY on CustomerID. The difference in the COUNT function argument does not affect the outcome.,"SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY CustomerID;","Both queries group the orders by CustomerID and count the number of orders, resulting in the same output.",both
What is the most frequently ordered product?,"SELECT ProductID, COUNT(*) AS OrderCount FROM [Order Details] GROUP BY ProductID ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT OrderDetails.ProductID, SUM(OrderDetails.Quantity) AS TotalQuantity
FROM [Order Details] AS OrderDetails
GROUP BY OrderDetails.ProductID
ORDER BY TotalQuantity DESC
LIMIT 1;
```","The generated query sums the quantities ordered, while the ground truth counts the number of orders. The former identifies the product ordered in largest quantity, the latter the most frequently ordered product.","SELECT od.ProductID, COUNT(*) AS Frequency FROM [Order Details] od GROUP BY od.ProductID ORDER BY Frequency DESC LIMIT 1;","Both queries group by ProductID and order by the count in descending order, limiting the result to the top entry, thus answering the question correctly.",FT
Which customer has the highest total order value?,"SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalOrderValue DESC LIMIT 1;","```sql
SELECT c.CustomerID, c.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.CustomerID, c.CompanyName
ORDER BY TotalOrderValue DESC
LIMIT 1;
```","Both queries calculate the total order value for each customer and return the customer with the highest value. The generated query includes the CompanyName in the output, but this does not affect the primary result of finding the highest total order value.","SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalValue DESC LIMIT 1;","Both queries calculate the total order value per customer and return the customer with the highest total. The only difference is the alias used for the aggregated column, which does not affect the result.",both
What is the average fulfillment time for orders each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY DATE_TRUNC('month', OrderDate);","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM 
    orders
GROUP BY 
    Month
```","The DATE_FORMAT function uses '%Y-%m', which may not be compatible with all SQL databases. The DATE_TRUNC function is more universally standard for truncating dates to months.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","Both queries calculate the average fulfillment time by month, using different date functions suitable to MySQL and SQL standard for truncating dates.",FT
Which product category has the highest average unit price?,"SELECT categories.CategoryName, AVG(products.UnitPrice) AS avg_unit_price FROM products JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY avg_unit_price DESC LIMIT 1","```sql
SELECT categories.CategoryName, AVG(products.UnitPrice) AS average_unit_price 
FROM products 
JOIN categories ON products.CategoryID = categories.CategoryID 
GROUP BY categories.CategoryName 
ORDER BY average_unit_price DESC 
LIMIT 1;
```","Both queries retrieve the category with the highest average unit price, using a JOIN, GROUP BY, ORDER BY, and LIMIT to achieve this. The differences in alias naming do not affect the results.","SELECT p.CategoryID, AVG(p.UnitPrice) AS AvgUnitPrice FROM products p GROUP BY p.CategoryID ORDER BY AvgUnitPrice DESC LIMIT 1;","The generated query selects CategoryID instead of CategoryName, which does not directly answer the user's question about product categories.",Base
Identify any outliers in employee sales performance.,"SELECT e.EmployeeID, TotalSales FROM (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, AVG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) OVER () AS AverageSales, STDDEV_SAMP(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) OVER () AS SalesSTD FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID) AS SalesSummary WHERE ABS(TotalSales - AverageSales) > 2 * SalesSTD;","```sql
WITH EmployeeSales AS (
    SELECT 
        e.EmployeeID,
        e.FirstName,
        e.LastName,
        SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
    FROM 
        employees e
    LEFT JOIN 
        orders o ON e.EmployeeID = o.EmployeeID
    LEFT JOIN 
        [Order Details] od ON o.OrderID = od.OrderID
    GROUP BY 
        e.EmployeeID, e.FirstName, e.LastName
),
SalesStats AS (
    SELECT 
        AVG(TotalSales) AS AvgSales,
        STDDEV(TotalSales) AS StdDevSales
    FROM 
        EmployeeSales
)
SELECT 
    es.EmployeeID,
    es.FirstName,
    es.LastName,
    es.TotalSales
FROM 
    EmployeeSales es, SalesStats ss
WHERE 
    es.TotalSales > ss.AvgSales + 2 * ss.StdDevSales 
    OR es.TotalSales < ss.AvgSales - 2 * ss.StdDevSales;
```",Both queries calculate total sales per employee and detect outliers where sales deviate more than two standard deviations from the average. Differences in structure and function usage do not affect the outcome.,"SELECT EmployeeID, SUM(TotalDue) AS total_sales FROM orders WHERE EmployeeID IS NOT NULL GROUP BY EmployeeID HAVING SUM(TotalDue) < (SELECT AVG(TotalSales) - 2 * STDEV(TotalSales) FROM (SELECT SUM(TotalDue) AS TotalSales FROM orders WHERE EmployeeID IS NOT NULL GROUP BY EmployeeID) subquery) OR SUM(TotalDue) > (SELECT AVG(TotalSales) + 2 * STDEV(TotalSales) FROM (SELECT SUM(TotalDue) AS TotalSales FROM orders WHERE EmployeeID IS NOT NULL GROUP BY EmployeeID) subquery);","The generated query calculates outliers using basic aggregation without considering the 'Order Details' table, while the ground truth query uses detailed calculations including discount and joins, leading to potentially different results.",Base
How many orders were delivered on time each month?,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, COUNT(*) AS OnTimeOrders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    COUNT(OrderID) AS OnTimeDeliveries
FROM 
    orders
WHERE 
    ShippedDate <= RequiredDate
GROUP BY 
    DATE_FORMAT(OrderDate, '%Y-%m')
```","Both queries calculate the number of on-time deliveries per month by checking if the ShippedDate is less than or equal to the RequiredDate, and group the results by year and month based on the OrderDate. They will yield the same results.","SELECT DATE_FORMAT(o.ShippedDate, '%Y-%m') AS Month, COUNT(ORDER_ID) AS OnTimeDeliveries FROM orders o WHERE o.ShippedDate <= o.RequiredDate GROUP BY DATE_FORMAT(o.ShippedDate, '%Y-%m');","The generated query groups by ShippedDate, while the ground truth groups by OrderDate. This could yield different monthly counts if ShippedDate and OrderDate fall in different months.",Base
Which employee has processed the maximum number of orders?,"SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```","The generated query does not join with the employees table, which may lead to incorrect results if 'orders' has EmployeeIDs not existing in 'employees'.","SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1;","Both queries aim to find the employee who has processed the maximum number of orders. The generated query assumes EmployeeID exists in the orders table and correctly groups and counts orders by EmployeeID. The ground truth query joins with the employees table, but since both target the same result, they yield the same outcome.",FT
Find all customers who have never placed an order.,SELECT CustomerID FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders);,"```sql
SELECT * 
FROM customers 
WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders);
```","Both queries aim to find customers whose CustomerID is not present in the orders table. Although the generated query selects all columns from the customers table while the ground truth selects only CustomerID, both yield the same set of customer records.","SELECT CustomerID, CompanyName FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders);","The Generated SQL Query includes 'CompanyName' in the SELECT clause, which the Ground Truth SQL Query does not. This causes a difference in the query results since the user only asked for 'CustomerID'.",Base
How many discontinued products are there?,SELECT COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1;,"```sql
SELECT COUNT(*) AS DiscontinuedProductsCount
FROM products
WHERE Discontinued = 1;
```","Both queries count the number of discontinued products from the 'products' table where the 'Discontinued' column equals 1. The difference is only in the alias used for the count result, which does not affect the output.",SELECT COUNT(*) AS DiscontinuedCount FROM products WHERE Discontinued = 1;,Both queries count the number of discontinued products by checking if Discontinued equals 1. The difference is only in the alias used.,both
List the top 10 best-selling products by sales revenue.,"SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS SalesRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY SalesRevenue DESC LIMIT 10;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS SalesRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY SalesRevenue DESC
LIMIT 10;
```","The generated SQL query and the ground truth query are functionally identical, returning the top 10 best-selling products by sales revenue grouped by ProductID and ProductName, ordered in descending order.","SELECT p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalRevenue DESC LIMIT 10;","The generated query includes a discount calculation in the revenue computation which is not present in the ground truth query, leading to potentially different results.",Base
Which employee has processed the most orders?,"SELECT EmployeeID, COUNT(OrderID) AS OrdersProcessed FROM orders GROUP BY EmployeeID ORDER BY OrdersProcessed DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries count the number of orders processed by each employee, order the results by that count in descending order, and limit the output to the top result.","SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;","Both queries accurately identify the employee who has processed the most orders by counting the number of orders per employee and ordering the results in descending order, limiting the output to the top result. The difference in column alias does not affect the query results.",both
What is the total quantity of each product sold?,"SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od GROUP BY od.ProductID;","```sql
SELECT [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalQuantity
FROM [Order Details]
GROUP BY [Order Details].ProductID;
```","Both queries produce the same results as they calculate the total quantity of each product sold by summing the quantity for each ProductID from the 'Order Details' table, and grouping by ProductID. The difference is only in the naming alias of the table, which does not affect the outcome.","SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;","The generated query groups results by ProductName, while the ground truth query groups by ProductID. This could lead to different results if multiple products share the same name.",Base
What is the total sales for each month in 2023?,"SELECT DATE_TRUNC('month', orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month","```sql
SELECT MONTH(orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE YEAR(orders.OrderDate) = 2023 
GROUP BY MONTH(orders.OrderDate)
```","Both queries calculate total sales for each month in 2023. They differ in how they extract the month, but functionally yield the same results.","SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY Month;","The generated query uses DATE_FORMAT instead of DATE_TRUNC, which could lead to differences depending on the SQL dialect. Additionally, the generated query uses square brackets for table and column names, which may affect execution based on the SQL environment.",Base
Find the most ordered product in terms of quantity.,"SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC FETCH FIRST 1 ROW ONLY","```sql
SELECT ProductID, SUM(Quantity) AS TotalQuantity
FROM [Order Details]
GROUP BY ProductID
ORDER BY TotalQuantity DESC
LIMIT 1;
```","The generated query uses LIMIT 1, which may not be supported in all SQL standards. ANSI SQL uses FETCH FIRST 1 ROW ONLY as in the ground truth query.","SELECT p.ProductName, SUM(od.Quantity) as TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 1;","The generated query returns the product name, while the ground truth query returns the ProductID. They both fetch the most ordered product in terms of quantity, but the selected columns differ.",None
Calculate the average time between order and shipment.,"SELECT AVG(DATE_PART('day', o.ShippedDate - o.OrderDate)) AS AvgShippingTime FROM orders o WHERE o.ShippedDate IS NOT NULL;","```sql
SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime
FROM orders
WHERE ShippedDate IS NOT NULL;
```",Both queries calculate the average number of days between OrderDate and ShippedDate for non-null ShippedDate values. The methods (DATEDIFF vs. DATE_PART) achieve the same outcome.,"SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM orders;","The generated query does not handle NULL values in 'ShippedDate', while the ground truth query does.",Base
What is the effect of discount on the total sales quantity?,"SELECT Discount, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] GROUP BY Discount;","```sql
SELECT 
    SUM(od.Quantity) AS TotalSalesQuantity,
    AVG(od.Discount) AS AverageDiscount
FROM 
    [Order Details] od
GROUP BY 
    od.Discount
```","Both queries calculate the total quantity of sales grouped by discount, thus showing the effect of discount on total sales quantity.","SELECT Discount, SUM(od.Quantity) AS TotalSalesQuantity FROM [Order Details] od GROUP BY Discount;","Both queries calculate the total sales quantity grouped by discount from the 'Order Details' table, yielding the same results.",both
What is the inventory turnover ratio for the last month?,SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE YEAR(od.sale_date) = YEAR(CURRENT_DATE) AND MONTH(od.sale_date) = MONTH(CURRENT_DATE) - 1;,"```sql
SELECT 
    SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio
FROM 
    products
JOIN 
    [Order Details] ON products.ProductID = [Order Details].ProductID
WHERE 
    MONTH([Order Details].OrderID) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) 
    AND YEAR([Order Details].OrderID) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH);
```","The generated query uses OrderID for date filtering, which is incorrect. The Ground Truth query uses sale_date, likely the correct date column for filtering.",SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE EXTRACT(MONTH FROM od.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE - INTERVAL '1 month') AND EXTRACT(YEAR FROM od.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '1 month');,"The generated query uses CURRENT_DATE - INTERVAL '1 month' for both months and years, while the ground truth simply adjusts the month by -1. This may lead to different results near year boundaries.",None
Which products have a unit price greater than the average unit price of all products?,SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);,"```sql
SELECT ProductID, ProductName, UnitPrice
FROM products
WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);
```","The generated query returns ProductID and UnitPrice in addition to ProductName, while the ground truth query returns only ProductName.",SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);,Both queries accurately select product names with a unit price greater than the average unit price of all products. They are identical and yield the same results.,FT
What is the average order value for each customer segment?,"SELECT customerCustomerDemo.CustomerTypeID, AVG(total_order_value) AS avg_order_value FROM (SELECT orders.CustomerID, customerCustomerDemo.CustomerTypeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customerCustomerDemo ON orders.CustomerID = customerCustomerDemo.CustomerID GROUP BY orders.CustomerID, customerCustomerDemo.CustomerTypeID) subquery GROUP BY customerCustomerDemo.CustomerTypeID;","```sql
SELECT customerDemographics.CustomerTypeID, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN customers ON orders.CustomerID = customers.CustomerID 
JOIN customerCustomerDemo ON customers.CustomerID = customerCustomerDemo.CustomerID 
JOIN customerDemographics ON customerCustomerDemo.CustomerTypeID = customerDemographics.CustomerTypeID 
GROUP BY customerDemographics.CustomerTypeID
```","The generated query divides the total by the count of distinct orders, whereas the ground truth query computes the average based on customer's total order value. They use different aggregation logic.","SELECT (CASE WHEN customers.Region IS NULL THEN 'UNKNOWN' ELSE customers.Region END) as Segment, AVG(order_total) AS avg_order_value FROM (SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS order_total FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID) subquery JOIN customers ON subquery.CustomerID = customers.CustomerID GROUP BY Segment;","The generated SQL groups by Region, while the ground truth groups by CustomerTypeID.",None
Which product generates the highest profit margin?,"SELECT p.ProductName, ((od.UnitPrice - p.UnitPrice) / od.UnitPrice) AS ProfitMargin FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID ORDER BY ProfitMargin DESC LIMIT 1;","```sql
SELECT p.ProductID, p.ProductName, 
       (SUM(od.Quantity * od.UnitPrice) - (p.UnitPrice * SUM(od.Quantity))) AS ProfitMargin
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY ProfitMargin DESC
LIMIT 1;
```","The generated query calculates profit margin based on total sales versus cost, whereas the ground truth query calculates it as a per-unit profit margin. The methodologies differ, so the results may not match.","SELECT p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount) - p.UnitPrice * od.Quantity) AS ProfitMargin FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY ProfitMargin DESC LIMIT 1;","The generated query calculates profit margin differently by summing total profit for each product, while the ground truth calculates profit margin as a ratio on a per-unit basis.",None
How many customers placed orders in both Q1 and Q2 of 2023?,SELECT COUNT(*) AS common_customers FROM ( SELECT orders.CustomerID FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30' GROUP BY orders.CustomerID HAVING COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' THEN orders.OrderID END) > 0 AND COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' THEN orders.OrderID END) > 0 ) AS subquery,"```sql
SELECT COUNT(DISTINCT o.CustomerID) AS customers_count 
FROM orders o 
WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' 
AND o.CustomerID IN (
    SELECT DISTINCT o2.CustomerID 
    FROM orders o2 
    WHERE o2.OrderDate BETWEEN '2023-04-01' AND '2023-06-30'
);
```","Both queries accurately identify customers who placed orders in Q1 and Q2 of 2023, albeit using different methods. The generated query checks for CustomerID existence in both quarters via nested SELECTs, while the ground truth query uses GROUP BY with HAVING to ensure orders in both periods. Both derive the correct customer count.",SELECT COUNT(DISTINCT CustomerID) AS customers_in_q1_and_q2 FROM ( SELECT CustomerID FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-03-31' UNION SELECT CustomerID FROM orders WHERE OrderDate BETWEEN '2023-04-01' AND '2023-06-30' ) AS subquery;,"The generated SQL query finds unique customers who ordered in either Q1 or Q2, not necessarily in both. The ground truth query correctly identifies customers who placed orders in both quarters.",Base
How many orders were shipped but never reached the required date?,SELECT COUNT(*) AS NeverOnTime FROM orders WHERE ShippedDate IS NOT NULL AND ShippedDate > RequiredDate;,"```sql
SELECT COUNT(OrderID) 
FROM orders 
WHERE ShippedDate > RequiredDate;
```","Both queries count orders where the ShippedDate is later than the RequiredDate, indicating late shipments.",SELECT COUNT(OrderID) as LateOrders FROM orders WHERE ShippedDate > RequiredDate;,"Both queries count orders where the ShippedDate is later than the RequiredDate. The result is the same, though the ground truth query additionally checks that ShippedDate is not null, which is logically implied in the context of dates being compared.",both
How many different products are customers ordering each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(DISTINCT ProductID) AS UniqueProducts FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    COUNT(DISTINCT ProductID) AS DifferentProductsOrdered
FROM
    orders
JOIN
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY
    Month
```","Both queries calculate the number of distinct products ordered each month. They use the same logic with minor differences in column aliases and order of table joins, which do not affect the outcome.","SELECT DATE_TRUNC('month', o.OrderDate) as Month, COUNT(DISTINCT od.ProductID) as UniqueProducts FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month ORDER BY Month;","Both queries calculate the number of unique products ordered each month by truncating or formatting the 'OrderDate' to a month and then counting distinct ProductIDs, which should yield the same result.",both
"For orders with a shipping cost higher than the average, what is the average fulfillment time?","SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE Freight > (SELECT AVG(Freight) FROM orders);","```sql
SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageFulfillmentTime
FROM orders
WHERE orders.Freight > (SELECT AVG(Freight) FROM orders);
```","Both queries calculate the average fulfillment time for orders with a shipping cost higher than the average. The differences are only in naming conventions, which do not affect the result.","SELECT AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgFulfillmentTime FROM orders o WHERE o.Freight > (SELECT AVG(o2.Freight) FROM orders o2);",Both queries calculate the average fulfillment time for orders with shipping costs above the average shipping cost. They use AVG and DATEDIFF in the same way and have equivalent WHERE clauses.,both
Find the total freight cost by shipping company.,"SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, SUM(Freight) AS TotalFreightCost
FROM orders
GROUP BY ShipVia;
```","Both queries group the orders by 'ShipVia' and calculate the sum of 'Freight'. The only difference is the alias used for the total freight cost, which does not affect the outcome.","SELECT ShipVia, SUM(Freight) AS Total_Freight_Cost FROM orders GROUP BY ShipVia;",Both queries calculate the total freight cost grouped by shipping company (ShipVia) and are functionally equivalent despite differing alias names.,both
Which region has the highest total sales?,"SELECT Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Region ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT e.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.Region
ORDER BY TotalSales DESC
LIMIT 1;
```","The generated query uses 'e.Region', which assumes 'Region' is in 'employees', but it must match ground truth's usage if 'Region' is from a different source.","SELECT c.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Region ORDER BY TotalSales DESC LIMIT 1;","The generated SQL query joins on the 'customers' table to determine 'Region', while the ground truth query uses the 'employees' table for the same purpose. This difference in joins may lead to different regions being considered, resulting in different outputs.",None
Which employee has generated the highest total sales this year?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE)
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries calculate total sales by summing UnitPrice, Quantity, and applying the Discount, grouping by EmployeeID, filtering by the current year, and ordering to get the highest total sales. The difference in selected columns does not affect the result.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID ORDER BY employee_total_sales DESC LIMIT 1;","Both queries calculate the total sales per employee for the current year, grouping by EmployeeID and ordering by the highest total sales in descending order. They return the top result, which is the employee with the highest total sales. The logic and the calculations are functionally equivalent.",both
Identify products below their reorder levels.,SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock < ReorderLevel;
```","The generated query selects additional columns (ProductID and ReorderLevel) compared to the ground truth query, which only selects ProductName.",SELECT p.ProductName FROM products p WHERE p.UnitsInStock + p.UnitsOnOrder <= p.ReorderLevel;,"The generated query checks if the sum of UnitsInStock and UnitsOnOrder is less than or equal to the ReorderLevel, while the ground truth only checks if UnitsInStock is less than the ReorderLevel.",None
What is the total number of discontinued products?,SELECT COUNT(*) AS discontinued_product_count FROM products WHERE Discontinued = 1,"```sql
SELECT COUNT(*) AS total_discontinued_products FROM products WHERE Discontinued = 1
```","Both queries perform the same operation: counting the number of products where the 'Discontinued' flag is set to 1. The only difference is in the alias name for the count, which does not affect the result.",SELECT COUNT(*) FROM products WHERE Discontinued = 1;,Both queries count the rows from the 'products' table where the 'Discontinued' column equals 1. The difference in the column alias does not affect the result count.,both
What is the total inventory value for each product?,"SELECT ProductName, UnitsInStock * UnitPrice AS InventoryValue FROM products;","```sql
SELECT 
    ProductID, 
    ProductName, 
    (UnitPrice * UnitsInStock) AS TotalInventoryValue
FROM 
    products;
```","Both queries calculate the total inventory value for each product using UnitPrice multiplied by UnitsInStock, and retrieve from the same table.","SELECT ProductName, (UnitPrice * UnitsInStock) AS InventoryValue FROM products;","Both queries calculate the total inventory value for each product by multiplying UnitPrice with UnitsInStock and display it as InventoryValue for each ProductName. Though there is a slight difference in the expression order, they yield the same result.",both
What is the average lead time for suppliers to deliver products?,"SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS Avg_Lead_Time FROM orders JOIN products ON orders.OrderID = products.ProductID GROUP BY products.SupplierID","```sql
SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
```","The generated query calculates the overall average lead time for all suppliers, while the ground truth computes the average lead time for each supplier and groups results by SupplierID.","SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID GROUP BY p.SupplierID;","The generated query correctly calculates the average lead time for products by joining 'Order Details' table using 'ProductID', which is necessary, while the ground truth incorrectly joins 'orders' and 'products' directly by 'OrderID'. The generated query also uses the correct group by 'SupplierID' and date difference calculation.",None
Calculate the Product Performance for each product over the last year.,"SELECT p.ProductID, SUM(od.Quantity) AS TotalPerformance FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY p.ProductID;","```sql
SELECT products.ProductID, 
       SUM([Order Details].Quantity) AS TotalQuantitySold
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
WHERE [Order Details].OrderID IN (
    SELECT OrderID 
    FROM orders 
    WHERE OrderDate >= DATEADD(year, -1, GETDATE())
)
GROUP BY products.ProductID
```","The generated query filters by OrderID using a subquery on orders table, whereas it should filter by OrderDate in the Order Details table directly, similar to the ground truth.","SELECT p.ProductName, SUM(od.Quantity) AS Performance FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN DATEADD(year, -1, CURRENT_DATE) AND CURRENT_DATE GROUP BY p.ProductName ORDER BY Performance DESC;","The queries differ in their handling of date range and their grouping basis. The generated query uses 'OrderDate BETWEEN DATEADD(year, -1, CURRENT_DATE) AND CURRENT_DATE', while the ground truth uses 'od.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)'. Additionally, the ground truth groups by 'ProductID', whereas the generated query groups by 'ProductName'. These differences can lead to different results.",None
Determine the impact of discounts on the average order value.,"SELECT AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValueWithDiscount, AVG(od.UnitPrice * od.Quantity) AS AverageOrderValueWithoutDiscount FROM [Order Details] od;","```sql
SELECT 
    AVG(OrderDetails.UnitPrice * OrderDetails.Quantity * (1 - OrderDetails.Discount)) AS AverageOrderValue
FROM 
    [Order Details] AS OrderDetails;
```","The generated query only calculates the average order value with discounts applied, while the ground truth query calculates both with and without discounts to determine the impact.","SELECT o.Discount, AVG(od.UnitPrice * od.Quantity * (1 - o.Discount)) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.Discount;","The generated query groups results by order discount and calculates the average per discount group, while the ground truth query calculates two overall averages: one including discounts and one excluding discounts, without grouping.",None
What is the total quantity of products sold each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Quantity) AS TotalQuantitySold FROM Orders INNER JOIN [Order Details] ON Orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT 
    DATE_FORMAT(O.OrderDate, '%Y-%m') AS Month,
    SUM(OD.Quantity) AS TotalQuantitySold
FROM 
    [Order Details] OD
JOIN 
    Orders O ON OD.OrderID = O.OrderID
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries calculate the total quantity of products sold each month by joining Orders with Order Details, grouping by month, and summing the quantities. The generated query uses an alias for the month, but this does not affect the result.","SELECT EXTRACT(MONTH FROM OrderDate) AS Month, SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY EXTRACT(MONTH FROM OrderDate) ORDER BY Month;","The generated query groups by month only, while the ground truth groups by year and month. This can result in different totals if there are multiple years in the data.",Base
Which employee has the maximum average order value?,"SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY AvgOrderValue DESC LIMIT 1","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
ORDER BY AverageOrderValue DESC
LIMIT 1;
```",Both queries compute the maximum average order value for employees and limit the result to the top employee. They join the same tables and calculate the average order value similarly.,"SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AverageOrderValue DESC LIMIT 1;","Both queries calculate the average order value per employee and return the employee with the highest average order value. They use the same joins and calculations, resulting in the same final output.",both
What percentage of orders were shipped late each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, (COUNT(OrderID) - COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END)) * 100.0 / COUNT(OrderID) AS LateDeliveryRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT 
    YEAR(OrderDate) AS Year,
    MONTH(OrderDate) AS Month,
    (COUNT(OrderID WHERE ShippedDate > RequiredDate) * 100.0 / COUNT(OrderID)) AS LateShipmentPercentage
FROM 
    orders
GROUP BY 
    YEAR(OrderDate), MONTH(OrderDate);
```",The generated query uses a non-standard WHERE syntax in COUNT and does not correctly handle cases where ShippedDate is null. The ground truth query uses CASE for better handling.,"SELECT DATE_TRUNC('month', o.ShippedDate) AS month, COUNT(CASE WHEN o.ShippedDate > o.RequiredDate THEN 1 END) / COUNT(o.OrderID) * 100 AS late_shipment_percentage FROM orders o WHERE o.ShippedDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month","The generated query uses DATE_TRUNC and a specific date range, while the ground truth uses DATE_FORMAT and considers all data. Also, the conditions for late orders are evaluated differently.",None
Find the products with the highest discount offered and which suppliers provide them.,"SELECT p.ProductID, p.ProductName, s.SupplierID, s.CompanyName, od.Discount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE od.Discount = (SELECT MAX(Discount) FROM [Order Details]) ORDER BY od.Discount DESC;","```sql
SELECT p.ProductName, s.CompanyName, od.Discount
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN suppliers s ON p.SupplierID = s.SupplierID
WHERE od.Discount = (SELECT MAX(Discount) FROM [Order Details]);
```",Both queries effectively find products with the highest discount and corresponding suppliers by using a subquery to get the maximum discount from the 'Order Details' table and filtering the results based on this condition. The differences in selected columns do not impact the core functionality of finding the products and suppliers linked to the maximum discount.,"SELECT p.ProductName, p.Discontinued, s.CompanyName FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.Discount = (SELECT MAX(Discount) FROM [Order Details]);","The generated query checks for MAX discount in the products table, but discounts are actually in the Order Details table as per the ground truth. The generated query may not return the correct results as it looks at the wrong table for discounts.",Base
Find customers with orders that have been delayed more than a week.,"SELECT c.CustomerID FROM orders o JOIN customers c ON o.CustomerID = c.CustomerID WHERE DATEDIFF(DAY, RequiredDate, ShippedDate) > 7;","```sql
SELECT DISTINCT c.CustomerID, c.CompanyName, c.ContactName, c.ContactTitle, c.Address, c.City, c.Region, c.PostalCode, c.Country, c.Phone, c.Fax
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
WHERE DATEDIFF(o.ShippedDate, o.RequiredDate) > 7;
```","The generated query retrieves customer details, while the ground truth query retrieves only CustomerID. Also, the date difference calculation might differ depending on SQL dialect as generated query uses 'DATEDIFF(o.ShippedDate, o.RequiredDate)' which assumes default unit of days, while ground truth specifies 'DATEDIFF(DAY, RequiredDate, ShippedDate)'.","SELECT DISTINCT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE DATEDIFF(orders.ShippedDate, orders.RequiredDate) > 7;","Both queries correctly identify customers with orders delayed more than a week. The difference in DATEDIFF function parameter order does not affect the equality of results as both calculate the difference of days between ShippedDate and RequiredDate. Additionally, both identify distinct CustomerIDs.",FT
How does the on-time delivery rate vary by region?,"SELECT ShipRegion, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID)) * 100 AS on_time_delivery_rate FROM orders GROUP BY ShipRegion;","```sql
SELECT ShipRegion, 
       COUNT(OrderID) AS TotalOrders, 
       COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveries, 
       (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID)) AS OnTimeDeliveryRate
FROM orders
GROUP BY ShipRegion;
```","Both queries calculate the on-time delivery rate by region using a similar approach. The generated query also includes additional columns for TotalOrders and OnTimeDeliveries, which does not affect the on-time delivery rate calculation.","SELECT region.RegionDescription, COUNT(CASE WHEN Shippers.Freight > 0 THEN 1 END) AS late_deliveries, COUNT(o.OrderID) AS total_orders, 1 - (COUNT(CASE WHEN Shippers.Freight > 0 THEN 1 END) * 1.0 / COUNT(o.OrderID)) AS on_time_rate FROM orders o JOIN customers c ON o.CustomerID = c.CustomerID JOIN employeeTerritories et ON o.EmployeeID = et.EmployeeID JOIN territories t ON et.TerritoryID = t.TerritoryID JOIN region ON t.RegionID = region.RegionID JOIN shippers ON o.ShipVia = shippers.ShipperID GROUP BY region.RegionDescription","The generated query uses shipping cost to determine late deliveries, whereas the ground truth query uses shipment dates to calculate the on-time delivery rate.",Base
List the top 3 customers by order volume.,"SELECT customers.CompanyName, COUNT(orders.OrderID) AS OrderVolume FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CompanyName ORDER BY OrderVolume DESC LIMIT 3;","```sql
SELECT customers.CustomerID, customers.CompanyName, SUM([Order Details].Quantity) AS TotalOrderVolume
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID, customers.CompanyName
ORDER BY TotalOrderVolume DESC
LIMIT 3;
```","The generated query calculates order volume by summing quantities from 'Order Details', whereas the ground truth query counts the number of orders.","SELECT c.CustomerID, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY OrderCount DESC LIMIT 3;","The generated query returns CustomerID while the ground truth query returns CompanyName. Both queries correctly order by order volume and limit the results to the top 3, but they select different columns.",None
What is the trend in average freight cost over the past six months?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgFreight FROM orders WHERE OrderDate >= DATEADD('month', -6, CURRENT_DATE) GROUP BY Month ORDER BY Month DESC;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
    AVG(Freight) AS AverageFreightCost
FROM 
    orders
WHERE 
    OrderDate >= DATEADD(MONTH, -6, CURRENT_DATE)
GROUP BY 
    Month
ORDER BY 
    Month;
```","The Generated SQL Query uses DATE_FORMAT and GROUP BY with ordering in ascending order, whereas the Ground Truth uses DATE_TRUNC with ordering in descending order.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AverageFreight FROM orders WHERE OrderDate >= DATEADD(MONTH, -6, CURRENT_DATE) GROUP BY Month ORDER BY Month;","The order direction in the ORDER BY clause is different. The generated query orders in ascending order, while the ground truth orders in descending order.",None
Find the total sales for each product.,"SELECT p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;","```sql
SELECT products.ProductID, products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY products.ProductID, products.ProductName;
```",Both queries calculate the total sales for each product by joining 'products' and 'Order Details'. They group by product name and compute total sales using the same formula.,"SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSales DESC;","The generated query doesn't account for discounts on the order details, which the ground truth query does.",Base
List employees who have been with the company for over 10 years.,"SELECT employees.EmployeeID, TIMESTAMPDIFF(YEAR, employees.HireDate, CURDATE()) AS YearsWithCompany FROM employees WHERE TIMESTAMPDIFF(YEAR, employees.HireDate, CURDATE()) > 10;","```sql
SELECT EmployeeID, FirstName, LastName, HireDate
FROM employees
WHERE HireDate <= DATE_SUB(CURDATE(), INTERVAL 10 YEAR);
```","Both queries correctly filter employees who have been with the company for over 10 years. The generated query uses DATE_SUB to calculate the date exactly 10 years ago, while the ground truth query uses TIMESTAMPDIFF to calculate the number of years. Both approaches yield the same results, as they effectively compare the hire dates to the current date minus 10 years.","SELECT EmployeeID, FirstName, LastName FROM employees WHERE DATEDIFF(CURRENT_DATE, HireDate) > 3650;","The generated query uses DATEDIFF with days, while the ground truth uses TIMESTAMPDIFF with years. This difference may cause discrepancies in edge cases around leap years.",Base
What is the total quantity sold for each product category?,"SELECT categories.CategoryName, SUM([Order Details].Quantity) AS total_quantity_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName","```sql
SELECT categories.CategoryID, SUM([Order Details].Quantity) AS total_quantity_sold
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN categories ON products.CategoryID = categories.CategoryID
GROUP BY categories.CategoryID
```","The generated query groups by CategoryID while the ground truth groups by CategoryName. The results might be the same if each CategoryID has a unique CategoryName, but they address different aspects of the category information.","```sql
SELECT CategoryID, SUM(Quantity) as TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY CategoryID;
```","The generated query uses CategoryID without including CategoryName, leading to different results compared to the ground truth, which includes category names.",None
What is the average unit price of products supplied by each supplier?,"SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS Average_Unit_Price FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName","```sql
SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AverageUnitPrice
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
GROUP BY suppliers.CompanyName;
```","Both queries perform the same operations: joining suppliers and products on SupplierID, calculating the average unit price, and grouping by CompanyName. The only difference is the alias for the average unit price, which does not affect the outcome.","SELECT s.SupplierID, AVG(p.UnitPrice) AS AvgUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;","Both queries calculate the average unit price of products supplied by each supplier. The difference lies in the selection of columns for the output: one uses SupplierID, and the other uses CompanyName. However, they yield the same aggregated results per supplier.",both
What is the total number of orders shipped late each month?,"SELECT EXTRACT(YEAR FROM o.OrderDate) AS OrderYear, EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, COUNT(o.OrderID) AS LateOrderCount FROM orders o WHERE o.ShippedDate > o.RequiredDate GROUP BY OrderYear, OrderMonth;","```sql
SELECT 
    DATE_FORMAT(orders.ShippedDate, '%Y-%m') AS Month,
    COUNT(orders.OrderID) AS LateOrders
FROM 
    orders
WHERE 
    orders.ShippedDate > orders.RequiredDate
GROUP BY 
    Month
ORDER BY 
    Month;
```","The generated query groups orders by the year and month of the 'ShippedDate', while the ground truth groups them by the year and month of the 'OrderDate'. This could yield different results depending on how 'OrderDate' and 'ShippedDate' correlate within each month.","SELECT DATE_FORMAT(o.ShippedDate, '%Y-%m') AS Month, COUNT(o.OrderID) AS LateOrders FROM orders o WHERE o.ShippedDate > o.RequiredDate GROUP BY Month ORDER BY Month;","The generated query groups by the shipping date (ShippedDate) month, while the ground truth groups by the order date (OrderDate) year and month. This results in different groupings and potentially different counts.",None
Which region has the highest number of delayed deliveries?,"SELECT ShipRegion, COUNT(*) AS DelayedOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipRegion ORDER BY DelayedOrders DESC LIMIT 1;","```sql
SELECT ShipRegion, COUNT(OrderID) AS DelayedDeliveries
FROM orders
WHERE ShippedDate > RequiredDate
GROUP BY ShipRegion
ORDER BY DelayedDeliveries DESC
LIMIT 1;
```","Both queries count the number of delayed deliveries per region and return the region with the highest count. They only differ in the alias for the count column, which does not affect the outcome.","SELECT o.ShipRegion, COUNT(CASE WHEN DATEDIFF(o.ShippedDate, o.RequiredDate) > 0 THEN 1 END) AS DelayedDeliveries FROM orders o GROUP BY o.ShipRegion ORDER BY DelayedDeliveries DESC LIMIT 1;",Both queries accurately calculate regions with the highest number of delayed deliveries by checking if shipments were made after the required date and using a similar aggregation and sorting method.,both
Which city received the highest number of shipments?,"SELECT ShipCity, COUNT(OrderID) FROM orders GROUP BY ShipCity ORDER BY COUNT(OrderID) DESC LIMIT 1;","```sql
SELECT ShipCity, COUNT(OrderID) AS ShipmentCount
FROM orders
GROUP BY ShipCity
ORDER BY ShipmentCount DESC
LIMIT 1;
```","Both queries accurately calculate the city with the highest number of shipments by grouping by ShipCity, counting OrderID, and ordering by the count in descending order with a limit of 1. The slight difference in naming the count column does not affect the correctness of the query.","SELECT ShipCity, COUNT(ShipmentID) AS NumberOfShipments FROM orders GROUP BY ShipCity ORDER BY NumberOfShipments DESC LIMIT 1;","Both queries group by ShipCity and count the shipments, ordering the results by the descending count and limiting to 1. The column being counted differs in name but presumably refers to the same entity, shipments.",both
What is the most common ship-to country for orders placed in 2023?,"SELECT orders.ShipCountry, COUNT(orders.OrderID) AS num_orders FROM orders WHERE YEAR(orders.OrderDate) = 2023 GROUP BY orders.ShipCountry ORDER BY num_orders DESC LIMIT 1;","```sql
SELECT ShipCountry, COUNT(OrderID) AS order_count
FROM orders
WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY ShipCountry
ORDER BY order_count DESC
LIMIT 1;
```",Both queries count orders for each ShipCountry in 2023 and return the one with the highest count. They use different methods to filter by date but achieve the same outcome.,"SELECT ShipCountry, COUNT(OrderID) AS TotalOrders FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY ShipCountry ORDER BY TotalOrders DESC LIMIT 1;",Both queries count orders per ShipCountry for 2023 and return the country with the highest count.,both
Which products have a reorder level higher than 100?,SELECT p.ProductName FROM products p WHERE p.ReorderLevel > 100;,"```sql
SELECT ProductID, ProductName, ReorderLevel
FROM products
WHERE ReorderLevel > 100;
```","Both queries filter products with a ReorderLevel greater than 100. The generated query includes additional columns (ProductID and ReorderLevel), but it does not affect the result regarding identifying products with ReorderLevel over 100.",SELECT ProductID FROM products WHERE ReorderLevel > 100;,"The generated query selects ProductID, whereas the ground truth query selects ProductName.",Base
List all orders with a freight cost above a certain threshold.,"SELECT orders.OrderID, orders.Freight FROM orders WHERE orders.Freight > threshold","```sql
SELECT * FROM orders WHERE Freight > [YourThreshold];
```","The generated query retrieves all columns, while the ground truth query selects only OrderID and Freight.","SELECT OrderID, Freight FROM orders WHERE Freight > 50; -- Replace 50 with your desired threshold","Both queries select OrderID and Freight from the orders table where the Freight is greater than a specified threshold. The generated SQL uses a placeholder to specify the threshold, aligning with the intent of the ground truth SQL.",FT
What is the average order value per customer?,"SELECT customers.CustomerID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;","```sql
SELECT 
    c.CustomerID, 
    AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue 
FROM 
    customers c 
JOIN 
    orders o ON c.CustomerID = o.CustomerID 
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID 
GROUP BY 
    c.CustomerID;
```","Both queries calculate the average order value per customer by joining customers, orders, and order details tables, and using the same formula and criteria for aggregation.","SELECT c.CustomerID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;","Both queries compute the average order value per customer by joining the customers, orders, and order details tables, grouping by CustomerID, and calculating the average based on UnitPrice, Quantity, and Discount. The table aliases and names differ but do not affect the logic or result.",both
Which supplier has the highest total sales revenue from their products?,"SELECT p.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY suppliers.CompanyName
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries calculate the total sales revenue by combining order details and product information, then group by supplier and order by total sales to find the highest. Although the generated query uses CompanyName, it achieves the same result due to aggregation and ordering.","SELECT s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS SupplierSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.CompanyName ORDER BY SupplierSales DESC LIMIT 1;","Both queries calculate the total sales for each supplier and return the supplier with the highest total sales. The generated query includes the company name for readability, whereas the ground truth query uses SupplierID, but their results regarding the highest total sales are the same.",both
Which product has the highest reorder level?,SELECT ProductName FROM products ORDER BY ReorderLevel DESC LIMIT 1;,"```sql
SELECT ProductName, ReorderLevel 
FROM products 
ORDER BY ReorderLevel DESC 
LIMIT 1;
```","The generated query retrieves both ProductName and ReorderLevel, while the ground truth only retrieves ProductName. However, the orders and limits match, so the resulting product is the same.","SELECT ProductName, ReorderLevel FROM products ORDER BY ReorderLevel DESC LIMIT 1;","Both queries will return the same product since they correctly order by ReorderLevel in descending order and limit the result to one, identifying the product with the highest reorder level.",FT
Which suppliers have products with zero stock available?,"SELECT s.SupplierID, s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.UnitsInStock = 0;","```sql
SELECT DISTINCT s.SupplierID, s.CompanyName
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
WHERE p.UnitsInStock = 0;
```","Both queries correctly retrieve suppliers with products that have zero units in stock. The use of DISTINCT in the generated SQL query does not affect the outcome, as duplicate results are not expected.",SELECT DISTINCT SupplierID FROM products WHERE UnitsInStock = 0;,"The generated query only returns the SupplierID from the products table, which doesn't guarantee it is from the suppliers table or that the supplier exists, while the ground truth query joins with the suppliers table to ensure a valid supplier and also returns the CompanyName.",Base
Which products have the most units on order?,"SELECT ProductName, UnitsOnOrder FROM products WHERE UnitsOnOrder = (SELECT MAX(UnitsOnOrder) FROM products);","```sql
SELECT ProductID, ProductName, UnitsOnOrder 
FROM products 
ORDER BY UnitsOnOrder DESC;
```","The generated query provides a list of all products ordered by UnitsOnOrder in descending order, while the ground truth query returns only the product(s) with the maximum UnitsOnOrder value.","SELECT ProductID, ProductName, UnitsOnOrder FROM products ORDER BY UnitsOnOrder DESC LIMIT 1;","The generated query limits the result to one product, while the ground truth query returns all products with the maximum units on order.",None
How many orders were placed by the team led by each manager?,"SELECT m.EmployeeID AS ManagerID, COUNT(o.OrderID) FROM employees e JOIN employees m ON e.ReportsTo = m.EmployeeID JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY m.EmployeeID;","```sql
SELECT e.ReportsTo AS ManagerID, COUNT(o.OrderID) AS TotalOrders
FROM employees e
LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.ReportsTo;
```","Both queries aim to find the number of orders placed by employees reporting to each manager. The generated query uses LEFT JOIN, which is more inclusive, but effectively produces the same result when GROUP BY is applied on e.ReportsTo, which aligns with the m.EmployeeID in the ground truth query.","SELECT e1.ReportsTo AS ManagerID, COUNT(o.OrderID) AS OrdersByTeam FROM employees e1 JOIN employees e2 ON e1.ReportsTo = e2.EmployeeID JOIN orders o ON e1.EmployeeID = o.EmployeeID GROUP BY e1.ReportsTo;","Both queries count the number of orders placed by team members under each manager. They join the employees table with itself to establish the manager-employee relationship, then join with the orders to count orders by team members. The grouping is done on the manager ID in both queries.",both
List all products with a reorder point higher than their units in stock.,SELECT ProductName FROM products WHERE ReorderLevel > UnitsInStock;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE ReorderLevel > UnitsInStock;
```","The generated query includes ProductID, UnitsInStock, and ReorderLevel in the SELECT clause, whereas the ground truth query only selects ProductName.",SELECT p.ProductName FROM products p WHERE p.ReorderLevel > p.UnitsInStock;,"Both queries select ProductName from the products table where ReorderLevel is greater than UnitsInStock, yielding the same results.",FT
How many orders has each customer placed in the last year?,"SELECT c.CustomerID, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY c.CustomerID;","```sql
SELECT customers.CustomerID, COUNT(orders.OrderID) AS OrderCount
FROM customers
LEFT JOIN orders ON customers.CustomerID = orders.CustomerID
WHERE orders.OrderDate >= DATEADD(YEAR, -1, GETDATE())
GROUP BY customers.CustomerID;
```","The generated query uses LEFT JOIN, which includes customers without any orders in the count; this could result in zero orders for some customers. The ground truth query uses an INNER JOIN, ensuring only customers with orders are returned.","SELECT c.CustomerID, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate >= DATEADD(year, -1, CURRENT_DATE) GROUP BY c.CustomerID;","Both queries calculate the number of orders placed by each customer in the last year, using different functions to determine the date one year ago. The logic and results are equivalent.",FT
Which product categories have the highest inventory levels?,"SELECT CategoryID, SUM(UnitsInStock) AS TotalInventory FROM products GROUP BY CategoryID;","```sql
SELECT CategoryID, SUM(UnitsInStock) AS TotalInventory
FROM products
GROUP BY CategoryID
ORDER BY TotalInventory DESC;
```","Both queries calculate the total inventory per category, but the generated query orders the results by inventory level, which aligns with user intent.","SELECT c.CategoryID, SUM(p.UnitsInStock + p.UnitsOnOrder) AS TotalStock FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID ORDER BY TotalStock DESC LIMIT 1;","The generated query includes 'UnitsOnOrder' in the calculation, while the ground truth query only sums 'UnitsInStock'. Also, the generated query fetches only one result due to the LIMIT clause, whereas the ground truth does not limit the results.",Base
What is the performance of products in terms of sales quantity for the current month?,"SELECT P.ProductName, SUM(OD.Quantity) AS TotalQuantitySold FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID WHERE MONTH(CURRENT_DATE) = MONTH(OD.OrderDate) AND YEAR(CURRENT_DATE) = YEAR(OD.OrderDate) GROUP BY P.ProductID;","```sql
SELECT p.ProductID, SUM(od.Quantity) AS TotalSalesQuantity
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE MONTH(CURRENT_DATE) = MONTH(od.OrderID) AND YEAR(CURRENT_DATE) = YEAR(od.OrderID)
GROUP BY p.ProductID;
```",The generated query uses 'od.OrderID' to filter the date instead of 'od.OrderDate'. It should use the date column for accurate filtering.,"SELECT ProductID, SUM(Quantity) AS SalesQuantity FROM [Order Details] WHERE MONTH(CURRENT_DATE) = MONTH(OrderDate) AND YEAR(CURRENT_DATE) = YEAR(OrderDate) GROUP BY ProductID;","The generated query does not select the product name, only the ProductID, while the ground truth query returns the product name and aggregates sales by the product name.",None
Which employees work in multiple territories?,"SELECT employees.EmployeeID, COUNT(DISTINCT employeeTerritories.TerritoryID) AS territories_count FROM employees JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID GROUP BY employees.EmployeeID HAVING territories_count > 1","```sql
SELECT EmployeeID
FROM employeeTerritories
GROUP BY EmployeeID
HAVING COUNT(DISTINCT TerritoryID) > 1
```","Both queries identify employees who work in more than one territory by grouping by EmployeeID and counting distinct TerritoryIDs, using a HAVING clause to filter results by COUNT greater than 1.","SELECT e.EmployeeID, COUNT(DISTINCT et.TerritoryID) AS TerritoryCount FROM employees e JOIN employeeTerritories et ON e.EmployeeID = et.EmployeeID GROUP BY e.EmployeeID HAVING TerritoryCount > 1;",Both queries calculate the number of distinct territories each employee is associated with and filter employees having more than one territory.,both
What is the distribution of orders by shipping region?,"SELECT ShipRegion, COUNT(*) AS orders_count FROM orders GROUP BY ShipRegion;","```sql
SELECT ShipRegion, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY ShipRegion;
```","Both queries group the data by ShipRegion and count the number of orders, yielding the same result.","SELECT ShipRegion, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipRegion ORDER BY NumberOfOrders DESC;","Both queries group by 'ShipRegion' and count the number of orders. The generated query adds an ORDER BY clause, which does not alter the results but sorts them.",both
What is the average order value for each customer?,"SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID;","```sql
SELECT orders.CustomerID, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY orders.CustomerID;
```",Both queries calculate the average order value for each customer by dividing the total sales value by the distinct count of order IDs for each customer. They yield the same results.,"SELECT c.CustomerID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;","Both queries aim to calculate the average order value per customer, and they both correctly account for discounts. While they use different methods, one using AVG and the other SUM divided by COUNT(DISTINCT), the results should be equivalent in the context. They group by the same CustomerID and consider the correct join conditions.",both
Identify products with zero units on order.,SELECT products.ProductName FROM products WHERE products.UnitsOnOrder = 0,"```sql
SELECT ProductID, ProductName
FROM products
WHERE UnitsOnOrder = 0;
```","Both queries select products with zero units on order from the 'products' table. The only difference is the inclusion of 'ProductID' in the generated query, which does not affect the correctness with respect to the user's question.",SELECT ProductName FROM products WHERE UnitsOnOrder = 0;,Both queries select the product names from the products table where UnitsOnOrder is zero. They will yield the same results.,both
Which product had the highest total sales in the last quarter?,"SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductSales FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' AND o.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY od.ProductID ORDER BY ProductSales DESC LIMIT 1;","```sql
SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' AND 
      o.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE)
GROUP BY od.ProductID
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries calculate total sales for each product in the last quarter, sorting by total sales descending, and limiting to the top result. The queries are logically equivalent despite differences in naming conventions.","SELECT P.ProductName, SUM(OD.Quantity * OD.UnitPrice) AS TotalSales FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID JOIN orders O ON OD.OrderID = O.OrderID WHERE O.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND CURRENT_DATE GROUP BY P.ProductName ORDER BY TotalSales DESC LIMIT 1;",The generated query does not account for discounts and uses a different date range for the last quarter compared to the ground truth query.,Base
Calculate the total units ordered for each product this year.,"SELECT p.ProductName, SUM(od.Quantity) AS TotalUnitsOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY p.ProductName;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalUnitsOrdered
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE)
GROUP BY p.ProductID, p.ProductName;
```",Both queries calculate the total units ordered per product this year and group by ProductName. The inclusion of ProductID in the generated query does not affect the result as both will yield the same aggregated totals for each product.,"SELECT ProductID, SUM(Quantity) AS TotalUnitsOrdered FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY ProductID","The generated query groups by ProductID, not ProductName, which could lead to different outputs if there are products with identical names across different IDs.",Base
What is the average discount provided across all orders for a particular product?,"SELECT products.ProductName, AVG([Order Details].Discount) AS AverageDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;","```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details]
WHERE ProductID = ?;
```",The generated SQL query calculates the average discount for a specific ProductID but does not include the product name as in the ground truth query. The ground truth query also uses a JOIN to ensure the product is valid and groups the result by ProductID.,"SELECT od.ProductID, AVG(od.Discount) AS AverageDiscount FROM [Order Details] od GROUP BY od.ProductID;","The generated query returns average discounts by ProductID but lacks any product name information. The ground truth query includes a JOIN to provide product names, which may result in different outputs if the intent was to identify products by name.",None
What is the Inventory Turnover Ratio for each product last month?,"SELECT p.ProductID, (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) AS InventoryTurnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate BETWEEN DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 second' GROUP BY p.ProductID;","```sql
SELECT 
    p.ProductID,
    p.ProductName,
    SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
WHERE 
    MONTH(od.OrderID) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) 
    AND YEAR(od.OrderID) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH)
GROUP BY 
    p.ProductID, p.ProductName;
```","The generated query uses od.OrderID in the WHERE clause to determine dates, which is incorrect because OrderID is not a date field. The ground truth uses od.OrderDate, which is correct. Also, the ground truth query truncates the month using DATE_TRUNC, ensuring the correct date range for last month.","SELECT ProductID, (SUM(od.Quantity * od.UnitPrice) / AVG(inventory.InventoryID)) AS InventoryTurnoverRatio FROM [Order Details] od JOIN inventory on od.ProductID = inventory.ProductID JOIN orders o ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = 2023 AND EXTRACT(MONTH FROM o.OrderDate) = 9 GROUP BY ProductID;","The generated query calculates turnover using the InventoryID instead of UnitsInStock and filters by a fixed date range, while the ground truth query dynamically calculates the previous month and uses UnitsInStock for the turnover calculation.",None
How many orders placed in Q2 2023 used expedited shipping?,SELECT COUNT(OrderID) AS expedited_orders FROM orders WHERE ShipVia IN (SELECT ShipperID FROM shippers WHERE CompanyName LIKE '%Expedited%') AND OrderDate BETWEEN '2023-04-01' AND '2023-06-30',"```sql
SELECT COUNT(orders.OrderID) AS expedited_orders
FROM orders
WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' 
AND orders.ShipVia = (SELECT ShipperID FROM shippers WHERE CompanyName = 'Expedited Shipping');
```","The generated query assumes a specific CompanyName 'Expedited Shipping', while the ground truth query uses a pattern match '%Expedited%' which could include variations like 'Fast Expedited Shipping'.",SELECT COUNT(o.OrderID) AS ExpeditedOrders FROM orders o JOIN shippers s ON o.ShipVia = s.ShipperID WHERE Q2_2023 AND (s.CompanyName LIKE '%Express%'). The query needs to calculate the total count of orders placed in the second quarter of 2023 that opted for expedited shipping.,"The generated query uses a condition Q2_2023 instead of a date range for the second quarter of 2023. It also checks for 'Express' in the company name, while the ground truth checks for 'Expedited'.",None
Find the top 3 products with the most significant increase in order quantities month-over-month.,"WITH MonthlySales AS (SELECT DATE_TRUNC('month', o.OrderDate) AS Month, od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY Month, od.ProductID), MonthOverMonthChange AS (SELECT a.ProductID, a.Month, a.TotalQuantity, a.TotalQuantity - COALESCE(b.TotalQuantity, 0) AS Increase FROM MonthlySales a LEFT JOIN MonthlySales b ON a.ProductID = b.ProductID AND a.Month = b.Month + INTERVAL '1 month') SELECT ProductID FROM MonthOverMonthChange ORDER BY Increase DESC LIMIT 3;","```sql
WITH MonthlyOrderQuantities AS (
    SELECT 
        p.ProductID, 
        p.ProductName, 
        EXTRACT(YEAR FROM o.OrderDate) AS OrderYear,
        EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth,
        SUM(od.Quantity) AS TotalQuantity
    FROM 
        [Order Details] od
    JOIN 
        orders o ON od.OrderID = o.OrderID
    JOIN 
        products p ON od.ProductID = p.ProductID
    GROUP BY 
        p.ProductID, p.ProductName, OrderYear, OrderMonth
),
MonthlyIncreases AS (
    SELECT 
        Current.ProductID, 
        Current.ProductName,
        Current.OrderYear,
        Current.OrderMonth,
        Current.TotalQuantity - COALESCE(Previous.TotalQuantity, 0) AS QuantityIncrease
    FROM 
        MonthlyOrderQuantities Current
    LEFT JOIN 
        MonthlyOrderQuantities Previous 
        ON Current.ProductID = Previous.ProductID 
        AND Current.OrderYear = Previous.OrderYear 
        AND Current.OrderMonth = Previous.OrderMonth + 1
)
SELECT 
    ProductID, 
    ProductName, 
    SUM(QuantityIncrease) AS TotalIncrease
FROM 
    MonthlyIncreases
WHERE 
    QuantityIncrease > 0
GROUP BY 
    ProductID, ProductName
ORDER BY 
    TotalIncrease DESC
LIMIT 3;
```",The generated query computes the month-over-month increase in quantities differently and requires adjustment for date handling compared to the ground truth query.,"SELECT current_month.product_id, ((current_month.quantity - COALESCE(previous_month.quantity, 0)) / NULLIF(previous_month.quantity, 0)) * 100 AS increase_percentage FROM (SELECT p.ProductName, od.ProductID AS product_id, SUM(od.Quantity) AS quantity, EXTRACT(YEAR FROM o.OrderDate) AS order_year, EXTRACT(MONTH FROM o.OrderDate) AS order_month FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID GROUP BY p.ProductName, od.ProductID, order_year, order_month) AS current_month LEFT JOIN (SELECT p.ProductName, od.ProductID AS product_id, SUM(od.Quantity) AS quantity, EXTRACT(YEAR FROM o.OrderDate) AS order_year, EXTRACT(MONTH FROM o.OrderDate) AS order_month FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID GROUP BY p.ProductName, od.ProductID, order_year, order_month) AS previous_month ON current_month.product_id = previous_month.product_id AND previous_month.order_year = current_month.order_year AND previous_month.order_month = current_month.order_month - 1 ORDER BY increase_percentage DESC LIMIT 3","The generated query calculates month-over-month percentage increase, while the ground truth calculates absolute change in quantities. They measure different metrics.",None
Find orders with a shipping cost over $100.,SELECT OrderID FROM orders WHERE Freight > 100;,"```sql
SELECT *
FROM orders
WHERE Freight > 100;
```","The generated query returns all columns from the 'orders' table, while the ground truth query returns only the 'OrderID' column.",SELECT OrderID FROM orders WHERE Freight > 100;,Both queries are identical and accurately return orders with a freight cost greater than $100.,FT
Which product categories have the highest aggregate sales?,"SELECT CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY CategoryID ORDER BY TotalSales DESC;","```sql
SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.CategoryID
ORDER BY TotalSales DESC;
```","Both queries join the 'products' table and the 'Order Details' table on ProductID, group by CategoryID, calculate total sales, and order the results by total sales in descending order. The order of joins and columns does not affect the outcome.","SELECT pc.CategoryName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN categories pc ON p.CategoryID = pc.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY pc.CategoryName ORDER BY TotalSales DESC;","The generated query returns CategoryName, while the ground truth query returns CategoryID. They could potentially yield the same result, but they group by different fields.",Base
How many orders were fulfilled within the required date in the first quarter of 2023?,SELECT COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate AND EXTRACT(YEAR FROM OrderDate) = 2023 AND EXTRACT(QUARTER FROM OrderDate) = 1;,"```sql
SELECT COUNT(OrderID) AS FulfilledOrders
FROM orders
WHERE ShippedDate <= RequiredDate
AND OrderDate >= '2023-01-01' AND OrderDate < '2023-04-01';
```","Both queries count orders with ShippedDate on or before RequiredDate and filter OrderDate within the first quarter of 2023, but use different methods to specify the date range.",SELECT COUNT(orders.OrderID) AS on_time_orders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND YEAR(orders.ShippedDate) = 2023 AND MONTH(orders.ShippedDate) BETWEEN 1 AND 3,"The generated query filters by ShippedDate being in the first quarter of 2023, whereas the ground truth checks the OrderDate. These are different date fields, potentially leading to different results.",Base
Identify suppliers with average lead times above the overall average lead time.,"SELECT s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN orders o ON p.ProductID = o.OrderID GROUP BY s.CompanyName HAVING AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) > (SELECT AVG(DATEDIFF(o2.ShippedDate, o2.OrderDate)) FROM orders o2);","```sql
SELECT s.SupplierID, s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY s.SupplierID, s.CompanyName
HAVING AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) > (
    SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate))
    FROM orders
    JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
    JOIN products ON [Order Details].ProductID = products.ProductID
)
```","The generated query has an extra join with 'Order Details' table, which isn't present in the ground truth query. This might affect the results.","SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_avg_lead_time FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName HAVING supplier_avg_lead_time > (SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) FROM orders);",The generated query incorrectly joins 'Order Details' with ProductID instead of matching 'OrderID' with orders. Ground truth uses correct join on orders and does not use 'Order Details'.,None
What is the overall customer retention rate for the past three months?,"SELECT (COUNT(DISTINCT o1.CustomerID) - COUNT(DISTINCT o2.CustomerID)) / NULLIF(COUNT(DISTINCT o2.CustomerID), 0) AS RetentionRate FROM orders o1 LEFT JOIN orders o2 ON o1.CustomerID = o2.CustomerID WHERE o1.OrderDate BETWEEN CURRENT_DATE - INTERVAL '3 months' AND CURRENT_DATE AND o2.OrderDate < CURRENT_DATE - INTERVAL '3 months';","```sql
SELECT 
    (COUNT(DISTINCT o2.CustomerID) * 1.0 / NULLIF(COUNT(DISTINCT o1.CustomerID), 0)) AS CustomerRetentionRate
FROM 
    orders o1
LEFT JOIN 
    orders o2 ON o1.CustomerID = o2.CustomerID AND o2.OrderDate BETWEEN DATEADD(MONTH, -3, CURRENT_DATE) AND CURRENT_DATE
WHERE 
    o1.OrderDate < DATEADD(MONTH, -3, CURRENT_DATE);
```","The generated SQL computes retention as customers who ordered in the past three months compared to those before. The ground truth checks customers from the past three months who did not order before that, effectively measuring attrition rate instead.",SELECT COUNT(DISTINCT CASE WHEN o.OrderDate BETWEEN '2023-07-01' AND '2023-09-30' THEN o.CustomerID END) * 1.0 / COUNT(DISTINCT CASE WHEN o.OrderDate < '2023-07-01' THEN o.CustomerID END) AS RetentionRate FROM orders o;,"The generated query calculates the retention rate by dividing the number of distinct customers from the last three months by those from before, without ensuring they appeared in both periods. The ground truth query calculates retention rate by finding customers who appear in the current period but not in the previous period, which reflects retention more accurately.",None
Which category has the highest number of discontinued products?,"SELECT CategoryID, COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1 GROUP BY CategoryID ORDER BY DiscontinuedProducts DESC;","```sql
SELECT CategoryID, COUNT(*) AS DiscontinuedCount
FROM products
WHERE Discontinued = 1
GROUP BY CategoryID
ORDER BY DiscontinuedCount DESC
LIMIT 1;
```","Both queries select the category with the highest count of discontinued products. The generated query uses LIMIT 1 to achieve this, whereas the ground truth query omits it but implies the same objective with the ordering. The result is the same.","SELECT c.CategoryID, COUNT(p.ProductID) AS DiscontinuedCount FROM products p JOIN categories c ON p.CategoryID = c.CategoryID WHERE p.Discontinued = 1 GROUP BY c.CategoryID ORDER BY DiscontinuedCount DESC LIMIT 1;",Both queries calculate the count of discontinued products per category and sort them in descending order to find the category with the highest count.,both
Which supplier has the most diverse product range?,"SELECT s.SupplierID, s.SupplierName, COUNT(DISTINCT p.CategoryID) AS CategoryCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID, s.SupplierName ORDER BY CategoryCount DESC LIMIT 1;","```sql
SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount
FROM products
GROUP BY SupplierID
ORDER BY ProductCount DESC
LIMIT 1;
```","The generated query counts distinct ProductIDs, focusing on the number of unique products, while the ground truth query counts distinct CategoryIDs for each supplier, measuring product range diversity by categories.","SELECT s.SupplierID, s.CompanyName, COUNT(DISTINCT p.ProductID) AS ProductCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID, s.CompanyName ORDER BY ProductCount DESC LIMIT 1;","The generated query counts distinct ProductIDs, while the ground truth counts distinct CategoryIDs, indicating a focus on product variety rather than category variety.",None
Identify products with the highest turnover rate last quarter.,"SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS TurnoverRate FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate >= DATEADD(quarter, -1, CURRENT_DATE) AND od.OrderDate < CURRENT_DATE GROUP BY p.ProductName ORDER BY TurnoverRate DESC;","```sql
SELECT p.ProductID, p.ProductName, 
       SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.OrderID IN (SELECT OrderID FROM Orders WHERE OrderDate >= DATEADD(quarter, -1, GETDATE()))
GROUP BY p.ProductID, p.ProductName
ORDER BY InventoryTurnoverRatio DESC
LIMIT 10;
```","The generated query uses GETDATE() for the date and doesn't consider the full last quarter date range. It also limits results to 10 products, which is not specified in the user question.","SELECT YEAR(OrderDate) AS Year, QUARTER(OrderDate) AS Quarter, products.ProductID, SUM([Order Details].Quantity) / NULLIF(AVG(Stock), 0) AS TurnoverRate FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 QUARTER) AND CURRENT_DATE GROUP BY Year, Quarter, products.ProductID ORDER BY TurnoverRate DESC LIMIT 1;","The generated query computes turnover rate based on SUM of order quantities and AVG of stock, grouped by product ID. However, it filters using `DATE_SUB` for ordering date versus the `DATEADD` logic in the ground truth, potentially covering a different date range. It also differs in the calculation logic and does not involve `ProductName`. The generated query also has syntax causing incorrect calculations (AVG vs SUM*UnitPrice).",None
Which orders include products that are currently out of stock?,SELECT DISTINCT OrderID FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.UnitsInStock = 0;,"```sql
SELECT DISTINCT od.OrderID
FROM [Order Details] od
JOIN products p ON od.ProductID = p.ProductID
WHERE p.UnitsInStock = 0;
```","Both queries select distinct OrderIDs from the 'Order Details' table by joining with the 'products' table where the products have zero units in stock. The joins and conditions are identical, ensuring the same result.",SELECT DISTINCT o.OrderID FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID WHERE p.UnitsInStock = 0;,Both queries correctly identify orders that include products currently out of stock. They join the necessary tables and check where UnitsInStock is 0. The structural differences do not impact the correctness.,both
Which product categories have the highest inventory turnover ratio?,"SELECT CategoryID, (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY CategoryID ORDER BY InventoryTurnover DESC;","```sql
SELECT p.CategoryID, 
       SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.CategoryID
ORDER BY InventoryTurnoverRatio DESC;
```","Both queries calculate the Inventory Turnover Ratio for each product category and order the results in descending order. They perform similar operations: summing the revenue from the order details and dividing by the average units in stock, grouped by CategoryID. The queries will yield the same results.","SELECT categories.CategoryName, (SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock)) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY inventory_turnover_ratio DESC;","The generated query calculates the inventory turnover for each category using CategoryName and groups by it, while the ground truth query uses CategoryID for grouping. If each CategoryID maps to a unique CategoryName, they will produce similar results, but the queries differ in how they identify and group categories.",Base
What is the average order value for each month in 2023?,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')","```sql
SELECT 
    EXTRACT(MONTH FROM orders.OrderDate) AS month, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value 
FROM 
    [Order Details] 
JOIN 
    orders ON [Order Details].OrderID = orders.OrderID 
WHERE 
    orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' 
GROUP BY 
    EXTRACT(MONTH FROM orders.OrderDate) 
ORDER BY 
    month;
```","The generated query extracts the month, but the ground truth query uses a format that includes both year and month, which can affect grouping in some databases.","SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS average_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')","Both queries calculate the average order value for each month in 2023 using the same logic. The only difference is in filtering: the generated query uses the YEAR function, while the ground truth uses a BETWEEN statement. Both achieve the same result.",FT
Identify the average order value for each month this year.,"SELECT MONTH(orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY month","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value
FROM 
    [Order Details] 
JOIN 
    orders ON [Order Details].OrderID = orders.OrderID 
WHERE 
    YEAR(orders.OrderDate) = YEAR(CURRENT_DATE)
GROUP BY 
    month
```","Both queries calculate the average order value for each month of the current year and use the same logic and filtering conditions. The main difference is in formatting the date, but they will yield the same result.","SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS monthly_avg_value FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= '2023-01-01' AND o.OrderDate < '2024-01-01' GROUP BY DATE_FORMAT(o.OrderDate, '%Y-%m');","Both queries calculate the average order value per month for the current year by summarizing the values from the 'Order Details' table joined with 'orders'. They group results by month and use the same method to compute the average. Although formatting for grouping dates and filtering is different, the results will be the same, covering the full year and calculating monthly averages accurately.",both
Identify employees with zero orders processed.,SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL;,"```sql
SELECT e.EmployeeID, e.FirstName, e.LastName
FROM employees e
LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID
HAVING COUNT(o.OrderID) = 0;
```","Both queries accurately identify employees with zero orders processed. The generated query uses HAVING COUNT(o.OrderID) = 0 to filter employees that have no associated orders, while the ground truth query uses WHERE o.OrderID IS NULL. Both approaches yield the same result.","SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL;","The generated query includes additional columns (FirstName, LastName) not present in the ground truth query.",Base
What is the total revenue generated by customer 'XYZ Company'?,SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE c.CompanyName = 'XYZ Company';,"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE customers.CompanyName = 'XYZ Company';
```","Both queries are equivalent; they calculate the total revenue generated by 'XYZ Company' by joining the customers, orders, and order details tables, and applying the same SUM calculation with the same WHERE condition.",SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.CustomerID = 'XYZ Company';,"The generated query uses 'CustomerID' to filter, but it should use 'CompanyName' like the ground truth query to correctly identify 'XYZ Company'.",Base
What are the top 5 countries in terms of supplier presence?,"SELECT Country, COUNT(DISTINCT SupplierID) AS SupplierCount FROM suppliers GROUP BY Country ORDER BY SupplierCount DESC LIMIT 5;","```sql
SELECT Country, COUNT(SupplierID) AS SupplierCount
FROM suppliers
GROUP BY Country
ORDER BY SupplierCount DESC
LIMIT 5;
```","Both queries aim to find the top 5 countries by supplier presence. The use of DISTINCT in the ground truth does not affect the results if each SupplierID is unique per country in the dataset. Therefore, both queries will yield the same result in such a scenario.","SELECT Country, COUNT(*) AS SupplierCount FROM suppliers GROUP BY Country ORDER BY SupplierCount DESC LIMIT 5;","Both queries correctly count suppliers per country and limit the results to the top 5, assuming each supplier has a unique entry for each country in the table.",both
What is the total sales revenue generated in the first quarter of 2023?,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31',"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'
```",The generated SQL query and the ground truth query are identical and correctly calculate the total sales revenue for the specified date range.,SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS total_sales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE QUARTER(o.OrderDate) = 1 AND YEAR(o.OrderDate) = 2023;,"Both queries calculate the total sales revenue for the first quarter of 2023 by summing the product of UnitPrice, Quantity, and (1 - Discount) from the Order Details table, filtered by OrderDate. The generated query uses QUARTER and YEAR functions, while the ground truth uses a BETWEEN date range. Both approaches yield the same results.",both
Which product categories have the highest total sales revenue?,"SELECT categories.CategoryID, categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM categories INNER JOIN products ON categories.CategoryID = products.CategoryID INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY categories.CategoryID, categories.CategoryName ORDER BY TotalSales DESC;","```sql
SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSalesRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.CategoryID
ORDER BY TotalSalesRevenue DESC;
```","The generated query does not account for discounts applied in the 'Order Details' table, which affects the total sales revenue calculation.","SELECT categories.CategoryID, SUM(OrderDetails.Quantity * OrderDetails.UnitPrice) AS TotalSales FROM OrderDetails JOIN products ON OrderDetails.ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID ORDER BY TotalSales DESC;","The generated query does not account for discounts in the sales calculation, whereas the ground truth query does.",None
Which supplier has the highest number of discontinued products?,"SELECT suppliers.CompanyName, COUNT(products.ProductID) AS DiscontinuedProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.Discontinued = 1 GROUP BY suppliers.CompanyName ORDER BY DiscontinuedProducts DESC LIMIT 1;","```sql
SELECT suppliers.CompanyName, COUNT(products.ProductID) AS DiscontinuedProducts
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
WHERE products.Discontinued = 1
GROUP BY suppliers.CompanyName
ORDER BY DiscontinuedProducts DESC
LIMIT 1;
```",Both queries are identical in logic and will produce the same results. They correctly identify the supplier with the most discontinued products.,"SELECT suppliers.CompanyName, COUNT(products.ProductID) AS DiscontinuedCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.Discontinued = 1 GROUP BY suppliers.SupplierID ORDER BY DiscontinuedCount DESC LIMIT 1;","Both queries accurately identify the supplier with the highest number of discontinued products. They differ only in naming the count column and grouping by SupplierID versus CompanyName, which does not affect the result.",both
What is the most common shipment method used for orders processed by each employee?,"SELECT employees.EmployeeID, ShipVia, COUNT(orders.OrderID) AS NumShipments FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, ShipVia ORDER BY NumShipments DESC;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, o.ShipVia, COUNT(o.ShipVia) AS ShipmentCount
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID, o.ShipVia
ORDER BY e.EmployeeID, ShipmentCount DESC;
```","The generated query lists all shipment methods per employee and orders by employee and shipment count, while the ground truth query aims to find just the most common method, lacking a filter for the highest count.","SELECT employees.EmployeeID, employees.FirstName, employees.LastName, orders.ShipVia, COUNT(orders.OrderID) AS MethodCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName, orders.ShipVia;",The generated SQL query does not find the most common shipment method for each employee; it lists all methods used by each employee.,None
What is the average freight cost per shipped order?,SELECT AVG(Freight) AS AverageFreightCost FROM orders WHERE ShippedDate IS NOT NULL;,"```sql
SELECT AVG(Freight) AS AverageFreightCost
FROM orders
WHERE ShippedDate IS NOT NULL;
```",The generated SQL query and the ground truth query are identical and both correctly calculate the average freight cost for orders that have a shipped date.,SELECT AVG(Freight) AS AverageFreightCost FROM orders;,"The generated query calculates the average freight cost for all orders, whereas the ground truth query calculates it only for orders that have been shipped.",Base
Which supplier provides the most variety of products?,"SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductVariety FROM products GROUP BY SupplierID ORDER BY ProductVariety DESC LIMIT 1;","```sql
SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductVariety
FROM products
GROUP BY SupplierID
ORDER BY ProductVariety DESC
LIMIT 1;
```",The generated SQL query is functionally identical to the ground truth query and accurately answers the user's question by selecting the supplier with the most variety of products.,"SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1;",Both queries calculate the number of distinct products provided by each supplier and return the supplier with the highest count. The difference in alias names doesn't affect the result.,both
What is the total freight cost for orders shipped to 'USA'?,SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShipCountry = 'USA';,"```sql
SELECT SUM(Freight) AS TotalFreightCost
FROM orders
WHERE ShipCountry = 'USA';
```",Both queries correctly calculate the total freight cost for orders shipped to 'USA'. They are semantically equivalent and will yield the same result.,SELECT SUM(Freight) AS TotalFreightUSA FROM orders WHERE ShipCountry = 'USA';,"Both queries calculate the sum of freight for orders shipped to 'USA'. The only difference is the alias used for the result, which does not affect the outcome.",both
Which customers have the highest number of late deliveries?,"SELECT CustomerID, COUNT(*) AS LateDeliveries FROM orders WHERE ShippedDate > RequiredDate GROUP BY CustomerID ORDER BY LateDeliveries DESC LIMIT 1;","```sql
SELECT CustomerID, COUNT(OrderID) AS LateDeliveries
FROM orders
WHERE ShippedDate > RequiredDate
GROUP BY CustomerID
ORDER BY LateDeliveries DESC;
```","The generated query returns all customers with late deliveries sorted in descending order, while the ground truth query returns only the customer with the highest number of late deliveries due to the LIMIT 1 clause.","SELECT o.CustomerID, COUNT(*) AS LateDeliveries FROM orders o WHERE DATEDIFF(o.RequiredDate, o.ShippedDate) < 0 GROUP BY o.CustomerID ORDER BY LateDeliveries DESC;","The generated query does not limit the results to the single customer with the most late deliveries, while the ground truth query uses LIMIT 1 to do so.",None
List customers with the highest average discount per order.,"SELECT c.CustomerID, AVG(od.Discount) AS AverageDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY AverageDiscount DESC;","```sql
SELECT c.CustomerID, c.CompanyName, AVG(od.Discount) AS AverageDiscount
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.CustomerID, c.CompanyName
ORDER BY AverageDiscount DESC;
```",Both queries calculate the average discount per customer and return a descending order of averages. Including 'CompanyName' in the generated query does not affect the result regarding the average discount.,"SELECT c.CustomerID, AVG(od.Discount) AS AvgDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY AvgDiscount DESC;","The generated SQL query and the ground truth query are functionally equivalent. Both queries join the same tables and calculate the average discount per customer, ordering the results in descending order by the average discount. The only difference is the alias for the average discount column, which does not affect the correctness of the result.",both
What is the on-time delivery rate for each month in the current year?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY month","```sql
SELECT MONTH(orders.OrderDate) AS month, 
       COUNT(orders.OrderID) AS total_orders,
       COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) AS on_time_deliveries,
       (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / COUNT(orders.OrderID)) * 100 AS on_time_delivery_rate
FROM orders
WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE)
GROUP BY MONTH(orders.OrderDate)
```","Both queries calculate the on-time delivery rate per month for the current year. The generated query uses integer division multiplied by 100 for a percentage, while the ground truth uses a division with DATE_FORMAT for month formatting. The logic is consistent.","SELECT MONTH(OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeRate FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY MONTH(OrderDate)",Both queries calculate the on-time delivery rate for each month in the current year by comparing ShippedDate and RequiredDate. They group by month and filter by the current year. The difference in functions like MONTH and DATE_FORMAT doesn't affect the logical outcome.,both
What is the overall inventory turnover ratio for the company?,SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID,"```sql
SELECT 
    SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID;
```","The generated and ground truth queries are logically equivalent. They both calculate the inventory turnover ratio by dividing the total sales value by the average units in stock, using the same table joins and columns.",SELECT SUM(OD.Quantity * OD.UnitPrice) / AVG(P.UnitsInStock) AS InventoryTurnoverRatio FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID;,"Both queries perform an inner join between the 'products' and 'Order Details' tables and calculate the inventory turnover ratio using the same formula: SUM(Quantity * UnitPrice) / AVG(UnitsInStock). The table references are swapped, but this doesn't affect the result.",both
What percentage of products are currently discontinued?,SELECT (COUNT(ProductID) * 100.0 / (SELECT COUNT(*) FROM products)) AS DiscontinuedPercentage FROM products WHERE Discontinued = 1;,"```sql
SELECT 
    (SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS DiscontinuedPercentage
FROM 
    products;
```","Both queries correctly calculate the percentage of discontinued products out of the total products, using different approaches to count discontinued products and total products.",SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM products) AS DiscontinuedPercentage FROM products WHERE Discontinued = 1;,Both queries calculate the percentage of products that are discontinued by dividing the count of discontinued products by the total count of products. 'COUNT(*)' and 'COUNT(ProductID)' are effectively the same since they both count rows for a non-nullable column.,both
What is the total discount given to each customer?,"SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;","```sql
SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID;
```","Both queries calculate the total discount for each customer by joining the customers, orders, and order details tables, then summing the product of UnitPrice, Quantity, and Discount grouped by CustomerID.","SELECT CustomerID, SUM(od.Discount * od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalDiscount FROM [Order Details] od GROUP BY CustomerID;",The generated query calculates the discount using a different formula and doesn't join the relevant tables to ensure CustomerID is sourced correctly.,Base
What is the average order value for each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_TRUNC('month', OrderDate);","```sql
SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY Month
ORDER BY Month;
```","The generated query uses DATE_FORMAT to group by year-month, while the ground truth uses DATE_TRUNC. DATE_FORMAT's syntax also does not match SQL ANSI standards. Additionally, both yield the same aggregation logic, but distinct month groupings might differ.","SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY Month;","The generated query uses DATE_FORMAT to group by month, which may handle date truncation differently than DATE_TRUNC used in the ground truth query. Ensure both methods convert dates to months consistently across SQL implementations.",None
What is the average number of units ordered per product?,"SELECT ProductID, AVG(Quantity) AS AverageUnitsOrdered FROM [Order Details] GROUP BY ProductID;","```sql
SELECT 
    ProductID, 
    AVG(Quantity) AS AverageUnitsOrdered
FROM 
    [Order Details]
GROUP BY 
    ProductID;
```","The generated SQL query and the ground truth query are functionally equivalent and will yield the same results. Both queries calculate the average quantity of units ordered per product, grouped by ProductID.","SELECT ProductID, AVG(Quantity) AS AvgUnitsOrdered FROM [Order Details] GROUP BY ProductID;",The difference between the queries is only in the alias name for the AVG(Quantity) column. Both queries calculate the average number of units ordered per product and yield the same results.,both
Calculate the Inventory Turnover Ratio for the previous month.,"SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= DATEADD(month, -1, DATEFROMPARTS(YEAR(GETDATE()), MONTH(GETDATE()) - 1, 1)) AND od.OrderDate < DATEFROMPARTS(YEAR(GETDATE()), MONTH(GETDATE()), 1);","```sql
SELECT 
    SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
WHERE 
    MONTH(od.OrderID) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) 
    AND YEAR(od.OrderID) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH);
```","The generated SQL uses MONTH(od.OrderID), which likely refers to an incorrect column for filtering the previous month's data. It should use od.OrderDate like the ground truth does.",SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE MONTH(od.OrderID) = MONTH(CURRENT_DATE) - 1;,"The generated query uses an incorrect calculation for the previous month by relying on MONTH(od.OrderID), which is likely incorrect as it should consider order dates. It also incorrectly assumes OrderID is a date column and does not properly handle year transitions.",None
What is the most frequently used shipping method?,"SELECT ShipVia, COUNT(*) AS MethodCount FROM orders GROUP BY ShipVia ORDER BY MethodCount DESC LIMIT 1;","```sql
SELECT ShipVia, COUNT(*) AS Frequency
FROM orders
GROUP BY ShipVia
ORDER BY Frequency DESC
LIMIT 1;
```","Both queries correctly determine the most frequently used shipping method by grouping on ShipVia, counting occurrences, and ordering by the count in descending order to limit the result to the top one.","SELECT ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",Both queries count the number of times each shipping method is used and return the method with the highest count.,both
Find the average reorder level for products in each category.,"SELECT CategoryID, AVG(ReorderLevel) AS AvgReorderLevel FROM products GROUP BY CategoryID;","```sql
SELECT CategoryID, AVG(ReorderLevel) AS AverageReorderLevel
FROM products
GROUP BY CategoryID;
```",Both queries calculate the average reorder level for products in each category and will yield the same results.,"SELECT CategoryID, AVG(ReorderLevel) AS AvgReorderLevel FROM products GROUP BY CategoryID;",Both queries are identical and correctly answer the user's question by calculating the average reorder level for products grouped by category.,both
How many orders were shipped after the required date?,SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;,"```sql
SELECT COUNT(*) AS OrdersShippedAfterRequiredDate
FROM orders
WHERE ShippedDate > RequiredDate;
```","Both queries count the number of orders where the ShippedDate is after the RequiredDate. The only difference is the alias used in the generated query, which does not affect the result.",SELECT o.OrderID FROM orders o WHERE o.ShippedDate > o.RequiredDate;,"The generated SQL query retrieves order IDs instead of counting them, unlike the ground truth query which counts the orders.",Base
"How many employees have sales exceeding $10,000 in total?",SELECT COUNT(*) FROM (SELECT employees.EmployeeID FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID HAVING SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) > 10000) AS subquery;,"```sql
SELECT COUNT(DISTINCT e.EmployeeID) AS EmployeeCount
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 10000;
```","Both queries correctly calculate the number of employees with total sales exceeding $10,000 using a join and group by operation, and they apply the same condition in the HAVING clause. They both count the unique EmployeeIDs matching the condition.","SELECT employees.FirstName, employees.LastName FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.FirstName, employees.LastName HAVING SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) > 10000;","The generated query lists employee names, while the ground truth query counts the number of employees. The outputs are different.",Base
Identify the shipping method with the highest average freight cost.,"SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipVia ORDER BY AvgFreight DESC LIMIT 1;","```sql
SELECT ShipVia, AVG(Freight) AS AverageFreight
FROM orders
GROUP BY ShipVia
ORDER BY AverageFreight DESC
LIMIT 1;
```","Both queries are functionally equivalent and correctly identify the shipping method with the highest average freight cost by grouping by ShipVia, ordering by average freight in descending order, and limiting the result to one record.","SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipVia ORDER BY AvgFreight DESC LIMIT 1;","The generated SQL query is identical to the ground truth query, and both correctly identify the shipping method with the highest average freight cost by ordering the average freight in descending order and limiting the results to 1.",both
How many orders are shipped late each month?,"SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, COUNT(OrderID) AS LateShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(orders.ShippedDate, '%Y-%m') AS Month,
    COUNT(orders.OrderID) AS LateOrders
FROM 
    orders
WHERE 
    orders.ShippedDate > orders.RequiredDate
GROUP BY 
    Month
```","Both queries select the number of late shipments per month by comparing ShippedDate to RequiredDate, grouping by month, and counting the OrderID. The structure and function are equivalent.","SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY Month;","The generated SQL query produces the same results as the ground truth query, with only a difference in the alias naming ('LateOrders' vs. 'LateShipments'), which does not affect the outcome.",both
Which products have been discontinued and still have units in stock?,SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;,"```sql
SELECT ProductID, ProductName, UnitsInStock
FROM products
WHERE Discontinued = 1 AND UnitsInStock > 0;
```","The generated SQL query selects additional columns (ProductID, UnitsInStock) that are not present in the ground truth query.",SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;,Both queries are identical and correctly select products that are discontinued and have units in stock.,FT
Which product categories had the best performance in sales in January 2023?,"SELECT categories.CategoryName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = 1 AND YEAR(orders.OrderDate) = 2023 GROUP BY categories.CategoryName ORDER BY total_quantity DESC","```sql
SELECT categories.CategoryID, categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN categories ON products.CategoryID = categories.CategoryID
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31'
GROUP BY categories.CategoryID, categories.CategoryName
ORDER BY total_sales DESC;
```","The generated query calculates total sales using price, quantity, and discount, while the ground truth focuses on total quantity sold. The performance metric differs.","SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY categories.CategoryName ORDER BY sales_performance DESC;","The generated query calculates sales performance using total sales amount, considering discounts, while the ground truth query calculates performance based on total quantity sold. These measure different aspects of sales performance.",None
Identify products that need reordering where units in stock are below reorder level.,"SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;","```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock < ReorderLevel;
```","The generated query includes extra columns (UnitsInStock, ReorderLevel) not present in the ground truth query.",SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"The generated query does not include ProductID, which is part of the ground truth query.",None
What is the distribution of orders across different regions?,"SELECT c.Region, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.Region;","```sql
SELECT c.Region, COUNT(o.OrderID) AS OrderCount
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
GROUP BY c.Region
ORDER BY OrderCount DESC;
```","The generated SQL query and the ground truth query both calculate the distribution of orders across different regions by counting OrderID per Region. The generated query also orders the results by OrderCount, which does not affect the correctness of the output.","SELECT ShipRegion, COUNT(*) AS RegionOrderCount FROM orders GROUP BY ShipRegion;","The generated query assumes ShipRegion is part of the orders table, while the ground truth joins orders with customers and groups by the customers' Region.",Base
Which employees are handling the most territories?,"SELECT employees.EmployeeID, COUNT(employeeTerritories.TerritoryID) AS territory_count FROM employeeTerritories JOIN employees ON employeeTerritories.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID ORDER BY territory_count DESC","```sql
SELECT employeeTerritories.EmployeeID, COUNT(employeeTerritories.TerritoryID) AS territory_count
FROM employeeTerritories
GROUP BY employeeTerritories.EmployeeID
ORDER BY territory_count DESC;
```",Both queries count territories per EmployeeID and order them by the count. The JOIN in the ground truth doesn't change the result since both queries group by EmployeeID.,"SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(DISTINCT et.TerritoryID) AS TerritoryCount FROM employees e JOIN employee_territories et ON e.EmployeeID = et.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY TerritoryCount DESC;","Both queries count the number of territories each employee is handling and order the results in descending order of the count. They differ in the selection of columns, but accurately answer the user's question.",both
Which country has the highest number of orders placed?,"SELECT customers.Country, COUNT(orders.OrderID) AS total_orders FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.Country ORDER BY total_orders DESC LIMIT 1","```sql
SELECT customers.Country, COUNT(orders.OrderID) AS order_count
FROM orders
JOIN customers ON orders.CustomerID = customers.CustomerID
GROUP BY customers.Country
ORDER BY order_count DESC
LIMIT 1;
```","Both queries calculate the number of orders per country, sort in descending order, and limit the result to the country with the highest order count.","SELECT ShipCountry, COUNT(*) AS NumberOfOrders FROM orders GROUP BY ShipCountry ORDER BY NumberOfOrders DESC LIMIT 1;","The generated query calculates orders by 'ShipCountry', while the ground truth query calculates them by 'customers.Country' through a join with the customers table.",Base
What is the average fulfillment time for the top 3 products in sales in 2023?,"SELECT p.ProductID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS avg_fulfillment_time FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = 2023 GROUP BY p.ProductID ORDER BY SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) DESC LIMIT 3","```sql
SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_fulfillment_time
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
JOIN products ON [Order Details].ProductID = products.ProductID
WHERE products.ProductID IN (
    SELECT TOP 3 [Order Details].ProductID
    FROM [Order Details]
    JOIN orders ON [Order Details].OrderID = orders.OrderID
    WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
    GROUP BY [Order Details].ProductID
    ORDER BY SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) DESC
)
AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31';
```","The generated query calculates the average fulfillment time for the top 3 products by sales, but it aggregates the average at a single level. The ground truth query provides averages for each of the top 3 products separately. Also, the use of YEAR in the ground truth focuses on the specific year more efficiently.","SELECT products.ProductID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE YEAR(orders.OrderDate) = 2023 AND products.ProductID IN (SELECT ProductID FROM [Order Details] WHERE YEAR(orders.OrderDate) = 2023 GROUP BY ProductID ORDER BY SUM(Quantity) DESC LIMIT 3) GROUP BY products.ProductID","The generated query ranks products by total quantity sold, whereas the ground truth query ranks by total sales revenue, using unit price and discount.",None
List the products with the most significant differences between units in stock and reorder levels.,"SELECT ProductName, (UnitsInStock - ReorderLevel) AS Difference FROM products ORDER BY ABS(Difference) DESC;","```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel, ABS(UnitsInStock - ReorderLevel) AS Difference
FROM products
ORDER BY Difference DESC;
```","Both queries generate a list of products ordered by the absolute difference between UnitsInStock and ReorderLevel in descending order, thus answering the user's question.",SELECT ProductName FROM products WHERE ABS(UnitsInStock - ReorderLevel) = (SELECT MAX(ABS(UnitsInStock - ReorderLevel)) FROM products);,"The generated query returns only the products with the maximum absolute difference, while the ground truth query returns all products ordered by the absolute difference.",Base
Identify the top 5 cities with the highest number of late deliveries.,"SELECT ShipCity, COUNT(OrderID) AS LateDeliveries FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipCity ORDER BY LateDeliveries DESC LIMIT 5;","```sql
SELECT ShipCity, COUNT(OrderID) AS LateDeliveries
FROM orders
WHERE ShippedDate > RequiredDate
GROUP BY ShipCity
ORDER BY LateDeliveries DESC
LIMIT 5;
```",The generated SQL query and the ground truth query are identical in logic and will yield the same results.,"SELECT ShipCity, COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) AS LateDeliveries FROM orders GROUP BY ShipCity ORDER BY LateDeliveries DESC LIMIT 5;","Both queries calculate the number of late deliveries per city, group by ShipCity, order by LateDeliveries in descending order, and limit the results to the top 5 cities. The difference in approach—using CASE WHEN vs WHERE—does not affect the result.",both
"For each supplier, what are the top three products by sales revenue?","SELECT p.SupplierID, p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID, p.ProductName ORDER BY Revenue DESC LIMIT 3;","```sql
SELECT 
    s.SupplierID, 
    s.CompanyName, 
    p.ProductID, 
    p.ProductName, 
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    suppliers s
JOIN 
    products p ON s.SupplierID = p.SupplierID
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
JOIN 
    orders o ON od.OrderID = o.OrderID
GROUP BY 
    s.SupplierID, 
    s.CompanyName, 
    p.ProductID, 
    p.ProductName
ORDER BY 
    s.SupplierID, 
    TotalSales DESC
LIMIT 3;
```","The generated query attempts to get the top three products for each supplier but applies the overall LIMIT 3 instead of using a method to get top three per supplier, such as a window function or a subquery. The ground truth query limits to the top three products overall, not per supplier.","SELECT SupplierID, ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Revenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID, ProductID ORDER BY Revenue DESC LIMIT 3;","The generated query does not correctly return the top three products by sales revenue for each supplier. It orders the entire result set by revenue and limits it to three rows, rather than partitioning by supplier.",None
Identify the products that are both discontinued and below the reorder level.,SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock <= ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel 
FROM products 
WHERE Discontinued = 1 AND UnitsInStock < ReorderLevel;
```","The generated query uses '<' instead of '<=' for the comparison of 'UnitsInStock' and 'ReorderLevel', which could yield different results.","SELECT ProductID, ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock < ReorderLevel;","The generated query uses '<' while the ground truth uses '<=', leading to different results when UnitsInStock equals ReorderLevel.",None
Which shipping method was used the most in the last quarter?,"SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate BETWEEN '2023-07-01' AND '2023-09-30' GROUP BY ShipVia ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT ShipVia, COUNT(*) AS OrderCount
FROM orders
WHERE OrderDate >= DATEADD(QUARTER, -1, GETDATE())
GROUP BY ShipVia
ORDER BY OrderCount DESC
LIMIT 1;
```","The generated query uses DATEADD and GETDATE, which results in a dynamic date range, possibly missing the specific last quarter. The ground truth query uses a fixed date range, correctly targeting the last quarter.","SELECT o.ShipVia, COUNT(o.OrderID) AS UsageCount FROM orders o WHERE o.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND CURRENT_DATE GROUP BY o.ShipVia ORDER BY UsageCount DESC LIMIT 1;","The generated query uses a dynamic date range with CURRENT_DATE and INTERVAL 3 MONTH, while the ground truth query uses a specific fixed date range for the last quarter ('2023-07-01' to '2023-09-30').",None
Which products have sold the most this year?,"SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalSold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY products.ProductName ORDER BY TotalSold DESC;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSold
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
WHERE YEAR(o.OrderDate) = YEAR(CURDATE())
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSold DESC;
```",Both queries calculate the total quantity sold for each product in the current year and order the results by total quantity sold in descending order. The slight differences in column selection (ProductID) do not affect the primary goal of answering the user’s question about which products sold the most.,"SELECT ProductID, SUM(Quantity) as TotalSold FROM [Order Details] WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY ProductID ORDER BY TotalSold DESC;","The generated query does not join with the products table, so it doesn't provide product names, just IDs.",Base
Calculate the monthly sales growth for each employee over the past 6 months.,"SELECT employees.EmployeeID, YEAR(orders.OrderDate) AS Year, MONTH(orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATEADD(MONTH, -6, CURRENT_DATE) GROUP BY employees.EmployeeID, YEAR(orders.OrderDate), MONTH(orders.OrderDate) ORDER BY employees.EmployeeID, Year, Month","```sql
WITH MonthlySales AS (
    SELECT 
        e.EmployeeID,
        DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month,
        SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
    FROM 
        employees e
    JOIN 
        orders o ON e.EmployeeID = o.EmployeeID
    JOIN 
        [Order Details] od ON o.OrderID = od.OrderID
    WHERE 
        o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)
    GROUP BY 
        e.EmployeeID, Month
),
SalesGrowth AS (
    SELECT 
        ms1.EmployeeID,
        ms1.Month,
        ms1.TotalSales,
        COALESCE((ms1.TotalSales - ms2.TotalSales) / NULLIF(ms2.TotalSales, 0), 0) * 100 AS SalesGrowth
    FROM 
        MonthlySales ms1
    LEFT JOIN 
        MonthlySales ms2 ON ms1.EmployeeID = ms2.EmployeeID AND DATE_FORMAT(DATE_SUB(ms1.Month, INTERVAL 1 MONTH), '%Y-%m') = ms2.Month
)
SELECT 
    EmployeeID,
    Month,
    SalesGrowth
FROM 
    SalesGrowth
ORDER BY 
    EmployeeID, Month;
```","The generated query calculates monthly sales growth, including percentage change, while the ground truth query only calculates monthly sales without growth percentages.","SELECT e.EmployeeID, MONTH(o.OrderDate) AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -6, CURRENT_DATE) GROUP BY e.EmployeeID, OrderMonth",The generated query does not calculate sales growth as it does not group by year or order by year and month. It only groups by OrderMonth.,None
List the top 5 suppliers based on the total sales value of their products.,"SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY TotalSales DESC LIMIT 5;","```sql
SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.CompanyName
ORDER BY TotalSales DESC
LIMIT 5;
```","The generated SQL query selects 'CompanyName', while the ground truth selects 'SupplierID'. The core aggregation logic is the same, but the selected field differs.","SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID, suppliers.CompanyName ORDER BY TotalSales DESC LIMIT 5;","The generated query includes the CompanyName in the GROUP BY clause which may affect the aggregation. The ground truth query does not include it, leading to potential differences in results.",None
What is the total quantity of products ordered by each customer?,"SELECT c.CustomerID, SUM(od.Quantity) AS TotalQuantity FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;","```sql
SELECT orders.CustomerID, SUM([Order Details].Quantity) AS TotalQuantity
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY orders.CustomerID;
```","Both queries compute the total quantity of products ordered by each customer by joining orders with order details and grouping by CustomerID. Despite differences in table aliases and the inclusion of the customers table, the results are the same because they use the CustomerID present in both.","SELECT c.CustomerID, SUM(od.Quantity) AS TotalQuantity FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",The generated SQL query is identical to the ground truth query and correctly calculates the total quantity of products ordered by each customer.,both
Which employee's orders have the highest average discount?,"SELECT e.FirstName, e.LastName, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.FirstName, e.LastName ORDER BY AvgDiscount DESC LIMIT 1;","```sql
SELECT employees.EmployeeID, 
       employees.FirstName, 
       employees.LastName, 
       AVG([Order Details].Discount) AS AvgDiscount
FROM employees
JOIN orders ON employees.EmployeeID = orders.EmployeeID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY employees.EmployeeID
ORDER BY AvgDiscount DESC
LIMIT 1;
```","Both queries calculate the average discount per employee and order by the highest average discount, limiting the result to the top entry.","SELECT e.EmployeeID, AVG(od.Discount) AS AverageDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AverageDiscount DESC LIMIT 1;","Both queries calculate the employee with the highest average discount, though using different identifiers (EmployeeID vs. FirstName/LastName). The aggregation and result are the same.",both
Which products are most frequently ordered?,"SELECT ProductID, COUNT(ProductID) AS Frequency FROM [Order Details] GROUP BY ProductID ORDER BY Frequency DESC;","```sql
SELECT ProductID, COUNT(*) AS OrderCount
FROM [Order Details]
GROUP BY ProductID
ORDER BY OrderCount DESC;
```","Both queries count the occurrences of ProductID in the [Order Details] table and order the results by descending frequency, thus yielding the same answer.","SELECT ProductID, COUNT(*) AS OrderCount FROM [Order Details] GROUP BY ProductID ORDER BY OrderCount DESC;","Both queries group by ProductID and count occurrences, ordering results by the count in descending order. They yield the same results.",both
Which categories have products that are all discontinued?,SELECT c.CategoryID FROM categories c JOIN products p ON c.CategoryID = p.CategoryID GROUP BY c.CategoryID HAVING SUM(CAST(p.Discontinued AS INT)) = COUNT(p.ProductID);,"```sql
SELECT DISTINCT c.CategoryID, c.CategoryName
FROM categories c
JOIN products p ON c.CategoryID = p.CategoryID
GROUP BY c.CategoryID, c.CategoryName
HAVING SUM(CASE WHEN p.Discontinued = 0 THEN 1 ELSE 0 END) = 0;
```",Both queries correctly identify categories where all products are discontinued. They use different logic but yield the same result.,SELECT CategoryID FROM products GROUP BY CategoryID HAVING COUNT(*) = SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END);,Both queries group products by CategoryID and check if the number of discontinued products equals the total number of products. The logic aligns to confirm all products in a category are discontinued.,both
What are the top three products by quantity sold per month?,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, [Order Details].ProductID, SUM([Order Details].Quantity) AS QuantitySold FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m'), [Order Details].ProductID ORDER BY Month, QuantitySold DESC;","```sql
SELECT 
    od.ProductID, 
    SUM(od.Quantity) AS TotalQuantity,
    DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month
FROM 
    orders o
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    od.ProductID, Month
ORDER BY 
    TotalQuantity DESC
LIMIT 3;
```","The generated query applies a global limit of 3, not calculating the top three products by month.","SELECT p.ProductName, MONTH(o.OrderDate) AS Month, YEAR(o.OrderDate) AS Year, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, Month, Year ORDER BY TotalQuantity DESC LIMIT 3;","The generated query lists top 3 products over all months combined, not per month. The ground truth query summarizes sales per month but doesn't rank the top 3 products.",None
How does the inventory turnover ratio vary across product categories?,"SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName","```sql
SELECT categories.CategoryID, 
       categories.CategoryName, 
       SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN categories ON products.CategoryID = categories.CategoryID
GROUP BY categories.CategoryID, categories.CategoryName
```","Both queries compute the inventory turnover ratio per category, differing only in the unnecessary inclusion of CategoryID in the generated query's SELECT and GROUP BY clauses, which doesn't alter the result.","SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) as InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID;","The generated query uses p.CategoryID instead of categories.CategoryName, potentially leading to different results. Also, it utilizes NULLIF to avoid division by zero which is not in the ground truth, and this slight difference can affect the outcome.",Base
Which territory has the best employee sales performance?,"SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryDescription ORDER BY total_sales DESC LIMIT 1","```sql
SELECT territories.TerritoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
FROM employeeTerritories
JOIN employees ON employeeTerritories.EmployeeID = employees.EmployeeID
JOIN orders ON employees.EmployeeID = orders.EmployeeID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID
GROUP BY territories.TerritoryID
ORDER BY total_sales DESC
LIMIT 1
```","The generated query returns TerritoryID, whereas the ground truth query returns TerritoryDescription, which is more descriptive and likely what the user intended.","SELECT territories.TerritoryDescription AS Territory, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TerritorySales FROM employees JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY territories.TerritoryDescription ORDER BY TerritorySales DESC LIMIT 1;","Both queries calculate total sales per territory by summing sales amounts using the same joins and conditions, then return the territory with the highest sales. Joins and calculations are equivalent.",FT
What are the top 5 best-selling products in terms of quantity sold?,"SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantity
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalQuantity DESC
LIMIT 5;
```",Both queries aggregate the quantity sold per product and return the top 5 products sorted by total quantity sold. The slight difference in selected columns does not affect the result.,"SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSold DESC LIMIT 5;",Both queries calculate the top 5 products by total quantity sold; only the alias for the SUM result differs.,both
What is the total monthly sales generated by each employee?,"SELECT employees.EmployeeID, EXTRACT(YEAR FROM orders.OrderDate) AS Year, EXTRACT(MONTH FROM orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, Year, Month;","```sql
SELECT employees.EmployeeID, employees.FirstName, employees.LastName, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM employees
JOIN orders ON employees.EmployeeID = orders.EmployeeID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName, 
         DATE_FORMAT(orders.OrderDate, '%Y-%m')
```","The generated query groups by the full date string format ('%Y-%m') using DATE_FORMAT, while the ground truth query separately extracts year and month, potentially leading to the same results if implemented correctly, but not guaranteed due to different database functions.","SELECT employees.FirstName, employees.LastName, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.FirstName, employees.LastName, Month;","Both queries calculate the total monthly sales by each employee. The main difference is in the grouping fields: the generated query groups by employee names and formatted date, while the ground truth groups by employee ID and explicitly extracts year and month. However, these groupings should yield equivalent results if employee names are unique identifiers.",FT
What is the trend in average shipping cost over the last year?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AvgShippingCost FROM orders WHERE OrderDate > CURRENT_DATE - INTERVAL 1 YEAR GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
    AVG(Freight) AS AverageShippingCost
FROM 
    orders
WHERE 
    OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries calculate the average shipping cost per month for orders in the last year and will yield the same results. Although the ORDER BY clause in the generated SQL was not present in the ground truth, it does not affect the result set in terms of accuracy.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AvgShippingCost FROM orders WHERE OrderDate >= DATEADD(year, -1, CURRENT_DATE) GROUP BY Month ORDER BY Month;","Both queries calculate the average shipping cost per month over the last year, grouping by month. The date range conditions are equivalent, and both group by the formatted date.",both
Which employee has handled the most orders?,"SELECT EmployeeID, COUNT(*) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries calculate the count of orders handled by each employee and sort them in descending order, returning the employee who handled the most orders. The slight difference in the count function does not affect the outcome.","SELECT EmployeeID, COUNT(OrderID) AS Num_Orders FROM orders GROUP BY EmployeeID ORDER BY Num_Orders DESC LIMIT 1;","Both queries count the number of orders handled by each employee and return the employee with the highest count, ordering by the count in descending order and limiting the result to 1.",both
Calculate the average unit price of all products from each supplier.,"SELECT SupplierID, AVG(UnitPrice) FROM products GROUP BY SupplierID;","```sql
SELECT SupplierID, AVG(UnitPrice) AS AverageUnitPrice
FROM products
GROUP BY SupplierID;
```",Both queries calculate the average unit price of products for each supplier using a GROUP BY on SupplierID.,"SELECT s.SupplierID, AVG(p.UnitPrice) AS AverageUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;","Both queries calculate the average unit price of products for each supplier. The difference in table reference does not affect the aggregate calculation, assuming that every product is associated with a supplier.",both
Who are the top-performing employees in terms of sales in each country?,"SELECT e.EmployeeID, e.Country, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.Country ORDER BY e.Country, TotalSales DESC;","```sql
SELECT e.Country, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.Country, e.EmployeeID
HAVING TotalSales = (
    SELECT MAX(TotalSales)
    FROM (
        SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
        FROM employees e
        JOIN orders o ON e.EmployeeID = o.EmployeeID
        JOIN [Order Details] od ON o.OrderID = od.OrderID
        GROUP BY e.Country, e.EmployeeID
    ) AS CountrySales
    WHERE CountrySales.Country = e.Country
)
```","The ground truth query orders employees by sales but does not filter for top performers per country, while the generated query aims to identify the top performer in each country using a subquery.","SELECT employees.Country, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Country, employees.FirstName, employees.LastName HAVING TotalSales = (SELECT MAX(TotalSales) FROM (SELECT employees.Country, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Country, employees.FirstName, employees.LastName) AS CountrySales WHERE CountrySales.Country = employees.Country) ORDER BY employees.Country;","The generated query attempts to get the top-performing employees per country using a HAVING clause with a subquery, but it may not accurately select the top employee due to potential tie situations or inefficiency with subquery handling. The ground truth query uses an ORDER BY without subquery, prioritizing sorting but not specifically capturing only the top performer per country.",None
Which employee has generated the highest sales revenue this year?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE)
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries calculate the total sales revenue for each employee for the current year and retrieve the employee with the highest revenue. The generated query provides first and last names instead of the employee ID, which does not affect the correctness in terms of identifying the top performer.","SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","The generated SQL query matches the ground truth query exactly, so it accurately answers the user's question and yields the same results.",both
How many orders have been shipped late compared to the required date?,SELECT COUNT(o.OrderID) AS LateOrders FROM orders o WHERE o.ShippedDate > o.RequiredDate;,"```sql
SELECT COUNT(*) AS LateShipments
FROM orders
WHERE ShippedDate > RequiredDate;
```","Both queries count orders where the ShippedDate is later than the RequiredDate, providing the same result.",SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;,"Both queries count orders where the ShippedDate is greater than the RequiredDate, using the same logic and conditions, yielding the same result.",both
Which supplier has the highest total sales value?,"SELECT s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.CompanyName ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN suppliers ON products.SupplierID = suppliers.SupplierID
GROUP BY suppliers.CompanyName
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries calculate the total sales for each supplier by summing the total price from order details, joined through products, and ordering them to find the highest, returning the supplier with the highest sales.","SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSalesValue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY TotalSalesValue DESC LIMIT 1;","The generated query selects SupplierID instead of CompanyName, which may lead to ambiguity if SupplierID doesn't match CompanyName uniquely.",Base
How much revenue is generated from orders with more than 10 units?,SELECT SUM(UnitPrice * Quantity) AS Revenue FROM [Order Details] WHERE Quantity > 10;,"```sql
SELECT SUM(od.Quantity * od.UnitPrice) AS Revenue
FROM [Order Details] od
WHERE od.Quantity > 10;
```","Both queries calculate the sum of revenues from order details where the quantity is greater than 10. The table and logic are the same, so they yield equivalent results.",SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od WHERE od.Quantity > 10;,"The generated query accounts for discounts, while the ground truth query does not. Therefore, they yield different results.",Base
List employees who have not completed any orders in the last six months.,"SELECT employees.EmployeeID, CONCAT(FirstName, ' ', LastName) AS FullName FROM employees WHERE employees.EmployeeID NOT IN (SELECT DISTINCT EmployeeID FROM orders WHERE OrderDate >= DATE_ADD(CURRENT_DATE, INTERVAL -6 MONTH));","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName
FROM employees e
LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND o.OrderDate >= DATEADD(MONTH, -6, CURRENT_DATE)
WHERE o.OrderID IS NULL;
```","Both queries correctly identify employees who have not completed any orders in the last six months by using different approaches: one uses a LEFT JOIN with a NULL check, and the other uses a subquery with a NOT IN clause.",SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND o.OrderDate > CURRENT_DATE - INTERVAL '6 months' WHERE o.OrderID IS NULL;,"Both queries correctly identify employees who have not completed any orders in the last six months using different methods. The generated query uses a LEFT JOIN with a condition to filter out non-null matches, while the ground truth query uses a subquery with NOT IN to exclude employees with recent orders.",both
How many employees have increased their sales compared to the previous month?,"SELECT e.EmployeeID, (SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE) - 1 AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) AS SalesIncrease FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","```sql
SELECT COUNT(DISTINCT e.EmployeeID) AS EmployeesWithIncreasedSales
FROM (
    SELECT e.EmployeeID, 
           SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CurrentMonthSales
    FROM employees e
    JOIN orders o ON e.EmployeeID = o.EmployeeID
    JOIN [Order Details] od ON o.OrderID = od.OrderID
    WHERE DATE_FORMAT(o.OrderDate, '%Y-%m') = DATE_FORMAT(CURRENT_DATE - INTERVAL 1 MONTH, '%Y-%m')
    GROUP BY e.EmployeeID
) AS CurrentMonth
JOIN (
    SELECT e.EmployeeID, 
           SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS PreviousMonthSales
    FROM employees e
    JOIN orders o ON e.EmployeeID = o.EmployeeID
    JOIN [Order Details] od ON o.OrderID = od.OrderID
    WHERE DATE_FORMAT(o.OrderDate, '%Y-%m') = DATE_FORMAT(CURRENT_DATE - INTERVAL 2 MONTH, '%Y-%m')
    GROUP BY e.EmployeeID
) AS PreviousMonth ON CurrentMonth.EmployeeID = PreviousMonth.EmployeeID
WHERE CurrentMonth.CurrentMonthSales > PreviousMonth.PreviousMonthSales;
```","The generated query calculates the count of employees who increased their sales compared to the previous month, while the ground truth query attempts to calculate the sales increase for each employee but does not filter or count those with actual increases.","SELECT e.EmployeeID, e.FirstName, e.LastName, COALESCE(CurrentMonthSales.TotalSales, 0) - COALESCE(PreviousMonthSales.TotalSales, 0) AS SalesChange FROM (SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(MONTH FROM o.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) AND EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY e.EmployeeID, e.FirstName, e.LastName) AS CurrentMonthSales LEFT JOIN (SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(MONTH FROM o.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) - 1 AND EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY e.EmployeeID, e.FirstName, e.LastName) AS PreviousMonthSales ON CurrentMonthSales.EmployeeID = PreviousMonthSales.EmployeeID WHERE SalesChange > 0;","Generated query checks if sales increased for each employee individually comparing current and previous month sales, but uses separate subqueries potentially missing some records. Ground truth query consolidates the logic in a single aggregation by employee and calculates sales differences directly, ensuring inclusion of all employees with sales.",None
Identify the average number of products per order.,SELECT AVG(Count) FROM (SELECT COUNT(ProductID) AS Count FROM [Order Details] GROUP BY OrderID) AS ProductCounts;,"```sql
SELECT AVG(TotalProducts) AS AverageProductsPerOrder
FROM (
    SELECT OrderID, SUM(Quantity) AS TotalProducts
    FROM [Order Details]
    GROUP BY OrderID
) AS OrderSummary;
```",Both queries calculate the average number of products per order by aggregating product quantities per order and then calculating the average. The approaches differ but yield the same result.,"SELECT OrderID, SUM(Quantity) / (SELECT COUNT(DISTINCT OrderID) FROM [Order Details] WHERE OrderID = o.OrderID) AS AvgProducts FROM [Order Details] o GROUP BY OrderID;","The generated query calculates the average number of products per order on a per-order basis, whereas the ground truth query calculates the overall average across all orders. They will yield different results.",Base
What is the total sales revenue for each product category this year?,"SELECT c.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalCategorySales FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY c.CategoryID;","```sql
SELECT p.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
JOIN products p ON od.ProductID = p.ProductID
WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE)
GROUP BY p.CategoryID
```","Both queries calculate the total sales revenue for each product category for the current year. They join the necessary tables and apply the same aggregation on the same fields, grouping by CategoryID. They differ in the method of resolving category details, but they achieve the same result.","SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE YEAR(CURDATE()) = YEAR(o.OrderDate) GROUP BY p.CategoryID;",The generated query does not account for discounts and lacks a join with the orders table to filter the current year's orders.,Base
What is the monthly growth rate of returning customers over the last year?,"SELECT ((COUNT(DISTINCT CASE WHEN YEAR(o1.OrderDate) = 2022 THEN o1.CustomerID END) - COUNT(DISTINCT CASE WHEN YEAR(o2.OrderDate) = 2021 THEN o2.CustomerID END)) / NULLIF(COUNT(DISTINCT CASE WHEN YEAR(o2.OrderDate) = 2021 THEN o2.CustomerID END), 0)) * 100 AS monthly_growth FROM orders o1, orders o2 WHERE o1.CustomerID = o2.CustomerID AND YEAR(o1.OrderDate) = 2022 AND YEAR(o2.OrderDate) = 2021;","```sql
SELECT (COUNT(DISTINCT orders.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') / 
         COUNT(DISTINCT orders.CustomerID WHERE orders.OrderDate < '2023-01-01')) AS growth_rate 
FROM orders
```",The generated query does not accurately calculate the monthly growth rate. It uses a simple ratio of unique customers within and outside the given date range without considering growth over each month. The ground truth appropriately calculates growth by comparing unique customers from two consecutive years.,"SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, COUNT(DISTINCT CASE WHEN o.CustomerID IN (SELECT DISTINCT CustomerID FROM orders WHERE OrderDate < o.OrderDate) THEN o.CustomerID END) / CAST(COUNT(DISTINCT o.CustomerID) AS FLOAT) * 100 AS RetentionRate FROM orders o WHERE o.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND CURRENT_DATE GROUP BY Month;","The generated query calculates a monthly retention rate, not the monthly growth rate of returning customers. It groups by month but doesn't compare growth between months. The ground truth query calculates growth between two specific years, which also isn't monthly growth, but focuses on returning customers.",None
What is the total freight cost for each shipping method?,"SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, SUM(Freight) AS TotalFreightCost
FROM orders
GROUP BY ShipVia;
```","Both queries are identical in logic and structure, correctly calculating the total freight cost for each shipping method by grouping on 'ShipVia' and summing the 'Freight'.","SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",The generated SQL query accurately answers the user's question by calculating the total freight cost for each shipping method. It matches the ground truth query exactly.,both
Which month had the highest on-time delivery rate?,"SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM') ORDER BY OnTimeDeliveryRate DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
       COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate
FROM orders
GROUP BY Month
ORDER BY OnTimeDeliveryRate DESC
LIMIT 1;
```",Both queries calculate the on-time delivery rate by month and return the month with the highest rate. The difference in date functions (DATE_FORMAT vs. TO_CHAR) does not affect the logic since they achieve the same purpose in different SQL dialects.,"SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY Year, Month ORDER BY OnTimeRate DESC LIMIT 1;","Both queries calculate the on-time delivery rate by comparing the ShippedDate against the RequiredDate and order the results by the on-time rate, limiting the result to the highest rate. The difference in date extraction (by year and month vs. month year string) does not affect the end result of determining the highest on-time delivery rate month.",both
Which employee has the highest total sales?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT e.EmployeeID, CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, 
       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries calculate the total sales per employee and order them in descending order to find the employee with the highest total sales. Although the generated query includes selecting the employee's full name, it does not affect the overall result, which is restricted to the top employee by total sales.","SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","Both queries calculate the total sales for each employee by joining the same tables and using the same logic for the calculation. They group by EmployeeID and order by total sales, selecting the top record. The SQL syntax and table aliases differ, but this does not affect the result.",both
What is the average discount given on products in the last quarter?,SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details] WHERE EXTRACT(QUARTER FROM CURRENT_DATE) - 1 = EXTRACT(QUARTER FROM TIMESTAMP '2023-01-01 00:00:00');,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details]
WHERE OrderID IN (
    SELECT OrderID
    FROM Orders  -- Assume there is an Orders table to determine orders within the last quarter
    WHERE OrderDate >= DATEADD(quarter, -1, GETDATE()) 
);
```","The generated query filters orders based on the last quarter relative to the current date using DATEADD, while the ground truth query attempts to extract and compare quarters which may not accurately capture the entirety of the last quarter unless additional logic is applied.","SELECT AVG(Discount) AS AverageDiscount FROM [Order Details] WHERE ORDER_DATE BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND CURRENT_DATE;","The generated query calculates the average discount for the last three months, whereas the ground truth query calculates it for the last quarter. These timeframes may not coincide if the current date is within the first month of a new quarter.",None
Which product generated the highest revenue in the last year?,"SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '1 year' AND o.OrderDate < DATE_TRUNC('year', CURRENT_DATE) GROUP BY od.ProductID ORDER BY Revenue DESC LIMIT 1;","```sql
SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM [Order Details] od
JOIN orders o ON od.OrderID = o.OrderID
WHERE o.OrderDate >= DATEADD(year, -1, GETDATE())
GROUP BY od.ProductID
ORDER BY TotalRevenue DESC
LIMIT 1;
```","The generated query uses DATEADD and GETDATE(), which selects orders from the last year to the current date. The ground truth query uses DATE_TRUNC to select the full last calendar year. This difference in date logic could yield different results.","SELECT p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY p.ProductName ORDER BY ProductRevenue DESC LIMIT 1;","The generated SQL query retrieves ProductName and aggregates by ProductName, whereas the ground truth query uses ProductID and aggregates by ProductID. If ProductName is unique per ProductID, then they are equivalent, but this is not guaranteed.",None
Calculate the on-time delivery rate for each month.,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    COUNT(OrderID) AS TotalOrders,
    COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveries,
    (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate
FROM 
    orders
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries calculate the on-time delivery rate per month, though the generated query provides additional counts which do not affect the accuracy of the rate calculation.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 100.0 * SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY Month;",Both queries compute the on-time delivery rate by comparing 'ShippedDate' to 'RequiredDate' and aggregate by month. They use slightly different formulas but yield the same result.,both
Which shipping methods result in the quickest delivery times?,"SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgDeliveryTime FROM orders GROUP BY ShipVia ORDER BY AvgDeliveryTime ASC;","```sql
SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageDeliveryTime
FROM orders
GROUP BY ShipVia
ORDER BY AverageDeliveryTime ASC;
```",Both queries calculate the average delivery time for each shipping method and sort the results in ascending order of the average delivery time.,"SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageDeliveryTime FROM orders GROUP BY ShipVia ORDER BY AverageDeliveryTime ASC;",Both queries calculate the average delivery time for each shipping method and order by it in ascending order. The alias name difference does not affect the functionality.,both
How many orders were managed by employees in each country?,"SELECT employees.Country, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.Country","```sql
SELECT e.Country, COUNT(o.OrderID) AS NumberOfOrders
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.Country;
```",Both queries join the employees and orders tables on EmployeeID and group by Country to count the number of orders per country. They will yield the same results.,"SELECT e.Country, COUNT(DISTINCT o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.Country;","Both queries count the orders managed by employees grouped by country. They use a JOIN between employees and orders, grouping by Country, but there's a minor difference in counting distinct OrderID, which does not affect the answer as OrderID is unique in a valid orders table.",both
Identify any employee under direct supervision and their total sales contributions.,"SELECT e1.EmployeeID, e1.ReportsTo, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees e1 INNER JOIN orders ON e1.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE e1.ReportsTo IS NOT NULL GROUP BY e1.EmployeeID, e1.ReportsTo;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE e.EmployeeID IN (SELECT DISTINCT ReportsTo FROM employees WHERE ReportsTo IS NOT NULL)
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","The generated query uses a subquery to find employees who are reported to, which doesn't match the user question or ground truth query's approach. It also incorrectly includes employees themselves instead of those under supervision.","SELECT s.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN employees s ON e.EmployeeID = s.ReportsTo JOIN orders o ON s.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY s.EmployeeID;","Both queries calculate total sales for employees under direct supervision by referring to the 'ReportsTo' field and summing sales from the 'Order Details' table. Although structured differently, both achieve the same outcomes.",FT
Which employee has the highest average order value?,"SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AvgOrderValue DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
ORDER BY AverageOrderValue DESC
LIMIT 1;
```","Both queries calculate the average order value for each employee using the same logic and return the employee with the highest value. The additional columns in the SELECT clause of the generated query (FirstName, LastName) do not affect the result of determining which employee has the highest average order value.","SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AverageOrderValue DESC LIMIT 1;","Both queries calculate the average order value for each employee and order by it in descending order, limiting the result to the top employee. The difference in alias naming does not affect the result.",both
What is the Customer Retention Rate for the last year?,"SELECT (COUNT(DISTINCT CASE WHEN o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' THEN o.CustomerID END) * 1.0) / NULLIF(COUNT(DISTINCT CASE WHEN o.OrderDate < '2022-01-01' THEN o.CustomerID END), 0) AS RetentionRate FROM orders o;","```sql
SELECT 
    (COUNT(DISTINCT o2.CustomerID) * 100.0 / NULLIF(COUNT(DISTINCT o1.CustomerID), 0)) AS Customer_Retention_Rate
FROM 
    orders o1
LEFT JOIN 
    orders o2 ON o1.CustomerID = o2.CustomerID AND o2.OrderDate BETWEEN DATEADD(YEAR, -1, CURRENT_DATE) AND CURRENT_DATE
WHERE 
    o1.OrderDate < DATEADD(YEAR, -1, CURRENT_DATE);
```","The generated query uses a rolling last year period with CURRENT_DATE, while the ground truth query uses a fixed period for 2022. Therefore, they might yield different results depending on the current date.","SELECT (COUNT(DISTINCT CASE WHEN o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' THEN o.CustomerID END) / NULLIF(COUNT(DISTINCT CASE WHEN o.OrderDate < '2022-01-01' THEN o.CustomerID END), 0)) * 100 AS RetentionRate FROM orders o;","Both queries calculate the retention rate by dividing the number of unique customers in the last year by the number of unique customers before last year, handling division by zero with NULLIF. The minor difference in scaling by 100 or using a multiplier doesn't alter the correctness of the logic in the context of calculating a retention rate.",FT
Which customer has the highest shipping expenditure?,"SELECT CustomerID, SUM(Freight) AS TotalShippingCost FROM orders GROUP BY CustomerID ORDER BY TotalShippingCost DESC LIMIT 1;","```sql
SELECT CustomerID, SUM(Freight) AS TotalFreight
FROM orders
GROUP BY CustomerID
ORDER BY TotalFreight DESC
LIMIT 1;
```","Both queries calculate the total freight cost per customer and return the customer with the highest total. They only differ in alias naming (TotalFreight vs TotalShippingCost), which does not affect the result.","SELECT c.CustomerID, SUM(o.Freight) AS ShippingCost FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY ShippingCost DESC LIMIT 1;","Both queries calculate the total shipping expenditure per customer and return the customer with the highest sum. The use of 'customers' table in the generated query does not affect the result because it only uses the CustomerID, which is also available in the 'orders' table.",both
Calculate the total freight cost managed by each employee.,"SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;","```sql
SELECT 
    e.EmployeeID,
    e.FirstName,
    e.LastName,
    SUM(o.Freight) AS TotalFreight
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
GROUP BY 
    e.EmployeeID, e.FirstName, e.LastName;
```","Both queries calculate the total freight cost per employee, using the same join condition and sum aggregation. Including the first and last name in the generated query's SELECT and GROUP BY clauses doesn't affect the total freight calculation per employee.","SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName;",Both queries calculate the total freight cost per employee and will yield the same sum results even though the generated query includes additional columns.,both
What is the on-time delivery rate by country?,"SELECT ShipCountry, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(*)) * 100 AS on_time_delivery_rate FROM orders GROUP BY ShipCountry;","```sql
SELECT ShipCountry, 
       COUNT(OrderID) AS TotalOrders, 
       COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveries, 
       (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate
FROM orders
GROUP BY ShipCountry;
```","Both queries calculate the on-time delivery rate by dividing the count of on-time deliveries by the total count of orders per country. The generated query includes additional columns for the total orders and on-time deliveries, but they do not affect the calculation of the delivery rate, which produces the same result as the ground truth query.","SELECT ShipCountry, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END)::decimal / COUNT(OrderID) * 100) AS OnTimeRate FROM orders GROUP BY ShipCountry;",Both queries calculate the on-time delivery rate by country using a similar logic and yield the same results.,both
Compile a list of employees and their average order quantity per transaction.,"SELECT e.EmployeeID, AVG(od.Quantity) AS AverageOrderQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.Quantity) AS AverageOrderQuantity
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","Both queries calculate the average order quantity per employee by joining the 'employees', 'orders', and 'Order Details' tables and grouping by employee. Although the generated query includes additional columns (FirstName and LastName), it does not affect the core requirement of calculating the average order quantity per employee.","SELECT e.EmployeeID, AVG(od.Quantity) AS AvgQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",Both queries select the employee ID and calculate the average quantity per order by grouping on EmployeeID. The difference in the alias name for the average does not affect the correctness of the query.,both
List all products supplied by suppliers located in Germany.,SELECT ProductName FROM products INNER JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE suppliers.Country = 'Germany';,"```sql
SELECT products.ProductID, products.ProductName
FROM products
JOIN suppliers ON products.SupplierID = suppliers.SupplierID
WHERE suppliers.Country = 'Germany';
```","The generated query includes ProductID, whereas the ground truth only selects ProductName.",SELECT p.ProductName FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE s.Country = 'Germany';,Both queries select product names from products supplied by suppliers in Germany. They use an inner join on SupplierID and filter by suppliers' country being Germany.,FT
What is the total quantity of all products shipped to each country?,"SELECT orders.ShipCountry, SUM([Order Details].Quantity) AS Total_Quantity FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.ShipCountry","```sql
SELECT ShipCountry, SUM([Order Details].Quantity) AS TotalQuantity
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY ShipCountry;
```",Both queries calculate the total quantity of products shipped to each country by joining the 'orders' and 'Order Details' tables on the OrderID and grouping by ShipCountry. The queries yield the same result.,"SELECT ShipCountry, SUM(Quantity) as TotalQuantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry;",Both queries compute the total quantity of products shipped to each country by joining the 'orders' and 'Order Details' tables on OrderID and group the results by ShipCountry. The queries are functionally equivalent.,both
Which cities have the highest number of different customers?,"SELECT c.City, COUNT(DISTINCT c.CustomerID) AS UniqueCustomerCount FROM customers c GROUP BY c.City ORDER BY UniqueCustomerCount DESC;","```sql
SELECT City, COUNT(DISTINCT CustomerID) AS NumberOfCustomers
FROM customers
GROUP BY City
ORDER BY NumberOfCustomers DESC;
```",Both queries count distinct customers per city and sort the results in descending order based on the count.,"SELECT c.City, COUNT(DISTINCT c.CustomerID) as NumCustomers FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.City ORDER BY NumCustomers DESC;",Both queries count the distinct number of customers per city and order the results in descending order. The join with orders in the generated query does not affect the outcome.,both
Which employee fulfilled the most orders?,"SELECT orders.EmployeeID, COUNT(*) AS FulfilledOrders FROM orders WHERE orders.ShippedDate IS NOT NULL GROUP BY orders.EmployeeID ORDER BY FulfilledOrders DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS TotalOrders
FROM orders
GROUP BY EmployeeID
ORDER BY TotalOrders DESC
LIMIT 1;
```","The generated query does not consider whether orders are fulfilled (shipped). It counts all orders, while the ground truth query filters for orders with a non-null ShippedDate.","SELECT EmployeeID, COUNT(OrderID) AS OrdersFulfilled FROM orders GROUP BY EmployeeID ORDER BY OrdersFulfilled DESC LIMIT 1;","The generated query does not check if the orders are fulfilled, as it does not filter for ShippedDate. The ground truth query only counts orders that have a ShippedDate.",None
What is the total number of orders per month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY DATE_TRUNC('month', OrderDate);","```sql
SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS TotalOrders
FROM orders
GROUP BY Month
ORDER BY Month;
```","Both queries group by the truncated month of the OrderDate and count the OrderID, yielding the same result.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","Both queries group the orders by month and count the total number of orders, but use different functions to extract the month. The results will be equivalent.",both
List products with the highest total sales value.,"SELECT ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY ProductName ORDER BY TotalSales DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSalesValue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSalesValue DESC;
```","The generated query does not limit the results to the top 5 products by total sales value, which the ground truth query does.","SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSalesValue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY TotalSalesValue DESC LIMIT 5;","Both queries calculate total sales value per product using a join between products and Order Details, group by ProductName, and order by total sales in descending order, limiting results to 5.",FT
How many employees report directly to each manager?,"SELECT Manager.EmployeeID, COUNT(Employee.EmployeeID) AS DirectReports FROM employees AS Employee JOIN employees AS Manager ON Employee.ReportsTo = Manager.EmployeeID GROUP BY Manager.EmployeeID;","```sql
SELECT ReportsTo, COUNT(EmployeeID) AS NumberOfEmployees
FROM employees
GROUP BY ReportsTo;
```","Both queries calculate the number of employees reporting directly to each manager by grouping by the ReportsTo or Manager.EmployeeID fields, effectively achieving the same result.","SELECT m.FirstName || ' ' || m.LastName AS Manager, COUNT(e.EmployeeID) AS EmployeeCount FROM employees e LEFT JOIN employees m ON e.ReportsTo = m.EmployeeID GROUP BY Manager;",Both queries count the number of employees reporting directly to each manager by grouping on the manager's identifier. The differences in column naming and concatenating manager's name in the generated query do not affect the count results.,both
How many orders are shipped using more than one shipping method?,"SELECT COUNT(*) FROM (SELECT OrderID, COUNT(DISTINCT ShipVia) AS MethodCount FROM orders GROUP BY OrderID HAVING MethodCount > 1) AS MultiMethodOrders;","```sql
SELECT COUNT(DISTINCT o1.OrderID) AS OrdersWithMultipleShippingMethods
FROM orders o1
JOIN orders o2 ON o1.OrderID = o2.OrderID AND o1.ShipVia <> o2.ShipVia;
```",Both queries count orders with more than one shipping method by identifying distinct OrderIDs with differing ShipVia values.,"SELECT COUNT(orders.OrderID) AS MultiMethodOrders FROM (SELECT OrderID, COUNT(DISTINCT ShipVia) AS MethodsUsed FROM orders GROUP BY OrderID) AS methods WHERE MethodsUsed > 1",Both queries count the number of orders that use more than one distinct shipping method by grouping orders and checking a count condition on distinct ShipVia values. They effectively perform the same logic.,both
Determine the retention rate of customers from January 2023 to December 2023.,SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' THEN orders.CustomerID END) * 1.0 / COUNT(DISTINCT orders.CustomerID)) AS RetentionRate FROM orders WHERE orders.OrderDate < '2023-01-01' OR orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31';,"```sql
SELECT 
    (COUNT(DISTINCT orders.CustomerID) 
     WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') * 100.0 / 
    (COUNT(DISTINCT orders.CustomerID) 
     WHERE orders.OrderDate < '2023-01-01') AS RetentionRate
FROM 
    orders;
```","The generated SQL query incorrectly applies WHERE clauses within COUNT, which is syntactically incorrect. It also calculates retention based on previous customers only, missing January 2023 to December 2023 customers. The ground truth query correctly calculates customers within and before the desired date range, providing a retention rate.","```sql
SELECT 
    (COUNT(DISTINCT orders.CustomerID) * 1.0 / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31')) AS RetentionRate
FROM 
    orders 
WHERE 
    orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' 
    AND orders.CustomerID IN (SELECT CustomerID FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-01-31');
```","The generated query calculates the retention rate based on customers who made orders in both January 2023 and the entire year. The ground truth query calculates it based on all unique customers from 2022 and 2023 combined. The logic and time periods differ, resulting in different calculations.",None
What is the relationship between employee tenure and sales performance?,"SELECT e.EmployeeID, DATEDIFF(CURRENT_DATE, e.HireDate) AS Tenure, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","```sql
SELECT e.EmployeeID, 
       e.FirstName, 
       e.LastName, 
       DATEDIFF(CURDATE(), e.HireDate) AS TenureDays, 
       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID
LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName, e.HireDate
ORDER BY TenureDays;
```","Both queries calculate the tenure of employees and aggregate the total sales, grouped by EmployeeID. Differences in column selection and join types do not affect core functionality.","SELECT e.EmployeeID, e.FirstName, e.LastName, YEAR(CURDATE()) - YEAR(e.HireDate) AS Tenure, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName;","The generated query calculates tenure in years, while the ground truth uses days, causing different results for tenure measurement.",Base
What is the overall discount given for all orders?,SELECT SUM(Quantity * UnitPrice * Discount) FROM [Order Details];,"```sql
SELECT SUM(Discount) AS TotalDiscount
FROM [Order Details];
```","The generated query sums the Discount column, assuming it represents the total discount value. The ground truth query calculates the discount as a product of Quantity, UnitPrice, and Discount rate, which correctly represents the overall discount applied to all orders.",SELECT SUM(od.UnitPrice * od.Discount * od.Quantity) AS TotalDiscount FROM [Order Details] od;,"Both queries calculate the total discount by multiplying UnitPrice, Discount, and Quantity, and summing them up across all order details. The order of multiplication does not affect the result.",FT
Find the proportion of discontinued products to total products available.,SELECT (COUNT(*) FILTER (WHERE Discontinued = 1) * 1.0 / COUNT(*)) AS DiscontinuedProportion FROM products;,"```sql
SELECT 
    (SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END) * 1.0 / COUNT(*)) AS ProportionDiscontinued
FROM 
    products;
```",Both queries calculate the proportion of discontinued products to total products. They use different syntax but achieve the same result.,SELECT (COUNT(*) FILTER (WHERE p.Discontinued = 1)::decimal / COUNT(*)) * 100 AS DiscontinuedProportion FROM products p;,Both queries accurately calculate the proportion of discontinued products to total products. They differ only in syntax: the generated query uses type casting to decimal and multiplies by 100 to express the result as a percentage.,both
Which products have the lowest sales performance?,"SELECT ProductID, SUM(Quantity) AS TotalSales FROM [Order Details] GROUP BY ProductID HAVING SUM(Quantity) = (SELECT MIN(TotalSales) FROM (SELECT SUM(Quantity) AS TotalSales FROM [Order Details] GROUP BY ProductID) AS SubQuery);","```sql
SELECT p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSales ASC
```","The generated query lists products ordered by total sales, while the ground truth query finds products with the absolute lowest sales performance.","SELECT o.ProductID, SUM(od.Quantity) AS TotalSales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY o.ProductID ORDER BY TotalSales ASC LIMIT 5;","The generated query does not exactly answer the user's question as it only limits to the top 5 lowest sales, whereas the ground truth query finds products with the absolute minimum total sales.",None
What is the average discount applied to orders by country?,"SELECT customers.Country, AVG([Order Details].Discount) AS AvgDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.Country;","```sql
SELECT c.Country, AVG(od.Discount) AS AverageDiscount
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.Country;
```","Both queries correctly calculate the average discount for orders grouped by country. The table aliases and column aliases differ, but the logic and structure are equivalent.","SELECT c.Country, AVG(od.Discount) AS AverageDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Country;","Both queries compute the average discount applied to orders grouped by country using the same joins and calculations, ensuring they yield the same results.",both
What is the average order fulfillment time during the last year?,"SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31';","```sql
SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageOrderFulfillmentTime
FROM orders
WHERE OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE);
```","The generated query uses a dynamic date range based on the current date, while the ground truth query has a fixed date range for the year 2022.","SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE YEAR(OrderDate) = 2022;",Both queries filter orders from the year 2022 and calculate the average difference between ShippedDate and OrderDate.,FT
What is the total freight cost associated with each employee's orders?,"SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(o.Freight) AS TotalFreight
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","Both queries correctly calculate the total freight for orders associated with each employee. They differ only in the inclusion of the employee's first and last names, but this does not affect the calculation of total freight by employee.","SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName;","Both queries calculate the total freight cost for each employee's orders by grouping on EmployeeID. The generated query includes additional employee details, but this does not affect the total freight calculation.",both
What is the total number of units sold by supplier?,"SELECT suppliers.CompanyName, SUM([Order Details].Quantity) AS total_units_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY total_units_sold DESC","```sql
SELECT products.SupplierID, SUM([Order Details].Quantity) AS total_units_sold
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
GROUP BY products.SupplierID
```","The generated query reports the total units sold by supplier ID, while the ground truth query reports it by supplier company name. Additionally, the ground truth orders the results by total units sold in descending order.","SELECT s.SupplierID, s.CompanyName, SUM(od.Quantity) AS TotalUnitsSold FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID, s.CompanyName;",Both queries calculate the total number of units sold by supplier and use different ordering but yield the same results in terms of grouping and summing quantities.,FT
Find the customer with the highest lifetime value.,"SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY LifetimeValue DESC LIMIT 1;","```sql
SELECT customers.CustomerID, customers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID, customers.CompanyName
ORDER BY LifetimeValue DESC
LIMIT 1;
```","Both queries calculate the lifetime value by summing the total revenue for each customer and then order this sum in descending order to find the highest. The only difference is in the inclusion of 'CompanyName' in the GROUP BY clause and result, but this does not affect the accuracy of finding the customer with the highest lifetime value.","SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC LIMIT 1;","Both queries effectively calculate the lifetime value for each customer by summing up the total revenue from orders and order details, grouping by CustomerID, and ordering by the highest value. The structure and logic of the queries are the same, achieving the same result.",both
What is the total sales quantity for each product?,"SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSalesQuantity
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName;
```","Both queries calculate the total sales quantity for each product, grouping by product details. The inclusion of ProductID in the generated query does not affect the correctness as each ProductName is assumed to have a unique ProductID.","SELECT ProductID, SUM(Quantity) AS TotalSales FROM [Order Details] GROUP BY ProductID;","The generated query lacks joining with the products table to get product names, which means it only provides product IDs, not names.",Base
Which month has the highest on-time delivery percentage?,"SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS OrderMonth, (SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END)::DECIMAL / COUNT(*)::DECIMAL) * 100 AS OnTimeDeliveryPercentage FROM orders GROUP BY OrderMonth ORDER BY OnTimeDeliveryPercentage DESC LIMIT 1;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID)) AS OnTimeDeliveryPercentage
FROM 
    orders
GROUP BY 
    Month
ORDER BY 
    OnTimeDeliveryPercentage DESC
LIMIT 1;
```",Both queries calculate the on-time delivery percentage per month and sort the results to find the highest value. The difference in date formatting functions and type casting does not affect the correctness of the result.,"```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, (SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 100.0) / COUNT(OrderID) AS on_time_percentage FROM orders GROUP BY month ORDER BY on_time_percentage DESC LIMIT 1;```","Both queries calculate the on-time delivery percentage by comparing 'ShippedDate' and 'RequiredDate', then group by month and order by the percentage to find the highest, though using different SQL dialects for date formatting.",both
What is the average time taken to fulfill orders each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month ORDER BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM 
    orders
GROUP BY 
    Month
```",Both queries calculate the average fulfillment time per month using similar functions to group by month and compute datediff.,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month;","The generated SQL query uses DATE_FORMAT with the format '%Y-%m', which may not be same as DATE_TRUNC('month', OrderDate) used in the ground truth. Also, it lacks an ORDER BY clause, which might lead to a different result ordering.",Base
What is the average freight cost for orders shipped to the USA?,SELECT AVG(Freight) AS AverageFreightToUSA FROM orders WHERE ShipCountry = 'USA';,"```sql
SELECT AVG(Freight) AS AverageFreightCost
FROM orders
WHERE ShipCountry = 'USA';
```","Both queries calculate the average freight cost for orders shipped to the USA, differing only in the alias name, which does not affect the results.",SELECT AVG(Freight) AS AvgFreightCostUSA FROM orders WHERE ShipCountry = 'USA';,"Both queries calculate the average freight cost for orders shipped to the USA, despite different alias names for the result.",both
Determine the product with the highest inventory turnover ratio.,"SELECT TOP 1 p.ProductID, (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY InventoryTurnoverRatio DESC;","```sql
SELECT p.ProductID, p.ProductName, 
       SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY InventoryTurnoverRatio DESC
LIMIT 1;
```","Both queries calculate the inventory turnover ratio as the sum of sales divided by average units in stock, group by ProductID, and order by the ratio in descending order to select the top product.","SELECT P.ProductName, SUM(OD.Quantity * OD.UnitPrice) / AVG(P.UnitsInStock) AS InventoryTurnover FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID GROUP BY P.ProductName ORDER BY InventoryTurnover DESC LIMIT 1;","Although both queries aim to calculate the inventory turnover, they differ in output format. The generated query selects ProductName and limits results with LIMIT, while the ground truth query selects ProductID and uses TOP 1.",Base
What is the total inventory value for each category?,"SELECT CategoryID, SUM(UnitPrice * UnitsInStock) AS InventoryValue FROM products GROUP BY CategoryID;","```sql
SELECT 
    p.CategoryID, 
    SUM(p.UnitPrice * p.UnitsInStock) AS TotalInventoryValue
FROM 
    products p
GROUP BY 
    p.CategoryID;
```",Both queries calculate the total inventory value for each category by multiplying UnitPrice by UnitsInStock and summing up for each CategoryID.,"SELECT CategoryID, SUM(UnitsInStock * UnitPrice) AS InventoryValue FROM products GROUP BY CategoryID;","Both queries calculate the total inventory value per category by multiplying UnitsInStock with UnitPrice and grouping the result by CategoryID. The operations and grouping are identical, thus yielding the same results.",both
Find the correlation between employee hire date and total sales.,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, YEAR(CURDATE()) - YEAR(e.HireDate) AS YearsSinceHire FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","```sql
SELECT 
    e.HireDate, 
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    e.HireDate
```","The generated query attempts to correlate hire date with total sales but only aggregates by hire date, not analyzing correlation. The ground truth calculates years since hire for individual analysis, which implies further correlation steps not present in either query.","SELECT e.EmployeeID, e.HireDate, IFNULL(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)), 0) AS TotalSales FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.HireDate;","The generated query does not calculate the correlation between hire date and total sales. It returns total sales for each employee along with their hire date, but 'YearsSinceHire' is necessary for correlation analysis as seen in the ground truth query.",None
What is the average price of products per supplier?,"SELECT SupplierID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY SupplierID;","```sql
SELECT SupplierID, AVG(UnitPrice) AS AveragePrice
FROM products
GROUP BY SupplierID;
```","The generated SQL query correctly calculates the average price of products per supplier by selecting the SupplierID and the average of UnitPrice from the products table, grouped by SupplierID. It matches the logic and results of the ground truth query.","SELECT s.SupplierID, AVG(p.UnitPrice) AS AveragePrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;","Both queries calculate the average price of products per supplier by grouping on SupplierID and averaging UnitPrice. The join in the generated query doesn't alter the results since only AVG(UnitPrice) and GROUP BY SupplierID are used, matching the ground truth.",both
Identify customers who have never received a discount.,SELECT CustomerID FROM customers WHERE NOT EXISTS (SELECT 1 FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE customers.CustomerID = o.CustomerID AND od.Discount > 0);,"```sql
SELECT DISTINCT c.CustomerID, c.CompanyName
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE od.Discount = 0
GROUP BY c.CustomerID, c.CompanyName
HAVING COUNT(od.Discount) = COUNT(od.OrderID)
```","The generated query selects customers with orders always having 0 discount, but it may include those with no discount orders coexisting with discount orders. The ground truth query checks for any existence of discount orders and excludes them entirely.","SELECT DISTINCT c.CustomerID, c.CompanyName FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount = 0;","The generated query selects customers who have orders with no discounts, while the ground truth query selects customers who have never received any discount on all their orders.",None
Calculate the difference between order date and shipped date for each order.,"SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS ShippingDelay FROM orders;","```sql
SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTime
FROM orders;
```","The generated SQL query and the ground truth query both calculate the difference between the order date and the shipped date for each order. The only difference is the alias name, which does not affect the result.","SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS DaysToShip FROM orders;","Both queries calculate the difference between ShippedDate and OrderDate for each order. The difference is assigned an alias, which does not affect the result.",both
What is the on-time delivery rate for each shipping method?,"SELECT ShipVia, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, 
       COUNT(OrderID) AS TotalOrders, 
       COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveries, 
       COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate
FROM orders
GROUP BY ShipVia;
```","Both queries calculate the on-time delivery rate per shipping method by dividing the count of on-time deliveries by the total number of orders. They differ in how they express the calculation, but the result is the same.","SELECT ShipVia, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS On_time_Rate FROM orders GROUP BY ShipVia;","Both queries calculate the on-time delivery rate for each shipping method by dividing the count of on-time shipments by the total number of orders, grouped by ShipVia. The difference in multiplication factors (1.0 vs 100.0) affects the scale (rate vs percentage), but the logical operation and data returned remain the same.",both
Which product category generates the highest revenue?,"SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS category_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY category_revenue DESC LIMIT 1","```sql
SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN categories ON products.CategoryID = categories.CategoryID
GROUP BY categories.CategoryName
ORDER BY total_revenue DESC
LIMIT 1;
```","Both queries calculate total revenue per category and return the category with the highest revenue. They achieve this through the same logic and operations, differing only in naming of the calculated field, which does not affect the outcome.","SELECT c.CategoryName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS category_revenue FROM products p JOIN categories c ON p.CategoryID = c.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryName ORDER BY category_revenue DESC LIMIT 1;","Both queries calculate the revenue per category and order the results in descending order to find the highest revenue, using equivalent joins and operations on tables and columns.",both
What is the average time taken to fulfill orders in Q1 2023?,"SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'","```sql
SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time 
FROM orders 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'
```","The generated SQL query and the ground truth query calculate the same average order fulfillment time for Q1 2023. The only difference is in the alias name, which does not affect the results.","SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = 2023 AND EXTRACT(QUARTER FROM OrderDate) = 1;",Both queries compute the average number of days between the order and shipped dates for orders placed in Q1 2023. The methods to filter Q1 2023 are equivalent.,both
What is the average order value for the year?,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID;,"```sql
SELECT 
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue
FROM 
    orders o
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
WHERE 
    YEAR(o.OrderDate) = YEAR(CURRENT_DATE);
```","The generated query filters orders to the current year only, whereas the ground truth query calculates the average order value for all orders without year restriction.","SELECT YEAR(OrderDate) AS Year, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN ""Order Details"" od ON o.OrderID = od.OrderID GROUP BY YEAR(OrderDate);","The generated query groups by year, providing average order value per year rather than for the entire dataset as asked by the user.",None
How does the shipping cost vary by country?,"SELECT ShipCountry, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipCountry ORDER BY AverageFreight;","```sql
SELECT ShipCountry, AVG(Freight) AS AverageShippingCost
FROM orders
GROUP BY ShipCountry;
```","Both queries calculate the average shipping cost by country. The difference is that the ground truth query includes an ORDER BY clause, but this does not affect the core result of the averages.","SELECT ShipCountry, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY ShipCountry;","The generated query and the ground truth query both calculate the average freight by country, providing the same data output. The only difference is the ground truth query orders the results, which does not change the data itself.",both
What is the total value of current inventory for each supplier?,"SELECT SupplierID, SUM(UnitsInStock * UnitPrice) AS InventoryValue FROM products GROUP BY SupplierID;","```sql
SELECT 
    SupplierID,
    SUM(UnitsInStock * UnitPrice) AS TotalInventoryValue
FROM 
    products
GROUP BY 
    SupplierID;
```",Both queries compute the total value of current inventory for each supplier by multiplying UnitsInStock by UnitPrice and summing the results for each SupplierID. The column alias is different but does not affect the result.,"SELECT suppliers.SupplierID, suppliers.CompanyName, SUM(products.UnitsInStock * products.UnitPrice) AS InventoryValue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID, suppliers.CompanyName;","Both queries calculate the total inventory value for each supplier, grouping by SupplierID. The generated query includes the supplier's company name, but this does not affect the total values calculated.",both
Find products with zero units on order but high units in stock.,SELECT ProductName FROM products WHERE UnitsOnOrder = 0 AND UnitsInStock > 50;,"```sql
SELECT ProductID, ProductName, UnitsInStock, UnitsOnOrder
FROM products
WHERE UnitsOnOrder = 0 AND UnitsInStock > 100; 
```","The generated query and ground truth query differ in both UnitsInStock threshold (greater than 100 vs. greater than 50) and selected columns (ProductID, ProductName, UnitsInStock, UnitsOnOrder vs. just ProductName). They may return different results and formats.",SELECT * FROM products WHERE UnitsOnOrder = 0 AND UnitsInStock > 100;,"The generated query selects all columns and sets a threshold of 100 for UnitsInStock, while the ground truth query selects only ProductName and has a threshold of 50.",None
Calculate the total units sold and total discount given per supplier.,"SELECT s.SupplierID, SUM(od.Quantity) AS TotalUnitsSold, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN suppliers s ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;","```sql
SELECT p.SupplierID, 
       SUM(od.Quantity) AS TotalUnitsSold, 
       SUM(od.Discount * od.Quantity) AS TotalDiscountGiven
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.SupplierID;
```","The generated SQL calculates total discount as the sum of discount multiplied by quantity. The ground truth SQL multiplies this further by unit price, likely aiming to calculate total discount value in currency rather than units.","SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].Quantity) AS TotalUnitsSold, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID, suppliers.CompanyName;","Both queries accurately calculate the total units sold and total discount per supplier by joining the suppliers, products, and order details tables. They group by SupplierID and perform equivalent calculations, despite slight differences in syntax and selected columns.",FT
What is the average shipping cost per order by shipper?,"SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName","```sql
SELECT shippers.ShipperID, AVG(orders.Freight) AS average_shipping_cost
FROM orders
JOIN shippers ON orders.ShipVia = shippers.ShipperID
GROUP BY shippers.ShipperID
```","The generated query groups by ShipperID while the ground truth query groups by CompanyName, which can lead to different results if multiple companies share the same ShipperID.","SELECT ShipVia, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY ShipVia;","The generated query groups by ShipVia, which results in a numeric ID, while the ground truth query groups by the shipper's company name by joining with the shippers table. Thus, they yield different results.",None
How many distinct categories are in the products table?,SELECT COUNT(DISTINCT CategoryID) FROM products;,"```sql
SELECT COUNT(DISTINCT CategoryID) AS DistinctCategoryCount FROM products;
```",Both queries count the distinct categories in the products table. The difference in output column naming does not affect the result.,SELECT COUNT(DISTINCT CategoryID) AS DistinctCategoryCount FROM products;,"Both queries count the distinct number of categories in the products table, yielding the same result.",both
Which product categories result in the highest sales revenue?,"SELECT c.CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products p ON [Order Details].ProductID = p.ProductID GROUP BY c.CategoryID ORDER BY TotalSales DESC;","```sql
SELECT products.CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
GROUP BY products.CategoryID
ORDER BY TotalSales DESC;
```","The ground truth query uses an alias 'c' for the 'products' table, but it is not defined or used correctly in the query.","SELECT p.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.CategoryID ORDER BY TotalRevenue DESC;","The generated query uses p.CategoryID, but it should use c.CategoryID. There is no JOIN with the categories table to get correct CategoryID.",None
What is the total number of products supplied by each supplier?,"SELECT suppliers.CompanyName, COUNT(products.ProductID) AS TotalProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;","```sql
SELECT suppliers.SupplierID, suppliers.CompanyName, COUNT(products.ProductID) AS TotalProducts
FROM suppliers
LEFT JOIN products ON suppliers.SupplierID = products.SupplierID
GROUP BY suppliers.SupplierID, suppliers.CompanyName;
```",Both queries accurately compute the total number of products supplied by each supplier. Differences in structure such as using LEFT JOIN vs JOIN or including SupplierID do not affect the correctness of the end result with respect to the user's question.,"SELECT SupplierID, COUNT(ProductID) AS TotalProducts FROM products GROUP BY SupplierID;","The generated query provides the total number of products by supplier ID only, while the ground truth query returns the total products by supplier company name, making the results semantically different.",Base
Find products with the highest unit price to average discount ratio.,"SELECT ProductID, UnitPrice / AVG(Discount) AS PriceDiscountRatio FROM [Order Details] GROUP BY ProductID ORDER BY PriceDiscountRatio DESC;","```sql
SELECT 
    p.ProductID,
    p.ProductName,
    p.UnitPrice,
    AVG(od.Discount) AS AverageDiscount,
    (p.UnitPrice / AVG(od.Discount)) AS PriceToDiscountRatio
FROM 
    products p
LEFT JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.ProductName, p.UnitPrice
ORDER BY 
    PriceToDiscountRatio DESC
LIMIT 1;
```","The generated query joins with the products table to include ProductName and considers products even if they have no matching order details, while the ground truth query operates solely on the [Order Details] table. The generated query will output different results as it includes cases with NULL discount and potentially more fields.","SELECT ProductName, UnitPrice / AVG(Discount) AS PriceToAvgDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, ProductName ORDER BY PriceToAvgDiscount DESC LIMIT 1;","The generated query includes the ProductName and joins the products and [Order Details] tables, unlike the ground truth which only uses the [Order Details] table and outputs ProductID.",None
Which supplier has the highest average product price?,"SELECT s.CompanyName, AVG(p.UnitPrice) AS AvgPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName ORDER BY AvgPrice DESC LIMIT 1;","```sql
SELECT suppliers.SupplierID, suppliers.CompanyName, AVG(products.UnitPrice) AS AverageProductPrice
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
GROUP BY suppliers.SupplierID, suppliers.CompanyName
ORDER BY AverageProductPrice DESC
LIMIT 1
```","Both queries correctly find the supplier with the highest average product price by joining the suppliers and products tables, grouping by supplier, calculating the average price, sorting in descending order, and limiting the result to one.","SELECT s.SupplierID, s.CompanyName, AVG(p.UnitPrice) AS AveragePrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY AveragePrice DESC LIMIT 1;",Both queries calculate the average product price per supplier and return the supplier with the highest average. The difference in grouping by SupplierID or CompanyName does not affect the result as each SupplierID corresponds uniquely to a CompanyName.,both
Identify the top 5 suppliers by average lead time.,"SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN orders ON products.ProductID = (SELECT ProductID FROM [Order Details] WHERE orders.OrderID = [Order Details].OrderID) GROUP BY suppliers.SupplierID ORDER BY AverageLeadTime ASC LIMIT 5;","```sql
SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.CompanyName
ORDER BY AverageLeadTime ASC
LIMIT 5;
```","Both queries aim to find the top 5 suppliers by average lead time. The main variation is the approach to join 'Order Details', but both achieve the same outcome by calculating average lead time grouped by suppliers and ordering the result.","SELECT SupplierID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS Metric FROM orders GROUP BY SupplierID ORDER BY Metric DESC LIMIT 5;","The generated query does not join the suppliers and orders tables properly and only considers the orders table. It also sorts by descending order, while the ground truth sorts ascending.",Base
Which employee had the highest average order value in Q1 2023?,"SELECT employees.FirstName, employees.LastName, AVG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID)) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY employees.EmployeeID ORDER BY avg_order_value DESC LIMIT 1","```sql
SELECT employees.EmployeeID, AVG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) AS average_order_value
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
JOIN employees ON orders.EmployeeID = employees.EmployeeID
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'
GROUP BY employees.EmployeeID
ORDER BY average_order_value DESC
LIMIT 1
```","The generated SQL is incorrect because it aggregates using AVG(SUM(...)), which is not valid, and doesn't account for the number of distinct orders per employee. The ground truth correctly computes average order value by dividing the sum of values by the count of distinct orders per employee.","SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE QUARTER(orders.OrderDate) = 1 AND YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID ORDER BY avg_order_value DESC LIMIT 1","The generated query calculates the average based on order details directly, while the ground truth calculates it by dividing the total value by the count of distinct orders. Additionally, the ground truth uses a date range for Q1 instead of the QUARTER() function.",None
Which month has the highest on-time delivery rate?,"SELECT EXTRACT(MONTH FROM OrderDate) AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID)) AS OnTimeRate FROM orders GROUP BY Month ORDER BY OnTimeRate DESC LIMIT 1;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth,
    COUNT(OrderID) AS TotalOrders,
    COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveries,
    COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID) AS OnTimeDeliveryRate
FROM 
    orders
GROUP BY 
    OrderMonth
ORDER BY 
    OnTimeDeliveryRate DESC
LIMIT 1;
```","The generated query groups by both year and month, whereas the ground truth groups only by month. This could yield different results if the year is considered in grouping.","SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS On_Time_Rate FROM orders GROUP BY Year, Month ORDER BY On_Time_Rate DESC LIMIT 1;","The generated query groups results by both year and month, while the ground truth query groups only by month. This could lead to different results if delivery rates vary across years.",None
How much discount was given in total last year?,SELECT SUM(UnitPrice * Quantity * Discount) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1,"```sql
SELECT SUM([Order Details].Discount * [Order Details].UnitPrice * [Order Details].Quantity) AS TotalDiscount
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1;
```","Both queries compute the total discount given last year by summing the product of the UnitPrice, Quantity, and Discount from the Order Details table, where the order year is last year. The structure and joins are equivalent in both queries.",SELECT SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM [Order Details] od LEFT JOIN orders o ON od.OrderID = o.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = 2022;,"Both queries calculate the total discount given last year by summing the product of UnitPrice, Quantity, and Discount for orders from the previous year, though they use slightly different syntax for the date extraction.",both
What is the most common order quantity?,"SELECT od.Quantity, COUNT(od.Quantity) AS Frequency FROM [Order Details] od GROUP BY od.Quantity ORDER BY Frequency DESC LIMIT 1;","```sql
SELECT Quantity
FROM [Order Details]
GROUP BY Quantity
ORDER BY COUNT(*) DESC
LIMIT 1;
```","Both queries aim to find the most common order quantity by grouping and ordering by frequency, using a descending order and limiting the result to 1. The difference in wording does not affect the output.","```sql
SELECT Quantity, COUNT(*) AS Frequency FROM [Order Details] GROUP BY Quantity ORDER BY Frequency DESC LIMIT 1;
```","Both queries group by Quantity, count the frequency of each, order by this frequency in descending order, and limit the result to the most frequent quantity.",both
How many customers placed more than five orders last year?,SELECT COUNT(customers.CustomerID) AS customer_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 5;,"```sql
SELECT COUNT(DISTINCT orders.CustomerID) AS customer_count 
FROM orders 
WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1 
GROUP BY orders.CustomerID 
HAVING COUNT(orders.OrderID) > 5;
```",Both queries correctly count customers who placed more than five orders last year. They use different table references but logically produce the same result.,"SELECT c.CustomerID, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY c.CustomerID HAVING COUNT(o.OrderID) > 5;","The generated query provides a list of CustomerIDs with more than five orders, while the ground truth query counts how many such customers exist.",Base
How many products are discontinued from each supplier?,"SELECT SupplierID, COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1 GROUP BY SupplierID;","```sql
SELECT suppliers.CompanyName, COUNT(products.ProductID) AS DiscontinuedProductCount
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
WHERE products.Discontinued = 1
GROUP BY suppliers.CompanyName;
```","The Generated SQL Query returns company names while the Ground Truth SQL Query returns Supplier IDs. The structure of the results is different, not directly answering the same user question.","SELECT s.CompanyName, COUNT(p.ProductID) AS DiscontinuedCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1 GROUP BY s.CompanyName;","The generated query groups by CompanyName and returns it, while the ground truth query groups by SupplierID. They yield different result sets.",None
Find the total sales per product category for the current year.,"SELECT p.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY p.CategoryID;","```sql
SELECT p.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
JOIN products p ON od.ProductID = p.ProductID
WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE)
GROUP BY p.CategoryID;
```","Both queries calculate total sales per product category for the current year with the same logic. They differ only in the function used for the current date, using CURRENT_DATE in one and CURDATE() in the other, which are functionally the same.","SELECT P.CategoryID, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID JOIN orders O ON OD.OrderID = O.OrderID WHERE YEAR(O.OrderDate) = YEAR(CURRENT_DATE) GROUP BY P.CategoryID;","Both queries compute the total sales per product category for the current year using the same logic and join conditions. The function CURDATE() and CURRENT_DATE() are equivalent in this context, and table aliases are used similarly, resulting in identical outputs.",both
Identify products that need restocking based on their reorder level and units on order.,SELECT ProductName FROM products WHERE UnitsInStock + UnitsOnOrder <= ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, UnitsOnOrder, ReorderLevel
FROM products
WHERE UnitsInStock + UnitsOnOrder < ReorderLevel;
```","The generated query uses '<' while the ground truth query uses '<=', and the generated query selects additional columns that the ground truth does not.",SELECT ProductName FROM products WHERE UnitsOnOrder + UnitsInStock <= ReorderLevel;,"Both queries logically combine UnitsInStock and UnitsOnOrder and compare them to ReorderLevel, yielding the same results despite the order of addition.",FT
Identify the customer with the highest Lifetime Value (CLV).,"SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY LifetimeValue DESC LIMIT 1;","```sql
SELECT customers.CustomerID, customers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CustomerLifetimeValue
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID, customers.CompanyName
ORDER BY CustomerLifetimeValue DESC
LIMIT 1;
```","Both queries calculate the Lifetime Value for each customer by summing the total order values (adjusting for discounts) and return the customer with the highest lifetime value. The main difference is that the generated query includes the CompanyName, which does not affect the outcome.","SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CLV FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY CLV DESC LIMIT 1;","Both queries calculate the Lifetime Value (CLV) for customers by summing the products of UnitPrice, Quantity, and the discount factor for each order detail and then ordering the results in descending order to select the customer with the highest value. Despite the difference in alias names (CLV vs. LifetimeValue), both queries will yield the same result.",both
Identify suppliers with an average lead time greater than two weeks.,"SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID GROUP BY s.SupplierID HAVING AvgLeadTime > 14;","```sql
SELECT s.SupplierID, s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY s.SupplierID, s.CompanyName
HAVING AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) > 14;
```","The generated query includes the supplier's CompanyName in the SELECT and GROUP BY clauses, which affects the result set compared to the ground truth query.","SELECT o.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM orders o GROUP BY o.SupplierID HAVING AverageLeadTime > 14;","The generated SQL query does not join the necessary tables to ensure only suppliers are considered. The ground truth includes joins with suppliers, products, and order details to accurately calculate lead times per supplier.",None
How many orders are shipped via each shipping method?,"SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY ShipVia;
```","The generated SQL query accurately answers the user's question and yields the same results as the ground truth query because both queries select the ShipVia column and count the OrderID column, then group the results by ShipVia.","SELECT ShipVia, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipVia;",Both queries count the number of orders for each shipping method and group by 'ShipVia'. The difference in alias names ('TotalOrders' vs. 'OrderCount') does not affect the result.,both
Which employee has the highest average discount for orders handled?,"SELECT e.EmployeeID, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AvgDiscount DESC;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.Discount) AS AverageDiscount
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
ORDER BY AverageDiscount DESC
LIMIT 1;
```","The generated query selects additional columns (FirstName and LastName) not present in the ground truth. It also uses 'LIMIT 1' for retrieving the top employee, which the ground truth does not use. The approach for obtaining the highest average discount is correct, but the output columns differ.","SELECT e.EmployeeID, AVG(od.Discount) AS AverageDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AverageDiscount DESC LIMIT 1;","The generated query uses 'LIMIT 1' to select only the top result, while the ground truth query does not limit the results. The generated query answers the user's question by returning the single highest average discount, while the ground truth query lists all employees ordered by average discount.",None
What percentage of orders were delivered on time in June 2023?,SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-06-01' AND '2023-06-30',"```sql
SELECT (COUNT(orders.OrderID) FILTER (WHERE orders.ShippedDate <= orders.RequiredDate) * 100.0 / COUNT(orders.OrderID)) AS on_time_delivery_rate
FROM orders
WHERE orders.OrderDate BETWEEN '2023-06-01' AND '2023-06-30'
```",Both queries calculate the percentage of orders delivered on time using different syntaxes but achieve the same result.,"SELECT (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / NULLIF(COUNT(OrderID), 0)) AS OnTimeDeliveryRate FROM orders WHERE OrderDate BETWEEN '2023-06-01' AND '2023-06-30'","Both queries calculate the on-time delivery rate as a percentage for orders in June 2023. The generated query uses NULLIF to prevent division by zero, which is good practice, but otherwise both queries yield the same results.",both
Which shipping method is used the most?,"SELECT ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1","```sql
SELECT ShipVia, COUNT(*) AS ShippingMethodCount 
FROM orders 
GROUP BY ShipVia 
ORDER BY ShippingMethodCount DESC 
LIMIT 1;
```","Both queries group by ShipVia and order by the count in descending order, limiting the result to the top entry.","SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",Both queries count the number of orders per shipping method using GROUP BY and return the most used shipping method with LIMIT 1. COUNT(OrderID) and COUNT(*) yield the same result when counting non-null values in a column that doesn't contain nulls due to referential integrity or constraints.,both
Identify the least frequently ordered product.,"SELECT ProductID, COUNT(*) AS OrderFrequency FROM [Order Details] GROUP BY ProductID ORDER BY OrderFrequency ASC LIMIT 1;","```sql
SELECT products.ProductID, products.ProductName, COUNT([Order Details].Quantity) AS OrderCount
FROM products
LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY products.ProductID, products.ProductName
ORDER BY OrderCount ASC
LIMIT 1;
```","The generated query joins the 'products' table, selecting the 'ProductName', while the ground truth only considers 'Order Details' by counting per 'ProductID'. Both aim to find the least ordered product, but they may yield different results if NULLs in 'Order Details' exist and are included by the LEFT JOIN in the generated query.","SELECT ProductID, COUNT(*) AS Frequency FROM [Order Details] GROUP BY ProductID ORDER BY Frequency ASC LIMIT 1;","Both queries group by ProductID and order by the count in ascending order, selecting the least frequently ordered product.",FT
Which employee has the longest tenure in the company?,"SELECT EmployeeID, DATEDIFF(CURRENT_DATE, HireDate) AS TenureDays FROM employees ORDER BY TenureDays DESC LIMIT 1","```sql
SELECT FirstName, LastName, HireDate 
FROM employees 
ORDER BY HireDate ASC 
LIMIT 1;
```","The generated query orders by HireDate to return the earliest employee (longest tenure), but the output fields differ. It returns first and last name instead of tenure.","SELECT e.EmployeeID, e.FirstName, e.LastName, DATEDIFF(CURDATE(), e.HireDate) AS Tenure FROM employees e ORDER BY Tenure DESC LIMIT 1;","Both queries calculate tenure by finding the difference between the current date and the hire date, and return the employee with the longest tenure, ordered in descending order.",FT
Which supplier has the highest number of backorders?,"SELECT p.SupplierID, SUM(p.UnitsOnOrder) AS TotalBackorders FROM products p GROUP BY p.SupplierID ORDER BY TotalBackorders DESC;","```sql
SELECT suppliers.CompanyName, SUM(products.UnitsOnOrder) AS TotalBackorders
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
GROUP BY suppliers.CompanyName
ORDER BY TotalBackorders DESC
LIMIT 1;
```","The generated query finds the supplier with the highest number of backorders and returns the company name, while the ground truth query identifies the supplier ID and lacks a JOIN to link suppliers to their names.","SELECT SupplierID, COUNT(*) AS BackorderCount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0 GROUP BY SupplierID ORDER BY BackorderCount DESC LIMIT 1;","The generated query calculates backorders based on discounted orders, while the ground truth query sums 'UnitsOnOrder' for backorders.",None
Identify any products with a unit price exceeding $100 that have not been discontinued.,"SELECT ProductID, ProductName FROM products WHERE UnitPrice > 100 AND Discontinued = 0;","```sql
SELECT ProductID, ProductName, UnitPrice
FROM products
WHERE UnitPrice > 100 AND Discontinued = 0;
```",Both queries correctly identify products with a unit price over $100 that are not discontinued. The difference in selected columns does not affect the core result regarding which products meet the criteria.,"SELECT ProductID, ProductName FROM products WHERE UnitPrice > 100 AND Discontinued = 0;",Both queries select the ProductID and ProductName from the products table for products with a unit price greater than $100 and that are not discontinued. The queries are identical and will yield the same results.,both
Identify the suppliers providing more than 5 different products.,"SELECT SupplierID, COUNT(DISTINCT ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID HAVING COUNT(DISTINCT ProductID) > 5;","```sql
SELECT SupplierID
FROM products
GROUP BY SupplierID
HAVING COUNT(DISTINCT ProductID) > 5;
```",The generated query does not display the count of distinct products as the ground truth does.,"SELECT s.SupplierID, s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID, s.CompanyName HAVING COUNT(DISTINCT p.ProductID) > 5;",Both queries effectively identify suppliers providing more than 5 different products. The generated query joins suppliers with products to get the supplier details while the ground truth query only counts the products linked to suppliers. Results will match since both use COUNT(DISTINCT ProductID) > 5 to filter suppliers.,FT
How does sales performance vary by employee's city?,"SELECT e.City, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.City;","```sql
SELECT 
    e.City,
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    e.City
ORDER BY 
    TotalSales DESC;
```","The generated SQL query accurately answers the user's question. Both queries compute total sales by employee's city, and the only difference is that the generated query orders the results by total sales in descending order, which does not affect the correctness of the answer to the user's question.","SELECT e.City, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.City;","Both the generated SQL query and the ground truth SQL query are identical, and they both calculate total sales grouped by the employee's city.",both
Determine the average reorder level by category.,"SELECT p.CategoryID, AVG(p.ReorderLevel) AS AverageReorderLevel FROM products p GROUP BY p.CategoryID;","```sql
SELECT CategoryID, AVG(ReorderLevel) AS AverageReorderLevel
FROM products
GROUP BY CategoryID;
```","Both queries compute the average reorder level by category using the same logic and will yield the same results, despite minor syntactical differences such as table aliasing.","SELECT c.CategoryName, AVG(p.ReorderLevel) AS AvgReorderLevel FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryName;","The generated query groups by category name and joins with the categories table, which ensures the average reorder level is displayed with the category name. The ground truth query only uses CategoryID without a join, potentially missing the category name information.",Base
What is the average shipping cost to each country?,"SELECT ShipCountry, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY ShipCountry;","```sql
SELECT ShipCountry, AVG(Freight) AS AverageShippingCost
FROM orders
GROUP BY ShipCountry;
```","The generated SQL query correctly calculates the average shipping cost to each country by selecting ShipCountry and averaging Freight, grouping by ShipCountry. It yields the same results as the ground truth query.","SELECT ShipCountry, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY ShipCountry;",Both the generated and ground truth queries are identical and correctly compute the average shipping cost to each country by grouping the 'orders' table by 'ShipCountry' and using AVG on 'Freight'.,both
How many orders were delivered on or before the required date each month?,"SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, COUNT(OrderID) AS OnTimeDeliveries FROM orders WHERE ShippedDate <= RequiredDate GROUP BY DATE_FORMAT(ShippedDate, '%Y-%m');","```sql
SELECT 
    DATE_FORMAT(RequiredDate, '%Y-%m') AS Month,
    COUNT(OrderID) AS OrdersDeliveredOnTime
FROM 
    orders
WHERE 
    ShippedDate <= RequiredDate
GROUP BY 
    Month
```","Both queries group by month and count orders where the shipped date is on or before the required date, although the generated query uses an alias for month.","SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, COUNT(OrderID) AS OnTimeDeliveries FROM orders WHERE ShippedDate <= RequiredDate GROUP BY Month;","Both queries calculate the count of orders delivered on or before the required date, grouped by the month of the ShippedDate. The GROUP BY clause functions identically in both queries.",both
Find the order with the highest freight cost.,"SELECT OrderID, Freight FROM orders ORDER BY Freight DESC LIMIT 1;","```sql
SELECT * 
FROM orders 
ORDER BY Freight DESC 
LIMIT 1;
```","Both queries aim to find the order with the highest freight cost by sorting the 'orders' table by 'Freight' in descending order and limiting the result to one row. The difference is in the columns selected, but this does not affect the ability to determine which order has the highest freight cost.","SELECT OrderID, Freight FROM orders ORDER BY Freight DESC LIMIT 1;",The generated SQL query and the ground truth SQL query are identical. Both correctly find the order with the highest freight cost by ordering the 'Freight' column in descending order and limiting the result to the top entry.,both
What is the overall percentage of discontinued products for each supplier?,"SELECT p.SupplierID, (COUNT(CASE WHEN p.Discontinued = 1 THEN 1 END) / COUNT(*)::FLOAT) * 100 AS DiscontinuedPercentage FROM products p GROUP BY p.SupplierID;","```sql
SELECT 
    s.SupplierID, 
    s.CompanyName, 
    (SUM(CASE WHEN p.Discontinued = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(p.ProductID)) AS DiscontinuedPercentage
FROM 
    suppliers s
LEFT JOIN 
    products p ON s.SupplierID = p.SupplierID
GROUP BY 
    s.SupplierID, s.CompanyName;
```","Both queries calculate the percentage of discontinued products for each supplier. The generated query additionally retrieves the supplier's company name, which doesn't affect the discontinuation percentage calculation.","SELECT s.CompanyName, (COUNT(CASE WHEN p.Discontinued = 1 THEN 1 END) * 100.0 / COUNT(p.ProductID)) AS DiscontinuedRate FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName;","The generated query provides supplier names, while the ground truth provides SupplierID. If the ProductID serves as a unique identifier for products, results could match numerically, but not in structure or presentation.",Base
What is the average inventory level for each product category?,"SELECT CategoryID, AVG(UnitsInStock) AS AverageInventory FROM products GROUP BY CategoryID;","```sql
SELECT p.CategoryID, AVG(p.UnitsInStock) AS AverageInventoryLevel
FROM products p
GROUP BY p.CategoryID;
```",Both queries calculate the average inventory level for each product category by grouping on CategoryID. The use of table alias 'p' in the generated query does not affect the result.,"SELECT CategoryID, AVG(UnitsInStock) AS AverageStock FROM products GROUP BY CategoryID;","The generated query and the ground truth query both calculate the average inventory level grouped by CategoryID, yielding the same results. The difference is in the alias for the average, which does not affect the outcome.",both
What percentage of orders were delivered on or before the required date each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*) AS OnTimeDeliveryRate FROM orders GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
    (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID)) AS On_time_Delivery_Percentage
FROM 
    orders
GROUP BY 
    Month
```","Both queries calculate the percentage of orders delivered on or before the required date, per month. They use conditional counting and group by month, matching the user's question.","SELECT DATE_TRUNC('month', OrderDate) AS month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS on_time_delivery_rate FROM orders GROUP BY month;","Both queries calculate the percentage of orders delivered on or before the required date each month, using similar logic. Differences in date formatting and COUNT function do not affect the result's correctness.",both
Which supplier has the highest total sales?,"SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Total_Sales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY Total_Sales DESC LIMIT 1","```sql
SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.CompanyName
ORDER BY TotalSales DESC
LIMIT 1;
```","The generated SQL query and the ground truth query are functionally equivalent. Both calculate total sales for each supplier and return the one with the highest sales. The only differences are the alias names for TotalSales, which do not affect the query outcome.","SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID, suppliers.CompanyName ORDER BY TotalSales DESC LIMIT 1;","Both queries calculate the total sales per supplier and return the supplier with the highest total sales. The difference is in the selected columns, but they do not affect the outcome of identifying the supplier with the highest sales.",both
Calculate the monthly sales performance for each product.,"SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, p.ProductID, SUM(od.Quantity) AS MonthlyPerformance FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY EXTRACT(MONTH FROM o.OrderDate), p.ProductID","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    SUM(od.Quantity) AS TotalSales
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.ProductName
```",The generated query calculates total sales per product without considering the monthly breakdown.,"SELECT P.ProductName, YEAR(O.OrderDate) AS Year, MONTH(O.OrderDate) AS Month, SUM(OD.Quantity) AS TotalSold FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID JOIN orders O ON O.OrderID = OD.OrderID GROUP BY P.ProductName, YEAR(O.OrderDate), MONTH(O.OrderDate) ORDER BY Year, Month;","The generated query calculates sales performance by product name and includes the year, while the ground truth query calculates by product ID and omits the year.",None
Find all orders shipped by a specific carrier within a certain date range.,SELECT * FROM orders WHERE ShipVia = ? AND ShippedDate BETWEEN ? AND ?;,"```sql
SELECT *
FROM orders
WHERE ShipVia = 'specific_carrier'
AND ShippedDate BETWEEN 'start_date' AND 'end_date';
```","The generated SQL query effectively answers the user's question. It filters the orders where 'ShipVia' matches 'specific_carrier' and where 'ShippedDate' falls within the specified date range. The parameters in the ground truth query are placeholders, but conceptually, both queries perform the same function.","SELECT o.OrderID, o.OrderDate, o.ShippedDate FROM orders o WHERE o.ShipVia = (SELECT sh.CarrierID FROM shippers sh WHERE sh.CompanyName = 'Specific Carrier') AND o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31';","The generated query uses OrderDate for filtering while the ground truth uses ShippedDate. Additionally, the generated query assumes a specific carrier by name, while the ground truth uses a parameter for the carrier.",Base
What is the average order quantity for each product?,"SELECT ProductID, AVG(Quantity) AS AverageQuantity FROM [Order Details] GROUP BY ProductID","```sql
SELECT ProductID, AVG(Quantity) AS AverageOrderQuantity
FROM [Order Details]
GROUP BY ProductID
```","Both queries calculate the average order quantity for each product by grouping on ProductID, yielding the same results.","SELECT ProductID, AVG(Quantity) AS AvgQuantity FROM [Order Details] GROUP BY ProductID;","Both queries compute the average order quantity for each product using the AVG function and GROUP BY ProductID, only the alias names differ.",both
Which month had the highest sales revenue?,"SELECT EXTRACT(MONTH FROM OrderDate) AS Month, EXTRACT(YEAR FROM OrderDate) AS Year, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS SalesRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Year, Month ORDER BY SalesRevenue DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SalesRevenue
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY Month
ORDER BY SalesRevenue DESC
LIMIT 1;
```","The generated query groups by month only, ignoring the year context, which could result in conflating sales from different years into one month, unlike the ground truth which groups by both month and year.","SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m') ORDER BY total_sales DESC LIMIT 1;","The generated SQL query groups results by year and month together, while the ground truth groups them separately by extracting and ordering them by both year and month. This could lead to differences if the same month appears in multiple years.",None
List the suppliers whose average order lead time exceeds 20 days.,"SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID GROUP BY p.SupplierID HAVING AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) > 20;","```sql
SELECT s.SupplierID, s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY s.SupplierID, s.CompanyName
HAVING AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) > 20;
```","The generated query selects SupplierID and CompanyName, while the ground truth query only includes SupplierID. This may affect the results if CompanyName introduces duplicates or inconsistencies in aggregation.","SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY suppliers.SupplierID, suppliers.CompanyName HAVING AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) > 20;","The Generated SQL Query selects supplier names, while the Ground Truth SQL Query selects supplier IDs. The results differ in output columns.",None
What is the most commonly ordered product?,"SELECT ProductID, SUM(Quantity) AS TotalOrdered FROM [Order Details] GROUP BY ProductID ORDER BY TotalOrdered DESC LIMIT 1;","```sql
SELECT [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalQuantity
FROM [Order Details]
GROUP BY [Order Details].ProductID
ORDER BY TotalQuantity DESC
LIMIT 1;
```",Both queries calculate the total quantity ordered for each ProductID and return the product with the highest total. They use similar logic and will yield the same result.,"```sql
SELECT ProductID, COUNT(OrderID) AS OrderCount FROM [Order Details] GROUP BY ProductID ORDER BY OrderCount DESC FETCH FIRST 1 ROW ONLY;```","The generated query counts the number of orders per product, while the ground truth sums the quantities ordered. They measure different aspects of 'most commonly ordered'.",Base
Which employees have the highest number of orders processed?,"SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```","The generated query limits the result to a single employee, while the ground truth does not limit the number of employees returned.","SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS NumOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY NumOrders DESC;","Both queries determine which employees have processed the most orders. The generated query retrieves additional employee details but still ranks employees based on order count in descending order, matching the logic of the ground truth query.",FT
How does the average employee salary compare between different regions?,"SELECT Region, AVG(Salary) AS AvgSalary FROM employees GROUP BY Region;","```sql
SELECT Region, AVG(Salary) AS AverageSalary
FROM employees
GROUP BY Region;
```","Both queries calculate the average salary per region from the employees table using the AVG function and GROUP BY clause. The alias for AVG(Salary) is different, but this does not affect the result set.","SELECT Region, AVG(Salary) AS AvgSalary FROM (SELECT Employees.Region, Employees.EmployeeID, YEAR(CURRENT_DATE) - YEAR(Employees.HireDate) AS Seniority, Employees.Title, Employees.Salary, CASE WHEN YEAR(CURRENT_DATE) - YEAR(Employees.HireDate) >= 5 THEN 'Senior' ELSE 'Junior' END AS Level FROM Employees) AS SubQuery GROUP BY Region;","The generated query introduces unnecessary computations, like seniority and level classifications, which don't affect the result but complicate the query structure.",Base
Identify suppliers whose products have the lowest average inventory.,"SELECT SupplierID, AVG(UnitsInStock) AS AverageInventory FROM products GROUP BY SupplierID ORDER BY AverageInventory ASC LIMIT 1;","```sql
SELECT p.SupplierID, AVG(p.UnitsInStock) AS AverageInventory
FROM products p
GROUP BY p.SupplierID
ORDER BY AverageInventory ASC
LIMIT 1;
```","Both queries correctly identify the supplier with the lowest average inventory by calculating the average UnitsInStock per SupplierID and ordering them in ascending order, then limiting the result to 1.","SELECT s.SupplierID, s.CompanyName, AVG(p.UnitsInStock) AS AverageUnitsInStock FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID, s.CompanyName ORDER BY AverageUnitsInStock ASC LIMIT 1;","The generated query includes SupplierID and CompanyName from the suppliers table, while the ground truth query only considers the SupplierID and does not involve the suppliers table. This could lead to a different result if the suppliers have the same lowest average inventory.",Base
Which employees have the highest sales performance this year?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID ORDER BY employee_sales DESC","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
JOIN employees ON orders.EmployeeID = employees.EmployeeID
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY employees.EmployeeID
ORDER BY employee_sales DESC
```","Both queries calculate total sales per employee in 2023 and order results by sales, despite differing date filtering methods.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 5;","The generated query limits the results to 5 employees, while the ground truth query does not impose a limit. Therefore, they may produce different results under certain conditions.",Base
Which city has the most suppliers?,"SELECT City, COUNT(SupplierID) AS Supplier_Count FROM suppliers GROUP BY City ORDER BY Supplier_Count DESC LIMIT 1","```sql
SELECT City, COUNT(*) AS SupplierCount
FROM suppliers
GROUP BY City
ORDER BY SupplierCount DESC
LIMIT 1;
```","Both queries group by city, count suppliers, order by the count in descending order, and limit the result to one record. They yield the same result.","SELECT City, COUNT(SupplierID) AS NumSuppliers FROM suppliers GROUP BY City ORDER BY NumSuppliers DESC LIMIT 1;","Both queries correctly count the number of suppliers per city, group by city, order by the count in descending order, and limit the result to one city, identifying the city with the most suppliers.",both
What percentage of orders are delivered on or before the required date each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID)) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_TRUNC('month', OrderDate);","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS month,
    (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID)) AS On_time_Delivery_Rate
FROM orders
GROUP BY month
```","The generated query uses DATE_FORMAT, which is not standard ANSI SQL, while the ground truth query uses DATE_TRUNC. The output may differ depending on the SQL dialect used.","SELECT EXTRACT(YEAR FROM OrderDate) AS OrderYear, EXTRACT(MONTH FROM OrderDate) AS OrderMonth, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*)) AS OnTimeDeliveryRate FROM orders GROUP BY OrderYear, OrderMonth;","Both queries calculate the percentage of orders delivered on or before the required date by month and use similar logic, grouping by the year and month or just the month component.",FT
Which month had the highest order fulfillment time in the past year?,"SELECT EXTRACT(MONTH FROM orders.OrderDate) AS order_month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY order_month ORDER BY avg_fulfillment_time DESC LIMIT 1","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time
FROM orders
WHERE OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)
GROUP BY month
ORDER BY avg_fulfillment_time DESC
LIMIT 1;
```","The generated query uses DATE_FORMAT and considers the past 12 months dynamically, while the ground truth query uses EXTRACT and a static date range for 2022, potentially yielding different results.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE OrderDate >= CURDATE() - INTERVAL 1 YEAR GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY AvgFulfillmentTime DESC LIMIT 1;","The generated query calculates the month using DATE_FORMAT and considers the past year dynamically, while the ground truth query explicitly uses a fixed date range for 2022. They may yield different results depending on the current date.",None
What is the total value of inventory for each product?,"SELECT ProductName, UnitsInStock * UnitPrice AS InventoryValue FROM products;","```sql
SELECT ProductID, (UnitsInStock * UnitPrice) AS TotalInventoryValue
FROM products;
```","The generated query uses 'ProductID' instead of 'ProductName', so it does not yield the same columns as the ground truth.","SELECT ProductName, (UnitPrice * UnitsInStock) as InventoryValue FROM products;","Both queries calculate the total inventory value by multiplying UnitPrice and UnitsInStock for each product, yielding the same results.",FT
Which product has the highest number of units on order?,SELECT ProductName FROM products WHERE UnitsOnOrder = (SELECT MAX(UnitsOnOrder) FROM products);,"```sql
SELECT ProductID, ProductName, UnitsOnOrder
FROM products
ORDER BY UnitsOnOrder DESC
LIMIT 1;
```","Both queries return the product with the highest number of units on order, but the generated query also includes ProductID and UnitsOnOrder fields.","SELECT ProductID, UnitsOnOrder FROM products ORDER BY UnitsOnOrder DESC LIMIT 1;","The generated query retrieves ProductID and UnitsOnOrder, but does not return the product name like the ground truth query. Also, the generated query may miss ties if multiple products have the highest UnitsOnOrder.",Base
What is the customer retention rate for the past month?,SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-08-01' AND '2023-08-31' THEN orders.CustomerID END) / COUNT(DISTINCT CASE WHEN orders.OrderDate < '2023-08-01' THEN orders.CustomerID END)) AS RetentionRate FROM orders;,"```sql
SELECT 
    (COUNT(DISTINCT o1.CustomerID) * 1.0 / NULLIF(COUNT(DISTINCT o2.CustomerID), 0)) AS CustomerRetentionRate
FROM 
    orders o1
LEFT JOIN 
    orders o2 ON o1.CustomerID = o2.CustomerID AND o2.OrderDate < DATEADD(MONTH, -1, CURRENT_DATE)
WHERE 
    o1.OrderDate BETWEEN DATEADD(MONTH, -1, CURRENT_DATE) AND CURRENT_DATE;
```","The generated query calculates retention by checking orders within the last month, but incorrectly joins orders on the same customer and validates previous orders before a month ago. The ground truth calculates retention from a static period and does not involve joining tables.","SELECT (COUNT(DISTINCT CASE WHEN o.OrderDate BETWEEN DATEADD(MONTH, -1, CURRENT_DATE) AND CURRENT_DATE THEN o.CustomerID END) / NULLIF(COUNT(DISTINCT CASE WHEN o.OrderDate < DATEADD(MONTH, -1, CURRENT_DATE) THEN o.CustomerID END), 0)) * 100 AS CustomerRetentionRate FROM orders o;","The generated query uses dynamic dates for the past month, while the ground truth query uses static dates for August 2023. This might yield different results depending on the current date.",None
What is the distribution of shipping costs?,"SELECT Freight, COUNT(*) AS Frequency FROM orders GROUP BY Freight ORDER BY Frequency DESC;","```sql
SELECT Freight, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY Freight
ORDER BY Freight;
```","The generated query orders results by Freight values, while the ground truth orders by Frequency in descending order. These will yield different result orders.","SELECT Freight, COUNT(OrderID) AS NumberOfShipments FROM orders GROUP BY Freight;",Both queries calculate the distribution of shipping costs by grouping orders by the Freight value and counting them. The difference in column naming and the ORDER BY clause does not affect the fundamental output.,FT
How do discount rates impact the average order value?,"SELECT AVG(([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) AS avg_order_value, [Order Details].Discount FROM [Order Details] GROUP BY [Order Details].Discount","```sql
SELECT 
    Discount,
    AVG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) AS avg_order_value
FROM 
    [Order Details] 
JOIN 
    orders ON [Order Details].OrderID = orders.OrderID
GROUP BY 
    Discount
```","The generated query incorrectly uses AVG(SUM(..)) causing aggregation issues; it also includes a JOIN with the orders table, which is unnecessary for calculating average order value grouped by discount.","SELECT d.Discount, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM [Order Details] od JOIN discounts d ON od.Discount = d.Discount GROUP BY d.Discount;","Both queries calculate the average order value grouped by discount rates, with the formula (UnitPrice * Quantity * (1 - Discount)). The JOIN in the generated query is unnecessary, but doesn't affect the result as both use the same grouping and calculation from [Order Details].",FT
What are the total sales for each supplier?,"SELECT SupplierID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID;","```sql
SELECT p.SupplierID, SUM(od.Quantity * od.UnitPrice) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.SupplierID;
```","Both queries select SupplierID and calculate the sum of Quantity multiplied by UnitPrice from the products and order details tables, grouped by SupplierID.","SELECT suppliers.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID;","The generated SQL query includes a discount in the total sales calculation, which is not considered in the ground truth query. The results will differ if there are any discounts.",Base
Which products have not been ordered at all?,SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"```sql
SELECT p.ProductID, p.ProductName
FROM products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.OrderID IS NULL;
```",Both queries identify products that have not been ordered by checking for the absence of corresponding records in the [Order Details] table.,SELECT ProductID FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"The generated query returns 'ProductID', whereas the ground truth query returns 'ProductName'. They do not yield the same result.",Base
How many orders were placed but not shipped yet?,SELECT COUNT(*) FROM orders WHERE ShippedDate IS NULL;,"```sql
SELECT COUNT(*) AS UnshippedOrders
FROM orders
WHERE ShippedDate IS NULL;
```","Both queries count the orders where the ShippedDate is NULL, meaning they are not shipped yet. They yield the same result.",SELECT COUNT(OrderID) AS PendingOrders FROM orders WHERE ShippedDate IS NULL;,"Both queries count the number of orders where ShippedDate is NULL, which correspond to orders that have been placed but not yet shipped.",both
Which product has the highest sales volume this quarter?,"SELECT products.ProductID, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE QUARTER(orders.OrderDate) = QUARTER(CURDATE()) AND YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY products.ProductID ORDER BY sales_volume DESC LIMIT 1","```sql
SELECT products.ProductID, SUM([Order Details].Quantity) AS total_sales_volume
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE orders.OrderDate >= '2023-07-01' AND orders.OrderDate < '2023-10-01'
GROUP BY products.ProductID
ORDER BY total_sales_volume DESC
LIMIT 1
```",The generated query uses specific dates for this quarter while the ground truth query dynamically calculates the current quarter and year using functions. This could result in different outcomes depending on when the query is run.,"SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE QUARTER(o.OrderDate) = QUARTER(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 1;","Both queries calculate the same metric but display different fields; however, they both identify the product with the highest sales volume by summing quantities in the current quarter.",FT
Identify cities with the highest average order fulfillment time.,"SELECT ShipCity, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipCity ORDER BY AvgFulfillmentTime DESC;","```sql
SELECT ShipCity, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime
FROM orders
GROUP BY ShipCity
ORDER BY AvgFulfillmentTime DESC;
```","Both queries are identical in logic and will yield the same results, identifying cities with the highest average order fulfillment time.","SELECT ShipCity, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipCity ORDER BY AvgFulfillmentTime DESC;","The generated SQL query and the ground truth SQL query are identical, both correctly calculating the average order fulfillment time per city and ordering the results in descending order.",both
What is the average number of days between order date and required date?,"SELECT AVG(DATEDIFF(RequiredDate, OrderDate)) AS AvgDaysRequired FROM orders;","```sql
SELECT AVG(DATEDIFF(RequiredDate, OrderDate)) AS AverageDays
FROM orders;
```","Both queries calculate the average number of days between 'OrderDate' and 'RequiredDate' from the 'orders' table. The differences are only in the alias used for the result, which does not affect the output.","SELECT AVG(DATEDIFF(RequiredDate, OrderDate)) AS AvgDaysBetween FROM orders;","Both queries calculate the average number of days between the order date and required date using the same logic and table, only the alias name differs.",both
How many orders were placed by each employee in the year 2022?,"SELECT e.EmployeeID, COUNT(o.OrderID) AS TotalOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE YEAR(o.OrderDate) = 2022 GROUP BY e.EmployeeID;","```sql
SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount
FROM employees
JOIN orders ON employees.EmployeeID = orders.EmployeeID
WHERE YEAR(orders.OrderDate) = 2022
GROUP BY employees.EmployeeID;
```","Both queries calculate the number of orders placed by each employee in 2022 using the same logic and structure, involving a join between the employees and orders tables, a filter on the order date, and a group by clause on EmployeeID.","SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE YEAR(o.OrderDate) = 2022 GROUP BY e.EmployeeID;","Both queries count the number of orders placed by each employee in 2022, and the only difference is the alias for the count column, which doesn't affect the result.",both
What is the total sales generated by employees hired in the last five years?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE employees.HireDate >= DATE_SUB(CURRENT_DATE, INTERVAL 5 YEAR) GROUP BY employees.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE e.HireDate >= DATEADD(YEAR, -5, CURRENT_DATE)
GROUP BY e.EmployeeID
```","Both queries calculate the total sales for employees hired in the last five years, joining the same tables and using equivalent date conditions to filter employees.","SELECT CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE employees.HireDate >= DATE_SUB(CURDATE(), INTERVAL 5 YEAR) GROUP BY EmployeeName;","The generated query groups by employee's full name. The ground truth groups by EmployeeID, which is more likely to be the correct approach for consistent results regardless of name changes or duplicates.",Base
Identify orders that have not been shipped within 30 days of the order date.,"SELECT OrderID FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) > 30 AND ShippedDate IS NULL;","```sql
SELECT *
FROM orders
WHERE DATEDIFF(ShippedDate, OrderDate) > 30;
```","The generated query looks for shipped orders with a ship date greater than 30 days post order date, while the ground truth searches for orders not shipped yet, indicated by ShippedDate IS NULL.","SELECT OrderID FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) > 30;","The generated SQL query does not account for orders that have not been shipped at all, as it does not check if ShippedDate IS NULL.",None
Determine the on-time delivery rate for each shipping method.,"SELECT ShipVia, SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, 
       COUNT(OrderID) AS TotalOrders,
       COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) AS OnTimeDeliveries,
       (COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 1.0 / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate
FROM orders
GROUP BY ShipVia;
```",Both queries calculate the on-time delivery rate for each shipping method correctly. They use different aggregation methods but yield the same result.,"SELECT ShipVia, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipVia;","Both queries calculate the on-time delivery rate for each shipping method using a conditional expression to count the on-time orders and divide by the total orders. The mathematical operations differ (multiplying by 100.0 vs. summing with ELSE 0), but they ultimately yield the same ratio as a decimal, consistent with the goal of determining on-time rate.",both
Which shipping method is the fastest on average to fulfill an order?,"SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia ORDER BY AvgFulfillmentTime ASC LIMIT 1;","```sql
SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY ShipVia
ORDER BY AverageFulfillmentTime ASC
LIMIT 1;
```",Both queries calculate the average fulfillment time for each shipping method and order by the fastest. They yield the same result.,"SELECT ShipVia, AVG(ShippedDate - OrderDate) AS AverageFulfillmentTime FROM orders GROUP BY ShipVia ORDER BY AverageFulfillmentTime ASC LIMIT 1;",Both queries calculate the average fulfillment time by subtracting OrderDate from ShippedDate for each shipping method and sort the results to find the fastest. The difference in date calculation method does not affect the logic as both yield the same outcome.,both
Calculate the total freight cost for orders shipped to each country.,"SELECT o.ShipCountry, SUM(o.Freight) AS TotalFreight FROM orders o GROUP BY o.ShipCountry;","```sql
SELECT ShipCountry, SUM(Freight) AS TotalFreightCost
FROM orders
GROUP BY ShipCountry;
```","Both queries calculate the total freight cost for orders grouped by ShipCountry. The aliasing differs, but the results are the same.","SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;","Both queries calculate the total freight cost for each country using the same logic and structure, despite slight differences in table aliasing.",both
What products have been ordered most frequently?,"SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC;","```sql
SELECT [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalQuantity
FROM [Order Details]
GROUP BY [Order Details].ProductID
ORDER BY TotalQuantity DESC;
```",Both queries calculate the sum of quantities for each product and order the results in descending order. The use of table aliases or different syntax does not affect the result.,"SELECT ProductID, COUNT(OrderID) AS Frequency FROM [Order Details] GROUP BY ProductID ORDER BY Frequency DESC;","The generated query counts the number of orders each product is in, while the ground truth query sums the quantities ordered. These yield different values: frequency of orders vs total quantity ordered.",Base
Identify the product with the highest performance metric based on sales.,"SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalSales
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY products.ProductID, products.ProductName
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries calculate the total sales for each product and return the product with the highest total sales, using the same logic and SQL functions.","SELECT ProductID, SUM([Order Details].Quantity) AS PerformanceMetric FROM [Order Details] GROUP BY ProductID ORDER BY PerformanceMetric DESC LIMIT 1;",The generated query does not include ProductName and may yield a different ProductID if names are not uniquely associated with product IDs.,Base
What is the total sales revenue generated for each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Total_Sales
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries calculate the total sales revenue per month by summing the product of UnitPrice, Quantity, and (1 - Discount) from the [Order Details] table after joining with the orders table. They group the results by month, though they use different methods for formatting the date: DATE_FORMAT vs. DATE_TRUNC.","SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN ""Order Details"" od ON o.OrderID = od.OrderID GROUP BY Month ORDER BY Month;","Both queries accurately calculate the total sales revenue for each month. The only differences are in the syntax for table names ('Order Details' vs [Order Details]) and the ORDER BY clause in the generated query, which does not affect the correctness.",both
How have employee sales changed month over month?,"SELECT e.EmployeeID, EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, EXTRACT(YEAR FROM o.OrderDate) AS OrderYear, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, OrderYear, OrderMonth ORDER BY e.EmployeeID, OrderYear, OrderMonth","```sql
SELECT 
    DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month,
    e.FirstName,
    e.LastName,
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    Month, e.EmployeeID
ORDER BY 
    Month, e.EmployeeID;
```","The generated query includes employee names in the GROUP BY and output, while the ground truth query focuses on EmployeeID and extracts year and month separately.","SELECT e.EmployeeID, YEAR(o.OrderDate) AS Year, MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) - LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) OVER (PARTITION BY e.EmployeeID ORDER BY YEAR(o.OrderDate), MONTH(o.OrderDate)) AS MonthOverMonthChange FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, YEAR(o.OrderDate), MONTH(o.OrderDate);","The generated query calculates month-over-month sales change with LAG function, whereas the ground truth query only calculates total monthly sales without change calculations.",None
How many orders have a discount greater than 20%?,SELECT COUNT(DISTINCT od.OrderID) AS HighDiscountOrders FROM [Order Details] od WHERE od.Discount > 0.20;,"```sql
SELECT COUNT(*) AS OrderCount
FROM [Order Details]
WHERE Discount > 0.20;
```","The generated query counts all records with over 20% discount, not distinct orders. Ground truth counts distinct orders.",SELECT COUNT(DISTINCT od.OrderID) AS CountOfDiscountedOrders FROM [Order Details] od WHERE od.Discount > 0.2;,"Both queries count distinct OrderIDs from the Order Details table where the discount is greater than 20%, thus they produce the same result.",FT
Which employees have completed sales across multiple countries?,SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(DISTINCT o.ShipCountry) > 1,"```sql
SELECT DISTINCT e.EmployeeID, e.FirstName, e.LastName
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID
HAVING COUNT(DISTINCT o.ShipCountry) > 1;
```","Both queries group employees based on EmployeeID and check if they completed sales in more than one country using COUNT(DISTINCT o.ShipCountry) > 1. The generated query includes additional columns (FirstName, LastName) in the SELECT clause, which do not affect the logic or results regarding EmployeeID.","SELECT DISTINCT e.EmployeeID, e.FirstName, e.LastName FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName HAVING COUNT(DISTINCT o.ShipCountry) > 1;","The generated query includes employee names in the SELECT clause, while the ground truth query only selects EmployeeID. This results in different output structures even though both determine which employees made sales in multiple countries.",Base
Identify customers who have ordered within the last month but not in the previous three months.,SELECT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate BETWEEN CURRENT_DATE - INTERVAL '1 month' AND CURRENT_DATE AND customers.CustomerID NOT IN (SELECT CustomerID FROM orders WHERE OrderDate BETWEEN CURRENT_DATE - INTERVAL '4 months' AND CURRENT_DATE - INTERVAL '2 month');,"```sql
SELECT DISTINCT c.CustomerID, c.CompanyName
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
WHERE o.OrderDate >= DATEADD(month, -1, GETDATE())
AND c.CustomerID NOT IN (
    SELECT DISTINCT o2.CustomerID 
    FROM orders o2 
    WHERE o2.OrderDate < DATEADD(month, -1, GETDATE()) 
    AND o2.OrderDate >= DATEADD(month, -4, GETDATE())
);
```","The generated query incorrectly uses DATEADD and GETDATE(), which aren't ANSI SQL functions. It also evaluates 'not in previous three months' incorrectly as it includes an additional month.","SELECT DISTINCT CustomerID FROM orders WHERE OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) AND CURRENT_DATE AND CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders WHERE OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 4 MONTH) AND DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH));",The generated query checks within 4 to 1 month while the ground truth checks 4 to 2 months for previous orders.,None
Determine the month with the highest total sales in the previous year.,"SELECT MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY MONTH(o.OrderDate) ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) - 1
GROUP BY Month
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries correctly calculate the total sales per month for the previous year and select the month with the highest sales, despite different formatting for the date in the GROUP BY clause.","SELECT TO_CHAR(o.OrderDate, 'YYYY-MM') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM orders o JOIN ""Order Details"" od ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY Month ORDER BY MonthlySales DESC LIMIT 1;","Both queries extract the year from the order date of the previous year, group by month, and calculate the total sales. They also order results by total sales in descending order and limit to the top result. The differences in SQL functions and syntax do not affect the result.",both
What is the total revenue for products provided by each supplier?,"SELECT s.SupplierID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID;","```sql
SELECT p.SupplierID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.SupplierID;
```","The generated query does not account for discounts, whereas the ground truth query includes a discount in the revenue calculation.","SELECT SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID;","Both queries calculate total revenue by joining 'Order Details' with 'products' to get the SupplierID and grouping by SupplierID. They both correctly perform the multiplication of UnitPrice, Quantity, and account for Discount to calculate TotalRevenue.",FT
Which city has the highest number of orders shipped in 2023?,"SELECT orders.ShipCity, COUNT(orders.OrderID) AS total_orders FROM orders WHERE YEAR(orders.ShippedDate) = 2023 GROUP BY orders.ShipCity ORDER BY total_orders DESC LIMIT 1","```sql
SELECT ShipCity, COUNT(OrderID) AS number_of_orders
FROM orders
WHERE YEAR(ShippedDate) = 2023
GROUP BY ShipCity
ORDER BY number_of_orders DESC
LIMIT 1
```","Both queries select the city with the highest number of orders shipped in 2023, grouping by city and ordering by order count, then limiting the result to one entry.","SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE EXTRACT(YEAR FROM ShippedDate) = 2023 GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 1;","Both queries accurately count orders by city for 2023, group by ShipCity, and order to find the city with the highest count. The difference in SQL functions (EXTRACT vs. YEAR) does not affect the result.",both
Which shipping methods are used most frequently?,"SELECT o.ShipVia, COUNT(o.OrderID) AS UsageCount FROM orders o GROUP BY o.ShipVia ORDER BY UsageCount DESC;","```sql
SELECT ShipVia, COUNT(*) AS Frequency
FROM orders
GROUP BY ShipVia
ORDER BY Frequency DESC;
```",Both queries count the frequency of each shipping method using the 'ShipVia' column and order the results in descending order. They will yield the same results.,"SELECT ShipVia, COUNT(OrderID) AS Frequency FROM orders GROUP BY ShipVia ORDER BY Frequency DESC;",Both queries calculate the frequency of usage for each shipping method and order by it in descending order. They are functionally equivalent.,both
What was the longest order fulfillment time recorded?,"SELECT MAX(DATEDIFF(ShippedDate, OrderDate)) AS longest_fulfillment_time FROM orders;","```sql
SELECT MAX(DATEDIFF(ShippedDate, OrderDate)) AS Longest_Fulfillment_Time
FROM orders;
```","Both queries calculate the maximum difference in days between the 'ShippedDate' and 'OrderDate' from the 'orders' table, resolving the user's question of the longest fulfillment time.","SELECT MAX(DATEDIFF(ShippedDate, OrderDate)) AS LongestFulfillmentTime FROM orders;","The generated SQL query and the ground truth query both calculate the maximum difference between 'ShippedDate' and 'OrderDate' from the 'orders' table, producing the same result.",both
Calculate the total freight cost for shipments to each country.,"SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;","```sql
SELECT ShipCountry, SUM(Freight) AS TotalFreightCost
FROM orders
GROUP BY ShipCountry;
```","Both queries group the 'orders' table by 'ShipCountry' and calculate the sum of 'Freight', resulting in the same output.","SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",Both the generated SQL query and the ground truth query calculate the total freight cost for shipments to each country. They are identical and will yield the same results.,both
How many orders are pending shipment?,SELECT COUNT(OrderID) FROM orders WHERE ShippedDate IS NULL;,"```sql
SELECT COUNT(OrderID) AS PendingShipment
FROM orders
WHERE ShippedDate IS NULL;
```","Both queries count the number of orders where ShippedDate is NULL, indicating pending shipment. The difference in alias does not affect the outcome.",SELECT COUNT(OrderID) FROM orders WHERE ShippedDate IS NULL;,"The generated SQL query accurately counts the number of orders with a NULL ShippedDate, which signifies orders pending shipment. It matches the ground truth query.",both
What is the total discount given on all orders?,SELECT SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details];,"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount
FROM [Order Details];
```","Both queries calculate the total discount by summing the product of UnitPrice, Quantity, and Discount from the [Order Details] table. The difference in formatting does not affect the result.",SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM [Order Details];,"Both queries accurately calculate the total discount by summing the product of UnitPrice, Quantity, and Discount from the [Order Details] table. The syntax is effectively the same.",both
Calculate the monthly product performance based on sales quantities.,"SELECT P.ProductID, EXTRACT(YEAR FROM O.OrderDate) AS Year, EXTRACT(MONTH FROM O.OrderDate) AS Month, SUM(OD.Quantity) AS MonthlyPerformance FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID JOIN orders O ON OD.OrderID = O.OrderID GROUP BY P.ProductID, Year, Month;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
```","The generated SQL query aggregates sales quantities without considering the monthly breakdown. The ground truth query groups sales quantities by product along with year and month obtained from the order date, which aligns with the user's request for monthly performance.","SELECT p.ProductName, EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID GROUP BY p.ProductName, Year, Month;","The generated query groups by ProductName, while the ground truth groups by ProductID. Both queries will produce different results regarding product identification.",None
What is the total freight cost by shipping company?,"SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, SUM(Freight) AS TotalFreightCost
FROM orders
GROUP BY ShipVia;
```","Both queries calculate the total freight cost for each shipping company (ShipVia) using the SUM aggregation function on the Freight column. The only difference is the alias used for the total freight cost, which does not affect the result.","SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",Both queries calculate the total freight cost grouped by shipping company. The difference in alias naming does not affect the result.,both
List suppliers located in the same city.,"SELECT DISTINCT s1.CompanyName, s2.CompanyName FROM suppliers s1 JOIN suppliers s2 ON s1.City = s2.City AND s1.SupplierID < s2.SupplierID;","```sql
SELECT s1.CompanyName AS Supplier1, s2.CompanyName AS Supplier2, s1.City
FROM suppliers s1
JOIN suppliers s2 ON s1.City = s2.City AND s1.SupplierID <> s2.SupplierID;
```","Both queries aim to list supplier pairs located in the same city but represented with different conditions for avoiding duplicates. The generated query permits reverse pairs, which is syntactically valid and achieves the same outcome.","SELECT s1.SupplierID AS Supplier1ID, s2.SupplierID AS Supplier2ID, s1.City FROM suppliers s1 JOIN suppliers s2 ON s1.SupplierID < s2.SupplierID AND s1.City = s2.City;","Both queries identify pairs of suppliers in the same city using a self-join and an inequality on SupplierID, ensuring no duplicate pairs. The fields selected are different but answer the user's question.",both
What is the difference in fulfillment time for on-time and late orders each month?,"SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS OrderMonth, AVG(CASE WHEN ShippedDate <= RequiredDate THEN DATEDIFF(ShippedDate, OrderDate) END) AS OnTimeFulfillment, AVG(CASE WHEN ShippedDate > RequiredDate THEN DATEDIFF(ShippedDate, OrderDate) END) AS LateFulfillment FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    AVG(CASE WHEN ShippedDate <= RequiredDate THEN DATEDIFF(ShippedDate, OrderDate) END) AS OnTimeFulfillmentTime,
    AVG(CASE WHEN ShippedDate > RequiredDate THEN DATEDIFF(ShippedDate, OrderDate) END) AS LateFulfillmentTime,
    AVG(CASE WHEN ShippedDate > RequiredDate THEN DATEDIFF(ShippedDate, OrderDate) END) - AVG(CASE WHEN ShippedDate <= RequiredDate THEN DATEDIFF(ShippedDate, OrderDate) END) AS FulfillmentTimeDifference
FROM 
    orders
GROUP BY 
    Month
```","The generated query computes an additional column, FulfillmentTimeDifference, which the ground truth query does not include.","SELECT month, AVG(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN orders.Freight ELSE NULL END) - AVG(CASE WHEN orders.ShippedDate > orders.RequiredDate THEN orders.Freight ELSE NULL END) AS fulfillment_difference FROM orders GROUP BY month;","The generated query calculates the difference in freight cost between on-time and late orders, while the ground truth query calculates the difference in fulfillment time by comparing the average days between OrderDate and ShippedDate.",None
How many different products have been sold in total?,SELECT COUNT(DISTINCT ProductID) AS TotalUniqueProducts FROM [Order Details];,"```sql
SELECT COUNT(DISTINCT ProductID) AS DifferentProductsSold
FROM [Order Details];
```","Both queries count distinct ProductID values in the [Order Details] table, answering the user's question accurately.",SELECT COUNT(DISTINCT ProductID) AS UniqueProducts FROM `Order Details`;,"Both queries count distinct ProductID values from the 'Order Details' table, providing the total number of different products sold.",both
Which city has the highest number of customers?,"SELECT City, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY City ORDER BY NumberOfCustomers DESC LIMIT 1;","```sql
SELECT City, COUNT(CustomerID) AS CustomerCount
FROM customers
GROUP BY City
ORDER BY CustomerCount DESC
LIMIT 1;
```","Both queries group customers by city, count the number of customers per city, and return the city with the highest number of customers, sorted in descending order by count, limiting the result to one record.","SELECT City, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY City ORDER BY NumberOfCustomers DESC LIMIT 1;","The generated SQL query is identical to the ground truth query in structure and logic, both selecting the city with the highest number of customers.",both
What is the reorder frequency for each product?,"SELECT ProductName, COUNT(*) AS ReorderCount FROM products WHERE UnitsInStock < ReorderLevel GROUP BY ProductName;","```sql
SELECT
    p.ProductID,
    p.ProductName,
    COUNT(o.OrderID) AS ReorderFrequency
FROM
    products p
LEFT JOIN
    [Order Details] o ON p.ProductID = o.ProductID
WHERE
    p.UnitsOnOrder > 0
GROUP BY
    p.ProductID, p.ProductName;
```","The generated query counts orders where units are on order, while the ground truth query considers products with stock below reorder level, which are different criteria for reorder frequency.","SELECT ProductID, COUNT(*) AS ReorderCount FROM [Order Details] WHERE ProductID IN (SELECT ProductID FROM products WHERE UnitsInStock + UnitsOnOrder <= ReorderLevel) GROUP BY ProductID;","The generated query counts orders for products below reorder level, while the ground truth counts products below reorder level directly.",None
Which products need to be reordered based on current inventory levels?,"SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;","```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock <= ReorderLevel;
```","The generated query returns products with UnitsInStock equal to ReorderLevel, while the ground truth query does not.",SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"The generated SQL query only selects ProductName, whereas the ground truth query selects both ProductID and ProductName. They yield different results.",None
What is the average shipping cost per order per month?,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(orders.Freight) AS avg_shipping_cost FROM orders GROUP BY month","```sql
SELECT EXTRACT(YEAR FROM orders.OrderDate) AS year, EXTRACT(MONTH FROM orders.OrderDate) AS month, AVG(orders.Freight) AS average_shipping_cost_per_order
FROM orders
GROUP BY year, month
ORDER BY year, month;
```",Both queries calculate the average shipping cost per month per year. The generated query extracts year and month separately but achieves the same grouping level.,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY Month;",Both queries calculate the average shipping cost (Freight) per month using the same logic and grouping. The difference in alias naming does not affect the result.,both
What is the total number of products sold to each country?,"SELECT orders.ShipCountry, SUM([Order Details].Quantity) AS TotalProductsSold FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipCountry;","```sql
SELECT o.ShipCountry, SUM(od.Quantity) AS TotalProductsSold
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY o.ShipCountry;
```",Both queries correctly calculate the total number of products sold to each country by joining the 'orders' and 'Order Details' tables on the OrderID and grouping by ShipCountry.,"SELECT ShipCountry, SUM([Order Details].Quantity) AS TotalProductsSold FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry;","Both queries will yield the same results as they group by ShipCountry from the orders table, which is the same in both cases.",both
Which suppliers have shipped orders on time this year?,SELECT DISTINCT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.ShippedDate) = YEAR(CURRENT_DATE) AND orders.RequiredDate >= orders.ShippedDate;,"```sql
SELECT DISTINCT s.SupplierID, s.CompanyName
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) 
AND o.ShippedDate <= o.RequiredDate;
```","Both queries identify suppliers who shipped orders on time this year, ensuring ShippedDate is within the same year and on or before the RequiredDate.","SELECT suppliers.SupplierID, suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND orders.ShippedDate <= orders.RequiredDate GROUP BY suppliers.SupplierID, suppliers.CompanyName;","The generated query checks for orders within the year 2023 using a fixed date range, while the ground truth checks based on the current year dynamically using the YEAR function. Additionally, the generated query groups by SupplierID and CompanyName, whereas the ground truth uses DISTINCT to avoid duplication without grouping.",Base
Which orders were never shipped?,SELECT OrderID FROM orders WHERE ShippedDate IS NULL;,"```sql
SELECT * 
FROM orders 
WHERE ShippedDate IS NULL;
```","The generated query selects all columns, whereas the ground truth query selects only the 'OrderID' column, resulting in different output structures.",SELECT o.OrderID FROM orders o WHERE o.ShippedDate IS NULL,"Both queries select OrderID from orders where ShippedDate is NULL, meaning the orders were never shipped.",FT
What is the average order fulfillment time for each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY OrderMonth;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY Month
```","Both queries calculate the average order fulfillment time per month. They select the same columns, apply the same aggregation function, and group the results identically, differing only in alias names which do not affect the outcome.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month;","The generated SQL query and the ground truth SQL query both calculate the average order fulfillment time for each month using the same logic. The only difference is the alias name used in the GROUP BY clause, which does not affect the result.",both
What percentage of orders are delivered in the same city?,SELECT (COUNT(*) FILTER (WHERE ShipAddress LIKE '%' || ShipCity || '%'))::NUMERIC / COUNT(*) AS SameCityDeliveryPercentage FROM orders;,"```sql
SELECT 
  (COUNT(CASE WHEN ShipCity = RequiredCity THEN 1 END) * 100.0 / COUNT(OrderID)) AS PercentageDeliveredInSameCity
FROM 
  orders
JOIN 
  (SELECT DISTINCT ShipCity AS RequiredCity FROM orders) AS RequiredCities
ON 
  ShipCity = RequiredCity;
```","The generated query joins with distinct cities and checks equality, whereas the ground truth query checks if the ShipAddress contains the ShipCity, which can yield different results.",SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM orders) AS SameCityPercentage FROM orders WHERE ShipPostalCode = PostalCode;,"The generated query compares postal codes for same-city delivery, while the ground truth checks if the shipping address contains the ship city name.",None
Which products have the highest sales volume?,"SELECT ProductID, SUM(Quantity) AS TotalSalesVolume FROM [Order Details] GROUP BY ProductID ORDER BY TotalSalesVolume DESC;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSalesVolume
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSalesVolume DESC;
```","Both queries calculate the total sales volume for each product and order by the highest sales volume. The generated query includes product names, but this does not affect the sales volume calculation.","SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSold DESC;","The generated query returns product names with sales volume, while the ground truth returns product IDs with sales volume. They do not yield the same results as they contain different columns.",Base
What is the average shipping cost per order on a monthly basis?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
    AVG(Freight) AS Average_Shipping_Cost
FROM 
    orders
GROUP BY 
    Month;
```","Both queries calculate the average shipping cost per order on a monthly basis using the same logic. The generated query uses an alias for 'DATE_FORMAT(OrderDate, '%Y-%m')' for readability but the grouping and calculation remain consistent with the ground truth query.","SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY Month ORDER BY Month;","Both queries calculate the average shipping cost per order on a monthly basis by formatting the OrderDate into year-month format and grouping by this formatted date. The function used to format the date differs (TO_CHAR vs DATE_FORMAT), but the logic and result are identical.",both
What is the trend in the number of orders over time?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY Month ORDER BY Month;","```sql
SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY Month
ORDER BY Month;
```",Both queries calculate the number of orders by month and order the results chronologically. The column alias difference does not affect the query results.,"SELECT OrderDate, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY OrderDate ORDER BY OrderDate;","The generated query groups by exact order dates, while the ground truth groups by month.",Base
What is the total order quantity for orders shipped by different freight companies?,"SELECT ShipVia, SUM([Order Details].Quantity) AS TotalQuantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipVia;","```sql
SELECT ShipVia, SUM([Order Details].Quantity) AS TotalQuantity
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY ShipVia;
```",Both queries calculate the total order quantity for each freight company by grouping on 'ShipVia' and summing the 'Quantity' from the 'Order Details'. The queries are functionally equivalent and yield the same results.,"SELECT Freight, SUM(Quantity) AS TotalOrderQuantity FROM (SELECT o.Freight, od.Quantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID) AS freightOrders GROUP BY Freight;","The generated query groups by Freight, while the ground truth query groups by ShipVia, which represents different freight companies. Additionally, the generated query may not account for identical freight values linked to different ShipVia codes.",Base
Identify the product with the highest inventory turnover ratio.,"SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) DESC LIMIT 1;","```sql
SELECT p.ProductID, p.ProductName, 
       SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY InventoryTurnoverRatio DESC
LIMIT 1;
```","Both queries calculate the inventory turnover ratio using the formula SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock), and they order the results to find the product with the highest ratio. The ground truth query includes NULLIF to prevent division by zero, which is a safety check, but this won't affect the correctness of the result assuming no zero stock. Both queries ultimately return the product with the highest inventory turnover ratio.","SELECT p.ProductID, p.ProductName, (SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0)) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY InventoryTurnoverRatio DESC LIMIT 1;","Both queries compute the inventory turnover ratio using the same formula and order the results to find the product with the highest ratio. Although the generated query names the computed column, it does not affect the final result.",both
Identify trends in customer retention rate over the past year.,(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2022-01-01') AS retention_rate,"```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month,
    (COUNT(DISTINCT orders.CustomerID) / 
     (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < DATE_SUB(orders.OrderDate, INTERVAL 1 YEAR))) AS customer_retention_rate
FROM 
    orders
WHERE 
    orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE()
GROUP BY 
    month
ORDER BY 
    month;
```","The generated query calculates a monthly customer retention rate rather than a yearly aggregate, and the logic used for retention calculation is incorrect.","SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, COUNT(DISTINCT o.CustomerID) / (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate < DATE_ADD(o.OrderDate, INTERVAL -1 MONTH)) AS RetentionRate FROM orders o GROUP BY DATE_FORMAT(o.OrderDate, '%Y-%m') ORDER BY Month;","The generated query calculates monthly retention rates relative to the previous month, while the ground truth calculates the overall retention rate for the entire year by comparing customers from the past year to those from before the year.",None
What are the top 5 products by sales volume in the last year?,"SELECT products.ProductName, SUM([Order Details].Quantity) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY products.ProductID, products.ProductName ORDER BY total_sales DESC LIMIT 5","```sql
SELECT products.ProductID, SUM([Order Details].Quantity) AS sales_volume
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
JOIN products ON [Order Details].ProductID = products.ProductID
WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'
GROUP BY products.ProductID
ORDER BY sales_volume DESC
LIMIT 5
```","The generated query selects ProductID, while the ground truth query selects ProductName. Both queries count sales correctly, but they return different columns.","SELECT products.ProductName, SUM([Order Details].Quantity) as total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE() GROUP BY products.ProductName ORDER BY total_quantity DESC LIMIT 5;","The generated SQL uses a dynamic date range with CURDATE(), which may not match the static date range in the ground truth ('2022-01-01' to '2022-12-31'). This discrepancy can lead to different results; hence, the generated query does not accurately answer the user's question as matched against the ground truth.",None
What is the average discount applied per product?,SELECT AVG(od.Discount) AS AverageDiscount FROM [Order Details] od;,"```sql
SELECT 
    od.ProductID, 
    AVG(od.Discount) AS AverageDiscount
FROM 
    [Order Details] od
GROUP BY 
    od.ProductID;
```","The generated query calculates the average discount per product, whereas the ground truth query calculates the overall average discount across all products.","SELECT p.ProductName, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;","The generated query provides an average discount per product, while the ground truth gives the overall average discount across all orders.",None
What is the average order value across all orders?,SELECT AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM [Order Details] od;,"```sql
SELECT AVG(UnitPrice * Quantity * (1 - Discount)) AS AverageOrderValue
FROM [Order Details];
```",Both queries calculate the average order value using the same formula: AVG(UnitPrice * Quantity * (1 - Discount)) from the 'Order Details' table. The alias 'od' in the ground truth query does not affect the calculation.,SELECT AVG(TotalValue) FROM (SELECT SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalValue FROM [Order Details] GROUP BY OrderID) AS OrderTotals;,"Both queries calculate the average order value by considering the discount applied to each order item. The generated query computes a subquery to calculate total order values first and then averages them, while the ground truth query calculates the adjusted unit price directly and averages it. Both yield the same result.",both
Show the most popular product based on quantity sold.,"SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS QuantitySold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY QuantitySold DESC;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantitySold
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalQuantitySold DESC
LIMIT 1;
```","The generated query uses 'LIMIT 1' to return the most popular product, while the ground truth query does not limit the result, potentially returning more than one row. The ground truth query is missing the limit but shows intended logic.","```sql
SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSold DESC LIMIT 1; ```","The generated query limits the result to one row, showing only the most popular product, while the ground truth query shows all products ordered by popularity without a limit.",None
What is the average order value per customer for the past quarter?,"SELECT AVG(customer_sales.AverageOrderValue) AS AverageOrderValuePerCustomer FROM (SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' AND o.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY o.CustomerID) AS customer_sales;","```sql
SELECT 
    AVG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) AS AverageOrderValuePerCustomer
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE 
    orders.OrderDate >= DATEADD(QUARTER, -1, GETDATE())
GROUP BY 
    orders.CustomerID
```","The generated query incorrectly calculates the quarter date range, and aggregates within customer rather than averaging over all customers as done in the ground truth query.","SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30' GROUP BY customers.CustomerID;","The generated SQL calculates average order value by dividing total sales by the distinct count of order IDs, which does not reflect average order value per customer correctly. The ground truth query calculates the average order value first for each customer and then averages these values, correctly representing average order per customer for the past quarter.",None
Calculate the Inventory Turnover Ratio for each month.,"SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio
FROM 
    products
JOIN 
    [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN 
    orders ON [Order Details].OrderID = orders.OrderID
GROUP BY 
    Month;
```","Both queries calculate the Inventory Turnover Ratio for each month using similar logic and join the same tables. The main difference is the method of extracting the month from the OrderDate, but this does not affect the result.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(od.Quantity * od.UnitPrice * od.Discount) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY Month ORDER BY Month;","The generated query uses DATE_FORMAT to extract the month and includes a discount factor, while the ground truth query extracts the month using EXTRACT and does not consider discounts. Additionally, the ground truth query correctly joins the orders table to access OrderDate.",Base
Compare the average shipping cost between two specific regions.,"SELECT ShipRegion, AVG(Freight) AS AverageFreight FROM orders WHERE ShipRegion IN ('Region1', 'Region2') GROUP BY ShipRegion;","```sql
SELECT 
    ShipRegion, 
    AVG(Freight) AS AverageShippingCost
FROM 
    orders
WHERE 
    ShipRegion IN ('Region1', 'Region2')
GROUP BY 
    ShipRegion;
```",Both queries select the ShipRegion and calculate the average Freight for specified regions. The column alias difference doesn't affect the result.,"SELECT ShipRegion, AVG(Freight) as AvgShippingCost FROM orders WHERE ShipRegion IN ('Region1', 'Region2') GROUP BY ShipRegion;","Both queries select the average freight cost for specified regions, and use the same filtering and grouping criteria.",both
Which month had the highest average shipping cost per order?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY Month ORDER BY AvgShippingCost DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AverageShippingCost
FROM orders
GROUP BY Month
ORDER BY AverageShippingCost DESC
LIMIT 1;
```","Both queries select the month and calculate the average shipping cost, grouping by month and ordering to find the highest average, despite slight differences in date formatting functions.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY Month ORDER BY AvgShippingCost DESC LIMIT 1;","Both queries group the orders by month and calculate the average 'Freight' cost per month. Different date functions are used (DATE_FORMAT vs. DATE_TRUNC), but both achieve the same aggregation and ordering, leading to the same results.",both
What is the highest single order value?,"SELECT orders.OrderID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS OrderValue FROM orders INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID ORDER BY OrderValue DESC LIMIT 1;","```sql
SELECT MAX(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) ) AS HighestOrderValue
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY orders.OrderID;
```","Both queries aim to find the highest single order value by calculating the total value of each order using unit price, quantity, and discount. The generated query utilizes MAX to directly find the maximum order value, while the ground truth query sorts the order values and limits the result to the highest value. Both approaches yield the same result.",SELECT MAX(od.Quantity * od.UnitPrice) AS MaxOrderValue FROM [Order Details] od;,"The generated query does not account for discounts, whereas the ground truth query calculates the total order value considering discounts and then finds the highest order value.",Base
How many units of discontinued products are still in stock?,SELECT SUM(p.UnitsInStock) AS TotalUnitsInStock FROM products p WHERE p.Discontinued = 1;,"```sql
SELECT SUM(UnitsInStock) AS TotalUnitsInStock
FROM products
WHERE Discontinued = 1;
```","Both queries calculate the sum of units in stock for discontinued products using the same condition (Discontinued = 1). They reference the same table and column, yielding identical results.",SELECT SUM(UnitsInStock) AS TotalUnitsInStock FROM products WHERE Discontinued = 1;,"Both queries select the sum of 'UnitsInStock' for products where 'Discontinued' = 1. The ground truth query uses an alias, but it doesn't affect the result.",both
Discover the most frequently reordered product.,"SELECT ProductID, COUNT(*) AS ReorderCount FROM products WHERE UnitsOnOrder > ReorderLevel GROUP BY ProductID ORDER BY ReorderCount DESC LIMIT 1;","```sql
SELECT ProductID, COUNT(*) AS ReorderCount
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE [Order Details].ProductID IN (SELECT DISTINCT ProductID FROM products WHERE ReorderLevel > 0)
GROUP BY ProductID
ORDER BY ReorderCount DESC
LIMIT 1;
```","The generated query counts reorders based on orders and order details tables, while the ground truth uses the products table with conditional logic on UnitsOnOrder and ReorderLevel directly.","```sql
SELECT ProductID, COUNT(*) AS Reorders FROM [Order Details] WHERE Quantity = 0 GROUP BY ProductID ORDER BY Reorders DESC LIMIT 1;```","The generated query checks for Quantity = 0 in Order Details, implying a backorder, whereas the ground truth query compares UnitsOnOrder and ReorderLevel in the products table to find products needing reordering.",None
Who are the top 5 employees in terms of total sales revenue?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 5;","```sql
SELECT e.EmployeeID, CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, 
       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 5;
```","Both queries calculate total sales by employees and select the top 5 based on total sales. The generated query includes employee names, but this does not affect the correctness of the result regarding total sales.","SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY TotalSales DESC FETCH FIRST 5 ROWS ONLY;","Both queries calculate total sales and order by this value to find the top 5 employees. The generated query includes employee names, which is additional information, but this does not affect the core functionality or the results.",both
What is the total revenue for each month in 2023?,"SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlyRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE EXTRACT(YEAR FROM OrderDate) = 2023 GROUP BY Year, Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM 
    orders 
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE 
    YEAR(OrderDate) = 2023
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries calculate the total revenue for each month in 2023 by summing the product of UnitPrice, Quantity, and the complement of Discount. They both group and filter by year 2023, although they use slightly different methods for handling date formats. The results will be the same.","SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')","Both queries calculate the total revenue for each month in 2023, grouping by the month. The generated query uses DATE_FORMAT to extract year and month, while the ground truth uses EXTRACT. Despite differences in syntax, they both achieve the same result.",both
What is the average quantity per order for each product?,"SELECT ProductID, AVG(Quantity) AS AverageQuantity FROM [Order Details] GROUP BY ProductID;","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    AVG(od.Quantity) AS AverageQuantityPerOrder
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.ProductName
```","The generated query includes ProductName in the result, while the ground truth does not. Both calculate average quantity per product, but with different output columns.","SELECT ProductID, AVG(Quantity) AS AvgQuantity FROM [Order Details] GROUP BY ProductID;","Both queries calculate the average quantity per order for each product by grouping on ProductID and using AVG(Quantity), differing only in the alias name for the average quantity.",FT
How many orders were shipped within two days of the order date?,"SELECT COUNT(OrderID) AS OrdersWithinTwoDays FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) <= 2;","```sql
SELECT COUNT(OrderID) 
FROM orders 
WHERE DATEDIFF(ShippedDate, OrderDate) <= 2;
```","Both queries count the number of orders where the ShippedDate is within two days of the OrderDate. The only difference is the alias in the SELECT clause, which does not affect the results.","SELECT COUNT(OrderID) AS TwoDayOrders FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) = 2;","The generated query counts orders shipped exactly two days after the order date, while the ground truth query counts orders shipped within two days, meaning zero, one, or two days after the order date.",Base
Identify the top 5 products by sales revenue generated by employees.,"SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SalesRevenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY [Order Details].ProductID ORDER BY SalesRevenue DESC LIMIT 5;","```sql
SELECT 
    od.ProductID, 
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    [Order Details] od
JOIN 
    orders o ON od.OrderID = o.OrderID
JOIN 
    employees e ON o.EmployeeID = e.EmployeeID
GROUP BY 
    od.ProductID
ORDER BY 
    TotalSales DESC
LIMIT 5;
```","Both queries calculate the total sales revenue for each product sold by employees and return the top 5 products by revenue. Despite minor differences in syntax, they perform equivalent operations and join the same tables with the same logic.","SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS SalesRevenue FROM products p JOIN ""Order Details"" od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID JOIN employees e ON o.EmployeeID = e.EmployeeID GROUP BY p.ProductName ORDER BY SalesRevenue DESC LIMIT 5;","The generated query does not account for discounts, while the ground truth does. Additionally, they group by different fields: ProductName vs ProductID.",Base
Which orders have been delayed beyond the required date?,"SELECT OrderID, DATEDIFF(ShippedDate, RequiredDate) AS Delay FROM orders WHERE ShippedDate > RequiredDate;","```sql
SELECT *
FROM orders
WHERE ShippedDate > RequiredDate;
```","Both the generated and ground truth SQL queries identify orders where the ShippedDate is later than the RequiredDate. The ground truth query calculates and selects the delay duration, but both return the same set of orders.",SELECT o.OrderID FROM orders o WHERE o.RequiredDate < o.ShippedDate;,"The generated query only returns OrderID for delayed orders, while the ground truth query returns both OrderID and the delay duration.",Base
Calculate the monthly sales trend for each employee.,"SELECT e.EmployeeID, MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, MONTH(o.OrderDate);","```sql
SELECT 
    e.EmployeeID, 
    e.FirstName, 
    e.LastName, 
    DATE_FORMAT(o.OrderDate, '%Y-%m') AS SalesMonth, 
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    e.EmployeeID, SalesMonth
ORDER BY 
    e.EmployeeID, SalesMonth;
```","The generated query calculates sales per month using DATE_FORMAT to format the dates and groups by this formatted value, giving precise year-month combinations. The ground truth query groups by only MONTH, which collapses sales into months across different years, potentially giving incorrect total sales for each individual month in different years.","SELECT e.EmployeeID, DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, Month ORDER BY e.EmployeeID, Month;","The generated query uses DATE_FORMAT to format the date to 'YYYY-MM', grouping by year and month, whereas the ground truth query uses MONTH() to group only by month, disregarding the year. They would yield different results if the data spans multiple years.",None
Which customers placed orders in January that were shipped by a specific shipping method?,SELECT DISTINCT customers.CompanyName FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE EXTRACT(MONTH FROM orders.OrderDate) = 1 AND orders.ShipVia = 1;,"```sql
SELECT DISTINCT customers.CustomerID, customers.CompanyName, customers.ContactName
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
WHERE MONTH(orders.OrderDate) = 1 AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE)
AND orders.ShipVia = specific_shipping_method;
```","The generated query uses 'YEAR(CURRENT_DATE)' to filter the year, assuming the current year, while the ground truth does not specify a year. Also, the ground truth uses a specific shipping method ID '1' whereas the generated query uses a placeholder 'specific_shipping_method'. Additionally, the result columns differ.",SELECT DISTINCT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE MONTH(o.OrderDate) = 1 AND o.ShipVia = ?;,"The generated query uses a placeholder '?' for ShipVia, while the ground truth query specifies ShipVia as '1'. Additionally, the generated query selects CustomerID, whereas the ground truth selects CompanyName.",None
How much sales revenue did each employee generate in January 2023?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY employees.EmployeeID","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
JOIN employees ON orders.EmployeeID = employees.EmployeeID
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31'
GROUP BY employees.EmployeeID
```","The generated SQL query is functionally the same as the ground truth query. It correctly calculates sales revenue per employee for orders between January 1, 2023, and January 31, 2023, by joining relevant tables and grouping by EmployeeID.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) as employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY employees.EmployeeID","The generated SQL query and the ground truth query are effectively identical. They both calculate the sales revenue generated by each employee for January 2023 by joining the same tables, using the same conditions, and grouping by EmployeeID. The structure and logic are the same, ensuring identical results.",both
Determine the impact of employee tenure on sales performance.,"SELECT employees.EmployeeID, DATEDIFF(CURRENT_DATE, employees.HireDate) AS TenureDays, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;","```sql
SELECT 
    e.EmployeeID,
    e.FirstName,
    e.LastName,
    DATEDIFF(CURRENT_DATE, e.HireDate) AS TenureDays,
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    employees e
LEFT JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
LEFT JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    e.EmployeeID, e.FirstName, e.LastName, e.HireDate
ORDER BY 
    TenureDays;
```","Both queries calculate the tenure and total sales for each employee. The generated query includes employee names, but otherwise, the logic and calculations match the ground truth, including the same joins and aggregations.","SELECT e.EmployeeID, e.HireDate, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.HireDate;","The generated query does not calculate employee tenure, which is crucial for determining its impact on sales performance. The ground truth query calculates tenure using DATEDIFF.",Base
What is the correlation between the price of products and order quantities?,"SELECT p.ProductName, p.UnitPrice, AVG(od.Quantity) AS AverageQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName, p.UnitPrice ORDER BY p.UnitPrice;","```sql
SELECT 
    CORR(products.UnitPrice, [Order Details].Quantity) AS Price_Quantity_Correlation
FROM 
    products
JOIN 
    [Order Details] ON products.ProductID = [Order Details].ProductID
```","The generated query calculates correlation, while the ground truth query provides average quantities per product. They address different aspects of the user's question.","SELECT P.ProductName, P.UnitPrice, SUM(OD.Quantity) AS TotalOrdered FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID GROUP BY P.ProductName, P.UnitPrice ORDER BY UnitPrice;","The generated SQL query calculates the total order quantity per product, while the ground truth query averages the quantities. Neither directly calculates correlation.",None
Analyze the correlation between product price and the number of orders received.,"SELECT P.ProductName, P.UnitPrice, COUNT(OD.OrderID) AS OrderCount FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID GROUP BY P.ProductID, P.ProductName, P.UnitPrice ORDER BY OrderCount DESC;","```sql
SELECT p.UnitPrice, 
       SUM(od.Quantity) AS TotalOrders
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.UnitPrice
```","The generated query groups by UnitPrice and sums quantities, while the ground truth groups by ProductID and counts orders.","SELECT P.ProductID, COUNT(O.OrderID) AS OrderCount FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID JOIN orders O ON OD.OrderID = O.OrderID GROUP BY P.ProductID ORDER BY AVG(P.UnitPrice) DESC;",The generated query groups by ProductID and orders by AVG(UnitPrice) but does not select the price; the ground truth query includes UnitPrice and orders by OrderCount. The focus on correlation between price and order count is missed.,None
Which suppliers provide products that are currently reordered the most?,"SELECT SupplierID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products WHERE UnitsOnOrder > 0 GROUP BY SupplierID ORDER BY TotalUnitsOnOrder DESC;","```sql
SELECT p.SupplierID, COUNT(p.ProductID) AS ReorderCount
FROM products p
WHERE p.UnitsInStock <= p.ReorderLevel
GROUP BY p.SupplierID
ORDER BY ReorderCount DESC;
```","The generated query checks which products are at or below their reorder level, while the ground truth query sums 'UnitsOnOrder' for products being reordered, focusing on current reorder activity.","SELECT SupplierID, COUNT(ProductID) AS ReorderCount FROM products WHERE UnitsInStock <= ReorderLevel GROUP BY SupplierID ORDER BY ReorderCount DESC;","The generated SQL query counts products below the reorder level, while the ground truth sums units on order. They use different criteria to define 'currently reordered the most.'",None
What is the average freight cost per shipping method?,"SELECT ShipVia, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, AVG(Freight) AS AverageFreight
FROM orders
GROUP BY ShipVia;
```",Both queries calculate the average freight cost per shipping method using the same logic and SQL structure.,"SELECT ShipVia, AVG(Freight) AS AverageFreightCost FROM orders GROUP BY ShipVia;",Both queries calculate the average freight cost grouped by shipping method (ShipVia). The difference in alias name does not affect the result.,both
Which shipping method is most frequently used?,"SELECT ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;","```sql
SELECT ShipVia, COUNT(*) AS Frequency
FROM orders
GROUP BY ShipVia
ORDER BY Frequency DESC
LIMIT 1;
```","Both queries calculate the most frequently used shipping method by counting occurrences of ShipVia, grouping by ShipVia, and ordering by the count in descending order, then limiting the result to 1.","SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;","Both queries count the occurrences of each shipping method and order them by usage, returning the most frequently used method. The use of COUNT(OrderID) versus COUNT(*) does not affect the outcome given the data context.",both
Determine the country with the highest number of suppliers and their average lead time.,"SELECT s.Country, COUNT(DISTINCT s.SupplierID) AS NumSuppliers, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.Country ORDER BY NumSuppliers DESC LIMIT 1;","```sql
SELECT s.Country, COUNT(s.SupplierID) AS SupplierCount, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime
FROM suppliers s
LEFT JOIN products p ON s.SupplierID = p.SupplierID
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
LEFT JOIN orders o ON od.OrderID = o.OrderID
GROUP BY s.Country
ORDER BY SupplierCount DESC
LIMIT 1;
```","The generated query does not account for distinct suppliers as in the ground truth query, which uses COUNT(DISTINCT s.SupplierID). This could affect the count if a supplier offers more than one product.","SELECT CompanyCountry, COUNT(SupplierID) AS SupplierCount, AVG(LeadTime) AS AvgLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN orders ON products.ProductID = orders.ProductID GROUP BY CompanyCountry ORDER BY SupplierCount DESC LIMIT 1;","The generated query counts suppliers and average lead time but uses COUNT without DISTINCT and averages without DATEDIFF, leading to potential discrepancies. It also does not correctly join order details, possibly affecting results.",None
Which orders had the highest freight costs?,"SELECT o.OrderID, o.Freight FROM orders o ORDER BY o.Freight DESC;","```sql
SELECT OrderID, Freight
FROM orders
ORDER BY Freight DESC
LIMIT 1;
```","The generated query only returns the single order with the highest freight cost, while the ground truth query returns all orders sorted by freight cost.","SELECT OrderID, Freight FROM orders ORDER BY Freight DESC LIMIT 5;","The generated query returns only the top 5 results, while the ground truth query returns all orders with the highest freight costs in descending order.",None
Find the most recent order for each customer.,"SELECT CustomerID, MAX(OrderDate) AS RecentOrderDate FROM orders GROUP BY CustomerID;","```sql
SELECT o.CustomerID, MAX(o.OrderDate) AS MostRecentOrderDate
FROM orders o
GROUP BY o.CustomerID;
```",Both queries correctly find the most recent order for each customer by grouping by CustomerID and selecting the maximum OrderDate.,"SELECT c.CustomerID, o.OrderID, o.OrderDate FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate = (SELECT MAX(OrderDate) FROM orders WHERE CustomerID = c.CustomerID);","The generated query retrieves the most recent order details per customer, including OrderID and OrderDate, while the ground truth query only retrieves CustomerID and the date of the most recent order without order details.",Base
What is the total sales generated in January 2023?,SELECT SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE O.OrderDate BETWEEN '2023-01-01' AND '2023-01-31';,"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE orders.OrderDate >= '2023-01-01' AND orders.OrderDate < '2023-02-01';
```","Both queries calculate total sales for January 2023 using the same formula and joining logic. The date range conditions, although phrased differently, cover the same period.",SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) as total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 AND MONTH(orders.OrderDate) = 1;,"Both queries calculate the total sales by multiplying UnitPrice, Quantity, and the adjustment for Discount for orders in January 2023. They use different methods to filter dates but yield the same result.",both
Which employee handles the most valuable products by unit price?,"SELECT e.FirstName, e.LastName FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID ORDER BY od.UnitPrice DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, MAX(od.UnitPrice) AS MostValuableProductPrice
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY MostValuableProductPrice DESC
LIMIT 1;
```","The generated query calculates the maximum unit price for each employee and orders them by this value, while the ground truth query finds the employee associated with the highest single unit price without aggregation.","SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(unit_price * od.Quantity) AS TotalValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY TotalValue DESC LIMIT 1;","The generated query aggregates by total order value, while the ground truth query orders by highest unit price of products an employee handles.",None
What is the total revenue for products that are not discontinued?,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE products.Discontinued = 0,"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
WHERE products.Discontinued = 0;
```",Both queries correctly calculate the total revenue for non-discontinued products using a SUM on the same expression and with identical JOIN and WHERE conditions.,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE products.Discontinued = 0;,Both SQL queries calculate the total revenue for products that are not discontinued by summing the same expression and using the same join and filter conditions.,both
Determine the total number of customers who have never placed an order.,SELECT COUNT(CustomerID) AS NeverOrdered FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders);,"```sql
SELECT COUNT(*) AS TotalCustomers
FROM customers
WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders);
```",Both queries correctly count the number of customers whose CustomerID does not appear in the orders table.,SELECT COUNT(CustomerID) AS NoOrderCustomers FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders);,"Both queries select the count of customers who haven't placed an order by checking if their CustomerID is not in the orders table. The only difference is in the alias for the result, which does not affect the outcome.",both
What are the top 3 most common courtesy titles among employees?,"SELECT TitleOfCourtesy, COUNT(*) AS Count FROM employees GROUP BY TitleOfCourtesy ORDER BY Count DESC LIMIT 3","```sql
SELECT TitleOfCourtesy, COUNT(*) AS TitleCount
FROM employees
GROUP BY TitleOfCourtesy
ORDER BY TitleCount DESC
LIMIT 3;
```","Both queries count the titles, group by TitleOfCourtesy, order them in descending order, and limit to the top 3.","SELECT Title, COUNT(*) AS TitleCount FROM employees GROUP BY Title ORDER BY TitleCount DESC LIMIT 3;",The generated SQL query uses the column name 'Title' whereas the ground truth query uses 'TitleOfCourtesy'. It’s unclear if these columns are equivalent.,Base
What are the total sales for each country?,"SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry","```sql
SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY ShipCountry;
```",The generated SQL query and the ground truth query are functionally equivalent. Both calculate total sales by country using the same logic and group by ShipCountry.,"SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry;",Both queries calculate total sales per country using the same formula and grouping method. They are functionally identical.,both
What is the trend in average order value over time?,"SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM') ORDER BY Month","```sql
SELECT
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue
FROM
    orders
JOIN
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY
    OrderMonth
ORDER BY
    OrderMonth;
```","Both queries calculate the average order value per month by grouping and formatting the date similarly. They use different functions for date formatting depending on SQL dialect, but the logic is the same.","SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN ""Order Details"" od ON o.OrderID = od.OrderID GROUP BY DATE_TRUNC('month', o.OrderDate);","Both queries calculate the monthly average order value using similar logic. They group by month and calculate the average by dividing the total value by the number of distinct orders, ensuring the analysis aligns with the user's request.",both
How many orders were placed in each month of the last year?,"SELECT EXTRACT(MONTH FROM orders.OrderDate) AS order_month, COUNT(orders.OrderID) AS total_orders FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY order_month","```sql
SELECT EXTRACT(YEAR FROM OrderDate) AS order_year, EXTRACT(MONTH FROM OrderDate) AS order_month, COUNT(OrderID) AS total_orders
FROM orders
WHERE OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE)
GROUP BY order_year, order_month
ORDER BY order_year, order_month;
```","The generated query counts orders from the last 365 days, which may span two different years, while the ground truth query specifically counts orders from the year 2022.","SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE o.OrderDate BETWEEN DATEADD(year, -1, CURRENT_DATE) AND CURRENT_DATE GROUP BY Month ORDER BY Month;","The generated query uses DATE_FORMAT and DATEADD with CURRENT_DATE for filtering the last year, which depends on execution date. The ground truth query uses a fixed date range for 2022. Additionally, they group by different formats: month-year vs month only.",None
What is the retention rate between January and February 2023?,SELECT (COUNT(DISTINCT o.JanuaryCustomerID) * 1.0 / COUNT(DISTINCT o2.PreJanuaryCustomerID)) * 100 AS RetentionRate FROM (SELECT DISTINCT CustomerID AS JanuaryCustomerID FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-02-01') o LEFT JOIN (SELECT DISTINCT CustomerID AS PreJanuaryCustomerID FROM orders WHERE OrderDate < '2023-01-01') o2 ON o.JanuaryCustomerID = o2.PreJanuaryCustomerID;,"```sql
SELECT 
    (COUNT(DISTINCT o2.CustomerID) * 1.0 / NULLIF(COUNT(DISTINCT o1.CustomerID), 0)) AS RetentionRate
FROM 
    orders o1 
LEFT JOIN 
    orders o2 ON o1.CustomerID = o2.CustomerID 
WHERE 
    o1.OrderDate < '2023-01-01' 
    AND o2.OrderDate BETWEEN '2023-01-01' AND '2023-02-28';
```","The generated SQL query incorrectly uses the date range for 'o1.OrderDate' and should actually fetch customers who purchased in January 2023, aligning with the ground truth logic. Also, the calculation logic slightly differs in the context of how customers from pre-January are being handled.","SELECT (COUNT(DISTINCT orders_2023_feb.CustomerID) * 1.0 / COUNT(DISTINCT orders_2023_jan.CustomerID)) AS retention_rate FROM (SELECT orders.CustomerID, MONTH(orders.OrderDate) AS order_month FROM orders WHERE YEAR(orders.OrderDate) = 2023) orders_2023_jan RIGHT JOIN (SELECT orders.CustomerID, MONTH(orders.OrderDate) AS order_month FROM orders WHERE YEAR(orders.OrderDate) = 2023) orders_2023_feb ON orders_2023_jan.CustomerID = orders_2023_feb.CustomerID AND orders_2023_jan.order_month = 1 AND orders_2023_feb.order_month = 2","The generated query calculates retention from January to February within 2023 using customers found in both months, whereas the ground truth query calculates customers retained from prior to January to January, not February.",None
Calculate the total number of orders shipped via each shipping method.,"SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, COUNT(OrderID) AS TotalOrders
FROM orders
GROUP BY ShipVia;
```",Both queries correctly calculate the total number of orders grouped by each shipping method using COUNT(OrderID) with GROUP BY ShipVia. The difference in alias names (TotalOrders vs. OrderCount) does not affect the result.,"SELECT ShipVia, COUNT(*) AS TotalOrders FROM orders GROUP BY ShipVia;","Both queries count the number of orders grouped by shipping method. COUNT(*) and COUNT(OrderID) yield the same results in this context, assuming OrderID is non-null for all records.",both
Which products need to be reordered and who are their suppliers?,"SELECT p.ProductName, s.SupplierName FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.UnitsInStock <= p.ReorderLevel","```sql
SELECT 
    p.ProductName, 
    p.UnitsInStock, 
    p.ReorderLevel, 
    s.SupplierName 
FROM 
    products p 
JOIN 
    suppliers s ON p.SupplierID = s.SupplierID 
WHERE 
    p.UnitsInStock < p.ReorderLevel;
```",The generated query uses '<' while the ground truth query uses '<='. This could result in slightly different results.,"SELECT p.ProductID, p.ProductName, p.SupplierID, s.CompanyName FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.UnitsInStock < p.ReorderLevel;","The generated query uses '<' whereas the ground truth uses '<=' for the condition. Additionally, it selects 'SupplierID' and 'CompanyName' while the ground truth selects 'SupplierName', which might indicate different data.",None
Identify products that need to be reordered based on their reorder level.,SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel 
FROM products 
WHERE UnitsInStock <= ReorderLevel;
```","Both queries identify products that need to be reordered based on their reorder level. The Generated SQL Query returns additional details (ProductID, UnitsInStock, ReorderLevel), but it accurately answers the user's question.","SELECT ProductID, ProductName FROM products WHERE UnitsInStock + UnitsOnOrder <= ReorderLevel AND Discontinued = 0;","The generated query factors in UnitsOnOrder and checks if the product is Discontinued, whereas the ground truth query only checks UnitsInStock against ReorderLevel.",Base
What is the total number of units ordered for each supplier?,"SELECT SupplierID, SUM([Order Details].Quantity) AS TotalUnitsOrdered FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID;","```sql
SELECT p.SupplierID, SUM(od.Quantity) AS TotalUnitsOrdered
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.SupplierID;
```",Both queries join the products and order details tables on ProductID and group by SupplierID to calculate the total units ordered per supplier. The use of aliases and slight syntactical differences do not affect the results.,"SELECT s.SupplierName, SUM(od.Quantity) AS TotalOrdered FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierName;","The generated query groups by SupplierName, while the ground truth groups by SupplierID. If SupplierNames are unique to SupplierIDs, they might yield the same counts, but they do not structurally match the grouping in the ground truth query.",Base
Which employee generated the most sales revenue in March 2023?,"SELECT employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
JOIN employees ON orders.EmployeeID = employees.EmployeeID
WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31'
GROUP BY employees.EmployeeID
ORDER BY total_sales DESC
LIMIT 1
```","The generated query selects EmployeeID, whereas the ground truth query selects FirstName and LastName of the employee.","SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1","The generated query selects EmployeeID, while the ground truth query selects FirstName and LastName. The results will not be identical.",None
How many orders have been placed by each customer?,"SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID;","```sql
SELECT CustomerID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY CustomerID;
```","Both queries count the number of orders for each customer, using the same grouping and aggregation logic with only a difference in the alias name for the count.","SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID;","Both queries count the number of orders per customer and differ only in the alias name, which does not affect the result.",both
What is the average unit price of discontinued products?,SELECT AVG(UnitPrice) FROM products WHERE Discontinued = 1;,"```sql
SELECT AVG(UnitPrice) AS AverageUnitPrice
FROM products
WHERE Discontinued = 1;
```",Both queries calculate the average unit price of products where the 'Discontinued' column equals 1. The minor difference in aliasing the result column does not affect the outcome.,SELECT AVG(UnitPrice) AS AverageDiscontinuedPrice FROM products WHERE Discontinued = 1;,"Both queries calculate the average unit price of discontinued products, using the same condition and aggregation function.",both
Which products have stock levels below their reorder level?,"SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;","```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock < ReorderLevel;
```","Both queries identify products with stock levels below their reorder level. The generated query includes additional columns, but they do not affect the result.","SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;","The generated SQL query accurately answers the user's question and yields the same results as the ground truth query, as both queries select products where UnitsInStock is less than ReorderLevel.",both
Identify products with above-average sales performance.,SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID HAVING SUM(od.Quantity) > (SELECT AVG(total_sales) FROM (SELECT SUM(Quantity) AS total_sales FROM [Order Details] GROUP BY ProductID) AS subquery);,"```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
HAVING SUM(od.Quantity) > (SELECT AVG(TotalSales) FROM (SELECT SUM(Quantity) AS TotalSales FROM [Order Details] GROUP BY ProductID) AS AvgSales)
```","Both queries identify products whose total sales exceed the average sales of all products. Differences in result sets (e.g., columns) do not affect the answer to the user's question.","SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName HAVING SUM(od.Quantity) > (SELECT AVG(TotalQuantity) FROM (SELECT SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID) AS SubQuery);","Both queries identify products with sales higher than the average by aggregating the quantity sold and comparing to a subquery that calculates the average sales across products. While column names and join order differ, they produce equivalent results.",both
What is the percentage of orders shipped late for each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(CASE WHEN ShippedDate > RequiredDate THEN 1 ELSE 0 END) * 1.0 / COUNT(OrderID) AS LateDeliveryRate FROM orders GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    (COUNT(OrderID) WHERE ShippedDate > RequiredDate) * 100.0 / COUNT(OrderID) AS PercentageLate
FROM 
    orders
GROUP BY 
    Month;
```",The generated SQL query uses incorrect syntax for conditional counting and lacks a proper conditional clause inside COUNT. It also doesn't correctly calculate the late percentage using a CASE statement as in the ground truth.,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(CASE WHEN ShippedDate > RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS LatePercentage FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","The generated query calculates the percentage by multiplying by 100, whereas the ground truth calculates it as a rate without multiplying by 100. Thus, the results differ in scale.",None
Identify products with the highest unit price that have never been ordered.,SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]) ORDER BY UnitPrice DESC LIMIT 1;,"```sql
SELECT ProductName, UnitPrice 
FROM products 
WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]) 
ORDER BY UnitPrice DESC 
LIMIT 1;
```","The generated query selects 'ProductName, UnitPrice' while the ground truth selects only 'ProductName'. Both queries would yield different sets of columns in the output.",SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]) ORDER BY UnitPrice DESC LIMIT 1;,"The generated query and the ground truth query are identical, ensuring that they will produce the same results.",FT
How many orders were shipped after the required date?,SELECT COUNT(orders.OrderID) AS late_orders FROM orders WHERE orders.ShippedDate > orders.RequiredDate,"```sql
SELECT COUNT(OrderID) AS orders_shipped_late FROM orders WHERE ShippedDate > RequiredDate
```","Both queries count the number of orders where the ShippedDate is later than the RequiredDate, leading to the same result.","```sql
SELECT COUNT(OrderID) AS LateShipments FROM orders WHERE ShippedDate > RequiredDate;```","Both queries count the number of orders where the ShippedDate is later than the RequiredDate, producing the same result.",both
Which products have not been sold at all?,"SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;","```sql
SELECT p.ProductID, p.ProductName
FROM products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.ProductID IS NULL;
```",The generated SQL query accurately answers the user's question and yields the same results as the ground truth query. Both queries have the same structure and logic.,SELECT ProductID FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"Both queries correctly identify products that have not been sold by checking for ProductIDs that do not exist in 'Order Details'. The generated query uses a NOT IN subquery, while the ground truth uses a LEFT JOIN with a NULL check, but they yield the same result.",both
Identify any products with no current orders.,"SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);","```sql
SELECT p.ProductID, p.ProductName
FROM products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.OrderID IS NULL;
```","Both queries correctly identify products with no current orders. The generated query uses a LEFT JOIN with a NULL check, while the ground truth query uses a NOT IN clause, but they yield the same results.",SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"The generated query only selects ProductName, missing the ProductID, while the ground truth query selects both ProductID and ProductName.",Base
What percentage of products are currently on order?,SELECT COUNT(DISTINCT ProductID) * 100.0 / (SELECT COUNT(ProductID) FROM products) AS PercentageOnOrder FROM [Order Details] WHERE Quantity > 0;,"```sql
SELECT 
    (COUNT(CASE WHEN UnitsOnOrder > 0 THEN 1 END) * 100.0 / COUNT(*)) AS PercentageOnOrder
FROM 
    products;
```","The generated query calculates the percentage of products with units on order from the 'products' table, while the ground truth query calculates the percentage based on distinct product IDs from the 'Order Details' table where the order quantity is greater than zero. The data sources and conditions differ, leading to potentially different results.",SELECT (COUNT(*) FILTER(WHERE UnitsOnOrder > 0) * 100.0 / COUNT(*)) AS PercentageOnOrder FROM products;,"The generated SQL query calculates the percentage of products with units on order from the 'products' table, while the ground truth query calculates the percentage based on distinct ProductID from '[Order Details]' where Quantity is greater than zero. They use different criteria and tables.",None
Identify products with sales quantities exceeding their stock levels.,SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity) > MAX(p.UnitsInStock);,"```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales, p.UnitsInStock
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName, p.UnitsInStock
HAVING SUM(od.Quantity) > p.UnitsInStock;
```",Both queries are functionally equivalent. They identify products with total sales quantities exceeding stock levels by grouping on product details and using a HAVING clause to filter the results.,SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity) > p.UnitsInStock;,"The generated query uses p.UnitsInStock directly in the HAVING clause, while the ground truth uses MAX(p.UnitsInStock). This could lead to different results based on the assumption of constant or varying stock levels across orders.",Base
Who is the employee with the most orders fulfilled?,"SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE ShippedDate IS NOT NULL GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```","The generated query does not consider only fulfilled orders (i.e., those with a non-null ShippedDate).","SELECT emp.EmployeeID, COUNT(OrderID) AS NumOrders FROM orders GROUP BY emp.EmployeeID ORDER BY NumOrders DESC LIMIT 1;","The generated query does not consider the 'ShippedDate IS NOT NULL' condition, which is essential to determine fulfilled orders.",None
What is the average lead time for each supplier to deliver products?,"SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM products p JOIN orders o ON p.ProductID = o.OrderID GROUP BY p.SupplierID;","```sql
SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.CompanyName;
```","The generated query joins with the suppliers table for supplier names and groups by CompanyName, while the ground truth groups by SupplierID from the products table, which might not give the same results if there are multiple suppliers with the same name.","SELECT suppliers.SupplierID, suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID, suppliers.CompanyName;","The generated query joins multiple tables to get the SupplierID and calculates the average lead time, while the ground truth query calculates it directly from the products and orders tables. The result will differ if the orders and products are not directly related as assumed in the ground truth query.",None
List all suppliers from a specific region along with their contact names.,"SELECT suppliers.CompanyName, suppliers.ContactName FROM suppliers WHERE suppliers.Region = 'specific region'","```sql
SELECT CompanyName, ContactName 
FROM suppliers 
WHERE Region = 'specific_region';
```","The generated query and the ground truth query select the same columns and filter with the same condition, differing only in syntax, which does not affect the result.","SELECT SupplierID, CompanyName, ContactName FROM suppliers WHERE Region = 'specified_region';","The generated query uses 'SupplierID' and 'specified_region', while the ground truth query does not include 'SupplierID' and uses 'specific region', which may cause different results.",Base
Which employee has handled the most orders?,"SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY OrderCount DESC;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```","The generated query does not include a join with the employees table, which might lead to missing EmployeeIDs not present in the orders table.","SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;","Both queries determine the employee with the most orders by counting OrderID per EmployeeID and ordering the results in descending order of count. The generated query includes a LIMIT 1 to return the top result, matching the user's question more closely.",FT
What is the average employee sales for each title?,"SELECT employees.Title, AVG(employee_sales) AS avg_employee_sales FROM (SELECT employees.Title, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID, employees.Title) AS sales_by_employee GROUP BY employees.Title","```sql
SELECT employees.Title, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS average_employee_sales
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
JOIN employees ON orders.EmployeeID = employees.EmployeeID
GROUP BY employees.Title
```","The generated SQL calculates average sales by dividing total sales by the distinct order count, while the ground truth computes it as the average of total sales per employee.","SELECT e.Title, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageTitleSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Title;","Both queries calculate the average sales per title by aggregating sales data from employees, orders, and order details, using employee titles as the grouping criteria.",FT
Which countries have the highest average customer lifetime value?,"SELECT customers.Country, AVG(customer_lifetime_value) AS avg_lifetime_value FROM (SELECT customers.CustomerID, customers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID, customers.Country) AS customer_values GROUP BY customers.Country ORDER BY avg_lifetime_value DESC","```sql
SELECT customers.Country, AVG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) AS avg_customer_lifetime_value
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN customers ON orders.CustomerID = customers.CustomerID 
GROUP BY customers.Country
ORDER BY avg_customer_lifetime_value DESC;
```","The generated query inaccurately uses AVG(SUM(...)), which would result in an incorrect aggregation because it tries to compute an average of summed values within the same query. The correct approach is to first sum the lifetime value per customer and then compute the average for each country, as shown in the ground truth query.","SELECT c.Country, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLifetime FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.Country ORDER BY AverageLifetime DESC;",The generated SQL query calculates average shipping time by country rather than average customer lifetime value. The ground truth query calculates average lifetime value based on order revenue by country.,None
What is the Customer Retention Rate for the last quarter?,"SELECT (COUNT(DISTINCT o1.CustomerID) * 1.0 / COUNT(DISTINCT o2.CustomerID)) AS RetentionRate FROM orders o1, orders o2 WHERE o1.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND CURRENT_DATE AND o2.OrderDate < DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH);","```sql
SELECT 
    (COUNT(DISTINCT o2.CustomerID) * 1.0 / NULLIF(COUNT(DISTINCT o1.CustomerID), 0)) AS CustomerRetentionRate
FROM 
    orders o1 
LEFT JOIN 
    orders o2 ON o1.CustomerID = o2.CustomerID AND o2.OrderDate >= DATEADD(QUARTER, -1, GETDATE()) 
WHERE 
    o1.OrderDate < DATEADD(QUARTER, -1, GETDATE());
```","The generated query and the ground truth query are calculating retention rate differently. The generated query finds customers from the last quarter and checks if they existed before, while the ground truth checks the previous quarter's customers present in the current quarter.","SELECT (COUNT(DISTINCT CASE WHEN o.OrderDate BETWEEN DATEADD(QUARTER, -1, CURRENT_DATE) AND CURRENT_DATE THEN o.CustomerID END) * 1.0) / COUNT(DISTINCT CASE WHEN o.OrderDate < DATEADD(QUARTER, -1, CURRENT_DATE) THEN o.CustomerID END) AS CustRetentionRate FROM (SELECT CustomerID, OrderDate FROM orders) o;","The generated query calculates the count of distinct customers from the last quarter divided by distinct customers before last quarter, while the ground truth query calculates distinct customers from last quarter who also had orders before that period.",None
Which supplier had the shortest lead time last year?,"SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC LIMIT 1","```sql
SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time
FROM orders
JOIN products ON orders.OrderID = products.ProductID
WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'
GROUP BY products.SupplierID
ORDER BY supplier_lead_time ASC
LIMIT 1
```","The generated query incorrectly joins orders and products on OrderID and ProductID, missing the intermediate Order Details table. This can yield incorrect results.","SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY suppliers.CompanyName ORDER BY lead_time ASC LIMIT 1","The generated query selects suppliers based on their CompanyName, while the ground truth query uses SupplierID. This difference might yield different outcomes if multiple suppliers have similar company names.",None
How many products have reached their reorder level?,SELECT COUNT(*) AS reorder_products FROM products WHERE UnitsInStock <= ReorderLevel,"```sql
SELECT COUNT(*) AS products_below_reorder_level 
FROM products 
WHERE UnitsInStock <= ReorderLevel;
```","Both queries count products where UnitsInStock is less than or equal to ReorderLevel, so they yield the same result.","SELECT ProductID, ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",The generated query selects ProductID and ProductName instead of counting the products that have reached the reorder level.,Base
What is the median freight cost per order?,SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY Freight) AS MedianFreight FROM orders;,"```sql
SELECT AVG(Freight) AS MedianFreightCost
FROM (
    SELECT Freight
    FROM orders
    ORDER BY Freight
    LIMIT 2 - (SELECT COUNT(*) FROM orders) % 2    -- for even count
    OFFSET (SELECT (COUNT(*) - 1) / 2 FROM orders)  -- for odd count
) AS MedianFreight;
```","The generated SQL query attempts to calculate the median by using ordered subqueries and averaging, which does not accurately address how to find the median, especially for even-sized datasets. The ground truth query correctly uses PERCENTILE_CONT to determine the median.",SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY Freight) AS median_freight_cost FROM orders;,"Both queries calculate the median freight cost using PERCENTILE_CONT(0.5) on the Freight column from the orders table, differing only in the alias names.",FT
Calculate the average discount rate for each product.,"SELECT ProductID, AVG(Discount) AS AverageDiscount FROM [Order Details] GROUP BY ProductID;","```sql
SELECT ProductID, AVG(Discount) AS AverageDiscount
FROM [Order Details]
GROUP BY ProductID;
```","The generated SQL query calculates the average discount rate for each product by grouping by ProductID, which matches the ground truth SQL query in both logic and expected results.","SELECT products.ProductName, AVG([Order Details].Discount) AS AverageDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;","The generated query includes the product name, whereas the ground truth uses ProductID. They group by different fields, leading to potentially different results.",Base
Identify the top 3 products by sales revenue.,"SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS ProductRevenue FROM [Order Details] GROUP BY ProductID ORDER BY ProductRevenue DESC LIMIT 3;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSales DESC
LIMIT 3;
```","The Generated SQL Query includes the ProductName in the output, which is not in the Ground Truth Query. They also use different tables, which might affect the result.","SELECT pro.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) as TotalRevenue FROM [Order Details] JOIN products pro ON [Order Details].ProductID = pro.ProductID GROUP BY pro.ProductName ORDER BY TotalRevenue DESC LIMIT 3;","The generated SQL query does not account for discounts, which the ground truth query considers. This results in potentially different revenue calculations.",None
Which products have sales exceeding their reorder levels?,SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity) > p.ReorderLevel,"```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
HAVING SUM(od.Quantity) > p.ReorderLevel
```","Both queries identify products with total sales exceeding their reorder levels, differing only in the selected columns.",SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity) > p.ReorderLevel;,"Both queries are exactly the same, thus they will yield the same results.",both
Which orders had a shipped date later than the required date?,SELECT * FROM orders WHERE ShippedDate > RequiredDate;,"```sql
SELECT *
FROM orders
WHERE ShippedDate > RequiredDate;
```","The generated SQL query correctly identifies orders with a ShippedDate later than the RequiredDate, meeting the user's request, and matches the ground truth query logic.",SELECT o.OrderID FROM orders o WHERE o.ShippedDate > o.RequiredDate;,"The generated SQL query selects only OrderID, while the ground truth query selects all columns.",Base
How many orders were shipped late (after the required date)?,SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;,"```sql
SELECT COUNT(*) AS LateOrders
FROM orders
WHERE ShippedDate > RequiredDate;
```","Both queries count the number of orders where the ShippedDate is later than the RequiredDate. The selection of COUNT(*) versus COUNT(OrderID) does not affect the result as long as there are no NULL OrderIDs, since it counts the rows satisfying the condition in both cases.",SELECT COUNT(OrderID) AS LateShipments FROM orders WHERE ShippedDate > RequiredDate;,"Both queries count orders where the ShippedDate is after the RequiredDate, yielding the same results.",both
What is the total freight cost for each shipping method in the current year?,"SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders WHERE OrderDate >= DATE '2023-01-01' GROUP BY ShipVia;","```sql
SELECT ShipVia, SUM(Freight) AS TotalFreight
FROM orders
WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE)
GROUP BY ShipVia;
```",Both queries calculate the total freight cost for each shipping method for the current year. The methods used to determine the current year's orders (YEAR function vs. explicit date range) are equivalent in this context.,"SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY ShipVia;","The generated SQL query checks for the year dynamically using YEAR(CURRENT_DATE), which will work if 'CURRENT_DATE' is correct. However, 'Ground Truth SQL Query' assumes the current year is 2023 with a fixed date. This could lead to different results if evaluated in different years.",Base
What is the average discount applied on all orders?,SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details]
```","Both queries accurately calculate the average discount from the same table, producing the same result despite slight differences in column alias naming.",SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];,The generated SQL query and the ground truth query calculate the average discount from the same table and field. The different alias used does not affect the outcome.,both
What are the top 5 products with the highest revenue?,"SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 5;","```sql
SELECT TOP 5 
    od.ProductID, 
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM 
    [Order Details] od
JOIN 
    orders o ON od.OrderID = o.OrderID
GROUP BY 
    od.ProductID
ORDER BY 
    TotalRevenue DESC;
```","The generated query uses 'TOP 5', which may not be compatible with all SQL databases. It also includes a JOIN to the 'orders' table, which is unnecessary for calculating product revenue and could alter the result if it filters or modifies the dataset.","SELECT ProductID, SUM(Quantity * UnitPrice) AS TotalRevenue FROM [Order Details] GROUP BY ProductID ORDER BY TotalRevenue DESC FETCH FIRST 5 ROWS ONLY;","The generated query does not account for discounts, which could affect the revenue calculation, making the results potentially different from the ground truth query.",None
Calculate the average unit price of all products across categories.,"SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID;","```sql
SELECT AVG(UnitPrice) AS AverageUnitPrice
FROM products;
```","The generated query calculates the overall average unit price of all products, not by category. The ground truth query calculates the average for each category.","SELECT CategoryID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY CategoryID;",The generated SQL query and the ground truth SQL query produce the same result despite the different alias names for the average unit price.,FT
What is the total freight cost associated with orders processed by each employee?,"SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(o.Freight) AS TotalFreightCost
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","Both queries correctly calculate the total freight cost for each employee by joining the 'employees' and 'orders' tables and summing the 'Freight' field, grouped by 'EmployeeID'. The difference is the inclusion of 'FirstName' and 'LastName' in the generated query, but results remain the same.","SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName;","The generated query provides additional columns (FirstName, LastName) but calculates total freight costs per employee correctly, which addresses the user's question in the same way as the ground truth.",both
What is the total revenue lost by discounting products?,SELECT SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalRevenueLost FROM [Order Details] od;,"```sql
SELECT SUM(UnitPrice * Quantity * Discount) AS TotalRevenueLost
FROM [Order Details]
WHERE Discount > 0;
```","Both queries calculate the total revenue lost by discounting products, considering only records where a discount is applied. They utilize the same formula and data source.",SELECT SUM((UnitPrice * OrderDetails.Quantity * (1 - Discount) - UnitPrice * OrderDetails.Quantity)) AS TotalRevenueLost FROM OrderDetails;,"Both queries calculate the total revenue lost due to discounts. The generated query computes the loss by considering the difference between discounted and non-discounted sales. The ground truth query calculates the revenue lost directly by multiplying the unit price, quantity, and discount. Both achieve the same result.",both
How much did each supplier contribute to the total sales revenue?,"SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales_contribution FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName","```sql
SELECT suppliers.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN suppliers ON products.SupplierID = suppliers.SupplierID
GROUP BY suppliers.SupplierID
```","The generated query groups by 'SupplierID' while the ground truth groups by 'CompanyName', leading to different outputs if there are multiple suppliers with the same ID but different company names.","SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) as SupplierRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName;",Both queries calculate the total sales revenue contributed by each supplier by joining the same tables using identical join logic and fields. The aggregation and grouping are done correctly by supplier. Differences in alias naming do not affect the outcome.,FT
List the top 5 employees with the highest average sales per order.,"SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgSalesPerOrder FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY AvgSalesPerOrder DESC LIMIT 5;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY AverageSales DESC
LIMIT 5;
```",Both queries calculate the average sales per order for each employee and order the results to list the top 5 employees. The differences in alias and field naming do not affect the outcome.,"SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) as AverageSalesPerOrder FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AverageSalesPerOrder DESC LIMIT 5;","Both queries calculate the average sales per order for each employee and return the top 5 employees based on this metric. They join employees, orders, and order details tables correctly and group the results by EmployeeID, ordering by the calculated average in descending order, and limit the results to 5. Differences in alias naming do not affect the outcome.",both
Which region has the most sales by employees?,"SELECT o.ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS RegionSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN employees e ON o.EmployeeID = e.EmployeeID GROUP BY o.ShipRegion ORDER BY RegionSales DESC LIMIT 1;","```sql
SELECT e.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.Region
ORDER BY TotalSales DESC
LIMIT 1;
```",The generated query groups by employee region whereas the ground truth groups by shipping region. These may not yield the same results.,"SELECT e.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Region ORDER BY TotalSales DESC LIMIT 1;","The generated query calculates sales by the employee's region, while the ground truth query calculates sales by the shipping region.",None
Identify the employees with the most number of orders fulfilled in each region.,"SELECT employeeTerritories.RegionID, employees.EmployeeID, COUNT(orders.OrderID) AS number_of_orders FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID GROUP BY employeeTerritories.RegionID, employees.EmployeeID ORDER BY employeeTerritories.RegionID, number_of_orders DESC","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, r.RegionDescription, COUNT(o.OrderID) AS orders_fulfilled
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN territories t ON e.EmployeeID = t.EmployeeID
JOIN region r ON t.RegionID = r.RegionID
GROUP BY e.EmployeeID, r.RegionID
HAVING COUNT(o.OrderID) = (
    SELECT MAX(order_count)
    FROM (
        SELECT COUNT(o2.OrderID) AS order_count
        FROM employees e2
        JOIN orders o2 ON e2.EmployeeID = o2.EmployeeID
        JOIN territories t2 ON e2.EmployeeID = t2.EmployeeID
        JOIN region r2 ON t2.RegionID = r2.RegionID
        GROUP BY e2.EmployeeID, r2.RegionID
    ) AS subquery
)
```","The generated SQL query attempts to identify employees with the most orders per region by using a HAVING clause with a subquery but doesn't group results in the same manner as the ground truth query. Additionally, it attempts a complex subquery approach that might not conform to intuitive SQL practices like those in the ground truth query.","```sql
SELECT Region.RegionDescription, EmployeeID, COUNT(OrderID) AS NumOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID GROUP BY Region.RegionDescription, EmployeeID ORDER BY NumOrders DESC; ```","The generated SQL query sorts by the highest number of orders overall, not by the highest per region as the user requested, and it uses Region.RegionDescription which is not in the ground truth.",None
Identify the top 3 products with the highest sales revenue per unit.,"SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / SUM(od.Quantity) AS SalesRevenuePerUnit FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SalesRevenuePerUnit DESC LIMIT 3;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) / SUM(od.Quantity) AS RevenuePerUnit
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY RevenuePerUnit DESC
LIMIT 3;
```",Both queries calculate revenue per unit for each product and order the results to return the top 3 products by this metric. The inclusion of ProductID in the generated query doesn't affect the outcome or result set.,"```sql
SELECT p.ProductID, p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS SalesRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY SalesRevenue / NULLIF(SUM(od.Quantity), 0) DESC LIMIT 3;
```","The generated query considers discounts in calculating total sales, whereas the ground truth query does not. Additionally, the ground truth query uses 'SUM(od.Quantity) AS sales revenue per unit' for ordering, which may lead to different results.",Base
List employees who have seen a growth trend in their sales over the last year.,"SELECT employees.EmployeeID FROM (SELECT employees.EmployeeID, EXTRACT(YEAR FROM orders.OrderDate) AS Year, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS YearlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, Year) subquery WHERE YearlySales > LAG(YearlySales, 1) OVER (PARTITION BY EmployeeID ORDER BY Year);","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName
FROM employees e
JOIN (
    SELECT o.EmployeeID,
           SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS total_sales,
           DATE_FORMAT(o.OrderDate, '%Y-%m') AS sales_month
    FROM orders o
    JOIN [Order Details] od ON o.OrderID = od.OrderID
    WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
    GROUP BY o.EmployeeID, sales_month
) AS monthly_sales ON e.EmployeeID = monthly_sales.EmployeeID
GROUP BY e.EmployeeID
HAVING COUNT(CASE WHEN total_sales > 0 THEN 1 END) > 1
AND MAX(CASE WHEN sales_month = DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 1 MONTH), '%Y-%m') THEN total_sales ELSE 0 END) >
    MAX(CASE WHEN sales_month = DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 2 MONTH), '%Y-%m') THEN total_sales ELSE 0 END);
```","The generated query checks for a growth trend specifically by comparing sales over the last two months of the year, rather than over the entire last year as the ground truth query intends. It lacks the temporal overview needed to detect an annual growth trend.",SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE EXTRACT(YEAR FROM o.OrderDate) = 2023 GROUP BY e.EmployeeID HAVING SUM(CASE WHEN EXTRACT(MONTH FROM o.OrderDate) = 1 THEN o.Freight ELSE 0 END) < SUM(CASE WHEN EXTRACT(MONTH FROM o.OrderDate) = 2 THEN o.Freight ELSE 0 END);,"The generated SQL query checks for month-over-month sales growth using freight charges from January to February in 2023, while the ground truth query examines yearly sales growth based on product sales data, comparing the current year sales with the previous year's.",None
Which shipping method tends to have the fastest fulfillment time?,"SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia ORDER BY AvgFulfillmentTime ASC LIMIT 1;","```sql
SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY ShipVia
ORDER BY AverageFulfillmentTime ASC
LIMIT 1;
```","Both queries compute the average fulfillment time for each shipping method and return the method with the fastest time. They are functionally equivalent, only differing in alias naming.","SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillingTime FROM orders GROUP BY ShipVia ORDER BY AvgFulfillingTime ASC LIMIT 1;","The generated SQL query correctly calculates the average fulfillment time for each shipping method and orders the results to identify the fastest method, which matches the intent of the ground truth query.",both
How much revenue has each customer generated over their lifetime?,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID","```sql
SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN customers ON orders.CustomerID = customers.CustomerID 
GROUP BY customers.CustomerID
```","The generated SQL query and the ground truth query are identical in logic and structure, thus they will yield the same results.","SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;","Both queries calculate the lifetime revenue for each customer by joining customers, orders, and order details, and then summing the product of UnitPrice, Quantity, and Discount for each customer. The logic is equivalent, producing the same result.",both
What is the seasonal trend of product sales over the last two years?,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, products.ProductName, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 2 YEAR) GROUP BY month, products.ProductID ORDER BY month, sales_volume DESC","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS sales_month,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
FROM 
    orders 
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID 
WHERE 
    orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 2 YEAR)
GROUP BY 
    sales_month
ORDER BY 
    sales_month;
```","The generated query aggregates total sales revenue by month, whereas the ground truth query tracks sales volume by product and month.","To analyze the seasonal trend of product sales over the last two years, you might create a query that groups product sales by season and by year. Here's a query example tailored to examine sales across different seasons: 

```sql
SELECT 
    p.ProductName, 
    EXTRACT(YEAR FROM o.OrderDate) AS Year, 
    EXTRACT(MONTH FROM o.OrderDate) AS Month, 
    SUM(od.Quantity) AS TotalSales 
FROM 
    products p 
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID 
JOIN 
    orders o ON o.OrderID = od.OrderID 
WHERE 
    o.OrderDate >= DATEADD(YEAR, -2, CURRENT_DATE) 
GROUP BY 
    p.ProductName, Year, Month
```

This example query gathers sales data for each product in the past two years, grouped by year and month, which is crucial for identifying seasonality trends. You would then analyze the output for seasonal effects, looking for patterns in specific months or seasons.","The generated query groups by year and month separately and focuses on TotalSales per product per month, whereas the ground truth query groups by formatted year-month and orders by sales volume.",None
What are the top five best-selling products this year?,"SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE YEAR(od.OrderDate) = YEAR(CURRENT_DATE) GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 5","```sql
SELECT p.ProductName, SUM(od.Quantity) AS TotalSold
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE YEAR(od.OrderID) = YEAR(CURRENT_DATE)
GROUP BY p.ProductName
ORDER BY TotalSold DESC
LIMIT 5;
```","The generated query uses od.OrderID, which is likely incorrect for identifying the year. It should use od.OrderDate as in the ground truth query.","SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM products p JOIN ""Order Details"" od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY p.ProductName ORDER BY TotalSold DESC LIMIT 5;","The 'Generated SQL Query' uses 'o.OrderDate', whereas the 'Ground Truth SQL Query' uses 'od.OrderDate'. They may yield different results if order dates are not the same as order detail dates.",None
Which shipping company (ShipVia) has the best on-time delivery record?,"SELECT ShipVia, COUNT(OrderID) * 100.0 / SUM(COUNT(OrderID)) OVER () AS OnTimePercentage FROM orders WHERE ShippedDate <= RequiredDate GROUP BY ShipVia;","```sql
SELECT ShipVia, 
       COUNT(OrderID) AS TotalOrders,
       COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) AS OnTimeDeliveries,
       (COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID)) AS OnTimeDeliveryRate
FROM orders
GROUP BY ShipVia
ORDER BY OnTimeDeliveryRate DESC
LIMIT 1;
```",The generated SQL query calculates the on-time delivery rate for each shipping company and selects the one with the best rate. The ground truth query calculates the percentage of on-time orders relative to the total on-time orders across all companies. They have different methodologies and potentially different results.,"SELECT ShipVia, COUNT(OrderID) Filter (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) AS OnTimePercentage FROM orders GROUP BY ShipVia ORDER BY OnTimePercentage DESC;","The generated query filters on-time orders per ShipVia, thus calculating on-time percentage per company. The ground truth query calculates overall on-time percentage considering all orders that are on time. They address different interpretations of 'best on-time delivery record'.",None
Identify customers who have never placed an order.,SELECT CustomerID FROM customers WHERE CustomerID NOT IN (SELECT CustomerID FROM orders);,"```sql
SELECT * 
FROM customers 
WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders);
```",Both queries effectively identify customers who have never placed an order by checking for CustomerIDs not present in the orders table.,"SELECT c.CustomerID, c.CompanyName FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderID IS NULL;",Both queries accurately identify customers who have never placed an order by checking for the absence of related records in the 'orders' table.,both
What percentage of orders are shipped via the most expensive method?,"SELECT COUNT(o.OrderID) * 1.0 / (SELECT COUNT(*) FROM orders) AS ExpensiveShippingRate FROM orders o WHERE o.ShipVia = (SELECT ShipVia FROM (SELECT ShipVia, AVG(Freight) AS avg_freight FROM orders GROUP BY ShipVia ORDER BY avg_freight DESC LIMIT 1) AS expensive_method);","```sql
SELECT 
    (COUNT(CASE WHEN ShipVia = (SELECT ShipVia FROM orders GROUP BY ShipVia ORDER BY AVG(Freight) DESC LIMIT 1) THEN 1 END) * 100.0) / COUNT(*) AS PercentageOfMostExpensiveShippingMethod
FROM 
    orders;
```",Both queries calculate the percentage of orders shipped via the most expensive method by comparing the average freight for each 'ShipVia'. The approaches differ slightly but achieve the same result.,SELECT (COUNT(CASE WHEN ShipVia = (SELECT ShipVia FROM orders GROUP BY ShipVia ORDER BY SUM(Freight) DESC LIMIT 1) THEN 1 END) * 100.0 / COUNT(OrderID)) AS Most_Expensive_Method_Percentage FROM orders;,"The generated query calculates the percentage based on the total freight cost to determine the most expensive method, while the ground truth uses the average freight to determine the most expensive shipping method.",Base
What is the average order value in 2023?,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value_2023 FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31',"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
```","The generated SQL query and the ground truth SQL query are functionally equivalent. Both calculate the average order value in 2023 by summing the product of UnitPrice, Quantity, and (1 - Discount) for all order details, dividing by the distinct count of OrderID, and filtering for orders in 2023.",SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))/COUNT(DISTINCT o.OrderID) AS avg_order_value FROM dbo.[Order Details] od JOIN dbo.Orders o ON od.OrderID = o.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31',"Both queries calculate the average order value by summing the product of UnitPrice, Quantity, and Discount, and then dividing by the count of distinct OrderID for orders in 2023. Despite slight differences in table naming, they yield the same result.",both
Which products are frequently bought together based on order history?,"SELECT o1.ProductID, o2.ProductID, COUNT(*) AS frequency FROM [Order Details] o1 JOIN [Order Details] o2 ON o1.OrderID = o2.OrderID AND o1.ProductID <> o2.ProductID GROUP BY o1.ProductID, o2.ProductID ORDER BY frequency DESC LIMIT 10","```sql
SELECT od1.ProductID AS Product1, od2.ProductID AS Product2, COUNT(*) AS Frequency
FROM [Order Details] od1
JOIN [Order Details] od2 ON od1.OrderID = od2.OrderID AND od1.ProductID <> od2.ProductID
GROUP BY od1.ProductID, od2.ProductID
ORDER BY Frequency DESC
```","The queries are almost identical, but the ground truth query includes a LIMIT clause to return only the top 10 results, while the generated query does not limit the output.","SELECT o1.ProductID AS Product1, o2.ProductID AS Product2 FROM [Order Details] o1 JOIN [Order Details] o2 ON o1.OrderID = o2.OrderID AND o1.ProductID <> o2.ProductID GROUP BY o1.ProductID, o2.ProductID ORDER BY COUNT(*) DESC;","The generated query lacks a frequency count and a LIMIT clause, while the ground truth query provides these to specify frequently bought together products and limits results to the top 10.",None
What is the average discount provided per order?,SELECT AVG(od.Discount) FROM [Order Details] od;,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details]
```","Both queries calculate the average discount from the 'Order Details' table, resulting in the same outcome.",SELECT AVG(od.Discount * od.UnitPrice * od.Quantity * od.OrderQty) AS AverageDiscount FROM [Order Details] od;,"The generated SQL query calculates the average of the total discount amount (Discount * UnitPrice * Quantity * OrderQty) over all order details, whereas the ground truth query calculates the average of just the Discount value per order detail. Therefore, they do not yield the same result.",Base
What is the average discount provided across all orders in 2022?,SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2022,"```sql
SELECT AVG([Order Details].Discount) AS average_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'
```","Both queries correctly calculate the average discount for orders in 2022. The generated query uses a date range check while the ground truth uses the YEAR function, but both are equivalent in this context.",SELECT AVG(od.Discount) as AverageDiscount FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31',Both queries calculate the average discount for the year 2022 by joining 'Order Details' and 'orders' tables on OrderID. The date filtration methods differ but are functionally equivalent.,both
What is the total number of orders each employee has managed?,"SELECT e.EmployeeID, COUNT(o.OrderID) AS TotalOrders FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;","```sql
SELECT e.EmployeeID, COUNT(o.OrderID) AS TotalOrders
FROM employees e
LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID;
```","The generated SQL query accurately answers the user's question. It counts the total number of orders managed by each employee using a LEFT JOIN between employees and orders tables, and groups the results by EmployeeID. The ground truth query is identical to the generated query, so they yield the same results.","SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;","The generated SQL query and the ground truth query will yield the same results. They both count the number of orders managed by each employee, grouped by EmployeeID. The only difference is the alias used for the count column, which does not affect the outcome.",both
How many customers exist in each country?,"SELECT Country, COUNT(CustomerID) AS CustomerCount FROM customers GROUP BY Country;","```sql
SELECT Country, COUNT(*) AS CustomerCount
FROM customers
GROUP BY Country;
```",Both queries produce the same result. COUNT(*) and COUNT(CustomerID) will yield the same count if CustomerID is non-null for all records in the 'customers' table.,"SELECT c.Country, COUNT(c.CustomerID) AS NumberOfCustomers FROM customers c GROUP BY c.Country;","Both queries select the same columns and apply the same COUNT aggregation and GROUP BY operation on the 'Country' field, yielding the same results.",both
How many distinct suppliers are there for products with no units on order?,SELECT COUNT(DISTINCT p.SupplierID) FROM products p WHERE p.UnitsOnOrder = 0;,"```sql
SELECT COUNT(DISTINCT SupplierID) AS DistinctSuppliers
FROM products
WHERE UnitsOnOrder = 0;
```",Both queries count distinct SupplierIDs from products where UnitsOnOrder is 0. They yield the same results.,SELECT COUNT(DISTINCT SupplierID) AS DistinctSuppliers FROM products WHERE UnitsOnOrder = 0;,"Both queries count distinct SupplierIDs from products where UnitsOnOrder is zero, yielding the same result.",both
What is the total sales amount generated by each employee?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName
```","Both queries calculate the total sales by summing the product of UnitPrice, Quantity, and Discount for each employee. The generated query includes first and last names but this does not affect the total sales calculation, thus yielding the same result.","SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","Both queries perform the same operations: they join the employees, orders, and Order Details tables to calculate the total sales for each employee using the same formula and GROUP BY clause. The table aliases and column naming are the only differences, which do not affect the results.",both
What is the average delivery time for orders shipped after the required date?,"SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageDelay FROM orders WHERE ShippedDate > RequiredDate;","```sql
SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageDeliveryTime
FROM orders
WHERE orders.ShippedDate > orders.RequiredDate;
```",Both queries calculate the average difference between ShippedDate and OrderDate for orders shipped after the RequiredDate.,"SELECT AVG(DATEDIFF(orders.ShippedDate, orders.RequiredDate)) AS AverageLateDelivery FROM orders WHERE orders.ShippedDate > orders.RequiredDate;","The generated query calculates the average number of days between ShippedDate and RequiredDate, whereas the ground truth calculates the average delay between ShippedDate and OrderDate when ShippedDate is greater than RequiredDate.",Base
What is the total number of units on order for each product category?,"SELECT CategoryID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY CategoryID;","```sql
SELECT p.CategoryID, SUM(p.UnitsOnOrder) AS TotalUnitsOnOrder
FROM products p
GROUP BY p.CategoryID;
```","Both queries group by CategoryID and sum the UnitsOnOrder for each category, producing the same result.","SELECT c.CategoryID, SUM(p.UnitsOnOrder) AS TotalUnitsOnOrder FROM categories c JOIN products p ON c.CategoryID = p.CategoryID GROUP BY c.CategoryID;","Both queries calculate the total units on order for each product category. The JOIN with the categories table in the generated query doesn't affect the result since it's only used to establish the connection between categories and products, which is already accounted for in the products table with CategoryID.",both
Find the distribution of employee sales across different regions.,"SELECT e.EmployeeID, o.ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, o.ShipRegion;","```sql
SELECT e.Region, SUM od.UnitPrice * od.Quantity * (1 - od.Discount) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.Region;
```","The generated query groups by 'Region' from the 'employees' table, while the ground truth query groups by 'ShipRegion' from the 'orders' table and 'EmployeeID'. They categorize regions differently.","SELECT e.EmployeeID, r.RegionDescription, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN customers c ON o.CustomerID = c.CustomerID JOIN employeeTerritories et ON e.EmployeeID = et.EmployeeID JOIN territories t ON et.TerritoryID = t.TerritoryID JOIN region r ON t.RegionID = r.RegionID GROUP BY e.EmployeeID, r.RegionDescription;","The generated SQL uses RegionDescription from the 'region' table, whereas the ground truth SQL uses ShipRegion from the 'orders' table. These are likely different fields, affecting the way regions are represented.",None
How is the order frequency distributed over the months of the year?,"SELECT EXTRACT(MONTH FROM OrderDate) AS OrderMonth, COUNT(OrderID) AS OrderFrequency FROM orders GROUP BY OrderMonth;","```sql
SELECT 
    EXTRACT(MONTH FROM o.OrderDate) AS Month,
    COUNT(o.OrderID) AS OrderFrequency
FROM 
    orders o
GROUP BY 
    EXTRACT(MONTH FROM o.OrderDate)
ORDER BY 
    Month;
```","Both queries extract the month from the OrderDate, count the OrderID per month, and group by month. The generated query also includes an ORDER BY clause, which does not affect the result values but orders the output by month.","SELECT MONTH(OrderDate) AS Month, COUNT(OrderID) AS OrderFrequency FROM orders GROUP BY MONTH(OrderDate);","Both queries group by month and count the orders, yielding the same result.",both
What are the top five cities with the highest sales revenue?,"SELECT ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CitySales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCity ORDER BY CitySales DESC LIMIT 5;","```sql
SELECT o.ShipCity, 
       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY o.ShipCity
ORDER BY TotalSales DESC
LIMIT 5;
```",Both queries calculate the total sales per city and return the top five cities with the highest sales in descending order. The differences in alias names for the sum column do not affect the result.,"SELECT c.City, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.City ORDER BY TotalSales DESC LIMIT 5;","The generated query groups by c.City, while the ground truth groups by ShipCity. They may represent different cities, depending on the dataset.",Base
What is the average discount applied to orders per supplier?,"SELECT suppliers.SupplierID, suppliers.SupplierName, AVG([Order Details].Discount) AS AverageDiscount FROM suppliers INNER JOIN products ON suppliers.SupplierID = products.SupplierID INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID, suppliers.SupplierName;","```sql
SELECT p.SupplierID, AVG(od.Discount) AS AverageDiscount
FROM [Order Details] od
JOIN products p ON od.ProductID = p.ProductID
GROUP BY p.SupplierID;
```","The generated query does not include the SupplierName, which is present in the ground truth query. This could lead to different schema expectations for both results.","SELECT s.SupplierID, AVG(od.Discount) AS AverageDiscount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;","The generated SQL query does not include the SupplierName in the SELECT statement, whereas the ground truth query does. This means the results will be different.",None
Which categories have the most products at reorder level?,"SELECT CategoryID, COUNT(ProductID) AS Count FROM products WHERE UnitsInStock <= ReorderLevel GROUP BY CategoryID;","```sql
SELECT CategoryID, COUNT(ProductID) AS ProductCount
FROM products
WHERE UnitsInStock <= ReorderLevel
GROUP BY CategoryID
ORDER BY ProductCount DESC;
```","The generated SQL query includes an ORDER BY clause to get categories with the most products at reorder level, which is aligned with the user's question, while the ground truth query does not include this and thus cannot accurately fulfill the request.","SELECT CategoryID, COUNT(ProductID) AS ProductsAtReorderLevel FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0 GROUP BY CategoryID;","The generated query excludes discontinued products, while the ground truth includes all products regardless of their discontinued status.",None
How many products are discontinued?,SELECT COUNT(*) FROM products WHERE Discontinued = 1;,"```sql
SELECT COUNT(*) AS DiscontinuedProductsCount
FROM products
WHERE Discontinued = 1;
```","Both queries accurately count the number of discontinued products by applying the same condition to the 'products' table, and their results will match.",SELECT COUNT(*) AS DiscontinuedCount FROM products WHERE Discontinued = 1;,"Both queries count the number of discontinued products from the 'products' table where 'Discontinued = 1', yielding the same result.",both
What is the total value of inventory currently in stock?,SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;,"```sql
SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue
FROM products
WHERE Discontinued = 0;
```","The generated query excludes discontinued products, while the ground truth includes all products.",SELECT SUM(UnitPrice * UnitStock * (1 - Discontinued)) AS TotalInventoryValue FROM products;,"The generated query includes a condition for 'Discontinued' which may exclude discontinued products from inventory calculation, differing from the ground truth query.",None
Identify the peak sales months for the entire team.,"SELECT YEAR(o.OrderDate) AS Year, MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Year, Month ORDER BY TotalSales DESC;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS SalesMonth, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    SalesMonth
ORDER BY 
    TotalSales DESC
LIMIT 1;
```","Both queries calculate total sales per month and sort in descending order to identify peak sales, though they present month data differently.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY Month ORDER BY TotalSales DESC LIMIT 1;","The generated query limits the result to just one month with the highest sales, whereas the ground truth query lists sales for all months in descending order.",Base
Which products have a unit price lower than their category's average unit price?,SELECT ProductName FROM products WHERE UnitPrice < (SELECT AVG(UnitPrice) FROM products p2 WHERE p2.CategoryID = products.CategoryID);,"```sql
SELECT p.ProductID, p.ProductName, p.UnitPrice, c.AvgUnitPrice
FROM products p
JOIN (
    SELECT CategoryID, AVG(UnitPrice) AS AvgUnitPrice
    FROM products
    GROUP BY CategoryID
) c ON p.CategoryID = c.CategoryID
WHERE p.UnitPrice < c.AvgUnitPrice;
```","Both queries aim to find products with a unit price lower than their category's average unit price. The generated query uses a join and the ground truth query uses a subquery, but both achieve the same result.","SELECT products.ProductName FROM products JOIN (SELECT CategoryID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY CategoryID) AS categoryAvgs ON products.CategoryID = categoryAvgs.CategoryID WHERE products.UnitPrice < categoryAvgs.AvgUnitPrice;",Both queries accurately find products with a unit price lower than the average unit price of their category by comparing each product's price to the average price of its category.,both
Which products have never been sold?,"SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);","```sql
SELECT p.ProductID, p.ProductName 
FROM products p 
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID 
WHERE od.ProductID IS NULL;
```",Both queries effectively identify products that have never been sold by checking for ProductIDs that are absent in the 'Order Details' table.,SELECT ProductName FROM products p WHERE NOT EXISTS (SELECT 1 FROM [Order Details] od WHERE p.ProductID = od.ProductID);,The generated query does not select the 'ProductID' which is part of the ground truth query's output.,Base
What is the total sales by country?,"SELECT o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry;","```sql
SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY ShipCountry
```","Both queries calculate the total sales per country by joining the 'orders' table with the '[Order Details]' table and summing the product of UnitPrice, Quantity, and (1 - Discount), grouping by ShipCountry. The minor differences in aliasing do not affect the result.","SELECT c.Country, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Country;","The generated query calculates total sales by customer's country, while the ground truth query calculates total sales by order's ship country.",Base
How frequently is each product ordered?,"SELECT ProductID, COUNT(OrderID) AS OrderFrequency FROM [Order Details] GROUP BY ProductID;","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    COUNT(od.OrderID) AS OrderFrequency
FROM 
    products p
LEFT JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.ProductName
ORDER BY 
    OrderFrequency DESC;
```","Both queries aim to count the frequency of each product being ordered, though the generated query includes the ProductName, which does not affect the frequency count.","SELECT ProductID, COUNT(OrderID) AS Frequency FROM [Order Details] GROUP BY ProductID;","Both queries calculate the frequency of orders for each product by counting OrderID from the [Order Details] table and grouping by ProductID. The difference is only in the alias name used for the count result, which does not affect the accuracy of the answer.",both
What is the average shipping time for each shipping method?,"SELECT o.ShipVia, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingTime FROM orders o GROUP BY o.ShipVia;","```sql
SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime
FROM orders
WHERE ShippedDate IS NOT NULL
GROUP BY ShipVia;
```","The generated SQL query accurately answers the user's question and yields the same results as the ground truth query. Both queries calculate the average shipping time for each shipping method by grouping by 'ShipVia' and using 'DATEDIFF' between 'ShippedDate' and 'OrderDate'. The generated query also correctly includes a condition to exclude rows with NULL 'ShippedDate', which is implied in the ground truth.","SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM orders GROUP BY ShipVia;","Both queries calculate the average shipping time per shipping method using the same logic, achieving the same result.",both
What is the top performing region in terms of sales revenue?,"SELECT ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipRegion ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY ShipRegion
ORDER BY TotalSales DESC
LIMIT 1;
```","The generated SQL query matches the ground truth query logically. Both queries calculate total sales per region and order by descending total sales to identify the top performing region, with no syntactical differences that affect the result.","SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion ORDER BY TotalRevenue DESC LIMIT 1;",Both queries calculate total sales revenue per region and return the top-performing region.,both
Which product has the highest number of units in stock?,"SELECT ProductID, ProductName FROM products WHERE UnitsInStock = (SELECT MAX(UnitsInStock) FROM products)","```sql
SELECT ProductName, UnitsInStock 
FROM products 
ORDER BY UnitsInStock DESC 
LIMIT 1;
```","Both queries correctly identify the product with the highest number of units in stock. The Generated Query selects the first product when ordered by descending stock, while the Ground Truth Query uses a subquery to find the maximum stock value.",SELECT ProductName FROM products ORDER BY UnitsInStock DESC LIMIT 1;,"Both queries effectively return the product(s) with the highest number of units in stock. The generated query sorts products by UnitsInStock in descending order and retrieves the top one, while the ground truth query uses a subquery to find the maximum UnitsInStock and returns products with that value. Both yield the correct result.",both
Which employee handles orders with the maximum average freight cost?,"SELECT e.EmployeeID, AVG(o.Freight) AS AvgFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY AvgFreight DESC LIMIT 1;","```sql
SELECT EmployeeID, AVG(Freight) AS AvgFreight
FROM orders
GROUP BY EmployeeID
ORDER BY AvgFreight DESC
LIMIT 1;
```","Both queries calculate the average freight cost per employee and order results by highest average freight, returning the top result.","SELECT e.EmployeeID, AVG(o.Freight) AS MaxAvgFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY MaxAvgFreight DESC LIMIT 1;","Both queries follow the same logic: calculating and ordering by average freight per employee, returning the employee with the highest average freight.",both
What is the total revenue for each category?,"SELECT CategoryID, SUM(products.UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID;","```sql
SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.CategoryID;
```","The generated SQL query does not account for discounts, while the ground truth query includes a discount in the revenue calculation.","SELECT c.CategoryName, SUM(od.Quantity * od.UnitPrice) as TotalRevenue FROM products p JOIN categories c ON p.CategoryID = c.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryName","The generated query does not account for any discounts that might be applied in the 'Order Details'. It calculates revenue without considering the discount, while the ground truth query includes discounts.",None
What is the total revenue generated from each product?,"SELECT ProductName, SUM(Quantity * UnitPrice * (1 - Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName;","```sql
SELECT 
    products.ProductID,
    products.ProductName,
    SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue
FROM 
    products
JOIN 
    [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY 
    products.ProductID, products.ProductName;
```","The generated query does not account for the 'Discount' factor in the 'Order Details' table, while the ground truth query does.","SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;","The generated SQL query does not account for the 'Discount' field in the calculation of total revenue, whereas the ground truth query does.",None
Which products have the highest sales quantity in the last quarter?,"SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-12-31' GROUP BY products.ProductName ORDER BY total_quantity DESC","```sql
SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30'
GROUP BY products.ProductID
ORDER BY total_quantity DESC
```","The generated query uses the date range '2023-07-01' to '2023-09-30', which is for Q3, while the ground truth query uses '2023-10-01' to '2023-12-31', intended for Q4. Also, the generated query includes product ID, while the ground truth uses product name.","SELECT p.ProductName, SUM(od.Quantity) AS SalesQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE QUARTER(o.OrderDate) = QUARTER(CURRENT_DATE - INTERVAL 1 QUARTER) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 QUARTER) GROUP BY p.ProductName ORDER BY SalesQuantity DESC;","The generated query uses QUARTER and CURRENT_DATE to calculate the last quarter dynamically, while the ground truth query uses a hard-coded date range. This can lead to different results if the current year or quarter changes.",None
What is the total revenue for products that are not discontinued?,SELECT SUM(od.Quantity * od.UnitPrice) FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 0;,"```sql
SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
WHERE products.Discontinued = 0;
```","Both queries calculate the total revenue from order details for products that are not discontinued. They use similar logic and join the 'products' and 'Order Details' tables on 'ProductID', filtering with 'Discontinued = 0'.",SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 0;,"The generated query accounts for discounts, while the ground truth query does not.",Base
How many orders were not shipped by the required date each month?,"SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) AS LateOrders FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    COUNT(OrderID) AS UnshippedOrders
FROM 
    orders
WHERE 
    ShippedDate > RequiredDate
GROUP BY 
    Month
```","Both queries group the orders by month and count the number of orders where ShippedDate is greater than RequiredDate, thus accurately answering the user's question.","SELECT DATE_FORMAT(RequiredDate, '%Y-%m') AS Month, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY DATE_FORMAT(RequiredDate, '%Y-%m');","The generated query groups by the month of RequiredDate, whereas the ground truth query uses the month of OrderDate. This can yield different results.",Base
What is the total number of products sold this quarter?,"SELECT SUM([Order Details].Quantity) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE);","```sql
SELECT SUM([Order Details].Quantity) AS Total_Products_Sold
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE orders.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE)
AND orders.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) + INTERVAL '3 months';
```","The generated query uses a boundary for the quarter that includes a time period of 3 months after the start of the current quarter, which might overlap with the next quarter. The ground truth query only checks if the OrderDate is greater than or equal to the start of the current quarter, automatically including the full current quarter.",SELECT SUM(od.Quantity) FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE QUARTER(o.OrderDate) = QUARTER(CURRENT_DATE - INTERVAL 3 MONTH) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 3 MONTH);,"The generated query calculates the total for the previous quarter, whereas the ground truth query calculates the total for the current quarter.",None
Find products with zero units on order but high demand.,"SELECT ProductName, UnitsOnOrder FROM products WHERE UnitsOnOrder = 0 AND UnitsInStock > 0 ORDER BY UnitsInStock DESC;","```sql
SELECT p.ProductID, p.ProductName, p.UnitsInStock, SUM(od.Quantity) AS TotalDemand
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE p.UnitsOnOrder = 0
GROUP BY p.ProductID, p.ProductName, p.UnitsInStock
HAVING SUM(od.Quantity) > 0
ORDER BY TotalDemand DESC;
```",The generated query sums quantities from order details but does not check if the product has no units on order and high demand as the ground truth query does. The conditions and result structure differ significantly between the queries.,SELECT ProductName FROM products WHERE UnitsOnOrder = 0 AND UnitsSold > 100;,"The generated SQL query checks for UnitsOnOrder = 0 and UnitsSold > 100, which measures units sold, not high demand. The ground truth checks UnitsOnOrder = 0 and if there are still UnitsInStock, sorted by stock count.",None
Which suppliers have the shortest average lead time for deliveries?,"SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC","```sql
SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_lead_time 
FROM orders 
JOIN products ON orders.OrderID = products.ProductID 
GROUP BY products.SupplierID 
ORDER BY average_lead_time ASC;
```",The generated query joins orders with products incorrectly and does not involve the suppliers table. The ground truth query correctly joins the necessary tables to link suppliers to their average lead times.,"SELECT s.SupplierName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID GROUP BY s.SupplierID, s.SupplierName ORDER BY AverageLeadTime ASC;",Both queries aggregate the average lead time (difference between ShippedDate and OrderDate) for each supplier and order the results in ascending order. The queries differ in structure but perform the same operations and should yield the same results.,FT
What is the total number of products ordered by country?,"SELECT o.ShipCountry, SUM(od.Quantity) AS TotalProductsOrdered FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry;","```sql
SELECT o.ShipCountry, SUM(od.Quantity) AS TotalProductsOrdered
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY o.ShipCountry;
```","Both the generated and ground truth SQL queries are identical in their logic and will yield the same results, which is the total number of products ordered by each country.","SELECT c.Country, SUM(od.Quantity) AS TotalOrderedProducts FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Country;","The generated query aggregates by 'Country' from the 'customers' table, which may differ from 'ShipCountry' used in the ground truth query.",Base
Calculate the total revenue generated by orders shipped after the required date.,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.ShippedDate > orders.RequiredDate;,"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE orders.ShippedDate > orders.RequiredDate;
```",Both queries calculate the total revenue for orders where the shipped date is after the required date. The logic and computations are identical.,SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.ShippedDate > o.RequiredDate;,"Both queries calculate the total revenue from orders where the shipped date is later than the required date, using the same formula and conditions.",both
Identify the product categories with the highest inventory turnover ratio.,"SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY inventory_turnover DESC","```sql
SELECT categories.CategoryID, categories.CategoryName, 
       SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio 
FROM [Order Details] 
JOIN products ON [Order Details].ProductID = products.ProductID 
JOIN categories ON products.CategoryID = categories.CategoryID 
GROUP BY categories.CategoryID, categories.CategoryName 
ORDER BY inventory_turnover_ratio DESC
```",Both queries calculate the inventory turnover ratio for product categories and sort by it. The difference in including CategoryID does not affect the final output related to inventory turnover ranking.,"SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID ORDER BY inventory_turnover_ratio DESC;","The generated SQL groups by categories.CategoryID, while the ground truth groups by categories.CategoryName, which may lead to different grouping results.",Base
Which suppliers have the best lead time performance over the past 6 months?,"SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY suppliers.SupplierID","```sql
SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_lead_time
FROM orders
JOIN products ON orders.OrderID = products.ProductID
WHERE orders.OrderDate >= DATEADD(MONTH, -6, GETDATE())
GROUP BY products.SupplierID
ORDER BY average_lead_time ASC;
```","The generated query incorrectly joins orders with products directly using orders.OrderID and products.ProductID, instead of going through the [Order Details] table. It also uses DATEADD and GETDATE which may not be compatible with SQL ANSI standards.","SELECT s.SupplierID, s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID WHERE o.ShippedDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 6 MONTH) AND CURDATE() GROUP BY s.SupplierID, s.CompanyName ORDER BY AverageLeadTime ASC;","The generated query filters by ShippedDate while the ground truth filters by OrderDate. Additionally, the generated query includes the CompanyName in the SELECT and GROUP BY clauses, which is not present in the ground truth query.",None
Calculate the average unit price of all products per supplier.,"SELECT s.CompanyName, AVG(p.UnitPrice) AS AvgUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName;","```sql
SELECT suppliers.SupplierID, suppliers.CompanyName, AVG(products.UnitPrice) AS AverageUnitPrice
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
GROUP BY suppliers.SupplierID, suppliers.CompanyName;
```",Both queries calculate the average unit price of all products per supplier and group by supplier name. They would yield the same results.,"SELECT s.SupplierID, AVG(p.UnitPrice) AS AvgUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;","Both queries calculate the average unit price of products per supplier. The difference in the selected fields (SupplierID vs. CompanyName) does not affect the average calculation, assuming each SupplierID corresponds to a unique CompanyName.",both
How much revenue did each employee generate after discounts?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM od.UnitPrice * od.Quantity * (1 - od.Discount) AS TotalRevenue
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","Both queries calculate the total revenue generated by each employee after discounts. The generated query includes additional columns for the employee's first and last name, but this does not impact the calculation of total revenue.","SELECT employees.EmployeeID, SUM((OrderDetails.UnitPrice * OrderDetails.Quantity * (1 - OrderDetails.Discount))) AS TotalRevenueAfterDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN OrderDetails ON [Order Details].ProductID = OrderDetails.ProductID GROUP BY employees.EmployeeID;","The generated query includes an unnecessary join with OrderDetails which is not needed, assuming it refers to the same table as [Order Details], potentially leading to incorrect results. The ground truth query correctly computes revenue from discounts without additional joins.",Base
List suppliers with more than three discontinued products.,SELECT SupplierID FROM products WHERE Discontinued = 1 GROUP BY SupplierID HAVING COUNT(*) > 3;,"```sql
SELECT p.SupplierID
FROM products p
WHERE p.Discontinued = 1
GROUP BY p.SupplierID
HAVING COUNT(p.ProductID) > 3;
```","Both queries group by SupplierID, filter for discontinued products, and check if the count of products is greater than three. The use of COUNT(p.ProductID) versus COUNT(*) does not affect the result in this context.","SELECT suppliers.supplier_id, suppliers.CompanyName, COUNT(*) AS discontinued_count FROM suppliers JOIN products ON suppliers.supplier_id = products.SupplierID WHERE products.Discontinued = 1 GROUP BY suppliers.supplier_id HAVING COUNT(*) > 3;","The generated SQL query returns supplier_id, CompanyName, and a count, while the ground truth SQL query returns only supplier_id. Additionally, the generated query involves a join with the suppliers table, which is not in the ground truth.",Base
What is the average order fulfillment time (in days) per month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
    AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM 
    orders
GROUP BY 
    Month
```",Both queries compute the average order fulfillment time per month using the same logic. They differ in the `GROUP BY` clause but yield the same result because both group by the formatted `OrderDate`.,"SELECT FORMAT(OrderDate, 'yyyy-MM') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY FORMAT(OrderDate, 'yyyy-MM');","The generated SQL query uses FORMAT, which is not standard across all SQL dialects and may lead to differences. The ground truth uses DATE_FORMAT which is specific to MySQL. Both queries may produce the same result in an environment where formats are supported similarly, but they rely on different functions.",Base
What is the net profit margin for each product type?,"SELECT ProductID, ProductName, (SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) - SUM([Order Details].Quantity * products.UnitPrice)) / NULLIF(SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)), 0) AS NetProfitMargin FROM [Order Details] INNER JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductID, ProductName;","```sql
SELECT 
    p.CategoryID,
    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue,
    SUM(od.Quantity * (p.UnitPrice * (1 - od.Discount))) - SUM(p.UnitPrice * od.Quantity) AS TotalCost,
    CASE 
        WHEN SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) = 0 THEN 0
        ELSE (SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) - SUM(p.UnitPrice * od.Quantity)) / SUM(od.Quantity * od.UnitPrice * (1 - od.Discount))
    END AS NetProfitMargin
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.CategoryID;
```","The generated query calculates net profit margin by CategoryID, while the ground truth query does so by ProductID and ProductName. The grouping levels differ.","SELECT products.ProductID, (SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) - SUM(products.UnitsInStock * products.UnitPrice)) / SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS NetProfitMargin FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;","The generated query calculates net profit margin using Products.UnitsInStock in the cost calculation, which is incorrect. The ground truth uses Order Details.Quantity and includes ProductName in the grouping.",None
Identify employees whose average order size is the largest.,"SELECT employees.EmployeeID, AVG([Order Details].Quantity) AS AvgOrderSize FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY AvgOrderSize DESC LIMIT 1","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS AverageOrderSize
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
ORDER BY AverageOrderSize DESC
LIMIT 1;
```","The generated SQL query calculates the average order size based on total price and quantity, while the ground truth query calculates the average based only on quantity.","SELECT e.EmployeeID, AVG(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS AverageOrderSize FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AverageOrderSize DESC LIMIT 1;","The generated SQL calculates the average order size by considering the total price including discounts, while the ground truth query calculates it based solely on quantity.",None
How many orders were placed by each customer last quarter?,"SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY CustomerID;","```sql
SELECT CustomerID, COUNT(OrderID) AS OrderCount
FROM orders
WHERE OrderDate >= DATEADD(QUARTER, -1, GETDATE())
GROUP BY CustomerID;
```","The generated query uses DATEADD with GETDATE(), calculating from the current date, which may not reflect the exact start of the last quarter. The ground truth query uses DATE_SUB with CURDATE(), possibly intending to reflect three months backward, which is not equivalent to 'last quarter'; it requires explicit calculation from quarter boundaries.","SELECT o.CustomerID, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE o.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND CURRENT_DATE GROUP BY o.CustomerID;","The generated query considers orders until the current date, while the ground truth query only considers orders from exactly three months ago.",None
Which employee handles the most orders that require urgent shipping?,"SELECT employees.EmployeeID, COUNT(orders.OrderID) AS UrgentOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.RequiredDate < DATEADD(DAY, 2, orders.OrderDate) GROUP BY employees.EmployeeID ORDER BY UrgentOrders DESC","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS UrgentOrderCount
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.RequiredDate <= o.OrderDate + INTERVAL '1' DAY
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY UrgentOrderCount DESC
LIMIT 1;
```","Both queries aim to find the employee handling the most urgent orders and use similar logic to define urgency and aggregate counts, though one uses INTERVAL and the other uses DATEADD, yielding similar results.","SELECT e.EmployeeID, COUNT(o.OrderID) AS UrgentOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate - o.RequiredDate = 1 GROUP BY e.EmployeeID ORDER BY UrgentOrders DESC LIMIT 1;","The generated query considers orders handled within one day of the required date, while the ground truth query checks orders requiring shipping within two days of the order date. The conditions differ, leading to potentially different results.",Base
What is the average supplier lead time in May 2023?,"SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY products.SupplierID","```sql
SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time 
FROM orders 
JOIN products ON orders.OrderID = products.ProductID 
WHERE orders.OrderDate BETWEEN '2023-05-01' AND '2023-05-31' 
GROUP BY products.SupplierID
```","The generated query incorrectly joins orders with products using OrderID and ProductID, which are unrelated keys. It also lacks the join with [Order Details] necessary for correct product mapping.","SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE MONTH(orders.OrderDate) = 5 AND YEAR(orders.OrderDate) = 2023;","The generated SQL calculates an average lead time for all suppliers combined, whereas the ground truth query calculates the average lead time per supplier, grouping by SupplierID.",None
What is the impact of different shipping methods on lead time across orders?,"SELECT o.ShipVia, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM orders o GROUP BY o.ShipVia ORDER BY AvgLeadTime;","```sql
SELECT o.ShipVia, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime
FROM orders o
GROUP BY o.ShipVia;
```","Both queries calculate the average lead time grouped by shipping method. The generated query omits the ORDER BY clause, which does not affect the correctness of the results themselves, just their order.","SELECT o.ShipVia, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM orders o GROUP BY o.ShipVia;","Both queries calculate the average lead time grouped by shipping method. The only difference is the inclusion of an ORDER BY clause in the ground truth query, which does not affect the validity of the result in terms of addressing the user's question.",both
How many orders were placed in the year 2023?,SELECT COUNT(*) FROM orders WHERE YEAR(OrderDate) = 2023;,"```sql
SELECT COUNT(*) AS TotalOrders
FROM orders
WHERE YEAR(OrderDate) = 2023;
```",Both queries compute the count of orders placed in the year 2023 by using the YEAR function on OrderDate and filtering for 2023. The difference in naming the output column does not affect the result.,SELECT COUNT(OrderID) AS total_orders_2023 FROM orders WHERE YEAR(OrderDate) = 2023;,Both queries count the number of orders placed in 2023. The difference in selecting COUNT(OrderID) vs. COUNT(*) does not affect the result if OrderID is non-null for all entries.,both
How many orders were shipped using each shipping method last quarter?,"SELECT ShipVia, COUNT(orders.OrderID) AS number_of_orders FROM orders WHERE QUARTER(orders.OrderDate) = QUARTER(CURDATE() - INTERVAL 3 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURDATE() - INTERVAL 3 MONTH) GROUP BY ShipVia","```sql
SELECT ShipVia, COUNT(OrderID) AS total_orders
FROM orders
WHERE ShippedDate BETWEEN '2023-07-01' AND '2023-09-30'
GROUP BY ShipVia
```","The generated query filters based on ShippedDate, while the ground truth query uses OrderDate for the last quarter. They may yield different results if orders were shipped in a different quarter than they were placed.","SELECT ShipVia, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE ShippedDate BETWEEN '2023-07-01' AND '2023-09-30' GROUP BY ShipVia;","The generated query filters by ShippedDate instead of OrderDate, and uses a fixed date range, which may not align with the correct definition of 'last quarter' dynamically calculated by the ground truth query.",None
What is the total revenue from orders with a discount greater than 10%?,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] WHERE [Order Details].Discount > 0.1;,"```sql
SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM [Order Details] od
JOIN orders o ON od.OrderID = o.OrderID
WHERE od.Discount > 0.10;
```","Both queries calculate the total revenue from the 'Order Details' table where the discount is greater than 10%, and they produce the same result.",SELECT SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalRevenue FROM [Order Details] WHERE Discount > 0.10;,"Both queries calculate the total revenue from orders with a discount greater than 10% using the same logic and conditions. The difference is only in the notation style, which does not affect the outcome.",both
Which employee has the best performance in terms of sales per month?,"SELECT employees.EmployeeID, AVG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) OVER (PARTITION BY EXTRACT(YEAR FROM orders.OrderDate), EXTRACT(MONTH FROM orders.OrderDate), employees.EmployeeID) AS AvgMonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY TotalSales DESC
LIMIT 1;
```","The generated query retrieves the total sales per employee and picks the highest, while the ground truth averages sales per employee per month and finds the best performer. They measure different metrics.","SELECT employees.EmployeeID, YEAR(orders.OrderDate) AS Year, MONTH(orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales_per_month FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID, YEAR(orders.OrderDate), MONTH(orders.OrderDate) ORDER BY sales_per_month DESC LIMIT 1;","The generated query calculates total sales per month and gets the top 1, while the ground truth query calculates average monthly sales per employee and doesn't restrict to top performance.",None
Identify suppliers who provide more than 10 different discontinued products.,SELECT SupplierID FROM products WHERE Discontinued = 1 GROUP BY SupplierID HAVING COUNT(DISTINCT ProductID) > 10;,"```sql
SELECT p.SupplierID
FROM products p
WHERE p.Discontinued = 1
GROUP BY p.SupplierID
HAVING COUNT(DISTINCT p.ProductID) > 10;
```",The generated query correctly identifies suppliers who provide more than 10 different discontinued products by grouping the products based on SupplierID and using a HAVING clause to count distinct ProductID where Discontinued equals 1. The logic matches the ground truth query.,SELECT s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1 GROUP BY s.CompanyName HAVING COUNT(DISTINCT p.ProductID) > 10;,"Both queries effectively identify suppliers who provide more than 10 different discontinued products, although the generated query selects CompanyName while the ground truth selects SupplierID.",both
What is the total freight cost for each country?,"SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;","```sql
SELECT ShipCountry, SUM(Freight) AS TotalFreight
FROM orders
GROUP BY ShipCountry;
```","Both queries calculate the sum of freight for each country and only differ in the alias name for the sum, which does not affect the results.","SELECT Customer.Country, SUM(orders.Freight) AS TotalFreight FROM Customer JOIN orders ON Customer.CustomerID = orders.CustomerID GROUP BY Customer.Country;","The generated SQL groups by Customer.Country, whereas the ground truth groups by ShipCountry, which could yield different results if these columns differ in any way.",Base
What is the inventory turnover ratio for February 2023?,SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28',"```sql
SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio 
FROM [Order Details] 
JOIN products ON [Order Details].ProductID = products.ProductID 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28'
```",The generated SQL query matches the ground truth query exactly. Both queries calculate the inventory turnover ratio for February 2023 using the same logic and date range.,SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM OrderDetails od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = 2023 AND EXTRACT(MONTH FROM o.OrderDate) = 2;,"Both queries calculate the inventory turnover ratio using the same logic: summing the product of quantity and unit price and dividing by the average units in stock. The date filters (EXTRACT vs. BETWEEN) effectively cover February 2023, leading to equivalent results.",both
Find the order with the maximum freight cost.,"SELECT OrderID, Freight FROM orders ORDER BY Freight DESC LIMIT 1;","```sql
SELECT TOP 1 * FROM orders ORDER BY Freight DESC;
```","The generated query uses 'TOP 1', which is SQL Server syntax, while the ground truth query uses 'LIMIT 1', indicating a different DBMS. They function similarly but are not identical for the ANSI standard.",SELECT OrderID FROM orders ORDER BY Freight DESC LIMIT 1;,"'Generated SQL Query' only selects OrderID, but 'Ground Truth SQL Query' also includes Freight, which means they do not yield the same results.",None
What is the average order value for each month in 2022?,"SELECT MONTH(orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2022 GROUP BY MONTH(orders.OrderDate)","```sql
SELECT MONTH(orders.OrderDate) AS order_month, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' 
GROUP BY MONTH(orders.OrderDate)
```","Both queries calculate the average order value for each month in 2022 by summing the order values and dividing by the distinct count of orders per month. The date range in the Generated Query ('2022-01-01' to '2022-12-31') is equivalent to checking if the year is 2022 as done in the Ground Truth Query, so both yield the same result.","SELECT EXTRACT(MONTH FROM orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE EXTRACT(YEAR FROM orders.OrderDate) = 2022 GROUP BY month","Both queries calculate the average order value per month for the year 2022 by extracting the month from the order date and dividing the total order value by the number of distinct orders per month. They use different functions to extract the month, but they yield the same result.",both
What is the average quantity ordered per order for the top product?,SELECT AVG(OD.Quantity) FROM [Order Details] OD JOIN (SELECT ProductID FROM [Order Details] GROUP BY ProductID ORDER BY SUM(UnitPrice * Quantity * (1 - Discount)) DESC LIMIT 1) AS TopProduct ON OD.ProductID = TopProduct.ProductID;,"```sql
SELECT AVG(OrderDetails.Quantity) AS AverageQuantity
FROM [Order Details] AS OrderDetails
WHERE OrderDetails.ProductID = (
    SELECT TOP 1 OrderDetails.ProductID
    FROM [Order Details] AS OrderDetails
    GROUP BY OrderDetails.ProductID
    ORDER BY SUM(OrderDetails.Quantity) DESC
);
```","The generated query finds the top product by total quantity ordered, whereas the ground truth query finds it by total sales value.","SELECT p.ProductName, AVG(od.Quantity) AS AverageQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SUM(od.Quantity) DESC LIMIT 1;","The generated query finds the average quantity for the product with the highest total quantity, while the ground truth finds it for the product with the highest total sales revenue.",None
What is the total number of units in stock for each product category?,"SELECT CategoryID, SUM(UnitsInStock) AS TotalUnitsInStock FROM products GROUP BY CategoryID;","```sql
SELECT p.CategoryID, SUM(p.UnitsInStock) AS TotalUnitsInStock
FROM products p
GROUP BY p.CategoryID;
```","Both queries calculate the total number of units in stock for each product category. They use the same logic and fields, differing only in table aliasing, which does not affect the outcome.","SELECT products.CategoryID, SUM(products.UnitsInStock) AS TotalUnitsInStock FROM products GROUP BY products.CategoryID;",Both queries calculate the total units in stock for each product category by summing UnitsInStock and grouping by CategoryID. They will yield the same results.,both
What is the average lead time for each supplier over the past month?,"SELECT s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY s.SupplierID, s.CompanyName;","```sql
SELECT 
    suppliers.CompanyName, 
    AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime
FROM 
    suppliers
JOIN 
    products ON suppliers.SupplierID = products.SupplierID
JOIN 
    [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN 
    orders ON [Order Details].OrderID = orders.OrderID
WHERE 
    orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)
GROUP BY 
    suppliers.SupplierID;
```","Both queries calculate the average lead time for each supplier using the same logic and joins. Differences in syntax, such as table aliases and additional columns in GROUP BY, do not affect the result.","SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY suppliers.CompanyName;","The generated query groups by CompanyName, while the ground truth query includes SupplierID in the GROUP BY clause.",Base
What is the trend of total sales over the past five years?,"SELECT DATE_TRUNC('year', OrderDate) AS Year, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_TRUNC('year', OrderDate) ORDER BY Year;","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM 
    orders 
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE 
    orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 5 YEAR)
GROUP BY 
    Month
ORDER BY 
    Month;
```","The generated query groups by month and uses DATE_FORMAT, while the ground truth query groups by year using DATE_TRUNC.","SELECT YEAR(OrderDate) AS Year, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY YEAR(OrderDate) ORDER BY Year DESC;","The discrepancy arises from the date truncation function and handling of years. The generated query uses YEAR(OrderDate) for grouping which is acceptable in some SQL dialects but not ANSI SQL, whereas the ground truth uses DATE_TRUNC('year', OrderDate), which is a PostgreSQL function. Both yield different SQL syntax, potentially leading to differences if executed in an ANSI-compliant environment.",None
What is the average time between the order date and the shipping date for each shipping method?,"SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgTime FROM orders GROUP BY ShipVia ORDER BY AvgTime;","```sql
SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY ShipVia;
```","Both queries calculate the average time between the order date and the shipping date for each shipping method. The difference is that the ground truth query includes an ORDER BY clause, which affects the result ordering, not the content.","SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM orders GROUP BY ShipVia;","Both queries calculate the average time difference between the order and shipping dates for each shipping method. The only difference is that the ground truth query orders the result by the average time, which does not affect the accuracy of the answer to the user's question.",both
What is the total freight cost per country?,"SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;","```sql
SELECT Country, SUM(Freight) AS TotalFreightCost
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
GROUP BY Country;
```","The generated query sums Freight by Country from the customers table, whereas the ground truth sums by ShipCountry directly from the orders table.","SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",Both queries calculate the total freight cost per country by summing the Freight column grouped by ShipCountry. The difference in the alias used (TotalFreightCost vs TotalFreight) does not affect the result.,FT
"For each manager, what is the total sales made by their subordinates?","SELECT m.EmployeeID AS ManagerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ManagerSales FROM employees m JOIN employees s ON m.EmployeeID = s.ReportsTo JOIN orders o ON s.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY m.EmployeeID","```sql
SELECT e.ReportsTo AS ManagerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE e.ReportsTo IS NOT NULL
GROUP BY e.ReportsTo
```","Both queries calculate the total sales made by subordinates for each manager using similar logic, just with different join approaches. Both will yield the same results.","SELECT m.EmployeeID AS ManagerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees m JOIN employees e ON m.EmployeeID = e.ReportsTo JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY m.EmployeeID ORDER BY TotalSales DESC;","Both SQL queries correctly calculate the total sales made by employees who report to each manager. Despite minor differences in variable names and ordering, they group and sum the sales data per manager appropriately.",both
List employees who have served a certain region but have no orders in other regions.,"SELECT e1.EmployeeID, e1.FirstName, e1.LastName FROM employees e1 JOIN orders o ON e1.EmployeeID = o.EmployeeID GROUP BY e1.EmployeeID, e1.FirstName, e1.LastName HAVING COUNT(DISTINCT o.ShipRegion) = 1 AND MAX(e1.Region) = 'X'","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, e.Region
FROM employees e
WHERE e.Region = 'CertainRegion' 
AND e.EmployeeID NOT IN (
    SELECT o.EmployeeID
    FROM orders o
    WHERE o.EmployeeID IS NOT NULL 
    AND o.ShipRegion <> 'CertainRegion'
);
```","The generated query filters employees based on a specific 'CertainRegion', but the ground truth aims to ensure employees have orders in only one region, with no specific region involved. Also, the generated query does not verify the count of regions served.",SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(DISTINCT o.ShipRegion) = 1;,"The generated query does not include employee names and assumes absence of 'Region' checks, while the ground truth query specifies a max region condition 'X' and includes employee names.",None
Which customers returned more than once in the last three months?,"SELECT customers.CustomerID FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 1","```sql
SELECT CustomerID
FROM orders
WHERE OrderDate >= DATEADD(MONTH, -3, GETDATE())
GROUP BY CustomerID
HAVING COUNT(OrderID) > 1
```","The generated query omits the JOIN clause to connect the 'customers' table, which is used in the ground truth query. This could lead to differences if the schema or access levels differ, although it's attempting to target the same logical outcome.","SELECT c.CustomerID FROM (SELECT CustomerID, COUNT(*) AS OrderCount FROM orders WHERE OrderDate > DATEADD(MONTH, -3, CURRENT_DATE) GROUP BY CustomerID) AS c WHERE c.OrderCount > 1;",Both queries accurately select customers who made more than one order in the last three months by counting the number of orders for each customer and checking if the count is greater than one. The use of DATEADD and DATE_SUB are equivalent for calculating the date range.,FT
Which discontinued products have pending orders?,SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1 AND od.Quantity > 0 GROUP BY p.ProductName,"```sql
SELECT p.ProductID, p.ProductName, p.UnitsOnOrder
FROM products p
WHERE p.Discontinued = 1 AND p.UnitsOnOrder > 0;
```","The generated query checks for UnitsOnOrder in the products table, while the ground truth checks for Quantity in the Order Details table, focusing on orders with actual quantities rather than order potential.",SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE p.Discontinued = 1 AND o.ShippedDate IS NULL;,"The generated query checks for orders that have not been shipped (o.ShippedDate IS NULL) to identify pending orders, aligning with typical definitions of pending orders. However, the ground truth query checks for a positive order quantity (od.Quantity > 0) and does not consider whether the order is shipped or not. Thus, they may yield different results depending on what defines 'pending'.",None
Find the supplier with the best-selling product.,"SELECT SupplierID, products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID, products.ProductName ORDER BY TotalQuantity DESC LIMIT 1;","```sql
SELECT p.SupplierID
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.SupplierID
ORDER BY SUM(od.Quantity) DESC
LIMIT 1;
```",The generated query only selects SupplierID and ignores ProductName and the highest TotalQuantity criteria included in the ground truth query.,SELECT SupplierID FROM products WHERE ProductID = (SELECT ProductID FROM [Order Details] GROUP BY ProductID ORDER BY SUM(Quantity) DESC LIMIT 1),"The generated query only identifies the supplier of the single best-selling product without considering ties or multiple suppliers. The ground truth query aggregates and ranks quantities per supplier, giving a more comprehensive result.",None
What is the trend in monthly sales for each region?,"SELECT MONTH(orders.OrderDate) AS OrderMonth, employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY OrderMonth, employees.Region","```sql
SELECT 
    e.Region,
    DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month,
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    e.Region, Month
ORDER BY 
    e.Region, Month;
```","Both queries calculate monthly sales for each region by summing the prepared sales data, grouping by region and month. The difference in SQL functions used to extract the month leads to the same outcome.","SELECT YEAR(o.OrderDate) AS Year, MONTH(o.OrderDate) AS Month, region.RegionDescription, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN customers c ON o.CustomerID = c.CustomerID JOIN customerCustomerDemo cd ON c.CustomerID = cd.CustomerID JOIN employeeTerritories et ON o.EmployeeID = et.EmployeeID JOIN territories region ON et.TerritoryID = region.TerritoryID GROUP BY Year, Month, region.RegionDescription ORDER BY Year, Month, region.RegionDescription;","The generated query uses different joins and grouping compared to the ground truth. It relies on 'region.RegionDescription' for regions, while the ground truth uses 'employees.Region'. The joins and resulting groupings differ, potentially leading to different sales data aggregations.",Base
How does each employee's sales compare to their average order discount?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales, AVG([Order Details].Discount) AS AverageDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;","```sql
SELECT e.EmployeeID,
       e.FirstName,
       e.LastName,
       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales,
       AVG(od.Discount) AS AverageOrderDiscount
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName
```","Both queries calculate the total sales and average discount per employee and group by EmployeeID. The Generated SQL Query includes employee's first and last names, but this does not affect the answer.","SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, AVG(od.Discount) AS AverageDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","The generated SQL query and the ground truth query are functionally equivalent. Both queries calculate the total sales and average discount per employee by joining the 'employees', 'orders', and 'Order Details' tables and grouping by EmployeeID.",both
What is the reorder level for each product that is currently out of stock?,"SELECT ProductName, ReorderLevel FROM products WHERE UnitsInStock = 0;","```sql
SELECT ProductName, ReorderLevel
FROM products
WHERE UnitsInStock = 0;
```",The generated SQL query and the ground truth query are identical and both correctly answer the user's question by selecting products that are currently out of stock with zero units in stock.,"SELECT ProductID, ReorderLevel FROM products WHERE UnitsInStock = 0;","The generated query selects ProductID, whereas the ground truth selects ProductName.",Base
