User Question,Ground Truth SQL Query,Generated SQL by Base Model,Explanation by Base Model,Generated SQL by FT Model,Explanation by FT Model,Model that got it right
Identify the top three products by revenue.,"SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 3;","```sql
SELECT TOP 3 
    [Order Details].ProductID, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Revenue 
FROM 
    [Order Details] 
JOIN 
    orders ON [Order Details].OrderID = orders.OrderID 
GROUP BY 
    [Order Details].ProductID 
ORDER BY 
    Revenue DESC;
```","The generated query uses 'TOP 3' which is specific to SQL Server, while the ground truth uses 'LIMIT 3' which is ANSI SQL compliant. Additionally, the JOIN with 'orders' is unnecessary, adding complexity without affecting the result.","SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS Revenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY Revenue DESC LIMIT 3;","The Generated SQL includes ProductName from products table, while the Ground Truth SQL only uses ProductID. Additionally, 'LIMIT 3' is not standard ANSI SQL; it should be 'FETCH FIRST 3 ROWS ONLY'.",None
What is the total value of units on order for each product?,"SELECT ProductName, UnitsOnOrder * UnitPrice AS TotalOnOrderValue FROM products;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalValueOnOrder
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.Quantity > 0
GROUP BY p.ProductID, p.ProductName;
```","The generated query calculates the total value of units on order by summing the order details quantities multiplied by unit prices, while the ground truth query multiplies units on order directly from the products table without summing over order details.","SELECT ProductName, UnitsOnOrder * UnitPrice AS TotalOnOrderValue FROM products WHERE UnitsOnOrder > 0;","The generated query includes a WHERE clause filtering out products with UnitsOnOrder equal to zero, which may exclude some products present in the ground truth query.",None
Find the customers who have not placed any orders.,SELECT customers.CustomerID FROM customers LEFT JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderID IS NULL;,"```sql
SELECT * 
FROM customers 
WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders);
```","Both queries correctly identify customers who have not placed any orders. The generated query uses a NOT IN clause, while the ground truth query uses a LEFT JOIN with a IS NULL check. Both methods achieve the same outcome.",SELECT CustomerID FROM customers WHERE CustomerID NOT IN (SELECT CustomerID FROM orders);,"Both queries effectively find customers with no orders. The generated query uses NOT IN, while the ground truth uses a LEFT JOIN with a NULL check. Both methods yield the same result set.",both
Calculate the inventory turnover ratio for the last month.,SELECT (SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock)) AS InventoryTurnoverRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE EXTRACT(MONTH FROM CURRENT_DATE) - 1 = EXTRACT(MONTH FROM [Order Details].OrderDate) AND EXTRACT(YEAR FROM CURRENT_DATE) = EXTRACT(YEAR FROM [Order Details].OrderDate);,"```sql
SELECT 
    SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
WHERE 
    od.OrderID IN (SELECT OrderID FROM [Order Details] WHERE OrderDate >= DATEADD(MONTH, -1, GETDATE()))
```","The generated query uses DATEADD(MONTH, -1, GETDATE()) which captures orders from the last 30 days, whereas the ground truth query uses EXTRACT to filter orders strictly from the previous calendar month.",SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE MONTH(od.OrderID) = MONTH(CURDATE()) - 1 AND YEAR(od.OrderID) = YEAR(CURDATE());,"The generated query filters using `od.OrderID`, which does not contain date information. The ground truth query correctly uses `OrderDate` for filtering the month and year.",None
What is the total quantity of products sold by each employee?,"SELECT e.EmployeeID, SUM(od.Quantity) AS TotalQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","```sql
SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].Quantity) AS TotalQuantity
FROM employees
JOIN orders ON employees.EmployeeID = orders.EmployeeID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName
```","Both queries calculate the total quantity of products sold by each employee using similar joins and aggregations. The generated query includes additional fields (FirstName, LastName), but this does not affect the total quantity computation.","SELECT e.EmployeeID, SUM(od.Quantity) AS TotalQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","The generated SQL query is identical to the ground truth query, and both accurately answer the user's question by calculating the total quantity of products sold by each employee using joins and aggregation.",both
What is the total quantity of products on order for each supplier?,"SELECT suppliers.SupplierID, SUM(products.UnitsOnOrder) AS TotalUnitsOnOrder FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID;","```sql
SELECT suppliers.CompanyName, SUM(products.UnitsOnOrder) AS TotalQuantityOnOrder
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
GROUP BY suppliers.CompanyName;
```","Both queries calculate the total quantity of products on order for each supplier, grouping by either CompanyName or SupplierID will produce the same results, assuming CompanyName is unique for each SupplierID.","SELECT suppliers.CompanyName, SUM(products.UnitsOnOrder) AS TotalUnitsOnOrder FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID, suppliers.CompanyName;","Both queries calculate the total quantity of products on order for each supplier. The generated query includes the supplier's company name, which doesn't affect the total quantity calculation per supplier.",both
List employees who have not been assigned any orders.,SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL;,"```sql
SELECT e.EmployeeID, e.FirstName, e.LastName
FROM employees e
LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.OrderID IS NULL;
```",Both queries correctly identify employees with no assigned orders by using a LEFT JOIN with a check for NULLs in the OrderID column. The generated query provides additional employee details (FirstName and LastName) but still answers the user's question accurately.,"SELECT e.FirstName, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL;","The generated SQL query retrieves employees' first and last names, while the ground truth SQL query retrieves only the EmployeeID. They return different columns.",Base
Which suppliers have products with zero stock available?,"SELECT s.SupplierID, s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.UnitsInStock = 0;","```sql
SELECT s.SupplierID, s.CompanyName
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
WHERE p.UnitsInStock = 0;
```",The generated SQL query accurately answers the user's question and is the same as the ground truth query.,SELECT CompanyName FROM suppliers WHERE SupplierID IN (SELECT SupplierID FROM products WHERE UnitsInStock = 0);,Both queries identify suppliers with products having zero stock. They yield the same results even though the format differs.,both
Determine the average discount given on all orders.,SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details];
```","The generated SQL query accurately calculates the average discount from the 'Order Details' table, matching the ground truth query.",SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];,Both queries are identical and accurately calculate the average discount from the 'Order Details' table.,both
Find the total sales per product category for the current year.,"SELECT p.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY p.CategoryID;","```sql
SELECT p.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM [Order Details] od
JOIN orders o ON od.OrderID = o.OrderID
JOIN products p ON od.ProductID = p.ProductID
WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE)
GROUP BY p.CategoryID;
```",Both queries calculate the total sales per product category for the current year with correct logic and equivalent functions (CURRENT_DATE vs. CURDATE()).,"SELECT categories.CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID WHERE YEAR([Order Details].OrderDate) = 2023 GROUP BY categories.CategoryID;","The generated SQL uses [Order Details].OrderDate for filtering the year, while the ground truth uses orders.OrderDate. This may yield different results if the tables have separate date fields.",Base
What is the order fulfillment time for each month in 2023?,"SELECT MONTH(orders.OrderDate) AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE YEAR(orders.ShippedDate) = 2023 GROUP BY MONTH(orders.OrderDate);","```sql
SELECT MONTH(orders.OrderDate) AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time 
FROM orders 
WHERE YEAR(orders.OrderDate) = 2023 
GROUP BY MONTH(orders.OrderDate)
```","The generated query uses OrderDate for the year filter, while the ground truth query uses ShippedDate.","SELECT EXTRACT(YEAR FROM orders.OrderDate) AS order_year, EXTRACT(MONTH FROM orders.OrderDate) AS order_month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY order_year, order_month","The generated query filters orders by OrderDate in 2023, while the ground truth filters by the ShippedDate year being 2023. These conditions can lead to different results.",None
What are the total sales for each product?,"SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName;
```","Both queries calculate the total sales per product by summing the product of Quantity and UnitPrice for each ProductID. The Generated SQL includes ProductName in the output, but this does not affect the accuracy of answering the user's question.","SELECT ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] GROUP BY ProductID;","The generated query includes a discount factor in the calculation, which is not present in the ground truth query. This leads to different total sales amounts.",Base
What are the total sales revenue and average discount for each product?,"SELECT p.ProductID, SUM(od.UnitPrice * od.Quantity) AS TotalRevenue, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;","```sql
SELECT 
    p.ProductID,
    p.ProductName,
    SUM(od.Quantity * od.UnitPrice) AS TotalSalesRevenue,
    AVG(od.Discount) AS AverageDiscount
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.ProductName;
```","Both queries calculate the total sales revenue and average discount grouped by each product. The Generated Query includes an additional field, ProductName, but this does not affect the correctness of the calculation results.","SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales, AVG(Discount) AS AverageDiscount FROM [Order Details] GROUP BY ProductID;","The generated SQL query calculates total sales by considering discounts, while the ground truth query computes total revenue without applying discounts.",Base
What is the average discount applied across all order details?,SELECT AVG(Discount) FROM [Order Details];,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details];
```","Both queries calculate the average discount from the 'Order Details' table, and the result would be the same.",SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];,"Both queries calculate the average discount from the same table, yielding the same results.",both
Which suppliers have the slowest lead times in the last year?,"SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS avg_lead_time FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY s.SupplierID ORDER BY avg_lead_time DESC","```sql
SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time 
FROM orders 
JOIN products ON orders.ProductID = products.ProductID 
WHERE orders.OrderDate BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW() 
GROUP BY products.SupplierID 
ORDER BY supplier_lead_time DESC;
```","The generated query misses joining the Order Details table, which may impact the association between orders and products.","SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE orders.OrderDate > '2022-11-01' AND orders.OrderDate < '2023-11-01' GROUP BY suppliers.CompanyName ORDER BY avg_lead_time DESC","The date range in the generated query is incorrect. It filters orders between '2022-11-01' and '2023-11-01', while the ground truth query uses the range from '2022-01-01' to '2022-12-31' to cover the last year.",None
How many orders were handled by each employee in 2023?,"SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY e.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS NumberOfOrders
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE YEAR(o.OrderDate) = 2023
GROUP BY e.EmployeeID, e.FirstName, e.LastName
```","Both queries count the number of orders handled by each employee in 2023. The generated query includes employee names, but this does not affect the count result.","SELECT employees.EmployeeID, COUNT(orders.OrderID) AS total_orders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE YEAR(orders.OrderDate) = '2023' GROUP BY employees.EmployeeID",Both queries calculate the number of orders handled by each employee in 2023 by joining the employees and orders tables. The difference in date filtering logic (YEAR vs BETWEEN) does not affect the outcome if OrderDate is a proper date type.,both
Which product had the highest total sales in the last quarter?,"SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductSales FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' AND o.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY od.ProductID ORDER BY ProductSales DESC LIMIT 1;","```sql
SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE orders.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' 
      AND orders.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE)
GROUP BY [Order Details].ProductID
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries are equivalent. They perform the same JOIN operation, apply the same date filter for the last quarter, calculate total sales correctly, and return the product with the highest total sales. The differences in table aliasing and column naming do not affect the result.","SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE QUARTER(o.OrderDate) = QUARTER(CURDATE()) - 1 AND YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY od.ProductID ORDER BY TotalSales DESC LIMIT 1;","The generated query may calculate the wrong quarter. QUARTER(CURDATE()) - 1 can produce unexpected results at the start of the year. The ground truth query uses DATE_TRUNC, which handles quarter calculation better in any month.",Base
Find the top 3 employees who handle the most orders.,"SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 3;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY EmployeeID
ORDER BY OrderCount DESC
LIMIT 3;
```","Both queries count orders per employee, group by EmployeeID, order by the count in descending order, and limit to the top 3 employees. They produce identical results.","SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 3;","Both queries group by EmployeeID, count orders, and select the top 3 employees by order count. Differences in alias naming ('TotalOrders' vs 'NumberOfOrders') do not affect the result.",both
Identify the most common discount rate applied to product sales.,"SELECT Discount, COUNT(*) AS Frequency FROM [Order Details] GROUP BY Discount ORDER BY Frequency DESC LIMIT 1;","```sql
SELECT Discount, COUNT(*) AS DiscountFrequency
FROM [Order Details]
GROUP BY Discount
ORDER BY DiscountFrequency DESC
LIMIT 1;
```","Both queries select the discount and count its occurrences, group by discount, and order the results in descending order to find the most common discount rate, limiting the results to 1.","SELECT Discount, COUNT(*) AS Frequency FROM [Order Details] GROUP BY Discount ORDER BY Frequency DESC LIMIT 1;","The generated SQL query and the ground truth query are exactly the same, both selecting the most common discount rate by counting the frequency and ordering it in descending order, with a limit of one result.",both
List products that have never been ordered.,"SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;","```sql
SELECT p.ProductID, p.ProductName
FROM products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.ProductID IS NULL;
```",The generated SQL query and the ground truth query are identical and will yield the same results.,SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"Both queries correctly identify products that have never been ordered by checking for ProductIDs in the 'Order Details' table. The first query uses a NOT IN clause with a subquery, while the second uses a LEFT JOIN with a NULL check.",both
Determine the average unit price for products in each category.,"SELECT CategoryID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY CategoryID;","```sql
SELECT CategoryID, AVG(UnitPrice) AS AverageUnitPrice
FROM products
GROUP BY CategoryID;
```","Both queries perform the same aggregation and grouping, resulting in the average unit price for each product category.","SELECT CategoryID, AVG(UnitPrice) FROM products GROUP BY CategoryID;",Both queries calculate the average unit price for products in each category and will yield the same results.,both
What are the total sales for each product in the current month?,"SELECT p.ProductName, SUM(od.Quantity) as TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE DATE_FORMAT(od.OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m') GROUP BY p.ProductID;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE MONTH(od.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(od.OrderDate) = YEAR(CURRENT_DATE)
GROUP BY p.ProductID, p.ProductName;
```","Both queries calculate the total sales for each product for the current month, grouping by product. The difference in date handling (MONTH/YEAR vs. DATE_FORMAT) yields equivalent results in the context of this task.","SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE EXTRACT(YEAR FROM CURRENT_DATE) = EXTRACT(YEAR FROM [Order Details].OrderDate) AND EXTRACT(MONTH FROM CURRENT_DATE) = EXTRACT(MONTH FROM [Order Details].OrderDate) GROUP BY products.ProductName;","The generated query calculates total sales using Quantity, UnitPrice, and Discount while the ground truth query only sums Quantity, considering no price or discount.",Base
What are the top 5 products by sales volume in the last year?,"SELECT products.ProductName, SUM([Order Details].Quantity) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY products.ProductID, products.ProductName ORDER BY total_sales DESC LIMIT 5","```sql
SELECT products.ProductID, SUM([Order Details].Quantity) AS sales_volume
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN products ON [Order Details].ProductID = products.ProductID 
WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'
GROUP BY products.ProductID
ORDER BY sales_volume DESC
LIMIT 5
```","The generated SQL query selects ProductID instead of ProductName, which could lead to a different output format, though the logic to determine top products by sales volume is similar.","SELECT products.ProductName, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE YEAR([Order Details].OrderID) = YEAR(CURDATE()) - 1 GROUP BY products.ProductName ORDER BY sales_volume DESC LIMIT 5","The generated query uses YEAR on OrderID, while the ground truth uses OrderDate to filter the correct year. The generated query likely misinterprets OrderID as a date field, leading to incorrect filtering.",None
Which city received the highest number of shipments?,"SELECT ShipCity, COUNT(OrderID) FROM orders GROUP BY ShipCity ORDER BY COUNT(OrderID) DESC LIMIT 1;","```sql
SELECT ShipCity, COUNT(OrderID) AS ShipmentCount
FROM orders
GROUP BY ShipCity
ORDER BY ShipmentCount DESC
LIMIT 1;
```","Both queries correctly group shipments by city, count OrderID to determine the number of shipments, and order the results to find the city with the highest number of shipments. They use a LIMIT 1 to return only the top result.","SELECT ShipCity, COUNT(OrderID) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 1",Both queries count the number of shipments per city and return the city with the highest count. The use of an alias in the generated query does not affect the result.,both
What is the average discount applied to orders per product?,"SELECT products.ProductName, AVG([Order Details].Discount) AS AverageDiscount FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;","```sql
SELECT 
    p.ProductID, 
    p.ProductName,
    AVG(od.Discount) AS AverageDiscount
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.ProductName;
```",Both queries calculate the average discount per product by joining the 'products' and 'Order Details' tables on ProductID and grouping by product information. The inclusion of ProductID in the generated query's GROUP BY clause does not change the result as it aligns with grouping by ProductName.,"SELECT p.ProductName, AVG(od.Discount) AS AvgDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;","The generated SQL correctly calculates the average discount per product by joining products and order details on the ProductID. It groups by ProductName and computes the average of Discount, matching the logic of the ground truth query.",both
Which city has the highest total freight cost for shipped orders?,"SELECT ShipCity, SUM(Freight) AS TotalFreightCost FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipCity ORDER BY TotalFreightCost DESC LIMIT 1;","```sql
SELECT ShipCity, SUM(Freight) AS TotalFreight
FROM orders
WHERE ShippedDate IS NOT NULL
GROUP BY ShipCity
ORDER BY TotalFreight DESC
LIMIT 1;
```","Both queries calculate the sum of Freight for shipped orders by ShipCity, order by the sum in descending order, and limit the result to the city with the highest total freight cost. The difference in alias naming does not affect the logic or the result.","SELECT ShipCity, SUM(Freight) AS total_freight_cost FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipCity ORDER BY total_freight_cost DESC LIMIT 1","Both queries calculate the total freight cost for each city with shipped orders and return the city with the highest total, so they yield the same result.",both
How much sales did employees generate in each country?,"SELECT e.EmployeeID, o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN ""[Order Details]"" od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, o.ShipCountry;","```sql
SELECT e.Country, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.Country;
```","The generated query groups by employee country, while the ground truth groups by employee ID and order ship country, leading to different aggregations.","SELECT employees.EmployeeID, orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID, orders.ShipCountry","Both queries correctly calculate the total sales generated by employees in each country by multiplying UnitPrice, Quantity, and adjusting for Discount. The order of table joins and naming conventions differ slightly but yield the same results.",FT
What is the average lead time for each supplier?,"SELECT SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM products JOIN orders ON products.ProductID = orders.OrderID GROUP BY SupplierID;","```sql
SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.SupplierID;
```","The generated query correctly uses the suppliers table to compute average lead time per supplier, while the ground truth query is missing a link to the suppliers table and seems incorrect.","SELECT products.SupplierID, AVG(DATEDIFF(OrderDetails.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.SupplierID;","The generated query calculates lead time using 'OrderDetails.ShippedDate', which is not used in the ground truth. The ground truth uses 'orders.ShippedDate'. Additionally, the join condition in the ground truth appears incorrect as it joins products directly with orders using mismatched columns.",None
Identify the most profitable supplier based on total revenue.,"SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY TotalRevenue DESC LIMIT 1;","```sql
SELECT s.SupplierID, s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY s.SupplierID, s.CompanyName
ORDER BY TotalRevenue DESC
LIMIT 1;
```","Both queries calculate total revenue by supplier and order the result to find the most profitable one. The generated query includes the supplier's company name, but this does not affect the correctness of the result.","SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY total_revenue DESC LIMIT 1","The generated query uses suppliers.CompanyName while the ground truth uses s.SupplierID. These might identify different entities if the same supplier has different names or IDs; hence, results may differ.",Base
Which shipping recipient name appears most frequently in orders?,"SELECT ShipName, COUNT(OrderID) AS Frequency FROM orders GROUP BY ShipName ORDER BY Frequency DESC LIMIT 1;","```sql
SELECT ShipName, COUNT(*) AS OrderCount
FROM orders
GROUP BY ShipName
ORDER BY OrderCount DESC
LIMIT 1;
```",Both queries count the frequency of 'ShipName' in the 'orders' table and return the highest frequency using ORDER BY and LIMIT 1.,"SELECT ShipName, COUNT(*) AS Shipments FROM orders GROUP BY ShipName ORDER BY Shipments DESC LIMIT 1;","Both queries group by ShipName and order by the count in descending order, limiting the result to the top one. The difference in column alias (Shipments vs Frequency) and COUNT parameter (COUNT(*) vs COUNT(OrderID)) does not affect the result since the table name is 'orders'.",both
What are the product names with zero units in stock?,SELECT ProductName FROM products WHERE UnitsInStock = 0;,"```sql
SELECT ProductName 
FROM products 
WHERE UnitsInStock = 0;
```",Both queries filter the 'products' table to return 'ProductName' where 'UnitsInStock' is 0. The logic and results are identical.,SELECT ProductName FROM products WHERE UnitsInStock = 0;,Both queries are identical and accurately address the user's question by selecting products with zero units in stock.,both
What is the average salary of employees associated with high sales performance?,SELECT AVG(e.Salary) AS avg_salary FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > (SELECT AVG(employee_sales) FROM (SELECT SUM(od2.UnitPrice * od2.Quantity * (1 - od2.Discount)) AS employee_sales FROM [Order Details] od2 JOIN orders o2 ON od2.OrderID = o2.OrderID JOIN employees e2 ON o2.EmployeeID = e2.EmployeeID GROUP BY e2.EmployeeID) AS subquery),"```sql
SELECT AVG(employees.Salary) AS average_salary
FROM employees
JOIN (
    SELECT employees.EmployeeID
    FROM employees
    JOIN orders ON employees.EmployeeID = orders.EmployeeID
    JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
    GROUP BY employees.EmployeeID
    HAVING SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) > (SELECT AVG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) 
                                                          FROM orders 
                                                          JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID 
                                                          GROUP BY orders.EmployeeID)
) AS high_performers ON employees.EmployeeID = high_performers.EmployeeID;
```","Both queries compute the average salary of employees whose sales performance is above average. They use a similar approach involving joining the employees, orders, and order details tables, grouping by employee, and comparing each employee's sales to the average sales of all employees.","SELECT e.FirstName, e.LastName, AVG(e.Salary) AS AvgSalary FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) >= 100000","The generated query uses a fixed threshold of 100000 for high sales, whereas the ground truth query uses a dynamic threshold, comparing individual sales to the average sales of all employees.",Base
Which products show a sales drop after a discount is applied?,SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName HAVING SUM(CASE WHEN od.Discount > 0 THEN od.Quantity ELSE 0 END) < SUM(CASE WHEN od.Discount = 0 THEN od.Quantity ELSE 0 END);,"```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSoldBeforeDiscount, 
       SUM(CASE WHEN od.Discount > 0 THEN od.Quantity ELSE 0 END) AS TotalSoldAfterDiscount
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
HAVING SUM(od.Quantity) > SUM(CASE WHEN od.Discount > 0 THEN od.Quantity ELSE 0 END);
```",Both queries aim to identify products with higher sales before a discount than after. They differ slightly in calculations but conceptually match the user's request.,"SELECT p.ProductID, SUM(CASE WHEN od.Discount > 0 THEN od.Quantity ELSE 0 END) AS DiscountSales, SUM(CASE WHEN od.Discount = 0 THEN od.Quantity ELSE 0 END) AS NoDiscountSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID HAVING SUM(CASE WHEN od.Discount > 0 THEN od.Quantity ELSE 0 END) < SUM(CASE WHEN od.Discount = 0 THEN od.Quantity ELSE 0 END);","The generated query returns ProductID, while the ground truth query returns ProductName. Both compare sales with and without discounts, but they yield different result columns.",Base
What is the total revenue generated by customer 'XYZ Company'?,SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE c.CompanyName = 'XYZ Company';,"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE customers.CompanyName = 'XYZ Company';
```","Both queries correctly calculate the total revenue for 'XYZ Company' using the same logic and joins, even though they use different aliases.",SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.CustomerID = 'XYZ Company';,"The generated query filters using 'CustomerID', while the ground truth uses 'CompanyName'. They may yield different results if 'XYZ Company' is not the 'CustomerID'.",Base
What is the total revenue generated by each category?,"SELECT c.CategoryID, c.CategoryName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN categories c ON p.CategoryID = c.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryID, c.CategoryName;","```sql
SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue
FROM [Order Details] od
JOIN products p ON od.ProductID = p.ProductID
GROUP BY p.CategoryID;
```","The generated query only groups by CategoryID and omits the CategoryName. It also assumes the same ProductID in Order Details and Products tables, but does not confirm it is linked with categories.","SELECT c.CategoryID, SUM(p.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryID;","The generated query calculates revenue considering discounts, while the ground truth does not; also, the ground truth includes CategoryName in the output.",None
What is the average freight cost per shipped order?,SELECT AVG(Freight) AS AverageFreightCost FROM orders WHERE ShippedDate IS NOT NULL;,"```sql
SELECT AVG(Freight) AS AverageFreightCost
FROM orders
WHERE ShippedDate IS NOT NULL;
```",The generated SQL query accurately answers the user's question and yields the same results as the ground truth query. Both queries calculate the average freight cost for orders that have been shipped.,SELECT AVG(Shippers.freight_price) AS AverageFreight FROM Shippers JOIN orders ON Shippers.id = orders.ship_via GROUP BY orders.id;,"The generated query averages freight prices grouped by each order, whereas the ground truth averages freight across all shipped orders without grouping. The 'ship_via' column in the generated query implies a join on Shippers, which is unnecessary for calculating average freight directly from the 'orders' table as specified in the ground truth.",Base
What is the inventory turnover ratio for the last month?,SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE YEAR(od.sale_date) = YEAR(CURRENT_DATE) AND MONTH(od.sale_date) = MONTH(CURRENT_DATE) - 1;,"```sql
SELECT 
    SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio
FROM 
    products
JOIN 
    [Order Details] ON products.ProductID = [Order Details].ProductID
WHERE 
    [Order Details].OrderID IN (
        SELECT DISTINCT OrderID 
        FROM Orders 
        WHERE OrderDate >= DATEADD(month, -1, GETDATE())
    )
```","The generated query uses `GETDATE()` and `DATEADD` which might not accurately select the last month compared to the `YEAR` and `MONTH` comparison in the ground truth query. Additionally, it lacks specific filtering on the sale_date to ensure only last month is considered.","SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)","The generated query checks for orders in the last 30 days using 'DATE_SUB', while the ground truth query specifically selects orders from the previous month using 'YEAR' and 'MONTH' functions.",None
Which employee generated the most sales in January?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(MONTH FROM o.OrderDate) = 1 GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= '2023-01-01' AND o.OrderDate < '2023-02-01'
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries correctly calculate total sales for each employee in January and identify the employee with the highest sales. They differ in date filtering: the generated query uses a range based on dates, while the ground truth query extracts the month from the date. Both yield the correct result.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE EXTRACT(MONTH FROM orders.OrderDate) = 1 GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1",Both queries are functionally equivalent. They select the employee who generated the most sales in January by calculating total sales using order details. The differences in table aliases and column naming do not affect the outcome.,both
How many returning customers are there each month?,"SELECT MONTH(OrderDate) AS OrderMonth, COUNT(DISTINCT CASE WHEN OrderDate < DATEADD(MONTH, -1, OrderDate) THEN CustomerID ELSE NULL END) AS ReturningCustomers FROM orders GROUP BY OrderMonth;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    COUNT(DISTINCT CustomerID) AS ReturningCustomers
FROM 
    orders
WHERE 
    CustomerID IN (
        SELECT CustomerID 
        FROM orders 
        WHERE OrderDate < DATE_FORMAT(OrderDate, '%Y-%m-01')
        GROUP BY CustomerID
    )
GROUP BY 
    Month
ORDER BY 
    Month;
```","The generated query uses a subquery to filter returning customers based on orders before the start of the month, whereas the ground truth attempts to identify returning customers incorrectly by comparing OrderDate to itself with a date adjustment, which is logically flawed. Both are incorrect but for different reasons.","SELECT EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, COUNT(DISTINCT o.CustomerID) FROM orders o JOIN (SELECT DISTINCT CustomerID FROM orders) AS returning ON o.CustomerID = returning.CustomerID GROUP BY Year, Month;","The generated query does not correctly identify returning customers, as it doesn't check for repeat purchases. The ground truth query attempts to identify returning customers by checking if they made a purchase in a previous month.",None
Which product category has the most units on order?,"SELECT CategoryID, SUM(UnitsOnOrder) FROM products GROUP BY CategoryID ORDER BY SUM(UnitsOnOrder) DESC LIMIT 1;","```sql
SELECT p.CategoryID, SUM(p.UnitsOnOrder) AS TotalUnitsOnOrder
FROM products p
GROUP BY p.CategoryID
ORDER BY TotalUnitsOnOrder DESC
LIMIT 1;
```",Both queries calculate the sum of UnitsOnOrder for each CategoryID and return the category with the highest sum. The difference in naming the sum does not affect the outcome or accuracy of the generated query.,"SELECT od.CategoryID, SUM(od.UnitsOnOrder) AS TotalUnitsOnOrder FROM products od GROUP BY od.CategoryID ORDER BY TotalUnitsOnOrder DESC LIMIT 1;",Both queries calculate the total units on order per category and return the category with the highest total. The differences in column aliases and naming conventions do not affect the result.,both
Discover products sold in quantities exceeding 1000 units per month.,SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity) > 1000;,"```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantity
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
HAVING SUM(od.Quantity) > 1000;
```","The generated query returns the ProductID and TotalQuantity in addition to ProductName, whereas the ground truth query returns only ProductName.","SELECT ProductID, MONTH(OrderDate) AS Month, SUM(Quantity) FROM [Order Details] GROUP BY ProductID, MONTH(OrderDate) HAVING SUM(Quantity) > 1000;","The generated query identifies products by ProductID and considers each month separately, while the ground truth query identifies products by ProductName without monthly separation.",None
Which products have less than 10 units in stock and need reordering?,SELECT ProductName FROM products WHERE UnitsInStock < 10 AND UnitsInStock <= ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock < 10 AND UnitsInStock <= ReorderLevel;
```","The generated query selects additional columns (ProductID, UnitsInStock, ReorderLevel) that are not required according to the ground truth query, which only selects ProductName.","SELECT ProductID, ProductName FROM products WHERE UnitsInStock < 10 AND UnitsInStock <= ReorderLevel;","The generated SQL query includes 'ProductID', which is not in the ground truth query, potentially yielding different results.",None
What is the total quantity of products in stock?,SELECT SUM(products.UnitsInStock) AS TotalUnitsInStock FROM products;,"```sql
SELECT SUM(UnitsInStock) AS TotalQuantityInStock FROM products;
```",Both queries calculate the sum of 'UnitsInStock' from the 'products' table and return the total quantity in stock with an alias.,SELECT SUM(UnitsInStock) AS TotalStock FROM products;,"Both queries calculate the sum of the 'UnitsInStock' column from the 'products' table, resulting in the total stock.",both
What is the average discount applied on orders?,SELECT AVG(od.Discount) AS AvgDiscount FROM [Order Details] od,"```sql
SELECT AVG([Order Details].Discount) AS Average_Discount
FROM [Order Details]
```",Both queries calculate the average discount from the 'Order Details' table and will yield the same result.,SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details];,"Both queries calculate the average discount from the same table, 'Order Details', and their syntax differences do not affect the outcome.",both
How many distinct products are ordered each month?,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, COUNT(DISTINCT [Order Details].ProductID) AS UniqueProducts FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')","```sql
SELECT 
    DATE_TRUNC('month', o.OrderDate) AS OrderMonth, 
    COUNT(DISTINCT od.ProductID) AS DistinctProductCount
FROM 
    orders o
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    OrderMonth
ORDER BY 
    OrderMonth;
```","Both queries group by month and count distinct products, but use different methods to extract the month from OrderDate. The logic and results remain consistent.","SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(DISTINCT ProductID) AS DistinctProducts FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY EXTRACT(MONTH FROM OrderDate);","The generated query groups by month only, while the ground truth query groups by year-month, potentially producing different results for multi-year data.",Base
Which city had the highest freight costs in the last year?,"SELECT ShipCity, SUM(Freight) AS TotalFreight FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1 GROUP BY ShipCity ORDER BY TotalFreight DESC LIMIT 1;","```sql
SELECT ShipCity, SUM(Freight) AS TotalFreight
FROM orders
WHERE OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE)
GROUP BY ShipCity
ORDER BY TotalFreight DESC
LIMIT 1;
```","The generated query includes orders from the current date going back one year, which captures more than just the previous calendar year, unlike the ground truth query that strictly filters by the previous year.","SELECT ShipCity, SUM(Freight) FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY ShipCity ORDER BY SUM(Freight) DESC LIMIT 1;","Both queries calculate the total freight per city for the previous year, ordering by the highest freight, and limiting the result to one city with the highest freight costs. The differences in function names (CURRENT_DATE vs. CURDATE) do not affect the result.",FT
What is the total value of current inventory?,SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;,"```sql
SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue
FROM products
WHERE Discontinued = 0;
```","The generated query filters out discontinued products by checking 'Discontinued = 0', which may exclude some items from the inventory total. The ground truth query sums all products regardless of their discontinuation status.",SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;,Both queries calculate the total value of the current inventory by summing up the product of UnitPrice and UnitsInStock from the products table.,FT
Which product has the highest total sales?,"SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS ProductSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY ProductSales DESC LIMIT 1;","```sql
SELECT 
    od.ProductID, 
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    [Order Details] od
JOIN 
    orders o ON od.OrderID = o.OrderID
GROUP BY 
    od.ProductID
ORDER BY 
    TotalSales DESC
LIMIT 1;
```",Both queries correctly calculate the total sales for each product and return the one with the highest sales. The join with the 'orders' table in the generated query does not affect the result because it doesn't alter the aggregation of sales by 'ProductID'.,"SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] GROUP BY ProductID ORDER BY TotalSales DESC LIMIT 1;","Both queries calculate the total sales for each product and return the product with the highest total sales. They differ only in alias naming, which does not affect the accuracy.",both
What is the total freight cost per country?,"SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;","```sql
SELECT Country, SUM(Freight) AS TotalFreightCost
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
GROUP BY Country;
```","The generated query uses the 'Country' field from the 'customers' table, while the ground truth query uses 'ShipCountry' from the 'orders' table. These might not represent the same data.","SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry ORDER BY TotalFreightCost DESC","Both queries calculate the total freight cost per country by summing the Freight column and grouping by ShipCountry. The order by clause in the generated query does not affect the result, only the presentation.",FT
Which employee had the most orders that were shipped late?,"SELECT employees.EmployeeID, COUNT(orders.OrderID) AS LateOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.RequiredDate < orders.ShippedDate GROUP BY employees.EmployeeID ORDER BY LateOrders DESC LIMIT 1","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS LateOrders
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.ShippedDate > o.RequiredDate
GROUP BY e.EmployeeID
ORDER BY LateOrders DESC
LIMIT 1;
```","Both queries retrieve the employee with the most late orders. They use the same condition to determine late shipments and group by EmployeeID, counting orders and sorting them in descending order to get the top result.","SELECT e.FirstName, e.LastName, COUNT(o.OrderID) AS LateOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate > o.RequiredDate GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY LateOrders DESC LIMIT 1;","The generated SQL query selects the employee's first and last names, whereas the ground truth query selects the employee's ID. This could yield different columns, although the count of late orders calculation is correct.",Base
Which region experiences the highest average shipping cost?,"SELECT ShipRegion, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipRegion ORDER BY AvgFreight DESC LIMIT 1;","```sql
SELECT ShipRegion, AVG(Freight) AS AverageShippingCost
FROM orders
GROUP BY ShipRegion
ORDER BY AverageShippingCost DESC
LIMIT 1;
```",Both queries calculate the average freight cost per region and return the region with the highest average shipping cost.,"SELECT ShipRegion, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipRegion ORDER BY AvgShippingCost DESC LIMIT 1;","Both queries calculate the average shipping cost per region and select the region with the highest average. The column aliases differ, but the result is identical.",both
Which orders were never shipped?,SELECT OrderID FROM orders WHERE ShippedDate IS NULL;,"```sql
SELECT * 
FROM orders 
WHERE ShippedDate IS NULL;
```","The generated query returns all columns, while the ground truth query returns only the OrderID column.",SELECT OrderID FROM orders WHERE ShippedDate IS NULL;,"Both queries are identical and correctly select orders with a NULL ShippedDate, indicating they were never shipped.",FT
What is the total quantity of each product sold?,"SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od GROUP BY od.ProductID;","```sql
SELECT [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalQuantity
FROM [Order Details]
GROUP BY [Order Details].ProductID;
```",Both queries group by ProductID and sum the Quantity; they yield the same result.,"SELECT ProductID, SUM(Quantity) AS TotalSold FROM [Order Details] GROUP BY ProductID ORDER BY TotalSold DESC;",Both queries calculate the sum of quantities for each product from the 'Order Details' table and group by ProductID. The 'ORDER BY' clause in the generated SQL does not affect the correctness regarding the user's question.,both
Determine the effect of discounts on total sales revenue.,SELECT SUM(Quantity * UnitPrice * (1 - Discount)) AS TotalSalesRevenueWithDiscount FROM [Order Details];,"```sql
SELECT 
    SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS TotalSalesRevenue,
    SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalOriginalRevenue,
    SUM([Order Details].Quantity * [Order Details].Discount) AS TotalDiscountAmount
FROM 
    [Order Details];
```",The generated query calculates additional columns (TotalOriginalRevenue and TotalDiscountAmount) which aren't present in the ground truth query. The TotalSalesRevenue in both queries is the same.,"SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SalesWithoutDiscount, SUM([Order Details].UnitPrice * [Order Details].Quantity) AS SalesWithDiscount FROM [Order Details];","The generated query calculates both 'SalesWithoutDiscount' and 'SalesWithDiscount', while the ground truth query only calculates 'TotalSalesRevenueWithDiscount'. Also, the interpretation of 'with discount' and 'without discount' is swapped in their definitions.",None
List the employee who has handled the most orders.,"SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM orders o JOIN employees e ON o.EmployeeID = e.EmployeeID GROUP BY e.EmployeeID ORDER BY OrderCount DESC LIMIT 1","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries count the orders per employee and return the employee with the most orders. The generated query assumes 'EmployeeID' exists in 'orders' without needing a join to 'employees', which aligns with the ground truth's result.","SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1;",Both queries count orders per employee and return the employee with the highest count. The join in the ground truth query isn't necessary for the result in this context if EmployeeID is consistently related between orders and employees.,both
What is the product with the lowest inventory turnover ratio?,"SELECT products.ProductID FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID HAVING SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) IS NOT NULL ORDER BY SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) ASC LIMIT 1","```sql
SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio 
FROM [Order Details] 
JOIN products ON [Order Details].ProductID = products.ProductID 
GROUP BY products.ProductID 
ORDER BY inventory_turnover_ratio ASC 
LIMIT 1
```","The generated query does not handle division by zero, while the ground truth query uses NULLIF to prevent this.","SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SUM(od.Quantity * od.UnitPrice / NULLIF(AVG(p.UnitsInStock), 0)) ASC LIMIT 1;",The generated query calculates the inventory turnover ratio differently by not considering the division of SUM(od.Quantity * od.UnitPrice) over AVG(p.UnitsInStock) compared to the ground truth query.,None
What is the product with the highest inventory turnover ratio?,"SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) DESC LIMIT 1;","```sql
SELECT p.ProductID, p.ProductName, 
       SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY InventoryTurnoverRatio DESC
LIMIT 1;
```","The generated query selects ProductID, whereas the ground truth only selects ProductName. Both queries compute the Inventory Turnover Ratio and order by it, but the handling of zero inventory is different using NULLIF in the ground truth.",SELECT p.ProductName FROM products p ORDER BY (p.UnitsOnOrder + p.UnitsInStock) / p.UnitsOnOrder DESC LIMIT 1;,"The generated query calculates turnover using only stock and order units, while the ground truth uses sales data from Order Details table.",None
Identify products that are below their reorder level.,"SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel","```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock < ReorderLevel;
```","Both queries correctly identify products below their reorder level. The generated query includes additional columns 'UnitsInStock' and 'ReorderLevel', but this does not affect the correctness.",SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"The generated query only selects ProductName, while the ground truth query selects both ProductID and ProductName.",Base
What is the total sales revenue generated last quarter?,"SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(DATE_SUB(CURDATE(), INTERVAL MOD(MONTH(CURDATE()) - 1, 3) MONTH), INTERVAL 3 MONTH) AND o.OrderDate < DATE_SUB(CURDATE(), INTERVAL MOD(MONTH(CURDATE()) - 1, 3) MONTH);","```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE orders.OrderDate >= DATEADD(quarter, -1, GETDATE()) 
  AND orders.OrderDate < GETDATE();
```","The generated query calculates the date range incorrectly. It uses GETDATE() and DATEADD to find the past quarter, while the ground truth query uses CURDATE() and DATE_SUB, which correctly defines the start of the last quarter based on the current date.",SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30',"The generated query hardcodes the last quarter dates from 2023-07-01 to 2023-09-30, while the ground truth dynamically calculates the last quarter using the current date.",None
What is the average shipping time for orders fulfilled this month?,"SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM orders WHERE MONTH(ShippedDate) = MONTH(CURDATE()) AND YEAR(ShippedDate) = YEAR(CURDATE());","```sql
SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime
FROM orders
WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) AND MONTH(OrderDate) = MONTH(CURRENT_DATE);
```","The generated SQL filters orders by OrderDate this month, while the ground truth SQL filters by ShippedDate this month. This results in different datasets and outcomes.","SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_shipping_time FROM orders WHERE MONTH(orders.ShippedDate) = MONTH(CURDATE()) AND YEAR(orders.ShippedDate) = YEAR(CURDATE())","Both queries calculate the average shipping time for orders shipped in the current month using the same conditions and functions, thus yielding the same results.",FT
What is the total sales quantity for each product?,"SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSalesQuantity
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName;
```","Both queries calculate the total sales quantity for each product using the same logic. The difference is in the SELECT clause; the generated query includes ProductID while the ground truth query does not. However, this does not affect the correctness of the result with respect to the user's question.","SELECT ProductID, SUM(Quantity) AS TotalSales FROM [Order Details] GROUP BY ProductID;","The generated query correctly calculates the total sales quantity for each product but returns ProductID instead of ProductName, unlike the ground truth query.",Base
Identify the employee responsible for the highest number of orders.,"SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries correctly identify the employee responsible for the highest number of orders by grouping orders by EmployeeID and ordering by the count in descending order, limiting the result to the top entry.","SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;",Both queries are identical and correctly identify the employee responsible for the highest number of orders.,both
Determine the retention rate for customers between January and June 2023.,"SELECT (COUNT(DISTINCT CASE WHEN o.OrderDate BETWEEN '2023-01-01' AND '2023-06-30' THEN o.CustomerID END) / NULLIF(COUNT(DISTINCT CASE WHEN o.OrderDate < '2023-01-01' THEN o.CustomerID END), 0)) * 100 AS RetentionRate FROM orders o;","```sql
SELECT 
    (COUNT(DISTINCT o1.CustomerID) * 1.0 / NULLIF(COUNT(DISTINCT o2.CustomerID), 0)) AS RetentionRate
FROM 
    orders o1
JOIN 
    orders o2 ON o1.CustomerID = o2.CustomerID 
WHERE 
    o1.OrderDate BETWEEN '2023-01-01' AND '2023-06-30' 
    AND o2.OrderDate < '2023-01-01';
```","The generated SQL query checks for retention by matching customers who ordered both before and between January and June 2023, leading to potential undercounting of all retained customers. The ground truth query correctly identifies customers who ordered in both periods without duplication issues.",SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30' THEN orders.CustomerID END) * 100.0 / COUNT(DISTINCT CASE WHEN orders.OrderDate < '2023-01-01' THEN orders.CustomerID END)) AS RetentionRate FROM orders WHERE orders.OrderDate < '2023-07-01';,"Both queries calculate the retention rate by comparing distinct customers between two date ranges and multiplying by 100 to express it as a percentage. The key logic remains consistent, despite minor syntax differences.",FT
Which customers have placed orders in more than three different cities?,SELECT DISTINCT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID HAVING COUNT(DISTINCT orders.ShipCity) > 3;,"```sql
SELECT c.CustomerID, c.CompanyName
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerID, c.CompanyName
HAVING COUNT(DISTINCT o.ShipCity) > 3
```","Both queries correctly identify customers who have placed orders in more than three different cities. They group by CustomerID and count distinct ShipCity, applying the HAVING clause with the condition greater than 3. The difference in selected columns does not affect the correctness of the answer to the user's question.",SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(DISTINCT ShipCity) > 3;,Both queries identify customers with orders shipped to more than three different cities by using COUNT(DISTINCT ShipCity). The difference in table references doesn't affect the result since CustomerID is primary in both contexts.,both
Which shipping method is used most frequently?,"SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT ShipVia, COUNT(OrderID) AS Frequency
FROM orders
GROUP BY ShipVia
ORDER BY Frequency DESC
LIMIT 1;
```","Both queries group by 'ShipVia' and count 'OrderID', ordering by the count to get the most frequent shipping method, and limit the result to one entry.","SELECT ShipVia, COUNT(OrderID) AS TimesUsed FROM orders GROUP BY ShipVia ORDER BY TimesUsed DESC LIMIT 1;",Both queries count the number of orders per shipping method and return the most frequently used method by limiting the result to one with the highest count.,both
What is the average order value for each employee?,"SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","Both queries calculate the average order value for each employee by joining employees, orders, and order details, grouping by employee ID. The inclusion of first and last name in the GROUP BY of the generated query does not affect the correctness since they're associated with the same employee ID.","SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",Both queries calculate the average order value for each employee using the same logic and SQL structure. The difference in alias names for the AVG column does not affect the output.,both
What is the trend of order placements over the past year?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderCount
FROM orders
WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
GROUP BY Month
ORDER BY Month;
```","Both queries perform the same operations: they count orders per month for the past year, grouping by year-month and ordering by the same. The slight syntax differences do not affect the result.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY OrderMonth ORDER BY OrderMonth DESC;","Both queries generate the monthly count of orders for the past year, ordering results by month. The differences in function use ('CURDATE' vs. 'CURRENT_DATE') and alias naming do not affect the outcome.",both
What is the total quantity of products sold this year?,SELECT SUM([Order Details].Quantity) FROM [Order Details] WHERE EXTRACT(YEAR FROM [Order Details].OrderID) = EXTRACT(YEAR FROM CURRENT_DATE);,"```sql
SELECT SUM([Order Details].Quantity) AS TotalQuantitySold
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
WHERE YEAR([Order Details].OrderID) = YEAR(CURRENT_DATE);
```","The generated SQL query includes an unnecessary JOIN with the 'products' table, which is not required for calculating the total quantity. It should only aggregate the 'Quantity' from '[Order Details]'.",SELECT SUM(Quantity) AS TotalQuantitySold FROM [Order Details] WHERE YEAR(OrderID) = YEAR(CURRENT_DATE);,"The queries are comparing the year from OrderID, which is incorrect since OrderID is not a date column. They should compare the year from a date column like OrderDate.",None
What is the average order fulfillment time for each employee?,"SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY EmployeeID;","```sql
SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY EmployeeID;
```",The generated SQL query and the ground truth query are identical in logic and will return the same results.,"SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageFulfillmentTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;","Both queries calculate the average order fulfillment time per employee by finding the average difference between the ShippedDate and OrderDate for orders. The join with the employees table in the generated query does not affect the result, as it correctly groups by EmployeeID.",both
How many products are below their reorder level?,SELECT COUNT(ProductName) AS NumberOfProducts FROM products WHERE UnitsInStock < ReorderLevel;,"```sql
SELECT COUNT(*) AS ProductsBelowReorderLevel
FROM products
WHERE UnitsInStock < ReorderLevel;
```","Both queries count the number of products where UnitsInStock is less than ReorderLevel. The column used in the COUNT function (either * or ProductName) does not affect the result as long as it excludes NULL values, which doesn't apply to the condition here.",SELECT COUNT(*) AS LowStockProducts FROM products WHERE UnitsInStock <= ReorderLevel;,"The generated query uses '<=' to compare 'UnitsInStock' and 'ReorderLevel', while the ground truth query uses '<'. This could lead to different results if any product has 'UnitsInStock' exactly equal to 'ReorderLevel'.",Base
What is the on-time delivery rate for each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    COUNT(OrderID) AS TotalOrders,
    COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) AS OnTimeDeliveries,
    (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate
FROM 
    orders
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries calculate the percentage of on-time deliveries for each month by dividing the count of on-time deliveries by the total orders, then multiplying by 100. The slightly different syntax (DATE_FORMAT vs. DATE_TRUNC and CASE WHEN vs. FILTER) achieves the same result.","SELECT DATE_TRUNC('month', OrderDate) AS month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS on_time_delivery_rate FROM orders GROUP BY month;",Both queries calculate the on-time delivery rate for each month using different syntax but yield equivalent results by counting orders shipped on or before the required date and dividing by the total order count.,both
Which products have sales exceeding their reorder levels?,SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity) > p.ReorderLevel,"```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
HAVING SUM(od.Quantity) > p.ReorderLevel
```","Both queries correctly identify products with total sales exceeding their reorder levels, with different select clauses.",SELECT products.ProductName FROM products WHERE products.UnitsOnOrder + products.UnitsInStock > products.ReorderLevel,"The generated query compares UnitsOnOrder and UnitsInStock to the ReorderLevel, while the ground truth query checks if the sum of ordered quantities exceeds the ReorderLevel. They differ in logic and intended comparison.",Base
What is the average shipping delay time for late shipments?,"SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgShippingDelayTime FROM orders WHERE ShippedDate > RequiredDate;","```sql
SELECT AVG(DATEDIFF(orders.ShippedDate, orders.RequiredDate) ) AS Average_Shipping_Delay
FROM orders
WHERE orders.ShippedDate > orders.RequiredDate;
```","Both queries calculate the average delay for shipments sent after their required date. They use the same logic and conditions, ensuring the results are equivalent.","SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgDelay FROM orders WHERE ShippedDate > RequiredDate;","Both queries calculate the average of the difference between ShippedDate and RequiredDate for orders where ShippedDate is later than RequiredDate, providing the average shipping delay time for late shipments.",both
What is the total freight cost associated with orders handled by each employee?,"SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(o.Freight) AS TotalFreight
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","Both queries calculate the total freight cost for each employee. The generated query includes employee names in the SELECT and GROUP BY clauses, which doesn't affect the aggregation result.","SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",The generated SQL query and the ground truth SQL query are identical and accurately retrieve the total freight cost by each employee.,both
Which city has the most suppliers?,"SELECT City, COUNT(SupplierID) AS Supplier_Count FROM suppliers GROUP BY City ORDER BY Supplier_Count DESC LIMIT 1","```sql
SELECT City, COUNT(*) as SupplierCount
FROM suppliers
GROUP BY City
ORDER BY SupplierCount DESC
LIMIT 1;
```","Both queries effectively count the number of suppliers per city, group by city, order the results in descending order by count, and limit the output to the top result. The use of COUNT(*) and COUNT(SupplierID) yields the same result since both count the number of rows per group.","SELECT suppliers.City, COUNT(suppliers.SupplierID) AS SupplierCount FROM suppliers GROUP BY suppliers.City ORDER BY SupplierCount DESC LIMIT 1;","Both queries perform the same operations: they count suppliers by city, group by city, and order by the count in descending order, limiting the result to the top city.",both
Find the customer with the longest duration between first and last order.,"SELECT c.CustomerID, DATEDIFF(MAX(o.OrderDate), MIN(o.OrderDate)) AS Duration FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY Duration DESC LIMIT 1;","```sql
SELECT c.CustomerID, c.CompanyName, 
       DATEDIFF(MAX(o.OrderDate), MIN(o.OrderDate)) AS Duration
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerID, c.CompanyName
ORDER BY Duration DESC
LIMIT 1;
```","Both queries return the customer with the longest order duration. The Generated SQL additionally selects the CompanyName, but it doesn't affect the output related to the user's question.","SELECT customers.CompanyName, DATEDIFF(MAX(orders.OrderDate), MIN(orders.OrderDate)) AS Duration FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CompanyName ORDER BY Duration DESC LIMIT 1;",Both queries calculate the duration between the first and last order for each customer by using the DATEDIFF function and return the customer with the longest duration. The difference in selected columns (CompanyName vs CustomerID) does not affect the correctness in terms of the requested outcome.,both
Determine the total discounts given to each customer.,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;","```sql
SELECT customers.CustomerID, SUM([Order Details].Discount) AS TotalDiscount
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID;
```","The generated SQL query only sums the Discount field directly, while the ground truth query calculates the discount as a product of UnitPrice, Quantity, and Discount, which factors the order's volume and price into the total discount.","SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY CustomerID;","The generated query may not account for orders without entries in the 'Order Details' table, potentially omitting some customers.",None
What is the total freight cost for orders shipped to 'USA'?,SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShipCountry = 'USA';,"```sql
SELECT SUM(Freight) AS TotalFreightCost
FROM orders
WHERE ShipCountry = 'USA';
```","Both queries calculate the total freight cost for orders shipped to 'USA', and they are functionally identical.",SELECT SUM(orders.Freight) AS total_freight_cost FROM orders WHERE orders.ShipCountry = 'USA',Both queries calculate the sum of Freight for orders where ShipCountry is 'USA'. They will yield the same result despite slight differences in alias naming.,both
What is the frequency of orders shipped versus not shipped by month?,"SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(*) FILTER (WHERE ShippedDate IS NOT NULL) AS Shipped, COUNT(*) FILTER (WHERE ShippedDate IS NULL) AS NotShipped FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    COUNT(OrderID) AS TotalOrders,
    COUNT(CASE WHEN ShippedDate IS NOT NULL THEN 1 END) AS OrdersShipped,
    COUNT(CASE WHEN ShippedDate IS NULL THEN 1 END) AS OrdersNotShipped
FROM 
    orders
GROUP BY 
    Month
```","Both queries group by months and count orders based on whether they have a shipped date or not, achieving the same goal despite minor syntax differences.","SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS month, COUNT(CASE WHEN orders.ShippedDate IS NOT NULL THEN 1 END) AS shipped_count, COUNT(CASE WHEN orders.ShippedDate IS NULL THEN 1 END) AS not_shipped_count FROM orders WHERE orders.OrderDate >= '2022-01-01' GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM')",The generated query includes a date filter (orders.OrderDate >= '2022-01-01') which is not present in the ground truth query. This could lead to different results depending on the data.,Base
Which category has the highest average unit price?,"SELECT CategoryID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY CategoryID ORDER BY AvgUnitPrice DESC LIMIT 1;","```sql
SELECT CategoryID, AVG(UnitPrice) AS AverageUnitPrice
FROM products
GROUP BY CategoryID
ORDER BY AverageUnitPrice DESC
LIMIT 1;
```","Both queries accurately compute the category with the highest average unit price by grouping by CategoryID, averaging the UnitPrice, ordering in descending order, and limiting the result to the top entry.","SELECT CategoryID, AVG(UnitPrice) AS AvgPrice FROM products GROUP BY CategoryID ORDER BY AvgPrice DESC LIMIT 1","Both queries calculate the average unit price for each category and return the category with the highest average. Only the alias for the average value differs, which does not affect the result.",both
What percentage of customers are returning customers within the last month?,SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN CURRENT_DATE - INTERVAL '1 month' AND CURRENT_DATE THEN orders.CustomerID END) / COUNT(DISTINCT orders.CustomerID)) * 100 AS RetentionRate FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate < CURRENT_DATE - INTERVAL '1 month';,"```sql
SELECT 
    (COUNT(DISTINCT o2.CustomerID) * 100.0 / COUNT(DISTINCT o1.CustomerID)) AS ReturningCustomerPercentage
FROM 
    orders o1
LEFT JOIN 
    orders o2 ON o1.CustomerID = o2.CustomerID AND o2.OrderDate >= DATEADD(MONTH, -1, GETDATE()) 
WHERE 
    o1.OrderDate < DATEADD(MONTH, -1, GETDATE())
```","The generated query calculates the returning customers by excluding customers who made an order before last month, but doesn't ensure they also ordered within the last month. The ground truth query correctly calculates the percentage of returning customers by comparing customers who ordered in the last month against all customers who ordered before the last month.",SELECT (COUNT(DISTINCT orders.CustomerID) - COUNT(DISTINCT previous_orders.CustomerID)) * 100.0 / COUNT(DISTINCT previous_orders.CustomerID) AS ReturningCustomerPercentage FROM orders WHERE orders.OrderDate BETWEEN '2023-09-01' AND '2023-09-30' LEFT JOIN orders AS previous_orders ON orders.CustomerID = previous_orders.CustomerID AND previous_orders.OrderDate < '2023-09-01';,"The generated query attempts to calculate the percentage of returning customers within a specific date range, but it mistakenly calculates the returning customers as those who did not have orders before. The ground truth query aims to calculate the retention rate using a different logic, considering orders in the last month versus all unique customers. Both have different logics and outputs.",None
What is the average fulfillment time for orders shipped by each method?,"SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY ShipVia;
```",The generated SQL query and the ground truth query are identical and accurately answer the user's question.,"SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia;","The queries are essentially the same except for the alias used for the average calculation, but they will produce the same results.",both
How many orders have a discount of more than 20%?,SELECT COUNT(DISTINCT OrderID) FROM [Order Details] WHERE Discount > 0.2;,"```sql
SELECT COUNT(*) AS OrderCount
FROM [Order Details]
WHERE Discount > 0.20;
```","The generated query counts all rows with a discount greater than 20%, while the ground truth query counts distinct OrderIDs with a discount greater than 20%.",SELECT COUNT(DISTINCT OrderID) AS orders_with_high_discount FROM [Order Details] WHERE Discount > 0.2,Both queries count distinct OrderIDs where the Discount is more than 20%. The column alias in the generated query does not affect the result.,FT
In which month did we have the highest total sales?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY OrderMonth ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS SalesMonth, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY SalesMonth
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries calculate total sales per month and return the month with the highest sales amount, with only minor differences in alias naming and table aliasing.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY TotalSales DESC LIMIT 1;","Both queries calculate total sales per month by joining orders with order details and then order the results by total sales in descending order, limiting to the top result. Minor differences in aliasing do not impact the logic.",both
Which customer ordered the highest quantity of a single product?,"SELECT o.CustomerID, od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID, od.ProductID ORDER BY TotalQuantity DESC LIMIT 1","```sql
SELECT o.CustomerID, d.ProductID, SUM(d.Quantity) AS TotalQuantity
FROM orders o
JOIN [Order Details] d ON o.OrderID = d.OrderID
GROUP BY o.CustomerID, d.ProductID
ORDER BY TotalQuantity DESC
LIMIT 1;
```","The generated SQL query and the ground truth SQL query are functionally equivalent and will yield the same result. They both find the customer who ordered the highest quantity of a single product by grouping by CustomerID and ProductID, summing the Quantity, and sorting in descending order to fetch the maximum.","SELECT orders.CustomerID, [Order Details].ProductID, [Order Details].Quantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID ORDER BY [Order Details].Quantity DESC LIMIT 1","The generated query finds the single highest entry for Quantity, whereas the ground truth query aggregates quantities by CustomerID and ProductID before finding the maximum. They may yield different results.",Base
Which product has the highest unit price?,SELECT ProductName FROM products WHERE UnitPrice = (SELECT MAX(UnitPrice) FROM products);,"```sql
SELECT ProductID, ProductName, UnitPrice
FROM products
ORDER BY UnitPrice DESC
LIMIT 1;
```","Both queries aim to find the product with the highest unit price. The generated query uses ORDER BY with LIMIT 1 to find the highest, while the ground truth uses a subquery with MAX. Both yield the same result.",SELECT ProductName FROM products ORDER BY UnitPrice DESC LIMIT 1;,"Both queries return the product with the highest unit price. The generated query orders by UnitPrice in descending order and limits to 1 result, while the ground truth query uses a subquery to find the maximum UnitPrice. Although their approaches are different, they yield the same result.",both
What is the average price of products per supplier?,"SELECT SupplierID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY SupplierID;","```sql
SELECT SupplierID, AVG(UnitPrice) AS AveragePrice
FROM products
GROUP BY SupplierID;
```",Both queries calculate the average UnitPrice per SupplierID from the products table and will yield the same results.,"SELECT products.SupplierID, AVG(products.UnitPrice) AS AveragePrice FROM products GROUP BY products.SupplierID;","Both queries calculate the average price of products grouped by SupplierID and will yield the same results, despite differences in column referencing.",both
Calculate the customer retention rate for the first half of 2023.,(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-01-01') AS retention_rate,"```sql
SELECT 
    (SELECT COUNT(DISTINCT orders.CustomerID) 
     FROM orders 
     WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30') 
    / 
    (SELECT COUNT(DISTINCT orders.CustomerID) 
     FROM orders 
     WHERE orders.OrderDate < '2023-01-01') AS customer_retention_rate
```",The generated SQL query and the ground truth query both calculate the retention rate for the first half of 2023 using the same logic and yield the same results.,SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30' THEN orders.CustomerID END) * 100.0 / COUNT(DISTINCT orders.CustomerID)) AS customer_retention_rate FROM orders WHERE orders.OrderDate < '2023-01-01' OR orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30',"The generated SQL calculates retention incorrectly. It counts customers before 2023 and during the first half of 2023, not comparing with those just before 2023. Ground Truth calculates distinct customers in the first half of 2023 divided by those before 2023, the accurate retention rate.",Base
Which suppliers have the fastest average lead time?,"SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM products p JOIN orders o ON p.ProductID = o.OrderID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY p.SupplierID ORDER BY AvgLeadTime ASC LIMIT 5;","```sql
SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.SupplierID, suppliers.CompanyName
ORDER BY AverageLeadTime ASC
```","The generated query calculates the average lead time for each supplier correctly. However, the ground truth query limits the results to the top 5 suppliers with the fastest lead time, which is not present in the generated query.","SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.SupplierID ORDER BY avg_lead_time ASC",The generated query does not limit the results to the top 5 suppliers as the ground truth query does.,None
Find products with the highest discrepancy between units in stock and units on order.,"SELECT ProductID, ABS(UnitsInStock - UnitsOnOrder) AS Discrepancy FROM products ORDER BY Discrepancy DESC;","```sql
SELECT ProductID, ProductName, UnitsInStock, UnitsOnOrder,
       (UnitsInStock - UnitsOnOrder) AS Discrepancy
FROM products
WHERE Discontinued = 0
ORDER BY Discrepancy DESC
LIMIT 10;
```","The generated query calculates the difference between UnitsInStock and UnitsOnOrder as negative or positive based on which is greater, while the ground truth query uses ABS() to get the absolute difference. Also, the generated query filters by Discontinued and limits results to 10, which the ground truth does not.",SELECT ProductName FROM products ORDER BY ABS(UnitsInStock - UnitsOnOrder) DESC LIMIT 1;,"The generated query retrieves only the ProductName and limits the output to 1 product, while the ground truth retrieves ProductID and the calculated discrepancy without a limit.",None
Identify employees who have birthdays this month.,"SELECT EmployeeID, CONCAT(FirstName, ' ', LastName) AS EmployeeName FROM employees WHERE MONTH(BirthDate) = MONTH(CURRENT_DATE) AND YEAR(BirthDate) <> YEAR(CURRENT_DATE);","```sql
SELECT EmployeeID, FirstName, LastName, BirthDate
FROM employees
WHERE MONTH(BirthDate) = MONTH(CURRENT_DATE())
AND YEAR(BirthDate) <= YEAR(CURRENT_DATE());
```","The generated query uses '<=' for the year filter, allowing current year birthdays, whereas the ground truth uses '<>', excluding them.","SELECT FirstName, LastName, Birthday FROM employees WHERE EXTRACT(MONTH FROM Birthday) = EXTRACT(MONTH FROM CURRENT_DATE);","The generated query includes employees with birthdays this year, while the ground truth excludes them. Also, the column selections differ.",None
Which products have inventory levels below their reorder level?,SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock < ReorderLevel;
```","The generated query retrieves additional columns (ProductID, UnitsInStock, ReorderLevel) that are not requested in the user's question, while the ground truth query only retrieves ProductName.",SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"Both queries select 'ProductName' from 'products' where 'UnitsInStock' is less than 'ReorderLevel', fulfilling the user's request exactly.",FT
Which product categories have the fastest inventory turnover?,"SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) AS turnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY turnover DESC","```sql
SELECT categories.CategoryID, categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN categories ON products.CategoryID = categories.CategoryID
GROUP BY categories.CategoryID, categories.CategoryName
ORDER BY inventory_turnover_ratio DESC
```","The generated query includes 'CategoryID' in the SELECT and GROUP BY clauses, while the ground truth query does not. Also, the ground truth uses NULLIF to prevent division by zero, which is not handled in the generated query.","SELECT categories.CategoryID, categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID, categories.CategoryName ORDER BY turnover_ratio DESC","The generated query divides by AVG(products.UnitsInStock) without handling division by zero, unlike the ground truth query which uses NULLIF to prevent it.",None
What was the most common order month for new customers?,"SELECT EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, COUNT(o.CustomerID) AS NewCustomerCount FROM orders o JOIN customers c ON o.CustomerID = c.CustomerID WHERE o.OrderDate = c.RegisterDate GROUP BY OrderMonth ORDER BY NewCustomerCount DESC LIMIT 1;","```sql
SELECT EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, COUNT(*) AS OrderCount
FROM orders o
JOIN customers c ON o.CustomerID = c.CustomerID
WHERE o.OrderDate = (
    SELECT MIN(o2.OrderDate)
    FROM orders o2
    WHERE o2.CustomerID = c.CustomerID
)
GROUP BY OrderMonth
ORDER BY OrderCount DESC
LIMIT 1;
```","The generated query checks for the first order date, while the ground truth checks if the order date matches the registration date.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, COUNT(DISTINCT CustomerID) AS num_customers FROM orders WHERE CustomerID NOT IN (SELECT CustomerID FROM orders ORDER BY OrderDate ASC LIMIT 1) GROUP BY OrderMonth ORDER BY num_customers DESC LIMIT 1;","The generated SQL query attempts to find new customers by excluding those who have the earliest order dates, but it doesn't correctly identify new customers based on their registration date, unlike the ground truth query.",None
Find the employee with the highest average order value.,"SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AvgOrderValue DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
ORDER BY AverageOrderValue DESC
LIMIT 1;
```",Both queries calculate the average order value per employee and return the employee with the highest value. Minor column differences do not affect the result.,"SELECT o.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM orders o JOIN ""[Order Details]"" od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID ORDER BY AvgOrderValue DESC LIMIT 1;","The generated query does not explicitly join with the employees table, which can lead to incorrect results if there are EmployeeIDs in orders not present in employees.",Base
How long does it take on average to fulfill an order each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
    AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM 
    orders
GROUP BY 
    Month
```","The generated query uses DATE_FORMAT which is MySQL-specific, while the ground truth uses DATE_TRUNC, indicating a SQL dialect mismatch. The results may still be similar, but the functionality depends on the SQL database system used.","SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(CAST(ShippedDate AS DATE) - CAST(OrderDate AS DATE)) AS AverageFulfillmentTime FROM orders GROUP BY Month;",Both queries calculate the average fulfillment time per month by subtracting OrderDate from ShippedDate and grouping the results by month.,FT
What is the percentage of orders shipped within the specified region?,"SELECT ShipRegion, 100.0 * COUNT(OrderID) / (SELECT COUNT(*) FROM orders WHERE ShipRegion IS NOT NULL) AS RegionShipmentPercentage FROM orders WHERE ShipRegion IS NOT NULL GROUP BY ShipRegion;","```sql
SELECT 
    (COUNT(OrderID) * 100.0 / (SELECT COUNT(OrderID) FROM orders)) AS PercentageShippedWithinRegion
FROM 
    orders
WHERE 
    ShipRegion = 'YourSpecifiedRegion';
```","The generated query calculates the percentage of orders shipped within a single specified region, while the ground truth query calculates the shipment percentage for all non-null regions.",SELECT (COUNT(CASE WHEN ShipRegion = 'YourRegion' THEN 1 END) * 100.0) / COUNT(OrderID) AS PercentageShippedInRegion FROM orders;,"The generated query calculates the percentage for one specific region 'YourRegion', while the ground truth query calculates the percentage for all regions where ShipRegion is not NULL. They have different scopes.",None
Find the top 5 products by sales revenue.,"SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalRevenue DESC LIMIT 5","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS SalesRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY SalesRevenue DESC
LIMIT 5;
```","Both queries calculate sales revenue by summing the product of quantity and unit price, group by product, and order by revenue in descending order, with a limit of 5 results. The difference in alias names (SalesRevenue vs. TotalRevenue) doesn't affect the result.","SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS SalesRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SalesRevenue DESC LIMIT 5;","The generated SQL query includes discounts in the revenue calculation, while the ground truth query does not account for discounts.",Base
What percentage of products are above their reorder level?,SELECT (COUNT(*) FILTER(WHERE UnitsInStock > ReorderLevel) * 100.0 / COUNT(*)) AS PercentageAbove FROM products;,"```sql
SELECT 
    (COUNT(CASE WHEN UnitsInStock > ReorderLevel THEN 1 END) * 100.0) / COUNT(*) AS PercentageAboveReorderLevel
FROM 
    products;
```",Both queries calculate the percentage of products with 'UnitsInStock' greater than 'ReorderLevel'. They use different syntaxes (CASE WHEN vs. FILTER) but achieve the same result.,SELECT (CAST(COUNT(CASE WHEN unitsinstock > reorderlevel THEN 1 END) AS FLOAT) / COUNT(*)) * 100 AS PercentageAboveReorder FROM products;,"Both queries calculate the percentage of products where units in stock are greater than the reorder level using similar logic. The syntax differs, but they produce the same result.",both
Calculate the total revenue generated from each country.,"SELECT Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Country;","```sql
SELECT customers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.Country;
```","Both queries perform the same joins and calculations, grouping by country to sum total revenue. They will yield the same results.","SELECT customers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.Country;",Both queries join the same tables and calculate total revenue per country using the same formula and grouping strategy. The order of joins and initial table reference do not affect the result.,both
How many orders were placed each month in the last year?,"SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 year' GROUP BY Year, Month ORDER BY Year, Month;","```sql
SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS TotalOrders
FROM orders
WHERE OrderDate >= DATEADD(year, -1, CURRENT_DATE)
GROUP BY Month
ORDER BY Month;
```","Both queries count the number of orders placed each month in the last year and group them by month. Despite differences in date functions and alias naming, they yield the same results.","SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 year' GROUP BY Month;","The generated query does not include the year in the grouping, which could cause incorrect results if dates span multiple years. It groups by month only, leading to potential aggregation of orders from different years.",Base
What are the top 3 regions with the highest order volumes?,"SELECT territories.TerritoryDescription, COUNT(orders.OrderID) AS order_count FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryDescription ORDER BY order_count DESC LIMIT 3","```sql
SELECT ShipRegion, COUNT(OrderID) AS order_volume
FROM orders
GROUP BY ShipRegion
ORDER BY order_volume DESC
LIMIT 3;
```","The generated query groups by ShipRegion, while the ground truth groups by TerritoryDescription. They measure order volume differently.","SELECT ShipRegion, COUNT(OrderID) AS region_order_volume FROM orders GROUP BY ShipRegion ORDER BY region_order_volume DESC LIMIT 3","The queries are using different criteria for determining 'region'. The generated query uses 'ShipRegion' from the orders table, while the ground truth uses territories and their descriptions through join operations. They do not yield the same results.",None
Which discontinued products have pending orders?,SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1 AND od.Quantity > 0 GROUP BY p.ProductName,"```sql
SELECT p.ProductID, p.ProductName, p.UnitsOnOrder
FROM products p
WHERE p.Discontinued = 1 AND p.UnitsOnOrder > 0;
```","The generated query checks for discontinued products with non-zero units on order, while the ground truth checks for discontinued products with pending orders with a quantity greater than 0 in the Order Details table.",SELECT p.ProductName FROM products p WHERE p.Discontinued = 1 AND p.ProductID IN (SELECT DISTINCT od.ProductID FROM [Order Details] od WHERE od.Quantity > 0);,"Both queries identify discontinued products with quantity greater than 0 in 'Order Details', effectively capturing products with pending orders.",FT
What percentage of orders have a shipping address in the 'California' region?,SELECT (COUNT(OrderID) FILTER (WHERE ShipRegion = 'California') * 100.0 / COUNT(OrderID)) AS PercentageInCalifornia FROM orders;,"```sql
SELECT 
    (COUNT(CASE WHEN ShipRegion = 'California' THEN 1 END) * 100.0 / COUNT(OrderID)) AS PercentageCalifornia
FROM 
    orders;
```","Both queries correctly calculate the percentage of orders with 'California' as the shipping region. They use different syntax (CASE vs. FILTER), but they yield the same results.",SELECT (COUNT(OrderID) FILTER (WHERE ShipRegion = 'California') / COUNT(OrderID) * 100) AS PercentageInCalifornia FROM orders;,"Both queries calculate the percentage of orders where the shipping region is 'California'. The order of operations ensures the division is performed first, yielding the same numerical result.",both
Identify customers with the highest average order frequency.,"SELECT customers.CustomerID, COUNT(orders.OrderID) / NULLIF(DATEDIFF(MAX(orders.OrderDate), MIN(orders.OrderDate)), 0) AS AverageOrderFrequency FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID ORDER BY AverageOrderFrequency DESC;","```sql
SELECT customers.CustomerID, customers.CompanyName, COUNT(orders.OrderID) AS OrderFrequency
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
GROUP BY customers.CustomerID, customers.CompanyName
ORDER BY OrderFrequency DESC
LIMIT 1;
```",The generated query calculates total order frequency rather than average order frequency over time as per the ground truth query.,"SELECT c.CustomerID, COUNT(DISTINCT o.OrderID) / COUNT(DISTINCT DATE(o.OrderDate)) AS AvgOrderFrequency FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY AvgOrderFrequency DESC LIMIT 10;","The generated query calculates average order frequency by dividing the total number of distinct orders by the number of distinct days, which may not accurately reflect the average frequency. The ground truth query calculates frequency by dividing the count of orders by the difference in days between the first and last order dates, giving a more realistic measure of frequency over time.",None
Which products have less stock than their reorder level?,SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock < ReorderLevel;
```",The generated query includes additional columns (ProductID and UnitsInStock) which are not requested in the ground truth query that only selects ProductName.,"SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;","The generated SQL query includes the 'ProductID' column in the SELECT clause, whereas the ground truth query only selects 'ProductName'.",None
Calculate the total value of products currently in stock.,SELECT SUM(UnitsInStock * UnitPrice) AS TotalStockValue FROM products;,"```sql
SELECT SUM(UnitPrice * UnitsInStock) AS TotalValueInStock
FROM products
WHERE Discontinued = 0;
```","The generated query filters products that are not discontinued, while the ground truth query includes all products.",SELECT SUM(UnitPrice * UnitsInStock) AS TotalStockValue FROM products;,"Both queries calculate the total stock value by multiplying UnitPrice and UnitsInStock, and summing the result. The order of multiplication does not affect the outcome.",FT
List the top 5 employees based on the number of orders handled.,"SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) as OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY OrderCount DESC LIMIT 5;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS OrderCount
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID
ORDER BY OrderCount DESC
LIMIT 5;
```","Both queries group by employees and order by the number of orders in descending order, returning the top 5 employees. The difference in grouping does not affect the result set.","SELECT o.EmployeeID, CONCAT(e.FirstName, ' ', e.LastName) AS FullName, COUNT(o.OrderID) AS OrdersHandled FROM orders o JOIN employees e ON o.EmployeeID = e.EmployeeID GROUP BY o.EmployeeID, e.FirstName, e.LastName ORDER BY OrdersHandled DESC LIMIT 5;","Both queries accurately list the top 5 employees based on the number of orders handled. They have minor differences in alias naming and selected columns, but they produce equivalent results.",both
Who are the top 5 sales employees based on total sales?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 5;","```sql
SELECT e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 5;
```","The generated query selects FirstName and LastName, whereas the ground truth query selects EmployeeID. Also, the use of LIMIT may not be supported in some SQL databases such as SQL Server, which uses TOP instead.","SELECT e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY TotalSales DESC LIMIT 5;","Both queries rank employees by total sales and select the top 5. The generated query additionally selects employee names, but this does not affect the result for identifying the top sales employees.",FT
Identify the month with the highest number of new customers.,"SELECT MONTH(OrderDate) AS Month, COUNT(DISTINCT c.CustomerID) AS NewCustomers FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY MONTH(OrderDate) ORDER BY NewCustomers DESC LIMIT 1;","```sql
SELECT DATE_TRUNC('month', c.CreatedAt) AS Month, COUNT(c.CustomerID) AS NewCustomers
FROM customers c
GROUP BY Month
ORDER BY NewCustomers DESC
LIMIT 1;
```","The generated query counts new customers based on their creation date without considering any associated orders, while the ground truth counts distinct customers from the orders table in each month.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, COUNT(DISTINCT CustomerID) AS NewCustomers FROM orders GROUP BY OrderMonth ORDER BY NewCustomers DESC LIMIT 1;",The generated query counts unique customers for each month they made an order without ensuring they are new. The ground truth query correctly identifies new customers by joining on customer data and considering them in monthly groups.,None
How has the average order value changed over time?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;","```sql
SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month,
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY Month
ORDER BY Month;
```","Both queries calculate the average order value per month using the same logic and operations. The difference is only in the ordering of results, which doesn't affect the correctness of the answer to the question asked.","SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month ORDER BY Month;","Both queries calculate the average order value by month using similar logic, with minor differences in date formatting functions and aliases, which do not affect the outcome.",both
How many products have been discontinued and what was their total sales performance?,"SELECT COUNT(DISTINCT products.ProductID) AS discontinued_products_count, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1","```sql
SELECT COUNT(products.ProductID) AS discontinued_product_count, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales_performance 
FROM products 
LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID 
WHERE products.Discontinued = 1
```","The generated query uses a LEFT JOIN which might count products without sales orders, whereas the ground truth uses an INNER JOIN ensuring only products with sales are counted. Additionally, the ground truth uses COUNT(DISTINCT) to ensure unique product count.","SELECT COUNT(p.ProductID) AS DiscontinuedCount, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1;",Both queries count discontinued products and calculate total sales for those products without affecting the results by details like duplicate counting.,FT
What is the average freight cost for all orders?,SELECT AVG(Freight) FROM orders;,"```sql
SELECT AVG(Freight) AS AverageFreightCost FROM orders;
```","Both queries calculate the average freight cost from the 'orders' table using the AVG function on the Freight column, resulting in identical outcomes.",SELECT AVG(Freight) AS AverageFreightCost FROM orders;,"Both queries calculate the average of the 'Freight' column from the 'orders' table. The generated query includes an alias for the result, which does not affect the outcome.",both
How many orders did each employee process last quarter?,"SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND CURRENT_DATE GROUP BY e.EmployeeID;","```sql
SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.OrderDate >= DATEADD(QUARTER, -1, GETDATE()) AND o.OrderDate < GETDATE()
GROUP BY e.EmployeeID
```","The 'Generated SQL Query' uses DATEADD with GETDATE, implying SQL Server, while the 'Ground Truth SQL Query' uses DATE_SUB with CURRENT_DATE, implying MySQL. These functions may not calculate the last quarter the same way. Also, GETDATE returns a datetime which can include time, affecting results when compared to CURRENT_DATE.","SELECT e.FirstName, e.LastName, COUNT(o.OrderID) AS OrdersProcessed FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY e.EmployeeID, e.FirstName, e.LastName;","The generated query includes employee names and a different logic for the date range, which might not match the exact last quarter as intended in the ground truth query.",None
How many customers are located in each country?,"SELECT Country, COUNT(CustomerID) FROM customers GROUP BY Country;","```sql
SELECT Country, COUNT(CustomerID) AS CustomerCount
FROM customers
GROUP BY Country;
```",Both queries count the number of customers in each country by grouping on the Country column.,"SELECT Country, COUNT(*) FROM customers GROUP BY Country;",Both queries count the number of customers per country using the GROUP BY clause and will yield the same results. COUNT(*) and COUNT(CustomerID) are functionally equivalent in this context since every row in the 'customers' table presumably has a CustomerID.,both
Which cities have the most suppliers?,"SELECT suppliers.City, COUNT(suppliers.SupplierID) AS NumberOfSuppliers FROM suppliers GROUP BY suppliers.City ORDER BY NumberOfSuppliers DESC","```sql
SELECT City, COUNT(SupplierID) AS SupplierCount
FROM suppliers
GROUP BY City
ORDER BY SupplierCount DESC;
```","Both queries group suppliers by city and count the number of suppliers, ordering them in descending order of the count. They will yield the same result.","SELECT suppliers.City, COUNT(suppliers.SupplierID) AS Total FROM suppliers GROUP BY suppliers.City ORDER BY Total DESC;","Both queries count the number of suppliers per city, group by city, and order the results in descending order by the count, making them functionally equivalent.",both
What is the average order fulfillment time for each employee?,"SELECT EmployeeID, AVG(DATEDIFF(ShipDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EmployeeID;","```sql
SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY EmployeeID;
```","Generated SQL query uses 'ShippedDate' while the ground truth query uses 'ShipDate'. If these are different columns, the results may vary.","SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS employee_name, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate IS NOT NULL GROUP BY employees.EmployeeID, employee_name","The generated query includes employee names and filters for non-null shipped dates, while the ground truth does not.",None
What is the percentage of orders delivered on time in 2023?,SELECT (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31',"```sql
SELECT (COUNT(orders.OrderID) FILTER (WHERE orders.ShippedDate <= orders.RequiredDate) * 100.0) / COUNT(orders.OrderID) AS on_time_delivery_rate 
FROM orders 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
```",Both queries calculate the percentage of orders delivered on time in 2023 using equivalent logic: counting orders delivered on or before the required date and dividing by the total order count.,SELECT 100.0 * COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) / COUNT(OrderID) AS on_time_percentage FROM orders WHERE YEAR(OrderDate) = 2023,"Both queries compute the percentage of orders delivered on time in 2023 by comparing ShippedDate with RequiredDate. The date filtering for orders in 2023 is consistent: the generated query uses YEAR(OrderDate) = 2023, while the ground truth query uses a date range. Both yield the same result for orders in 2023.",both
What is the most common quantity per unit for products in inventory?,"SELECT QuantityPerUnit, COUNT(*) AS Count FROM products WHERE UnitsInStock > 0 GROUP BY QuantityPerUnit ORDER BY Count DESC LIMIT 1;","```sql
SELECT QuantityPerUnit, COUNT(*) AS Frequency
FROM products
GROUP BY QuantityPerUnit
ORDER BY Frequency DESC
LIMIT 1;
```","The generated SQL query does not filter products that are in stock ('UnitsInStock > 0'), whereas the ground truth query does.","SELECT QuantityPerUnit, COUNT(*) AS Frequency FROM products WHERE UnitsInStock > 0 GROUP BY QuantityPerUnit ORDER BY Frequency DESC LIMIT 1;",Both queries count the frequency of 'QuantityPerUnit' for products with stock and return the most common one.,FT
What is the average freight cost broken down by shipping country?,"SELECT ShipCountry, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipCountry;","```sql
SELECT ShipCountry, AVG(Freight) AS AverageFreightCost
FROM orders
GROUP BY ShipCountry;
```",Both queries calculate the average freight cost for each shipping country using the AVG function and group the results by ShipCountry. The difference in the alias name does not affect the outcome.,"SELECT ShipCountry, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipCountry;",Both queries calculate the average freight cost grouped by shipping country. Differences in column alias names do not affect the result.,both
How many unique customers placed orders each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
    COUNT(DISTINCT CustomerID) AS UniqueCustomers
FROM 
    orders
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries group by month and count distinct customers, but use different date functions based on SQL dialect. The logic is equivalent.","SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');","Both queries group by month and count distinct customers, differing only in date format representation.",both
How many orders placed in Q2 2023 used expedited shipping?,SELECT COUNT(OrderID) AS expedited_orders FROM orders WHERE ShipVia IN (SELECT ShipperID FROM shippers WHERE CompanyName LIKE '%Expedited%') AND OrderDate BETWEEN '2023-04-01' AND '2023-06-30',"```sql
SELECT COUNT(orders.OrderID) AS expedited_orders
FROM orders
WHERE orders.ShipVia = 1 -- Assuming '1' represents expedited shipping
AND orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30';
```","The generated query assumes '1' represents expedited shipping, while the ground truth query checks for 'Expedited' in the CompanyName of the shippers, potentially yielding different results.",SELECT COUNT(OrderID) FROM orders WHERE ShippedDate BETWEEN '2023-04-01' AND '2023-06-30' AND ShipVia = 2;,"The generated query filters based on ShippedDate and a specific ShipVia value, while the ground truth query filters based on OrderDate and identifies ShipVia through a subquery for expedited shippers.",None
What is the distribution of order fulfillment time by month?,"SELECT EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, EXTRACT(YEAR FROM o.OrderDate) AS OrderYear, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgFulfillmentTime FROM orders o GROUP BY OrderYear, OrderMonth;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM 
    orders
GROUP BY 
    Month
ORDER BY 
    Month;
```","The Generated SQL groups by 'Month' using DATE_FORMAT to include year and month, whereas the Ground Truth groups separately by year and month using EXTRACT, which can result in different grouping especially across multiple years.","SELECT EXTRACT(MONTH FROM OrderDate) AS Month, EXTRACT(YEAR FROM OrderDate) AS Year, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EXTRACT(YEAR FROM OrderDate), EXTRACT(MONTH FROM OrderDate);","Both queries calculate the average fulfillment time by extracting year and month from the OrderDate, and group by these extracted values. They yield the same results.",FT
How many products are ordered but not yet delivered?,SELECT COUNT(ProductID) AS NumberOfProducts FROM products WHERE UnitsOnOrder > 0 AND UnitsInStock = 0;,"```sql
SELECT SUM(UnitsOnOrder) AS TotalOrderedNotDelivered
FROM products
WHERE UnitsOnOrder > 0;
```","The generated query calculates the sum of units on order, whereas the ground truth counts products with units on order and no stock.",SELECT COUNT(DISTINCT OrderID) FROM orders WHERE ShippedDate IS NULL;,"The generated query counts distinct orders not yet shipped, while the ground truth query counts products that are ordered but not in stock.",None
What is the average price of products supplied by each supplier?,"SELECT SupplierID, AVG(UnitPrice) FROM products GROUP BY SupplierID;","```sql
SELECT SupplierID, AVG(UnitPrice) AS AveragePrice
FROM products
GROUP BY SupplierID;
```","Both queries calculate the average price of products for each supplier. The generated query includes an alias for the average price, which does not affect the result.","SELECT SupplierID, AVG(UnitPrice) AS AvgPrice FROM products GROUP BY SupplierID;","Both queries calculate the average unit price of products grouped by SupplierID, achieving the same outcome despite different column aliases.",both
How many orders are still pending shipment?,SELECT COUNT(*) AS pending_shipments FROM orders WHERE ShippedDate IS NULL;,"```sql
SELECT COUNT(OrderID) 
FROM orders 
WHERE ShippedDate IS NULL;
```","Both queries count the number of orders where the ShippedDate is NULL, which indicates pending shipments.",SELECT COUNT(OrderID) FROM orders WHERE ShippedDate IS NULL;,"Both queries count the number of orders with a NULL ShippedDate, which represents pending shipments. The use of COUNT(OrderID) versus COUNT(*) does not affect the count of rows.",both
What is the total number of orders shipped each month?,"SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS ShipMonth, COUNT(OrderID) AS OrderCount FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipMonth;","```sql
SELECT 
    DATE_TRUNC('month', ShippedDate) AS Month, 
    COUNT(OrderID) AS TotalOrdersShipped
FROM 
    orders
WHERE 
    ShippedDate IS NOT NULL
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries count the total number of orders shipped each month by grouping on the truncated month of the ShippedDate. The functions for date formatting differ, but they yield the same monthly grouping.","SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS ShipMonth, COUNT(*) AS TotalOrders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipMonth;","Both queries count the total number of orders shipped each month, ensuring ShippedDate is not null. The difference in alias naming does not affect the result.",both
What is the total number of discontinued products?,SELECT COUNT(ProductID) AS DiscontinuedProducts FROM products WHERE Discontinued = TRUE;,"```sql
SELECT COUNT(*) AS TotalDiscontinuedProducts 
FROM products 
WHERE Discontinued = 1;
```","Both queries count products where the Discontinued attribute is true, differing only in their approach to representing a true boolean value (1 vs. TRUE). The result will be the same.",SELECT COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1;,"Both queries count the number of discontinued products by checking the Discontinued column. The conditions Discontinued = 1 and Discontinued = TRUE are equivalent in this context, assuming the column is boolean or uses 1 to indicate true.",both
Identify suppliers with average lead times above the overall average lead time.,"SELECT s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN orders o ON p.ProductID = o.OrderID GROUP BY s.CompanyName HAVING AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) > (SELECT AVG(DATEDIFF(o2.ShippedDate, o2.OrderDate)) FROM orders o2);","```sql
SELECT s.SupplierID, s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN orders o ON p.ProductID = od.ProductID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY s.SupplierID, s.CompanyName
HAVING AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) > (
    SELECT AVG(DATEDIFF(o2.ShippedDate, o2.OrderDate))
    FROM orders o2
    JOIN products p2 ON o2.OrderID = od2.OrderID
    JOIN [Order Details] od2 ON p2.ProductID = od2.ProductID
)
```","The generated query references 'Order Details' table using alias 'od', which causes a join order problem, leading to incorrect filtering of records compared to the ground truth.","SELECT SupplierID FROM products GROUP BY SupplierID HAVING AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) > (SELECT AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) FROM orders o);","The generated query computes the average lead time per SupplierID using the products table only, whereas the ground truth query computes average lead times for suppliers considering both products and related orders. Additionally, the generated query does not include supplier details, which the ground truth does by joining with the suppliers table.",None
What is the total number of distinct products sold?,SELECT COUNT(DISTINCT od.ProductID) AS DistinctProducts FROM [Order Details] od;,"```sql
SELECT COUNT(DISTINCT ProductID) AS TotalDistinctProducts
FROM [Order Details];
```","Both queries correctly count the distinct ProductID values from the [Order Details] table, yielding the same result.",SELECT COUNT(DISTINCT ProductID) AS TotalDistinctProducts FROM [Order Details];,Both queries count the distinct ProductID in the [Order Details] table and will produce the same result.,both
What are the top 5 products with the highest discount given?,"SELECT ProductID, Discount FROM [Order Details] ORDER BY Discount DESC LIMIT 5;","```sql
SELECT ProductID, MAX(Discount) AS HighestDiscount
FROM [Order Details]
GROUP BY ProductID
ORDER BY HighestDiscount DESC
LIMIT 5;
```","The generated SQL query finds the maximum discount for each product, then selects the top 5, whereas the ground truth query simply selects the top 5 highest discount entries regardless of the product.","SELECT ProductName, MAX(Discount) AS HighestDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName ORDER BY HighestDiscount DESC LIMIT 5;","The generated query computes the max discount per product, potentially missing top individual discount entries. The ground truth lists top discounts regardless of product.",None
List the top 3 products sold by each employee based on quantity.,"SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalQuantity FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, [Order Details].ProductID ORDER BY employees.EmployeeID, TotalQuantity DESC;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, od.ProductID, SUM(od.Quantity) AS TotalQuantity
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName, od.ProductID
ORDER BY e.EmployeeID, TotalQuantity DESC
```",The generated SQL query doesn't limit results to the top 3 products per employee based on quantity.,"SELECT e.FirstName, e.LastName, od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN employees e ON o.EmployeeID = e.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.FirstName, e.LastName, od.ProductID ORDER BY TotalQuantity DESC LIMIT 3;","The generated query does not correctly answer the user's question. It limits the results globally to the top 3 products sold, rather than listing the top 3 products for each employee.",None
Identify employees with zero orders processed.,SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL;,"```sql
SELECT e.EmployeeID, e.FirstName, e.LastName
FROM employees e
LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.OrderID IS NULL;
```","Both queries correctly identify employees with zero orders by using a LEFT JOIN on the employees and orders tables, filtering for NULL OrderID. The main difference is that the generated query includes the employee's FirstName and LastName in the selection, while the ground truth selects only the EmployeeID. This does not affect the result regarding identifying employees with zero orders.",SELECT employees.EmployeeID FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderID IS NULL;,"Both queries effectively perform a LEFT JOIN between employees and orders, checking for NULL OrderID to identify employees with zero orders processed. Although the table aliases differ, they yield the same results.",both
Which employee generated the highest total sales last month?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') 
  AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE)
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 1;
```","The generated SQL query uses DATE_TRUNC, which may not align with the expected behavior of MONTH and YEAR extraction for all SQL databases. This could lead to a mismatch in date filtering across different database systems.","SELECT employees.FirstName, employees.LastName FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName ORDER BY SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) DESC LIMIT 1;",The generated SQL query selects the employee's name while the ground truth query selects the employee's ID and total sales. Results may differ if employee names are needed instead of IDs.,None
What is the total number of orders shipped via each shipping method?,"SELECT o.ShipVia, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipVia;","```sql
SELECT ShipVia, COUNT(OrderID) AS TotalOrders
FROM orders
GROUP BY ShipVia;
```",Both queries count the number of orders grouped by ShipVia and produce identical results.,"SELECT o.ShipVia, COUNT(o.OrderID) AS TotalOrders FROM orders o GROUP BY o.ShipVia;","Both queries group orders by 'ShipVia' and count 'OrderID', providing the total number of orders per shipping method. The column alias difference does not affect the result.",both
Identify the top 3 employees by total sales in 2023.,"SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName ORDER BY total_sales DESC LIMIT 3","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN employees ON orders.EmployeeID = employees.EmployeeID 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' 
GROUP BY employees.EmployeeID 
ORDER BY total_sales DESC 
LIMIT 3
```","The generated SQL query does not select the 'FirstName' and 'LastName' columns of the employees, whereas the ground truth query does. This difference can affect the usability of the results if employee names are needed for context.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 3","The generated SQL query and the ground truth query both accurately find the top 3 employees by total sales in 2023. The key difference is that the generated query does not include the employee's FirstName and LastName in the SELECT clause, but this does not affect the accuracy of identifying the top 3 by total sales.",FT
How many orders were placed with a discount greater than 20%?,SELECT COUNT(DISTINCT OrderID) FROM [Order Details] WHERE Discount > 0.2;,"```sql
SELECT COUNT(DISTINCT o.OrderID) AS OrderCount
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE od.Discount > 0.20;
```",Both queries count distinct OrderIDs from Order Details with a discount greater than 20%. The JOIN in the generated query does not affect the count.,SELECT COUNT(DISTINCT o.OrderID) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0.2;,Both queries count distinct OrderIDs from Order Details where the discount is greater than 20%. The join in the generated query doesn't affect the result since only OrderID and Discount are used.,both
What is the most ordered product category this year?,"SELECT categories.CategoryID, categories.CategoryName, SUM([Order Details].Quantity) AS TotalOrdered FROM categories INNER JOIN products ON categories.CategoryID = products.CategoryID INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY categories.CategoryID, categories.CategoryName ORDER BY TotalOrdered DESC;","```sql
SELECT p.CategoryID, SUM(od.Quantity) AS TotalOrdered
FROM [Order Details] od
JOIN products p ON od.ProductID = p.ProductID
WHERE YEAR(od.OrderID) = YEAR(CURRENT_DATE)
GROUP BY p.CategoryID
ORDER BY TotalOrdered DESC
LIMIT 1;
```","The generated query lacks joining with the categories table and does not correctly filter by the current year; it attempts to filter by YEAR(OrderID), which is incorrect.","SELECT c.CategoryID, SUM(od.Quantity) AS TotalOrdered FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID WHERE YEAR(od.RecordedTime) = YEAR(CURRENT_DATE) GROUP BY c.CategoryID ORDER BY TotalOrdered DESC LIMIT 1;","The generated query limits the results to the current year and returns only the most ordered category, while the ground truth query does not limit to this year and does not return only the most ordered category.",None
What was the average time taken to fulfill orders each month?,"SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Year, Month;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
       AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM orders
GROUP BY Month
ORDER BY Month;
```","Both queries calculate the average time taken to fulfill orders each month and group by the month, although they format the month differently. They yield the same result.","SELECT EXTRACT(YEAR FROM OrderDate) AS OrderYear, EXTRACT(MONTH FROM OrderDate) AS OrderMonth, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY OrderYear, OrderMonth;",Both queries extract the year and month from OrderDate and calculate the average fulfillment time grouped by year and month. They effectively perform the same operation despite differences in alias names.,both
What percentage of orders were delivered on or before the required date?,SELECT COUNT(orders.OrderID) FILTER (WHERE orders.ShippedDate <= orders.RequiredDate) * 100.0 / COUNT(orders.OrderID) AS OnTimeDeliveryRate FROM orders;,"```sql
SELECT 
    (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*)) AS On_time_Delivery_Rate
FROM orders;
```",Both queries calculate the percentage of orders delivered on or before the required date using conditional counting and division by the total number of orders.,SELECT (COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders,Both queries calculate the percentage of orders delivered on or before the required date using a filter and division by the total order count. They use similar logic and will yield the same results.,both
How does sales performance vary by employee's city?,"SELECT e.City, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.City;","```sql
SELECT e.City, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.City
ORDER BY TotalSales DESC;
```","The generated query and the ground truth query both calculate total sales grouped by the city of employees. The only difference is the generated query includes an ORDER BY clause, which does not affect the aggregation results but orders the output by TotalSales.","SELECT e.City, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.City;",The generated SQL query matches the ground truth query exactly and accurately answers the user's question by calculating total sales performance by employee's city.,both
How many orders were made by customers from Germany?,SELECT COUNT(OrderID) FROM orders WHERE ShipCountry = 'Germany',"```sql
SELECT COUNT(*) 
FROM orders 
WHERE ShipCountry = 'Germany';
```","Both queries count the orders where ShipCountry is 'Germany', yielding the same result.",SELECT COUNT(*) FROM orders WHERE ShipCountry = 'Germany';,Both queries count orders where the ShipCountry is 'Germany'. The COUNT(*) and COUNT(OrderID) provide the same result in this context since OrderID is a non-nullable column.,both
What is the distribution of orders by shipment city?,"SELECT ShipCity, COUNT(*) AS OrderCount FROM orders GROUP BY ShipCity;","```sql
SELECT ShipCity, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY ShipCity
ORDER BY OrderCount DESC;
```","Both queries count the number of orders for each shipment city. The generated query also orders the results by the count in descending order, but this doesn't alter the correctness of the distribution.","SELECT ShipCity, COUNT(OrderID) as OrderCount FROM orders GROUP BY ShipCity;",Both queries count the number of orders grouped by shipment city and will yield the same results.,both
Which customer places the most orders?,"SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT CustomerID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY CustomerID
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries are identical in logic and will yield the same result, finding the customer with the most orders.","SELECT orders.CustomerID, COUNT(orders.OrderID) AS OrderCount FROM orders GROUP BY orders.CustomerID ORDER BY OrderCount DESC LIMIT 1;",Both queries calculate the count of orders per customer and retrieve the customer with the highest order count. The column references are consistent and do not affect the correctness.,both
What is the on-time delivery rate for orders in the first half of 2023?,SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 1.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30',"```sql
SELECT COUNT(orders.OrderID) WHERE orders.ShippedDate <= orders.RequiredDate AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30' / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'
```",The generated SQL is missing the correct COUNT syntax and has misplaced logic; it does not properly calculate the on-time delivery rate like the ground truth query.,SELECT COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30',"The generated SQL query and the ground truth SQL query produce the same result. The key operations, conditions, and calculations in both queries are identical.",FT
Identify the product with the maximum quantity ordered.,"SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC FETCH FIRST 1 ROW ONLY;","```sql
SELECT ProductID, SUM(Quantity) AS TotalQuantity
FROM [Order Details]
GROUP BY ProductID
ORDER BY TotalQuantity DESC
LIMIT 1;
```",'LIMIT 1' is not standard ANSI SQL. It should be 'FETCH FIRST 1 ROW ONLY' for ANSI compliance.,"SELECT ProductID, Quantity FROM [Order Details] WHERE Quantity = (SELECT MAX(Quantity) FROM [Order Details]);","The generated query finds the orders with the maximum quantity per line item, but the ground truth query finds the product with the largest total quantity across all orders.",None
What is the monthly on-time delivery rate?,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders GROUP BY month","```sql
SELECT 
    YEAR(orders.OrderDate) AS year, 
    MONTH(orders.OrderDate) AS month, 
    COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 1.0 / COUNT(orders.OrderID AS on_time_delivery_rate 
FROM orders 
GROUP BY YEAR(orders.OrderDate), MONTH(orders.OrderDate)
```",The generated query contains a syntax error with a missing closing parenthesis on COUNT(orders.OrderID and uses two separate columns for year and month instead of formatting the date as one string.,"SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) * 1.0 / COUNT(orders.OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month ORDER BY Month;",Both queries calculate the on-time delivery rate by comparing the ShippedDate to the RequiredDate and group by month. The syntax differences do not affect the result.,FT
What is the customer retention rate for the last quarter?,SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-12-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-10-01') AS customer_retention_rate,"```sql
SELECT (COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30') / (COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-07-01') AS customer_retention_rate
```","The generated query calculates the retention for Q3 2023, while the ground truth query calculates it for Q4 2023.",SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30' THEN orders.CustomerID END) * 100.0 / COUNT(DISTINCT CASE WHEN orders.OrderDate < '2023-07-01' THEN orders.CustomerID END)) AS customer_retention_rate FROM orders,"The generated query calculates the retention for Q3 (July - September) instead of the last quarter, which should be Q4 (October - December). Moreover, the generated query incorrectly includes a multiplication by 100 for the retention rate, which is not part of the ground truth calculation.",None
Which region has the highest sales overall contributed by employees?,"SELECT employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Region ORDER BY TotalSales DESC LIMIT 1","```sql
SELECT employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM employees
JOIN orders ON employees.EmployeeID = orders.EmployeeID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY employees.Region
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries calculate the total sales per region and order by total sales in descending order, returning the top result, which answers the user's question.","SELECT e.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Region ORDER BY TotalSales DESC LIMIT 1","Both queries correctly calculate total sales per region by multiplying unit price, quantity, and the discount factor, then grouping by region and ordering to find the highest sales. Differences in aliasing and syntax do not affect the results.",both
Which city has the least number of orders shipped?,"SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount ASC LIMIT 1;","```sql
SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY ShipCity
ORDER BY NumberOfOrders ASC
LIMIT 1;
```","Both queries accurately determine the city with the least number of orders by counting OrderID, grouping by ShipCity, and ordering the count in ascending order with a limit of 1. The differences in aliases do not affect the result.","SELECT ShipCity, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipCity ORDER BY TotalOrders ASC LIMIT 1;","Both queries count the number of orders per city and return the city with the least orders, ordering by the count in ascending order and limiting to 1 result.",both
What is the average unit price of products in each category?,"SELECT p.CategoryID, AVG(p.UnitPrice) AS AveragePrice FROM products p GROUP BY p.CategoryID;","```sql
SELECT products.CategoryID, AVG(products.UnitPrice) AS AverageUnitPrice
FROM products
GROUP BY products.CategoryID;
```","Both queries select the average unit price of products categorized by CategoryID, using the AVG function and grouping by CategoryID. The results would be the same.","SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID;",Both queries accurately calculate the average unit price for products in each category by grouping on CategoryID and using AVG on UnitPrice. The table alias does not affect the result.,both
Which employees have the highest sales performance this year?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID ORDER BY employee_sales DESC","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
JOIN employees ON orders.EmployeeID = employees.EmployeeID
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY employees.EmployeeID
ORDER BY employee_sales DESC
```","Both queries filter orders within the year 2023 and calculate employee sales correctly by summing up the product of UnitPrice, Quantity, and the discount factor. They group and order results by employee sales in descending order.","SELECT e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY TotalSales DESC;",Both queries calculate the total sales per employee for the current year and order the employees by total sales in descending order. The difference in output columns (Generated Query includes first and last names) does not affect the core functionality.,both
What are the top 5 products by sales revenue?,"SELECT ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SalesRevenue FROM [Order Details] GROUP BY ProductID ORDER BY SalesRevenue DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSales DESC
LIMIT 5;
```","The generated query includes a JOIN with the 'products' table and selects 'ProductName', which the ground truth query does not. However, both queries compute total sales per product. Since the listing requires ProductID and sales revenue, joining on 'products' is unnecessary and could lead to different interpretational nuances if 'ProductName' is considered.","SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS SalesRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY SalesRevenue DESC LIMIT 5",The generated SQL query uses 'LIMIT 5' which is not compatible with SQL Server or older versions of SQL. The correct keyword is 'TOP'. Both queries would yield the same result if run in a database system that supports 'LIMIT'.,None
What is the average value of orders placed in the month of January 2023?,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = 1 AND YEAR(orders.OrderDate) = 2023,"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31'
```","Both queries correctly calculate the average order value for January 2023, although they filter dates differently.",SELECT AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31',"The generated query calculates the average based on line items, not distinct orders. The ground truth divides the total by distinct order count, aligning with the user's intent.",Base
Which product generates the highest revenue?,"SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalRevenue FROM [Order Details] GROUP BY ProductID ORDER BY TotalRevenue DESC LIMIT 1","```sql
SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM [Order Details] od
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY od.ProductID
ORDER BY TotalRevenue DESC
LIMIT 1;
```",Both queries calculate total revenue per product and select the one with the highest revenue. The JOIN in the generated query is unnecessary but does not affect the result.,"SELECT products.ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Revenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID ORDER BY Revenue DESC LIMIT 1;","Both queries calculate revenue by multiplying UnitPrice, Quantity, and the discount factor, group by ProductID, and return the top result. The JOIN with products in the generated query does not affect the outcome since only ProductID is used, and it's the same in both tables.",both
Which supplier has the highest total sales revenue from their products?,"SELECT p.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY s.SupplierID, s.CompanyName
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries calculate total sales per supplier by multiplying price, quantity, and discount, then order by sales, and limit to top result. They achieve the same result.","SELECT products.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.SupplierID ORDER BY TotalSales DESC LIMIT 1;","Both queries calculate the total sales revenue for each supplier by joining 'products' with '[Order Details]', grouping by SupplierID, and retrieving the supplier with the highest total sales. The difference in table aliasing does not affect the result.",both
How many suppliers are located in each country?,"SELECT suppliers.Country, COUNT(suppliers.SupplierID) AS SupplierCount FROM suppliers GROUP BY suppliers.Country ORDER BY SupplierCount DESC;","```sql
SELECT Country, COUNT(*) AS SupplierCount
FROM suppliers
GROUP BY Country;
```",Both queries count suppliers per country. The main difference is the ground truth query orders results by SupplierCount. This does not affect the answer to how many suppliers are in each country.,"SELECT suppliers.Country, COUNT(*) AS supplier_count FROM suppliers GROUP BY suppliers.Country;","Both queries count suppliers by country, and the columns used for counting produce the same result. The order of results does not affect accuracy.",both
What is the distribution of customer demographics for the top revenue-generating customers?,"SELECT customerDemographics.CustomerDesc, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM customerCustomerDemo JOIN customers ON customerCustomerDemo.CustomerID = customers.CustomerID JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN customerDemographics ON customerCustomerDemo.CustomerTypeID = customerDemographics.CustomerTypeID GROUP BY customerDemographics.CustomerDesc ORDER BY total_revenue DESC","```sql
SELECT cd.CustomerDesc, COUNT(ccd.CustomerID) AS CustomerCount 
FROM customers c 
JOIN customerCustomerDemo ccd ON c.CustomerID = ccd.CustomerID 
JOIN customerDemographics cd ON ccd.CustomerTypeID = cd.CustomerTypeID 
WHERE c.CustomerID IN (
    SELECT CustomerID 
    FROM (
        SELECT orders.CustomerID 
        FROM orders 
        JOIN [Order Details] od ON orders.OrderID = od.OrderID 
        GROUP BY orders.CustomerID 
        ORDER BY SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) DESC 
        LIMIT 10
    ) AS top_customers
) 
GROUP BY cd.CustomerDesc;
```","The generated query finds the distribution of customer demographics for the top revenue-generating customers, while the ground truth query finds the total revenue by customer demographics. The generated query includes a list of top customers with LIMIT, while the ground truth totals revenue without limiting to top customers.","SELECT customerDemographics.CustomerTypeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customerCustomerDemo ON orders.CustomerID = customerCustomerDemo.CustomerID JOIN customerDemographics ON customerCustomerDemo.CustomerTypeID = customerDemographics.CustomerTypeID GROUP BY customerDemographics.CustomerTypeID ORDER BY total_revenue DESC","The generated query returns CustomerTypeID instead of CustomerDesc. The user wants a description, not an ID.",None
What is the average discount applied to products ordered?,SELECT AVG([Order Details].Discount) AS AvgDiscount FROM [Order Details];,"```sql
SELECT AVG([Order Details].Discount) AS Average_Discount
FROM [Order Details];
```","Both queries calculate the average discount from the 'Order Details' table, differing only in the alias used for the result column.",SELECT AVG(Discount) FROM [Order Details] WHERE Discount > 0;,"The generated SQL only considers orders with a discount greater than 0, while the ground truth query includes all orders.",Base
Identify the month with the highest sales revenue.,"SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_TRUNC('month', OrderDate) ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY Month
ORDER BY TotalSales DESC
LIMIT 1;
```","The generated query uses DATE_FORMAT to group by month, which may not work in all SQL dialects like DATE_TRUNC used in the ground truth query.","SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month ORDER BY TotalSales DESC LIMIT 1;","The generated query uses DATE_FORMAT which may not be supported in all SQL databases. The ground truth query uses DATE_TRUNC, which is a standard function in some SQL dialects like PostgreSQL. Both queries attempt to group by month and order by total sales, but the difference in date handling could yield different results depending on the SQL dialect used.",None
Which country had the highest total sales?,"SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipCountry ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT ShipCountry, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales
FROM orders O
JOIN [Order Details] OD ON O.OrderID = OD.OrderID
GROUP BY ShipCountry
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries calculate total sales per country by joining 'orders' and 'Order Details', summing the product of UnitPrice, Quantity, and (1 - Discount), then order by TotalSales and limit to 1. Differences in table aliasing do not affect the result.","SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CountrySales FROM orders o JOIN [Order Details] ON o.OrderID = [Order Details].OrderID GROUP BY ShipCountry ORDER BY CountrySales DESC LIMIT 1;","Both queries calculate total sales per country by joining the orders and Order Details tables, grouping by ShipCountry, and ordering by total sales in descending order, then limiting to the top result. The table aliases differ, but the logic and results are the same.",both
What is the on-time delivery rate for each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(*) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month,
    COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 1.0 / COUNT(orders.OrderID) AS OnTimeDeliveryRate
FROM 
    orders
GROUP BY 
    Month
ORDER BY 
    Month;
```",Both queries calculate the on-time delivery rate per month by comparing ShippedDate and RequiredDate. They group by month and use the same logic for calculating the rate.,"SELECT EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(CASE WHEN o.ShippedDate <= o.RequiredDate THEN o.ShippedDate ELSE 0 END) / COUNT(o.OrderID) * 100 AS OnTimeRate FROM orders o GROUP BY Year, Month;",The generated SQL query calculates on-time delivery rate using different logic. It sums the ShippedDate values instead of counting successful deliveries and uses different date extraction functions.,Base
What is the total freight cost for all orders each month?,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM(orders.Freight) AS TotalFreightCost FROM orders GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m');","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Freight) AS TotalFreight
FROM orders
GROUP BY Month
ORDER BY Month;
```","Both queries group the orders by month using DATE_FORMAT and calculate the sum of the Freight cost, which provides the total freight cost for each month. The ORDER BY clause in the generated query does not affect the correctness.","SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(Freight) AS TotalFreight FROM orders GROUP BY Month;",Both queries calculate the total freight cost grouped by month. The functions DATE_TRUNC and DATE_FORMAT achieve the same effect of truncating the date to month-level granularity.,both
What is the distribution of discounts provided across different product categories?,"SELECT c.CategoryID, AVG(od.Discount) AS AverageDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;","```sql
SELECT p.CategoryID, AVG(od.Discount) AS AverageDiscount
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.CategoryID;
```","The generated query does not join with the 'categories' table, so it may not return the correct category information.","SELECT categories.CategoryName, AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY avg_discount DESC","The generated query groups by CategoryName, while the ground truth groups by CategoryID. This could lead to the same result if CategoryName uniquely identifies CategoryID, but without this assurance, they are not guaranteed to yield the same results.",None
Find the total sales for each employee in a specific region.,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.ShipRegion = ? GROUP BY employees.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE e.Region = 'specific_region'
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","The generated query filters by 'e.Region', while the ground truth filters by 'orders.ShipRegion', which may not yield the same results.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.ShipRegion = ? GROUP BY employees.EmployeeID;","The generated SQL query is identical to the ground truth query, meaning it should accurately answer the user's question and yield the same results.",FT
Find the top 10 highest earning employees based on their sales performance.,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalEarnings FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalEarnings DESC LIMIT 10;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 10;
```","Both queries calculate total sales for employees by summing the product of unit price, quantity, and discount from order details, grouped by employee, and order by total earnings or sales descending, limiting to the top 10.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalEarnings FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalEarnings DESC LIMIT 10;","Both queries calculate total earnings by joining employees, orders, and order details, aggregating sales, and ordering by total earnings to get the top 10 employees.",both
How much sales revenue did each employee generate in January 2023?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY employees.EmployeeID","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
JOIN employees ON orders.EmployeeID = employees.EmployeeID
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31'
GROUP BY employees.EmployeeID
```","The generated SQL query accurately captures the user's request. Both the generated and ground truth queries select the EmployeeID and sum up sales revenue per employee for January 2023, and they are identical in logic and results.","SELECT e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS employee_revenue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY e.FirstName, e.LastName","The generated query groups by employee names, while the ground truth query groups by EmployeeID. This could lead to incorrect aggregation if there are employees with the same name or if EmployeeID is the primary key.",Base
Which supplier provides products with the lowest average unit price?,"SELECT s.CompanyName, AVG(p.UnitPrice) AS AvgUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName ORDER BY AvgUnitPrice ASC LIMIT 1;","```sql
SELECT s.SupplierID, s.CompanyName, AVG(p.UnitPrice) AS AverageUnitPrice
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
GROUP BY s.SupplierID, s.CompanyName
ORDER BY AverageUnitPrice ASC
LIMIT 1;
```","Both queries correctly determine the supplier with the lowest average unit price by joining suppliers and products, computing the average unit price per supplier, and ordering the results to get the supplier with the minimum average unit price.","SELECT SupplierID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY SupplierID ORDER BY AveragePrice ASC LIMIT 1","The generated query does not include the CompanyName of the supplier; it only provides the SupplierID, which is insufficient to identify the supplier.",Base
List all products that are discontinued but still have units in stock.,"SELECT ProductID, ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;","```sql
SELECT ProductID, ProductName, UnitsInStock 
FROM products 
WHERE Discontinued = 1 AND UnitsInStock > 0;
```",The generated query selects an additional column (UnitsInStock) not present in the ground truth query.,SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;,"The generated query only returns the ProductName, while the ground truth query returns both ProductID and ProductName.",None
What is the average quantity per order for each product category?,"SELECT CategoryID, AVG(od.Quantity) AS AvgQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY CategoryID;","```sql
SELECT p.CategoryID, AVG(od.Quantity) AS AverageQuantityPerOrder
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.CategoryID;
```","Both queries compute the average quantity per order for each product category, using the same logic and components, differing only in naming conventions.","SELECT CategoryID, AVG([Order Details].Quantity) AS AvgQuantityPerOrder FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID;",Both queries correctly calculate the average quantity per order for each product category by joining the products and order details tables and grouping by CategoryID.,both
How does the stock level compare to the reorder level for each product?,"SELECT ProductName, UnitsInStock, ReorderLevel FROM products WHERE UnitsInStock < ReorderLevel;","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    p.UnitsInStock, 
    p.ReorderLevel, 
    CASE 
        WHEN p.UnitsInStock < p.ReorderLevel THEN 'Order More' 
        ELSE 'Sufficient Stock' 
    END AS Stock_Status
FROM 
    products p;
```","The generated query includes a CASE statement to categorize stock status, which adds additional information not present in the ground truth query. The ground truth query only selects products where stock is less than the reorder level, filtering results, whereas the generated query lists all products and categorizes them.","SELECT ProductName, (UnitsInStock - ReorderLevel) AS StockDifference FROM products WHERE UnitsInStock < ReorderLevel;","The generated query calculates StockDifference, while the ground truth lists UnitsInStock and ReorderLevel without computing a difference.",None
Determine the average discount given per supplier.,"SELECT products.SupplierID, AVG([Order Details].Discount) AS AverageDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.SupplierID;","```sql
SELECT suppliers.SupplierID, AVG([Order Details].Discount) AS AverageDiscount
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY suppliers.SupplierID;
```","Both queries compute the average discount per supplier, using the supplier's ID to group the average calculation. They will yield the same results because the relationships are properly joined to achieve the intended grouping per supplier.","SELECT s.SupplierID, AVG(od.Discount) AS AverageDiscount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;","Both queries compute the average discount per supplier by joining the necessary tables and grouping by SupplierID, yielding equivalent results.",both
How many orders were shipped after the required date?,SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;,"```sql
SELECT COUNT(*) AS OrdersShippedLate
FROM orders
WHERE ShippedDate > RequiredDate;
```","Both queries count orders where the ShippedDate is later than the RequiredDate, yielding identical results.",SELECT COUNT(OrderID) AS LateShipments FROM orders WHERE ShippedDate > RequiredDate;,"Both queries count the number of orders where the ShippedDate is greater than the RequiredDate, thus they return the same result.",both
Which month had the highest total sales revenue?,"SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM') ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY Month
ORDER BY TotalSales DESC
LIMIT 1;
```","The functions DATE_FORMAT and TO_CHAR serve the same purpose in different SQL dialects, but their usage might indicate a difference in database systems. Assuming they achieve the same results, the generated query uses the pattern '%Y-%m', while the ground truth uses 'YYYY-MM'. Provided these patterns achieve the same result, the queries will produce equivalent outputs. However, because different database systems are implied, we cannot assume they yield identical results.","SELECT EXTRACT(MONTH FROM o.OrderDate) AS month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS total_sales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY month ORDER BY total_sales DESC LIMIT 1;","The generated SQL query extracts only the month, while the ground truth query extracts year and month. This can result in different groupings and outputs.",None
Calculate the total sales revenue for each supplier for the last quarter.,"SELECT SupplierID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE QUARTER(OrderDate) = QUARTER(CURDATE()) - 1 GROUP BY SupplierID;","```sql
SELECT 
    p.SupplierID, 
    SUM(od.Quantity * od.UnitPrice) AS TotalSalesRevenue
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
JOIN 
    orders o ON od.OrderID = o.OrderID
WHERE 
    o.OrderDate >= DATEADD(quarter, -1, GETDATE()) 
GROUP BY 
    p.SupplierID
```","The generated query uses GETDATE() and DATEADD(quarter, -1, GETDATE()) which may not correctly calculate the previous quarter as it checks one quarter back from the current date, instead of the specific last quarter. The ground truth query explicitly uses quarter calculation based on CURDATE(). Also, the generated query does not filter for Orders in the specific previous quarter and only relies on a date offset.","SELECT products.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderDate BETWEEN '2023-07-01' AND '2023-09-30' GROUP BY products.SupplierID",The generated SQL query does not correctly calculate the discount and includes it in the total sales. It also manually specifies the date range instead of dynamically using the last quarter like the ground truth query.,None
Which city has received the highest number of shipments year-to-date?,"SELECT ShipCity, COUNT(*) AS Shipments FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 1;","```sql
SELECT ShipCity, COUNT(OrderID) AS ShipmentCount
FROM orders
WHERE ShippedDate >= DATE_TRUNC('year', CURRENT_DATE)
GROUP BY ShipCity
ORDER BY ShipmentCount DESC
LIMIT 1;
```","The generated query filters by ShippedDate, while the ground truth query filters by OrderDate. This could lead to different results if shipment and order dates differ.","SELECT ShipCity, COUNT(OrderID) AS Shipments FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 1;","The generated query computes shipments from the last 365 days, whereas the ground truth query calculates shipments from the start of the current year.",None
Identify products that need reordering where units in stock are below reorder level.,"SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;","```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock < ReorderLevel;
```","The generated SQL query returns additional columns (UnitsInStock and ReorderLevel) compared to the ground truth query, which only selects ProductID and ProductName.",SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"The generated query only selects ProductName, whereas the ground truth query selects both ProductID and ProductName.",None
"What is the total quantity of products ordered, grouped by supplier?","SELECT SupplierID, SUM(od.Quantity) AS TotalOrdered FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY SupplierID;","```sql
SELECT p.SupplierID, SUM(od.Quantity) AS TotalOrderedQuantity
FROM [Order Details] od
JOIN products p ON od.ProductID = p.ProductID
GROUP BY p.SupplierID;
```","Both queries calculate the total quantity of products ordered grouped by SupplierID. The difference is only in the alias for the SUM column, which does not affect the result.","SELECT suppliers.SupplierID, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] INNER JOIN products ON [Order Details].ProductID = products.ProductID INNER JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID;","Both queries calculate the total quantity of products ordered grouped by supplier by joining the Order Details with Products and then Suppliers. They use the same logic and join structure, despite slightly different syntax and aliases.",both
What is the average shipping cost per order in the past month?,"SELECT AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE orders.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)","```sql
SELECT AVG(orders.Freight) AS shipping_cost_per_order FROM orders WHERE orders.OrderDate BETWEEN DATEADD(MONTH, -1, GETDATE()) AND GETDATE()
```","The generated query uses DATEADD and GETDATE(), which are SQL Server functions, while the ground truth uses DATE_SUB and CURRENT_DATE, which are MySQL functions. These differences can impact execution depending on the database being used.","SELECT AVG(Freight) FROM orders WHERE OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);",Both queries calculate the average freight cost for orders in the past month and will yield the same results.,FT
Show the total sales for each employee by year.,"SELECT YEAR(orders.OrderDate) AS OrderYear, employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY YEAR(orders.OrderDate), employees.EmployeeID;","```sql
SELECT 
    employees.EmployeeID, 
    employees.FirstName, 
    employees.LastName, 
    YEAR(orders.OrderDate) AS SalesYear, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM 
    employees
JOIN 
    orders ON employees.EmployeeID = orders.EmployeeID
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    employees.EmployeeID, 
    SalesYear
ORDER BY 
    SalesYear, 
    employees.EmployeeID;
```","Both queries calculate total sales for each employee by year, using the same joins and aggregate function, although the generated query includes employee names and an ORDER BY clause, which do not affect the result.","SELECT e.EmployeeID, YEAR(o.OrderDate) AS OrderYear, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, YEAR(o.OrderDate);","Both queries aggregate total sales for each employee by year, using correct joins and the same logical operations for calculating total sales. The order of columns in the GROUP BY clause does not affect the results.",both
What is the average number of products per order?,SELECT AVG(ProductsPerOrder) FROM (SELECT SUM(d.Quantity) AS ProductsPerOrder FROM [Order Details] d GROUP BY d.OrderID) AS OrderQuantities;,"```sql
SELECT AVG(ProductCount) AS AverageProductsPerOrder
FROM (
    SELECT COUNT(ProductID) AS ProductCount
    FROM [Order Details]
    GROUP BY OrderID
) AS OrderProductCounts;
```","The generated SQL counts distinct products, while the ground truth sums quantities, affecting averages.",SELECT AVG(CountPerOrder) FROM (SELECT COUNT(ProductID) AS CountPerOrder FROM [Order Details] GROUP BY OrderID) AS OrderCounts;,"The generated query counts distinct ProductIDs per order, while the ground truth sums the quantities of products per order. They measure different things.",None
What is the total revenue generated by all employees combined?,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID,"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM employees
JOIN orders ON employees.EmployeeID = orders.EmployeeID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID;
```","Both queries calculate the total revenue by summing the product of UnitPrice, Quantity, and the discount factor from the Order Details table. The generated query joins with employees, but it does not change the result because all orders are included regardless of the join.",SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details];,"The generated query only considers the 'Order Details' table. The ground truth query includes a JOIN with the 'orders' table, ensuring the calculation is based on valid joined records.",Base
How many orders are shipped per month?,"SELECT DATE_TRUNC('month', ShippedDate) AS month, COUNT(*) AS orders_shipped FROM orders WHERE ShippedDate IS NOT NULL GROUP BY DATE_TRUNC('month', ShippedDate);","```sql
SELECT 
    DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, 
    COUNT(OrderID) AS OrdersShipped
FROM 
    orders
GROUP BY 
    Month
ORDER BY 
    Month;
```",The generated SQL query uses DATE_FORMAT instead of DATE_TRUNC and does not handle NULL values in the ShippedDate column.,"SELECT MONTH(ShippedDate) AS shipped_month, COUNT(OrderID) AS orders_shipped FROM orders WHERE ShippedDate IS NOT NULL GROUP BY shipped_month","The queries differ in how they group the dates. The generated query groups by month number, which could be inconsistent with full month grouping in different SQL dialects. The ground truth uses DATE_TRUNC(), which standardizes grouping by the start of the month.",None
How many units of each product have been ordered so far?,"SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalOrdered FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalUnitsOrdered
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName;
```",Both queries calculate the total units ordered for each product by summing the Quantity from the [Order Details] table and grouping by the product name. The difference in columns (ProductID included in the generated query) does not affect the correctness of the total calculated.,"SELECT ProductID, SUM(Quantity) AS TotalOrdered FROM [Order Details] GROUP BY ProductID;","The generated query lists total units ordered per ProductID, but does not include ProductName. The ground truth query joins products to retrieve ProductName and groups by it, which the user's question implies it requires.",Base
What are the total sales for each employee?,"SELECT EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EmployeeID;","```sql
SELECT EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY EmployeeID;
```",The generated SQL query and the ground truth query are logically identical. They both calculate the total sales by employee by joining the orders and [Order Details] tables and grouping by EmployeeID.,"SELECT EmployeeID, SUM(TotalAmount) AS TotalSales FROM orders GROUP BY EmployeeID;","The generated query calculates total sales using 'TotalAmount' from orders, while the ground truth query calculates it from joined 'Order Details' table using unit price, quantity, and discount. They might yield different results.",Base
How many orders were made by each customer country?,"SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCountry;","```sql
SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY ShipCountry;
```","The generated SQL query and the ground truth query are identical in terms of logic and structure, performing the same aggregation of counting orders grouped by ShipCountry.","SELECT o.ShipCountry, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipCountry;","Both queries count the number of orders grouped by the customer country, using 'ShipCountry' to identify the country and counting 'OrderID'. The queries are functionally equivalent.",both
Which product has generated the highest total sales revenue?,"SELECT p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalRevenue DESC LIMIT 1;","```sql
SELECT p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductName
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries calculate the total sales revenue by multiplying the unit price, quantity, and discount, grouping by product name, and ordering by total revenue to find the highest. The column alias differs, but the logic and result are the same.","SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalSales DESC LIMIT 1","The generated query returns ProductID, whereas the ground truth query returns ProductName. Both calculate total sales revenue in the same way, but the output fields differ.",Base
Are there any suppliers with only discontinued products?,SELECT SupplierID FROM products GROUP BY SupplierID HAVING COUNT(CASE WHEN Discontinued = 0 THEN 1 END) = 0;,"```sql
SELECT DISTINCT p.SupplierID
FROM products p
WHERE p.Discontinued = 1
GROUP BY p.SupplierID
HAVING COUNT(*) = (SELECT COUNT(*) FROM products p2 WHERE p2.SupplierID = p.SupplierID)
```",The generated query checks if all products of a supplier are discontinued but also gets suppliers with no products. The ground truth ensures suppliers have only discontinued products without any active ones.,SELECT s.SupplierID FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID HAVING COUNT(*) = SUM(CASE WHEN p.Discontinued = 1 THEN 1 ELSE 0 END);,"Both queries essentially check for suppliers whose products are all discontinued. The generated query uses a SUM of a CASE to ensure all products are discontinued, while the ground truth checks if non-discontinued products count to zero. Both approaches yield the same result.",FT
Identify the top 5 suppliers by total sales revenue generated.,"SELECT suppliers.SupplierID, CompanyName, SUM([Order Details].UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID, CompanyName ORDER BY TotalSales DESC LIMIT 5;","```sql
SELECT s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY s.SupplierID, s.CompanyName
ORDER BY TotalSales DESC
LIMIT 5;
```","Both queries select the top 5 suppliers by total sales revenue using the same logic and calculations, and differences in table aliases do not affect the outcome.","SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY TotalRevenue DESC LIMIT 5;","The generated query does not include 'CompanyName' in the SELECT and GROUP BY clauses, which can lead to different results if CompanyName is needed in the output.",Base
How many orders were placed by each customer in the first quarter of 2023?,"SELECT customers.CustomerID, COUNT(orders.OrderID) AS order_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY customers.CustomerID","```sql
SELECT orders.CustomerID, COUNT(orders.OrderID) AS order_count 
FROM orders 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' 
GROUP BY orders.CustomerID
```","Both queries effectively count orders per customer within the specified date range. The difference is an implicit join in the first query, which does not affect the result since CustomerID is the primary key in both scenarios.","SELECT orders.CustomerID, COUNT(orders.OrderID) AS order_count FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY orders.CustomerID",Both queries count the number of orders placed by each customer in the first quarter of 2023. The JOIN in the ground truth query is unnecessary for counting orders per CustomerID as long as there is no need to access the customers table beyond the grouping.,both
What is the most popular product category based on the number of unique customers?,"SELECT categories.CategoryName, COUNT(DISTINCT orders.CustomerID) AS unique_customers FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY unique_customers DESC LIMIT 1","```sql
SELECT products.CategoryID, COUNT(DISTINCT orders.CustomerID) AS unique_customers
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
JOIN products ON [Order Details].ProductID = products.ProductID
GROUP BY products.CategoryID
ORDER BY unique_customers DESC
LIMIT 1;
```",The generated query selects CategoryID and not CategoryName like the ground truth. This may result in different outputs if CategoryID and CategoryName are not in a one-to-one relationship.,"SELECT categories.CategoryName, COUNT(DISTINCT od.CustomerID) AS UniqueCustomerCount FROM [Order Details] od JOIN products ON od.ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY UniqueCustomerCount DESC LIMIT 1;","The generated query uses 'od.CustomerID', but it should join 'Order Details' with 'orders' to access 'orders.CustomerID', as the ground truth query does.",None
What is the total sales generated by each employee for the month of June 2023?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = 6 AND YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= '2023-06-01' AND o.OrderDate < '2023-07-01'
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","Both queries calculate total sales per employee for June 2023, though they use slightly different methods to filter the date. Both achieve the same result.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE MONTH(orders.OrderDate) = 6 AND YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID","Both queries join the same tables using the same conditions, apply the same filters for June 2023, calculate total sales the same way, and group by EmployeeID. The order of joins does not affect the result.",both
Which employee works under the highest number of managers?,"SELECT employees.EmployeeID, COUNT(DISTINCT employees.ReportsTo) AS Managers FROM employees WHERE employees.ReportsTo IS NOT NULL GROUP BY employees.EmployeeID ORDER BY Managers DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(DISTINCT ReportsTo) AS ManagerCount
FROM employees
WHERE ReportsTo IS NOT NULL
GROUP BY EmployeeID
ORDER BY ManagerCount DESC
LIMIT 1;
```","Both queries count distinct managers for each employee, order by count in descending order, and return the top result. They yield the same result despite slight differences in aliasing and formatting.","SELECT e1.EmployeeID, COUNT(DISTINCT e2.ReportsTo) AS Managers FROM employees e1 JOIN employees e2 ON e1.EmployeeID = e2.ReportsTo GROUP BY e1.EmployeeID ORDER BY Managers DESC LIMIT 1;","The generated query counts managers for employees who are listed as other employees' managers, rather than counting the distinct managers that all employees report to. The ground truth query correctly counts each distinct manager an employee reports to, considering cases where 'ReportsTo' is non-null.",Base
How does the total sales revenue compare between Q1 and Q2 of 2023?,"SELECT 'Q1' AS quarter, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' UNION ALL SELECT 'Q2', SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30'","```sql
SELECT 
    SUM(CASE WHEN MONTH(orders.OrderDate) BETWEEN 1 AND 3 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) END) AS Q1_Sales,
    SUM(CASE WHEN MONTH(orders.OrderDate) BETWEEN 4 AND 6 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) END) AS Q2_Sales
FROM 
    [Order Details] 
JOIN 
    orders ON [Order Details].OrderID = orders.OrderID 
WHERE 
    orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'
```","Both queries calculate total sales revenue for Q1 and Q2 of 2023 using the same logic and conditions, just structured differently.",(SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = 2023 AND EXTRACT(QUARTER FROM o.OrderDate) = 1) - (SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = 2023 AND EXTRACT(QUARTER FROM o.OrderDate) = 2),"The generated query calculates the difference in sales between Q1 and Q2 directly, while the ground truth query calculates total sales for each quarter separately and doesn't perform subtraction.",Base
Which products have higher units on order than units in stock?,SELECT ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;,"```sql
SELECT ProductID, ProductName
FROM products
WHERE UnitsOnOrder > UnitsInStock;
```","Both queries compare UnitsOnOrder and UnitsInStock and return products where UnitsOnOrder is greater. The only difference is the inclusion of ProductID in the SELECT clause, which does not affect the core result concerning ProductName.",SELECT ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;,Both queries are identical and correctly answer the user's question by selecting products with more units on order than in stock.,both
How many products have never been ordered?,SELECT p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;,"```sql
SELECT COUNT(*) AS NeverOrderedProducts
FROM products
WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);
```","The generated SQL query and the ground truth query both identify products that have never been ordered. The generated query counts these products, while the ground truth query lists them. The number of products will match.",SELECT COUNT(*) FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,Both queries effectively identify products that have never been ordered by checking for product IDs not present in the 'Order Details' table.,both
Which product generated the most revenue this quarter?,"SELECT ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductRevenue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE QUARTER(o.OrderDate) = QUARTER(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY ProductID ORDER BY ProductRevenue DESC LIMIT 1;","```sql
SELECT 
    od.ProductID,
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM 
    [Order Details] od
JOIN 
    orders o ON od.OrderID = o.OrderID
WHERE 
    o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) 
    AND o.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) + INTERVAL '3 months'
GROUP BY 
    od.ProductID
ORDER BY 
    TotalRevenue DESC
LIMIT 1;
```","The generated query uses DATE_TRUNC to determine the current quarter, which might not always align with QUARTER function logic from the ground truth query. They do not always yield the same results depending on how quarters are defined in the system.","SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM [Order Details] od WHERE EXTRACT(YEAR FROM CURRENT_DATE) = EXTRACT(YEAR FROM od.OrderID) AND EXTRACT(QUARTER FROM CURRENT_DATE) = EXTRACT(QUARTER FROM od.OrderID) GROUP BY od.ProductID ORDER BY Revenue DESC LIMIT 1;",The generated query uses EXTRACT on the OrderID which is incorrect. OrderID is likely not a date field. The ground truth correctly extracts the YEAR and QUARTER from the OrderDate.,None
Which customer has placed the highest number of orders?,"SELECT customers.CustomerID, COUNT(orders.OrderID) AS NumberOfOrders FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID ORDER BY NumberOfOrders DESC LIMIT 1;","```sql
SELECT CustomerID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY CustomerID
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries group by CustomerID and order by the highest count of orders, then limit the result to the top entry. The join in the ground truth query is unnecessary if the orders table already contains customer IDs, so both queries will yield the same result.","SELECT orders.CustomerID, COUNT(*) AS OrderCount FROM orders GROUP BY orders.CustomerID ORDER BY OrderCount DESC LIMIT 1;","Both queries accurately determine the customer with the highest number of orders. The generated query works directly with the 'orders' table, assuming all relevant customers are present, while the ground truth query includes a join with the 'customers' table. However, the results will be the same if there is always a corresponding customer entry for each order.",both
What percentage of orders were delivered on time last month?,SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL '1' MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL '1' MONTH);,"```sql
SELECT (COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID)) AS on_time_delivery_rate 
FROM orders 
WHERE OrderDate BETWEEN '2023-09-01' AND '2023-09-30';
```","The generated query uses a specific date range for the previous month (2023-09-01 to 2023-09-30), while the ground truth query dynamically calculates the previous month using CURRENT_DATE, accommodating any month length.","SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM orders WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND orders.OrderDate < CURDATE()) AS on_time_delivery_rate FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND orders.OrderDate < CURDATE()","The generated query considers orders from the last 30 days dynamically, while the ground truth query specifically checks for the last calendar month. This could lead to different results if executed at different times of the month.",None
How many orders are shipped per shipping company each month?,"SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY Month, ShipVia;","```sql
SELECT MONTH(OrderDate) AS Month, ShipVia, COUNT(OrderID) AS OrdersShipped
FROM orders
GROUP BY MONTH(OrderDate), ShipVia
ORDER BY Month, ShipVia;
```","The generated query uses MONTH(OrderDate) while the ground truth query uses DATE_FORMAT(ShippedDate, '%Y-%m'), leading to potentially different groupings and results.","SELECT DATE_TRUNC('month', orders.ShippedDate) AS month, orders.ShipVia, COUNT(orders.OrderID) AS order_count FROM orders GROUP BY month, orders.ShipVia","Both queries group orders by month and shipping company, then count the orders. They use different date functions, but achieve the same goal.",FT
Which employee has generated the highest sales this year?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE EXTRACT(YEAR FROM orders.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE YEAR(o.OrderDate) = YEAR(CURDATE())
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 1;
```",Both queries accurately calculate the total sales per employee for the current year and return the employee with the highest sales. The differences in function names (YEAR/CURDATE versus EXTRACT/YEAR FROM CURRENT_DATE) are standard SQL variations and yield the same result.,"SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","The generated query includes CONCAT function for employee names, which could lead to different results due to a discrepancy in selected columns. Both queries correctly compute total sales, but the generated query returns employee names, unlike the ground truth.",Base
How many units of each product are currently in stock?,"SELECT ProductName, UnitsInStock FROM products;","```sql
SELECT ProductName, UnitsInStock 
FROM products;
```",Both queries are identical and accurately retrieve the number of units in stock for each product.,"SELECT ProductID, ProductName, UnitsInStock FROM products;","Both queries retrieve ProductName and UnitsInStock, which directly answer the user's question about current stock. Inclusion of ProductID in the generated query does not affect the correctness of the result.",both
Which month experienced the highest shipping cost?,"SELECT EXTRACT(MONTH FROM OrderDate) AS month, SUM(Freight) AS total_shipping_cost FROM orders GROUP BY EXTRACT(MONTH FROM OrderDate) ORDER BY total_shipping_cost DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Freight) AS TotalShippingCost
FROM orders
GROUP BY Month
ORDER BY TotalShippingCost DESC
LIMIT 1;
```","The generated query groups by year and month, while the ground truth query groups only by month, potentially resulting in different outputs.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Freight) AS TotalShippingCost FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY TotalShippingCost DESC LIMIT 1;","The generated query groups by year and month, while the ground truth query groups by month alone, potentially leading to different results.",None
What is the total number of products sold to each country?,"SELECT orders.ShipCountry, SUM([Order Details].Quantity) AS TotalProductsSold FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipCountry;","```sql
SELECT orders.ShipCountry, SUM([Order Details].Quantity) AS TotalProductsSold
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY orders.ShipCountry;
```","The generated SQL query matches the ground truth query exactly and correctly calculates the total number of products sold to each country by summing the Quantity in the Order Details table, grouped by ShipCountry.","SELECT orders.ShipCountry, SUM([Order Details].Quantity) AS total_products_sold FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.ShipCountry",Both queries correctly aggregate the total number of products sold to each country using a join between the orders and [Order Details] tables. They sum the Quantity column and group by ShipCountry. The differences in SQL syntax and aliasing do not affect the outcome.,both
What is the average unit price for products with a quantity greater than 50?,SELECT AVG(UnitPrice) FROM [Order Details] WHERE Quantity > 50;,"```sql
SELECT AVG(UnitPrice) AS AverageUnitPrice
FROM [Order Details]
WHERE Quantity > 50;
```","Both queries calculate the average unit price for products with a quantity greater than 50, despite the generated query including an alias for the average.",SELECT AVG(UnitPrice) AS AverageUnitPrice FROM [Order Details] WHERE Quantity > 50;,Both queries calculate the average unit price for products with a quantity greater than 50 and will yield the same result. The column alias in the generated query does not affect the outcome.,both
Calculate the monthly sales performance for each product.,"SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, p.ProductID, SUM(od.Quantity) AS MonthlyPerformance FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY EXTRACT(MONTH FROM o.OrderDate), p.ProductID","```sql
SELECT 
    p.ProductID,
    p.ProductName,
    SUM(od.Quantity) AS TotalSales
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.ProductName
```","The generated SQL query does not include the calculation of monthly performance, lacking the grouping by the month of the order.","SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, p.ProductID, SUM(od.Quantity) AS ProductPerformance FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY EXTRACT(MONTH FROM o.OrderDate), p.ProductID;","The generated SQL query and the ground truth query perform the same calculation by summing the quantity for each product per month. The only difference is the alias used for the SUM column, which does not affect the result.",FT
How many suppliers have their contact details missing?,SELECT COUNT(*) AS MissingContacts FROM suppliers WHERE ContactName IS NULL OR Phone IS NULL;,"```sql
SELECT COUNT(*) AS MissingContactDetails
FROM suppliers
WHERE ContactName IS NULL OR ContactTitle IS NULL OR Phone IS NULL;
```","The generated query checks for ContactTitle in addition to ContactName and Phone, which is not required according to the ground truth query.",SELECT COUNT(*) AS MissingContact FROM suppliers WHERE ContactName IS NULL;,"The generated query only checks for missing ContactName, while the ground truth also checks for missing Phone details.",None
Find employees with the highest differences in sales by month.,"SELECT employees.EmployeeID, EXTRACT(YEAR FROM orders.OrderDate) AS OrderYear, EXTRACT(MONTH FROM orders.OrderDate) AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, OrderYear, OrderMonth ORDER BY EmployeeID, OrderMonth;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, 
       MONTH(o.OrderDate) AS SalesMonth, 
       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales,
       (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) - 
        LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) OVER (PARTITION BY e.EmployeeID ORDER BY MONTH(o.OrderDate))) ) AS SalesDifference
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, SalesMonth
HAVING SalesDifference IS NOT NULL
ORDER BY SalesDifference DESC
```","The generated query calculates sales differences using LAG, while the ground truth query doesn't compute differences but aggregates monthly sales.","SELECT EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN ""Order Details"" od ON o.OrderID = od.OrderID GROUP BY Year, Month, e.EmployeeID HAVING ABS(MAX(MonthlySales) - MIN(MonthlySales)) = (SELECT MAX(SalesDiff) FROM (SELECT EXTRACT(YEAR FROM o1.OrderDate) AS Year, EXTRACT(MONTH FROM o1.OrderDate) AS Month, e1.EmployeeID, ABS(MAX(monthly_sales) - MIN(monthly_sales)) AS SalesDiff FROM employees e1 JOIN orders o1 ON e1.EmployeeID = o1.EmployeeID JOIN (SELECT OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS monthly_sales FROM ""Order Details"" od GROUP BY OrderID) od1 ON o1.OrderID = od1.OrderID GROUP BY Year, Month, e1.EmployeeID) subquery) ORDER BY e.EmployeeID, Year, Month;",The generated query computes the maximum difference in monthly sales per employee but fails to accurately find employees with the highest differences. The ground truth query just calculates monthly sales without focusing on differences.,None
How many units are currently on order for discontinued products?,SELECT SUM(UnitsOnOrder) FROM products WHERE Discontinued = 1;,"```sql
SELECT SUM(UnitsOnOrder) AS TotalUnitsOnOrder
FROM products
WHERE Discontinued = 1;
```","Both queries calculate the sum of units on order for products marked as discontinued, so they yield the same result.",SELECT SUM(products.UnitsOnOrder) FROM products WHERE products.Discontinued = 1,"Both queries calculate the sum of 'UnitsOnOrder' for products that are discontinued. Table and column references are consistent, yielding the same results.",both
How much freight was paid per shipping method last quarter?,"SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders WHERE OrderDate >= DATEADD(quarter, -1, CURRENT_DATE) GROUP BY ShipVia;","```sql
SELECT ShipVia, SUM(Freight) AS TotalFreight
FROM orders
WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '3 months') 
  AND OrderDate < DATE_TRUNC('quarter', CURRENT_DATE)
GROUP BY ShipVia;
```","The generated query covers a period ending at the current quarter start, while the ground truth covers the last full quarter.","SELECT o.ShipVia, SUM(o.Freight) AS TotalFreight FROM orders o WHERE o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '3 months') GROUP BY o.ShipVia;","The generated query may include dates from the current quarter, not just the last quarter, resulting in potentially different totals.",None
What is the average shipping cost per order over the last month?,"SELECT AVG(Freight) FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month';","```sql
SELECT AVG(Freight) AS Average_Shipping_Cost
FROM orders
WHERE OrderDate >= DATEADD(month, -1, GETDATE());
```","The generated query calculates the average from today minus one month, which may include partial months. The ground truth query calculates from the start of last month, which ensures a full month is considered.",SELECT AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE orders.OrderDate > (CURRENT_DATE - INTERVAL 1 MONTH),"The generated query uses '>' for dates in the last month, while the ground truth query uses '>=' with 'DATE_TRUNC', potentially leading to different date ranges.",None
Identify the most frequently ordered product.,"SELECT ProductID, COUNT(ProductID) AS OrderFrequency FROM [Order Details] GROUP BY ProductID ORDER BY OrderFrequency DESC LIMIT 1;","```sql
SELECT ProductID, SUM(Quantity) AS TotalQuantity
FROM [Order Details]
GROUP BY ProductID
ORDER BY TotalQuantity DESC
LIMIT 1;
```","The generated query sums the quantities ordered for each product, while the ground truth query counts the number of times a product ID appears, indicating the frequency of orders.","SELECT od.ProductID, COUNT(od.OrderID) AS OrderCount FROM [Order Details] od GROUP BY od.ProductID ORDER BY OrderCount DESC LIMIT 1;","Both queries select ProductID and count the occurrences of ProductID in the Order Details table, group by ProductID, and order by the count in descending order, then limit the results to 1, effectively identifying the most frequently ordered product.",FT
Identify the suppliers with late shipments on orders.,SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.RequiredDate < orders.ShippedDate GROUP BY suppliers.CompanyName;,"```sql
SELECT DISTINCT s.SupplierID, s.CompanyName, o.OrderID
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
WHERE o.ShippedDate > o.RequiredDate
```","The generated query includes SupplierID and OrderID, whereas the ground truth only includes CompanyName. The ground truth query groups by CompanyName, while the generated query uses DISTINCT without grouping.","SELECT COUNT(orders.OrderID) AS LateShipments, suppliers.CompanyName FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE orders.RequiredDate < orders.ShippedDate GROUP BY suppliers.CompanyName;","The generated SQL query returns a count of late shipments per supplier, while the ground truth SQL query simply lists the suppliers with late shipments, without a count.",None
How many orders include a discount greater than 10%?,SELECT COUNT(DISTINCT od.OrderID) FROM [Order Details] od WHERE od.Discount > 0.1;,"```sql
SELECT COUNT(DISTINCT OrderID) AS DiscountedOrders
FROM [Order Details]
WHERE Discount > 0.10;
```",Both queries count distinct OrderIDs from the Order Details table where the discount is greater than 10%.,SELECT COUNT(DISTINCT OrderID) FROM [Order Details] WHERE Discount > 0.10;,Both queries count distinct OrderIDs from the 'Order Details' table where the Discount is greater than 10%. The difference in the alias 'od' and the numerical format do not affect the logic or outcome.,both
List the discontinued products that still have inventory.,SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;,"```sql
SELECT ProductID, ProductName, UnitsInStock
FROM products
WHERE Discontinued = 1 AND UnitsInStock > 0;
```","The generated query includes 'ProductID' and 'UnitsInStock' in the SELECT clause, whereas the ground truth query only includes 'ProductName'. The resulting data differs in structure, though they filter correctly.",SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;,"Both queries select ProductName from products where Discontinued is 1 and UnitsInStock is greater than 0, so they yield the same results.",FT
List customers along with their total number of orders.,"SELECT customers.CustomerID, COUNT(orders.OrderID) AS NumberOfOrders FROM customers LEFT JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID;","```sql
SELECT customers.CustomerID, customers.CompanyName, COUNT(orders.OrderID) AS TotalOrders
FROM customers
LEFT JOIN orders ON customers.CustomerID = orders.CustomerID
GROUP BY customers.CustomerID, customers.CompanyName;
```","Both queries perform a LEFT JOIN between customers and orders to list each customer along with their total number of orders. The only difference is the inclusion of the CompanyName in the GROUP BY clause of the Generated SQL Query, which doesn't affect the result.","SELECT c.CustomerID, COUNT(o.OrderID) AS TotalOrders FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID;","Both queries perform a LEFT JOIN between the customers and orders tables, grouping by CustomerID to count the number of orders per customer. They yield the same results.",both
Find low-performing products based on sales and stock levels.,"SELECT p.ProductName, SUM(od.Quantity) AS TotalSales, p.UnitsInStock FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName, p.UnitsInStock HAVING SUM(od.Quantity) < p.UnitsInStock","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales, p.UnitsInStock
FROM products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
HAVING SUM(od.Quantity) < p.ReorderLevel OR p.UnitsInStock < p.ReorderLevel;
```",The queries differ in logic. The generated query considers products low-performing if total sales are less than reorder level or stock is less than reorder level. The ground truth query considers products low-performing if total sales are less than units in stock.,"SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName HAVING SUM(od.Quantity) < p.UnitsInStock;","Both queries identify low-performing products where total sales are less than units in stock, based on aggregation and conditional logic.",FT
Which city has the highest number of shipments?,"SELECT ShipCity, COUNT(OrderID) AS ShipmentCount FROM orders GROUP BY ShipCity ORDER BY ShipmentCount DESC LIMIT 1;","```sql
SELECT ShipCity, COUNT(*) AS ShipmentCount
FROM orders
GROUP BY ShipCity
ORDER BY ShipmentCount DESC
LIMIT 1;
```","The generated query accurately answers the user's question. Both queries count the number of shipments for each city using GROUP BY and ORDER BY to find the city with the highest count, returning the same result.","SELECT ShipCity, COUNT(OrderID) FROM orders GROUP BY ShipCity ORDER BY COUNT(OrderID) DESC LIMIT 1;","Both queries select the city with the highest number of shipments by counting OrderID per ShipCity, then ordering the counts in descending order, and finally limiting the result to one city.",both
Which products are below their reorder level?,SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"```sql
SELECT ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock < ReorderLevel;
```","Both queries check for products where UnitsInStock is less than ReorderLevel, and 'ProductName' is included in the output. The generated query includes additional fields which do not affect the main requirement.",SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,The generated SQL query and the ground truth query are identical and accurately answer the user's question by selecting products where UnitsInStock is less than ReorderLevel.,both
How many orders have zero freight cost?,SELECT COUNT(OrderID) AS FreeShippingOrders FROM orders WHERE Freight = 0;,"```sql
SELECT COUNT(OrderID) AS ZeroFreightOrders
FROM orders
WHERE Freight = 0;
```","Both queries count the number of orders with zero freight cost and are essentially the same, with only the alias name differing.",SELECT COUNT(*) AS ZeroFreightOrders FROM orders WHERE Freight = 0;,"Both queries count the number of orders with a Freight cost of zero, using COUNT(*) and COUNT(OrderID) respectively, which yields the same result.",both
Which employee handled the largest order by value?,"SELECT o.EmployeeID, o.OrderID FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID, o.OrderID ORDER BY SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY TotalOrderValue DESC
LIMIT 1;
```","The generated query finds the employee with the largest total order value summed across all orders, while the ground truth query finds the specific order and employee with the highest single order value.","SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, orders.OrderID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS OrderValue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, orders.OrderID, CONCAT(employees.FirstName, ' ', employees.LastName) HAVING SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) = (SELECT MAX(OrderValue) FROM (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS OrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID) AS subquery) LIMIT 1;","The generated query includes the employee's name and filters with a MAX condition, while the ground truth query orders by value without using MAX.",None
What is the earliest and latest order date for each customer?,"SELECT c.CustomerID, MIN(o.OrderDate) AS FirstOrder, MAX(o.OrderDate) AS LastOrder FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID;","```sql
SELECT 
    CustomerID, 
    MIN(OrderDate) AS EarliestOrderDate, 
    MAX(OrderDate) AS LatestOrderDate
FROM 
    orders
GROUP BY 
    CustomerID;
```","Both queries group by CustomerID and select the MIN and MAX of OrderDate, yielding the same result. The LEFT JOIN in the Ground Truth query ensures all customers are included, even with no orders, but doesn't affect results where orders exist.","SELECT CustomerID, MIN(OrderDate) AS FirstOrder, MAX(OrderDate) AS LastOrder FROM orders GROUP BY CustomerID;","The generated SQL query will exclude customers with no orders, whereas the ground truth query includes all customers even if they have no orders.",Base
List the employees who have not placed any orders this month.,"SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) WHERE o.OrderID IS NULL;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName 
FROM employees e
LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID 
  AND o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE)
WHERE o.OrderID IS NULL;
```",Both queries correctly identify employees who have not placed any orders in the current month by using a LEFT JOIN and checking for NULL in the OrderID. The difference in date functions does not affect the result.,SELECT employees.EmployeeID FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID AND MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) WHERE orders.OrderID IS NULL;,"The generated SQL query does not include the FirstName and LastName columns from the employees table, which could be helpful for identification purposes.",Base
Which suppliers have orders that were delivered late?,SELECT DISTINCT s.SupplierID FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE o.RequiredDate < o.ShippedDate;,"```sql
SELECT DISTINCT s.SupplierID, s.CompanyName
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
WHERE o.ShippedDate > o.RequiredDate;
```","Both queries join the same tables and apply the same condition to find late deliveries, differing only in column selection and table aliasing.","SELECT DISTINCT suppliers.SupplierID, CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN orders ON products.ProductID = orders.OrderID WHERE ShippedDate > RequiredDate;","The generated SQL query incorrectly uses products.ProductID to join with orders.OrderID instead of using the Order Details table, causing mismatches. It also directly compares ShippedDate with RequiredDate without considering the order details structure used in the ground truth query.",Base
Calculate the inventory turnover ratio for the current month.,SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE) AND YEAR(OrderDate) = YEAR(CURRENT_DATE);,"```sql
SELECT 
    SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio
FROM 
    products
JOIN 
    [Order Details] ON products.ProductID = [Order Details].ProductID
WHERE 
    MONTH([Order Details].OrderID) = MONTH(CURRENT_DATE) AND 
    YEAR([Order Details].OrderID) = YEAR(CURRENT_DATE);
```",The generated query uses OrderID instead of OrderDate to filter by the current month and year. OrderID is likely not a date field for filtering.,SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS Inventory_Turnover_Ratio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE EXTRACT(MONTH FROM CURDATE()) = EXTRACT(MONTH FROM od.OrderDate) AND EXTRACT(YEAR FROM CURDATE()) = EXTRACT(YEAR FROM od.OrderDate);,"Both queries calculate the inventory turnover ratio for the current month using similar logic. They sum the revenue and divide it by the average units in stock, filtering by the current month and year based on the order date.",FT
What is the average time taken to fulfill orders per month?,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(DATE_DIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY month","```sql
SELECT YEAR(OrderDate) AS order_year, MONTH(OrderDate) AS order_month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS average_fulfillment_time
FROM orders
GROUP BY YEAR(OrderDate), MONTH(OrderDate);
```","Both queries calculate the average fulfillment time per month by using the difference between ShippedDate and OrderDate, and they group results by year and month. Although the format for displaying the month differs slightly, the logical result is the same.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month;",Both queries calculate the average time taken to fulfill orders per month by using the DATE_FORMAT function to group by month and AVG with DATEDIFF to calculate the average time difference between OrderDate and ShippedDate.,both
Identify the suppliers with products having a unit price above the average unit price.,SELECT CompanyName FROM suppliers WHERE SupplierID IN (SELECT SupplierID FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products));,"```sql
SELECT DISTINCT s.SupplierID, s.CompanyName
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
WHERE p.UnitPrice > (SELECT AVG(UnitPrice) FROM products);
```",Both queries select the suppliers with products having a unit price above the average. They yield the same results despite differences in structure.,SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitPrice > (SELECT AVG(UnitPrice) FROM products);,"Both queries identify suppliers with products priced above the average, using different but equivalent approaches to achieve the same goal.",both
Which category has the highest sales revenue?,"SELECT p.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.CategoryID ORDER BY Revenue DESC LIMIT 1;","```sql
SELECT CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
GROUP BY CategoryID
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries join the 'Order Details' and 'products' tables, calculate the total sales revenue for each category, group by CategoryID, and order by sales revenue in descending order. They both limit the result to the top category, achieving the same outcome.","SELECT p.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID ORDER BY TotalRevenue DESC LIMIT 1;","Both queries calculate the total revenue per category by joining the products and order details tables using the ProductID, summing the sales with discount applied, and then returning the category with the highest revenue.",both
What is the total revenue difference between employees with different titles?,"SELECT employees.Title, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Title;","```sql
SELECT e.Title, 
       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.Title;
```",Both queries calculate total revenue per title but don't calculate the difference between titles as the user requested.,"SELECT e.Title, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Title","Both queries calculate the total revenue for each employee title by summing up the product of UnitPrice, Quantity, and Discount from the Order Details table, and they group the results by employee title. The structure and logic of the queries are identical, which means they will yield the same results despite minor differences in table aliasing.",FT
Find products with a sales decline over the past three months.,"SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IN (SELECT OrderID FROM orders WHERE OrderDate BETWEEN DATEADD(MONTH, -3, CURRENT_DATE) AND CURRENT_DATE) GROUP BY p.ProductID, p.ProductName HAVING SUM(CASE WHEN OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) THEN od.Quantity ELSE 0 END) < SUM(CASE WHEN OrderDate < DATEADD(MONTH, -1, CURRENT_DATE) THEN od.Quantity ELSE 0 END) ORDER BY SUM(od.Quantity) DESC;","```sql
SELECT p.ProductID, p.ProductName, 
       SUM(CASE WHEN o.OrderDate >= DATEADD(MONTH, -3, GETDATE()) THEN od.Quantity ELSE 0 END) AS Sales_Last_3_Months,
       SUM(CASE WHEN o.OrderDate < DATEADD(MONTH, -3, GETDATE()) AND o.OrderDate >= DATEADD(MONTH, -6, GETDATE()) THEN od.Quantity ELSE 0 END) AS Sales_Previous_3_Months
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY p.ProductID, p.ProductName
HAVING SUM(CASE WHEN o.OrderDate >= DATEADD(MONTH, -3, GETDATE()) THEN od.Quantity ELSE 0 END) < 
       SUM(CASE WHEN o.OrderDate < DATEADD(MONTH, -3, GETDATE()) AND o.OrderDate >= DATEADD(MONTH, -6, GETDATE()) THEN od.Quantity ELSE 0 END);
```","The generated query compares sales over the last three months with the previous three months, while the ground truth compares the last month with the preceding period.","SELECT ProductID, P.ProductName FROM (SELECT ProductID, SUM(Quantity) AS MonthlySales FROM [Order Details] WHERE TO_CHAR(OrderDate, 'YYYY-MM') IN (SELECT TO_CHAR(CURRENT_DATE - INTERVAL '1' MONTH, 'YYYY-MM') AS LastMonth FROM DUAL)) AS CurrentMonthSales INNER JOIN (SELECT ProductID, SUM(Quantity) AS MonthlySales FROM [Order Details] WHERE TO_CHAR(OrderDate, 'YYYY-MM') IN (SELECT TO_CHAR(CURRENT_DATE - INTERVAL '2' MONTH, 'YYYY-MM') FROM DUAL)) AS PreviousMonthSales ON CurrentMonthSales.ProductID = PreviousMonthSales.ProductID WHERE CurrentMonthSales.MonthlySales < PreviousMonthSales.MonthlySales;","The generated query checks sales decline only for the last two months, not over the past three months. It also lacks grouping and aggregation over three distinct months.",None
Calculate the total revenue from orders with a unit price above 100.,SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS HighPriceRevenue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE od.UnitPrice > 100;,"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE [Order Details].UnitPrice > 100
```",Both queries calculate the total revenue for orders with a unit price higher than 100 by joining the Order Details and Orders tables and applying the same filter condition and calculation formula.,SELECT SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalRevenue FROM [Order Details] WHERE UnitPrice > 100;,"Both queries calculate the total revenue from orders where UnitPrice is greater than 100, using the same formula. The JOIN in the ground truth query does not affect the result in this context as the filtering condition and computation only involve the [Order Details] table.",both
Which suppliers provide products that need to be reordered?,SELECT DISTINCT SupplierID FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 0;,"```sql
SELECT DISTINCT p.SupplierID
FROM products p
WHERE p.UnitsInStock <= p.ReorderLevel AND p.Discontinued = 0;
```","Both queries correctly identify suppliers whose products need to be reordered. The difference in the use of '<=' versus '<' for the UnitsInStock and ReorderLevel comparison does not affect the ultimate set of suppliers identified because if a product is at its ReorderLevel, it typically needs to be reordered.","SELECT SupplierID, COUNT(ProductID) AS ProductsToReorder FROM products WHERE UnitsInStock <= ReorderLevel GROUP BY SupplierID;","The generated query counts products to reorder but doesn't filter out discontinued products, whereas the ground truth query checks for active products and doesn't count.",Base
Calculate the total freight cost per country.,"SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;","```sql
SELECT Country, SUM(Freight) AS TotalFreightCost
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
GROUP BY Country;
```","The generated query calculates freight per customer country, while the ground truth calculates freight per shipping country.","SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;","Both queries calculate the total freight cost per country by summing the Freight column and grouping by ShipCountry. The only difference is the alias used for the SUM(Freight) column, which does not affect the result.",FT
Which customers placed orders during a specific month?,SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE EXTRACT(MONTH FROM o.OrderDate) = 6 AND EXTRACT(YEAR FROM o.OrderDate) = 2023;,"```sql
SELECT DISTINCT customers.CustomerID, customers.CompanyName, customers.ContactName, customers.OrderDate
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
WHERE MONTH(orders.OrderDate) = specific_month AND YEAR(orders.OrderDate) = specific_year;
```","The generated query includes customer details like CompanyName and ContactName, and filters by unspecified placeholders specific_month and specific_year. The ground truth query returns only CustomerID for June 2023.",SELECT CustomerID FROM orders WHERE MONTH(OrderDate) = specific_month;,"The generated query does not reference the year, nor does it join the customers table to ensure CustomerID corresponds to actual customers.",None
Which products have never been discontinued and are always in stock?,SELECT ProductName FROM products WHERE Discontinued = 0 AND UnitsInStock > 0;,"```sql
SELECT ProductID, ProductName
FROM products
WHERE Discontinued = 0 AND UnitsInStock > 0;
```","Both queries filter products that are not discontinued and always in stock. The difference is that the generated query selects ProductID in addition to ProductName, which does not affect the fulfillment of the user's question.",SELECT ProductName FROM products WHERE Discontinued = 0 AND UnitsInStock > 0;,"The generated SQL query and the ground truth SQL query are identical, both correctly selecting products that are not discontinued and always in stock.",both
Which products have a sales quantity above their reorder level?,"SELECT products.ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName HAVING SUM([Order Details].Quantity) > products.ReorderLevel;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSalesQuantity
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
HAVING SUM(od.Quantity) > p.ReorderLevel;
```","Both queries identify products with sales quantities above their reorder levels. They group by ProductID and ProductName, calculate the total sales quantity, and apply the HAVING clause to filter products exceeding their ReorderLevel.",SELECT p.ProductName FROM products p WHERE p.UnitsOnOrder > p.ReorderLevel;,"The generated query compares UnitsOnOrder to ReorderLevel, whereas the ground truth calculates total quantity sold using SUM(Order Details.Quantity) to compare against ReorderLevel.",Base
What is the average discount given across all products?,SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details];
```","Both queries calculate the average discount across all records in the Order Details table, thus they yield the same results.",SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];,Both queries are semantically identical; they calculate the average discount from the 'Order Details' table.,both
What is the average order fulfillment time for orders shipped during weekends?,"SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE EXTRACT(ISODOW FROM ShippedDate) IN (6, 7);","```sql
SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageFulfillmentTime
FROM orders
WHERE DAYOFWEEK(orders.ShippedDate) IN (1, 7);
```","The generated query uses DAYOFWEEK, where 1 represents Sunday and 7 represents Saturday. The ground truth query uses EXTRACT(ISODOW), where 6 is Saturday and 7 is Sunday. The conditions do not match, leading to different results for weekend days.","SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE EXTRACT(DOW FROM ShippedDate) IN (0, 6);","Both queries correctly calculate the average order fulfillment time for orders shipped during weekends. The difference in DOW (0, 6) and ISODOW (6, 7) arises from how weekdays are counted, but both represent Saturday and Sunday.",FT
What is the total discount given on all orders?,SELECT SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details];,"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount
FROM [Order Details];
```","Both queries calculate the total discount by multiplying UnitPrice, Quantity, and Discount, then summing the results. They are functionally equivalent since they operate on the same table and columns, despite the difference in bracket notation.",SELECT SUM(Discount * UnitPrice * Quantity) AS TotalDiscount FROM [Order Details];,"Both queries calculate the total discount given on all orders by multiplying UnitPrice, Quantity, and Discount, then summing the results. The order of multiplication does not affect the outcome.",both
Identify the countries with the highest number of orders.,"SELECT ShipCountry, COUNT(OrderID) FROM orders GROUP BY ShipCountry ORDER BY COUNT(OrderID) DESC;","```sql
SELECT ShipCountry, COUNT(OrderID) AS TotalOrders
FROM orders
GROUP BY ShipCountry
ORDER BY TotalOrders DESC;
```","Both queries group by ShipCountry and count the OrderID, then order the results by the count in descending order. The generated query uses an alias for the count, but this does not affect the correctness of the results.","SELECT ShipCountry, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipCountry ORDER BY TotalOrders DESC;",Both queries count orders by ShipCountry and order the results by the count in descending order. They yield the same results.,both
What percentage of products were shipped via each shipping method?,"SELECT ShipVia, COUNT(orders.OrderID) * 100.0 / (SELECT COUNT(*) FROM orders) AS shipping_method_percentage FROM orders GROUP BY ShipVia","```sql
SELECT ShipVia, 
       (COUNT(OrderID) * 100.0 / (SELECT COUNT(OrderID) FROM orders)) AS percentage_shipped 
FROM orders 
GROUP BY ShipVia;
```","Both queries calculate the percentage of products shipped for each method by dividing the count of orders per shipping method by the total number of orders, and multiplying by 100. The logic and results are equivalent.","SELECT ShipVia, COUNT(OrderID) * 100.0 / SUM(COUNT(OrderID)) OVER() AS Percentage FROM orders GROUP BY ShipVia","Both queries calculate the percentage of orders shipped via each method by dividing the count of orders for each 'ShipVia' by the total count of orders in the 'orders' table. The approaches differ slightly, but the end result is the same.",both
What is the average unit price for products from each supplier?,"SELECT s.SupplierID, AVG(p.UnitPrice) AS AverageUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;","```sql
SELECT suppliers.SupplierID, AVG(products.UnitPrice) AS AverageUnitPrice
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
GROUP BY suppliers.SupplierID;
```",Both queries join the 'suppliers' and 'products' tables on 'SupplierID' and calculate the average 'UnitPrice' for products grouped by 'SupplierID'. The syntax differences do not affect the result.,"SELECT SupplierID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY SupplierID;",Both queries calculate the average unit price of products per supplier and will yield the same results when considering suppliers present in the products table.,both
How many orders have a shipping cost above the average for their shipping method?,SELECT COUNT(OrderID) FROM orders o1 WHERE Freight > (SELECT AVG(Freight) FROM orders o2 WHERE o2.ShipVia = o1.ShipVia);,"```sql
SELECT COUNT(*) 
FROM orders AS o 
WHERE o.Freight > (
    SELECT AVG(inner_o.Freight) 
    FROM orders AS inner_o 
    WHERE inner_o.ShipVia = o.ShipVia
);
```",Both queries count the number of orders where the shipping cost (Freight) is above the average for their specific shipping method (ShipVia).,SELECT o.OrderID FROM orders o WHERE o.Freight > (SELECT AVG(o2.Freight) FROM orders o2 WHERE o2.ShipVia = o.ShipVia);,"The generated query lists OrderIDs, while the ground truth counts them.",Base
What are the total sales for each product in the last month?,"SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate >= DATEADD(month, -1, CURRENT_DATE) GROUP BY p.ProductName","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.OrderID IN (SELECT OrderID FROM [Orders] WHERE OrderDate >= DATEADD(MONTH, -1, GETDATE()))
GROUP BY p.ProductID, p.ProductName;
```","The generated query calculates total sales by quantity, while the ground truth query calculates sales by multiplying quantity and unit price. Additionally, the date function and filtering logic differ slightly between the two queries.","SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE DATE_FORMAT([Order Details].OrderDate, 'YYYY-MM') = DATE_FORMAT(NOW() - INTERVAL 1 MONTH, 'YYYY-MM') GROUP BY products.ProductID;","The generated query uses products.ProductID for grouping, while the ground truth uses p.ProductName, which can lead to a mismatch if ProductID and ProductName do not align perfectly. Additionally, the date filter uses different functions: DATE_FORMAT vs DATEADD, which may handle date calculations differently.",None
How many employees work in each region?,"SELECT region.RegionDescription, COUNT(DISTINCT employees.EmployeeID) AS employee_count FROM employees JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID GROUP BY region.RegionDescription","```sql
SELECT region.RegionDescription, COUNT(employees.EmployeeID) AS number_of_employees
FROM employees
JOIN territories ON employees.EmployeeID = employeeTerritories.EmployeeID
JOIN region ON territories.RegionID = region.RegionID
GROUP BY region.RegionDescription;
```",The generated query does not use DISTINCT when counting EmployeeID. It may count employees multiple times if they are associated with multiple territories.,"SELECT Region, COUNT(EmployeeID) FROM employees GROUP BY Region;","The generated query does not account for the full join path from employees to regions through territories, which might impact counts if employees are associated with multiple territories. The ground truth query correctly groups by unique employees per region.",None
Which product had the highest inventory turnover ratio last month?,"SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) AS InventoryTurnover FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE DATE_TRUNC('month', orders.OrderDate) = DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' GROUP BY products.ProductID, products.ProductName ORDER BY InventoryTurnover DESC LIMIT 1;","```sql
SELECT p.ProductID, p.ProductName, 
       SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.OrderID IN (
    SELECT OrderID 
    FROM [Order Details] 
    WHERE OrderDate >= DATEADD(MONTH, -1, GETDATE())
)
GROUP BY p.ProductID, p.ProductName
ORDER BY InventoryTurnoverRatio DESC
LIMIT 1;
```","The generated query uses GETDATE() and DATEADD, which suggests a different SQL syntax (like SQL Server), while the ground truth uses DATE_TRUNC and INTERVAL, indicating a system like PostgreSQL or another ANSI SQL compliant database. Additionally, the generated query checks the OrderDate for the last month incorrectly and lacks a check for complete months.","SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND od.OrderDate < CURDATE() GROUP BY p.ProductName ORDER BY InventoryTurnoverRatio DESC LIMIT 1;","The generated query uses DATE_SUB and CURDATE for date filtering, which may not correctly capture the entire last month. It also doesn't account for dividing by zero as the ground truth query does with NULLIF.",None
Identify the employees who report to a specific manager and their sales totals.,"SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE e.ReportsTo = 5 GROUP BY e.EmployeeID, e.FirstName, e.LastName;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS SalesTotal
FROM employees e
LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID
LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE e.ReportsTo = ? -- Replace ? with the specific manager's EmployeeID
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","The generated SQL query and the ground truth query effectively perform the same function. Both queries identify employees who report to a specific manager and calculate their total sales. The generated query uses a parameterized placeholder for the manager's EmployeeID, which should be replaced with the specific value, while the ground truth query hardcodes this value. Despite this, the results will be equivalent if the placeholder is correctly replaced.","SELECT e.EmployeeID, SUM(o.TotalAmount) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE e.ReportsTo = (SELECT ManagerID FROM employees WHERE EmployeeID = ?) GROUP BY e.EmployeeID;","The generated query does not include detailed sales calculations using order details, and it relies on a placeholder for manager ID, while the ground truth query uses a specific manager ID of 5.",Base
What is the average fulfillment time for orders shipped to the USA?,"SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders WHERE ShipCountry = 'USA'","```sql
SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
WHERE ShipCountry = 'USA';
```",The generated SQL query and the ground truth query are functionally equivalent. Both calculate the average fulfillment time for orders with the same condition of being shipped to the USA.,"SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE ShipCountry = 'USA'","Both queries calculate the average fulfillment time for orders shipped to the USA using the DATEDIFF function and a WHERE clause to filter by ShipCountry. The only difference is the alias name for the resulting average, which does not affect the result.",both
What is the average number of days between order date and required date?,"SELECT AVG(DATEDIFF(orders.RequiredDate, orders.OrderDate)) AS AvgOrderToRequired FROM orders;","```sql
SELECT AVG(DATEDIFF(RequiredDate, OrderDate)) AS AverageDaysBetween
FROM orders;
```","Both queries calculate the average number of days between the 'OrderDate' and 'RequiredDate' from the 'orders' table using the same logic with different alias names, yielding the same result.","SELECT AVG(DATEDIFF(RequiredDate, OrderDate)) AS AverageDays FROM orders WHERE RequiredDate IS NOT NULL;","Both queries calculate the average number of days between 'OrderDate' and 'RequiredDate'. They use the DATEDIFF function and AVG to compute this average from the 'orders' table. The generated query includes an additional WHERE clause to exclude null 'RequiredDate' values, which may be implicitly handled in the ground truth query. The key calculation remains the same in both queries.",both
Which products have the highest unit prices in each category?,"SELECT p.CategoryID, p.ProductName, p.UnitPrice FROM products p JOIN (SELECT CategoryID, MAX(UnitPrice) AS MaxPrice FROM products GROUP BY CategoryID) pm ON p.CategoryID = pm.CategoryID AND p.UnitPrice = pm.MaxPrice;","```sql
SELECT p.CategoryID, p.ProductName, MAX(p.UnitPrice) AS HighestUnitPrice
FROM products p
GROUP BY p.CategoryID, p.ProductName
HAVING p.UnitPrice = (
    SELECT MAX(UnitPrice)
    FROM products
    WHERE CategoryID = p.CategoryID
)
```","The generated query incorrectly uses GROUP BY on ProductName, causing each product to be returned with its own maximum price. This can result in multiple products per category if they have the same price. The ground truth query correctly filters to return only products with the maximum price per category by using a JOIN.","SELECT CategoryID, ProductName, MAX(UnitPrice) AS MaxPrice FROM products GROUP BY CategoryID, ProductName HAVING MAX(UnitPrice) = (SELECT MAX(UnitPrice) FROM products p WHERE p.CategoryID = products.CategoryID);","The generated query incorrectly includes ProductName in the GROUP BY clause, which results in finding the max price for each product rather than each category. This may miss products with the highest price in the same category. The ground truth query correctly finds the max price per category and selects products matching that price.",None
What is the average order value for each month this year?,"SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE DATE_PART('year', o.OrderDate) = DATE_PART('year', CURRENT_DATE) GROUP BY DATE_TRUNC('month', o.OrderDate);","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE 
    YEAR(orders.OrderDate) = YEAR(CURRENT_DATE)
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries calculate the average order value for each month of the current year by joining the orders and order details tables, computing the total order value, and dividing by the count of distinct orders within each month.","SELECT MONTH(o.OrderDate) AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY MONTH(o.OrderDate);","Both queries calculate the average order value per month for the current year. They differ in date functions used, but the logic is equivalent and will yield the same result.",both
Identify suppliers with products that have the lowest stock levels.,"SELECT SupplierID, ProductName, UnitsInStock FROM products WHERE UnitsInStock = (SELECT MIN(UnitsInStock) FROM products);","```sql
SELECT p.ProductID, p.ProductName, p.UnitsInStock, p.SupplierID
FROM products p
WHERE p.UnitsInStock = (SELECT MIN(UnitsInStock) FROM products);
```","The generated query includes the ProductID in its output, which is not present in the ground truth query. Additionally, the generated query does not fully align with the user question's focus on identifying distinct suppliers.","SELECT SupplierID, ProductName, UnitsInStock FROM products WHERE UnitsInStock = (SELECT MIN(UnitsInStock) FROM products);",Both queries are identical and correctly identify suppliers with products having the lowest stock levels by comparing UnitsInStock to the minimum UnitsInStock value across all products.,FT
Get the monthly sales trend for the past year.,"SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY Month ORDER BY Month;","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE 
    orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
GROUP BY 
    Month
ORDER BY 
    Month;
```","The generated query and the ground truth query are semantically equivalent. Both calculate the monthly sales trend for the past year using the same logic and SQL structure, despite slight differences in alias naming.","SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY month ORDER BY month;","Both queries perform the same operations: they select the month and calculate the total sales amount by summing the product of UnitPrice, Quantity, and Discount for the past year. The differences in table aliasing (orders vs. o and [Order Details] vs. od) do not affect the result.",both
How many units are in stock for each supplier's products?,"SELECT suppliers.CompanyName, SUM(products.UnitsInStock) AS TotalUnitsInStock FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName","```sql
SELECT suppliers.CompanyName, SUM(products.UnitsInStock) AS TotalUnitsInStock
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
GROUP BY suppliers.CompanyName;
```",The generated SQL query accurately answers the user's question and yields the same results as the ground truth query. Both queries calculate the sum of units in stock for each supplier's products and group by the supplier's company name.,"SELECT s.SupplierID, SUM(p.UnitsInStock) AS TotalUnitsInStock FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID;","Both queries calculate the total units in stock for each supplier. The only difference is that the generated query selects SupplierID while the ground truth selects CompanyName, which do not affect the numeric result.",both
What is the most frequently used contact title among customers?,"SELECT ContactTitle, COUNT(*) AS Frequency FROM customers GROUP BY ContactTitle ORDER BY Frequency DESC LIMIT 1","```sql
SELECT ContactTitle, COUNT(*) AS Frequency
FROM customers
GROUP BY ContactTitle
ORDER BY Frequency DESC
LIMIT 1;
```","The generated SQL query correctly selects the most frequently used contact title among customers by counting the occurrences of each contact title and ordering by frequency in descending order, limiting to the top result.","SELECT ContactTitle, COUNT(*) AS Frequency FROM customers GROUP BY ContactTitle ORDER BY Frequency DESC LIMIT 1;",The generated SQL query accurately answers the user's question by selecting the most frequently used contact title. It matches the ground truth query in both structure and logic.,both
Which customer region has the highest on-time delivery rate?,"SELECT ShipRegion, (SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS OnTimeDeliveryRate FROM orders GROUP BY ShipRegion ORDER BY OnTimeDeliveryRate DESC LIMIT 1;","```sql
SELECT ShipRegion, 
       COUNT(OrderID) AS TotalOrders,
       SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) AS OnTimeDeliveries,
       (SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 1.0 / COUNT(OrderID)) AS OnTimeDeliveryRate
FROM orders
GROUP BY ShipRegion
ORDER BY OnTimeDeliveryRate DESC
LIMIT 1;
```","Both queries correctly calculate the on-time delivery rate per region and order by it to find the highest rate. They differ only by an additional column in the generated query, which doesn't affect the correctness of the outcome.","SELECT ShipRegion, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipRegion ORDER BY OnTimeRate DESC LIMIT 1;","Both queries calculate the on-time delivery rate per region, order by this rate in descending order, and return the top region. The main difference is in the scale of the result (percentage vs. ratio), but the order and logic are equivalent.",both
Which customer has made the most orders?,"SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY CustomerID
ORDER BY NumberOfOrders DESC
LIMIT 1;
```","Both queries count the number of orders per customer and return the customer with the most orders by using COUNT, GROUP BY, ORDER BY DESC, and LIMIT 1. Differences in alias names do not affect the results.","SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY CustomerID ORDER BY TotalOrders DESC LIMIT 1;","Both queries correctly find the customer with the most orders by counting OrderID, grouping by CustomerID, and ordering by count in descending order with a limit of 1. The column alias difference does not affect the outcome.",both
Which products have been ordered more than 100 times?,"SELECT ProductID, COUNT(OrderID) AS OrderCount FROM [Order Details] GROUP BY ProductID HAVING COUNT(OrderID) > 100;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalOrdered
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
HAVING SUM(od.Quantity) > 100;
```","The generated query calculates products with total quantity ordered over 100, whereas the ground truth checks for products ordered in over 100 separate orders.","SELECT products.ProductName, COUNT(orders.OrderID) AS num_orders FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName HAVING COUNT(orders.OrderID) > 100","The generated query counts 'OrderID' from 'orders' table, but it's likely a mistake. It should only consider the 'Order Details' table, as shown in the ground truth query. Also, the generated query returns 'ProductName', which isn't required by the user's question.",None
Identify the top 5 customers by total order value.,"SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalValue DESC LIMIT 5;","```sql
SELECT c.CustomerID, c.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.CustomerID, c.CompanyName
ORDER BY TotalOrderValue DESC
LIMIT 5;
```","Both queries correctly calculate the total order value per customer, sort by it in descending order, and limit the results to the top 5 customers. The inclusion of CompanyName in the SELECT clause of the generated query does not affect the result.","SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalOrderValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY TotalOrderValue DESC LIMIT 5;","Both queries perform the same operations: they join the customers, orders, and order details tables, calculate the total order value for each customer, group by the customer ID, and return the top 5 customers by total order value. The differences in aliases and naming conventions do not affect the outcome.",both
Which shipping method was used most frequently?,"SELECT orders.ShipVia, COUNT(orders.OrderID) AS UsageCount FROM orders GROUP BY orders.ShipVia ORDER BY UsageCount DESC LIMIT 1;","```sql
SELECT ShipVia, COUNT(*) AS Frequency
FROM orders
GROUP BY ShipVia
ORDER BY Frequency DESC
LIMIT 1;
```",Both queries count the number of orders per 'ShipVia' and return the shipping method used most frequently. They use different column aliases but produce the same result.,"SELECT ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1",Both queries count the frequency of each shipping method (ShipVia) in the orders table and return the one with the highest count. Differences in column references and COUNT() usage do not affect the result.,both
Find the difference between units on order and units in stock for each product.,"SELECT ProductID, (UnitsOnOrder - UnitsInStock) AS Difference FROM products;","```sql
SELECT ProductID, (UnitsOnOrder - UnitsInStock) AS UnitsDifference
FROM products;
```",Both queries calculate the same difference between UnitsOnOrder and UnitsInStock for each product and select the ProductID. The column alias is different but does not affect the output results.,"SELECT ProductName, (UnitsOnOrder - UnitsInStock) AS StockDifference FROM products;",The generated query returns ProductName while the ground truth returns ProductID; they yield different results.,Base
Which shipping method has the highest average freight cost?,"SELECT ShipVia, AVG(Freight) AS AverageFreightCost FROM orders GROUP BY ShipVia ORDER BY AverageFreightCost DESC LIMIT 1;","```sql
SELECT ShipVia, AVG(Freight) AS AverageFreight
FROM orders
GROUP BY ShipVia
ORDER BY AverageFreight DESC
LIMIT 1;
```",Both queries calculate the average freight cost for each shipping method and return the one with the highest average by ordering in descending order and limiting to the top result.,"SELECT ShipVia, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipVia ORDER BY AverageFreight DESC LIMIT 1;",Both queries compute the average freight cost per shipping method and return the method with the highest average. The difference in column alias does not affect the result.,both
How many distinct categories are in the products table?,SELECT COUNT(DISTINCT CategoryID) FROM products;,"```sql
SELECT COUNT(DISTINCT CategoryID) AS DistinctCategoryCount FROM products;
```","Both queries count the distinct entries in the CategoryID column of the products table. Although the generated query includes an alias, it does not affect the result.",SELECT COUNT(DISTINCT CategoryID) AS distinct_categories FROM products;,"Both queries count the number of distinct CategoryID values in the products table, producing equivalent results.",both
What is the average discount applied across all products?,SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details];
```",The generated SQL query and the ground truth query are identical and both accurately calculate the average discount across all products from the 'Order Details' table.,SELECT AVG(Discount) FROM [Order Details];,"Both queries calculate the average discount from the 'Order Details' table, yielding the same result.",both
Which orders were delivered on time in 2023?,SELECT orders.OrderID FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31',"```sql
SELECT orders.OrderID, orders.OrderDate, orders.RequiredDate, orders.ShippedDate 
FROM orders 
WHERE orders.ShippedDate <= orders.RequiredDate 
AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
```","The generated query returns more columns (OrderID, OrderDate, RequiredDate, ShippedDate), while the ground truth query only returns OrderID.",SELECT o.OrderID FROM orders o WHERE o.ShippedDate <= o.RequiredDate AND o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31';,Both queries correctly identify orders delivered on or before the required date in 2023 using the same condition and table.,FT
Which employee has handled the most orders successfully delivered on time?,"SELECT EmployeeID, COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY EmployeeID ORDER BY OnTimeOrders DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS SuccessfulDeliveries
FROM orders
WHERE ShippedDate <= RequiredDate
GROUP BY EmployeeID
ORDER BY SuccessfulDeliveries DESC
LIMIT 1;
```",Both queries aim to find the employee with the most orders shipped on or before the required date by counting orders for each employee and ordering them in descending order based on that count. The difference in column alias names does not affect the result.,"SELECT EmployeeID, COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY EmployeeID ORDER BY OnTimeOrders DESC LIMIT 1;","The generated SQL query matches the ground truth query, and both correctly identify the employee with the most orders delivered on time by counting orders with 'ShippedDate' less than or equal to 'RequiredDate', grouping by 'EmployeeID', and ordering by the count in descending order.",both
Which employee has handled the most orders?,"SELECT EmployeeID, COUNT(*) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```","Both SQL queries are functionally equivalent. They group the orders by EmployeeID, count the number of orders for each employee, sort the results in descending order by the count, and limit the output to one result, which identifies the employee with the most orders.","SELECT EmployeeID, CONCAT(Employees.FirstName, ' ', Employees.LastName) AS EmployeeName, COUNT(OrderID) AS TotalOrders FROM orders JOIN Employees ON orders.EmployeeID = Employees.EmployeeID GROUP BY EmployeeID, Employees.FirstName, Employees.LastName ORDER BY TotalOrders DESC LIMIT 1","Both queries aim to find the employee with the most orders. The generated query includes employee names and uses a join, but both ultimately count orders per employee and sort by the count in descending order, limiting the result to one.",both
What is the relationship between employee hire date and sales performance?,"SELECT e.EmployeeID, EXTRACT(YEAR FROM e.HireDate) AS HireYear, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, EXTRACT(YEAR FROM e.HireDate);","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, e.HireDate, 
       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID
LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.HireDate
ORDER BY e.HireDate;
```","The generated query groups by EmployeeID and HireDate, whereas the ground truth query groups by EmployeeID and the year of HireDate. This could lead to different aggregations and results.","SELECT e.EmployeeID, EXTRACT(YEAR FROM e.HireDate) AS HireYear, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AnnualSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, EXTRACT(YEAR FROM e.HireDate)","Both queries calculate total sales for each employee by year of hire date. Despite the difference in alias names ('AnnualSales' vs 'TotalSales'), the logic and grouping are the same, yielding the same results.",FT
Find the average quantity of products ordered per order last year.,"SELECT AVG(od.Quantity) AS AverageQuantity FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '1 year' AND DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '1 day';","```sql
SELECT AVG(total_quantity) AS average_quantity
FROM (
    SELECT SUM([Order Details].Quantity) AS total_quantity
    FROM orders
    JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
    WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1
    GROUP BY orders.OrderID
) AS order_totals;
```","Both queries correctly calculate the average quantity of products ordered per order in the previous year, despite using different approaches to filter the date range.",SELECT AVG(od.Quantity) AS AverageQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31';,"The generated query hardcodes dates for 2022, while the ground truth dynamically calculates last year using CURRENT_DATE. This could yield different results depending on the current date.",Base
Which category of products has the highest average discount applied?,"SELECT products.CategoryID, AVG([Order Details].Discount) AS AvgDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.CategoryID ORDER BY AvgDiscount DESC LIMIT 1;","```sql
SELECT p.CategoryID, AVG(od.Discount) AS AvgDiscount
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.CategoryID
ORDER BY AvgDiscount DESC
LIMIT 1;
```","Both queries perform the same operations: they join the 'products' and 'Order Details' tables on ProductID, group by CategoryID, calculate the average discount for each category, and order by the average discount in descending order, returning the top result.","SELECT c.CategoryName, AVG(od.Discount) AS AvgDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryName ORDER BY AvgDiscount DESC LIMIT 1;","Both queries aim to find the category with the highest average discount. The difference lies in the usage of 'CategoryName' in the generated query versus 'CategoryID' in the ground truth query. However, both would produce comparable results assuming 'CategoryID' uniquely identifies 'CategoryName'.",both
Calculate the average discount per order.,"SELECT AVG(Discount) AS AverageDiscountPerOrder FROM (SELECT OrderID, AVG(Discount) AS Discount FROM [Order Details] GROUP BY OrderID) AS OrderDiscounts;","```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details]
```","The generated query calculates the average discount across all items, not per order. The ground truth query calculates the average discount for each order and then averages these.",SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];,"The generated query calculates the average discount across all line items, not per order. The ground truth query calculates an average discount for each order first, then averages those values.",None
What is the total count of unique customers who have made orders?,SELECT COUNT(DISTINCT CustomerID) FROM orders;,"```sql
SELECT COUNT(DISTINCT CustomerID) AS UniqueCustomerCount
FROM orders;
```","Both queries count distinct CustomerID entries from the 'orders' table, yielding the same result.",SELECT COUNT(DISTINCT CustomerID) FROM orders;,Both queries are identical and correctly count the number of unique customers who have made orders.,both
How many orders were shipped after their required date during the holiday season?,"SELECT COUNT(*) AS LateOrders FROM orders WHERE (MONTH(OrderDate) IN (11, 12) OR MONTH(OrderDate) = 1) AND ShippedDate > RequiredDate;","```sql
SELECT COUNT(OrderID) AS LateShipments
FROM orders
WHERE ShippedDate > RequiredDate
  AND MONTH(OrderDate) IN (11, 12)
  AND YEAR(OrderDate) = YEAR(CURRENT_DATE);
```","The generated query only considers orders from the current year's November and December, while the ground truth query includes orders from November, December, and January of any year.","SELECT COUNT(*) FROM orders WHERE (MONTH(order_date) IN (11, 12) OR MONTH(order_date) = 1) AND shipped_date > required_date;","The generated SQL query and the ground truth query produce the same result. They both count orders where the shipped date is later than the required date and the order date falls within November, December, or January.",FT
How many orders were placed by each customer in the last quarter?,"SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE QUARTER(OrderDate) = QUARTER(CURRENT_DATE - INTERVAL 1 QUARTER) AND YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY CustomerID;","```sql
SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders
FROM orders
WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)
GROUP BY CustomerID;
```","The generated query checks orders from the last three months, while the ground truth query specifically targets the previous quarter. These timeframes might not match depending on the current date.","SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE() GROUP BY CustomerID;","The generated query uses a 3-month interval from the current date, which may not correspond to the last calendar quarter. The ground truth query explicitly checks for the last calendar quarter using the QUARTER function.",None
What is the trend of total sales over the past five years?,"SELECT DATE_TRUNC('year', OrderDate) AS Year, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_TRUNC('year', OrderDate) ORDER BY Year;","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Total_Sales
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE 
    orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 5 YEAR)
GROUP BY 
    Month
ORDER BY 
    Month;
```","The generated query groups sales by month, whereas the ground truth groups by year, leading to different granularities in the result.","SELECT DATE_FORMAT(orders.OrderDate, '%Y') AS year, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 5 YEAR) GROUP BY year","The generated query filters sales data from the last five years using the current date reference, whereas the ground truth query considers all data, grouping and ordering by year without any date range condition.",None
How many orders have been placed by each employee?,"SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;","```sql
SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount
FROM employees e
LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID;
```","Both queries correctly count the number of orders for each employee. The left join in the generated query doesn't affect the result since the count function only considers non-null 'OrderID' values, similar to an inner join.","SELECT EmployeeID, COUNT(*) AS NumberOfOrders FROM orders GROUP BY EmployeeID;","Both queries count the number of orders grouped by EmployeeID, which accurately answers the user's question.",both
How often do customers from a specific region place orders?,"SELECT Region, COUNT(OrderID) AS OrdersCount FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Region = 'Specific Region' GROUP BY Region;","```sql
SELECT customers.Region, COUNT(orders.OrderID) AS OrderCount
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
GROUP BY customers.Region;
```","The generated query groups by all regions, whereas the ground truth query filters for a specific region and then groups by region.","SELECT customers.Region, COUNT(orders.OrderID) AS order_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Region = 'Specific Region' GROUP BY customers.Region;",Both queries count the number of orders placed by customers from a specified region and group the results by region. They yield the same results despite slight differences in aliases and column specification.,FT
Calculate the percentage of orders shipped late for each region.,"SELECT ShipRegion, COUNT(OrderID) FILTER (WHERE ShippedDate > RequiredDate) * 100.0 / COUNT(OrderID) AS LateDeliveryRate FROM orders GROUP BY ShipRegion;","```sql
SELECT ShipRegion, 
       (COUNT(OrderID WHERE ShippedDate > RequiredDate) * 100.0 / COUNT(OrderID)) AS PercentageLate
FROM orders
GROUP BY ShipRegion;
```",The generated SQL query has a syntax error in the COUNT function. It uses the WHERE clause incorrectly inside COUNT. The ground truth query correctly uses the FILTER clause to count late orders.,"SELECT ShipRegion, SUM(CASE WHEN ShippedDate > RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS LateOrderPercentage FROM orders GROUP BY ShipRegion;","Both queries calculate the percentage of late orders by comparing ShippedDate and RequiredDate, and grouping by ShipRegion. They use slightly different methods (CASE vs FILTER), but the result is the same.",FT
Which customer has the highest total order quantity?,"SELECT c.CustomerID, SUM(od.Quantity) AS TotalQuantity FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalQuantity DESC LIMIT 1;","```sql
SELECT customers.CustomerID, customers.CompanyName, SUM([Order Details].Quantity) AS TotalOrderQuantity
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID, customers.CompanyName
ORDER BY TotalOrderQuantity DESC
LIMIT 1;
```",Both queries calculate the total order quantity for each customer and return the customer with the highest total. The difference in format and additional fields (CompanyName) does not alter the outcome.,"SELECT c.CustomerID, SUM(od.Quantity) AS TotalQuantity FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalQuantity DESC LIMIT 1;","The generated SQL query and the ground truth query are identical, both correctly finding the customer with the highest total order quantity.",both
What is the sales trend over the last 6 months for each employee?,"SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalSales, EXTRACT(MONTH FROM o.OrderDate) as SalesMonth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -6, CURRENT_DATE) GROUP BY e.EmployeeID, SalesMonth ORDER BY e.EmployeeID, SalesMonth;","```sql
SELECT 
    e.EmployeeID,
    e.FirstName,
    e.LastName,
    DATE_FORMAT(o.OrderDate, '%Y-%m-01') AS Month,
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
WHERE 
    o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)
GROUP BY 
    e.EmployeeID, Month
ORDER BY 
    Month, e.EmployeeID;
```","The generated query uses DATE_FORMAT to group by the start of each month, while the ground truth query uses EXTRACT to group only by the month number. The ordering and grouping fields are also different.","SELECT e.EmployeeID, MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY e.EmployeeID, MONTH(o.OrderDate);","The generated query uses DATE_SUB with INTERVAL 6 MONTH which is MySQL syntax, while the ground truth query uses DATEADD for 6 months, which is more typical of SQL Server. Additionally, the generated query does not include employee names and lacks sorting by EmployeeID and Month.",None
"For each region, what is the average number of days between order and shipping?","SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageDaysToShip FROM orders GROUP BY ShipRegion;","```sql
SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY ShipRegion;
```","Both queries calculate the average number of days between order and shipping grouped by ShipRegion. The only difference is the alias used for the average column, which does not affect the result.","SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingDelay FROM orders GROUP BY ShipRegion;","Both queries correctly calculate the average number of days between order and shipping for each region using the same logic, differing only in the alias name.",both
Find the longevity of employees in the company based on hire date.,"SELECT EmployeeID, DATEDIFF(CURDATE(), HireDate)/365.25 AS YearsWithCompany FROM employees;","```sql
SELECT EmployeeID, 
       LastName, 
       FirstName, 
       DATEDIFF(CURRENT_DATE, HireDate) AS Longevity 
FROM employees;
```","The generated query calculates longevity in days, while the ground truth query calculates it in years by dividing the result by 365.25.","SELECT EmployeeID, DATEDIFF(CURRENT_DATE, HireDate) AS LongevityDays FROM employees;","The generated query returns longevity in days, whereas the ground truth query returns longevity in years.",None
What are the products with less than 5 units in stock but more than 10 units on order?,"SELECT p.ProductID, p.ProductName FROM products p WHERE p.UnitsInStock < 5 AND p.UnitsOnOrder > 10;","```sql
SELECT ProductID, ProductName, UnitsInStock, UnitsOnOrder
FROM products
WHERE UnitsInStock < 5 AND UnitsOnOrder > 10;
```","Both queries return products with less than 5 units in stock and more than 10 units on order. The difference is that the generated query includes additional columns 'UnitsInStock' and 'UnitsOnOrder', but this does not affect the query's correctness regarding the user's question.","SELECT ProductID, ProductName FROM products WHERE UnitsInStock < 5 AND UnitsOnOrder > 10;","Both queries select the same fields and apply identical conditions on the products table, resulting in the same output.",both
What percentage of orders were delivered on or before their required dates for each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(*)) * 100 AS OnTimeRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    (COUNT(OrderID WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID)) AS On_time_Delivery_Rate
FROM 
    orders
GROUP BY 
    Month;
```","The generated query places the condition within COUNT(OrderID WHERE ShippedDate <= RequiredDate), which is incorrect syntax. It should use CASE WHEN for conditional counting like the ground truth query.","SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID)) AS OnTimeDeliveryRate FROM orders GROUP BY Month;","Both queries calculate the percentage of on-time deliveries for each month by comparing the ShippedDate to the RequiredDate and grouping by month. The difference in functions (DATE_TRUNC vs DATE_FORMAT) doesn't affect the result, as both achieve monthly grouping.",FT
What is the average discount applied across all orders?,SELECT AVG(Discount) FROM [Order Details];,"```sql
SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];
```",Both queries calculate the average discount from the 'Order Details' table using the AVG function. The use of 'AS AverageDiscount' in the generated query does not affect the result.,SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];,"Both queries calculate the average discount across all orders from the same table, and the column names do not affect the result.",both
What is the product with the highest order quantity in the last month?,"SELECT od.ProductID, p.ProductName, SUM(od.Quantity) AS TotalOrdered FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATEADD(month, -1, CURRENT_DATE) GROUP BY od.ProductID, p.ProductName ORDER BY TotalOrdered DESC FETCH FIRST 1 ROW ONLY;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantity
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.OrderID IN (SELECT OrderID FROM Orders WHERE OrderDate >= DATEADD(MONTH, -1, GETDATE()))
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalQuantity DESC
LIMIT 1;
```","The generated query uses GETDATE() and the 'LIMIT' clause, which is not standard SQL, while the ground truth uses CURRENT_DATE and 'FETCH FIRST'. Depending on the SQL dialect, GETDATE() and DATEADD might not return the same range of dates as CURRENT_DATE.","SELECT products.ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY products.ProductName ORDER BY SUM([Order Details].Quantity) DESC LIMIT 1;","Both queries aim to find the product with the highest order quantity in the last month by summing order quantities and ordering them in descending order, then selecting the top result. They use different functions for date calculation (DATE_SUB vs. DATEADD), but conceptually achieve the same outcome.",FT
What is the average discount applied on all orders?,SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details];
```","Both queries calculate the average of the Discount field from the [Order Details] table, yielding the same result despite different alias names.",SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];,Both queries calculate the average discount from the 'Order Details' table and will yield the same results. The difference in alias names 'AverageDiscount' and 'AvgDiscount' does not affect the outcome.,both
How many customers placed more than one order in 2023?,SELECT COUNT(DISTINCT orders.CustomerID) AS customer_count FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY orders.CustomerID HAVING COUNT(orders.OrderID) > 1,"```sql
SELECT COUNT(DISTINCT CustomerID) AS customer_count 
FROM orders 
WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31' 
GROUP BY CustomerID 
HAVING COUNT(OrderID) > 1;
```",The generated SQL query is incorrect due to a misplaced GROUP BY. GROUP BY should be removed.,SELECT COUNT(*) FROM (SELECT CustomerID FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY CustomerID HAVING COUNT(OrderID) > 1) AS multiple_orders;,Both queries count customers who placed more than one order in 2023. They filter orders by date in 2023 and group by CustomerID to count those with more than one order. The COUNT of these grouped results gives the final count of such customers.,FT
List the top 3 suppliers by total number of units delivered.,"SELECT suppliers.CompanyName, SUM([Order Details].Quantity) FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY SUM([Order Details].Quantity) DESC LIMIT 3;","```sql
SELECT suppliers.CompanyName, SUM([Order Details].Quantity) AS TotalUnitsDelivered
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.CompanyName
ORDER BY TotalUnitsDelivered DESC
LIMIT 3;
```","The SQL dialect of the generated query uses 'LIMIT' which is not standard ANSI SQL. However, both queries are effectively identical in terms of logic and intended use with a minor syntactical difference if 'LIMIT' is not supported in the context.","SELECT p.SupplierID, SUM(od.Quantity) AS TotalUnits FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID ORDER BY TotalUnits DESC LIMIT 3;","The generated query lists SupplierID instead of CompanyName, missing the direct link to the supplier's name, which is required to identify suppliers correctly.",None
What is the average salary of employees grouped by region?,"SELECT e.Region, AVG(e.Salary) AS AvgSalary FROM employees e GROUP BY e.Region","```sql
SELECT Region, AVG(Salary) AS AverageSalary
FROM employees
GROUP BY Region;
```","Both queries group by region and calculate the average salary, yielding the same results.","SELECT Region, AVG(Salary) AS AverageSalary FROM employees GROUP BY Region;","Both queries group employees by region and calculate the average salary, using similar logic despite slight differences in syntax.",both
Which employee generated the highest sales in Q2 2023?,"SELECT employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN employees ON orders.EmployeeID = employees.EmployeeID 
WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' 
GROUP BY employees.EmployeeID 
ORDER BY total_sales DESC 
LIMIT 1
```","The generated query retrieves EmployeeID, while the ground truth query retrieves FirstName and LastName. They return different column outputs.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1","Both queries calculate total sales for employees in Q2 2023 and return the employee with the highest sales. The difference is in selecting different columns (EmployeeID vs FirstName, LastName), but both uniquely identify the employee.",FT
What is the percentage of orders that include a discount?,"SELECT (COUNT(*) FILTER (WHERE Discount > 0) / NULLIF(COUNT(*), 0)) * 100 AS PercentageWithDiscount FROM [Order Details];","```sql
SELECT 
    (COUNT(CASE WHEN [Order Details].Discount > 0 THEN 1 END) * 100.0 / COUNT(*)) AS PercentageOfDiscountedOrders
FROM 
    [Order Details];
```","Both queries calculate the percentage of orders with a discount by dividing the count of discounted orders by the total number of orders. Differences in syntax (e.g., CASE vs. FILTER) do not affect the outcome.",SELECT (COUNT(CASE WHEN od.Discount > 0 THEN od.OrderID END) * 100.0 / COUNT(od.OrderID)) AS OrdersWithDiscountPercentage FROM [Order Details] od;,Both queries calculate the percentage of orders with a discount correctly by counting orders where the discount is greater than zero and dividing by the total number of orders.,both
What is the percentage of orders with no discount applied?,SELECT (COUNT(CASE WHEN OD.Discount = 0 THEN OD.OrderID END) * 100.0) / COUNT(OD.OrderID) AS NoDiscountPercentage FROM [Order Details] OD;,"```sql
SELECT 
    (COUNT(CASE WHEN [Order Details].Discount = 0 THEN 1 END) * 100.0 / COUNT([Order Details].OrderID)) AS Percentage_No_Discount
FROM 
    [Order Details]
```",Both queries calculate the percentage of orders with no discount by counting where the discount is zero and dividing by the total number of orders.,SELECT COUNT(CASE WHEN od.Discount = 0 THEN 1 END) * 100.0 / COUNT(od.OrderID) AS NoDiscountPercentage FROM [Order Details] od;,Both queries calculate the percentage of orders with no discount by dividing the count of orders with a discount of 0 by the total number of orders. The logic and operations are equivalent despite slight differences in syntax.,both
How many orders were shipped to a postal code starting with 'XYZ'?,SELECT COUNT(*) FROM orders WHERE ShipPostalCode LIKE 'XYZ%';,"```sql
SELECT COUNT(OrderID) 
FROM orders 
WHERE ShipPostalCode LIKE 'XYZ%';
```",Both queries accurately count the number of orders with ShipPostalCode starting with 'XYZ'. The difference in counting columns (OrderID vs. *) does not affect the count result as long as both queries have valid data.,SELECT COUNT(OrderID) FROM orders WHERE ShipPostalCode LIKE 'XYZ%';,Both queries count the number of orders with ShipPostalCode starting with 'XYZ'. The difference in COUNT(OrderID) vs COUNT(*) does not affect the result if OrderID is not null.,both
Calculate the total cost of units currently on order for each product.,"SELECT ProductName, SUM(UnitPrice * UnitsOnOrder) AS TotalCostOnOrder FROM products GROUP BY ProductName;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalCostOnOrder
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.OrderID IN (SELECT OrderID FROM [Order Details] WHERE Quantity > 0)
GROUP BY p.ProductID, p.ProductName
```","The generated query calculates total cost based on units on all orders with quantities greater than zero, while the ground truth query specifically sums UnitPrice * UnitsOnOrder directly from the products table without joining with the 'Order Details' table.","SELECT p.ProductName, SUM(p.UnitPrice * p.UnitsOnOrder) AS TotalCostOnOrder FROM products p WHERE p.UnitsOnOrder > 0 GROUP BY p.ProductName;","Both queries calculate the total cost of units currently on order for each product. The additional condition WHERE p.UnitsOnOrder > 0 in the generated query does not affect the result, as multiplying by zero in the ground truth query also yields no cost for products with zero units on order.",FT
Find the employee whose orders have encountered the most delays in shipping.,"SELECT E.EmployeeID, COUNT(CASE WHEN O.RequiredDate < O.ShippedDate THEN 1 END) AS DelayedOrders FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID GROUP BY E.EmployeeID ORDER BY DelayedOrders DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS DelayedOrders
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.ShippedDate > o.RequiredDate
GROUP BY e.EmployeeID
ORDER BY DelayedOrders DESC
LIMIT 1;
```",Both queries correctly calculate the number of delayed orders per employee and order by this count to find the employee with the most delays. The logic used to identify delays and the ordering are equivalent.,"SELECT employees.EmployeeID, SUM(DATEDIFF(orders.ShippedDate, orders.RequiredDate)) AS TotalDelays FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate > orders.RequiredDate GROUP BY employees.EmployeeID ORDER BY TotalDelays DESC LIMIT 1;","The generated query calculates the total number of days delayed, while the ground truth query counts the number of delayed orders. These approaches yield different results.",Base
Calculate the average discount rate for each product.,"SELECT p.ProductName, AVG(od.Discount) AS AvgDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;","```sql
SELECT ProductID, AVG(Discount) AS AverageDiscountRate
FROM [Order Details]
GROUP BY ProductID;
```","The generated query uses ProductID and returns it as a column, whereas the ground truth query includes a join with the products table and returns ProductName. The results are not the same.","SELECT p.ProductName, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",Both queries calculate the average discount rate for each product using the same join condition and aggregation function. The grouping by 'ProductName' yields the same result as 'ProductID' since there's a one-to-one correspondence between 'ProductName' and 'ProductID'.,FT
How does employee performance correlate with their years of service?,,"```sql
SELECT e.EmployeeID, e.HireDate, DATEDIFF(CURRENT_DATE, e.HireDate) / 365 AS years_of_service, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS employee_sales
FROM employees e
LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID
LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.HireDate
ORDER BY years_of_service;
```",The generated query calculates employee sales but does not address performance correlation. It only has years of service and total sales without any performance metric.,"SELECT employees.EmployeeID, (DATE_PART('year', CURRENT_DATE) - DATE_PART('year', employees.HireDate)) AS years_of_service, AVG(Order_Details.UnitPrice) AS avg_performance FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;","The generated query calculates the average unit price of order details as employee performance, which may not accurately reflect actual performance. It does not directly measure performance correlation with years of service.",None
Identify the month with the highest sales volume.,"SELECT EXTRACT(YEAR FROM orders.order_date) AS Year, EXTRACT(MONTH FROM orders.order_date) AS Month, SUM([Order Details].Quantity) AS TotalSalesVolume FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Year, Month ORDER BY TotalSalesVolume DESC LIMIT 1;","```sql
SELECT DATE_TRUNC('month', o.OrderDate) AS SalesMonth, SUM(d.Quantity) AS TotalSales
FROM [Order Details] d
JOIN Orders o ON d.OrderID = o.OrderID
GROUP BY SalesMonth
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries group by the month and year of the order date and calculate the total sales volume per month. They then sort the results in descending order by total sales volume and limit the output to the top result, effectively identifying the month with the highest sales volume.","SELECT MONTH(o.OrderDate) AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY OrderMonth ORDER BY TotalSales DESC LIMIT 1;","The generated query calculates total sales revenue, not sales volume, and it does not group by year or correctly extract it, while the ground truth query calculates sales volume and groups by year and month.",Base
Which product has the highest sales volume this quarter?,"SELECT products.ProductID, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE QUARTER(orders.OrderDate) = QUARTER(CURDATE()) AND YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY products.ProductID ORDER BY sales_volume DESC LIMIT 1","```sql
SELECT products.ProductID, SUM([Order Details].Quantity) AS total_sales_volume
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE orders.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE)
GROUP BY products.ProductID
ORDER BY total_sales_volume DESC
LIMIT 1
```","The generated query uses DATE_TRUNC which may not account for the current year, potentially summing across years. The ground truth accounts for both the quarter and year, ensuring sales are restricted to the current year's quarter only.","SELECT P.ProductName, SUM(OD.Quantity) AS SalesVolume FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID WHERE QUARTER(OD.OrderDate) = QUARTER(CURRENT_DATE) AND YEAR(OD.OrderDate) = YEAR(CURRENT_DATE) GROUP BY P.ProductName ORDER BY SalesVolume DESC LIMIT 1;

","The generated query does not consider the 'orders' table for the order date filter, which might affect accuracy if the 'Order Details' table lacks order dates.",None
In which month was the average order fulfillment time the shortest?,"SELECT Month, AVG(FulfillmentTime) AS AvgFulfillmentTime FROM (SELECT DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTime, DATE_FORMAT(OrderDate, '%Y-%m') AS Month FROM orders) AS MonthlyFulfillment GROUP BY Month ORDER BY AvgFulfillmentTime ASC LIMIT 1;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY Month
ORDER BY AverageFulfillmentTime ASC
LIMIT 1;
```",Both queries calculate the average fulfillment time per month and order the results to find the month with the shortest average. They effectively perform the same operations and yield identical results despite minor differences in structure.,"SELECT MONTH(OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY MONTH(OrderDate) ORDER BY AvgFulfillmentTime ASC LIMIT 1;","The Generated SQL Query groups by the month number without considering the year, which can aggregate different years into the same month. This affects fulfillment time calculation across years, unlike the Ground Truth SQL Query which groups by year-month.",Base
How does the total sales trend over the last 6 months?,"SELECT OrderMonth, SUM(TotalSales) OVER (ORDER BY OrderMonth) AS CumulativeSales FROM (SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '6 months' GROUP BY OrderMonth) AS SalesTrend;","```sql
SELECT
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM
    orders
JOIN
    [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE
    OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)
GROUP BY
    Month
ORDER BY
    Month DESC;
```","The generated query calculates the total sales per month for the last 6 months, but it does not calculate cumulative sales like the ground truth query.","SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m');","The generated query does not calculate cumulative sales, while the ground truth query includes cumulative sales with an ordering.",None
How many unique products were ordered in the month of February 2023?,SELECT COUNT(DISTINCT [Order Details].ProductID) AS unique_products FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28',"```sql
SELECT COUNT(DISTINCT [Order Details].ProductID) AS unique_products_ordered
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28'
```","Both queries count distinct ProductID from the same table and conditions, only the alias is different.",SELECT COUNT(DISTINCT od.ProductID) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-02-01' AND '2023-02-28';,Both queries correctly count the number of unique ProductIDs by joining the orders and Order Details tables and filtering for February 2023 dates. The logic and conditions are equivalent.,both
What is the most common discount rate given on products?,"SELECT od.Discount, COUNT(*) AS Frequency FROM [Order Details] od GROUP BY od.Discount ORDER BY Frequency DESC LIMIT 1;","```sql
SELECT Discount, COUNT(*) AS DiscountCount
FROM [Order Details]
GROUP BY Discount
ORDER BY DiscountCount DESC
LIMIT 1;
```","Both queries aggregate the discounts, count their occurrences, and return the most frequent one. They use similar structure and achieve the same result.","SELECT discount, COUNT(*) AS Frequency FROM [Order Details] GROUP BY discount ORDER BY Frequency DESC LIMIT 1;","Both queries select discount rates from the same table, group by discount, and order by frequency to get the most common discount. They yield the same result.",both
Find the products with the highest sales quantity but are still in stock.,SELECT ProductName FROM products WHERE ProductID IN (SELECT ProductID FROM [Order Details] GROUP BY ProductID HAVING SUM(Quantity) > 0) AND UnitsInStock > 0;,"```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE p.UnitsInStock > 0
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSales DESC
LIMIT 1;
```","The generated query returns the product with the highest total sales still in stock, while the ground truth checks for products with any sales and are still in stock. The key difference is the focus on the highest vs. any sales.",SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.UnitsInStock > 0 GROUP BY p.ProductName ORDER BY SUM(od.Quantity) DESC LIMIT 1;,"The generated query finds the single product with the highest sales quantity and in stock, while the ground truth query lists all products with positive sales and in stock.",None
Which product categories had the highest inventory turnover ratio in 2023?,"SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID WHERE EXISTS (SELECT 1 FROM orders WHERE [Order Details].OrderID = orders.OrderID AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') GROUP BY categories.CategoryName ORDER BY turnover_ratio DESC","```sql
SELECT categories.CategoryID, categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN categories ON products.CategoryID = categories.CategoryID
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY categories.CategoryID, categories.CategoryName
ORDER BY inventory_turnover_ratio DESC
```",Both queries calculate the inventory turnover ratio for product categories in 2023 and order the results by turnover ratio in descending order. They differ slightly in structure but yield the same result.,"SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID WHERE EXTRACT(YEAR FROM [Order Details].OrderID) = 2023 GROUP BY categories.CategoryName ORDER BY inventory_turnover_ratio DESC","The generated query uses EXTRACT(YEAR FROM [Order Details].OrderID) to filter for 2023, which may be incorrect as OrderID is not a date. The ground truth query checks OrderDate from the orders table, which is more likely to be accurate.",Base
What is the total number of orders placed each month?,"SELECT DATE_TRUNC('month', o.OrderDate) AS Month, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY DATE_TRUNC('month', o.OrderDate);","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS TotalOrders
FROM orders
GROUP BY Month
ORDER BY Month;
```","The generated query uses DATE_FORMAT, which may not be supported by all SQL databases, unlike the ground truth query that uses DATE_TRUNC suitable for databases like PostgreSQL. Results could vary depending on SQL database.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY Month;","The generated SQL query uses DATE_FORMAT which is not standard ANSI SQL, whereas the ground truth query uses DATE_TRUNC, which is more aligned with ANSI standards. DATE_FORMAT is typically used in MySQL, which may affect portability.",None
What is the order frequency of each customer?,"SELECT c.CustomerID, COUNT(o.OrderID) AS OrderFrequency FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID;","```sql
SELECT CustomerID, COUNT(OrderID) AS OrderFrequency
FROM orders
GROUP BY CustomerID;
```",Both queries calculate the order frequency per customer by counting the number of orders grouped by CustomerID. The generated query accurately computes the same result as the ground truth query.,"SELECT CustomerID, COUNT(OrderID) AS OrderFrequency FROM orders GROUP BY CustomerID;","Both queries accurately calculate the order frequency for each customer by counting the number of orders per CustomerID. The generated query assumes all CustomerIDs in orders exist and does not explicitly join with the customers table, but it will yield the same result as long as there are no missing CustomerIDs.",both
How many unique customers placed orders in the last month?,SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE MONTH(orders.OrderDate) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURDATE() - INTERVAL 1 MONTH),"```sql
SELECT COUNT(DISTINCT CustomerID) AS unique_customers FROM orders WHERE OrderDate >= DATEADD(MONTH, -1, GETDATE())
```","The generated query calculates unique customers in the last 30 days, while the ground truth query targets all orders from exactly the last calendar month.",SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-09-01' AND '2023-09-30';,"The generated query assumes the last month is September 2023, whereas the ground truth query dynamically retrieves the previous month based on the current date.",None
Find the average freight cost per shipping method over the last six months.,"SELECT o.ShipVia, AVG(o.Freight) AS AvgFreightCost FROM orders o WHERE o.OrderDate > DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY o.ShipVia;","```sql
SELECT ShipVia, AVG(Freight) AS AverageFreightCost
FROM orders
WHERE OrderDate >= DATEADD(MONTH, -6, GETDATE())
GROUP BY ShipVia;
```","The generated query uses DATEADD and GETDATE(), which are not ANSI standard SQL functions, making it potentially inaccurate outside of SQL Server. The ground truth query uses DATE_SUB and CURDATE(), which are also not ANSI standard but work in MySQL. Both queries have different date calculation methods, but neither uses ANSI standard date functions.","SELECT o.ShipVia, AVG(o.Freight) AS avg_freight FROM orders o WHERE o.OrderDate > DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY o.ShipVia",Both queries calculate the average freight cost per shipping method for orders placed in the last six months. Differences in alias naming do not affect the result.,FT
What is the average discount offered for each product?,"SELECT p.ProductName, AVG(od.Discount) AS AvgDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    AVG(od.Discount) AS AverageDiscount
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, 
    p.ProductName
```","Both queries calculate the average discount per product by joining the 'Order Details' and 'products' tables, grouping by ProductName. The order of columns and alias names differ but the logic is the same.","SELECT ProductID, AVG(Discount) AS AverageDiscount FROM [Order Details] GROUP BY ProductID;","The generated query returns ProductID and average discount, while the ground truth query returns ProductName and average discount, which means the columns retrieved are different.",Base
What is the median fulfillment time for orders?,"SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DATEDIFF(ShippedDate, OrderDate)) AS MedianFulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL","```sql
SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DATEDIFF(ShippedDate, OrderDate)) AS MedianFulfillmentTime
FROM orders
WHERE ShippedDate IS NOT NULL;
```",Both queries calculate the median fulfillment time for orders by using PERCENTILE_CONT with the same filtering condition and ordering logic.,"SELECT orders.OrderID, DATEDIFF(orders.ShippedDate, orders.OrderDate) AS FulfillmentTime FROM orders WHERE orders.ShippedDate IS NOT NULL;",The generated query calculates fulfillment time for each order but does not determine the median. The ground truth query specifically calculates the median fulfillment time.,Base
Determine the freight cost correlation to total order value.,"SELECT CORR(order_values.total_order_value, orders.Freight) AS correlation FROM (SELECT orders.OrderID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.OrderID) AS order_values JOIN orders ON order_values.OrderID = orders.OrderID;","```sql
SELECT 
    CORR(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)), AVG(orders.Freight)) AS freight_cost_correlation
FROM 
    [Order Details]
JOIN 
    orders ON [Order Details].OrderID = orders.OrderID
GROUP BY 
    orders.OrderID
```","Both queries calculate the correlation between the total order value and freight. The difference is the structure: one computes the total order value in a subquery, while the other does it within the main query. Both yield the same result.","SELECT CORR(freight_cost, (od.UnitPrice * od.Quantity * (1 - od.Discount))) AS Correlation FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID;","Both queries calculate the correlation between total order value and freight cost. They derive total order value by multiplying UnitPrice, Quantity, and applying Discount for each order, then compute the correlation with freight. The main difference is how they aggregate order values, but the end result is the same.",both
Which products have the highest reorder levels?,"SELECT ProductName, ReorderLevel FROM products ORDER BY ReorderLevel DESC;","```sql
SELECT ProductName, ReorderLevel
FROM products
ORDER BY ReorderLevel DESC;
```","The generated SQL query accurately answers the user's question by selecting the product name and reorder level, ordering them in descending order by reorder level, just like the ground truth query.",SELECT ProductName FROM products WHERE ReorderLevel = (SELECT MAX(ReorderLevel) FROM products);,"The generated query only selects products at the highest reorder level, while the ground truth lists all products sorted by reorder level in descending order.",Base
What is the trend of average order value over the past year?,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS average_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE() GROUP BY month ORDER BY month","```sql
SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) 
GROUP BY month 
ORDER BY month;
```",Both queries calculate the trend of average order value over the past year by month. The difference in the WHERE clause (>= vs. BETWEEN) does not affect the results as both cover the full year up to the current date.,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(d.UnitPrice * d.Quantity * (1 - d.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] d ON o.OrderID = d.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","Both queries calculate the average order value per month for the past year, using similar logic: joining 'orders' and 'Order Details', selecting orders from the past year, computing total value divided by the distinct order count, and grouping by month. Minor differences in date filtering ('BETWEEN ... AND CURDATE()' vs '>='), do not affect the outcome.",both
What percentage of total orders have been shipped by each shipping method?,"SELECT ShipVia, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM orders) AS Percentage FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, 
       COUNT(OrderID) * 100.0 / (SELECT COUNT(*) FROM orders) AS PercentageShipped
FROM orders
WHERE ShippedDate IS NOT NULL
GROUP BY ShipVia;
```","The generated query only considers orders that have been shipped (where ShippedDate IS NOT NULL), while the ground truth query considers all orders regardless of shipping status.","SELECT ShipVia, (COUNT(OrderID) * 100.0 / SUM(COUNT(OrderID)) OVER ()) AS Percentage FROM orders GROUP BY ShipVia;",The generated query incorrectly uses the SUM(COUNT(OrderID)) OVER () window function. It should calculate the total orders with a subquery like the ground truth query.,None
What percentage of orders are completed without any discount?,"SELECT COUNT(DISTINCT OrderID) * 1.0 / NULLIF((SELECT COUNT(DISTINCT OrderID) FROM [Order Details]), 0) AS NoDiscountRate FROM [Order Details] WHERE Discount = 0;","```sql
SELECT 
    (COUNT(CASE WHEN Discount = 0 THEN 1 END) * 100.0 / COUNT(*)) AS Percentage_No_Discount
FROM 
    [Order Details];
```","The generated query calculates the percentage of line items without a discount, while the ground truth computes the percentage of unique orders without a discount.",SELECT (COUNT(CASE WHEN od.Discount = 0 THEN o.OrderID END) * 100.0 / COUNT(o.OrderID)) AS NoDiscountOrderPercentage FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID;,"The generated query calculates the percentage of order details without discounts, while the ground truth query calculates the percentage of orders without discounts. The difference lies in counting distinct orders versus all orders with discount details.",None
Which supplier provides the most variety of products?,"SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductVariety FROM products GROUP BY SupplierID ORDER BY ProductVariety DESC LIMIT 1;","```sql
SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductVariety
FROM products
GROUP BY SupplierID
ORDER BY ProductVariety DESC
LIMIT 1;
```","The generated SQL query and the ground truth query are functionally identical and will yield the same result. Both queries group products by SupplierID, count the distinct products for each supplier, order by this count in descending order, and limit the results to 1.","SELECT suppliers.CompanyName, COUNT(DISTINCT products.ProductID) AS ProductVariety FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY ProductVariety DESC LIMIT 1;","The generated query uses CompanyName from suppliers, while the ground truth query uses SupplierID. They may yield different results if CompanyName is not unique for each SupplierID.",Base
Which specific products need to be reordered immediately?,SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;
```","The generated SQL query returns additional columns (ProductID and UnitsInStock) that are not present in the ground truth query, which only returns ProductName.",SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;,"The generated query does not filter out discontinued products, while the ground truth query does. Therefore, they yield different results.",None
What is the average order value for customers from each country?,"SELECT c.Country, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Country;","```sql
SELECT c.Country, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.Country;
```",Both queries calculate the average order value per country by joining the same tables and using the same expressions. There are no semantic differences in the calculations or grouping.,"SELECT ShipCountry, AVG(OrderValue) AS AvgOrderValue FROM (SELECT o.CustomerID, o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID, o.CustomerID, o.ShipCountry) AS D Orders GROUP BY ShipCountry;","The generated query groups by ShipCountry, while the ground truth query groups by customer Country. The resulting datasets may differ because ShipCountry may not always match the customer's Country.",Base
What are the top-selling products by each category?,"SELECT CategoryID, P.ProductName, SUM(OD.Quantity) AS TotalSales FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID GROUP BY CategoryID, P.ProductName ORDER BY CategoryID, TotalSales DESC;","```sql
SELECT p.CategoryID, p.ProductName, SUM(od.Quantity) AS TotalSold
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.CategoryID, p.ProductName
ORDER BY p.CategoryID, TotalSold DESC;
```","Both queries group by CategoryID and ProductName, calculating the total quantity sold for each product, ordering by CategoryID and total sold, achieving the same result.","SELECT CategoryID, ProductName FROM (SELECT CategoryID, ProductName, Sales = OrderDetails.Quantity * OrderDetails.UnitPrice, RANK() OVER (PARTITION BY CategoryID ORDER BY OrderDetails.Quantity * OrderDetails.UnitPrice DESC) AS Ranking FROM products JOIN OrderDetails ON products.ProductID = OrderDetails.ProductID) AS RankedProducts WHERE Ranking = 1;",The generated query uses RANK to find top-sellers but does not group or sum sales correctly. It calculates sales per order instead of total sales per product.,Base
How have employee sales changed month over month?,"SELECT e.EmployeeID, EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, EXTRACT(YEAR FROM o.OrderDate) AS OrderYear, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, OrderYear, OrderMonth ORDER BY e.EmployeeID, OrderYear, OrderMonth","```sql
SELECT 
    DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month,
    e.EmployeeID,
    e.FirstName,
    e.LastName,
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    Month, e.EmployeeID
ORDER BY 
    Month, e.EmployeeID;
```","Both queries calculate total sales per employee per month, grouping by employee and month. The main difference is the format of the month/year extraction, but it yields the same results.","SELECT MONTH(OrderDate) AS Month, SUM(OrderDetails.UnitPrice * OrderDetails.Quantity * (1 - OrderDetails.Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY MONTH(OrderDate);","The generated query calculates total sales per month, ignoring employee-specific data and year-wise grouping. The ground truth query includes employee data and groups the results by both year and month.",Base
Which supplier has the smallest average order discount applied to their orders?,"SELECT s.SupplierID, AVG(od.Discount) AS AvgDiscount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY AvgDiscount ASC LIMIT 1;","```sql
SELECT s.SupplierID, s.CompanyName, AVG(od.Discount) AS AverageDiscount
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY s.SupplierID, s.CompanyName
ORDER BY AverageDiscount ASC
LIMIT 1;
```","Both queries calculate the average discount per supplier and order by it ascendingly to find the supplier with the smallest average discount. The inclusion of 'CompanyName' in the generated query does not affect the result, as it is grouped by 'SupplierID'.","SELECT s.CompanyName, AVG(od.Discount) AS AvgDiscount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.CompanyName ORDER BY AvgDiscount ASC LIMIT 1","The generated query selects CompanyName, while the ground truth query selects SupplierID. The order and logic of the aggregation are correct, but the selected field differs, which may affect the result given duplicate or similar company names.",Base
Which employee is handling the most orders?,"SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries group by EmployeeID, count OrderID, and order by the count in descending order, limiting to the top result. They will yield the same result.","SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;","Both queries group by EmployeeID and order by the count of OrderID in descending order, returning the EmployeeID with the most orders. The differences in column alias do not affect the outcome.",both
What is the percentage of discontinued products?,SELECT (SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END) / COUNT(*)) * 100.0 AS DiscontinuedPercentage FROM products;,"```sql
SELECT 
    (SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS PercentageDiscontinued
FROM 
    products;
```",Both queries calculate the percentage of discontinued products using a similar formula and will yield the same result.,SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM products)) AS DiscontinuedPercentage FROM products WHERE Discontinued = 1;,"Both queries calculate the percentage of discontinued products by dividing the number of discontinued products by the total number of products and multiplying by 100. The methods are different, but they yield the same result.",both
What is the total quantity of products ordered from each supplier?,"SELECT suppliers.SupplierID, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID;","```sql
SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].Quantity) AS TotalQuantity
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY suppliers.SupplierID, suppliers.CompanyName;
```","Both queries correctly calculate the total quantity of products ordered from each supplier, and include a join on suppliers, products, and order details tables. The generated query includes 'CompanyName' in the SELECT and GROUP BY clauses, which doesn't affect the total quantity calculation, thus yielding the same results.","SELECT p.SupplierID, SUM(od.Quantity) AS TotalQuantity FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;","Both queries correctly calculate the total quantity of products ordered from each supplier by joining the suppliers, products, and order details tables, and grouping by SupplierID.",both
How many distinct products are ordered in each country?,"SELECT Country, COUNT(DISTINCT [Order Details].ProductID) AS DistinctProducts FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY Country;","```sql
SELECT customers.Country, COUNT(DISTINCT [Order Details].ProductID) AS DistinctProducts
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.Country;
```","Both queries join the customers, orders, and Order Details tables to count distinct products per country, and they will yield the same result despite slight differences in table join order.","SELECT o.ShipCountry, COUNT(DISTINCT od.ProductID) AS ProductCount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry;","The generated query uses o.ShipCountry from the orders table, while the ground truth query uses Country from the customers table. These fields might be different, potentially leading to different results.",Base
What is the total number of units ordered for each product with a discount greater than 10%?,"SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalUnitsOrdered FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE Discount > 0.1 GROUP BY products.ProductName;","```sql
SELECT od.ProductID, SUM(od.Quantity) AS TotalUnitsOrdered
FROM [Order Details] od
WHERE od.Discount > 0.10
GROUP BY od.ProductID;
```","The generated SQL query groups by ProductID, while the ground truth groups by ProductName. The results will differ if ProductID doesn't uniquely map to a ProductName.","SELECT p.ProductName, SUM(od.Quantity) AS TotalUnits FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0.10 GROUP BY p.ProductName;","Both queries accurately sum the quantities for each product with a discount greater than 10%, and the joins and groupings are effectively equivalent.",FT
Calculate the total discounted amount given across all products.,SELECT SUM((Discount * UnitPrice * Quantity)) AS TotalDiscountedAmount FROM [Order Details];,"```sql
SELECT SUM(Quantity * UnitPrice * Discount) AS TotalDiscountedAmount
FROM [Order Details];
```","Both queries calculate the total discounted amount by multiplying Quantity, UnitPrice, and Discount, and then summing the result. The order of multiplication doesn't affect the outcome.",SELECT SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscountedAmount FROM [Order Details] od;,"Both queries calculate the total discounted amount by multiplying the quantity, unit price, and discount, then summing the results. They are logically equivalent.",both
What is the average time taken from order placement to shipment for each employee?,"SELECT employees.EmployeeID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageShippingTime FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageShippingTime
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.ShippedDate IS NOT NULL
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","Both queries calculate the average time between order placement and shipment for each employee. The generated query includes first and last names in the SELECT and GROUP BY clauses, which doesn't affect the overall result.","SELECT e.FirstName, e.LastName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;","Both queries calculate the average shipping time per employee by joining the employees and orders tables on EmployeeID and using DATEDIFF on ShippedDate and OrderDate. The only difference is in the SELECT clause fields for the group by identifier (FirstName, LastName vs EmployeeID), but they essentially provide the same result of average shipping time per employee.",both
What is the trend in average shipping cost over the last year?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AvgShippingCost FROM orders WHERE OrderDate > CURRENT_DATE - INTERVAL 1 YEAR GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
    AVG(Freight) AS AverageShippingCost 
FROM 
    orders 
WHERE 
    OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) 
GROUP BY 
    Month 
ORDER BY 
    Month;
```","Both queries calculate the average shipping cost per month for the past year, using similar date filtering and grouping logic.","SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS OrderMonth, AVG(Freight) AS AvgFreight FROM orders WHERE OrderDate >= DATEADD(year, -1, CURRENT_DATE) GROUP BY OrderMonth ORDER BY OrderMonth;","Both queries calculate the average freight cost per month for the last year, though they use different date functions.",both
What is the average shipping cost per order across all regions in November 2023?,SELECT AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE orders.OrderDate BETWEEN '2023-11-01' AND '2023-11-30',"```sql
SELECT AVG(orders.Freight) AS shipping_cost_per_order 
FROM orders 
WHERE orders.OrderDate BETWEEN '2023-11-01' AND '2023-11-30'
```","Both queries compute the average freight for orders placed in November 2023, with differences only in the alias name.",SELECT AVG(orders.Freight) FROM orders WHERE orders.OrderDate BETWEEN '2023-11-01' AND '2023-11-30',Both queries calculate the average freight cost for orders in November 2023 using the same date range and column. The difference is only in the aliasing which does not affect the result.,both
List products with zero units in stock along with the supplier name.,"SELECT ProductName, CompanyName FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE UnitsInStock = 0;","```sql
SELECT p.ProductName, s.CompanyName 
FROM products p 
JOIN suppliers s ON p.SupplierID = s.SupplierID 
WHERE p.UnitsInStock = 0;
```",Both SQL queries select products with zero units in stock and display the product names along with their supplier names. The difference in table aliases does not affect the correctness.,"SELECT p.ProductName, s.CompanyName FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.UnitsInStock = 0","Both queries select the product name and supplier's company name from the products and suppliers tables, joining them on SupplierID where UnitsInStock is zero. The aliases used in the generated query don't affect the outcome.",both
Identify the top-performing products by sales revenue.,"SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 0 GROUP BY p.ProductName ORDER BY TotalRevenue DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSalesRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSalesRevenue DESC
```","The generated query does not include the Discount factor and lacks a condition to exclude discontinued products, and it does not limit the results to the top 5.","SELECT p.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY TotalSales DESC;",The generated query does not check for whether products are discontinued or limit the results to the top 5 products as required by the ground truth query.,None
List the top 3 cities with the highest number of shipped orders.,"SELECT ShipCity, COUNT(OrderID) AS NumShippedOrders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipCity ORDER BY NumShippedOrders DESC LIMIT 3","```sql
SELECT ShipCity, COUNT(OrderID) AS NumberOfShippedOrders
FROM orders
WHERE ShippedDate IS NOT NULL
GROUP BY ShipCity
ORDER BY NumberOfShippedOrders DESC
LIMIT 3;
```","Both queries achieve the same result. They count the number of shipped orders per city, sort them in descending order, and limit the output to the top 3 cities.","SELECT ShipCity, COUNT(OrderID) AS TotalOrders FROM orders WHERE ShippedStatus = 'Shipped' GROUP BY ShipCity ORDER BY TotalOrders DESC LIMIT 3;","The generated query checks if ShippedStatus is 'Shipped', while the ground truth checks for a non-null ShippedDate. They may yield different results depending on how the data is structured.",Base
What was the product performance for discontinued products?,"SELECT products.ProductName, SUM([Order Details].Quantity) AS performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1 GROUP BY products.ProductID;","```sql
SELECT products.ProductID, SUM([Order Details].Quantity) AS product_performance 
FROM [Order Details] 
JOIN products ON [Order Details].ProductID = products.ProductID 
WHERE products.Discontinued = 1 
GROUP BY products.ProductID
```","The generated query selects ProductID, while the ground truth query selects ProductName. The output will differ in terms of the column used for grouping.","SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 1 GROUP BY p.ProductID, p.ProductName","Both queries select product names and sum quantities for discontinued products, aligning with the user's question.",FT
What is the average freight cost per order for each employee?,"SELECT employees.EmployeeID, AVG(orders.Freight) AS AverageFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(o.Freight) AS AverageFreightCost
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","Both queries correctly calculate the average freight cost per order for each employee, grouping by EmployeeID and joining the employees and orders tables. The additional columns in the generated query do not affect the correctness.","SELECT e.FirstName, e.LastName, AVG(o.Freight) AS AvgFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.FirstName, e.LastName;","Both queries find the average freight cost per order for each employee using their EmployeeID. Although the generated query selects first and last names, it groups by the same key as the ground truth query, providing equivalent results.",both
How much total revenue has each product generated?,"SELECT products.ProductID, products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName;","```sql
SELECT products.ProductID, products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY products.ProductID, products.ProductName;
```",Both queries are identical and accurately calculate total revenue for each product by grouping on ProductID and ProductName.,"SELECT [Order Details].ProductID, products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY [Order Details].ProductID, products.ProductName;","The generated SQL query does not account for any discounts on the order details, whereas the ground truth query includes a discount factor in calculating total revenue.",Base
Which employees report to whom?,"SELECT ReportsTo, GROUP_CONCAT(CONCAT(FirstName, ' ', LastName) SEPARATOR ', ') AS Employees FROM employees GROUP BY ReportsTo;","```sql
SELECT e1.FirstName AS EmployeeFirstName, e1.LastName AS EmployeeLastName, 
       e2.FirstName AS ManagerFirstName, e2.LastName AS ManagerLastName
FROM employees e1
LEFT JOIN employees e2 ON e1.ReportsTo = e2.EmployeeID;
```","The generated query returns individual employee-manager pairings, while the ground truth aggregates employees by manager using GROUP_CONCAT(). Results will differ in structure and content.","SELECT EmployeeID, ReportsTo FROM employees WHERE ReportsTo IS NOT NULL;",The generated query lists EmployeeID and their ReportsTo but does not aggregate employees under each manager. The ground truth query groups employees by their manager.,None
What is the percentage of on-time deliveries each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID)) AS OnTimeDeliveryRate
FROM 
    orders
GROUP BY 
    Month
```","Both queries calculate the percentage of on-time deliveries per month using the same logic. The main difference is in the function used for month extraction: DATE_FORMAT in the generated query and DATE_TRUNC in the ground truth query. This does not affect the result, assuming both functions are implemented correctly in their respective SQL environments.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;","The functions for formatting the date are different: DATE_FORMAT in the generated query and DATE_TRUNC in the ground truth query. DATE_FORMAT results in a string, while DATE_TRUNC results in a date. This may lead to grouping discrepancies.",Base
Which employee handled the most number of orders in the past year?,"SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders WHERE OrderDate >= CURRENT_DATE - INTERVAL '1 year' GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
GROUP BY EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries calculate the employee with the most orders in the past year, using equivalent logic and functions for date manipulation and ordering.","SELECT e.FirstName, e.LastName, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY e.EmployeeID ORDER BY OrderCount DESC LIMIT 1;","Both queries accurately identify the employee with the most orders in the past year, differing only in how they handle employee name display.",both
What is the average order fulfillment time for orders shipped by each shipping method?,"SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia;","```sql
SELECT orders.ShipVia, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS Average_Fulfillment_Time
FROM orders
GROUP BY orders.ShipVia;
```","Both queries calculate the average order fulfillment time by subtracting the OrderDate from the ShippedDate, grouped by the ShipVia column. The only difference is naming conventions and formatting, which do not affect the results.","SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillment FROM orders GROUP BY ShipVia;","The generated SQL query accurately answers the user's question and yields the same results as the ground truth query. Both queries calculate the average order fulfillment time for each shipping method using the same logic, grouping by 'ShipVia' and using 'DATEDIFF' to determine the difference between 'ShippedDate' and 'OrderDate'. The only difference is the alias name used for the average fulfillment result, which does not affect the output.",both
Identify the top 5 products with the highest sales revenue.,"SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS SalesRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY SalesRevenue DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS SalesRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY SalesRevenue DESC
LIMIT 5;
```",The generated SQL query and the ground truth query are functionally equivalent; both calculate the sales revenue for each product and return the top 5 products sorted by sales revenue in descending order.,"SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 5;","The generated query does not account for discounts, while the ground truth query does not. Moreover, the ground truth query includes ProductName, which is missing in the generated query.",Base
What is the inventory turnover ratio for each product category?,"SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName","```sql
SELECT categories.CategoryID, 
       SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN categories ON products.CategoryID = categories.CategoryID
GROUP BY categories.CategoryID
```","The generated SQL query groups by CategoryID, while the ground truth query groups by CategoryName. This could lead to different results if CategoryID is not uniquely mapped to CategoryName.","SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName",The generated SQL query is identical to the ground truth SQL query. Both will yield the same results.,FT
How does the inventory turnover ratio vary for each product?,"SELECT products.ProductID, (SUM([Order Details].Quantity * [Order Details].UnitPrice)/AVG(products.UnitsInStock)) AS InventoryTurnover FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;","```sql
SELECT 
    p.ProductID,
    p.ProductName,
    SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.ProductName;
```","Both queries calculate the inventory turnover ratio for each product by dividing the total sales value by the average units in stock, grouped by ProductID. The generated query includes ProductName in the SELECT clause, which does not affect the core logic of calculating the ratio.","SELECT p.ProductID, (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",Both queries calculate the inventory turnover ratio for each product by joining the 'products' and 'Order Details' tables. They group the results by 'ProductID' and compute the same formula using SUM and AVG functions.,both
Which month had the highest average shipping cost per order?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY Month ORDER BY AvgShippingCost DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AverageShippingCost
FROM orders
GROUP BY Month
ORDER BY AverageShippingCost DESC
LIMIT 1;
```",The generated query uses DATE_FORMAT which might not be compatible with systems expecting DATE_TRUNC. This could lead to date formatting issues depending on the SQL engine.,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS order_month, AVG(orders.Freight) AS avg_shipping_cost FROM orders GROUP BY order_month ORDER BY avg_shipping_cost DESC LIMIT 1;","The generated query uses DATE_FORMAT which may yield different results from DATE_TRUNC, depending on the SQL dialect. For ANSI SQL compliance, DATE_TRUNC is correct, making the ground truth query more accurate.",None
Which shipping method is most frequently used?,"SELECT ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;","```sql
SELECT ShipVia, COUNT(*) AS Frequency
FROM orders
GROUP BY ShipVia
ORDER BY Frequency DESC
LIMIT 1;
```",Both queries correctly count and order the shipping methods by frequency and limit the result to the most used method.,"SELECT products.ShipVia, COUNT(orders.OrderID) AS order_count FROM orders GROUP BY products.ShipVia ORDER BY order_count DESC LIMIT 1;","The generated query references 'products.ShipVia', which should be 'orders.ShipVia' according to the ground truth query. This could lead to incorrect results if the 'ShipVia' column is not part of the 'products' table.",Base
What is the peak month for order shipments?,"SELECT DATE_TRUNC('month', ShippedDate) AS ShipmentMonth, COUNT(OrderID) AS NumOrders FROM orders GROUP BY ShipmentMonth ORDER BY NumOrders DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(orders.ShippedDate, '%Y-%m') AS ShipmentMonth, 
       COUNT(orders.OrderID) AS TotalShipments
FROM orders
GROUP BY ShipmentMonth
ORDER BY TotalShipments DESC
LIMIT 1;
```","Both queries aggregate shipments by month and order by the total number descending, limiting the result to the peak month.","SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(OrderID) AS OrdersShipped FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM') ORDER BY OrdersShipped DESC LIMIT 1;","The generated query uses OrderDate instead of ShippedDate to determine the peak month for order shipments, which may yield different results.",Base
What are the top 5 employees with the highest number of sales?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 5","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS NumberOfSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID
ORDER BY NumberOfSales DESC
LIMIT 5;
```","The generated query ranks employees by the number of sales, while the ground truth query ranks by total sales value.","SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS employee_name, COUNT(orders.OrderID) AS number_of_sales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY number_of_sales DESC LIMIT 5;","The generated query counts the number of orders per employee, while the ground truth calculates the total sales value for each employee.",None
Find the total sales for each shipping method.,"SELECT ShipVia, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipVia;","```sql
SELECT ShipVia, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY ShipVia;
```","Both queries calculate the total sales for each shipping method by joining 'Order Details' with 'orders' and summing the product of UnitPrice, Quantity, and Discount grouped by ShipVia.","SELECT ShipVia, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipVia;","The generated SQL query matches the ground truth query exactly, and both accurately calculate the total sales for each shipping method.",both
What is the distribution of order quantities?,"SELECT Quantity, COUNT(*) AS Frequency FROM [Order Details] GROUP BY Quantity ORDER BY Frequency DESC;","```sql
SELECT Quantity, COUNT(*) AS OrderCount
FROM [Order Details]
GROUP BY Quantity
ORDER BY Quantity;
```","The generated SQL orders by Quantity, whereas the ground truth orders by Frequency in descending order.","SELECT Quantity, COUNT(*) AS Frequency FROM [Order Details] GROUP BY Quantity ORDER BY Frequency DESC","The generated SQL query and the ground truth SQL query are structurally the same and will yield identical results. Both retrieve the distribution of order quantities by counting occurrences in the 'Order Details' table, grouping by 'Quantity', and ordering by frequency in descending order.",FT
What is the highest single order value recorded?,"SELECT o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID ORDER BY OrderValue DESC LIMIT 1;","```sql
SELECT MAX((od.UnitPrice * od.Quantity * (1 - od.Discount))) AS HighestOrderValue
FROM [Order Details] od
JOIN orders o ON od.OrderID = o.OrderID;
```","The generated query returns the maximum value of individual order lines, while the ground truth query calculates total order values and finds the maximum among those.","SELECT OrderID, SUM(UnitPrice * Quantity * (1 - Discount)) AS OrderValue FROM [Order Details] GROUP BY OrderID ORDER BY OrderValue DESC LIMIT 1;","Both queries calculate the highest single order value by summing the product of UnitPrice, Quantity, and (1 - Discount) for each OrderID and return the highest value. The only difference is the inclusion of a JOIN in the ground truth query, which is unnecessary if OrderID in [Order Details] is unique without reference to the orders table.",FT
How many orders were handled by each employee each year?,"SELECT YEAR(OrderDate) AS Year, EmployeeID, COUNT(OrderID) AS OrdersHandled FROM orders GROUP BY YEAR(OrderDate), EmployeeID;","```sql
SELECT EmployeeID, YEAR(OrderDate) AS OrderYear, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY EmployeeID, YEAR(OrderDate)
ORDER BY EmployeeID, OrderYear;
```","Both queries group by employee and year, counting the orders handled, and will yield the same results, though the ordering and column aliases differ.","SELECT YEAR(orders.OrderDate) AS Year, employees.FirstName, employees.LastName, COUNT(orders.OrderID) AS AnnualOrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY YEAR(orders.OrderDate), employees.FirstName, employees.LastName","The generated SQL query groups by employee names, while the ground truth groups by EmployeeID, which may lead to discrepancies if employees share names or if the EmployeeID is not unique to each FirstName/LastName combination.",Base
Determine which employee has the highest cumulative discount given across all orders.,"SELECT e.EmployeeID, SUM(od.Discount * od.UnitPrice * od.Quantity) AS TotalDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalDiscount DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.Discount) AS TotalDiscount
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY TotalDiscount DESC
LIMIT 1;
```","The generated query calculates the total discount as a sum of discount percentages, while the ground truth query applies the discount to the price and quantity, yielding a different total discount measure.","SELECT employees.EmployeeID, SUM([Order Details].Discount * [Order Details].UnitPrice * [Order Details].Quantity) AS TotalDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalDiscount DESC LIMIT 1;",Both queries calculate the cumulative discount per employee and return the employee with the highest total discount.,FT
How many orders has each employee processed this year?,"SELECT employees.EmployeeID, COUNT(orders.OrderID) AS TotalOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID;","```sql
SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrdersProcessed
FROM employees
JOIN orders ON employees.EmployeeID = orders.EmployeeID
WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE)
GROUP BY employees.EmployeeID;
```","Both queries count the number of orders processed by each employee this year, using the same logic and conditions. Only the alias for the count is different.","SELECT employees.EmployeeID, COUNT(orders.OrderID) AS orders_processed FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY employees.EmployeeID",Both queries count the number of orders processed by each employee this year and group the results by EmployeeID. The differences are only in aliases and formatting.,both
"For each supplier, list all products along with their sales quantity.","SELECT s.SupplierName, p.ProductName, SUM(od.Quantity) FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierName, p.ProductName;","```sql
SELECT p.SupplierID, p.ProductName, SUM(od.Quantity) AS SalesQuantity
FROM products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.SupplierID, p.ProductName
```",The generated query does not list products per supplier by name and may have missing supplier data due to the LEFT JOIN implementation.,"SELECT s.CompanyName, p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID, s.CompanyName, p.ProductName;",Both queries will yield the same results because they group by the same attributes and aggregate the quantity correctly. The difference in column naming (CompanyName vs. SupplierName) does not affect the correctness of the query.,FT
What is the total freight cost for all orders shipped to Germany?,SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShipCountry = 'Germany';,"```sql
SELECT SUM(Freight) AS Total_Freight_Cost
FROM orders
WHERE ShipCountry = 'Germany';
```",Both queries calculate the total freight cost for orders shipped to Germany and will yield the same results. Differences in alias naming do not affect the outcome.,SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShipCountry = 'Germany';,Both the generated and ground truth queries select the sum of 'Freight' from the 'orders' table where 'ShipCountry' is 'Germany'. They will yield the same result.,both
What is the average order fulfillment time for orders placed in the first half of 2023?,"SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'","```sql
SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time 
FROM orders 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'
```","The generated SQL accurately calculates the average order fulfillment time for orders placed in the first half of 2023, matching the ground truth SQL in logic and result despite the difference in the alias name.","SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'","The generated SQL query and the ground truth query are identical and correctly compute the average order fulfillment time for orders placed between January 1, 2023, and June 30, 2023.",both
What is the distribution of products in terms of quantity per unit?,"SELECT QuantityPerUnit, COUNT(*) AS ProductCount FROM products GROUP BY QuantityPerUnit ORDER BY ProductCount DESC;","```sql
SELECT QuantityPerUnit, COUNT(ProductID) AS ProductCount
FROM products
GROUP BY QuantityPerUnit
ORDER BY QuantityPerUnit;
```",The queries differ in the ORDER BY clause; one sorts by QuantityPerUnit and the other by ProductCount in descending order. This affects the results' presentation.,"SELECT p.QuantityPerUnit, COUNT(*) AS ProductCount FROM products p GROUP BY p.QuantityPerUnit;","The generated query does not include the ORDER BY clause to sort by ProductCount, which may lead to a different result order compared to the ground truth query.",None
How many unique products have been ordered in total?,SELECT COUNT(DISTINCT [Order Details].ProductID) AS UniqueProducts FROM [Order Details];,"```sql
SELECT COUNT(DISTINCT ProductID) AS UniqueProductsOrdered
FROM [Order Details];
```","Both queries count distinct ProductIDs from the [Order Details] table, answering the user's question correctly.",SELECT COUNT(DISTINCT ProductID) AS UniqueProductsOrdered FROM [Order Details];,"Both queries correctly count the unique ProductID values from the [Order Details] table, which answers the user's question.",both
What is the average quantity of products ordered per order?,"SELECT AVG(TotalQuantity) AS AvgQuantityPerOrder FROM (SELECT OrderID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY OrderID) AS OrderQuantities;","```sql
SELECT AVG(TotalQuantity) AS AverageQuantityPerOrder
FROM (
    SELECT orders.OrderID, SUM([Order Details].Quantity) AS TotalQuantity
    FROM orders
    JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
    GROUP BY orders.OrderID
) AS OrderSummary;
```",Both queries calculate the average quantity of products ordered per order by aggregating the quantities in 'Order Details' and averaging across orders.,"SELECT AVG(OrderQuantities.TotalQuantity) AS AvgQuantity FROM (SELECT OrderID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY OrderID) AS OrderQuantities;",Both queries calculate the average quantity of products ordered per order by summing quantities per order and then averaging these totals.,both
How many days on average does it take to fulfill an order?,"SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders","```sql
SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM orders;
```",Both queries calculate the average number of days to fulfill an order using the DATEDIFF function on the same columns: ShippedDate and OrderDate.,"SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageOrderFulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL;","Both queries calculate the average number of days between OrderDate and ShippedDate. The generated query includes a filter for non-null ShippedDate, which ensures only fulfilled orders are considered, aligning with the user's intention.",both
Which product generated the highest revenue in the last year?,"SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '1 year' AND o.OrderDate < DATE_TRUNC('year', CURRENT_DATE) GROUP BY od.ProductID ORDER BY Revenue DESC LIMIT 1;","```sql
SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM [Order Details] od
JOIN orders o ON od.OrderID = o.OrderID
WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
GROUP BY od.ProductID
ORDER BY TotalRevenue DESC
LIMIT 1;
```","The generated query uses DATE_SUB(CURDATE(), INTERVAL 1 YEAR) which calculates one year from the current date, potentially including part of the current year. The ground truth query uses DATE_TRUNC to specifically target the last complete year, ensuring no overlap with the current year.","SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 1;","The generated query uses YEAR function, which may not be supported in all SQL dialects, and excludes data from the current year boundary. The ground truth query uses DATE_TRUNC and handles year boundaries explicitly, providing a more precise condition for filtering last year's data.",None
Which employees have the best on-time delivery records?,"SELECT EmployeeID, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(*)) * 100 AS OnTimeRate FROM orders GROUP BY EmployeeID ORDER BY OnTimeRate DESC;","```sql
SELECT EmployeeID, 
       COUNT(OrderID) AS OnTimeDeliveries
FROM orders
WHERE ShippedDate <= RequiredDate
GROUP BY EmployeeID
ORDER BY OnTimeDeliveries DESC;
```","The generated SQL query provides the count of on-time deliveries, while the ground truth query calculates the percentage rate of on-time deliveries relative to total deliveries, offering a different insight.","SELECT Specialization, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTime FROM orders o JOIN employees e ON o.EmployeeID = e.EmployeeID GROUP BY e.EmployeeID ORDER BY COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) DESC LIMIT 1;","The generated query selects the specialization and counts the number of on-time deliveries instead of calculating the on-time delivery rate as a percentage of total deliveries. The ground truth query provides an on-time delivery rate for each employee, ordering them by the rate.",None
What is the sales growth rate by employee for each month?,"SELECT E.EmployeeID, DATE_FORMAT(O.OrderDate, '%Y-%m') AS Month, (SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) - LAG(SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount))) OVER (PARTITION BY E.EmployeeID ORDER BY DATE_FORMAT(O.OrderDate, '%Y-%m'))) / NULLIF(LAG(SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount))) OVER (PARTITION BY E.EmployeeID ORDER BY DATE_FORMAT(O.OrderDate, '%Y-%m')), 0) AS GrowthRate FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY E.EmployeeID, DATE_FORMAT(O.OrderDate, '%Y-%m') ORDER BY Month;","```sql
SELECT 
    e.EmployeeID,
    e.FirstName,
    e.LastName,
    DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month,
    COALESCE(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)), 0) AS TotalSales,
    LAG(COALESCE(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)), 0)) OVER (PARTITION BY e.EmployeeID ORDER BY DATE_FORMAT(o.OrderDate, '%Y-%m')) AS PreviousMonthSales,
    CASE 
        WHEN LAG(COALESCE(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)), 0)) OVER (PARTITION BY e.EmployeeID ORDER BY DATE_FORMAT(o.OrderDate, '%Y-%m')) IS NULL THEN NULL
        ELSE (COALESCE(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)), 0) - LAG(COALESCE(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)), 0)) OVER (PARTITION BY e.EmployeeID ORDER BY DATE_FORMAT(o.OrderDate, '%Y-%m'))) / LAG(COALESCE(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)), 0)) OVER (PARTITION BY e.EmployeeID ORDER BY DATE_FORMAT(o.OrderDate, '%Y-%m')) * 100
    END AS SalesGrowthRate
FROM 
    employees e
LEFT JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
LEFT JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    e.EmployeeID, Month
ORDER BY 
    e.EmployeeID, Month;
```",The generated query includes additional columns and has different join types compared to the ground truth query. These differences may result in different outputs due to the LEFT JOIN and inclusion of employee names.,"SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, e.FirstName, e.LastName, (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) - LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) OVER (PARTITION BY e.EmployeeID ORDER BY EXTRACT(MONTH FROM o.OrderDate))) / LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) OVER (PARTITION BY e.EmployeeID ORDER BY EXTRACT(MONTH FROM o.OrderDate)) AS GrowthRate FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY EXTRACT(MONTH FROM o.OrderDate), e.EmployeeID, e.FirstName, e.LastName;","The generated query extracts just the month, not year and month, potentially leading to incorrect grouping. It also does not handle division by zero, unlike the ground truth query.",None
How many suppliers are based in each country?,"SELECT Country, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY Country;","```sql
SELECT Country, COUNT(*) AS SupplierCount
FROM suppliers
GROUP BY Country;
```","Both queries count suppliers grouped by country, and COUNT(*) is equivalent to counting a specific column such as SupplierID in this context.","SELECT Country, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY Country ORDER BY SupplierCount DESC;","The generated query includes an ORDER BY clause, which sorts the results but does not alter the count or grouping. Both queries will yield the same counts per country.",both
Calculate the average fulfillment time for orders by country.,"SELECT ShipCountry, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY ShipCountry;","```sql
SELECT ShipCountry, AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM orders
GROUP BY ShipCountry;
```",Both queries calculate the average fulfillment time for orders grouped by country using the same logic and functions.,"SELECT ShipCountry, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY ShipCountry;","The generated query is identical to the ground truth query, thus it accurately answers the user's question and yields the same results.",both
Which products have a unit price above the average unit price of all products?,SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);,"```sql
SELECT ProductID, ProductName, UnitPrice
FROM products
WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);
```","The generated query includes 'ProductID' and 'UnitPrice' in the SELECT statement, while the ground truth query only selects 'ProductName'.",SELECT p.ProductName FROM products p WHERE p.UnitPrice > (SELECT AVG(p2.UnitPrice) FROM products p2);,Both queries correctly determine products with a unit price above the average. The differences in aliasing and formatting do not affect the outcome.,FT
Which regions have the longest order fulfillment times?,"SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipRegion ORDER BY AvgFulfillmentTime DESC;","```sql
SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY ShipRegion
ORDER BY AverageFulfillmentTime DESC;
```",Both queries calculate the average order fulfillment time for each region and order them in descending order.,"SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipRegion ORDER BY AvgFulfillmentTime DESC;","The generated SQL query is identical to the ground truth query, and both correctly calculate the average fulfillment time by region, ordering the results by the longest times.",both
Which suppliers have the fastest average lead time?,"SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC","```sql
SELECT suppliers.SupplierID, suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_lead_time
FROM orders
JOIN products ON orders.OrderID = products.ProductID
JOIN suppliers ON products.SupplierID = suppliers.SupplierID
GROUP BY suppliers.SupplierID, suppliers.CompanyName
ORDER BY average_lead_time ASC
```",The generated query incorrectly joins orders with products using ProductID instead of OrderID. It also selects CompanyName which the ground truth does not.,"SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS FastestLeadTime FROM products p JOIN orders o ON p.ProductID = o.OrderID GROUP BY p.SupplierID ORDER BY FastestLeadTime ASC;","The generated query incorrectly joins products with orders using ProductID and OrderID, which does not reflect the correct relationship. It should join using Order Details to associate products with orders.",None
How many orders have a freight cost above $50?,SELECT COUNT(OrderID) AS OrdersAbove50 FROM orders WHERE Freight > 50;,"```sql
SELECT COUNT(OrderID) 
FROM orders 
WHERE Freight > 50;
```","Both queries count the number of orders with a freight cost above $50, yielding the same results. The difference is only in the column alias.",SELECT COUNT(*) AS HighFreightOrders FROM orders WHERE Freight > 50;,"Both queries count the number of orders where Freight is greater than 50, so they yield the same result.",both
Calculate the average quantity of products per order.,SELECT AVG(Quantity) AS AverageQuantity FROM [Order Details];,"```sql
SELECT AVG([Order Details].Quantity) AS AverageQuantityPerOrder
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID;
```",Both queries calculate the average quantity directly from the [Order Details] table. The join in the generated query does not alter the results because it correctly links the orders by OrderID without affecting the Quantity aggregation.,SELECT AVG(total_quantity) AS average_product_quantity_per_order FROM (SELECT SUM(od.Quantity) AS total_quantity FROM [Order Details] od GROUP BY od.OrderID) AS order_quantities;,"The generated query calculates the average of total quantities per order, while the ground truth calculates the average quantity across all order details without grouping by order.",Base
Identify the employees who have not met their sales targets in the last month.,"SELECT employees.EmployeeID FROM employees LEFT JOIN (SELECT EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY EmployeeID) AS MonthlySalesData ON employees.EmployeeID = MonthlySalesData.EmployeeID WHERE MonthlySalesData.MonthlySales IS NULL OR MonthlySalesData.MonthlySales < 10000","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, COALESCE(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)), 0) AS TotalSales
FROM employees e
LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND o.OrderDate >= DATEADD(MONTH, -1, GETDATE())
LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName
HAVING TotalSales < (SELECT SalesTarget FROM sales_targets WHERE SalesMonth = DATEADD(MONTH, -1, GETDATE()))
```","The generated SQL query compares TotalSales with a dynamic SalesTarget, whereas the ground truth uses a fixed MonthlySales threshold of 10000. Additionally, the ground truth query explicitly handles cases where there are no sales (NULL), while the generated query does not.","To find employees who haven't met their sales targets in the last month, you can use a subquery that calculates the total sales for each employee and compares that with the target sales for the last month. Here's the SQL query: SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.UnitPrice IS NULL OR (SELECT SUM(od2.Quantity * od2.UnitPrice) FROM orders o2 JOIN [Order Details] od2 ON o2.OrderID = od2.OrderID WHERE o2.EmployeeID = e.EmployeeID AND MONTH(o2.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(o2.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH)) < (SELECT SUM(od3.TargetSales) FROM employees e2 WHERE e2.EmployeeID = e.EmployeeID) GROUP BY e.EmployeeID, e.FirstName, e.LastName;","The generated query is incorrect due to a few issues. It does not correctly calculate the sales target for comparison with the actual sales, as it uses a separate table that seems to hold target sales without specifying how those values are stored. Additionally, it assumes UnitPrice being NULL can indicate unmet targets, which isn't standard practice. The ground truth query calculates total sales and checks against a fixed target of 10000, which the generated query does not implement.",None
Which employee has generated the highest sales revenue in the current year?,"SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE)
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 1;
```","'Generated SQL Query' yields the same results as 'Ground Truth SQL Query'. Both are correctly retrieving the employee with the highest sales revenue in the current year, grouping by employee details, and ordering by total sales. The absence of FirstName and LastName in the GROUP BY clause of the generated SQL will not affect the result in this case.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1","Both queries calculate the total sales revenue for each employee in the current year and return the employee with the highest revenue. The difference lies in the additional employee details in the ground truth, which does not affect the logic or result.",both
Which shipping method is most commonly used each month?,"SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY Year, Month, ShipVia ORDER BY Year, Month, UsageCount DESC;","```sql
SELECT 
    EXTRACT(YEAR FROM OrderDate) AS Year,
    EXTRACT(MONTH FROM OrderDate) AS Month,
    ShipVia,
    COUNT(OrderID) AS TotalOrders
FROM 
    orders
GROUP BY 
    Year, Month, ShipVia
ORDER BY 
    Year, Month, TotalOrders DESC;
```",The generated query does not limit the result to the most commonly used shipping method per month; it lists all methods ordered by count.,"SELECT DATE_TRUNC('month', OrderDate) AS Month, ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY Month, ShipVia ORDER BY Month, UsageCount DESC;","The generated query uses DATE_TRUNC to group by month, which doesn't handle year differentiation, potentially mixing data of the same month across different years. The ground truth query uses EXTRACT to include both year and month, ensuring yearly separation.",None
Calculate the total value of products in stock for each supplier.,"SELECT SupplierID, SUM(UnitPrice * UnitsInStock) AS TotalStockValue FROM products GROUP BY SupplierID;","```sql
SELECT 
    p.SupplierID, 
    SUM(p.UnitsInStock * p.UnitPrice) AS TotalValueInStock
FROM 
    products p
GROUP BY 
    p.SupplierID;
```","Both queries calculate the total value of products in stock for each supplier by multiplying UnitPrice and UnitsInStock, then aggregating by SupplierID.","SELECT suppliers.CompanyName, SUM(products.UnitPrice * products.UnitsInStock) AS TotalStockValue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;","The generated query groups by CompanyName, while the ground truth query groups by SupplierID, leading to the same result if SupplierID to CompanyName mapping is unique, but cannot be guaranteed without additional information.",Base
Which shipping method is preferred by most customers?,"SELECT o.ShipVia, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipVia ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT ShipVia, COUNT(*) as OrderCount
FROM orders
GROUP BY ShipVia
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries count the number of orders per shipping method, order by the count in descending order, and limit the result to the top one, effectively determining the most preferred shipping method.","SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia ORDER BY OrderCount DESC LIMIT 1;",Both queries select the shipping method with the highest order count from the orders table and are functionally equivalent despite minor differences in alias usage.,both
Which customers have returned to place an order more than once?,"SELECT CustomerID, COUNT(OrderID) FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 1;","```sql
SELECT CustomerID
FROM orders
GROUP BY CustomerID
HAVING COUNT(OrderID) > 1;
```",Both queries correctly identify customers with more than one order by grouping by CustomerID and having a count greater than one.,"SELECT CustomerID, COUNT(OrderID) AS RepeatOrders FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 1;","Both queries group by CustomerID and count orders, filtering for customers with more than one order, so they return equivalent results.",both
How many employees have a hire date before 1995?,SELECT COUNT(*) FROM employees WHERE HireDate < '1995-01-01';,"```sql
SELECT COUNT(*) AS EmployeeCount
FROM employees
WHERE HireDate < '1995-01-01';
```",Both the generated SQL query and the ground truth query count employees with a hire date before 1995 using the same condition.,SELECT COUNT(EmployeeID) FROM employees WHERE HireDate < '1995-01-01';,Both queries count employees with a hire date before 1995. COUNT(EmployeeID) and COUNT(*) are functionally equivalent if EmployeeID is never NULL.,both
What is the total freight cost for each customer?,"SELECT CustomerID, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY CustomerID","```sql
SELECT CustomerID, SUM(Freight) AS TotalFreight
FROM orders
GROUP BY CustomerID;
```","The generated SQL query and the ground truth query produce the same results, only differing in the alias name for the aggregated column.","SELECT o.CustomerID, SUM(o.Freight) AS TotalFreight FROM orders o GROUP BY o.CustomerID;",Both queries calculate the total freight for each customer by summing the 'Freight' column and grouping by 'CustomerID'. The differences in column aliases do not affect the correctness.,both
Determine the product with the highest inventory turnover ratio.,"SELECT TOP 1 p.ProductID, (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY InventoryTurnoverRatio DESC;","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.ProductName
ORDER BY 
    InventoryTurnoverRatio DESC
LIMIT 1;
```","Both queries calculate the inventory turnover ratio using the same formula and order the results to find the highest ratio. The slight differences in syntax and the use of LIMIT vs TOP 1 do not affect the outcome, and both will return the product with the highest inventory turnover ratio.","SELECT products.ProductName, (SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0)) AS InventoryTurnoverRatio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY InventoryTurnoverRatio DESC LIMIT 1;","The generated query uses 'LIMIT 1' for result constraint while the ground truth uses 'TOP 1'. Additionally, the generated query uses 'ProductName' in the SELECT and GROUP BY, whereas the ground truth uses 'ProductID'.",Base
Calculate the total freight cost for shipments to each country.,"SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;","```sql
SELECT ShipCountry, SUM(Freight) AS TotalFreight
FROM orders
GROUP BY ShipCountry;
```","Both queries calculate the total freight cost for shipments to each country by summing the Freight column and grouping by ShipCountry. The difference is only in the alias name for the summed column, which does not affect the result of the query.","SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;","The generated SQL query and the ground truth SQL query both sum the 'Freight' for each 'ShipCountry' from the 'orders' table, only differing in the alias name, which does not affect the results.",both
Determine the inventory turnover ratio for each product category.,"SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM products JOIN categories ON products.CategoryID = categories.CategoryID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY categories.CategoryName","```sql
SELECT categories.CategoryID, 
       categories.CategoryName, 
       SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio 
FROM [Order Details] 
JOIN products ON [Order Details].ProductID = products.ProductID 
JOIN categories ON products.CategoryID = categories.CategoryID 
GROUP BY categories.CategoryID, categories.CategoryName
```","Both queries calculate the inventory turnover ratio for each product category by dividing total sales by average stock, and group by category. The inclusion of CategoryID in the generated query does not change the result.","SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;","The generated query includes a NULLIF function to handle division by zero in the AVG(unitsInStock), while the ground truth does not. The results could differ if there are any categories with zero average units in stock. Additionally, the 'CategoryID' is used instead of 'CategoryName', which could affect the grouping perspective.",Base
Identify the trend in total sales over the last four quarters.,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY OrderMonth ORDER BY OrderMonth DESC;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-Q%q') AS Quarter, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE 
    OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
GROUP BY 
    Quarter
ORDER BY 
    Quarter;
```","The generated query groups by quarters using DATE_FORMAT, while the ground truth query groups by months. Both focus on the last year but aggregate differently: quarters vs. months.","SELECT (EXTRACT(YEAR FROM orders.OrderDate) * 4 + EXTRACT(QUARTER FROM orders.OrderDate)) AS OrderQuarter, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate > CURRENT_DATE - INTERVAL '1 year' GROUP BY OrderQuarter ORDER BY OrderQuarter;","The generated query groups by quarter while the ground truth query groups by month. Additionally, the generated query orders by ascending quarters whereas the ground truth orders by descending months. The time interval logic is comparable, but the aggregation period differs, resulting in different outputs.",None
List the products that have been discontinued.,SELECT ProductName FROM products WHERE Discontinued = 1;,"```sql
SELECT ProductID, ProductName 
FROM products 
WHERE Discontinued = 1;
```","The generated SQL query includes ProductID in the SELECT statement, whereas the ground truth query only selects ProductName.",SELECT * FROM products WHERE Discontinued = 1;,"The generated query selects all columns, while the ground truth query selects only the 'ProductName' column.",None
Which employee processed the most orders in the last quarter?,SELECT employees.EmployeeID FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE QUARTER(orders.OrderDate) = QUARTER(CURRENT_DATE - INTERVAL 3 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 3 MONTH) GROUP BY employees.EmployeeID ORDER BY COUNT(orders.OrderID) DESC LIMIT 1;,"```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
WHERE OrderDate >= DATEADD(quarter, -1, GETDATE())
GROUP BY EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```","The generated query does not correctly filter for the last quarter. It uses DATEADD with GETDATE, which reflects the last 3 months, not the last quarter. The ground truth uses QUARTER and YEAR functions to ensure it evaluates the calendar quarter.","SELECT EmployeeID, COUNT(OrderID) AS OrdersProcessed FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY EmployeeID ORDER BY OrdersProcessed DESC LIMIT 1;","The generated SQL query calculates the last 3 months' orders but does not align with the definition of the last quarter. The ground truth query properly calculates based on the last quarter, ensuring the ordering and year match.",None
List all customers who have not placed an order in the last year.,"SELECT CustomerID FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR));","```sql
SELECT c.CustomerID, c.CompanyName, c.ContactName, c.ContactTitle, c.Address, c.City, c.Region, c.PostalCode, c.Country, c.Phone, c.Fax
FROM customers c
LEFT JOIN orders o ON c.CustomerID = o.CustomerID AND o.OrderDate >= DATEADD(year, -1, GETDATE())
WHERE o.OrderID IS NULL;
```","The generated query uses a LEFT JOIN to filter out customers with recent orders, while the ground truth query uses a subquery with NOT IN to achieve the same. However, the generated query incorrectly checks for orders in the last year instead of selecting those who haven't ordered. Also, DATEADD and GETDATE() are not standard SQL functions and may not work in all databases.","SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate IS NULL OR o.OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR);","The generated query inaccurately includes customers with no orders ever, while the ground truth only targets customers with orders outside the last year.",None
Which employee has fulfilled the most orders this month?,"SELECT o.EmployeeID, COUNT(o.OrderID) AS FulfilledOrders FROM orders o WHERE o.ShippedDate BETWEEN DATE_TRUNC('month', CURRENT_DATE) AND CURRENT_DATE GROUP BY o.EmployeeID ORDER BY FulfilledOrders DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS TotalOrders
FROM orders
WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE) AND YEAR(OrderDate) = YEAR(CURRENT_DATE)
GROUP BY EmployeeID
ORDER BY TotalOrders DESC
LIMIT 1;
```","The generated query uses OrderDate, while the ground truth query uses ShippedDate to determine fulfilled orders.","SELECT e.EmployeeID, COUNT(o.OrderID) AS OrdersFulfilled FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY OrdersFulfilled DESC LIMIT 1;","The generated query uses OrderDate to filter orders for the current month, whereas the ground truth query uses ShippedDate to determine the month. This could lead to different results if an order was placed in one month but shipped in another.",None
What is the overall on-time delivery rate?,SELECT (COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID)) AS OnTimeDeliveryRate FROM orders;,"```sql
SELECT 
    COUNT(OrderID) * 1.0 / COUNT(OrderID) AS On_time_Delivery_Rate
FROM 
    orders
WHERE 
    ShippedDate <= RequiredDate;
```","The generated SQL query mistakenly calculates the on-time delivery rate as always 1 by dividing the count of on-time orders by the total orders, but it does not apply a conditional count to on-time orders as done by the ground truth query.",SELECT (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(*)) * 100 AS OverallOnTimeRate FROM orders;,"Both queries calculate the on-time delivery rate by dividing the count of on-time orders by the total number of orders, then multiplying by 100 for a percentage.",FT
Find the customer with the largest single order revenue.,"SELECT o.CustomerID, od.OrderID, MAX(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MaxSingleOrderRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID, od.OrderID ORDER BY MaxSingleOrderRevenue DESC LIMIT 1;","```sql
SELECT customers.CustomerID, customers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalOrderRevenue
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID, customers.CompanyName
ORDER BY TotalOrderRevenue DESC
LIMIT 1;
```","The generated query calculates the total revenue per customer across all orders, while the ground truth query finds the maximum revenue from a single order for a customer.","SELECT c.CustomerID, o.OrderID, (od.UnitPrice * od.Quantity * (1 - od.Discount)) AS SingleOrderRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID ORDER BY SingleOrderRevenue DESC LIMIT 1;","Both queries calculate revenue for each individual order and return the order with the highest revenue across any customer, but they use different methods: the generated query orders all results and limits them, while the ground truth uses MAX and groups by customer and order ID.",FT
What is the most common shipping city?,"SELECT ShipCity, COUNT(OrderID) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 1","```sql
SELECT ShipCity, COUNT(*) AS ShipmentCount
FROM orders
GROUP BY ShipCity
ORDER BY ShipmentCount DESC
LIMIT 1;
```","Both queries group by ShipCity, count the entries, order by the count in descending order, and limit the result to 1, thus yielding the same result.","SELECT ShipCity, COUNT(OrderID) FROM orders GROUP BY ShipCity ORDER BY COUNT(OrderID) DESC LIMIT 1;","Both queries correctly find the most common shipping city by counting OrderID, grouping by ShipCity, and ordering by the count in descending order, limiting the result to 1.",both
Identify the top 3 cities with the highest number of shipping delays.,"SELECT o.ShipCity, COUNT(o.OrderID) AS DelayCount FROM orders o WHERE o.ShippedDate > o.RequiredDate GROUP BY o.ShipCity ORDER BY DelayCount DESC LIMIT 3;","```sql
SELECT ShipCity, COUNT(*) AS DelayCount
FROM orders
WHERE ShippedDate IS NULL
GROUP BY ShipCity
ORDER BY DelayCount DESC
LIMIT 3;
```","The generated query checks for NULL ShippedDate as a delay, while the ground truth considers ShippedDate after RequiredDate as a delay. These conditions define delays differently.","SELECT ShipCity, COUNT(OrderID) AS DelayedOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipCity ORDER BY DelayedOrders DESC LIMIT 3;","Both queries calculate the top 3 cities based on the number of shipping delays by comparing ShippedDate and RequiredDate, grouping by ShipCity, and ordering by the count of delayed orders in descending order.",FT
What is the average shipping cost for orders shipped to different countries?,"SELECT ShipCountry, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipCountry;","```sql
SELECT ShipCountry, AVG(Freight) AS AverageShippingCost
FROM orders
GROUP BY ShipCountry;
```","Both queries calculate the average freight cost for each country, achieving the same results despite slight differences in the alias used for the average column.","SELECT ShipCountry, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipCountry;","Both queries calculate the average freight cost per ship country, differing only in the alias used for the average value, which does not affect the result.",both
Which product categories have the most units in stock?,"SELECT CategoryID, SUM(UnitsInStock) AS TotalUnitsInStock FROM products GROUP BY CategoryID ORDER BY TotalUnitsInStock DESC;","```sql
SELECT CategoryID, SUM(UnitsInStock) AS TotalUnitsInStock
FROM products
GROUP BY CategoryID
ORDER BY TotalUnitsInStock DESC;
```","The generated query and ground truth query are functionally identical, both calculate the total units in stock per category and order the results in descending order.","SELECT c.CategoryID, SUM(p.UnitsInStock) AS TotalUnitsInStock FROM categories c JOIN products p ON c.CategoryID = p.CategoryID GROUP BY c.CategoryID;","Both queries calculate the total units in stock per category, but the generated query lacks an ORDER BY clause. The main logic is correct; however, they might yield different orders of results.",both
Which products have the most units on order?,"SELECT ProductName, UnitsOnOrder FROM products WHERE UnitsOnOrder = (SELECT MAX(UnitsOnOrder) FROM products);","```sql
SELECT ProductID, ProductName, UnitsOnOrder
FROM products
ORDER BY UnitsOnOrder DESC;
```","The generated query returns all products sorted by UnitsOnOrder, while the ground truth query returns only the products with the maximum UnitsOnOrder.",SELECT ProductName FROM products WHERE UnitsOnOrder = (SELECT MAX(UnitsOnOrder) FROM products);,"The generated query does not include the 'UnitsOnOrder' in the output, which is part of the ground truth query's result.",None
What is the average discount given on orders per month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Discount) AS AvgDiscount FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
    AVG(Discount) AS Average_Discount
FROM 
    [Order Details]
JOIN 
    orders ON [Order Details].OrderID = orders.OrderID
GROUP BY 
    Month
```","Both queries perform the same operations: they join 'Order Details' and 'orders', format 'OrderDate' to 'YYYY-MM', calculate the average discount, and group by month. The difference in aliasing does not affect the result.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Discount) AS AvgDiscount FROM [Order Details] OD JOIN orders O ON OD.OrderID = O.OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",The generated SQL query and the ground truth SQL query are functionally equivalent and will produce the same results. The differences in case for aliases OD vs. od and O vs. o do not affect the query's logic or output.,both
Which employees have the highest total sales in each country?,"SELECT employees.EmployeeID, orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, orders.ShipCountry;","```sql
SELECT 
    e.EmployeeID,
    e.FirstName,
    e.LastName,
    e.Country,
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    e.EmployeeID, e.Country
HAVING 
    TotalSales = (SELECT MAX(Total) 
                  FROM (SELECT SUM(od2.UnitPrice * od2.Quantity * (1 - od2.Discount)) AS Total
                        FROM employees e2
                        JOIN orders o2 ON e2.EmployeeID = o2.EmployeeID
                        JOIN [Order Details] od2 ON o2.OrderID = od2.OrderID
                        WHERE e2.Country = e.Country
                        GROUP BY e2.EmployeeID) AS CountrySales)
ORDER BY 
    e.Country;
```","The generated SQL query filters for employees with the highest total sales in each country, while the ground truth query does not perform this filtering. It simply calculates total sales per employee per country without selecting the top sales.","SELECT e.EmployeeID, e.Country, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN ""Order Details"" od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.Country ORDER BY TotalSales DESC;","The generated query groups by EmployeeID and Country but doesn't select the highest sales in each country. It orders by TotalSales for all employees universally, not per country.",None
How many customers have made repeat purchases?,SELECT COUNT(DISTINCT CustomerID) FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 1;,"```sql
SELECT COUNT(DISTINCT CustomerID) AS RepeatCustomers
FROM orders
GROUP BY CustomerID
HAVING COUNT(OrderID) > 1;
```","Both queries count the number of distinct customers who have made more than one purchase, resulting in the same outcome.","SELECT COUNT(DISTINCT CustomerID) FROM (SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID HAVING OrderCount > 1) AS RepeatCustomers;","Both queries accurately count distinct CustomerIDs with more than one order, capturing repeat purchases.",both
Identify the month with the highest on-time delivery rate in the previous year.,"SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*) AS OnTimeRate FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '1 year') GROUP BY EXTRACT(MONTH FROM OrderDate) ORDER BY OnTimeRate DESC LIMIT 1;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    COUNT(OrderID) AS TotalOrders,
    COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) AS OnTimeDeliveries,
    (COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID)) AS OnTimeDeliveryRate
FROM 
    orders
WHERE 
    OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) 
GROUP BY 
    Month
ORDER BY 
    OnTimeDeliveryRate DESC
LIMIT 1;
```","The generated query filters orders from the last year relative to the current date, while the ground truth query specifically extracts data for the previous calendar year. This discrepancy might cause different data selections, leading to potentially different results.","SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 year' GROUP BY TO_CHAR(OrderDate, 'YYYY-MM') ORDER BY OnTimeRate DESC LIMIT 1;","The generated query filters orders from an entire year before the current month, while the ground truth focuses strictly on the previous calendar year. This results in potentially different data sets being analyzed for on-time delivery rates.",None
Which customer has incurred the highest total freight costs?,"SELECT CustomerID, SUM(Freight) AS TotalFreight FROM orders GROUP BY CustomerID ORDER BY TotalFreight DESC LIMIT 1;","```sql
SELECT CustomerID, SUM(Freight) AS TotalFreight
FROM orders
GROUP BY CustomerID
ORDER BY TotalFreight DESC
LIMIT 1;
```","The generated SQL query is identical to the ground truth query, both correctly identify the customer with the highest total freight costs.","SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia ORDER BY TotalFreight DESC LIMIT 1;","The generated query groups by 'ShipVia' and not 'CustomerID', yielding the top carrier instead of the top customer by total freight costs.",Base
What is the average shipping cost per country each month?,"SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, ShipCountry, AVG(Freight) AS AvgFreight FROM orders GROUP BY Year, Month, ShipCountry;","```sql
SELECT 
    ShipCountry,
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    AVG(Freight) AS AverageShippingCost
FROM 
    orders
GROUP BY 
    ShipCountry, Month
```","The generated SQL query uses DATE_FORMAT which might result in strings formatted as 'YYYY-MM', whereas the ground truth query uses EXTRACT to group by numerical Year and Month separately, leading to possible differences in grouping and result interpretation.","SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, orders.ShipCountry, AVG(orders.Freight) AS AvgShippingCost FROM orders GROUP BY Month, orders.ShipCountry;","The generated query uses DATE_FORMAT to format the date as year-month, whereas the ground truth query extracts year and month separately. This leads to structural differences in the output columns, even though both aim to calculate average shipping costs per country each month.",None
What is the average number of orders processed per employee in a month?,"SELECT employees.EmployeeID, COUNT(orders.OrderID) / COUNT(DISTINCT DATE_FORMAT(orders.OrderDate, '%Y-%m')) AS AverageMonthlyOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;","```sql
SELECT 
    e.EmployeeID, 
    e.FirstName, 
    e.LastName, 
    COUNT(o.OrderID) / COUNT(DISTINCT DATE_TRUNC('month', o.OrderDate)) AS AvgOrdersPerMonth
FROM 
    employees e
LEFT JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
GROUP BY 
    e.EmployeeID, e.FirstName, e.LastName
```","Both queries calculate the average number of orders per employee per month. The generated query uses DATE_TRUNC to truncate the date to the month, while the ground truth query uses DATE_FORMAT to retrieve the year and month. Both achieve the same grouping by month.","SELECT e.FirstName, e.LastName, COUNT(o.OrderID) / (DATEDIFF(MAX(o.OrderDate), MIN(o.OrderDate)) / 30.44) AS AvgOrdersPerMonth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate IS NOT NULL GROUP BY e.EmployeeID, e.FirstName, e.LastName;","The generated query calculates the average based on the date range, while the ground truth calculates based on distinct months.",Base
Identify the top 3 suppliers by total sales revenue.,"SELECT s.SupplierID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY TotalSales DESC LIMIT 3;","```sql
SELECT p.SupplierID, SUM(od.Quantity * od.UnitPrice) AS TotalSalesRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.SupplierID
ORDER BY TotalSalesRevenue DESC
LIMIT 3;
```","The generated SQL query does not join with the 'suppliers' table, whereas the ground truth query does. This means the generated query might miss some necessary supplier details, affecting the accuracy of identifying top suppliers by total sales.","SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY total_sales DESC LIMIT 3;","The generated query applies discounts, resulting in different sales totals compared to the ground truth which ignores discounts.",None
Discover the most frequently reordered product.,"SELECT ProductID, COUNT(*) AS ReorderCount FROM products WHERE UnitsOnOrder > ReorderLevel GROUP BY ProductID ORDER BY ReorderCount DESC LIMIT 1;","```sql
SELECT ProductID, COUNT(OrderID) AS ReorderCount
FROM [Order Details]
GROUP BY ProductID
ORDER BY ReorderCount DESC
LIMIT 1;
```","The queries target different datasets and conditions. The generated query uses 'Order Details' and counts OrderID occurrences, whereas the ground truth query uses 'products' and checks where 'UnitsOnOrder' is greater than 'ReorderLevel'.","SELECT ProductID, ProductName, UnitsOnOrder FROM products WHERE UnitsOnOrder = (SELECT MAX(UnitsOnOrder) FROM products)","The generated query finds the product with the maximum units on order, while the ground truth query finds the most frequently reordered product by counting reorders.",None
Which shipping company has the highest on-time delivery rate?,"SELECT ShipVia, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*) AS OnTimeRate FROM orders GROUP BY ShipVia ORDER BY OnTimeRate DESC;","```sql
SELECT ShipVia, 
       COUNT(OrderID) AS TotalOrders, 
       SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) AS OnTimeDeliveries,
       (SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate
FROM orders
GROUP BY ShipVia
ORDER BY OnTimeDeliveryRate DESC
LIMIT 1;
```",Both queries accurately calculate the on-time delivery rate for each shipping company and order by the rate in descending order.,"SELECT shippers.CompanyName, COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 1.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName ORDER BY on_time_delivery_rate DESC LIMIT 1","The generated query includes the join with shippers table to get CompanyName, which aligns with the user question for shipping company names. The ground truth query does not include the join, so it doesn't return company names, just the ShipVia result. Both queries calculate the on-time delivery rate, but the ground truth does not return the same final information as the generated query.",Base
Which product has the highest total sales revenue?,"SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS ProductSales FROM [Order Details] GROUP BY ProductID ORDER BY ProductSales DESC LIMIT 1;","```sql
SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM [Order Details] od
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY od.ProductID
ORDER BY TotalSales DESC
LIMIT 1;
```","The generated query includes a join with the 'orders' table, which is unnecessary for calculating the highest total sales revenue by product.","SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY TotalSales DESC LIMIT 1;","The generated query returns the ProductName, whereas the ground truth query returns the ProductID. This could yield different results depending on the unique combination of ProductName and ProductID.",None
Identify suppliers with an average lead time greater than two weeks.,"SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID GROUP BY s.SupplierID HAVING AvgLeadTime > 14;","```sql
SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.SupplierID
HAVING AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) > 14;
```","The generated query selects suppliers.CompanyName instead of SupplierID, which might cause discrepancies if multiple suppliers share the same name. The logic otherwise matches the ground truth query.","SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN orders ON products.ProductID = orders.ProductID GROUP BY suppliers.CompanyName HAVING AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) > 14;","The generated query selects CompanyName, whereas the ground truth query selects SupplierID. Additionally, the generated query may not account for multiple order details per order, which could affect the average lead time calculation.",None
List the top 5 cities with the highest number of customers.,"SELECT City, COUNT(CustomerID) AS CustomerCount FROM customers GROUP BY City ORDER BY CustomerCount DESC LIMIT 5","```sql
SELECT City, COUNT(CustomerID) AS CustomerCount
FROM customers
GROUP BY City
ORDER BY CustomerCount DESC
LIMIT 5;
```","Both queries accurately group customers by city, count the CustomerIDs, order the counts in descending order, and limit the results to the top 5.","SELECT c.City, COUNT(c.CustomerID) AS NumberOfCustomers FROM customers c GROUP BY c.City ORDER BY NumberOfCustomers DESC LIMIT 5;","Both queries count the customers per city, group by city, order by the count in descending order, and limit the results to the top 5. The queries are functionally equivalent.",both
What was the average discount applied to orders in 2023?,SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31',"```sql
SELECT AVG([Order Details].Discount) AS average_discount 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
```",Both queries calculate the average discount applied to orders in 2023 by joining 'Order Details' and 'orders' on 'OrderID' and filtering by 'OrderDate'. The difference in alias names ('average_discount' vs. 'avg_discount') does not affect the results.,SELECT AVG([Order Details].Discount) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023,"Both queries compute the average discount for orders in 2023. The difference is in how the date range is specified, but they effectively filter the same records.",both
Which suppliers are responsible for the highest sales volume?,"SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS supplier_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY supplier_sales DESC","```sql
SELECT products.SupplierID, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS total_sales_volume 
FROM [Order Details] 
JOIN products ON [Order Details].ProductID = products.ProductID 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
GROUP BY products.SupplierID 
ORDER BY total_sales_volume DESC;
```","The generated query selects SupplierID instead of CompanyName, thus not directly answering the user's question which asks for supplier names.","SELECT products.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID ORDER BY TotalSales DESC;","The generated query only lists SupplierID and does not join with the suppliers table to provide the company names, unlike the ground truth query.",None
Which city has the highest number of suppliers?,"SELECT City, COUNT(SupplierID) AS NumSuppliers FROM suppliers GROUP BY City ORDER BY NumSuppliers DESC LIMIT 1;","```sql
SELECT City, COUNT(*) AS SupplierCount
FROM suppliers
GROUP BY City
ORDER BY SupplierCount DESC
LIMIT 1;
```",Both queries count the number of suppliers per city and order the results in descending order to find the city with the highest count. The difference in column alias 'SupplierCount' vs 'NumSuppliers' and counting columns 'SupplierID' vs '*' do not affect the result as long as there are no null values in 'SupplierID'.,"SELECT City, COUNT(*) FROM suppliers GROUP BY City ORDER BY COUNT(*) DESC LIMIT 1","Both queries count the number of suppliers in each city and return the city with the highest number of suppliers. Although one query uses COUNT(*) and the other uses COUNT(SupplierID), they effectively yield the same result assuming SupplierID is not null.",both
What are the top three categories in terms of product performance?,"SELECT categories.CategoryName, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY product_performance DESC LIMIT 3","```sql
SELECT categories.CategoryID, categories.CategoryName, SUM([Order Details].Quantity) AS total_quantity
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN categories ON products.CategoryID = categories.CategoryID
GROUP BY categories.CategoryID, categories.CategoryName
ORDER BY total_quantity DESC
LIMIT 3;
```","Both queries compute total quantities of products sold per category, order by this sum, and then limit the result to the top three categories. The inclusion of 'CategoryID' in the generated query does not affect the outcome.","SELECT c.CategoryName, SUM(od.Quantity) FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryName ORDER BY SUM(od.Quantity) DESC LIMIT 3;","The generated query uses LIMIT, which is not standard ANSI SQL. It should use FETCH FIRST 3 ROWS ONLY or similar. Otherwise, the logic matches the ground truth query.",Base
How many orders were delivered on time each month?,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, COUNT(*) AS OnTimeOrders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
    COUNT(OrderID) AS OnTimeDeliveries
FROM 
    orders
WHERE 
    ShippedDate <= RequiredDate
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries achieve the same result by counting the orders delivered on time monthly. They use the same logic, conditions, and grouping.","SELECT DATE_TRUNC('month', ShippedDate) AS Month, COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY Month;","The generated query uses DATE_TRUNC on ShippedDate, while the ground truth uses DATE_FORMAT on OrderDate. This means they group by different dates.",Base
What are the top three customers with the fastest average order fulfillment time?,"SELECT CustomerID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY CustomerID ORDER BY AvgFulfillmentTime ASC LIMIT 3;","```sql
SELECT CustomerID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime
FROM orders
GROUP BY CustomerID
ORDER BY AvgFulfillmentTime ASC
LIMIT 3;
```","Both queries perform the same operations: calculating the average fulfillment time per customer, ordering the results in ascending order, and limiting to the top three.","SELECT c.CustomerID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgFulfillmentTime FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY AvgFulfillmentTime ASC LIMIT 3;","Both queries calculate the average fulfillment time per customer and order by the fastest times, limiting the results to the top three. The inclusion of the JOIN in the generated query doesn't affect the outcome as it correctly joins customers with their orders.",both
Which products have the highest number of unique customer orders?,"SELECT p.ProductID, COUNT(DISTINCT od.OrderID) AS UniqueOrders FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY UniqueOrders DESC;","```sql
SELECT p.ProductID, p.ProductName, COUNT(DISTINCT od.OrderID) AS UniqueCustomerOrders
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY UniqueCustomerOrders DESC;
```",Both queries count the number of unique customer orders per product and order the results in descending order. The presence of ProductName in the Generated SQL Query does not affect the overall result.,"SELECT ProductID, COUNT(DISTINCT OrderID) AS UniqueOrders FROM [Order Details] GROUP BY ProductID ORDER BY UniqueOrders DESC;","Both queries count the distinct number of orders for each product and sort the results by this count in descending order, addressing the user's question accurately. The ground truth query includes a join with the products table, but it does not change the counting logic.",both
Which employee handled the highest number of orders?,"SELECT EmployeeID, COUNT(OrderID) AS NumOrders FROM orders GROUP BY EmployeeID ORDER BY NumOrders DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount 
FROM orders 
GROUP BY EmployeeID 
ORDER BY OrderCount DESC 
LIMIT 1;
```","Both queries group orders by EmployeeID and count the number of orders, ordering by the count in descending order, and returning only the top result.","SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;","Both queries perform the same operations: counting orders per employee, sorting by the count in descending order, and limiting the result to 1. The column alias difference does not affect the result.",both
What is the percentage of orders delivered before the required date for the last three months?,"SELECT 100 * COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN orders.OrderID END) / COUNT(orders.OrderID) AS on_time_rate FROM orders WHERE orders.OrderDate BETWEEN DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' AND CURRENT_DATE","```sql
SELECT 
    (COUNT(OrderID) FILTER (WHERE ShippedDate < RequiredDate) * 100.0 / COUNT(OrderID)) AS percentage_delivered_before_required
FROM 
    orders
WHERE 
    OrderDate >= DATEADD(month, -3, GETDATE())
```","The generated query uses GETDATE() and DATEADD, assuming a current date calculation method which might behave differently from the Ground Truth that utilizes CURRENT_DATE and DATE_TRUNC. The Ground Truth query also considers delivery on the exact required date, while the generated query counts orders only if delivered before the required date. Additionally, the date range calculation for the last three months differs.","SELECT (COUNT(CASE WHEN OrderDate <= RequiredDate THEN 1 END) / COUNT(OrderID) * 100.0) AS on_time_delivery_rate FROM orders WHERE OrderDate >= DATEADD(month, -3, CURRENT_DATE);",The generated query uses OrderDate instead of ShippedDate and DATEADD instead of the date range specified in the ground truth for the last three months.,None
What is the total sales revenue from each supplier?,"SELECT p.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;","```sql
SELECT s.SupplierID, s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY s.SupplierID, s.CompanyName
```",Both queries calculate total sales revenue per supplier by aggregating order details linked via products. The generated query includes additional supplier details but this does not affect the calculated totals.,"SELECT SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY SupplierID;","Both queries calculate the total sales revenue by multiplying UnitPrice, Quantity, and the discount factor for each order detail, and then summing per SupplierID. The join condition and logic are consistent between the two queries.",both
How many orders were shipped using the fastest shipper in 2023?,"SELECT shippers.CompanyName, COUNT(orders.OrderID) AS total_orders FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.ShippedDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY shippers.CompanyName ORDER BY MIN(DATEDIFF(orders.ShippedDate, orders.OrderDate)) ASC LIMIT 1","```sql
SELECT COUNT(orders.OrderID) AS number_of_orders
FROM orders
JOIN shippers ON orders.ShipVia = shippers.ShipperID
WHERE shippers.ShipperID = (
    SELECT ShipperID
    FROM shippers
    ORDER BY (SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) FROM orders WHERE orders.ShipVia = shippers.ShipperID) ASC
    LIMIT 1
) AND YEAR(orders.ShippedDate) = 2023;
```","The generated query focuses on identifying the fastest shipper by computing an average shipping time per shipper. It counts orders for this shipper within 2023. In contrast, the ground truth query calculates the total orders per shipper for 2023 and identifies the fastest shipper by using the minimum shipping duration, not an average, and then finding the shipper with the minimum value. The methods for determining the 'fastest' differ between the two queries, leading to potentially different results.",SELECT COUNT(o.OrderID) AS FastestShipperOrders FROM orders o WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND o.ShipVia = (SELECT ShipVia FROM orders o2 GROUP BY ShipVia ORDER BY COUNT(o2.OrderID) DESC LIMIT 1);,"The generated SQL query counts orders using the most frequent shipper, not the fastest one by shipping speed. The ground truth query considers the actual shipping speed (difference between order and shipped date) to determine the fastest shipper.",None
Which suppliers supply products that have never been ordered?,"SELECT s.SupplierID, s.CompanyName FROM suppliers s LEFT JOIN products p ON s.SupplierID = p.SupplierID LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL AND p.ProductID IS NOT NULL;","```sql
SELECT s.SupplierID, s.CompanyName
FROM suppliers s
LEFT JOIN products p ON s.SupplierID = p.SupplierID
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.OrderID IS NULL;
```","The generated SQL query does not check if the product itself exists, whereas the ground truth query includes 'p.ProductID IS NOT NULL' to ensure this.",SELECT SupplierID FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,The generated query only returns SupplierIDs and doesn't check if the products were supplied by multiple suppliers. It lacks the comprehensive joins and NULL check required to confirm that products were not ordered.,None
What is the difference in stock levels for products from last month to this month?,"SELECT p.ProductID, p.ProductName, (p.UnitsInStock - COALESCE(l.UnitsInStock, 0)) AS StockDifference FROM products p LEFT JOIN (SELECT ProductID, UnitsInStock FROM products WHERE OrderDate = '2023-08-01') AS l ON p.ProductID = l.ProductID WHERE OrderDate = '2023-09-01';","```sql
SELECT 
    p.ProductID,
    p.ProductName,
    (COALESCE(current_month.UnitsInStock, 0) - COALESCE(previous_month.UnitsInStock, 0)) AS StockDifference
FROM 
    products p
LEFT JOIN 
    (SELECT 
         ProductID, 
         SUM(UnitsInStock) AS UnitsInStock
     FROM 
         products
     WHERE 
         MONTH(Date) = MONTH(CURRENT_DATE) AND YEAR(Date) = YEAR(CURRENT_DATE)
     GROUP BY 
         ProductID) current_month ON p.ProductID = current_month.ProductID
LEFT JOIN 
    (SELECT 
         ProductID, 
         SUM(UnitsInStock) AS UnitsInStock
     FROM 
         products
     WHERE 
         MONTH(Date) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(Date) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH)
     GROUP BY 
         ProductID) previous_month ON p.ProductID = previous_month.ProductID;
```","The generated SQL query calculates the stock difference for the entire months, while the ground truth query compares stock levels on specific days of different months.","SELECT p.ProductID, (p.UnitsInStock - p.UnitsOnOrder) AS CurrentStock, ((p.UnitsInStock - p.UnitsOnOrder) - LAG(p.UnitsInStock - p.UnitsOnOrder) OVER (PARTITION BY p.ProductID ORDER BY p.ProductID)) AS StockChange FROM products p;","The generated query uses LAG function but lacks a timeframe constraint for monthly comparison, whereas the ground truth query compares stock levels specifically between two given dates.",None
What are the top three cities by number of orders shipped?,"SELECT o.ShipCity, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipCity ORDER BY OrderCount DESC LIMIT 3;","```sql
SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY ShipCity
ORDER BY NumberOfOrders DESC
LIMIT 3;
```","Both queries group by ShipCity and count OrderID, ordering by the count in descending order, and limit the results to the top three, thus producing the same outcome.","SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 3;","Both queries group by ShipCity, count OrderIDs, and limit the result to the top three cities by order count, thus yielding the same result.",both
What is the total value of the current inventory for each category?,"SELECT CategoryID, SUM(UnitsInStock * UnitPrice) AS TotalValue FROM products GROUP BY CategoryID;","```sql
SELECT 
    p.CategoryID,
    SUM(p.UnitsInStock * p.UnitPrice) AS TotalInventoryValue
FROM 
    products p
WHERE 
    p.Discontinued = 0
GROUP BY 
    p.CategoryID;
```","The generated query filters out discontinued products, while the ground truth query does not. This could result in different totals for each category.","SELECT p.CategoryID, SUM(p.UnitsInStock * p.UnitPrice) AS TotalInventoryValue FROM products p GROUP BY p.CategoryID;","Both queries calculate the total inventory value for each category by multiplying units in stock by unit price and summing the results, grouped by CategoryID.",FT
Which employee had the highest total sales this year?,"SELECT e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY e.FirstName, e.LastName ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE)
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 1;
```",Both queries calculate the highest total sales for an employee this year and return the correct result. The differences in field selection and function (CURRENT_DATE vs CURDATE) do not affect the outcome.,"SELECT o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY o.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","The generated query returns the EmployeeID of the top salesperson, while the ground truth query returns the employee's FirstName and LastName. The output formats differ.",Base
What is the total freight cost by shipping country?,"SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;","```sql
SELECT ShipCountry, SUM(Freight) AS TotalFreightCost
FROM orders
GROUP BY ShipCountry;
```","Both queries calculate the total freight cost grouped by shipping country, differing only in the alias name for the summed column, which does not affect the correctness of the result.","SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;","Both queries calculate the total freight cost by shipping country, differing only in the alias used for the sum, which does not affect the result.",both
Which employee had the highest average order value in Q1 2023?,"SELECT employees.FirstName, employees.LastName, AVG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID)) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY employees.EmployeeID ORDER BY avg_order_value DESC LIMIT 1","```sql
SELECT employees.EmployeeID, AVG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) AS avg_order_value
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
JOIN employees ON orders.EmployeeID = employees.EmployeeID
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'
GROUP BY employees.EmployeeID
ORDER BY avg_order_value DESC
LIMIT 1
```","The generated query calculates AVG(SUM(...)) which is incorrect SQL syntax. Additionally, it lacks the division by the count of distinct orders for accurate average calculation.","SELECT orders.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY orders.EmployeeID ORDER BY avg_order_value DESC LIMIT 1","The generated query calculates the average order value by dividing the sum by the number of distinct orders, whereas the ground truth query attempts to use AVG and SUM functions incorrectly. Additionally, the ground truth query retrieves employee names, while the generated query only retrieves the EmployeeID.",None
How many employees have sales revenue above the median?,"WITH Sales AS (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID), MedianSales AS (SELECT TotalSales FROM Sales ORDER BY TotalSales LIMIT 1 OFFSET (SELECT COUNT(*) FROM Sales) / 2) SELECT COUNT(*) FROM Sales WHERE TotalSales > (SELECT * FROM MedianSales);","```sql
WITH EmployeeSales AS (
    SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
    FROM employees e
    JOIN orders o ON e.EmployeeID = o.EmployeeID
    JOIN [Order Details] od ON o.OrderID = od.OrderID
    GROUP BY e.EmployeeID
),
SalesMedian AS (
    SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TotalSales) AS MedianSales
    FROM EmployeeSales
)
SELECT COUNT(*) AS EmployeesAboveMedian
FROM EmployeeSales es
JOIN SalesMedian sm ON es.TotalSales > sm.MedianSales;
```","Both SQL queries determine the number of employees with sales revenue above the median. The generated query uses PERCENTILE_CONT(0.5) to calculate the median, while the ground truth query uses an OFFSET approach. Both methods yield the median, and the logic to count employees above this value matches.",SELECT COUNT(DISTINCT orders.EmployeeID) AS num_employees FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.EmployeeID HAVING SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) > (SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY sales_per_emp) FROM (SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS sales_per_emp FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY o.EmployeeID) AS employee_sales);,"Both queries correctly count employees with total sales exceeding the median sales. The generated query uses PERCENTILE_CONT to find the median, while the ground truth query uses a subquery with LIMIT and OFFSET. Despite different methods, they target the same result.",both
List the countries with the highest number of orders placed this year.,"SELECT customers.Country, COUNT(orders.OrderID) AS number_of_orders FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY customers.Country ORDER BY number_of_orders DESC","```sql
SELECT ShipCountry, COUNT(OrderID) AS number_of_orders 
FROM orders 
WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) 
GROUP BY ShipCountry 
ORDER BY number_of_orders DESC;
```","The generated query uses 'ShipCountry' from the 'orders' table, while the ground truth query uses 'Country' from the 'customers' table, which may yield different results depending on the data.","SELECT ShipCountry, COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY ShipCountry ORDER BY OrderCount DESC;","The generated query uses ShipCountry from orders, while the ground truth joins with customers to get Country. If ShipCountry differs from customers.Country or there's data in customers with no orders, results may vary.",None
Identify products with zero units in stock but pending orders.,SELECT p.ProductName FROM products p WHERE p.UnitsInStock = 0 AND p.UnitsOnOrder > 0;,"```sql
SELECT p.ProductID, p.ProductName
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE p.UnitsInStock = 0 AND od.Quantity > 0;
```","The generated query checks for products with orders only by looking at order details' 'Quantity', but not considering if there are pending orders recorded as 'UnitsOnOrder' in the products table. The ground truth query checks 'UnitsOnOrder' to determine pending orders.","SELECT ProductID, ProductName FROM products WHERE UnitsInStock = 0 AND UnitsOnOrder > 0;","The ground truth only selects ProductName, while the generated query selects both ProductID and ProductName.",None
Which category of products has the highest average unit price?,"SELECT CategoryID, AVG(UnitPrice) AS AverageUnitPrice FROM products GROUP BY CategoryID ORDER BY AverageUnitPrice DESC LIMIT 1;","```sql
SELECT CategoryID, AVG(UnitPrice) AS AverageUnitPrice
FROM products
GROUP BY CategoryID
ORDER BY AverageUnitPrice DESC
LIMIT 1;
```","The generated SQL query correctly identifies the category with the highest average unit price by grouping products by CategoryID, calculating the average unit price, ordering in descending order, and limiting the result to the top entry. The queries functionally achieve the same result as the ground truth query.","SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID ORDER BY AveragePrice DESC LIMIT 1;",Both queries calculate the average unit price of products for each category and select the category with the highest average unit price. They differ only in the alias name but yield the same result.,both
Determine the average discount applied per order.,"SELECT OrderID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY OrderID;","```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details]
GROUP BY OrderID;
```","The generated query calculates an average discount but fails to include the OrderID in the SELECT clause, resulting in a different output structure compared to the ground truth query which includes OrderID and averages the discount per order.",SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];,"The generated query calculates the overall average discount across all orders, while the ground truth query calculates the average discount per individual order.",None
Find the top 3 products in terms of quantity sold.,"SELECT ProductID, SUM(Quantity) AS QuantitySold FROM [Order Details] GROUP BY ProductID ORDER BY QuantitySold DESC LIMIT 3;","```sql
SELECT OrderDetails.ProductID, SUM(OrderDetails.Quantity) AS TotalQuantity
FROM [Order Details] AS OrderDetails
GROUP BY OrderDetails.ProductID
ORDER BY TotalQuantity DESC
LIMIT 3;
```","Both queries select ProductID and calculate the total quantity sold, ordering by the sum in descending order and limiting the results to the top 3 products.","SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 3;","Both queries correctly calculate the sum of quantities for each product, group by ProductID, and order the results in descending order to fetch the top 3 products. The difference in alias naming does not affect the result.",both
What is the average discount provided on orders by product category?,"SELECT categories.CategoryName, AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName","```sql
SELECT categories.CategoryID, AVG([Order Details].Discount) AS average_discount
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN categories ON products.CategoryID = categories.CategoryID
GROUP BY categories.CategoryID
```","The generated query groups by CategoryID, whereas the ground truth groups by CategoryName, which might affect the clarity of the output. Both queries could yield correct average discounts but with different columns displayed.","SELECT categories.CategoryName, AVG(od.Discount) AS AvgDiscount FROM products JOIN [Order Details] od ON products.ProductID = od.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName;","Both queries calculate the average discount on orders by product category. They join the same tables and group by category name, yielding the same results.",FT
Which customer placed the highest value order last year?,"SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY o.CustomerID ORDER BY OrderValue DESC LIMIT 1;","```sql
SELECT CustomerID, 
       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) - 1
GROUP BY CustomerID
ORDER BY TotalOrderValue DESC
LIMIT 1;
```",Both queries correctly calculate the highest value order by summing the order values for each customer from last year and ordering the result in descending order to get the top value.,"SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY o.CustomerID ORDER BY OrderValue DESC LIMIT 1;",Both queries calculate the order value per customer for last year and return the customer with the highest total order value. The difference in year extraction methods does not affect the result.,both
What is the on-time delivery rate each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month ORDER BY Month;","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month,
    COUNT(orders.OrderID) * 1.0 / COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) AS On_time_Delivery_Rate
FROM 
    orders
GROUP BY 
    Month
```",The generated SQL query has the COUNT logic reversed; it should divide the count of on-time deliveries by the total orders to calculate the rate.,"SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN orders.OrderID END) * 1.0 / COUNT(orders.OrderID) AS on_time_rate, DATE_TRUNC('month', orders.OrderDate) AS month FROM orders GROUP BY month;",Both queries calculate the on-time delivery rate per month by dividing the count of on-time orders by the total number of orders. The differences in capitalization and the order of clauses do not affect the result.,FT
What was the total sales revenue for the month of January 2023?,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31',"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31'
```","Both queries are syntactically identical and will yield the same results, calculating the total sales revenue for January 2023.",SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS january_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31',Both queries compute the total sales revenue for January 2023 using the same logic and conditions; only the alias for the result differs.,both
Which region has the lowest on-time delivery rate?,"SELECT ShipRegion, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(*) AS OnTimeDeliveryRate FROM orders GROUP BY ShipRegion ORDER BY OnTimeDeliveryRate ASC LIMIT 1;","```sql
SELECT ShipRegion, 
       COUNT(OrderID) AS TotalOrders,
       COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveries,
       COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate
FROM orders
GROUP BY ShipRegion
ORDER BY OnTimeDeliveryRate ASC
LIMIT 1;
```",Both queries calculate the on-time delivery rate per region and order the results to find the region with the lowest rate. They yield the same result.,"SELECT ShipRegion, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipRegion ORDER BY OnTimeRate ASC LIMIT 1;","Both queries compute the on-time delivery rate by comparing ShippedDate to RequiredDate and dividing by the count of orders per region. The difference in COUNT(OrderID) and COUNT(*) does not affect the result as they count the same in this context, so both will yield the same outcome when ordered by the rate ascending.",both
Determine the most frequent shipping method used.,"SELECT ShipVia, COUNT(*) AS frequency FROM orders GROUP BY ShipVia ORDER BY frequency DESC;","```sql
SELECT ShipVia, COUNT(*) as Frequency
FROM orders
GROUP BY ShipVia
ORDER BY Frequency DESC
LIMIT 1;
```","The generated query includes a LIMIT 1 clause to ensure only the most frequent shipping method is returned, whereas the ground truth query does not include this, potentially returning more than one row.","SELECT ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;","The generated query correctly identifies the most frequently used shipping method by counting occurrences and ordering them in descending order, limiting the result to the top one. The ground truth query does the same but doesn't limit to the top result. Both determine the most frequent shipping method.",FT
Calculate the percentage of orders shipped on time.,SELECT (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID)) AS OnTimePercentage FROM orders;,"```sql
SELECT 
    (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*)) AS PercentageOfOrdersShippedOnTime
FROM 
    orders;
```","Both queries calculate the percentage of orders shipped on time using the same logic. They differ only in using COUNT(*) versus COUNT(OrderID), but given the context, if OrderID is the primary key, they yield the same result.",SELECT COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders;,Both queries calculate the percentage of orders shipped on or before the required date by dividing the count of such orders by the total count of orders and multiplying by 100. The queries will yield the same result.,both
Identify employees who have not made any sales in the last quarter.,"SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) WHERE o.OrderID IS NULL;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName
FROM employees e
LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND o.OrderDate >= DATEADD(quarter, -1, GETDATE())
LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE od.OrderID IS NULL;
```","The generated query joins with 'Order Details' and checks for NULL 'OrderID' from this join, whereas the ground truth query checks for NULL 'OrderID' from the 'orders' table only. The generated query could produce incorrect results due to the additional join.","SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) WHERE o.OrderID IS NULL;","The generated query only returns EmployeeID, while the ground truth query also includes the Employee's first and last names.",None
What are the top three countries by total sales?,"SELECT o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CountrySales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry ORDER BY CountrySales DESC LIMIT 3","```sql
SELECT ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY ShipCountry
ORDER BY TotalSales DESC
LIMIT 3;
```","Both queries calculate total sales by ShipCountry, group and order the results, and limit to top three. Differences in alias names don't affect the outcome.","SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipCountry ORDER BY total_sales DESC LIMIT 3","Both queries calculate the sum of sales for each country, group by ShipCountry, and order by total sales in descending order, while limiting results to the top three countries. Despite minor naming differences, they are functionally equivalent.",both
What is the average product unit price by category?,"SELECT c.CategoryID, AVG(p.UnitPrice) AS AveragePrice FROM categories c JOIN products p ON c.CategoryID = p.CategoryID GROUP BY c.CategoryID;","```sql
SELECT products.CategoryID, AVG(products.UnitPrice) AS AverageUnitPrice
FROM products
GROUP BY products.CategoryID;
```",Both queries calculate the average unit price of products grouped by CategoryID. The presence of the JOIN in the ground truth is not necessary if all products have a valid CategoryID.,"SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID;",Both queries calculate the average unit price of products grouped by category. They will yield the same results as they both group by CategoryID and compute the average of UnitPrice.,both
What is the most common ship region for orders?,"SELECT orders.ShipRegion, COUNT(orders.OrderID) AS RegionCount FROM orders GROUP BY orders.ShipRegion ORDER BY RegionCount DESC LIMIT 1;","```sql
SELECT ShipRegion, COUNT(*) AS OrderCount
FROM orders
GROUP BY ShipRegion
ORDER BY OrderCount DESC
LIMIT 1;
```",Both queries count the number of orders per ShipRegion and return the most common one.,"SELECT ShipRegion, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipRegion ORDER BY OrderCount DESC LIMIT 1;",Both queries select the ShipRegion and count the OrderID to determine the most common region for orders. The differences in aliasing do not affect the result.,both
What is the distribution of employee titles within the company?,"SELECT Title, COUNT(*) AS Count FROM employees GROUP BY Title;","```sql
SELECT Title, COUNT(*) AS TitleCount
FROM employees
GROUP BY Title;
```","Both queries count the number of employees per title and group the results by Title, despite different alias names for the count.","SELECT Title, COUNT(*) AS TitleCount FROM employees GROUP BY Title;","Both queries correctly group the results by the employee title and count the occurrences, thus returning the distribution of employee titles. The only difference is the alias for the count column, which does not affect the result.",both
How many orders include products that are currently discontinued?,SELECT COUNT(DISTINCT OrderID) AS OrdersWithDiscontinued FROM [Order Details] WHERE ProductID IN (SELECT ProductID FROM products WHERE Discontinued = 1);,"```sql
SELECT COUNT(DISTINCT od.OrderID) AS DiscontinuedOrdersCount
FROM [Order Details] od
JOIN products p ON od.ProductID = p.ProductID
WHERE p.Discontinued = 1;
```","Both queries count distinct OrderIDs from the 'Order Details' table where the ProductID corresponds to a product that is currently discontinued. They essentially perform the same filtering and aggregation, just in different ways.",SELECT COUNT(DISTINCT o.OrderID) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 1;,Both queries accurately calculate the number of unique orders that include discontinued products by counting distinct OrderIDs linked to products where Discontinued = 1.,both
Identify suppliers with the most products below the reorder level.,"SELECT SupplierID, COUNT(*) AS ReorderCount FROM products WHERE UnitsInStock <= ReorderLevel GROUP BY SupplierID ORDER BY ReorderCount DESC;","```sql
SELECT p.SupplierID, COUNT(p.ProductID) AS ProductsBelowReorderLevel
FROM products p
WHERE p.UnitsInStock < p.ReorderLevel
GROUP BY p.SupplierID
ORDER BY ProductsBelowReorderLevel DESC;
```",The generated query uses '<' while the ground truth uses '<=' for the comparison of UnitsInStock and ReorderLevel.,"SELECT SupplierID, COUNT(*) AS ProductsBelowReorder FROM products WHERE UnitsInStock <= ReorderLevel GROUP BY SupplierID ORDER BY ProductsBelowReorder DESC;","Both queries effectively count products for each SupplierID where UnitsInStock is less than or equal to ReorderLevel, and order the results in descending order by the count.",FT
Find the average inventory level for products in each category.,"SELECT CategoryID, AVG(UnitsInStock) AS AverageInventory FROM products GROUP BY CategoryID;","```sql
SELECT 
    p.CategoryID, 
    AVG(p.UnitsInStock) AS AverageInventoryLevel
FROM 
    products p
GROUP BY 
    p.CategoryID;
```","Both queries calculate the average inventory level for products in each category using the AVG function on the UnitsInStock column, grouped by CategoryID. The differences in table aliasing do not affect the output.","SELECT CategoryID, AVG(UnitsInStock) AS AverageInventory FROM products GROUP BY CategoryID;","The generated SQL query matches the ground truth query both in structure and intent, and it will yield the same results, calculating the average inventory level for products in each category.",both
Who are the top 5 customers by revenue and what is their total spending?,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_spending FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY total_spending DESC LIMIT 5","```sql
SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_spending 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN customers ON orders.CustomerID = customers.CustomerID 
GROUP BY customers.CustomerID 
ORDER BY total_spending DESC 
LIMIT 5;
```","The generated SQL query and the ground truth query are functionally equivalent, both correctly calculate total spending per customer and order the results to find the top 5 customers by revenue.","SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSpending FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalSpending DESC LIMIT 5;","Both queries calculate total spending per customer by multiplying unit price, quantity, and discount for each order detail. They group by CustomerID, order by total spending in descending order, and limit the results to the top 5. The structure and JOIN logic are equivalent, ensuring identical results.",both
Which products have a reorder level that has been reached?,"SELECT ProductID, ProductName FROM products WHERE UnitsInStock <= ReorderLevel;","```sql
SELECT ProductName, ReorderLevel, UnitsInStock 
FROM products 
WHERE UnitsInStock <= ReorderLevel;
```","The generated SQL query selects 'ProductName', 'ReorderLevel', and 'UnitsInStock', whereas the ground truth query selects 'ProductID' and 'ProductName'. The results include different columns.",SELECT products.ProductName FROM products WHERE products.UnitsInStock <= products.ReorderLevel,"The generated query only selects the ProductName, while the ground truth also selects ProductID. The results will differ in the columns selected.",None
Determine the most common shipping region for orders exceeding $500.,SELECT ShipRegion FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion HAVING SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) > 500 ORDER BY COUNT(orders.OrderID) DESC LIMIT 1,"```sql
SELECT ShipRegion, COUNT(*) AS OrderCount
FROM orders
WHERE Freight > 500
GROUP BY ShipRegion
ORDER BY OrderCount DESC
LIMIT 1;
```","The generated query checks for orders with Freight over $500, while the ground truth query calculates total order value exceeding $500 using unit prices, quantities, and discounts. These are different criteria for exceeding $500.","SELECT ShipRegion, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderID IN (SELECT OrderID FROM [Order Details] GROUP BY OrderID HAVING SUM(UnitPrice * Quantity * (1 - Discount)) > 500) GROUP BY ShipRegion ORDER BY OrderCount DESC LIMIT 1;",Both queries determine the most common shipping region for orders exceeding $500 by calculating the total order value. They group by ShipRegion and order by the count correctly. The approaches differ slightly in syntax but yield the same result.,FT
Which customer placed the most orders?,"SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT CustomerID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY CustomerID
ORDER BY OrderCount DESC
LIMIT 1;
```","The generated SQL query is functionally identical to the ground truth query. It correctly finds the customer with the most orders by counting the number of orders per customer and ordering the results in descending order, then limiting the output to the top result.","SELECT customerID, COUNT(orderID) AS total_orders FROM orders GROUP BY customerID ORDER BY total_orders DESC LIMIT 1","Both queries perform the same actions: counting orders per customer, ordering the results in descending order of order count, and retrieving the top customer with the most orders. Differences in identifiers' capitalization do not affect functionality.",both
What is the average order quantity for orders placed in 2023?,SELECT AVG(Quantity) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(OrderDate) = 2023;,"```sql
SELECT AVG([Order Details].Quantity) AS AverageOrderQuantity
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE YEAR(orders.OrderDate) = 2023;
```",Both queries compute the average order quantity for orders placed in 2023 by joining the 'orders' and '[Order Details]' tables. The differences in syntax do not affect the result.,SELECT AVG([Order Details].Quantity) AS average_order_quantity FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023,Both queries correctly calculate the average order quantity for orders placed in 2023 and should yield the same results.,both
Which country receives the most shipments?,"SELECT ShipCountry, COUNT(OrderID) AS ShipmentCount FROM orders GROUP BY ShipCountry ORDER BY ShipmentCount DESC LIMIT 1;","```sql
SELECT ShipCountry, COUNT(*) AS ShipmentCount
FROM orders
GROUP BY ShipCountry
ORDER BY ShipmentCount DESC
LIMIT 1;
```",Both queries count the number of orders grouped by ShipCountry and limit the result to the country with the highest count. COUNT(*) and COUNT(OrderID) will yield the same result since OrderID is non-null in this context.,"SELECT ShipCountry, COUNT(OrderID) AS ShipmentCount FROM orders GROUP BY ShipCountry ORDER BY ShipmentCount DESC LIMIT 1;","The generated SQL query is identical to the ground truth query, and both accurately determine which country receives the most shipments by counting `OrderID` per `ShipCountry` and ordering the results to return the top result.",both
What is the product performance metric for the last six months?,"SELECT p.ProductID, SUM(od.Quantity) AS PerformanceMetric FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= DATEADD(month, -6, CURRENT_DATE) GROUP BY p.ProductID;","```sql
SELECT products.ProductID, SUM([Order Details].Quantity) AS TotalQuantity
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
WHERE [Order Details].OrderID IN (
    SELECT OrderID 
    FROM orders 
    WHERE OrderDate >= DATEADD(month, -6, GETDATE())
)
GROUP BY products.ProductID
```","The Generated SQL Query filters orders using a subquery on orders.OrderID, while the Ground Truth Query filters directly on od.OrderDate. The Generated Query might not accurately filter records for the last six months if OrderDate is not in the [Order Details] table.","SELECT P.ProductName, SUM(D.Quantity) AS TotalSales FROM [Order Details] D JOIN products P ON P.ProductID = D.ProductID WHERE D.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY P.ProductID ORDER BY TotalSales DESC;","The generated query uses DATE_SUB with CURDATE() for date calculation, whereas the ground truth uses DATEADD with CURRENT_DATE. Depending on the SQL dialect, these may yield different results. Additionally, the generated query includes 'ProductName' which isn't present in the ground truth.",None
Find orders that have never been shipped.,SELECT OrderID FROM orders WHERE ShippedDate IS NULL;,"```sql
SELECT *
FROM orders
WHERE ShippedDate IS NULL;
```","The generated SQL query returns all columns from the 'orders' table, while the ground truth query only returns the 'OrderID' column.",SELECT OrderID FROM orders WHERE ShippedDate IS NULL;,"Both queries select OrderID from the orders table where ShippedDate is NULL, thus returning the same result set.",FT
How many orders were shipped via each shipping company?,"SELECT shippers.CompanyName, COUNT(orders.OrderID) AS order_count FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName","```sql
SELECT ShipVia, COUNT(OrderID) AS order_count FROM orders GROUP BY ShipVia
```","The generated query counts orders by ShipVia (assuming it's a shipping method ID), while the ground truth counts orders grouped by the shipping company's name using a join with the shippers table.","SELECT ShipVia, COUNT(OrderID) AS Count FROM orders GROUP BY ShipVia;","The generated query groups by ShipVia, which is a numeric identifier, while the ground truth query joins with the shippers table to group by CompanyName, providing more descriptive results.",None
Which suppliers are located in the same city?,"SELECT City, STRING_AGG(DISTINCT SupplierID, ', ') AS SupplierIDs FROM suppliers GROUP BY City HAVING COUNT(DISTINCT SupplierID) > 1;","```sql
SELECT s1.CompanyName AS Supplier1, s2.CompanyName AS Supplier2, s1.City
FROM suppliers s1
JOIN suppliers s2 ON s1.SupplierID != s2.SupplierID AND s1.City = s2.City;
```","Both queries aim to identify suppliers located in the same city. The generated query returns pairs of companies sharing the same city, while the ground truth identifies cities with more than one distinct supplier. Both result in identifying cities with multiple suppliers, fulfilling the user's request.",SELECT Address FROM suppliers GROUP BY Address HAVING COUNT(DISTINCT City) > 1;,"The generated query checks for addresses with more than one distinct city, while the ground truth query identifies cities with multiple suppliers.",Base
What is the total revenue for products that are not discontinued?,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE products.Discontinued = 0,"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
WHERE products.Discontinued = 0;
```","Both queries calculate the total revenue for products that are not discontinued by multiplying UnitPrice, Quantity, and applying Discount, then summing them up. They join Order Details and products on ProductID and filter for products where Discontinued equals 0, producing identical results.",SELECT SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 0;,"Both queries calculate the total revenue for non-discontinued products by multiplying quantity, unit price, and the discount factor, and summing the results, using a join on ProductID and checking where Discontinued equals 0.",both
What is the average unit price of products supplied by each supplier?,"SELECT p.SupplierID, AVG(p.UnitPrice) AS AverageUnitPrice FROM products p GROUP BY p.SupplierID;","```sql
SELECT SupplierID, AVG(UnitPrice) AS AverageUnitPrice
FROM products
GROUP BY SupplierID;
```","Both queries calculate the average unit price of products for each supplier, using the same aggregation and grouping by SupplierID.","SELECT SupplierID, AVG(UnitPrice) AS AverageUnitPrice FROM products GROUP BY SupplierID;","Both queries select the SupplierID and calculate the average of UnitPrice from the products table, grouping by SupplierID. They are functionally equivalent.",both
What is the product performance comparison between Q1 and Q2 of 2023?,"SELECT TO_CHAR(orders.OrderDate, 'YYYY-Q') AS quarter, products.ProductID, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30' GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-Q'), products.ProductID","```sql
SELECT 
    products.ProductID, 
    SUM(CASE WHEN orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' THEN [Order Details].Quantity ELSE 0 END) AS Q1_Performance,
    SUM(CASE WHEN orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' THEN [Order Details].Quantity ELSE 0 END) AS Q2_Performance
FROM 
    [Order Details] 
JOIN 
    orders ON [Order Details].OrderID = orders.OrderID 
JOIN 
    products ON [Order Details].ProductID = products.ProductID 
GROUP BY 
    products.ProductID
```","The generated SQL query compares Q1 and Q2 performance directly by using separate CASE statements, while the ground truth query groups the data by quarter and does not specifically compare Q1 and Q2 in separate columns.","SELECT products.ProductName, (SUM(CASE WHEN orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' THEN [Order Details].Quantity ELSE 0 END) - SUM(CASE WHEN orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' THEN [Order Details].Quantity ELSE 0 END)) AS performance_comparison FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID","The generated query calculates the difference in quantities between Q1 and Q2 for each product, while the ground truth query summarizes quantities per quarter but doesn't directly compare Q1 and Q2.",None
What is the average unit price of products ordered in the first quarter?,SELECT AVG(od.UnitPrice) AS AvgUnitPrice FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(QUARTER FROM o.OrderDate) = 1;,"```sql
SELECT AVG([Order Details].UnitPrice) AS AverageUnitPrice
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE orders.OrderDate >= '2023-01-01' AND orders.OrderDate < '2023-04-01';
```","The generated query filters using date range for the first quarter, which is correct. However, the ground truth query uses the EXTRACT function to determine the quarter. If the data contains times or is not aligned perfectly with the quarters by date range, the results may differ, especially in edge cases.",SELECT AVG(UnitPrice) AS AveragePrice FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(QUARTER FROM o.OrderDate) = 1;,Both queries calculate the average unit price of products ordered in the first quarter. The difference in the alias for the average does not affect the result.,FT
What is the average discount applied to orders each month?,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, AVG([Order Details].Discount) AS AvgDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month,
    AVG([Order Details].Discount) AS Average_Discount
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    Month
```","Both queries calculate the average discount applied to orders each month using a similar method. They GROUP BY the formatted order date by month and compute the average discount, achieving the same result.","SELECT DATE_TRUNC('month', OrderDate) as Month, AVG(Discount) as AverageDiscount FROM order_details GROUP BY Month;","The generated query only considers the OrderDate from the order_details table without joining to the orders table as in the ground truth. Therefore, it may not accurately reflect the same dataset or the correct monthly aggregation.",Base
Which suppliers are located in 'USA' and how many products do they supply?,"SELECT CompanyName, COUNT(ProductID) FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE Country = 'USA' GROUP BY CompanyName;","```sql
SELECT s.SupplierID, s.CompanyName, COUNT(p.ProductID) AS ProductCount
FROM suppliers s
LEFT JOIN products p ON s.SupplierID = p.SupplierID
WHERE s.Country = 'USA'
GROUP BY s.SupplierID, s.CompanyName;
```",Both queries correctly identify suppliers located in the 'USA' and count the number of products they supply. The use of LEFT JOIN in the generated query correctly includes suppliers with zero products.,"SELECT suppliers.CompanyName, COUNT(products.ProductID) AS product_count FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE suppliers.Country = 'USA' GROUP BY suppliers.CompanyName","Both queries select the company names of suppliers located in 'USA' and count the products they supply. The query structures and aliases vary, but they produce the same result.",both
How many customers exist in each country?,"SELECT Country, COUNT(CustomerID) AS CustomerCount FROM customers GROUP BY Country;","```sql
SELECT Country, COUNT(CustomerID) AS CustomerCount
FROM customers
GROUP BY Country;
```","The generated SQL query and the ground truth query are functionally equivalent. Both queries count the number of customers in each country using the customers table, grouped by the Country column.","SELECT Country, COUNT(*) AS CustomerCount FROM customers GROUP BY Country;","Both queries count the number of customers in each country using either COUNT(*) or COUNT(CustomerID), which are equivalent if CustomerID is not nullable.",both
Which month had the highest on-time delivery rate?,"SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM') ORDER BY OnTimeDeliveryRate DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
       COUNT(OrderID) AS TotalOrders,
       COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveries,
       (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate
FROM orders
GROUP BY Month
ORDER BY OnTimeDeliveryRate DESC
LIMIT 1;
```","Both queries calculate the highest on-time delivery rate by month, grouping by formatted OrderDate and dividing on-time deliveries by total orders to determine the rate. They order results by the on-time delivery rate in descending order and limit to the top result. The specific methods of date formatting differ (DATE_FORMAT vs TO_CHAR), but the logical outcome is the same.","SELECT EXTRACT(MONTH FROM orders.OrderDate) AS Month, (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 1.0 / COUNT(*)) * 100 AS OnTimeRate FROM orders GROUP BY EXTRACT(MONTH FROM orders.OrderDate) ORDER BY OnTimeRate DESC LIMIT 1;","The generated query extracts only the month from OrderDate, while the ground truth considers the entire year and month. This could lead to different results if working across multiple years.",Base
What products have not met their reorder levels in the last month?,"SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.ReorderLevel > p.UnitsInStock AND DATEDIFF(MONTH, od.OrderDate, CURRENT_DATE) = 1;","```sql
SELECT p.ProductID, p.ProductName, p.UnitsInStock, p.ReorderLevel
FROM products p
WHERE p.UnitsInStock < p.ReorderLevel
AND p.Discontinued = 0;
```","The generated query does not consider the order date and checks for discontinued products, while the ground truth query includes orders from the last month.","SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.UnitsInStock > p.ReorderLevel AND (od.OrderID IS NULL OR od.OrderDate < CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY p.ProductID, p.ProductName;",The generated query incorrectly checks if UnitsInStock are greater than ReorderLevel for unmet reorder levels and uses incorrect date logic. It should be checking if ReorderLevel is greater than UnitsInStock and orders within the last month.,None
Which products have the highest sales quantity this month?,"SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m') GROUP BY products.ProductID, products.ProductName ORDER BY TotalQuantity DESC;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE MONTH(od.OrderID) = MONTH(CURRENT_DATE) AND YEAR(od.OrderID) = YEAR(CURRENT_DATE)
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSales DESC
```","The generated SQL query uses MONTH and YEAR on OrderID for date filtering, which implies OrderID is assumed to be a date field, whereas the ground truth uses DATE_FORMAT on OrderDate.","SELECT od.ProductID, SUM(od.Quantity) AS MonthlySales FROM [Order Details] od WHERE od.OrderDate BETWEEN '2023-10-01' AND '2023-10-31' GROUP BY od.ProductID ORDER BY MonthlySales DESC;","The generated query may produce data for October 2023, but the Ground Truth query dynamically calculates the current month. Additionally, the Ground Truth query includes the product name, which isn't in the generated query.",None
Which supplier has the highest total sales for discontinued products?,"SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE products.Discontinued = TRUE GROUP BY suppliers.CompanyName ORDER BY total_sales DESC LIMIT 1","```sql
SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE products.Discontinued = 1
GROUP BY suppliers.SupplierID, suppliers.CompanyName
ORDER BY total_sales DESC
LIMIT 1;
```","Both queries accurately group by supplier and calculate total sales for discontinued products, ordering results to find the highest sales. Differences in column naming and BOOLEAN representation do not affect the result.","SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE products.Discontinued = 1 GROUP BY suppliers.SupplierID, suppliers.CompanyName ORDER BY TotalSales DESC LIMIT 1;","The generated query and the ground truth query both correctly identify the supplier with the highest total sales for discontinued products. The minor difference in syntax does not affect the correctness, as both use equivalent logic and calculations.",both
What is the average time taken to ship an order after it's placed?,"SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgShippingTime FROM orders WHERE orders.ShippedDate IS NOT NULL;","```sql
SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Shipment_Time
FROM orders;
```","The generated query does not account for NULL values in the ShippedDate column, potentially skewing the average.","SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_shipping_time FROM orders WHERE orders.ShippedDate IS NOT NULL","The generated SQL query and the ground truth query are functionally equivalent. They both calculate the average time taken to ship an order by using the DATEDIFF function on the OrderDate and ShippedDate columns, considering only the rows where ShippedDate is not null.",FT
What is the total order count for each product?,"SELECT ProductName, COUNT([Order Details].OrderID) AS OrderCount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalOrderCount
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName;
```","The generated query sums quantities per product, while the ground truth query counts order IDs per product. They measure different metrics: total quantity vs. total orders.","SELECT ProductName, COUNT(od.OrderID) AS TotalOrders FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY ProductName;",Both queries accurately count the total orders per product by joining the 'products' and 'Order Details' tables on 'ProductID' and grouping by 'ProductName'. They are equivalent despite slight differences in alias usage.,FT
What percentage of orders were delivered on or before the required date?,"SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) AS on_time_orders, COUNT(orders.OrderID) AS total_orders, COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / COUNT(orders.OrderID)::float AS on_time_delivery_rate FROM orders","```sql
SELECT (COUNT(orders.OrderID) WHERE orders.ShippedDate <= orders.RequiredDate) * 100.0 / COUNT(orders.OrderID AS on_time_delivery_rate FROM orders
```","The generated SQL query is malformed and missing elements like alias for count expressions, thus won't execute correctly. Also, it lacks the correct computation structure used in the ground truth query to calculate the on-time delivery rate.",SELECT COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders;,"Both queries calculate the percentage of orders delivered on or before the required date. The generated query uses FILTER with COUNT for the condition and divides by the total count, while the ground truth uses CASE within COUNT for the condition and also divides by the total count. They produce the same result.",FT
Calculate the average freight cost for orders shipped to each country.,"SELECT o.ShipCountry, AVG(o.Freight) AS AverageFreight FROM orders o GROUP BY o.ShipCountry;","```sql
SELECT ShipCountry, AVG(Freight) AS AverageFreightCost
FROM orders
GROUP BY ShipCountry;
```",Both queries calculate the average freight cost for orders grouped by the ShipCountry. The differences in aliasing do not affect the result.,"SELECT ShipCountry, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipCountry;","Both queries calculate the average freight cost by grouping the data by ShipCountry, and both should yield the same results despite the use of table aliasing in the ground truth query.",both
How many orders were shipped after the required date?,SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;,"```sql
SELECT COUNT(*) AS OrdersShippedLate
FROM orders
WHERE ShippedDate > RequiredDate;
```",Both queries count the orders where the ShippedDate is after the RequiredDate. The added alias in the generated query does not affect the result.,SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate;,"Both queries accurately count the number of orders with a ShippedDate later than the RequiredDate, despite slight differences in syntax (COUNT(OrderID) vs COUNT(*)).",both
What are the top 5 products with the highest inventory turnover ratio?,"SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(NULLIF(p.UnitsInStock, 0)), 0) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY InventoryTurnover DESC LIMIT 5;","```sql
SELECT TOP 5 p.ProductID, p.ProductName, 
       SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY InventoryTurnoverRatio DESC;
```",The generated query uses 'TOP 5' which is not standard SQL and lacks NULLIF for division. It could cause division by zero errors.,"SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) DESC LIMIT 5;",The generated query does not use NULLIF properly to handle division by zero and misses calculating turnover correctly by only using AVG(p.UnitsInStock) instead of handling zero stocks.,None
How many products require reordering per supplier?,"SELECT suppliers.CompanyName, SUM(CASE WHEN products.UnitsInStock < products.ReorderLevel THEN 1 ELSE 0 END) AS ReorderCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;","```sql
SELECT 
    suppliers.CompanyName,
    COUNT(products.ProductID) AS ProductsRequiringReorder
FROM 
    suppliers
JOIN 
    products ON suppliers.SupplierID = products.SupplierID
WHERE 
    products.UnitsInStock <= products.ReorderLevel
GROUP BY 
    suppliers.SupplierID;
```","Both queries effectively count the number of products requiring reorder per supplier, using a join between suppliers and products. The generated query uses a WHERE clause with a COUNT and the ground truth uses CASE with a SUM, but both yield the correct count.","SELECT suppliers.CompanyName, COUNT(products.ProductID) AS ReorderProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsInStock <= products.ReorderLevel GROUP BY suppliers.CompanyName;","Both queries count the number of products per supplier that need reordering, using different methods. The generated query uses a WHERE clause to filter, while the ground truth uses a CASE statement to count conditionally, but both yield the same result.",both
What is the total sales for employees based on the city they work in?,"SELECT employees.City, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CitySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.City","```sql
SELECT e.City, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.City;
```","Both queries compute the total sales per city by summing the product of UnitPrice, Quantity, and the discount factor for each employee's orders. The structure and logic align, ensuring identical results.","SELECT employees.City, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.City;",Both queries calculate the total sales for employees based on the city they work in by aggregating the sales data and grouping by the city. The difference in alias ('TotalSales' vs 'CitySales') does not affect the correctness of the result.,both
Name suppliers who have never been involved in any orders.,SELECT suppliers.CompanyName FROM suppliers WHERE suppliers.SupplierID NOT IN (SELECT DISTINCT products.SupplierID FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID);,"```sql
SELECT CompanyName 
FROM suppliers 
WHERE SupplierID NOT IN (SELECT DISTINCT SupplierID FROM products WHERE ProductID IN (SELECT ProductID FROM [Order Details]));
```","Both queries select suppliers with no products that appear in 'Order Details', effectively filtering suppliers not involved in any orders.",SELECT CompanyName FROM suppliers WHERE SupplierID NOT IN (SELECT DISTINCT SupplierID FROM products WHERE SupplierID IS NOT NULL);,"The generated query checks for suppliers who have never supplied any products, while the ground truth query checks for suppliers who have no products involved in any orders.",Base
What is the median freight cost per order?,SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY Freight) AS MedianFreight FROM orders;,"```sql
SELECT MEDIAN(Freight) AS MedianFreightCost
FROM orders;
```","The SQL standard does not define a MEDIAN function. The ground truth query uses PERCENTILE_CONT(0.5), which is the correct ANSI SQL way to calculate the median.",SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY Freight) AS MedianFreight FROM orders;,Both queries are identical and accurately calculate the median freight cost per order.,FT
What is the total number of years of experience for all employees?,"SELECT SUM(TIMESTAMPDIFF(YEAR, employees.HireDate, CURDATE())) AS TotalYearsExperience FROM employees","```sql
SELECT SUM(YEAR(CURDATE()) - YEAR(HireDate)) AS TotalYearsOfExperience
FROM employees;
```","The generated SQL query does not account for specific date differences within the same year, which can lead to inaccuracies compared to TIMESTAMPDIFF in the ground truth query.","SELECT SUM(DATEDIFF(NOW(), employees.HireDate) / 365) AS TotalYearsOfExperience FROM employees","The generated query uses DATEDIFF with division by 365, which can lead to inaccuracies with partial years. The ground truth uses TIMESTAMPDIFF(YEAR), which accurately calculates the total full years.",None
Which city had the most late deliveries in the past year?,"SELECT ShipCity, COUNT(OrderID) AS LateDeliveries FROM orders WHERE ShippedDate > RequiredDate AND YEAR(OrderDate) = YEAR(CURDATE()) GROUP BY ShipCity ORDER BY LateDeliveries DESC LIMIT 1;","```sql
SELECT ShipCity, COUNT(OrderID) AS LateDeliveries
FROM orders
WHERE ShippedDate > RequiredDate AND ShippedDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
GROUP BY ShipCity
ORDER BY LateDeliveries DESC
LIMIT 1;
```","The generated query considers orders from the last 12 months, while the ground truth query considers orders placed in the current year.","SELECT ShipCity, COUNT(OrderID) AS LateDeliveries FROM orders WHERE ShippedDate > RequiredDate AND YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY ShipCity ORDER BY LateDeliveries DESC LIMIT 1",The generated SQL query and the ground truth query are equivalent in logic and produce the same results. 'CURRENT_DATE' and 'CURDATE()' are functionally equivalent in context.,FT
Find the total quantity of products ordered by each employee.,"SELECT o.EmployeeID, SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID;","```sql
SELECT EmployeeID, SUM([Order Details].Quantity) AS TotalQuantity
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY EmployeeID;
```","Both queries correctly aggregate the total quantity of products ordered by each employee by joining the orders and order details tables and grouping by EmployeeID. Despite differences in table aliasing and formatting, they will yield the same results.","SELECT e.EmployeeID, SUM(od.Quantity) AS TotalQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","Both queries calculate the total quantity of products ordered by each employee using joins between 'orders' and 'Order Details', and they group by 'EmployeeID'. The 'employees' table reference in the generated query does not affect the result.",both
Identify customers who have not placed any orders in the last year.,SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate IS NULL OR o.OrderDate < CURDATE() - INTERVAL 1 YEAR;,"```sql
SELECT c.CustomerID, c.CompanyName
FROM customers c
LEFT JOIN orders o ON c.CustomerID = o.CustomerID AND o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
WHERE o.OrderID IS NULL;
```",Both queries effectively identify customers who have not placed any orders in the last year. The generated query uses a LEFT JOIN and checks for NULL values in orders placed after subtracting one year from the current date. The ground truth query checks for NULL OrderDate or dates older than one year ago. Both approaches achieve the same result.,SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderID IS NULL OR o.OrderDate < CURRENT_DATE - INTERVAL '1 YEAR' AND o.OrderDate >= CURRENT_DATE - INTERVAL '2 YEAR';,"The generated query incorrectly includes orders from two years ago in the condition, which is not required by the user's question.",Base
Find products with the highest unit price to average discount ratio.,"SELECT ProductID, UnitPrice / AVG(Discount) AS PriceDiscountRatio FROM [Order Details] GROUP BY ProductID ORDER BY PriceDiscountRatio DESC;","```sql
SELECT p.ProductID, p.ProductName, p.UnitPrice, AVG(od.Discount) AS AverageDiscount,
       (p.UnitPrice / AVG(od.Discount)) AS UnitPriceToAverageDiscountRatio
FROM products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName, p.UnitPrice
ORDER BY UnitPriceToAverageDiscountRatio DESC
LIMIT 1;
```","The generated query includes a join with the products table and selects more fields, whereas the ground truth query only uses the Order Details table and focuses solely on calculating the ratio. The results may differ due to different grouping and fields used.","SELECT p.ProductID, ProductName, UnitPrice / AVG(od.Discount) AS PriceDiscountRatio FROM products p JOIN [Order Detail] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, ProductName ORDER BY PriceDiscountRatio DESC;","The generated query joins the 'products' table, while the ground truth does not. The generated query selects 'ProductName', but the ground truth does not include this field. They might yield different products if 'Order Details' contains products not in 'products' or if 'ProductName' affects the order of grouped results.",None
What is the average shipping cost per order across all shipping companies?,SELECT AVG(orders.Freight) AS avg_shipping_cost FROM orders,"```sql
SELECT AVG(orders.Freight) AS shipping_cost_per_order FROM orders
```","Both queries calculate the average of the 'Freight' column from the 'orders' table, which answers the user's question.",SELECT AVG(orders.Freight) AS avg_shipping_cost_per_order FROM orders,"Both queries calculate the average of the Freight column from the orders table, addressing the user's question on the average shipping cost per order across all shipping companies. The difference in the alias does not affect the result.",both
Determine the total freight cost for each supplier.,"SELECT p.SupplierID, SUM(o.Freight) AS TotalFreight FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.SupplierID;","```sql
SELECT suppliers.SupplierID, suppliers.CompanyName, SUM(orders.Freight) AS TotalFreightCost
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.SupplierID, suppliers.CompanyName
```","Both queries calculate the total freight cost for each supplier by aggregating the freight per order associated with their products. The difference is that the generated query additionally includes the supplier's CompanyName, which doesn't affect the total freight calculation.","SELECT products.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalFreight FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID;","The generated SQL query calculates total freight using discounts on order details, while the ground truth query sums the freight charges from the orders table.",Base
Which products have the highest unit price?,"SELECT ProductName, UnitPrice FROM products WHERE UnitPrice = (SELECT MAX(UnitPrice) FROM products);","```sql
SELECT ProductID, ProductName, UnitPrice
FROM products
ORDER BY UnitPrice DESC
LIMIT 1;
```","The generated query limits the results to one entry, but there could be multiple products with the same highest unit price. The ground truth query accounts for this by using a subquery to find all products with the maximum unit price.","SELECT ProductName, UnitPrice FROM products ORDER BY UnitPrice DESC LIMIT 5;","The generated query lists the top 5 products by price, whereas the ground truth finds all products sharing the highest price.",None
Which employee has the highest sales in the last month?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= DATEADD(month, -1, CURRENT_DATE)
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 1
```","The ground truth query does not include employee names (FirstName, LastName), while the generated query does.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND orders.OrderDate < DATE_TRUNC('month', CURRENT_DATE) GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1","The generated SQL query limits the date range to the beginning of the last month up to the beginning of the current month, whereas the ground truth query uses DATEADD(MONTH, -1, CURRENT_DATE) which might include different intervals leading to potential discrepancies.",None
What percentage of orders were shipped late in 2023?,SELECT COUNT(CASE WHEN orders.ShippedDate > orders.RequiredDate THEN orders.OrderID END) * 100.0 / COUNT(orders.OrderID) AS late_delivery_rate FROM orders WHERE EXTRACT(YEAR FROM orders.OrderDate) = 2023;,"```sql
SELECT (COUNT(orders.OrderID WHERE orders.ShippedDate > orders.RequiredDate) * 100.0) / COUNT(orders.OrderID) AS late_shipment_percentage 
FROM orders 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
```","Both queries calculate the percentage of orders shipped late in 2023 and should yield the same result, although their syntax differs slightly.",SELECT COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) FROM orders WHERE YEAR(OrderDate) = 2023;,"Both queries calculate the percentage of orders shipped late in 2023 by comparing ShippedDate and RequiredDate and using the year of OrderDate. The logic and outcome are the same, despite slight syntactic differences.",both
What is the average sales per employee per month?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT EXTRACT(YEAR_MONTH FROM orders.OrderDate)) AS AvgMonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID","```sql
SELECT 
    e.EmployeeID, 
    e.FirstName, 
    e.LastName, 
    AVG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) AS AverageSales
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    e.EmployeeID, 
    e.FirstName, 
    e.LastName, 
    DATE_FORMAT(o.OrderDate, '%Y-%m')
```","The generated query incorrectly uses AVG over SUM and averages over individual transactions. It also incorrectly groups by month without computing distinct months for averaging, as the ground truth query does.","SELECT e.FirstName, e.LastName, DATE_FORMAT(o.OrderDate, '%Y-%m') AS month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / DISTINCT COUNT(DATE_FORMAT(o.OrderDate, '%Y-%m')) AS avg_monthly_sales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID JOIN employees e ON o.EmployeeID = e.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName, month","The generated query incorrectly divides by 'DISTINCT COUNT(DATE_FORMAT(o.OrderDate, '%Y-%m'))' and calculates per employee and month, while missing distinct months correctly. Additionally, it doesn't use 'DISTINCT' properly for the count.",None
Calculate the total freight cost for each employee's orders.,"SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(o.Freight) AS TotalFreightCost
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","Both queries calculate the total freight cost for each employee. The generated query includes additional columns (FirstName and LastName), but it doesn't affect the correctness of the total freight calculation.","SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",Both queries calculate the total freight cost for each employee's orders by summing the 'Freight' from the 'orders' table after joining with the 'employees' table on 'EmployeeID'. They group results by 'EmployeeID' and perform the same operations.,both
How many discontinued products are still listed?,SELECT COUNT(*) FROM products WHERE Discontinued = 1;,"```sql
SELECT COUNT(*) AS DiscontinuedProductCount
FROM products
WHERE Discontinued = 1;
```","Both queries count the number of discontinued products where the 'Discontinued' column is equal to 1. The difference in the queries is only in the alias name used for the count, which does not affect the result.",SELECT COUNT(*) FROM products WHERE Discontinued = 1;,"Both queries count products from the 'products' table where 'Discontinued' is equal to 1, which answers the question correctly.",both
Calculate the yearly turnover rate of employees.,"SELECT COUNT(EmployeeID) / (SELECT COUNT(EmployeeID) FROM employees) * 100 AS TurnoverRate FROM employees WHERE HireDate BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW();","```sql
SELECT 
    YEAR(HireDate) AS HireYear,
    COUNT(EmployeeID) AS TotalHired,
    SUM(CASE WHEN YEAR(HireDate) < YEAR(CURRENT_DATE) THEN 1 ELSE 0 END) AS TotalLeft,
    (SUM(CASE WHEN YEAR(HireDate) < YEAR(CURRENT_DATE) THEN 1 ELSE 0 END) / COUNT(EmployeeID)) * 100 AS TurnoverRate
FROM 
    employees
GROUP BY 
    YEAR(HireDate);
```","The queries calculate turnover differently. The generated query calculates turnover based on yearly hired and left counts, while the ground truth focuses on the last year’s turnover as a percentage of total employees.","SELECT YEAR(orders.OrderDate) AS OrderYear, COUNT(DISTINCT employees.EmployeeID) AS EmployeeCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY OrderYear;","The generated query calculates count of employees per order year, while the ground truth query calculates the turnover rate based on employees hired in the last year.",None
Which employee has handled the highest number of orders?,"SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```",Both queries calculate the same result by counting orders per employee and returning the employee with the highest count.,"SELECT EmployeeID, COUNT(OrderID) AS HandledOrders FROM orders GROUP BY EmployeeID ORDER BY HandledOrders DESC LIMIT 1;","Both queries group orders by EmployeeID and count the number of orders handled. They order the results in descending order of order count and limit the output to the top result, producing the same outcome.",both
Find employees with the longest tenure at the company.,"SELECT employees.EmployeeID, (CURDATE() - employees.HireDate) / 365 AS YearsAtCompany FROM employees ORDER BY YearsAtCompany DESC;","```sql
SELECT EmployeeID, FirstName, LastName, HireDate
FROM employees
ORDER BY HireDate
LIMIT 1;
```","The generated query retrieves the employee with the earliest hire date but doesn't calculate tenure in years. It limits the result to 1, missing ties.","SELECT e.EmployeeID, DATEDIFF(CURDATE(), e.HireDate) AS TenureDays FROM employees e ORDER BY TenureDays DESC;","Both queries order employees by how long they've been at the company, though the Generated SQL uses days and the Ground Truth uses years. The underlying logic is the same, sorting by longest tenure.",FT
Who is the youngest employee in the company?,"SELECT EmployeeID, FirstName, LastName, BirthDate FROM employees ORDER BY BirthDate DESC LIMIT 1;","```sql
SELECT FirstName, LastName, BirthDate
FROM employees
ORDER BY BirthDate DESC
LIMIT 1;
```","The generated query does not select the EmployeeID, which is included in the ground truth query.","SELECT e.FirstName, e.LastName FROM employees e ORDER BY e.BirthDate DESC LIMIT 1;","The generated query does not select EmployeeID and BirthDate, which are included in the ground truth result.",None
Identify the earliest and latest shipping dates for each customer.,"SELECT CustomerID, MIN(ShippedDate) AS Earliest, MAX(ShippedDate) AS Latest FROM orders GROUP BY CustomerID;","```sql
SELECT 
    CustomerID, 
    MIN(ShippedDate) AS EarliestShippingDate, 
    MAX(ShippedDate) AS LatestShippingDate 
FROM 
    orders 
GROUP BY 
    CustomerID;
```","Both queries perform the same operations: they group by CustomerID and compute the minimum and maximum ShippedDate for each customer, yielding identical results.","SELECT CustomerID, MIN(ShippedDate) AS Earliest, MAX(ShippedDate) AS Latest FROM orders GROUP BY CustomerID;","The generated SQL query and the ground truth query are identical, meaning they both accurately answer the user's question about identifying the earliest and latest shipping dates for each customer.",both
What are the top 5 customers by lifetime value?,"SELECT customers.CustomerID, customers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY lifetime_value DESC LIMIT 5","```sql
SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN customers ON orders.CustomerID = customers.CustomerID 
GROUP BY customers.CustomerID 
ORDER BY customer_lifetime_value DESC 
LIMIT 5
```","The generated query does not include 'customers.CompanyName' in the SELECT clause, which is included in the ground truth query.","SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS customer_lifetime_value FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID ORDER BY customer_lifetime_value DESC LIMIT 5;","The generated query does not select the CompanyName, which is selected in the ground truth query. This could affect the clarity of the result if CompanyName is an important identifier for the user.",None
List all products with a reorder level higher than 20 but less than 100.,SELECT ProductName FROM products WHERE ReorderLevel > 20 AND ReorderLevel < 100;,"```sql
SELECT *
FROM products
WHERE ReorderLevel > 20 AND ReorderLevel < 100;
```",The generated SQL query selects all columns (*) instead of only the ProductName as in the ground truth query.,SELECT ProductName FROM products WHERE ReorderLevel > 20 AND ReorderLevel < 100;,Both queries select products with a reorder level between 20 and 100 and are identical in logic and syntax.,FT
What are the top 5 best-selling products by quantity?,"SELECT ProductName FROM (SELECT P.ProductName, SUM(OD.Quantity) AS TotalQuantity FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID GROUP BY P.ProductName ORDER BY TotalQuantity DESC) AS TopProducts LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantity
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalQuantity DESC
LIMIT 5;
```","Both queries calculate the total quantity sold for each product and select the top 5 products with the highest total quantity, although they differ in structure and column selection, they yield the same result.","SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY total_quantity DESC LIMIT 5","Both queries calculate the total quantity sold per product, sort in descending order, and select the top 5 products by quantity, providing equivalent results.",both
Which orders have been shipped late?,SELECT orders.OrderID FROM orders WHERE orders.RequiredDate < orders.ShippedDate;,"```sql
SELECT OrderID, ShipName, ShipAddress, ShippedDate, RequiredDate
FROM orders
WHERE ShippedDate > RequiredDate;
```","Both queries filter orders based on ShippedDate being later than RequiredDate, indicating late shipments.","SELECT OrderID, DATEDIFF(ShippedDate, RequiredDate) AS Delay FROM orders WHERE ShippedDate > RequiredDate;","Both queries identify orders where ShippedDate is later than RequiredDate, indicating late shipments.",both
What is the top-selling product for each category?,"SELECT CategoryID, ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID, ProductName;","```sql
SELECT p.CategoryID, p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.CategoryID, p.ProductID, p.ProductName
HAVING SUM(od.Quantity) = (
    SELECT MAX(TotalSales)
    FROM (
        SELECT SUM(od2.Quantity) AS TotalSales
        FROM products p2
        JOIN [Order Details] od2 ON p2.ProductID = od2.ProductID
        WHERE p2.CategoryID = p.CategoryID
        GROUP BY p2.ProductID
    ) AS Sales
)
ORDER BY p.CategoryID;
```","The generated SQL includes logic to identify the top-selling product per category using a HAVING clause with a subquery for MAX TotalSales, whereas the ground truth query simply aggregates sales without determining the top product in each category.","SELECT p.CategoryID, p.ProductName, SUM(od.Quantity) AS TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID, p.ProductName HAVING SUM(od.Quantity) = (SELECT MAX(cat.top_seller) FROM (SELECT SUM(od2.Quantity) AS top_seller FROM products p2 JOIN [Order Details] od2 ON p2.ProductID = od2.ProductID WHERE p2.CategoryID = p.CategoryID GROUP BY p2.ProductID) cat)","The generated query attempts to find the top-selling product for each category, but it uses an incorrect HAVING clause logic that may not accurately identify the top product within each category. The ground truth query does not attempt to find the top-selling product but simply aggregates sales by product and category.",None
What is the total discount given on all orders each month?,"SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    OrderMonth
ORDER BY 
    OrderMonth;
```","Both queries calculate the total discount given on all orders each month by joining the 'orders' and 'Order Details' tables, summing up the product of UnitPrice, Quantity, and Discount, and grouping by the formatted OrderDate. The only difference is in column aliases and ORDER BY clause, which doesn't affect the equivalency of the results.","SELECT EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Year, Month;","Both queries calculate the total discount given each month by summing the discounted prices and grouping by month. The difference in date formatting does not affect the equivalence, as both effectively group by year and month.",both
What is the average discount applied for each product?,"SELECT ProductID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY ProductID;","```sql
SELECT 
    OrderDetails.ProductID, 
    AVG(OrderDetails.Discount) AS AverageDiscount
FROM 
    [Order Details] AS OrderDetails
GROUP BY 
    OrderDetails.ProductID;
```","The generated SQL query correctly calculates the average discount for each product. It selects the ProductID and the average of Discount with the same grouping, table, and operations as the ground truth.","SELECT p.ProductName, AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details] od GROUP BY p.ProductName ORDER BY AverageDiscount DESC;","The generated query references ProductName which is not available in Order Details, and it lacks a join with the Products table to get the product names. Ground Truth query uses ProductID directly for aggregation.",Base
Which product has the highest stock-to-order ratio?,"SELECT ProductName, (UnitsInStock / NULLIF(UnitsOnOrder, 0)) AS StockToOrderRatio FROM products ORDER BY StockToOrderRatio DESC LIMIT 1;","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    (p.UnitsInStock / NULLIF(p.UnitsOnOrder, 0)) AS StockToOrderRatio
FROM 
    products p
ORDER BY 
    StockToOrderRatio DESC
LIMIT 1;
```",Both queries calculate the stock-to-order ratio using the same formula and order the results to find the product with the highest ratio. The slight difference in column selection (ProductID included in the generated query) does not affect the correctness of the answer to the user's question.,"SELECT ProductName, (UnitsInStock * 1.0 / UnitsOnOrder) AS StockToOrder FROM products WHERE UnitsOnOrder > 0 ORDER BY StockToOrder DESC LIMIT 1;","Both queries calculate the stock-to-order ratio and return the product with the highest ratio, although they handle division slightly differently. The generated query filters out rows with UnitsOnOrder = 0, while the ground truth uses NULLIF to prevent division by zero. Nevertheless, the results will match when UnitsOnOrder is never zero or when it doesn't affect the highest ratio product.",both
What is the total inventory value for all products that are not discontinued?,SELECT SUM(UnitPrice * UnitsInStock) FROM products WHERE Discontinued = 0;,"```sql
SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue
FROM products
WHERE Discontinued = 0;
```","Both queries calculate the total inventory value of all non-discontinued products, using the same formula and condition on the 'Discontinued' column.",SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products WHERE Discontinued = 0;,Both queries calculate the total inventory value for non-discontinued products using the same logic. The alias 'TotalInventoryValue' in the generated query does not affect the result.,both
Which products have an inventory turnover ratio greater than the average ratio?,"SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName HAVING (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) > (SELECT AVG(subquery.turnover_ratio) FROM (SELECT SUM(od1.Quantity * od1.UnitPrice) / AVG(p1.UnitsInStock) AS turnover_ratio FROM products p1 JOIN [Order Details] od1 ON p1.ProductID = od1.ProductID GROUP BY p1.ProductID) subquery);","```sql
SELECT p.ProductID, p.ProductName, 
       SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
HAVING (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) > 
       (SELECT AVG(SUM(od2.Quantity * od2.UnitPrice) / AVG(p2.UnitsInStock))
        FROM products p2
        JOIN [Order Details] od2 ON p2.ProductID = od2.ProductID
        GROUP BY p2.ProductID);
```","The generated query calculates InventoryTurnoverRatio with SUM and then directly averages it across products in the nested query, potentially leading to incorrect averages due to incorrect aggregation. The ground truth correctly creates a subquery to compute individual turnover ratios before averaging.","SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID HAVING SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) > (SELECT AVG(subquery.ProductTurnover) FROM (SELECT SUM(od2.Quantity * od2.UnitPrice) / NULLIF(AVG(p2.UnitsInStock), 0) AS ProductTurnover FROM products p2 JOIN [Order Details] od2 ON p2.ProductID = od2.ProductID GROUP BY p2.ProductID) subquery);","Both queries calculate the inventory turnover ratio as the sum of sales divided by average units in stock and compare each product's ratio against the average of all products. The syntax and alias usage might differ, but the logic and outcome are equivalent.",FT
What is the average discount given on each product?,"SELECT p.ProductName, AVG(od.Discount) AS AverageDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;","```sql
SELECT od.ProductID, AVG(od.Discount) AS AverageDiscount
FROM [Order Details] od
GROUP BY od.ProductID;
```",The generated query returns ProductID while the ground truth returns ProductName. This affects the final output even though the average discount calculation is the same.,"SELECT ProductID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY ProductID;","The generated query returns ProductID with average discount, while the ground truth query returns ProductName with average discount by joining with the products table.",None
"Identify employees who achieve over $100,000 in sales.","SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING TotalSales > 100000;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 100000;
```","Both queries identify employees with total sales over $100,000 by summing up sales calculated as UnitPrice * Quantity * (1 - Discount). Despite slight differences in aliases, they achieve the same result.","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID HAVING SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) > 100000```","Both queries calculate total sales per employee using identical logic and filter employees who achieve over $100,000 in sales, despite minor differences in table aliases.",both
What is the sales growth for each product category over the last year?,"SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS sales_growth FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY categories.CategoryName","```sql
SELECT categories.CategoryName, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales, 
       YEAR(orders.OrderDate) AS sales_year 
FROM orders 
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID 
JOIN products ON [Order Details].ProductID = products.ProductID 
JOIN categories ON products.CategoryID = categories.CategoryID 
WHERE orders.OrderDate >= DATEADD(YEAR, -1, GETDATE()) 
GROUP BY categories.CategoryName, YEAR(orders.OrderDate) 
ORDER BY sales_year;
```","The generated query calculates total sales for each category in the last year, not the sales growth as requested. It also uses a relative date function (GETDATE()), leading to a rolling year comparison instead of the static yearly range used in the ground truth ('2022-01-01' to '2022-12-31'). Furthermore, it groups by year and category name, rather than just category name.","SELECT c.CategoryID, (SUM(CASE WHEN o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) THEN od.Quantity * od.UnitPrice ELSE 0 END) - SUM(CASE WHEN o.OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR) THEN od.Quantity * od.UnitPrice ELSE 0 END)) / NULLIF(SUM(CASE WHEN o.OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR) THEN od.Quantity * od.UnitPrice ELSE 0 END), 0) * 100 AS sales_growth FROM [Order Details] od JOIN categories c ON od.ProductID = c.CategoryID JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY c.CategoryID;","The generated query calculates sales growth using the difference of sales in the last year versus the previous year, while the ground truth calculates sales only for the last year without considering growth as a percentage.",None
Identify the top 5 products by sales quantity.,SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY SUM(od.Quantity) DESC LIMIT 5;,"```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantity
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalQuantity DESC
LIMIT 5;
```","Both queries aim to identify the top 5 products by sales quantity. They group by product and order the results by the summed quantity in descending order, then limit the results to the top 5. Despite the difference in selected columns, the core logic remains the same.","SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 5;","The generated query returns both ProductName and TotalQuantity, while the ground truth query returns only ProductName. This affects the output format, although both queries aim to identify the top products by sales quantity.",Base
What percentage of orders are shipped to a different country than the order's origin?,SELECT COUNT(CASE WHEN ShipCountry != '' THEN 1 END) * 100.0 / COUNT(OrderID) AS Percentage FROM orders;,"```sql
SELECT 
    (COUNT(CASE WHEN orders.ShipCountry != 'YourOriginCountry' THEN 1 END) * 100.0 / COUNT(orders.OrderID)) AS PercentageDifferentCountry
FROM 
    orders;
```","The generated SQL query incorrectly compares ShipCountry against 'YourOriginCountry', which is not specified in the ground truth. The ground truth query assumes that the ShipCountry being non-empty indicates a different country, but this might not accurately capture the user's intent if origin and destination countries need to be explicitly compared.",SELECT (COUNT(CASE WHEN ShipCountry != HomeCountry THEN 1 END) * 100.0 / COUNT(*)) AS CrossBorderPercentage FROM orders;,"The generated query correctly computes the percentage of orders shipped to a different country than their origin by comparing ShipCountry and HomeCountry. The ground truth query is incorrect as it only checks if ShipCountry is not an empty string, which doesn't address the user's question about different countries.",None
How long do suppliers take on average to deliver products in May 2023?,"SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY products.SupplierID","```sql
SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time 
FROM orders 
JOIN products ON orders.OrderID = products.ProductID 
WHERE orders.OrderDate BETWEEN '2023-05-01' AND '2023-05-31' 
GROUP BY products.SupplierID
```",The generated query incorrectly joins on ProductID and lacks a join on Order Details. This affects the calculation of average lead time per supplier.,"SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_delivery_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE orders.OrderDate BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY suppliers.CompanyName","The generated query uses suppliers.CompanyName in the SELECT and GROUP BY clauses, which yields results per supplier name instead of SupplierID. The ground truth query groups by SupplierID. If there are multiple suppliers with the same name, this could yield different average delivery times.",None
Which shipping method was used most frequently in 2023?,"SELECT ShipVia, COUNT(OrderID) AS Frequency FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY ShipVia ORDER BY Frequency DESC LIMIT 1;","```sql
SELECT ShipVia, COUNT(*) AS Frequency
FROM orders
WHERE YEAR(OrderDate) = 2023
GROUP BY ShipVia
ORDER BY Frequency DESC
LIMIT 1;
```",Both queries correctly count the number of orders for each shipping method in 2023 and identify the most frequently used one. The use of COUNT(*) vs. COUNT(OrderID) does not affect the result when counting rows.,"SELECT o.ShipVia, COUNT(o.OrderID) AS usage_count FROM orders o WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY o.ShipVia ORDER BY usage_count DESC LIMIT 1;","Both queries filter the orders from the year 2023 and count the occurrences of each shipping method. They then order the results in descending order and limit to the top result, so they will produce the same outcome.",both
What is the average order value in the second quarter of 2023?,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30';,"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value 
FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30'
```","The generated SQL query accurately captures the user's question. It calculates the average order value in the second quarter of 2023 using the SUM of product prices and discounts, divided by the count of distinct order IDs, constrained by the given date range. It matches the ground truth query in both logic and outcome.",SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS avg_order_value FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate BETWEEN '2023-04-01' AND '2023-06-30',"The generated query and the ground truth query are logically equivalent and will yield the same result. Both queries calculate the average order value by summing the products of UnitPrice, Quantity, and the discount factor, then dividing by the count of unique OrderIDs for the specified date range in Q2 2023.",both
Which employee had the highest sales last month?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= DATEADD(month, -1, GETDATE()) AND o.OrderDate < GETDATE()
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY TotalSales DESC
LIMIT 1;
```","The generated query uses DATEADD with GETDATE() to filter last month's orders, which excludes time considerations, whereas the ground truth query correctly adjusts for month and year using CURRENT_DATE and INTERVAL. Additionally, the generated query retrieves employee names, while the ground truth does not.","SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) AND MONTH(orders.OrderDate) = MONTH(CURDATE()) - 1 GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName ORDER BY TotalSales DESC LIMIT 1","The generated SQL query includes employee names in the selection but the ground truth does not, potentially affecting the results due to differences in group by columns.",None
What is the average freight cost for shipped orders?,SELECT AVG(Freight) AS AverageFreight FROM orders WHERE ShippedDate IS NOT NULL;,"```sql
SELECT AVG(Freight) AS AverageFreightCost
FROM orders
WHERE ShippedDate IS NOT NULL;
```","The generated SQL query accurately answers the user's question by calculating the average freight cost for orders where the ShippedDate is not null, which matches the intent of the ground truth query.",SELECT AVG(Freight) AS AverageFreight FROM orders WHERE ShippedDate IS NOT NULL;,"Both queries calculate the average freight for orders where the ShippedDate is not null, so they yield the same results.",both
What is the reorder level for products with the highest sales last month?,"SELECT ProductID, ReorderLevel FROM products WHERE ProductID IN (SELECT ProductID FROM [Order Details] WHERE DATE_FORMAT(CURDATE(), '%Y-%m') = DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 1 MONTH), '%Y-%m') GROUP BY ProductID ORDER BY SUM(Quantity) DESC LIMIT 1);","```sql
SELECT p.ReorderLevel
FROM products p
JOIN (
    SELECT od.ProductID, SUM(od.Quantity) AS TotalSales
    FROM [Order Details] od
    JOIN orders o ON od.OrderID = o.OrderID
    WHERE o.OrderDate >= DATE_TRUNC('MONTH', CURRENT_DATE) - INTERVAL '1 MONTH'
    AND o.OrderDate < DATE_TRUNC('MONTH', CURRENT_DATE)
    GROUP BY od.ProductID
    ORDER BY TotalSales DESC
    LIMIT 1
) highest_sales ON p.ProductID = highest_sales.ProductID;
```","The generated query correctly handles date truncation and sales calculation, but it will not return the correct reorder level for products with the highest sales since the ground truth query incorrectly compares current and previous month formats, leading to logical errors.","SELECT p.ProductID, p.ReorderLevel FROM products p JOIN (SELECT od.ProductID FROM [Order Details] od WHERE EXTRACT(MONTH FROM od.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE - INTERVAL '1' MONTH) AND EXTRACT(YEAR FROM od.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '1' MONTH) GROUP BY od.ProductID ORDER BY SUM(od.Quantity) DESC LIMIT 1) high_sales ON p.ProductID = high_sales.ProductID;","The generated SQL uses EXTRACT for filtering by month and year, which is correct, but the condition is incorrect because it does not check within the correct last month's date range. The ground truth correctly uses DATE_FORMAT to compare MM-YYYY for last month. Hence, their date logic differs, potentially yielding different results.",None
List the employees who have been with the company for more than 5 years.,"SELECT EmployeeID, FirstName, LastName FROM employees WHERE HireDate < DATE_SUB(CURDATE(), INTERVAL 5 YEAR);","```sql
SELECT EmployeeID, FirstName, LastName, HireDate
FROM employees
WHERE HireDate < DATE_SUB(CURDATE(), INTERVAL 5 YEAR);
```","The generated query includes the 'HireDate' in the SELECT clause, which is not present in the ground truth query.","SELECT e.FirstName, e.LastName FROM employees e WHERE e.HireDate <= DATE_SUB(CURDATE(), INTERVAL 5 YEAR);",The generated query excludes 'EmployeeID' in the select statement and uses '<=' instead of '<'. These differences may affect the result when employees hired exactly 5 years ago are included.,None
Determine the impact of employee tenure on sales performance.,"SELECT employees.EmployeeID, DATEDIFF(CURRENT_DATE, employees.HireDate) AS TenureDays, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;","```sql
SELECT 
    e.EmployeeID, 
    e.FirstName, 
    e.LastName, 
    e.HireDate, 
    DATEDIFF(CURRENT_DATE, e.HireDate) / 365 AS TenureYears, 
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    employees e
LEFT JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
LEFT JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    e.EmployeeID, e.FirstName, e.LastName, e.HireDate
ORDER BY 
    TenureYears;
```",Both queries calculate the total sales per employee and relate it to their tenure. Differences in details don't affect the result; both effectively address how employee tenure impacts sales.,"SELECT employees.EmployeeID, DATEDIFF(CREATE_DATE, employees.HireDate) AS TenureDays, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, DATEDIFF(CREATE_DATE, employees.HireDate)","The generated query uses a DATEDIFF with CREATE_DATE instead of CURRENT_DATE and includes it in the GROUP BY clause, leading to different aggregation of results.",Base
How many orders were placed each month for the last year?,"SELECT MONTH(OrderDate) AS OrderMonth, COUNT(OrderID) AS TotalOrders FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY MONTH(OrderDate);","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS TotalOrders
FROM orders
WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
GROUP BY Month
ORDER BY Month;
```","The generated query includes the current month in its results by using `>= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)`, while the ground truth query is intended to retrieve data for the previous calendar year using `YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1`.","SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS TotalOrders FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 year' GROUP BY Month ORDER BY Month;","The Generated SQL includes the current month and the past 12 months, while the Ground Truth SQL considers only the months within the previous year, excluding the current year.",None
Which product had the highest sales quantity in 2023?,"SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID ORDER BY total_quantity DESC LIMIT 1","```sql
SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY products.ProductID
ORDER BY total_quantity DESC
LIMIT 1
```","The generated query does not correctly join [Order Details] with the products table, which is required to access ProductID.","SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31') GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 1;","Both queries calculate the total quantity sold per product in 2023 and return the product with the highest sales quantity. They effectively join 'Order Details' and 'orders' using the OrderID, although the ground truth query also joins with the 'products' table, which is redundant for the task.",FT
Which products have not been sold at all?,"SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;","```sql
SELECT p.ProductID, p.ProductName
FROM products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.ProductID IS NULL;
```","Both queries are identical and will produce the same result, correctly identifying products that have not been sold.",SELECT products.ProductName FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].ProductID IS NULL;,"Both queries perform a LEFT JOIN between the products and [Order Details] tables to find products with no matching sales records, filtering those with NULL in [Order Details].ProductID.",both
List all discontinued products with over 100 units in stock.,SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 100;,"```sql
SELECT ProductID, ProductName, UnitsInStock
FROM products
WHERE Discontinued = 1 AND UnitsInStock > 100;
```","The generated SQL query selects ProductID, which is not asked for in the user question or contained in the ground truth query.",SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 100;,Both queries are identical and meet the user's requirements by selecting discontinued products with more than 100 units in stock.,FT
List the top 5 suppliers based on the value of products supplied.,"SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity) AS TotalValue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY TotalValue DESC LIMIT 5;","```sql
SELECT s.SupplierID, s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalValue
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY s.SupplierID, s.CompanyName
ORDER BY TotalValue DESC
LIMIT 5;
```","The generated query calculates the total value after accounting for discounts, whereas the ground truth query does not include discount calculations.","SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity) AS TotalValue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY TotalValue DESC LIMIT 5;","The generated SQL query and the ground truth SQL query are identical and therefore will yield the same results, accurately answering the user's question.",FT
Which products have been ordered but are currently discontinued?,SELECT ProductName FROM products WHERE Discontinued = 1 AND ProductID IN (SELECT DISTINCT ProductID FROM [Order Details]);,"```sql
SELECT p.ProductID, p.ProductName, p.SupplierID
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE p.Discontinued = 1;
```","Both queries accurately retrieve products that have been ordered and are discontinued. The generated query uses a JOIN, while the ground truth uses a subquery, but both yield the same result set.",SELECT products.ProductName FROM products WHERE products.Discontinued = 1 AND products.ProductID IN (SELECT DISTINCT [Order Details].ProductID FROM [Order Details]);,Both queries select product names from the 'products' table that are discontinued and have been ordered. They match the user's question and should yield identical results.,both
List all suppliers who have never had a discontinuation in their products.,"SELECT SupplierID, CompanyName FROM suppliers WHERE SupplierID NOT IN (SELECT DISTINCT SupplierID FROM products WHERE Discontinued = 1);","```sql
SELECT s.SupplierID, s.CompanyName
FROM suppliers s
LEFT JOIN products p ON s.SupplierID = p.SupplierID
GROUP BY s.SupplierID, s.CompanyName
HAVING SUM(p.Discontinued) = 0;
```","Both queries return suppliers who have never had their products marked discontinued. The generated query uses a LEFT JOIN and HAVING clause to ensure no discontinued products, while the ground truth uses a subquery with NOT IN to exclude suppliers with discontinued products.",SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName HAVING SUM(CASE WHEN products.Discontinued = 1 THEN 1 ELSE 0 END) = 0;,"Both queries return suppliers who do not have any discontinued products. The generated query uses a HAVING clause to ensure no discontinued products, while the ground truth query excludes suppliers with discontinued products using a subquery.",both
Which month had the lowest shipping cost per order in 2023?,"SELECT MONTH(orders.OrderDate) AS month, AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE YEAR(orders.OrderDate) = 2023 GROUP BY MONTH(orders.OrderDate) ORDER BY avg_shipping_cost ASC LIMIT 1","```sql
SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS order_month, AVG(orders.Freight) AS average_shipping_cost
FROM orders
WHERE YEAR(orders.OrderDate) = 2023
GROUP BY order_month
ORDER BY average_shipping_cost ASC
LIMIT 1;
```","The generated SQL query groups by formatted date with year and month, while the ground truth groups only by month. This could lead to different results if the order date includes different years and multiple occurrences in a month.","SELECT EXTRACT(MONTH FROM orders.OrderDate) AS month, AVG(orders.Freight) AS average_shipping_cost FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month ORDER BY average_shipping_cost ASC LIMIT 1;","Both queries correctly calculate the average shipping cost per month for 2023 and order the results to find the month with the lowest cost. They use slightly different methods to extract the month and filter the year, but they yield the same result.",FT
Identify the top 5 products by total sales quantity.,"SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalSales FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalSales DESC FETCH FIRST 5 ROWS ONLY;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSalesQuantity
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSalesQuantity DESC
LIMIT 5;
```","Both queries calculate total sales quantity for each product and return the top 5 products in descending order of total sales. They use similar logic: joining products with order details, aggregating by product, and limiting results to 5. The key difference is syntax (LIMIT vs FETCH FIRST), which is functionally equivalent here.","SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalQuantity DESC LIMIT 5;","The generated query lacks a join to include the product name and limits results with 'LIMIT' instead of using 'FETCH FIRST'. It returns ProductID rather than ProductName, therefore results may differ from the ground truth query.",Base
Identify products with zero units in stock but have pending orders.,SELECT ProductName FROM products WHERE UnitsInStock = 0 AND UnitsOnOrder > 0;,"```sql
SELECT p.ProductID, p.ProductName, p.UnitsInStock, p.UnitsOnOrder
FROM products p
WHERE p.UnitsInStock = 0 AND p.UnitsOnOrder > 0;
```","The generated query selects additional columns (ProductID, UnitsInStock, UnitsOnOrder) while the ground truth query selects only ProductName.",SELECT ProductName FROM products WHERE UnitsInStock = 0 AND UnitsOnOrder > 0;,Both queries are identical and accurately find products with zero units in stock and pending orders.,FT
How many orders were placed by each customer?,"SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID;","```sql
SELECT CustomerID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY CustomerID;
```","Both queries count the number of orders per customer by grouping on CustomerID, and they are identical in function.","SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID;",Both queries are identical and correctly count the number of orders for each customer grouped by CustomerID.,both
Which shipping recipient received the most orders?,"SELECT ShipName, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipName ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT ShipName, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY ShipName
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries are identical in functionality, returning the shipping recipient with the most orders.","SELECT ShipName, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipName ORDER BY OrderCount DESC LIMIT 1;","Both queries are identical and correctly find the shipping recipient with the most orders by counting the OrderIDs grouped by ShipName and then ordering the results in descending order, limiting to one result.",both
How many products have a unit price higher than the average unit price across all products?,SELECT COUNT(*) FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);,"```sql
SELECT COUNT(*) AS ProductCount
FROM products
WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);
```",Both queries calculate the count of products with a unit price higher than the average unit price. The slight difference in naming the count result does not affect the query's correctness.,SELECT COUNT(*) FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);,Both queries calculate the average unit price and count products with a price above this average using the same logic.,both
Which product categories had the best performance in sales in January 2023?,"SELECT categories.CategoryName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = 1 AND YEAR(orders.OrderDate) = 2023 GROUP BY categories.CategoryName ORDER BY total_quantity DESC","```sql
SELECT categories.CategoryID, categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS total_sales
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN categories ON products.CategoryID = categories.CategoryID
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31'
GROUP BY categories.CategoryID, categories.CategoryName
ORDER BY total_sales DESC
```","The generated SQL query calculates total sales based on revenue, while the ground truth query calculates based on total quantity sold. The focus of performance measurement differs between revenue and quantity.","SELECT categories.CategoryName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY categories.CategoryName ORDER BY total_quantity DESC;","The generated SQL query accurately answers the user's question as both queries calculate the total quantity sold for each category in January 2023, grouped and ordered by total quantity. The difference in date filtering (BETWEEN vs. MONTH/YEAR functions) yields the same result.",FT
What are the total sales generated by each employee for March 2023?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY employees.EmployeeID","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN employees ON orders.EmployeeID = employees.EmployeeID 
WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' 
GROUP BY employees.EmployeeID
```",Both queries calculate the total sales for each employee for March 2023 by summing the sales from the 'Order Details' and joining the 'orders' and 'employees' tables. The syntax and logic are consistent between both queries.,"SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName",Both queries calculate total sales per employee for March 2023. The generated query includes employee names but yields the same result in terms of sales aggregation.,both
What's the total value of the current stock for each product?,"SELECT ProductName, UnitsInStock * UnitPrice AS StockValue FROM products;","```sql
SELECT 
    ProductID, 
    ProductName, 
    UnitsInStock * UnitPrice AS TotalStockValue 
FROM 
    products;
```","Both queries calculate the total stock value for each product based on units in stock and unit price. The difference is the inclusion of 'ProductID' in the generated query, which does not affect the equivalence in terms of answering the user's question.","SELECT ProductID, ProductName, UnitPrice * UnitsInStock AS TotalValueInStock FROM products;","Both queries compute the total value of the current stock for each product by multiplying UnitPrice with UnitsInStock, and they select the product name and stock value.",both
What is the current inventory turnover ratio?,SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID;,"```sql
SELECT 
    SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio
FROM 
    products
JOIN 
    [Order Details] ON products.ProductID = [Order Details].ProductID
```","Both the generated and ground truth queries calculate the inventory turnover ratio in the same way, and will yield the same results as they perform identical operations and use the same tables and joins.","SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) AS InventoryTurnoverRatio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID;",Both queries calculate the Inventory Turnover Ratio using the sum of order details and average units in stock. The use of NULLIF in the generated query prevents division by zero but doesn't change the outcome if average units in stock is non-zero.,both
What is the total sales value generated by each employee in the last month?,"SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND o.OrderDate < CURDATE() GROUP BY e.EmployeeID, e.FirstName, e.LastName;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= DATEADD(MONTH, -1, GETDATE())
GROUP BY e.EmployeeID, e.FirstName, e.LastName
```","The generated query includes orders from today and the exact date a month ago, whereas the ground truth query uses a one-month interval that starts a month prior and excludes today.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = (YEAR(CURDATE()) - 1) AND MONTH(orders.OrderDate) = MONTH(CURDATE()) - 1 GROUP BY employees.EmployeeID;","The generated SQL query filters orders from the last month's year and month, but not correctly. It uses 'YEAR(CURDATE()) - 1' and 'MONTH(CURDATE()) - 1', which might incorrectly represent the previous month. The ground truth query correctly uses 'DATE_SUB(CURDATE(), INTERVAL 1 MONTH).' Additionally, the ground truth query includes employees' first and last names in the GROUP BY clause.",None
What is the total number of orders per shipping method?,"SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia ORDER BY OrderCount DESC;","```sql
SELECT ShipVia, COUNT(OrderID) AS TotalOrders
FROM orders
GROUP BY ShipVia;
```","Both queries calculate the total number of orders per shipping method. The only difference is the ground truth query includes an ORDER BY clause, which does not affect the result values.","SELECT ShipVia, COUNT(*) AS TotalOrders FROM orders GROUP BY ShipVia;","Both queries calculate the number of orders per shipping method by grouping on 'ShipVia', and counting either 'OrderID' or all records, which is functionally equivalent. The difference is the 'ORDER BY' clause in the ground truth query, which affects sorting, not the result count.",both
Identify employees whose sales performance has declined over the last year.,"SELECT EmployeeID FROM (SELECT e.EmployeeID, EXTRACT(YEAR FROM o.OrderDate) AS Year, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AnnualSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, EXTRACT(YEAR FROM o.OrderDate)) AS Performance WHERE AnnualSales < LAG(AnnualSales) OVER (PARTITION BY EmployeeID ORDER BY Year);","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, 
       SUM(CASE WHEN o.OrderDate >= DATEADD(YEAR, -1, GETDATE()) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) AS SalesLastYear,
       SUM(CASE WHEN o.OrderDate < DATEADD(YEAR, -1, GETDATE()) AND o.OrderDate >= DATEADD(YEAR, -2, GETDATE()) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) AS SalesPreviousYear
FROM employees e
LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID
LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName
HAVING SalesLastYear < SalesPreviousYear;
```","The generated query uses DATEADD and GETDATE, which may not align with actual year boundaries. It compares SALES data for a rolling year instead of calendar years. The ground truth checks strict calendar years using EXTRACT and LAG to compare annual sales precisely. This may yield different results, especially if decline is based on incomplete year data.",SELECT e.EmployeeID FROM employees e JOIN orders o1 ON e.EmployeeID = o1.EmployeeID JOIN orders o2 ON e.EmployeeID = o2.EmployeeID WHERE YEAR(o1.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY e.EmployeeID HAVING SUM(o1.SaleAmount) < SUM(CASE WHEN YEAR(o2.OrderDate) = YEAR(CURDATE()) THEN o2.SaleAmount ELSE 0 END);,The generated query does not correctly use the LAG function to compare yearly sales per employee. It instead uses a less direct comparison of current year and last year without properly aligning the annual data for an accurate comparison.,None
Which products have a unit price lower than their category's average unit price?,SELECT ProductName FROM products WHERE UnitPrice < (SELECT AVG(UnitPrice) FROM products p2 WHERE p2.CategoryID = products.CategoryID);,"```sql
SELECT p.ProductID, p.ProductName, p.UnitPrice, c.AverageUnitPrice
FROM products p
JOIN (
    SELECT CategoryID, AVG(UnitPrice) AS AverageUnitPrice
    FROM products
    GROUP BY CategoryID
) c ON p.CategoryID = c.CategoryID
WHERE p.UnitPrice < c.AverageUnitPrice;
```",Both queries find products with a unit price lower than the average unit price for their category. They achieve the same outcome using different approaches.,SELECT p.ProductName FROM products p JOIN categories c ON p.CategoryID = c.CategoryID WHERE p.UnitPrice < (SELECT AVG(p2.UnitPrice) FROM products p2 WHERE p2.CategoryID = p.CategoryID);,Both queries calculate the average unit price per category and select products that have a unit price lower than their category's average. They employ a similar subquery and comparison logic.,both
What is the average order fulfillment time per shipping method?,"SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY ShipVia;
```","Both queries calculate the average order fulfillment time per shipping method using the same logic and SQL functions. The only difference is in the alias name, which does not affect the result.","SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia;","Both queries calculate the average difference between the ShippedDate and OrderDate, grouped by ShipVia, using the DATEDIFF function. Only the alias name changes, which does not affect the result.",both
List all products that have never been ordered.,SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"```sql
SELECT p.ProductID, p.ProductName
FROM products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.ProductID IS NULL;
```","Both queries correctly return products that have never been ordered. The generated query uses a LEFT JOIN with a NULL check, and the ground truth uses a NOT IN clause. Both methods yield the same result.",SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,Both queries are identical and accurately list products that have never been ordered by checking for ProductID not present in [Order Details].,both
Identify customers with orders shipped after the required date.,"SELECT o.CustomerID, o.OrderID FROM orders o WHERE o.ShippedDate > o.RequiredDate;","```sql
SELECT c.CustomerID, c.CompanyName, o.OrderID, o.RequiredDate, o.ShippedDate
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
WHERE o.ShippedDate > o.RequiredDate;
```","Both queries identify orders where the ShippedDate is later than the RequiredDate. The generated query includes additional columns from the customers table, which does not affect the logic regarding the dates.",SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.ShippedDate > o.RequiredDate;,"The generated query only returns CustomerID, while the ground truth query returns both CustomerID and OrderID.",Base
Which shipping region has the highest order volume?,"SELECT ShipRegion, COUNT(OrderID) AS OrderVolume FROM orders GROUP BY ShipRegion ORDER BY OrderVolume DESC LIMIT 1;","```sql
SELECT ShipRegion, COUNT(OrderID) AS OrderVolume
FROM orders
GROUP BY ShipRegion
ORDER BY OrderVolume DESC
LIMIT 1;
```","The generated SQL query and the ground truth SQL query are syntactically and functionally the same. Both correctly group orders by ShipRegion, count the OrderID for each region, and return the region with the highest order volume using ORDER BY and LIMIT 1.","SELECT ShipRegion, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipRegion ORDER BY TotalOrders DESC LIMIT 1;",Both queries calculate the order volume per shipping region and return the region with the highest order count. The column alias difference does not affect the result.,both
Which products have stock levels below the reorder level?,"SELECT ProductID, ProductName, UnitsInStock, ReorderLevel FROM products WHERE UnitsInStock < ReorderLevel;","```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel 
FROM products 
WHERE UnitsInStock < ReorderLevel;
```",The generated SQL query and the ground truth query are logically equivalent and both accurately answer the user's question by selecting products with stock levels below the reorder level.,"SELECT ProductName, Stock FROM products WHERE Stock < ReorderLevel;","The generated query uses 'Stock' instead of 'UnitsInStock' and does not select 'ReorderLevel', which might affect accuracy if column names or output requirements differ.",Base
Analyze the correlation between employee job title and sales performance.,"SELECT employees.Title, AVG(TotalSales) AS AverageSales FROM (SELECT employees.Title, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, employees.Title) AS EmployeeSales GROUP BY employees.Title;","```sql
SELECT e.Title, 
       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.Title
ORDER BY TotalSales DESC;
```","The generated query calculates total sales per job title, while the ground truth query calculates average sales per employee title. The metrics are different: total vs. average.","SELECT employees.Title, AVG([Order Details].UnitPrice) AS AvgSaleValue, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Title;","The Generated SQL Query calculates average unit price and total sales without considering any discounts, while the Ground Truth SQL Query calculates average total sales including discounts. The results will differ due to this difference in computation logic.",None
Which employee generated the most sales in Q1 of 2023?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS total_sales FROM [Order Details] od JOIN orders ON od.OrderID = orders.OrderID JOIN employees e ON orders.EmployeeID = e.EmployeeID WHERE YEAR(orders.OrderDate) = 2023 AND MONTH(orders.OrderDate) BETWEEN 1 AND 3 GROUP BY e.EmployeeID ORDER BY total_sales DESC LIMIT 1","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
JOIN employees ON orders.EmployeeID = employees.EmployeeID
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'
GROUP BY employees.EmployeeID
ORDER BY total_sales DESC
LIMIT 1
```",Both queries correctly calculate total sales per employee for Q1 2023 and return the employee with the highest sales. They only differ in date filtering method.,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1","Both queries calculate the total sales for each employee by multiplying unit price, quantity, and applying the discount for orders between January 1, 2023, and March 31, 2023. They group by EmployeeID and order by total sales in descending order, limiting the result to the top record. The date filtering is equivalent.",both
List all orders that were not shipped.,SELECT OrderID FROM orders WHERE ShippedDate IS NULL;,"```sql
SELECT * FROM orders WHERE ShippedDate IS NULL;
```","The generated query returns all columns, whereas the ground truth query only returns the OrderID column. They do not yield the same results.",SELECT OrderID FROM orders WHERE ShippedDate IS NULL;,"Both queries are identical in logic and will yield the same results by selecting order IDs where the 'ShippedDate' is NULL, indicating orders not shipped.",FT
What is the total sales generated by each employee in the last quarter?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -3, CURRENT_DATE) GROUP BY e.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= DATEADD(quarter, -1, GETDATE())
GROUP BY e.EmployeeID, e.FirstName, e.LastName
```","The queries use different functions to determine the date range for the last quarter: GETDATE() vs. CURRENT_DATE, and different methods to calculate the period (-1 quarter vs. -3 months). This may lead to different results.","SELECT employees.EmployeeID, SUM(Order_Details.UnitPrice * Order_Details.Quantity * (1 - Order_Details.Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = Order_Details.OrderID WHERE QUARTER(orders.OrderDate) = 4 AND YEAR(orders.OrderDate) = 2022 GROUP BY employees.EmployeeID;","The generated query filters sales by the last quarter of 2022 using fixed values for year and quarter, while the ground truth query uses a dynamic date calculation to determine the last quarter based on the current date. They may not yield the same results if executed on a different date.",None
How many orders were delayed beyond the required date?,SELECT COUNT(o.OrderID) AS DelayedOrders FROM orders o WHERE o.ShippedDate > o.RequiredDate;,"```sql
SELECT COUNT(*) AS DelayedOrders 
FROM orders 
WHERE ShippedDate > RequiredDate;
```","Both queries count the number of orders where the ShippedDate is greater than the RequiredDate, fulfilling the user's request.",SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;,"Both queries count the number of orders where the ShippedDate is later than the RequiredDate, which answers the user's question.",both
What is the average time between order date and required date?,"SELECT AVG(DATEDIFF(RequiredDate, OrderDate)) AS AverageTimeBetween FROM orders;","```sql
SELECT AVG(DATEDIFF(RequiredDate, OrderDate)) AS Avg_Time_Between_Order_and_Required
FROM orders;
```","Both queries calculate the average difference in days between the RequiredDate and OrderDate from the 'orders' table using the DATEDIFF function. The difference is only in column naming, which doesn't affect the result.","SELECT AVG(DATEDIFF(RequiredDate, OrderDate)) AS avg_time_required FROM orders","Both queries calculate the average time between order date and required date, using the same logic and tables.",both
Calculate the total revenue generated by each product.,"SELECT ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
```","Both queries calculate the total revenue for each product by joining the 'products' and 'Order Details' tables, summing the product of 'Quantity' and 'UnitPrice', and grouping by 'ProductName'. Though the generated query includes 'ProductID' in the select and group by clauses, it does not affect the accuracy of the result.","SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;","The generated SQL query includes a discount factor in the revenue calculation, while the ground truth query does not.",Base
Calculate the monthly product performance based on sales quantities.,"SELECT P.ProductID, EXTRACT(YEAR FROM O.OrderDate) AS Year, EXTRACT(MONTH FROM O.OrderDate) AS Month, SUM(OD.Quantity) AS MonthlyPerformance FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID JOIN orders O ON OD.OrderID = O.OrderID GROUP BY P.ProductID, Year, Month;","```sql
SELECT p.ProductID, SUM(od.Quantity) AS TotalQuantitySold
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID
```",The generated query does not compute monthly performance. It aggregates total sales by product without considering the month and year as in the ground truth query.,"SELECT MONTH(orders.OrderDate) AS OrderMonth, products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalSold, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY MONTH(orders.OrderDate), products.ProductID, products.ProductName;","The generated query includes TotalRevenue, which is not present in the ground truth query. Additionally, the ground truth query separates year and month whereas the generated query uses only the month.",None
Which customer has placed the most orders?,"SELECT c.CustomerID, COUNT(o.OrderID) AS TotalOrders FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY TotalOrders DESC LIMIT 1;","```sql
SELECT CustomerID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY CustomerID
ORDER BY OrderCount DESC
LIMIT 1;
```",Both queries effectively count the number of orders per CustomerID and order the result to return the customer with the most orders.,"SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY CustomerID ORDER BY TotalOrders DESC LIMIT 1;",Both queries calculate the customer with the most orders by counting OrderID per CustomerID and sorting in descending order to get the top one. The JOIN in the ground truth is unnecessary if all orders have valid CustomerIDs.,both
What is the average order fulfillment time in April 2023?,"SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE OrderDate BETWEEN '2023-04-01' AND '2023-04-30';","```sql
SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
WHERE OrderDate >= '2023-04-01' AND OrderDate < '2023-05-01';
```","Both queries calculate the average order fulfillment time for April 2023 using different date filtering methods (one with BETWEEN and the other with >= and <), but both effectively cover the month of April.","SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-04-30'","The generated SQL query accurately answers the user's question. It calculates the average order fulfillment time for orders placed in April 2023 using the same logic as the ground truth query. Both queries use the DATEDIFF function and the same date range, producing identical results.",both
Which products have the highest discount percentage?,"SELECT ProductID, MAX(Discount) AS MaxDiscount FROM [Order Details] GROUP BY ProductID ORDER BY MaxDiscount DESC;","```sql
SELECT ProductID, MAX(Discount) AS HighestDiscount
FROM [Order Details]
GROUP BY ProductID
ORDER BY HighestDiscount DESC;
```","Both queries group by ProductID, calculate the maximum discount per product, and order the results by the discount in descending order.","SELECT products.ProductName, MAX([Order Details].Discount) * 100 AS MaxDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY MaxDiscount DESC LIMIT 1;","The generated query returns the product name with the highest discount, while the ground truth query finds the ProductID without limiting to only the highest.",Base
Which orders have the highest total discount applied?,"SELECT orders.OrderID, SUM([Order Details].Discount * [Order Details].UnitPrice * [Order Details].Quantity) AS TotalDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID ORDER BY TotalDiscount DESC LIMIT 1","```sql
SELECT OrderID, SUM(Discount) AS TotalDiscount
FROM [Order Details]
GROUP BY OrderID
ORDER BY TotalDiscount DESC
LIMIT 1;
```","The generated SQL query calculates the total discount as the sum of Discount values, while the ground truth query correctly calculates it as Discount multiplied by UnitPrice and Quantity. The generated query does not consider the multiplication, thus not yielding the same result.","SELECT OrderID, SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details] GROUP BY OrderID ORDER BY TotalDiscount DESC LIMIT 5;","The generated query is missing a JOIN with the orders table, which may lead to different results if there are orders without order details. Additionally, the LIMIT 5 in the generated query causes it to return the top 5 results, while the ground truth query returns only the top 1.",None
Calculate the total sales for each supplier.,"SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName;","```sql
SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.SupplierID, suppliers.CompanyName;
```","Both queries calculate the total sales for each supplier. The generated query includes the SupplierID in the SELECT and GROUP BY clauses, which does not affect the result as SupplierID is unique to each CompanyName.","SELECT p.SupplierID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;","The generated query groups by SupplierID, while the ground truth query groups by CompanyName, which may yield different results depending on the dataset and join conditions.",Base
What is the return rate of customers from the previous year?,SELECT (COUNT(DISTINCT orders.CustomerID) WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2021-01-01' AND '2021-12-31') AS customer_return_rate,"```sql
SELECT 
    (COUNT(DISTINCT orders.CustomerID) 
     WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') / 
    (COUNT(DISTINCT orders.CustomerID) 
     WHERE orders.OrderDate < '2023-01-01') AS return_rate
FROM orders;
```","The generated query compares customers from 2023 against those before 2023. The ground truth compares 2022 against 2021, which is what the question asks for: the previous year.",SELECT COUNT(DISTINCT CASE WHEN o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' THEN o.CustomerID END) * 100.0 / COUNT(DISTINCT CASE WHEN o.OrderDate < '2022-01-01' THEN o.CustomerID END) AS return_rate FROM orders o,"The generated query calculates the return rate as a percentage of those returning from any time before 2022, whereas the ground truth query specifies the return rate from the year 2021 only.",None
Which employee has handled the highest number of on-time deliveries?,"SELECT EmployeeID, COUNT(OrderID) AS OnTimeCount FROM orders WHERE ShippedDate <= RequiredDate GROUP BY EmployeeID ORDER BY OnTimeCount DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OnTimeDeliveries
FROM orders
WHERE ShippedDate <= RequiredDate
GROUP BY EmployeeID
ORDER BY OnTimeDeliveries DESC
LIMIT 1;
```","Both queries group by EmployeeID, count on-time deliveries where ShippedDate is on or before RequiredDate, and order by the count descending, limiting to the top result.",SELECT EmployeeID FROM orders WHERE ShippedDate <= RequiredDate GROUP BY EmployeeID ORDER BY COUNT(OrderID) DESC LIMIT 1;,"The generated query does not name the count but relies on ORDER BY COUNT(OrderID), potentially resulting in the same outcome but lacking explicit aliasing like the ground truth query.",Base
What is the total quantity ordered for each supplier last month?,"SELECT s.SupplierID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE YEAR(od.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) AND MONTH(od.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY s.SupplierID;","```sql
SELECT p.SupplierID, SUM(od.Quantity) AS TotalQuantityOrdered
FROM [Order Details] od
JOIN products p ON od.ProductID = p.ProductID
WHERE od.OrderID IN (
    SELECT OrderID 
    FROM Orders 
    WHERE OrderDate >= DATEADD(month, -1, GETDATE()) 
      AND OrderDate < GETDATE()
)
GROUP BY p.SupplierID;
```","The generated query does not accurately filter the dates to include the entire previous month. It uses DATEADD which may not align with the month boundaries, and misses the suppliers table which might change the SupplierID context.","SELECT suppliers.CompanyName, SUM([Order Details].Quantity) AS TotalQuantity FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].OrderDate >= DATEADD(month, DATEDIFF(month, 0, GETDATE()) - 1, 0) AND [Order Details].OrderDate < DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0) GROUP BY suppliers.CompanyName;","Both queries calculate the total quantity ordered for each supplier last month. They use different methods for date filtering but achieve the same outcome. The 'Generated SQL Query' groups by CompanyName, while the 'Ground Truth SQL Query' groups by SupplierID; without database context, we assume they align since they share foreign key references.",FT
List top five employees in terms of sales revenue generation.,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 5;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 5;
```","The generated SQL query includes employee first and last names in the SELECT clause, which are not included in the ground truth query.","SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 5;","Both queries calculate the total sales for each employee by summing the revenue from orders they processed, and then order the results by total sales in descending order, limiting the output to the top five employees. The logic and results of the queries are the same, despite minor differences in syntax and alias usage.",FT
How many unique products did the top customer purchase?,"SELECT COUNT(DISTINCT od.ProductID) FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.CustomerID = (SELECT CustomerID FROM (SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Total FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY o.CustomerID ORDER BY Total DESC LIMIT 1) AS TopCustomer);","```sql
SELECT COUNT(DISTINCT [Order Details].ProductID) AS UniqueProducts
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE orders.CustomerID = (
    SELECT CustomerID
    FROM orders
    GROUP BY CustomerID
    ORDER BY SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) DESC
    LIMIT 1
);
```","Both queries calculate the total number of unique products purchased by the top customer based on the total purchase value. The logic and outcome are equivalent, despite structural differences.",SELECT COUNT(DISTINCT [Order Details].ProductID) AS unique_products FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.CustomerID = (SELECT CustomerID FROM orders GROUP BY CustomerID ORDER BY COUNT(OrderID) DESC LIMIT 1);,"The generated query finds the top customer by the number of orders, whereas the ground truth query determines the top customer by the highest purchase total. These criteria can yield different top customers, thus affecting the count of unique products purchased.",Base
How many orders were shipped late?,SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;,"```sql
SELECT COUNT(OrderID) AS LateOrders
FROM orders
WHERE ShippedDate > RequiredDate;
```","The generated SQL query accurately answers the user's question and yields the same results as the ground truth query. Both queries count the orders where the ShippedDate is later than the RequiredDate, indicating late shipments.",SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;,"Both queries count the number of orders where the ShippedDate is greater than the RequiredDate, thus yielding the same result.",both
Find the top five products with the highest sales volume.,"SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY TotalSold DESC FETCH FIRST 5 ROWS ONLY;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSalesVolume
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSalesVolume DESC
LIMIT 5;
```","The generated SQL query selects both ProductID and ProductName in the GROUP BY clause, while the ground truth query only uses ProductID in the GROUP BY clause. This could lead to differences in execution depending on how the database handles the grouping.","SELECT ProductName, SUM(Quantity) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName ORDER BY TotalSales DESC LIMIT 5;","Both queries aim to retrieve the top five products with the highest sales volume by summing the Quantity from the Order Details and associating it with ProductName. They employ SUM, GROUP BY, and ORDER BY with descending order, and limit the result to five products. The main difference is in the syntax for limiting results (LIMIT vs. FETCH FIRST), but both achieve the same outcome.",FT
What is the distribution of orders among different shipping methods?,"SELECT orders.ShipVia, COUNT(*) AS order_count FROM orders GROUP BY orders.ShipVia","```sql
SELECT ShipVia, COUNT(OrderID) AS order_count 
FROM orders 
GROUP BY ShipVia
```",Both queries calculate the count of orders grouped by 'ShipVia'. 'COUNT(OrderID)' is functionally equivalent to 'COUNT(*)' here since 'OrderID' is a non-null primary key.,"SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia ORDER BY OrderCount DESC;","Both queries count orders per shipping method using 'ShipVia' and 'GROUP BY', which answers the user's question about order distribution.",both
Which category has the highest average units on order?,"SELECT CategoryID, AVG(UnitsOnOrder) AS AverageOnOrder FROM products GROUP BY CategoryID ORDER BY AverageOnOrder DESC LIMIT 1;","```sql
SELECT p.CategoryID, AVG(p.UnitsOnOrder) AS AverageUnitsOnOrder
FROM products p
GROUP BY p.CategoryID
ORDER BY AverageUnitsOnOrder DESC
LIMIT 1;
```","Both queries calculate the average units on order per category, order in descending order, and limit to one, achieving the same result.","SELECT CategoryID, AVG(UnitsOnOrder) AS AverageUnitsOnOrder FROM products GROUP BY CategoryID ORDER BY AverageUnitsOnOrder DESC LIMIT 1;","Both queries perform the same operations and will yield the same result. The difference is only in the alias used for the average calculation, which does not affect the result.",both
What is the average order quantity per customer?,"SELECT AVG(order_quantity) FROM (SELECT o.CustomerID, SUM(od.Quantity) AS order_quantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID) AS customer_orders;","```sql
SELECT customers.CustomerID, AVG([Order Details].Quantity) AS AverageOrderQuantity
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID;
```",Both queries correctly calculate the average order quantity per customer by grouping order quantities by customer and averaging them.,"SELECT CustomerID, AVG([Order Details].Quantity) AS AverageQuantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY CustomerID;","The generated query calculates the average of quantities per customer, while the ground truth query calculates the average of total order quantities per customer.",Base
What is the total freight cost incurred in the past quarter?,"SELECT SUM(Freight) FROM orders WHERE OrderDate BETWEEN DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' AND DATE_TRUNC('quarter', CURRENT_DATE);","```sql
SELECT SUM(Freight) AS TotalFreightCost
FROM orders
WHERE OrderDate >= DATEADD(quarter, -1, GETDATE());
```","The generated SQL query includes orders from the day of the query, while the ground truth correctly calculates the previous quarter's dates.",SELECT SUM(orders.Freight) AS TotalFreightCost FROM orders WHERE orders.OrderDate > CURRENT_DATE - INTERVAL '3 MONTH',"The generated query checks for the last 3 months individually based on the current date, while the ground truth query checks for the previous full quarter.",None
Which country has the highest total sales revenue?,"SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT ShipCountry, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales
FROM orders O
JOIN [Order Details] OD ON O.OrderID = OD.OrderID
GROUP BY ShipCountry
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries calculate total sales per country using the same formula, group by ShipCountry, and select the country with the highest total sales. They match in logic and output.","SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry ORDER BY TotalSales DESC LIMIT 1;",The generated SQL query and the ground truth query are identical and will yield the same results.,both
What is the reorder status of each product based on current stock?,"SELECT ProductID, (UnitsInStock - ReorderLevel) AS ReorderStatus FROM products;","```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel, 
       CASE 
           WHEN UnitsInStock <= ReorderLevel THEN 'Reorder Required' 
           ELSE 'Sufficient Stock' 
       END AS ReorderStatus
FROM products;
```","The generated query categorizes products as 'Reorder Required' or 'Sufficient Stock', while the ground truth query calculates the difference between UnitsInStock and ReorderLevel, not addressing reorder status explicitly.","SELECT ProductName, (UnitsInStock < ReorderLevel) AS ReorderNeeded FROM products;","The generated query provides a boolean value indicating if reorder is needed, while the ground truth provides a numeric status showing the difference between UnitsInStock and ReorderLevel.",None
Which products have been discontinued but still have stock?,SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0,"```sql
SELECT products.ProductID, products.ProductName 
FROM products 
WHERE products.Discontinued = 1 AND products.UnitsInStock > 0
```","Both queries retrieve products that are discontinued and still have stock, differing only in selected columns.",SELECT p.ProductName FROM products p WHERE p.Discontinued = 1 AND p.UnitsInStock > 0;,"The generated SQL query and the ground truth query both filter the 'products' table to find products that are discontinued and still have units in stock, yielding the same result.",both
Which products are sold below their reorder level and need to be prioritized for restocking?,"SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 0 ORDER BY UnitsInStock, UnitsOnOrder ASC;","```sql
SELECT p.ProductID, p.ProductName, p.UnitsInStock, p.ReorderLevel
FROM products p
WHERE p.UnitsInStock < p.ReorderLevel;
```",The generated query does not consider if the product is discontinued and does not order the results.,SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,The generated query does not check if the product is not discontinued and lacks the ordering step present in the ground truth query.,None
Find the average order value for each employee.,"SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","Both queries calculate the average order value per employee by joining employees, orders, and order details tables, grouping by EmployeeID, and calculating the average of UnitPrice * Quantity * (1 - Discount). The generated query includes additional columns (FirstName, LastName) in the GROUP BY, but this does not affect the average calculation.","SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","Both queries select the average order value for each employee by joining the employees, orders, and Order Details tables, calculating the average of UnitPrice * Quantity * (1 - Discount), and grouping by EmployeeID.",both
What is the customer retention rate over the last month?,"SELECT (COUNT(DISTINCT o.CustomerID) * 100.0 / COALESCE((SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate < DATE_TRUNC('month', CURRENT_DATE)), 1)) AS RetentionRate FROM orders o WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE);","```sql
SELECT 
    (COUNT(DISTINCT orders.CustomerID) 
     WHERE orders.OrderDate >= DATEADD(month, -1, GETDATE()) AND orders.OrderDate < GETDATE()) * 1.0 / 
    (COUNT(DISTINCT orders.CustomerID) 
     WHERE orders.OrderDate < DATEADD(month, -1, GETDATE())) AS CustomerRetentionRate
FROM orders
```","The generated query uses DATEADD and GETDATE functions which are non-standard and incorrectly structured, leading to a syntax error. It also attempts to calculate retention by dividing two counts without proper subqueries and date filtering. The ground truth query uses standard functions like DATE_TRUNC and ensures accurate calculation by comparing customers from the previous month to the current month.",SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-09-01' AND '2023-09-30' THEN orders.CustomerID END) / CAST(COUNT(DISTINCT CASE WHEN orders.OrderDate < '2023-09-01' THEN orders.CustomerID END) AS DECIMAL)) * 100 AS RetentionRate FROM orders WHERE orders.OrderDate < '2023-10-01';,"The generated query calculates retention rate by dividing the distinct customers in September by those who made orders before September. The ground truth calculates from the start of the current month using a hard-coded September date, not matching the dynamic nature intended.",None
Calculate total revenue lost due to discounts.,SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount) AS TotalDiscountLoss FROM [Order Details];,"```sql
SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount) AS TotalRevenueLost
FROM [Order Details];
```","Both queries calculate the same value, the total revenue lost due to discounts, using identical expressions. The difference is only in the alias used for the result.",SELECT SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscountLoss FROM [Order Details] od;,Both queries calculate the sum of the discount loss using the same arithmetic operations on the same columns and table.,both
What are the top 5 products with the highest inventory turnover ratio this month?,"SELECT products.ProductID, products.ProductName, COALESCE(SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0), 0) AS InventoryTurnover FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE DATEPART(MONTH, [Order Details].OrderDate) = DATEPART(MONTH, CURRENT_DATE) AND DATEPART(YEAR, [Order Details].OrderDate) = DATEPART(YEAR, CURRENT_DATE) GROUP BY products.ProductID, products.ProductName ORDER BY InventoryTurnover DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, 
       SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE MONTH(GETDATE()) = MONTH(od.OrderID) -- Assuming OrderID contains date information
GROUP BY p.ProductID, p.ProductName
ORDER BY InventoryTurnoverRatio DESC
LIMIT 5;
```","The generated SQL assumes 'OrderID' contains date information, which is unlikely. The ground truth uses 'OrderDate', which is correct for date filtering. The ground truth also handles division by zero with COALESCE and NULLIF, which is more robust.","SELECT p.ProductName, (SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0)) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE EXTRACT(MONTH FROM CURRENT_DATE) = EXTRACT(MONTH FROM od.OrderDate) AND EXTRACT(YEAR FROM CURRENT_DATE) = EXTRACT(YEAR FROM od.OrderDate) GROUP BY p.ProductName ORDER BY InventoryTurnover DESC LIMIT 5;","Both queries calculate the inventory turnover ratio for products this month, using similar logic with JOIN and GROUP BY on products and order details, then order by the calculated ratio and limit to the top 5 products. The differences are in function names for extracting date parts and COALESCE usage, which do not impact the overall result.",FT
Identify the average order quantity for each product.,"SELECT products.ProductName, AVG([Order Details].Quantity) AS AvgOrderQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName","```sql
SELECT ProductID, AVG(Quantity) AS AverageOrderQuantity
FROM [Order Details]
GROUP BY ProductID;
```","The generated query returns the average order quantity by ProductID, but it does not include the product's name, whereas the ground truth query joins with the products table to return the product names.","SELECT ProductID, AVG(Quantity) AS AverageQuantity FROM [Order Details] GROUP BY ProductID;","The generated query calculates the average quantity per ProductID, but it does not join with the products table to retrieve the ProductName, which is included in the ground truth.",None
What is the correlation between the freight cost and the fulfillment time?,"SELECT CORR(Freight, DATEDIFF(ShippedDate, OrderDate)) AS Correlation FROM orders;","```sql
SELECT CORR(Freight, DATEDIFF(ShippedDate, OrderDate) as Correlation
FROM orders;
```",The generated SQL query has a syntax error. It misses a closing parenthesis for the CORR function before the 'as Correlation' clause.,"SELECT CORR(Freight, DATEDIFF(ShippedDate, OrderDate)) AS Correlation FROM orders;",Both the generated SQL query and the ground truth SQL query are identical and compute the correlation between Freight and the difference between ShippedDate and OrderDate from the 'orders' table.,FT
Which city had the highest shipping costs?,"SELECT ShipCity, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCity ORDER BY TotalFreight DESC;","```sql
SELECT ShipCity, SUM(Freight) AS TotalShippingCost
FROM orders
GROUP BY ShipCity
ORDER BY TotalShippingCost DESC
LIMIT 1;
```","The generated query accurately returns only the city with the highest shipping cost using LIMIT 1, whereas the ground truth query does not restrict the output to the city with the highest cost.","SELECT ShipCity, MAX(Freight) AS MaxFreight FROM orders GROUP BY ShipCity ORDER BY MaxFreight DESC LIMIT 1;","The generated query finds the city with the single highest freight cost, while the ground truth query finds the city with the highest total freight cost. These are different calculations.",None
Which products have a unit price greater than $50?,SELECT ProductName FROM products WHERE UnitPrice > 50;,"```sql
SELECT ProductID, ProductName, UnitPrice 
FROM products 
WHERE UnitPrice > 50;
```","The generated query selects ProductID along with ProductName and UnitPrice, while the ground truth only selects ProductName. Thus, they yield different columns.",SELECT ProductName FROM products WHERE UnitPrice > 50;,Both queries are identical and correctly select products with a unit price greater than $50.,FT
Which products have the highest discount rate on average?,"SELECT od.ProductID, AVG(od.Discount) AS AvgDiscount FROM [Order Details] od GROUP BY od.ProductID ORDER BY AvgDiscount DESC","```sql
SELECT ProductID, AVG(Discount) AS AverageDiscount
FROM [Order Details]
GROUP BY ProductID
ORDER BY AverageDiscount DESC;
```",Both the generated and ground truth queries calculate the average discount per product and sort the results in descending order by the average discount.,"SELECT p.ProductID, p.ProductName, AVG(od.Discount) AS AvgDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY AvgDiscount DESC;",Both queries calculate the average discount for each product and order by the average discount in descending order. The inclusion of ProductName in the generated query does not affect the correctness of the result in terms of discount rates.,both
How many units of discontinued products are still in stock?,SELECT SUM(products.UnitsInStock) AS total_units_in_stock FROM products WHERE products.Discontinued = 1,"```sql
SELECT SUM(products.UnitsInStock) AS total_units_discontinued
FROM products
WHERE products.Discontinued = 1;
```",Both queries calculate the sum of units in stock for products marked as discontinued by checking the Discontinued field equals 1.,SELECT SUM(UnitsInStock) FROM products WHERE Discontinued = 1;,Both queries calculate the sum of UnitsInStock for discontinued products. They effectively yield the same result.,both
Which products have not been ordered in the past six months?,"SELECT p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID LEFT JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate IS NULL OR o.OrderDate < DATEADD(MONTH, -6, CURRENT_DATE);","```sql
SELECT p.ProductID, p.ProductName
FROM products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
LEFT JOIN orders o ON od.OrderID = o.OrderID AND o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)
WHERE od.OrderID IS NULL;
```","The generated query checks for orders within the last six months, but only excludes products ordered within that timeframe. The ground truth excludes products if their associated orders are either non-existent or older than six months.","SELECT p.ProductName FROM products p LEFT JOIN order_details od ON p.ProductID = od.ProductID LEFT JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate IS NULL OR o.OrderDate < DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY p.ProductID, p.ProductName HAVING COUNT(o.OrderID) = 0;","The generated SQL query includes a HAVING clause COUNT(o.OrderID) = 0, which is unnecessary and might filter out products incorrectly. The ground truth query correctly checks for products that have not been ordered without this clause.",None
Which cities have the most sales attributed to each employee?,"SELECT e.EmployeeID, o.ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CitySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, o.ShipCity","```sql
SELECT e.FirstName, e.LastName, o.ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, o.ShipCity
ORDER BY e.EmployeeID, TotalSales DESC;
```","The generated query orders results by each employee with descending total sales per city, but does not select the top city per employee. The ground truth query summarizes sales per employee and city but does not rank them.","SELECT employees.City, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.City;","The generated query groups by employees.City, while the ground truth groups by EmployeeID and ShipCity, answering different questions.",None
What is the impact of shipping costs on the sales of each employee?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, 
       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, 
       SUM(o.Freight) AS TotalShippingCosts
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","The generated query includes additional columns (FirstName and LastName) not present in the ground truth query, which may not be necessary for analyzing the impact of shipping costs on sales.","SELECT employees.EmployeeID, SUM((orders.Freight + [Order Details].UnitPrice * [Order Details].Quantity)) AS ShippingImpact FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;","The generated query incorrectly calculates 'ShippingImpact' by combining Freight with sales amount, while the ground truth calculates sales and freight separately to determine their impact.",None
List the suppliers whose average order lead time exceeds 20 days.,"SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID GROUP BY p.SupplierID HAVING AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) > 20;","```sql
SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.SupplierID
HAVING AvgLeadTime > 20;
```",Both queries correctly calculate the average order lead time for each supplier and filter those whose average exceeds 20 days. The differences in column naming do not affect the overall logic or results.,"SELECT products.SupplierID FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.SupplierID HAVING AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) > 20;","The generated query does not join the suppliers table, so it may miss suppliers with no products. It only lists SupplierID without calculating the average lead time.",Base
How many orders include a discount greater than 20%?,SELECT COUNT(DISTINCT [Order Details].OrderID) AS HighDiscountOrders FROM [Order Details] WHERE [Order Details].Discount > 0.2;,"```sql
SELECT COUNT(DISTINCT OrderID) AS OrdersWithDiscount
FROM [Order Details]
WHERE Discount > 0.20;
```",Both queries count distinct OrderID where the Discount is greater than 0.20. They yield the same results.,SELECT COUNT(DISTINCT od.OrderID) FROM [Order Details] od WHERE od.Discount > 0.2;,Both queries calculate the count of distinct OrderIDs from the 'Order Details' table where the discount is greater than 20%.,both
How many orders were shipped after the required date?,SELECT COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;,"```sql
SELECT COUNT(*) AS OrdersShippedLate 
FROM orders 
WHERE ShippedDate > RequiredDate;
```","Both queries count the number of orders where the ShippedDate is greater than the RequiredDate, therefore they yield the same results.",SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;,"Both queries count orders where ShippedDate is greater than RequiredDate, providing the same results.",both
What is the correlation between freight cost and order sales value?,"SELECT CORR(Freight, TotalSales) AS FreightSalesCorrelation FROM ( SELECT o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, o.Freight FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID );","```sql
SELECT 
    CORR(Freight, (UnitPrice * Quantity * (1 - Discount)) AS correlation 
FROM 
    orders 
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
```",The generated query is missing the aggregation needed to calculate TotalSales per order before computing the correlation.,"SELECT CORR(Freight, OrderValue) AS FreightOrderValueCorrelation FROM (SELECT o.OrderID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS OrderValue, o.Freight FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID) AS OrderStats;","Both queries calculate the correlation between freight cost and order sales value by summing the total sales value per order and computing the correlation with freight, despite minor differences in naming conventions.",FT
Calculate the total sales for orders shipped late.,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.ShippedDate > orders.RequiredDate;,"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE orders.ShippedDate > orders.RequiredDate;
```","Both queries perform the same join operation and filter condition to calculate the total sales for orders shipped late, even though the join syntax is slightly different.",SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalLateSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.ShippedDate > o.RequiredDate;,"The generated SQL query calculates the total sales for orders shipped late using the same logic as the ground truth query, by checking where ShippedDate is greater than RequiredDate and summing up the total sales.",both
What is the average shipping cost per order in each month of the year?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY Month ORDER BY Month;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AverageShippingCost
FROM orders
GROUP BY Month
ORDER BY Month;
```","Both queries calculate the average shipping cost per month by grouping by the month extracted from the OrderDate and averaging Freight, despite using different functions to extract the month.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","Both queries calculate the average shipping cost per order for each month by grouping data by month, using different functions (DATE_FORMAT vs. DATE_TRUNC) to achieve the same grouping.",both
Calculate the year-to-date average stock levels for each product category.,"SELECT c.CategoryID, AVG(p.UnitsInStock) AS AvgStock FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;","```sql
SELECT p.CategoryID, AVG(p.UnitsInStock) AS AverageStockLevel
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.OrderID IN (
    SELECT OrderID
    FROM [Order Details]
    WHERE YEAR(OrderDate) = YEAR(CURDATE())
)
GROUP BY p.CategoryID;
```","The generated query calculates the average stock levels for products ordered this year, not the year-to-date average stock levels for each product category. It incorrectly joins with the 'Order Details' table and filters by OrderDate. The ground truth query correctly calculates the average stock levels for each category without considering order details.","SELECT p.CategoryID, AVG(p.UnitsInStock) AS AvgStock FROM products p GROUP BY p.CategoryID;",The generated query may not accurately calculate the year-to-date average for each product category because it doesn't join categories. The ground truth query correctly joins 'products' and 'categories' to ensure calculations are made per each existing category.,None
What is the month with the highest number of orders placed?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY DATE_TRUNC('month', OrderDate) ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY OrderMonth
ORDER BY OrderCount DESC
LIMIT 1;
```",The Generated Query uses DATE_FORMAT which may not be supported in all SQL dialects. Ground Truth uses DATE_TRUNC which standardizes the month format.,"SELECT EXTRACT(MONTH FROM OrderDate) AS OrderMonth, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY OrderMonth ORDER BY TotalOrders DESC LIMIT 1;","Both queries group by month and count the orders, ordering by the highest count, effectively finding the month with the highest number of orders.",FT
Which employees have handled orders with a shipping cost greater than a specified amount?,"SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.Freight > ? GROUP BY e.EmployeeID, e.FirstName, e.LastName","```sql
SELECT DISTINCT e.EmployeeID, e.FirstName, e.LastName
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.Freight > [specified_amount];
```","Both queries select the same columns and apply the same condition on Freight, with the difference being the use of DISTINCT in the generated query and GROUP BY in the ground truth. Both achieve the same result of listing unique employees who handled orders with a shipping cost greater than the specified amount.",SELECT DISTINCT employees.EmployeeID FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.Freight > specified_amount;,The generated SQL query only selects EmployeeID and doesn't account for first and last names.,Base
Determine the average quantity of products ordered per order.,SELECT AVG(od.Quantity) AS AvgQuantity FROM [Order Details] od INNER JOIN orders o ON od.OrderID = o.OrderID;,"```sql
SELECT AVG(OrderDetails.TotalQuantity) AS AverageQuantityPerOrder
FROM (
    SELECT OrderID, SUM(Quantity) AS TotalQuantity
    FROM [Order Details]
    GROUP BY OrderID
) AS OrderDetails;
```","Both queries compute the average quantity of products ordered per order. The generated query calculates the total quantity per OrderID and averages these totals. The ground truth queries each order detail and finds the average directly, but both yield the same overall result.",SELECT AVG(oi.Quantity) FROM [Order Details] oi;,Both queries calculate the average quantity from the 'Order Details' table. The join in the ground truth query doesn't affect the average calculation as long as all quantities are from valid orders.,both
Calculate the total sales per month.,"SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_FORMAT(o.OrderDate, '%Y-%m');","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries calculate total sales per month by joining orders and order details, using the same logic and grouping.","SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_FORMAT(o.OrderDate, '%Y-%m');","The generated SQL query and the ground truth SQL query are identical, meaning they will yield the same results and correctly calculate the total sales per month.",both
Which product had the highest total sales last year?,"SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] WHERE YEAR(OrderID IN (SELECT OrderID FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1)) GROUP BY ProductID ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM [Order Details] od
JOIN orders o ON od.OrderID = o.OrderID
WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1
GROUP BY od.ProductID
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries calculate the total sales for each product from last year and correctly order them to find the highest, yielding the same result.","SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE YEAR(od.ProductID) = YEAR(CURDATE()) - 1 GROUP BY p.ProductName ORDER BY TotalSales DESC LIMIT 1","The generated query calculates total sales using Quantity and UnitPrice but does not account for discounts. Additionally, it incorrectly checks the year based on ProductID instead of OrderDate. The ground truth query correctly summarizes sales, accounting for discounts and filtering by OrderDate for the correct year.",Base
What is the total freight cost for shipped orders last month?,SELECT SUM(Freight) AS TotalFreight FROM orders WHERE MONTH(ShippedDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(ShippedDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH);,"```sql
SELECT SUM(Freight) AS TotalFreightCost
FROM orders
WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH)
AND YEAR(OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH)
AND ShippedDate IS NOT NULL;
```","The generated query checks the order date with a non-null ShippedDate, while the ground truth query checks the shipped date itself, which directly answers the user's question.",SELECT SUM(Freight) AS TotalFreight FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) AND MONTH(OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND ShippedStatus = 'Shipped';,"The generated query filters based on 'ShippedStatus' and 'OrderDate', while the ground truth uses 'ShippedDate' to determine last month's shipped orders.",None
How many products have a unit price greater than the average unit price?,SELECT COUNT(ProductID) AS Product_Count FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);,"```sql
SELECT COUNT(*) 
FROM products 
WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);
```",Both queries count the number of products with a unit price greater than the average unit price. They will yield the same result because COUNT(*) and COUNT(ProductID) effectively serve the same purpose when filtering by a condition without null values in this context.,SELECT COUNT(ProductID) FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);,Both queries accurately count products with a unit price greater than the average unit price and yield the same result.,both
Which employee managed the most orders last month?,"SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE() - INTERVAL 1 MONTH, '%Y-%m') GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month'
  AND OrderDate < DATE_TRUNC('month', CURRENT_DATE)
GROUP BY EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```",Both queries filter for orders from the previous month and group by EmployeeID to find the one with the most orders.,"SELECT employees.EmployeeID, COUNT(orders.OrderID) AS order_count FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate > '2023-09-30' AND orders.OrderDate < '2023-11-01' GROUP BY employees.EmployeeID ORDER BY order_count DESC LIMIT 1","The generated query uses specific dates instead of dynamically calculating the previous month, which may not align with the ground truth for different months.",Base
List all orders with a discount greater than 25%.,SELECT o.OrderID FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0.25;,"```sql
SELECT o.OrderID, od.ProductID, od.UnitPrice, od.Quantity, od.Discount
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE od.Discount > 0.25;
```","Both queries filter orders with a discount greater than 25%. The generated query includes additional columns, but it still lists all relevant orders.",SELECT OrderID FROM [Order Details] WHERE Discount > 0.25;,Both queries select OrderID from [Order Details] with a Discount greater than 25%. The additional JOIN in the ground truth query does not affect the result.,both
What is the average discount given per order?,SELECT AVG(od.Discount) AS AvgDiscountPerOrder FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details]
GROUP BY OrderID;
```","The generated query calculates the average discount per order line, not per order. The ground truth aggregates discounts first by OrderID, then averages these. The GROUP BY in the generated query is incorrect as it calculates a row-level average.",SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details],"The generated query calculates the average discount across all order details, while the ground truth query calculates the average discount per order by considering only orders that exist in both Order Details and orders tables.",None
Which day of the week has the highest order volume?,"SELECT EXTRACT(DOW FROM OrderDate) AS DayOfWeek, COUNT(OrderID) AS OrderCount FROM orders GROUP BY DayOfWeek ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT DAYOFWEEK(OrderDate) AS DayOfWeek, COUNT(OrderID) AS OrderVolume
FROM orders
GROUP BY DayOfWeek
ORDER BY OrderVolume DESC
LIMIT 1;
```","The generated SQL query uses DAYOFWEEK, which in some systems returns 1 for Sunday, whereas EXTRACT(DOW) from the ground truth returns 0 for Sunday. This could lead to different mappings of days to order volumes depending on the SQL dialect used.","SELECT DAYNAME(OrderDate) AS DayOfWeek, COUNT(OrderID) AS OrderCount FROM orders GROUP BY DAYNAME(OrderDate) ORDER BY OrderCount DESC LIMIT 1;","Both queries group by the day of the week and order by order count in descending order, limiting the result to the highest count. Despite using different functions to extract the day, they achieve the same goal.",FT
Identify the product with the lowest performance in terms of sales in October 2023.,"SELECT products.ProductName, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-10-31' GROUP BY products.ProductName ORDER BY product_performance ASC LIMIT 1;","```sql
SELECT products.ProductID, SUM([Order Details].Quantity) AS product_performance 
FROM [Order Details] 
JOIN products ON [Order Details].ProductID = products.ProductID 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-10-31' 
GROUP BY products.ProductID 
ORDER BY product_performance ASC 
LIMIT 1;
```","The generated SQL query selects ProductID instead of ProductName, which may not meet the user's intent to identify the product by name.","SELECT ProductID, SUM(Quantity) AS TotalSales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-10-31' GROUP BY ProductID ORDER BY TotalSales ASC LIMIT 1;","The generated query identifies the product with the lowest sales but returns ProductID, while the ground truth query returns ProductName. The results differ in terms of output columns, despite both ranking by sales performance.",None
What are the details of orders where a discount was applied?,SELECT * FROM [Order Details] WHERE Discount > 0;,"```sql
SELECT * 
FROM [Order Details] 
WHERE Discount > 0;
```",Both queries select all columns from the 'Order Details' table where the Discount is greater than 0. They will yield the same results.,SELECT * FROM [Order Details] WHERE Discount > 0;,"The generated SQL query and the ground truth SQL query are identical, both selecting all columns from the 'Order Details' table where the Discount is greater than 0. Therefore, they will yield the same results.",both
What is the total sales revenue for each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Total_Sales
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    Month
ORDER BY 
    Month;
```",Both queries calculate the total sales revenue per month by joining the orders and [Order Details] tables and grouping by the formatted month from OrderDate. The difference in alias names and the explicit use of ORDER BY in the generated query do not affect the correctness or the result.,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;","Both queries calculate the total sales revenue per month by joining 'orders' with 'Order Details' and aggregating data. The only differences are alias names and the use of DATE_FORMAT directly in the GROUP BY clause versus using an alias, which does not affect the outcome.",both
Which city has the highest employee sales?,"SELECT employees.City, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CitySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.City ORDER BY CitySales DESC;","```sql
SELECT e.City, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.City
ORDER BY TotalSales DESC
LIMIT 1;
```","The generated query has a LIMIT 1 clause which returns only one result, whereas the ground truth query does not limit the number of results returned.","SELECT employees.City, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.City ORDER BY TotalSales DESC LIMIT 1","The generated SQL query includes 'LIMIT 1' to return the city with the highest employee sales, which aligns with the user's request. The ground truth query lists all cities ordered by sales, but the result is the same for identifying the top city.",FT
Which employees have generated sales in every month of 2023?,SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY e.EmployeeID HAVING COUNT(DISTINCT EXTRACT(MONTH FROM o.OrderDate)) = 12;,"```sql
SELECT e.EmployeeID, e.FirstName, e.LastName
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY e.EmployeeID, e.FirstName, e.LastName
HAVING COUNT(DISTINCT MONTH(o.OrderDate)) = 12;
```","The generated query selects and returns the FirstName and LastName, while the ground truth query only returns EmployeeID. The result sets will differ in structure.","SELECT e.FirstName, e.LastName FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY e.EmployeeID HAVING COUNT(DISTINCT EXTRACT(MONTH FROM o.OrderDate)) = 12","The generated query doesn't check if sales were actually made; it only checks for orders by employees. Also, it doesn't handle distinct sales per month through order details.",None
Which customers have placed orders more than five times?,"SELECT customers.CustomerID, COUNT(orders.OrderID) AS OrderCount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 5","```sql
SELECT CustomerID
FROM orders
GROUP BY CustomerID
HAVING COUNT(OrderID) > 5;
```","Both queries correctly identify customers who have placed more than five orders by grouping on CustomerID and using HAVING COUNT(OrderID) > 5, yielding the same result set.","SELECT COUNT(OrderID) AS OrderCount, CustomerID FROM orders GROUP BY CustomerID HAVING OrderCount > 5;","Both queries accurately count the number of orders for each customer. The condition HAVING COUNT(OrderID) > 5 ensures only customers with more than five orders are selected. The tables involved suggest orders can be linked to customers directly, which both queries effectively accomplish.",both
Calculate the average number of orders for each month in 2021.,"SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) / 12 AS AverageOrders FROM orders WHERE OrderDate BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY EXTRACT(MONTH FROM OrderDate)","```sql
SELECT 
    EXTRACT(YEAR FROM OrderDate) AS Year,
    EXTRACT(MONTH FROM OrderDate) AS Month,
    COUNT(OrderID) AS TotalOrders,
    AVG(COUNT(OrderID)) OVER () AS AverageOrders
FROM 
    orders
WHERE 
    OrderDate BETWEEN '2021-01-01' AND '2021-12-31'
GROUP BY 
    Year, Month
ORDER BY 
    Year, Month;
```","The generated query calculates an average using window functions wrongfully, while the ground truth calculates the average by dividing the total orders by 12 for each month. The methodologies differ, and the results would not match as intended.","SELECT MONTH(orders.OrderDate) as month, COUNT(orders.OrderID) / COUNT(DISTINCT MONTH(orders.OrderDate)) as avg_orders FROM orders WHERE YEAR(orders.OrderDate) = 2021 GROUP BY MONTH(orders.OrderDate)",The generated query averages order counts by dividing by the number of distinct months rather than the fixed number 12. This would yield inaccurate results if the data doesn't cover all 12 months equally.,None
Calculate the customer lifetime value for each customer in California.,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Region = 'CA' GROUP BY customers.CustomerID","```sql
SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
JOIN customers ON orders.CustomerID = customers.CustomerID
WHERE customers.Region = 'California'
GROUP BY customers.CustomerID
```","The generated SQL query filters by 'California', while the ground truth query uses 'CA'. These differences in region codes may lead to different results.","SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS lifetime_value FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE c.Region = 'California' GROUP BY c.CustomerID","The generated query filters on 'California' for the Region, while the ground truth query uses 'CA'. Additionally, the table references differ in their naming conventions.",None
What is the average salary of employees grouped by title?,"SELECT Title, AVG(Salary) AS AvgSalary FROM employees GROUP BY Title;","```sql
SELECT Title, AVG(Salary) AS AverageSalary
FROM employees
GROUP BY Title;
```","Both queries calculate the average salary of employees grouped by title, with only a difference in the alias name used for average salary.","SELECT JobTitle, AVG(Salary) AS AverageSalary FROM EmployeeSalaries GROUP BY JobTitle","The queries use different column and table names: 'JobTitle' vs. 'Title', and 'EmployeeSalaries' vs. 'employees'. They may not produce results if the schema is not aligned.",Base
Which supplier has the shortest lead time for deliveries?,"SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC LIMIT 1","```sql
SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time 
FROM orders 
JOIN products ON orders.OrderID = products.ProductID 
GROUP BY products.SupplierID 
ORDER BY supplier_lead_time ASC 
LIMIT 1
```","The generated query incorrectly joins orders with products using OrderID and ProductID. It also misses joining with suppliers and order details to accurately map SupplierID from suppliers. Therefore, it does not return the correct lead time based on the supplier.","SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS Avg_lead_time FROM orders INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID INNER JOIN products ON [Order Details].ProductID = products.ProductID INNER JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY Avg_lead_time ASC LIMIT 1","Both queries calculate the average lead time for each supplier and order by it to find the supplier with the shortest lead time. The only difference is the use of 'SupplierID' vs 'CompanyName' for identification, but they essentially yield the same result.",FT
Calculate the percentage of orders for each shipping method in the last month.,"SELECT ShipVia, COUNT(OrderID) * 100.0 / SUM(COUNT(OrderID)) OVER() AS Percentage FROM orders WHERE DATE_PART('month', OrderDate) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('year', OrderDate) = DATE_PART('year', CURRENT_DATE - INTERVAL '1 month') GROUP BY ShipVia;","```sql
SELECT ShipVia, 
       COUNT(OrderID) * 100.0 / (SELECT COUNT(OrderID) FROM orders WHERE OrderDate >= DATEADD(MONTH, -1, GETDATE())) AS Percentage
FROM orders
WHERE OrderDate >= DATEADD(MONTH, -1, GETDATE())
GROUP BY ShipVia;
```","The generated query calculates the percentage based on orders from the last 30 days using GETDATE(), while the ground truth query calculates percentages for the previous calendar month using DATE_PART.","SELECT ShipVia, COUNT(OrderID) * 100.0 / SUM(COUNT(OrderID)) OVER () AS Percentage FROM orders WHERE DATE_TRUNC('month', OrderDate) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') GROUP BY ShipVia;","Both queries filter orders from the last month, group by ShipVia, and calculate the percentage. They use different approaches to determine last month but yield equivalent filtering.",FT
Which categories have the highest average unit price?,"SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID ORDER BY AveragePrice DESC;","```sql
SELECT CategoryID, AVG(UnitPrice) AS AverageUnitPrice
FROM products
GROUP BY CategoryID
ORDER BY AverageUnitPrice DESC;
```","Both queries calculate the average unit price per category and order the results in descending order, which accurately answers the user's question.","SELECT CategoryID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY CategoryID ORDER BY AvgUnitPrice DESC;",Both queries calculate the average unit price per category and order the results in descending order of average price. The difference in alias names does not affect the resulting data.,both
What is the total value of products in stock?,SELECT SUM(UnitPrice * UnitsInStock) FROM products;,"```sql
SELECT SUM(UnitPrice * UnitsInStock) AS TotalValueInStock
FROM products;
```","Both queries calculate the sum of the product of UnitPrice and UnitsInStock from the products table, giving the total value of products in stock. The generated query adds an alias for clarity, but both yield the same result.",SELECT SUM(UnitPrice * UnitsInStock) AS TotalStockValue FROM products WHERE UnitsInStock > 0;,Both queries result in the same calculation since multiplying by zero stock doesn't affect the sum. 'UnitsInStock > 0' is implied.,both
What is the trend of average freight cost over the last year?,"SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, AVG(Freight) AS AvgFreight FROM orders WHERE OrderDate >= CURRENT_DATE - INTERVAL '1 year' GROUP BY Month ORDER BY Month DESC;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
    AVG(Freight) AS AverageFreightCost
FROM 
    orders
WHERE 
    OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
GROUP BY 
    Month
ORDER BY 
    Month;
```","The Generated SQL orders results in ascending order, while the Ground Truth orders them in descending order.","SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(Freight) AS AverageFreight FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY Year, Month ORDER BY Year, Month;","The generated query extracts year and month separately and groups by both, while the ground truth groups by the concatenated YYYY-MM format and orders by Month in descending order.",None
Identify customers who have received a discount of more than 20% on any product.,SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0.2;,"```sql
SELECT DISTINCT c.CustomerID, c.CompanyName, c.ContactName
FROM customers c
JOIN [Order Details] od ON c.CustomerID = od.CustomerID
WHERE od.Discount > 0.20;
```","The generated query incorrectly joins 'Order Details' directly with 'customers', using 'CustomerID' instead of 'OrderID'. The ground truth query uses the 'orders' table to join 'customers' with 'Order Details' using 'OrderID', which is the correct relationship.",SELECT DISTINCT CustomerID FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0.2;,"Both queries identify customers who received more than a 20% discount. The generated query gets CustomerID from orders, implicitly linking to customers, yielding the same result.",FT
What is the total revenue generated from all products?,SELECT SUM(Quantity * UnitPrice) AS TotalRevenue FROM [Order Details];,"```sql
SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue
FROM [Order Details];
```","Both queries calculate the total revenue by summing the product of Quantity and UnitPrice from the [Order Details] table, yielding the same result.",SELECT SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od;,"The generated query accounts for discounts when calculating total revenue, unlike the ground truth query, which does not consider discounts.",Base
What is the percentage of orders delivered on or before the required date each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 100.0 * COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT 
    YEAR(OrderDate) AS Year, 
    MONTH(OrderDate) AS Month, 
    COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate
FROM 
    orders
GROUP BY 
    YEAR(OrderDate), 
    MONTH(OrderDate);
```","Both queries calculate the on-time delivery rate by comparing ShippedDate and RequiredDate and grouping by year and month. The format of the month representation differs slightly, but the results are analogous.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;","Both queries calculate the percentage of orders delivered on or before the required date each month. They group the data by month extracted from OrderDate and compute the percentage similarly, despite slight differences in coding style.",both
Determine the monthly sales performance for each product.,"SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderDate >= DATEADD(month, -1, GETDATE()) GROUP BY products.ProductID, products.ProductName;","```sql
SELECT products.ProductID, SUM([Order Details].Quantity) AS TotalSales
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY products.ProductID
```","The generated query does not filter by the last month and lacks the ProductName column, resulting in different outputs.","SELECT p.ProductName, EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS MonthlySales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate);","The generated query calculates monthly sales for each product by year and month, whereas the ground truth query calculates the total quantity for the last month only. They do not yield the same results.",None
How does the discount rate affect total sales revenue?,"SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSalesRevenue, SUM(od.Discount * od.UnitPrice * od.Quantity) AS TotalDiscount FROM [Order Details] od;","```sql
SELECT 
    [Order Details].Discount,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM 
    [Order Details]
JOIN 
    orders ON [Order Details].OrderID = orders.OrderID
GROUP BY 
    [Order Details].Discount
ORDER BY 
    [Order Details].Discount;
```","The generated query groups by Discount, showing how it affects TotalSales across different discount levels, while the ground truth query calculates overall TotalSalesRevenue and TotalDiscount without grouping.","SELECT d.Discount, SUM(d.UnitPrice * d.Quantity * (1 - d.Discount)) AS TotalSales FROM [Order Details] d GROUP BY d.Discount ORDER BY d.Discount;","The generated SQL query groups the results by `Discount` to show total sales for each discount rate, which provides insights into how different discounts affect revenue. However, the ground truth query calculates the overall total sales revenue and the total discount across all records without grouping, offering a different perspective.",None
Identify any orders that were shipped before they were ordered (data error check).,SELECT OrderID FROM orders WHERE ShippedDate < OrderDate;,"```sql
SELECT *
FROM orders
WHERE ShippedDate < OrderDate;
```","The generated query and the ground truth query differ in the columns selected. The generated query selects all columns ('*'), while the ground truth query selects only the 'OrderID' column. This may yield different results if only specific columns are expected.",SELECT OrderID FROM orders WHERE ShippedDate < OrderDate;,"Both queries are identical and check for orders where the ShippedDate is earlier than the OrderDate, indicating a data error.",FT
What is the on-time delivery rate by country?,"SELECT ShipCountry, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(*)) * 100 AS on_time_delivery_rate FROM orders GROUP BY ShipCountry;","```sql
SELECT ShipCountry, 
       COUNT(OrderID) AS TotalOrders, 
       COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveries,
       (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate
FROM orders
GROUP BY ShipCountry;
```","Both queries calculate the on-time delivery rate by country. The generated SQL query includes additional columns for total orders and on-time deliveries, but the calculation of on-time delivery rate is equivalent to the ground truth query.","SELECT ShipCountry, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipCountry;","Both queries calculate the on-time delivery rate by country as a proportion of on-time deliveries to total orders. The difference is in the scaling factor (percentage vs. proportion), which does not affect whether the query answers the user's question.",both
Who are the top three employees by number of orders handled over the past year?,"SELECT employees.EmployeeID, COUNT(orders.OrderID) AS NumberOfOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY employees.EmployeeID ORDER BY NumberOfOrders DESC LIMIT 3;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS NumberOfOrders
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.OrderDate >= DATEADD(YEAR, -1, GETDATE())
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY NumberOfOrders DESC
LIMIT 3;
```","The generated query uses DATEADD and GETDATE, which are SQL Server functions, instead of DATE_SUB and CURDATE used in MySQL for the ground truth query. Additionally, the generated query selects more columns (FirstName, LastName) than the ground truth query.","SELECT employees.EmployeeID, COUNT(orders.OrderID) AS num_orders FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY employees.EmployeeID ORDER BY num_orders DESC LIMIT 3","Both queries calculate the number of orders handled by each employee over the past year and select the top three employees, with identical logic and results.",FT
What percentage of products are provided by each supplier?,"SELECT suppliers.CompanyName, COUNT(products.ProductID) * 100.0 / (SELECT COUNT(*) FROM products) AS ProductShare FROM products INNER JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName;","```sql
SELECT 
    s.SupplierID,
    s.CompanyName,
    (COUNT(p.ProductID) * 100.0 / (SELECT COUNT(*) FROM products)) AS ProductPercentage
FROM 
    suppliers s
LEFT JOIN 
    products p ON s.SupplierID = p.SupplierID
GROUP BY 
    s.SupplierID, s.CompanyName;
```","Both queries calculate the percentage of products provided by each supplier, using the total product count as the denominator. The generated query uses a LEFT JOIN but will still achieve the correct result set with the same logic.","SELECT SupplierID, COUNT(ProductID) * 100.0 / (SELECT COUNT(*) FROM products) AS Percentage FROM products GROUP BY SupplierID;",The generated query does not include the supplier's company name and may produce a different result set if there are name duplicates for SupplierID.,Base
Find out which products are below their reorder level.,SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel 
FROM products 
WHERE UnitsInStock < ReorderLevel;
```",The generated SQL query includes additional columns (ProductID and UnitsInStock) that the user's question does not specifically request.,"SELECT ProductName, UnitsInStock, ReorderLevel FROM products WHERE UnitsInStock < ReorderLevel;","Both queries identify products below their reorder level. The generated query selects additional columns, which does not affect the main criteria or outcome.",FT
Which countries have suppliers who also have fax numbers listed?,SELECT DISTINCT Country FROM suppliers WHERE Fax IS NOT NULL;,"```sql
SELECT DISTINCT Country
FROM suppliers
WHERE Fax IS NOT NULL AND Fax <> '';
```","The generated query excludes suppliers with a fax number if it is only spaces, while the ground truth query does not make this distinction. Therefore, the results could differ if such entries exist.",SELECT DISTINCT Country FROM suppliers WHERE Fax IS NOT NULL;,Both queries are identical and correctly select distinct countries with suppliers that have fax numbers listed.,FT
What is the total quantity of products sold to date?,SELECT SUM(Quantity) AS TotalQuantitySold FROM [Order Details];,"```sql
SELECT SUM([Order Details].Quantity) AS TotalQuantitySold
FROM [Order Details]
```","Both queries calculate the total quantity of products sold by summing the 'Quantity' column from the '[Order Details]' table, yielding the same results.",SELECT SUM(Quantity) AS Total_Quantity_Sold FROM [Order Details];,"Both queries calculate the sum of the 'Quantity' column from the '[Order Details]' table, which answers the user's question about the total quantity of products sold to date. The difference in alias naming does not affect the result.",both
List the top 5 employees with the highest average sales per order.,"SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgSalesPerOrder FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY AvgSalesPerOrder DESC LIMIT 5;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageSalesPerOrder
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
ORDER BY AverageSalesPerOrder DESC
LIMIT 5;
```",Both queries calculate the average sales per order for each employee and select the top 5 based on this value. The syntax differences do not affect the outcome.,"SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY AvgSales DESC LIMIT 5;",Both queries compute the average sales per order for each employee and return the top 5 employees sorted by this average in descending order. The difference in column alias names (AvgSales vs. AvgSalesPerOrder) does not affect the outcome.,both
What products have a reorder level greater than their current stock?,"SELECT ProductID, ProductName FROM products WHERE ReorderLevel > UnitsInStock;","```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE ReorderLevel > UnitsInStock;
```","Both queries filter products where the reorder level is greater than the current stock. The generated query includes extra columns (`UnitsInStock` and `ReorderLevel`), which does not affect the correctness of the result in terms of identifying the products, but provides additional information.",SELECT ProductName FROM products WHERE ReorderLevel > UnitsInStock;,"The generated query only selects ProductName, whereas the ground truth query selects both ProductID and ProductName.",Base
How many orders did each employee handle in the last month?,"SELECT e.EmployeeID, COUNT(o.OrderID) AS OrdersLastMonth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY e.EmployeeID;","```sql
SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.OrderDate >= DATEADD(MONTH, -1, GETDATE())
GROUP BY e.EmployeeID
```",The generated query uses DATEADD with GETDATE() which only looks back one month from the current date instead of precisely selecting the last month as in the ground truth query that correctly uses intervals to determine the exact last month's range.,"SELECT e.FirstName, e.LastName, COUNT(o.OrderID) AS TotalOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY e.EmployeeID;","The queries differ in date logic; the generated query uses a rolling 30-day window, while the ground truth query targets the exact previous calendar month.",None
What is the total order quantity for each product in January 2023?,"SELECT ProductName, SUM(Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY ProductName;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalOrderQuantity
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
WHERE o.OrderDate >= '2023-01-01' AND o.OrderDate < '2023-02-01'
GROUP BY p.ProductID, p.ProductName
```","The ground truth query incorrectly references 'OrderDate' from 'Order Details', whereas the correct table is 'orders'. Both queries yield similar results if assumed OrderDate is from orders, but presence of ProductID in generated query adds distinction.","SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY products.ProductName","The generated query uses the 'orders' table to filter by OrderDate, whereas the ground truth query uses '[Order Details]' table. The results will differ if the OrderDate does not exist in '[Order Details]'.",None
"Which product had the most orders, and how many were ordered?","SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 1;","```sql
SELECT OrderDetails.ProductID, COUNT(OrderDetails.OrderID) AS TotalOrders
FROM [Order Details] AS OrderDetails
GROUP BY OrderDetails.ProductID
ORDER BY TotalOrders DESC
LIMIT 1;
```","The generated query counts order IDs, while the ground truth query sums the quantities ordered, which is needed to determine the most ordered product.","SELECT od.ProductID, SUM(od.Quantity) AS TotalOrdered FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalOrdered DESC LIMIT 1;","Both queries calculate the total quantity ordered for each product and return the product with the highest total, sorted in descending order. They use the same logic and clauses, differing only in alias names.",FT
What is the trend of the average order value over the last year?,"SELECT DATE_TRUNC('month', orders.OrderDate) AS month, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS average_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY month ORDER BY month","```sql
SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE() 
GROUP BY month
ORDER BY month;
```","The generated query uses SUM divided by COUNT(DISTINCT OrderID) instead of AVG, affecting the calculation of average order value. Additionally, the date range differs, using a dynamic calculation instead of a static range.","SELECT DATE_TRUNC('month', OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS average_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-09-09' AND '2023-09-09' GROUP BY month ORDER BY month;","The generated query calculates average order value by dividing the total value by the count of distinct orders, whereas the ground truth uses the AVG function. Additionally, the date range differs, between '2022-09-09' and '2023-09-09' for the generated query, and '2022-01-01' to '2022-12-31' for the ground truth.",None
Calculate the percentage of products shipped late relative to the required date.,SELECT (SUM(CASE WHEN orders.ShippedDate > orders.RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS LateShipmentPercentage FROM orders;,"```sql
SELECT 
    (COUNT(CASE WHEN orders.ShippedDate > orders.RequiredDate THEN 1 END) * 100.0) / COUNT(*) AS LateShipmentPercentage
FROM 
    orders
WHERE 
    orders.ShippedDate IS NOT NULL;
```",Both queries calculate the percentage of orders shipped late by comparing the ShippedDate to the RequiredDate. The COUNT with CASE and the SUM with CASE in this context yield the same result for counting late shipments.,SELECT (COUNT(*) FILTER (WHERE ShippedDate > RequiredDate) * 100.0 / COUNT(*)) AS LateDeliveryPercentage FROM orders;,"Both queries calculate the percentage of late shipments using different methods, but yield the same results.",both
Identify suppliers who provide the highest number of products.,"SELECT s.SupplierName, COUNT(p.ProductID) AS ProductCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierName ORDER BY ProductCount DESC LIMIT 5;","```sql
SELECT SupplierID, COUNT(ProductID) AS NumberOfProducts
FROM products
GROUP BY SupplierID
ORDER BY NumberOfProducts DESC;
```","The generated query identifies suppliers by their IDs and doesn't limit the results, while the ground truth query returns supplier names and limits the result to the top 5 suppliers.","SELECT SupplierID, COUNT(ProductID) AS Product_Count FROM products GROUP BY SupplierID ORDER BY Product_Count DESC;",The generated query does not limit results to the top suppliers like the ground truth query. The ground truth also includes supplier names.,None
What are the top 5 performing products based on sales quantity?,"SELECT ProductID, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantity
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalQuantity DESC
LIMIT 5;
```","The generated query includes the ProductName and joins with the products table, which the ground truth query does not. The ground truth focuses only on ProductID and sales quantity without additional details.","SELECT products.ProductName, SUM([Order Details].Quantity) AS total_sales_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY total_sales_quantity DESC LIMIT 5;","The generated SQL query returns product names and uses a JOIN with the products table, while the ground truth query only returns ProductID without joining to retrieve product names.",None
What is the total freight cost for each shipping country?,"SELECT orders.ShipCountry, SUM(orders.Freight) AS TotalFreight FROM orders GROUP BY orders.ShipCountry;","```sql
SELECT ShipCountry, SUM(Freight) AS TotalFreightCost
FROM orders
GROUP BY ShipCountry;
```","Both queries calculate the total freight cost per shipping country. They perform the same aggregation and grouping operations, despite slight differences in syntax.","SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",Both queries calculate the total freight cost per shipping country by summing the 'Freight' column grouped by 'ShipCountry'. They yield the same results though with minor naming differences.,both
What is the total discount given in all orders?,SELECT SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM [Order Details] od,"```sql
SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount) AS Total_Discount
FROM [Order Details];
```","Both queries calculate the total discount by multiplying Quantity, UnitPrice, and Discount from the [Order Details] table and summing the results. The difference is only in alias naming, which does not affect the outcome.",SELECT SUM(Quantity * UnitPrice * Discount) AS TotalDiscount FROM [Order Details];,"Both queries calculate the total discount using the same formula and from the same table, resulting in the same output.",both
How many discontinued products does each supplier have?,"SELECT p.SupplierID, COUNT(*) AS DiscontinuedProductCount FROM products p WHERE p.Discontinued = 1 GROUP BY p.SupplierID;","```sql
SELECT s.SupplierID, s.CompanyName, COUNT(p.ProductID) AS DiscontinuedProducts
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
WHERE p.Discontinued = 1
GROUP BY s.SupplierID, s.CompanyName;
```","Both queries count the number of discontinued products for each supplier. The generated query additionally retrieves supplier names, which does not affect the count results.","SELECT SupplierID, COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1 GROUP BY SupplierID;","Both queries count the number of discontinued products per supplier and use the same logic and conditions, producing equivalent results.",both
How many products are discontinued and what is their total inventory value?,"SELECT COUNT(products.ProductID) AS discontinued_count, SUM(products.UnitsInStock * products.UnitPrice) AS total_inventory_value FROM products WHERE products.Discontinued = 1","```sql
SELECT COUNT(*) AS discontinued_count, SUM(products.UnitsInStock * products.UnitPrice) AS total_inventory_value 
FROM products 
WHERE products.Discontinued = 1;
```",Both queries count the discontinued products and calculate the total inventory value for them with identical logic.,"SELECT COUNT(*) AS DiscontinuedProducts, SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products WHERE Discontinued = 1;","Both queries accurately count discontinued products and calculate the total inventory value by multiplying UnitPrice and UnitsInStock, filtered by Discontinued = 1.",both
Calculate the average discount given on orders involving a specific product.,SELECT AVG(Discount) AS AverageDiscount FROM [Order Details] WHERE ProductID = YOUR_PRODUCT_ID;,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details]
WHERE ProductID = <specific_product_id>;
```","The generated SQL query correctly calculates the average discount for orders involving a specific product by filtering with 'ProductID'. The placeholder syntax for 'ProductID' differs ('<specific_product_id>' vs 'YOUR_PRODUCT_ID'), but the logic and outcome are identical.",SELECT AVG([Order Details].Discount) FROM [Order Details] WHERE ProductID = ?;,"Both queries calculate the average discount on orders for a specified ProductID, just with different parameter markers.",both
Calculate the total discount given to each customer.,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;","```sql
SELECT 
    c.CustomerID, 
    SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscount
FROM 
    customers c
JOIN 
    orders o ON c.CustomerID = o.CustomerID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    c.CustomerID;
```","Both queries calculate the total discount per customer by multiplying the quantity, unit price, and discount for each order detail, then summing them up for each customer. They use the same logic, just different formatting.","SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;","Both queries compute the total discount per customer by summing the product of UnitPrice, Quantity, and Discount after joining the customers, orders, and order details tables. They differ only in table alias usage but are functionally equivalent.",both
Which customer placed the highest number of orders?,"SELECT orders.CustomerID, COUNT(*) AS NumberOfOrders FROM orders GROUP BY orders.CustomerID ORDER BY NumberOfOrders DESC LIMIT 1","```sql
SELECT CustomerID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY CustomerID
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries correctly count orders per customer, order by count descending, and limit the result to the top customer.","SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;",Both queries count the number of orders per customer and return the customer with the highest number of orders.,both
Calculate the contribution of each category to total sales.,"SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF((SELECT SUM(Quantity * UnitPrice) FROM [Order Details]), 0) * 100 AS CategoryContribution FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY CategoryID;","```sql
SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.CategoryID;
```","The generated query calculates total sales per category but does not compute their contribution to overall sales as a percentage, unlike the ground truth query.","SELECT c.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / (SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) FROM [Order Details] od) * 100 AS Percentage FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;","The generated query accounts for discounts in sales calculation, while the ground truth query does not. This difference affects the total and category sales values, resulting in different percentages.",None
How many products are there with units in stock below reorder level?,SELECT COUNT(ProductID) FROM products WHERE UnitsInStock < ReorderLevel;,"```sql
SELECT COUNT(*) AS ProductCount
FROM products
WHERE UnitsInStock < ReorderLevel;
```",Both queries count the number of products where UnitsInStock is less than ReorderLevel. COUNT(*) and COUNT(ProductID) will yield the same result since neither involve NULL checking in this context.,SELECT COUNT(*) FROM products WHERE UnitsInStock < ReorderLevel;,"Both queries count the number of products where UnitsInStock is less than ReorderLevel. Using COUNT(*) and COUNT(ProductID) yields the same result if ProductID is not nullable and there are no duplicate rows, which is assumed here.",both
Which category has the highest number of products on order?,"SELECT c.CategoryName, SUM(p.UnitsOnOrder) AS TotalOnOrder FROM categories c JOIN products p ON c.CategoryID = p.CategoryID GROUP BY c.CategoryName ORDER BY TotalOnOrder DESC;","```sql
SELECT CategoryID, COUNT(*) AS NumberOfProductsOnOrder
FROM products
WHERE UnitsOnOrder > 0
GROUP BY CategoryID
ORDER BY NumberOfProductsOnOrder DESC
LIMIT 1;
```","The generated query counts the number of products on order, while the ground truth sums the units on order per category.","SELECT CategoryID, SUM(ProductOrderQty) AS TotalOnOrder FROM products GROUP BY CategoryID ORDER BY TotalOnOrder DESC LIMIT 1;","The generated query does not join the categories table, so it cannot return the category name. It uses ProductOrderQty instead of UnitsOnOrder.",None
What is the total sales generated by each employee in 2023?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY e.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE YEAR(o.OrderDate) = 2023
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","Both queries calculate the total sales for each employee in 2023. The generated query includes additional columns (FirstName, LastName) in the SELECT and GROUP BY clauses, which do not affect the overall sales calculation.","SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2023 GROUP BY e.EmployeeID;",Both queries calculate total sales for each employee in 2023. The generated query uses YEAR() while the ground truth uses a date range to filter order dates; both methods yield the same results for the year 2023.,both
What is the highest discount given to a single product?,"SELECT ProductName, [Order Details].Discount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount = (SELECT MAX(Discount) FROM [Order Details]) LIMIT 1;","```sql
SELECT MAX(Discount) AS HighestDiscount
FROM [Order Details];
```","The generated query only returns the highest discount value, while the ground truth query provides the product name and the discount value.","SELECT products.ProductName, MAX([Order Details].Discount * 100) AS HighestDiscountPercentage FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY HighestDiscountPercentage DESC LIMIT 1;","The generated query calculates the maximum discount for each product and then orders them to find the top one, while the ground truth finds the overall maximum discount across all products.",None
Which employee handled the most orders?,"SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries count the number of orders per EmployeeID, order the results in descending order by the count, and return the top entry, effectively identifying the employee who handled the most orders.","SELECT EmployeeID, COUNT(OrderID) AS OrdersHandled FROM orders GROUP BY EmployeeID ORDER BY OrdersHandled DESC LIMIT 1;","Both queries count the number of orders handled by each employee, order the results in descending order by the count, and limit the output to the top result, thus yielding the same result.",both
Calculate the average discount provided by each employee.,"SELECT employees.EmployeeID, AVG([Order Details].Discount) AS AverageDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;","```sql
SELECT e.EmployeeID, AVG(od.Discount) AS AverageDiscount
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID;
```","Both queries calculate the average discount per employee by joining the employees, orders, and order details tables and grouping the results by EmployeeID.","SELECT e.FirstName, e.LastName, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","Both queries compute the average discount per employee by joining employees, orders, and order details tables. They group results by EmployeeID and calculate the average discount; the difference is only in the selection of columns and aliases used, which doesn't affect the aggregation logic.",both
Which product generated the most revenue last month?,"SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND o.OrderDate < CURDATE() GROUP BY od.ProductID ORDER BY Revenue DESC LIMIT 1;","```sql
SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue
FROM [Order Details] od
JOIN orders o ON od.OrderID = o.OrderID
WHERE o.OrderDate BETWEEN DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1' MONTH) 
                      AND DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1' DAY
GROUP BY od.ProductID
ORDER BY Revenue DESC
LIMIT 1;
```","The date range calculation differs in the two queries, potentially affecting the results. The generated query may not exactly match the boundary of 'last month' as intended.","SELECT OrderDetails.ProductName, SUM(OrderDetails.UnitPrice * OrderDetails.Quantity * (1 - OrderDetails.Discount)) AS ProductRevenue FROM OrderDetails WHERE YEAR(OrderDetails.OrderID) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) AND MONTH(OrderDetails.OrderID) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY OrderDetails.ProductName ORDER BY ProductRevenue DESC LIMIT 1;","The generated query filters on OrderID assuming it contains date information, while the ground truth uses OrderDate from the orders table to filter by the last month.",None
Identify the orders that had a discount greater than 20%.,"SELECT DISTINCT orders.OrderID, [Order Details].Discount FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE [Order Details].Discount > 0.2;","```sql
SELECT *
FROM [Order Details]
WHERE Discount > 0.2;
```","The generated SQL query includes all columns from [Order Details] where Discount > 0.2, but does not ensure distinct OrderID values as the ground truth query does.",SELECT OrderID FROM [Order Details] WHERE Discount > 0.20;,"Both queries correctly identify OrderID from the [Order Details] table where Discount is greater than 0.20. The Ground Truth includes additional information and a JOIN, but the result concerning OrderID remains the same.",FT
Identify orders with the highest discounts.,"SELECT OrderID, Discount FROM [Order Details] ORDER BY Discount DESC LIMIT 10;","```sql
SELECT OrderID, ProductID, UnitPrice, Quantity, Discount
FROM [Order Details]
ORDER BY Discount DESC
LIMIT 10;
```","The generated query includes additional columns such as ProductID, UnitPrice, and Quantity, which are not necessary to identify orders with the highest discounts and were not requested. The ground truth query focuses only on OrderID and Discount.","SELECT OrderID, Discount FROM [Order Details] WHERE Discount = (SELECT MAX(Discount) FROM [Order Details]);","The generated query only returns rows with the maximum discount, while the ground truth query returns the top 10 highest discounts ordered in descending order.",None
Which suppliers have no discontinued products?,SELECT s.SupplierID FROM suppliers s WHERE NOT EXISTS (SELECT 1 FROM products p WHERE p.SupplierID = s.SupplierID AND p.Discontinued = 1);,"```sql
SELECT s.SupplierID, s.CompanyName
FROM suppliers s
LEFT JOIN products p ON s.SupplierID = p.SupplierID
GROUP BY s.SupplierID, s.CompanyName
HAVING SUM(p.Discontinued) = 0;
```",Both queries aim to find suppliers with no discontinued products. The generated query uses a LEFT JOIN and HAVING clause to filter suppliers with all products not discontinued. The ground truth uses a NOT EXISTS subquery for the same purpose. Both produce equivalent results.,SELECT c.CompanyName FROM suppliers c WHERE NOT EXISTS (SELECT 1 FROM products p WHERE p.Discontinued = 1 AND p.SupplierID = c.SupplierID);,"Both queries select suppliers without discontinued products. The generated query retrieves the 'CompanyName,' which can be considered equivalent to selecting 'SupplierID' as a method to identify suppliers.",both
Identify suppliers whose products are consistently reordered (reorder level greater than 50).,"SELECT s.SupplierID, s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.ReorderLevel > 50 GROUP BY s.SupplierID, s.CompanyName;","```sql
SELECT s.SupplierID, s.CompanyName
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
WHERE p.ReorderLevel > 50
GROUP BY s.SupplierID, s.CompanyName
```","The generated SQL query is identical to the ground truth query. Both queries join the suppliers and products tables, filter products with a reorder level greater than 50, and group by SupplierID and CompanyName to identify suppliers whose products are consistently reordered.","SELECT DISTINCT s.SupplierID, s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.ReorderLevel > 50;","Both queries select suppliers with products having a reorder level greater than 50. The generated query uses DISTINCT, which is equivalent to using GROUP BY in this context.",both
How many orders had a freight cost greater than $50?,SELECT COUNT(OrderID) FROM orders WHERE Freight > 50;,"```sql
SELECT COUNT(OrderID) 
FROM orders 
WHERE Freight > 50;
```","The generated SQL query and the ground truth query are the same, counting the number of orders with a freight cost greater than $50.",SELECT COUNT(OrderID) FROM orders WHERE Freight > 50;,Both queries count the number of orders with a freight cost greater than $50. The SQL syntax and logic are identical.,both
What is the customer lifetime value of each customer?,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID","```sql
SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN customers ON orders.CustomerID = customers.CustomerID 
GROUP BY customers.CustomerID
```","The generated SQL query and the ground truth query are identical in terms of logic and structure. Both calculate the customer lifetime value by summing the product of UnitPrice, Quantity, and (1 - Discount) for each customer and group by CustomerID.","SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS customer_lifetime_value FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN customers c ON o.CustomerID = c.CustomerID GROUP BY c.CustomerID","Both queries calculate the customer lifetime value by summing the discounted product of UnitPrice and Quantity for each customer. They join the same tables and group by CustomerID, producing equivalent results.",both
How many unique products are ordered by each customer?,"SELECT o.CustomerID, COUNT(DISTINCT od.ProductID) AS UniqueProductsOrdered FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID;","```sql
SELECT CustomerID, COUNT(DISTINCT ProductID) AS UniqueProductCount
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY CustomerID;
```","Both queries calculate the number of unique products ordered by each customer by joining the 'orders' and 'Order Details' tables on OrderID, followed by grouping by CustomerID. The structure differs but the logic and results are the same.","SELECT o.CustomerID, COUNT(DISTINCT od.ProductID) AS UniqueProductCount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID;",Both queries group by CustomerID and count distinct ProductID from the joined orders and order details tables. The differences in column alias names do not affect the result.,both
Identify orders with more than five products that received a discount.,SELECT OrderID FROM [Order Details] WHERE Discount > 0 GROUP BY OrderID HAVING COUNT(ProductID) > 5;,"```sql
SELECT o.OrderID, COUNT(od.ProductID) AS ProductCount
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE od.Discount > 0
GROUP BY o.OrderID
HAVING COUNT(od.ProductID) > 5;
```","Both queries identify orders with more than five products that received a discount, though the generated query includes an additional column for the product count.",SELECT OrderID FROM [Order Details] WHERE Discount > 0 GROUP BY OrderID HAVING COUNT(ProductID) > 5;,"The generated SQL query and the ground truth SQL query are identical, both correctly identifying orders with more than five products that received a discount.",both
"How many orders did not have a shipped date, and thus could be delayed?",SELECT COUNT(*) AS DelayedOrders FROM orders WHERE ShippedDate IS NULL;,"```sql
SELECT COUNT(OrderID) AS DelayedOrders
FROM orders
WHERE ShippedDate IS NULL;
```",Both queries count the number of orders where the 'ShippedDate' is NULL. The difference between COUNT(OrderID) and COUNT(*) does not affect the result when filtering by a specific condition.,SELECT COUNT(*) AS DelayedOrders FROM orders WHERE ShippedDate IS NULL;,"Both queries count the number of orders with a NULL ShippedDate, which indicates delayed orders.",both
Which region has the most orders?,"SELECT ShipRegion, COUNT(OrderID) AS NumOrders FROM orders GROUP BY ShipRegion ORDER BY NumOrders DESC LIMIT 1;","```sql
SELECT ShipRegion, COUNT(OrderID) AS TotalOrders
FROM orders
GROUP BY ShipRegion
ORDER BY TotalOrders DESC
LIMIT 1;
```","Both queries calculate the same results by counting orders per region, sorting in descending order, and limiting to one result.","SELECT ShipRegion, COUNT(OrderID) FROM orders GROUP BY ShipRegion ORDER BY COUNT(OrderID) DESC LIMIT 1;","Both queries group orders by ShipRegion and order the results by the number of orders in descending order, then limit the output to one result to find the region with the most orders.",both
What is the total Customer Lifetime Value for each customer?,"SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerLifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;","```sql
SELECT customers.CustomerID, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CustomerLifetimeValue
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID;
```","Both queries compute the Customer Lifetime Value by summing up the product of UnitPrice, Quantity, and the discount factor for each order detail grouped by CustomerID. They achieve the same result through equivalent operations and joins.","SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerLifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",Both queries are identical and correctly calculate the Customer Lifetime Value for each customer by summing the discounted total price of all purchased units.,both
Which employees have processed the most orders?,"SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY EmployeeID
ORDER BY OrderCount DESC;
```",The generated query is identical in logic and structure to the ground truth query. Both count the number of orders processed by each employee and order the results in descending order of count.,"SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC;","Both queries count orders processed by each employee, group by EmployeeID, and sort the result in descending order based on the total order count. The difference is only in the alias name, which does not affect the outcome.",both
What is the average discount applied to orders per month?,"SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, AVG([Order Details].Discount) AS AvgDiscount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, 
    AVG([Order Details].Discount) AS Average_Discount
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    DATE_FORMAT(orders.OrderDate, '%Y-%m')
```","The generated SQL query uses DATE_FORMAT(), which may not be compatible with all SQL databases, while the ground truth uses DATE_TRUNC(), ensuring better compatibility. However, both queries logically achieve the same grouping by month.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Discount) AS AvgDiscount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')","The 'Generated SQL Query' uses DATE_FORMAT for month extraction, which is MySQL specific, and may not correctly execute in all SQL environments compared to the ANSI SQL standard function DATE_TRUNC used in the 'Ground Truth SQL Query.' Additionally, the 'Generated SQL Query' uses DATE_FORMAT in both SELECT and GROUP BY, while the 'Ground Truth' groups by the alias 'Month'.",None
Which supplier has the highest average product price?,"SELECT s.CompanyName, AVG(p.UnitPrice) AS AvgPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName ORDER BY AvgPrice DESC LIMIT 1;","```sql
SELECT s.CompanyName, AVG(p.UnitPrice) AS AveragePrice
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
GROUP BY s.SupplierID
ORDER BY AveragePrice DESC
LIMIT 1;
```","Both queries correctly join suppliers and products on SupplierID, calculate the average product price per supplier, and order the results to find the highest average price.","SELECT s.SupplierID, AVG(p.UnitPrice) AS AveragePrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY AveragePrice DESC LIMIT 1;","The generated query returns SupplierID, while the ground truth query returns CompanyName. They do not yield the same results.",Base
What are the total sales for each product per month?,"SELECT p.ProductID, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, EXTRACT(MONTH FROM o.OrderDate);","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    MONTH(o.OrderDate) AS Month, 
    YEAR(o.OrderDate) AS Year, 
    SUM(od.Quantity * od.UnitPrice) AS TotalSales
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
JOIN 
    orders o ON od.OrderID = o.OrderID
GROUP BY 
    p.ProductID, 
    p.ProductName, 
    MONTH(o.OrderDate), 
    YEAR(o.OrderDate)
ORDER BY 
    Year, 
    Month, 
    p.ProductID;
```","The generated query includes YEAR, ProductName, and additional ordering, which are not in the ground truth. These may result in different outputs.","SELECT DATE_FORMAT(OrderDetails.OrderID, '%Y-%m') AS Month, OrderDetails.ProductID, SUM(OrderDetails.UnitPrice * OrderDetails.Quantity * (1 - OrderDetails.Discount)) AS ProductSales FROM [Order Details] AS OrderDetails GROUP BY Month, OrderDetails.ProductID;",The generated query uses DATE_FORMAT on OrderID instead of using the OrderDate from the orders table. It also calculates the discount which is not considered in the ground truth query.,None
Which shipping company handled the most orders in USD value in Q2 2023?,"SELECT shippers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_shipping_value FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY shippers.CompanyName ORDER BY total_shipping_value DESC;","```sql
SELECT shippers.CompanyName, COUNT(orders.OrderID) AS total_orders, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_value
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
JOIN shippers ON orders.ShipVia = shippers.ShipperID
WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30'
GROUP BY shippers.CompanyName
ORDER BY total_value DESC
LIMIT 1;
```","Both queries calculate the total value of orders handled by each shipping company in Q2 2023 and order by this value to find the highest. The generated query adds a count of orders, but the main objective is met.","SELECT shippers.CompanyName, SUM(orders.Freight) AS total_shipping_fees FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY shippers.CompanyName ORDER BY total_shipping_fees DESC LIMIT 1;","The generated query calculates the total freight cost per shipper, while the ground truth query calculates the total order value handled by each shipper in Q2 2023.",Base
Which supplier has the shortest average lead time?,"SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC LIMIT 1","```sql
SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time
FROM orders
JOIN products ON orders.OrderID = products.ProductID
GROUP BY products.SupplierID
ORDER BY avg_lead_time ASC
LIMIT 1;
```",The generated query wrongly joins orders directly with products and uses products.ProductID instead of [Order Details].OrderID. It omits the necessary join with [Order Details] and suppliers.,"SELECT suppliers.SupplierName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE orders.ShipVia = suppliers.SupplierID GROUP BY suppliers.SupplierName ORDER BY avg_lead_time ASC LIMIT 1","The generated query groups by SupplierName, while the ground truth groups by SupplierID. They should yield the same result, but the outputs are structured differently.",None
What is the trend of total sales over each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month ORDER BY Month;","```sql
SELECT MONTH(OrderDate) AS Month, YEAR(OrderDate) AS Year, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY YEAR(OrderDate), MONTH(OrderDate)
ORDER BY Year, Month;
```",Both queries group sales by month and year and calculate total sales. The difference in output format (separate year and month vs. concatenated) does not affect the trend analysis.,"SELECT FORMAT(o.OrderDate, 'YYYY-MM') AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY OrderMonth ORDER BY OrderMonth;","The generated query uses FORMAT for date formatting, which is not ANSI standard, and DATE_FORMAT in the ground truth is also non-standard; behavior may vary across SQL dialects.",Base
What is the total number of unique customers?,SELECT COUNT(DISTINCT CustomerID) FROM customers;,"```sql
SELECT COUNT(DISTINCT CustomerID) AS TotalUniqueCustomers
FROM customers;
```","Both queries use COUNT(DISTINCT CustomerID) to calculate the total number of unique customers from the customers table, and thus produce the same result.",SELECT COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders;,"The generated query counts unique customers in the 'orders' table, while the ground truth query counts them in the 'customers' table. They might yield different results if some customers have no orders.",Base
What is the total number of orders fulfilled by each employee in 2023?,"SELECT employees.EmployeeID, COUNT(orders.OrderID) AS num_orders FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID","```sql
SELECT employees.EmployeeID, COUNT(orders.OrderID) AS total_orders 
FROM orders 
JOIN employees ON orders.EmployeeID = employees.EmployeeID 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' 
GROUP BY employees.EmployeeID
```","Both queries count the number of orders for each employee in 2023. The generated query uses a date range, while the ground truth query uses the YEAR() function, but both effectively filter for the year 2023.","SELECT CONCAT(employees.FirstName, ' ', employees.LastName) AS employee_name, COUNT(orders.OrderID) AS num_orders FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employee_name","Both queries count the total number of orders fulfilled by each employee in 2023, despite using different methods to group results: by employee name or by employee ID.",both
What is the average unit price of discontinued products?,SELECT AVG(UnitPrice) FROM products WHERE Discontinued = 1;,"```sql
SELECT AVG(UnitPrice) AS AverageUnitPrice
FROM products
WHERE Discontinued = 1;
```",Both queries calculate the average unit price of discontinued products using the same condition. The difference in column naming does not affect the result.,SELECT AVG(UnitPrice) FROM products WHERE Discontinued = 1;,Both queries calculate the average unit price of products marked as discontinued (Discontinued = 1) in the products table.,both
Are there any regions with consistently higher freight costs?,"SELECT ShipRegion, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipRegion ORDER BY AvgFreight DESC;","```sql
SELECT ShipRegion, AVG(Freight) AS AverageFreight
FROM orders
GROUP BY ShipRegion
HAVING COUNT(OrderID) > 1
ORDER BY AverageFreight DESC;
```","The generated query includes a HAVING clause which limits the results to regions with more than one order, potentially excluding valid records. The ground truth query considers all regions regardless of order count.","SELECT ShipRegion, AVG(Freight) FROM orders GROUP BY ShipRegion ORDER BY AVG(Freight) DESC;","Both queries calculate the average freight cost per region and order the results in descending order, effectively identifying regions with higher average freight costs.",FT
Determine the average discount offered on the products from each supplier.,"SELECT p.SupplierID, AVG(od.Discount) AS AvgDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;","```sql
SELECT suppliers.CompanyName, AVG([Order Details].Discount) AS AvgDiscount
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY suppliers.CompanyName;
```",The generated query groups by CompanyName while the ground truth groups by SupplierID. This might yield different results if multiple suppliers share the same CompanyName.,"SELECT s.SupplierID, AVG(od.Discount) AS AverageDiscount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;","Both queries calculate the average discount for each supplier using joins between suppliers, products, and order details. They group by SupplierID and compute the same AVG function on the Discount field.",FT
Which month had the highest employee sales performance?,"SELECT MONTH(orders.OrderDate) AS month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS sales FROM [Order Details] od JOIN orders ON od.OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY month ORDER BY sales DESC LIMIT 1","```sql
SELECT 
    MONTH(orders.OrderDate) AS order_month, 
    employees.EmployeeID, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales 
FROM 
    [Order Details] 
JOIN 
    orders ON [Order Details].OrderID = orders.OrderID 
JOIN 
    employees ON orders.EmployeeID = employees.EmployeeID 
GROUP BY 
    order_month, employees.EmployeeID 
ORDER BY 
    employee_sales DESC 
LIMIT 1;
```","The generated query calculates sales for each employee per month, whereas the ground truth query determines the total sales per month across all employees. The focus on individual employee sales changes the comparison base.","SELECT EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN employees e ON o.EmployeeID = e.EmployeeID GROUP BY Year, Month ORDER BY TotalSales DESC LIMIT 1;","Both queries compute total sales by month and order the results to find the highest sales month, yielding equivalent results.",FT
How many orders were processed by employees in each city?,"SELECT employees.City, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.City;","```sql
SELECT employees.City, COUNT(orders.OrderID) AS OrderCount
FROM employees
JOIN orders ON employees.EmployeeID = orders.EmployeeID
GROUP BY employees.City;
```",The generated SQL query and the ground truth query are identical in functionality. Both count the number of orders processed by employees in each city by joining the employees and orders tables on EmployeeID and grouping the results by city.,"SELECT employees.City, COUNT(orders.OrderID) AS order_count FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.City","The generated SQL query accurately answers the user's question and yields the same results as the ground truth query, as they both count the number of orders processed by employees in each city.",both
Identify the product with the highest sales revenue during the last 6 months.,"SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY p.ProductID ORDER BY SUM(od.Quantity * od.UnitPrice) DESC LIMIT 1;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.OrderID IN (
    SELECT OrderID
    FROM [Order Details]
    WHERE OrderDate >= DATEADD(MONTH, -6, GETDATE())
)
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalRevenue DESC
LIMIT 1;
```","The generated query incorrectly uses a subquery in the WHERE clause. It should directly filter by OrderDate. Also, it calculates the total revenue correctly but limits using LIMIT which may not work depending on the SQL dialect. The ground truth query filters OrderDate correctly and uses SUM directly.","SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 1;","The generated query and the ground truth query differ in their calculation of revenue. The generated SQL correctly calculates total revenue including discounts, while the ground truth does not include discounts and selects the product name instead of the ProductID.",None
Find the top 5 products with the highest inventory turnover ratio.,"SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) as InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY InventoryTurnoverRatio DESC FETCH FIRST 5 ROWS ONLY;","```sql
SELECT p.ProductID, p.ProductName, 
       SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY InventoryTurnoverRatio DESC
LIMIT 5;
```","The generated SQL query might fail due to division by zero since it doesn't handle the case where AVG(p.UnitsInStock) could be zero, unlike the ground truth query that uses NULLIF.","SELECT p.ProductName, (SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(NULLIF(p.UnitsInStock, 0)), 0)) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY InventoryTurnoverRatio DESC LIMIT 5;","Both queries calculate the inventory turnover ratio using the sum of quantity times unit price over the average units in stock, and order by this ratio to fetch the top 5 products. The key logic and results are effectively the same.",FT
Identify the employee who fulfilled the most orders last month.,"SELECT o.EmployeeID, COUNT(o.OrderID) AS NumOrders FROM orders o WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL '1' MONTH) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL '1' MONTH) GROUP BY o.EmployeeID ORDER BY NumOrders DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS TotalOrders
FROM orders
WHERE OrderDate >= DATE_FORMAT(CURRENT_DATE - INTERVAL 1 MONTH, '%Y-%m-01')
  AND OrderDate < DATE_FORMAT(CURRENT_DATE, '%Y-%m-01')
GROUP BY EmployeeID
ORDER BY TotalOrders DESC
LIMIT 1;
```",Both queries correctly calculate the employee who fulfilled the most orders last month using different methods to filter dates.,"SELECT EmployeeID, COUNT(OrderID) AS Orders FROM orders WHERE OrderDate BETWEEN '2023-09-01' AND '2023-09-30' GROUP BY EmployeeID ORDER BY Orders DESC LIMIT 1;","The generated query uses fixed dates for last month (2023-09-01 to 2023-09-30), which may not match the dynamic last month calculation in the ground truth query. This would affect the query's match with dynamic current month context.",Base
Calculate the average unit price of all products.,SELECT AVG(UnitPrice) FROM products;,"```sql
SELECT AVG(UnitPrice) AS AverageUnitPrice FROM products;
```","Both queries calculate the average unit price from the 'products' table, and will yield the same result. The generated query additionally assigns an alias to the resulting column, which does not affect the outcome.",SELECT AVG(UnitPrice) FROM products;,The generated SQL query and the ground truth query are the same. Both correctly calculate the average unit price of all products.,both
What is the total sales revenue generated each month?,"SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month ORDER BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Total_Sales
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries calculate total sales revenue per month by joining 'orders' and 'Order Details' tables and grouping by month. They use different methods to extract the month from 'OrderDate', but the logic is equivalent.","SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;","The generated query uses DATE_FORMAT, which is specific to MySQL, and may not yield the same formatting as DATE_TRUNC('month') used in the ground truth query, which is typical in PostgreSQL. Additionally, the generated query does not include an ORDER BY clause.",Base
What is the reorder level for each product that is currently out of stock?,"SELECT ProductName, ReorderLevel FROM products WHERE UnitsInStock = 0;","```sql
SELECT ProductName, ReorderLevel
FROM products
WHERE UnitsInStock = 0;
```",Both queries are identical and select the reorder level for products with zero stock.,"SELECT ProductName, ReorderLevel FROM products WHERE UnitsInStock = 0;","Both queries select ProductName and ReorderLevel from the products table where UnitsInStock is 0, identifying out-of-stock products.",both
What is the highest discount applied to any product in the past year?,"SELECT MAX(Discount) FROM [Order Details] WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);","```sql
SELECT MAX(Discount) AS HighestDiscount
FROM [Order Details]
WHERE OrderID IN (
    SELECT DISTINCT OrderID
    FROM Orders
    WHERE OrderDate >= DATEADD(year, -1, GETDATE())
);
```","The generated query checks for OrderID in the past year using a subquery on Orders, whereas the ground truth assumes OrderDate is a direct column in [Order Details]. They might use different interpretations of where OrderDate is found.",SELECT MAX(Discount) AS MaxDiscount FROM [Order Details] WHERE YEAR(OrderID) = YEAR(CURRENT_DATE) - 1;,"The generated query filters by subtracting one year from the current year using YEAR(OrderID), which is incorrect. The ground truth uses OrderDate to correctly find data from the past year.",None
Identify products sold with more than 20% discount.,SELECT ProductName FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE Discount > 0.20;,"```sql
SELECT p.ProductID, p.ProductName, od.Quantity, od.Discount
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.Discount > 0.2;
```","The generated query selects more columns than needed (ProductID, Quantity, Discount) whereas the ground truth query selects only ProductName.",SELECT DISTINCT ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE Discount > 0.2;,Both queries retrieve product names where discounts are greater than 20% by joining 'products' and '[Order Details]' on 'ProductID'. The DISTINCT keyword in the generated query does not affect the outcome regarding whether a product matches the discount condition.,FT
Which country has the highest number of orders?,"SELECT ShipCountry, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipCountry ORDER BY TotalOrders DESC LIMIT 1","```sql
SELECT ShipCountry, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY ShipCountry
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries group by ShipCountry, count OrderID, and order by the count in descending order, limiting the result to one country with the highest order count, yielding the same result.","SELECT ShipCountry, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCountry ORDER BY OrderCount DESC LIMIT 1;",Both queries count the number of orders per country and return the country with the highest count. Column alias names differ but results are the same.,both
How many units of each product are on order?,"SELECT ProductName, UnitsOnOrder FROM products","```sql
SELECT products.ProductName, products.UnitsOnOrder
FROM products;
```","Both queries select 'ProductName' and 'UnitsOnOrder' from the 'products' table, which addresses the user's question.","SELECT ProductName, UnitsOnOrder FROM products WHERE UnitsOnOrder > 0","The generated query filters for products with UnitsOnOrder > 0, missing products that have zero units on order.",Base
"What are the lead times for each supplier, and which are the most efficient?","SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY lead_time ASC;","```sql
SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time 
FROM orders 
JOIN products ON orders.OrderID = products.ProductID 
GROUP BY products.SupplierID 
ORDER BY supplier_lead_time ASC;
```","The generated query incorrectly joins orders with products on OrderID and ProductID, which are different entities. The ground truth query correctly joins orders with [Order Details] using OrderID and then joins [Order Details] with products and suppliers, ensuring accurate calculation of lead times per supplier.","SELECT products.SupplierID, AVG(DATEDIFF(products.ReorderLevel, products.UnitsOnOrder)) AS avg_lead_time FROM products WHERE products.Discontinued = 0 GROUP BY products.SupplierID ORDER BY avg_lead_time ASC","The generated query calculates lead time based on product reorder levels and units on order, which does not accurately reflect lead times. The ground truth query correctly calculates lead time based on the difference between order shipped dates and order dates.",None
What are the top three cities with the highest order shipment?,"SELECT orders.ShipCity, COUNT(orders.OrderID) AS TotalOrders FROM orders GROUP BY orders.ShipCity ORDER BY TotalOrders DESC LIMIT 3","```sql
SELECT ShipCity, COUNT(OrderID) AS TotalShipments
FROM orders
GROUP BY ShipCity
ORDER BY TotalShipments DESC
LIMIT 3;
```","Both queries select ShipCity and count OrderID, grouping by ShipCity and ordering by descending count, limited to the top three. They perform equivalent operations.","SELECT ShipCity, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipCity ORDER BY TotalOrders DESC LIMIT 3;","Both queries aggregate orders by ShipCity, count OrderID, order by the count in descending order, and limit the result to the top three cities. They yield the same result.",both
How many orders are placed but not yet shipped?,SELECT COUNT(o.OrderID) AS UnshippedOrders FROM orders o WHERE o.ShippedDate IS NULL,"```sql
SELECT COUNT(OrderID) 
FROM orders 
WHERE ShippedDate IS NULL;
```","Both queries count the number of orders with a NULL ShippedDate, indicating they are not yet shipped. The difference is only in aliasing, which does not affect the result.",SELECT COUNT(OrderID) FROM orders WHERE ShippedDate IS NULL;,"Both queries count the number of orders that have a NULL value in the ShippedDate column, indicating they are placed but not yet shipped.",both
Identify customers with the longest time since their last order.,"SELECT o.CustomerID, DATEDIFF(CURRENT_DATE, MAX(o.OrderDate)) AS DaysSinceLastOrder FROM orders o GROUP BY o.CustomerID ORDER BY DaysSinceLastOrder DESC LIMIT 1;","```sql
SELECT c.CustomerID, c.CompanyName, MAX(o.OrderDate) AS LastOrderDate
FROM customers c
LEFT JOIN orders o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerID, c.CompanyName
ORDER BY LastOrderDate ASC
```","The generated query finds the latest order date per customer and orders them in ascending order, showing those with the most recent orders. It doesn't calculate or compare the time since the last order. The ground truth query calculates days since the last order and identifies the customer with the longest duration since their last purchase.","SELECT c.CustomerID, MAX(o.OrderDate) AS LastOrderDate FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY LastOrderDate ASC;","The generated query orders all customers by the date of their last order in ascending order, but it doesn't calculate the time difference or identify the specific customer with the longest time since their last order.",None
What is the total discount amount applied by each employee?,"SELECT employees.EmployeeID, SUM([Order Details].Discount * [Order Details].UnitPrice * [Order Details].Quantity) AS TotalDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.Discount * od.Quantity) AS TotalDiscount
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","The generated query multiplies Discount by Quantity, while the ground truth multiplies Discount by UnitPrice and Quantity, resulting in different total discount calculations.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;","Both queries calculate the total discount for each employee by multiplying the unit price, quantity, and discount, and grouping by EmployeeID. The order of multiplication does not affect the result.",FT
Identify the top 3 employees with the highest sales in July 2023.,"SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-07-31' GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName ORDER BY total_sales DESC LIMIT 3","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN employees ON orders.EmployeeID = employees.EmployeeID 
WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-07-31' 
GROUP BY employees.EmployeeID 
ORDER BY employee_sales DESC 
LIMIT 3
```","The generated query does not include the employees' first and last names, which are requested in the ground truth query.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE MONTH(orders.OrderDate) = 7 AND YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 3","The generated query uses MONTH and YEAR functions, which may not work efficiently across all databases. The ground truth query uses a BETWEEN clause for a date range, ensuring precision. Additionally, the generated query does not select employee names, which may be part of the expected results.",None
What is the average freight cost per shipment method?,"SELECT o.ShipVia, AVG(o.Freight) AS AverageFreight FROM orders o GROUP BY o.ShipVia;","```sql
SELECT ShipVia, AVG(Freight) AS AverageFreight
FROM orders
GROUP BY ShipVia;
```",Both queries calculate the average freight cost grouped by the shipment method (ShipVia) and will yield the same results. The difference in alias usage does not affect the outcome of the query.,"SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipVia;","Both queries select the shipment method (ShipVia) and calculate the average freight cost (AVG(Freight)) per shipment method, grouped by ShipVia. Column aliases are different but the outcome is the same.",both
Calculate Customer Retention Rate for the last quarter.,SELECT (COUNT(DISTINCT CASE WHEN OrderDate BETWEEN '2023-07-01' AND '2023-09-30' THEN CustomerID END) * 100.0 / COUNT(DISTINCT CASE WHEN OrderDate < '2023-07-01' THEN CustomerID END)) AS CustomerRetentionRate FROM orders;,"```sql
SELECT 
    (COUNT(DISTINCT o1.CustomerID) / NULLIF(COUNT(DISTINCT o2.CustomerID), 0)) * 100 AS CustomerRetentionRate
FROM 
    orders o1
LEFT JOIN 
    orders o2 ON o1.CustomerID = o2.CustomerID AND o2.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '3 month')
WHERE 
    o1.OrderDate BETWEEN DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '3 month') AND DATE_TRUNC('quarter', CURRENT_DATE)
```",The generated query calculates the retention rate incorrectly by considering customers from the last quarter visible in both time periods. The ground truth correctly filters customers based on date ranges using conditional counting.,SELECT (COUNT(DISTINCT orders.CustomerID) WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30') / COUNT(DISTINCT orders.CustomerID WHERE orders.OrderDate < '2023-07-01') AS customer_retention_rate FROM orders,"The generated query is syntactically incorrect and has missing parenthesis around COUNT. Moreover, it does not multiply by 100 to express the retention rate as a percentage, unlike the ground truth query.",None
What is the order fulfillment time for each shipping method?,"SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS FulfillmentTime FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM orders
GROUP BY ShipVia;
```",Both queries calculate the average order fulfillment time for each shipping method by using the DATEDIFF function on ShippedDate and OrderDate and grouping by ShipVia. The difference in alias naming does not affect the result.,"SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY ShipVia;","The queries are semantically equivalent and will yield the same results. The only difference is the alias name for the average calculation, which does not affect the outcome.",both
Identify any products with no current orders.,"SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);","```sql
SELECT p.ProductID, p.ProductName
FROM products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.OrderID IS NULL;
```",Both queries identify products that have no current orders by checking for the absence of a matching order in 'Order Details'.,SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"The generated query only selects ProductName, whereas the ground truth query selects both ProductID and ProductName.",Base
List the top three cities with the most customers.,"SELECT City, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY City ORDER BY NumberOfCustomers DESC LIMIT 3;","```sql
SELECT City, COUNT(CustomerID) AS CustomerCount
FROM customers
GROUP BY City
ORDER BY CustomerCount DESC
LIMIT 3;
```","Both queries group customers by City and count the number of customers per city, ordering by the count in descending order. They both limit the results to the top three cities. The only difference is in the alias used for the customer count, which does not affect the result.","SELECT City, COUNT(CustomerID) AS NumCustomers FROM customers GROUP BY City ORDER BY NumCustomers DESC LIMIT 3;","Both queries group customers by city, count the number of customers per city, and then order the results to return the top three cities. The column alias difference (NumCustomers vs. NumberOfCustomers) does not affect the outcome.",both
What is the average order fulfillment time for each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY month","```sql
SELECT YEAR(OrderDate) AS year, MONTH(OrderDate) AS month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time
FROM orders
GROUP BY YEAR(OrderDate), MONTH(OrderDate)
```","The generated query calculates the average for all years, while the ground truth query filters for the year 2023 only.","SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');","The generated query calculates the average fulfillment time for all years, while the ground truth query restricts it to orders from the year 2023.",None
Which customer has the highest shipping expenditure?,"SELECT CustomerID, SUM(Freight) AS TotalShippingCost FROM orders GROUP BY CustomerID ORDER BY TotalShippingCost DESC LIMIT 1;","```sql
SELECT CustomerID, SUM(Freight) AS TotalShippingExpenditure
FROM orders
GROUP BY CustomerID
ORDER BY TotalShippingExpenditure DESC
LIMIT 1;
```","Both queries calculate the total freight cost for each customer, order by the total in descending order, and limit the result to one, identifying the customer with the highest shipping expenditure.","SELECT CustomerID, SUM(Freight) AS TotalExpenditure FROM orders GROUP BY CustomerID ORDER BY TotalExpenditure DESC LIMIT 1;","Both queries calculate the total shipping expenditure per customer by summing the 'Freight' column, then order the results in descending order and limit the output to the highest spender. The column alias differences do not affect the result.",both
What is the total lifetime value of each customer?,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;","```sql
SELECT customers.CustomerID, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CustomerLifetimeValue
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID;
```",Both queries compute the total lifetime value for each customer by joining the same tables and aggregating with SUM. The calculations and grouping are identical.,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID","Both queries calculate the total lifetime value per customer by joining 'Order Details', 'orders', and 'customers' tables and grouping by 'CustomerID'. The join order does not affect the result.",both
Which shipping company provides the lowest average freight cost?,"SELECT ShipVia, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipVia ORDER BY AvgFreightCost ASC LIMIT 1;","```sql
SELECT ShipVia, AVG(Freight) AS AverageFreight
FROM orders
GROUP BY ShipVia
ORDER BY AverageFreight
LIMIT 1;
```","Both queries calculate the average freight cost for each shipping company and return the one with the lowest average. The differences in alias names and ORDER BY direction are functionally equivalent, as both result in the same answer.","SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipVia ORDER BY AvgFreight ASC LIMIT 1;","Both queries are identical in functionality. They calculate the average freight cost per shipping company, sort them in ascending order, and limit the result to the one with the lowest average freight. The difference in alias name has no impact on the outcome.",both
Which products have more units on order than in stock?,SELECT ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;,"```sql
SELECT ProductID, ProductName, UnitsInStock, UnitsOnOrder
FROM products
WHERE UnitsOnOrder > UnitsInStock;
```","Both queries correctly identify products where UnitsOnOrder is greater than UnitsInStock. The generated query includes additional columns in the SELECT clause, but this does not change the correctness regarding the user's question.",SELECT ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;,Both queries are identical and correctly compare the UnitsOnOrder with UnitsInStock for products.,both
How many customers have been retained from 2022 to 2023?,SELECT COUNT(DISTINCT retained.CustomerID) FROM (SELECT CustomerID FROM orders WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31') AS previous INNER JOIN (SELECT CustomerID FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31') AS current ON previous.CustomerID = current.CustomerID,"```sql
SELECT COUNT(DISTINCT orders.CustomerID) 
FROM orders 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
AND orders.CustomerID IN (
    SELECT DISTINCT orders.CustomerID 
    FROM orders 
    WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'
);
```","Both queries effectively count the distinct CustomerIDs present in both 2022 and 2023, representing customers retained across these years.",SELECT COUNT(DISTINCT orders.CustomerID) AS retained_customers FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2023-12-31',"The generated query counts all customers with orders between 2022 and 2023, but doesn't ensure the customer ordered in both years. The ground truth query finds customers with orders in both 2022 and 2023, accurately capturing retention.",Base
What is the average time taken to fulfill an order each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month ORDER BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM 
    orders
GROUP BY 
    Month
ORDER BY 
    Month;
```","The generated query lacks a condition to exclude orders where ShippedDate is NULL, potentially affecting the average calculation.","SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');","The generated query does not check for NULL values in 'ShippedDate', which the ground truth query does. This could affect average calculation if NULLs exist.",None
What is the average freight cost per order?,SELECT AVG(Freight) AS AverageFreight FROM orders;,"```sql
SELECT AVG(Freight) AS AverageFreightCost FROM orders;
```","Both queries calculate the average freight cost per order from the 'orders' table, differing only in the alias used for the output column.",SELECT AVG(Freight) AS AvgFreightCost FROM orders;,"Both queries calculate the average freight cost from the 'orders' table, differing only in the alias name for the result.",both
Identify the product with the highest inventory turnover ratio.,"SELECT p.ProductID, (SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0)) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY InventoryTurnoverRatio DESC LIMIT 1;","```sql
SELECT p.ProductID, p.ProductName, 
       SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY InventoryTurnoverRatio DESC
LIMIT 1;
```","The generated query includes ProductName in the selection and grouping, which is unnecessary for calculating the turnover ratio. Additionally, it doesn't handle division by zero as the ground truth query does.","SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(CAST(CAST(p.UnitsInStock AS Float) AS Float)), 0) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY InventoryTurnoverRatio DESC LIMIT 1;","Both queries calculate the inventory turnover ratio similarly and identify the product with the highest ratio. The difference is in the selected column for display (ProductName vs ProductID), which does not affect the result.",FT
How many units of each product were sold on average per month?,"SELECT p.ProductName, AVG(od.Quantity) AS AverageMonthlySales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;","```sql
SELECT 
    p.ProductID,
    p.ProductName,
    AVG(sales_per_month) AS AverageUnitsSold
FROM 
    products p
JOIN 
    (SELECT 
        od.ProductID,
        SUM(od.Quantity) AS sales_per_month
     FROM 
        [Order Details] od
     GROUP BY 
        od.ProductID) AS sales ON p.ProductID = sales.ProductID
GROUP BY 
    p.ProductID, p.ProductName;
```","The generated query computes the total sales per product for all time before averaging, while the ground truth query directly averages the quantity sold in all orders.","SELECT products.ProductID, products.ProductName, AVG(od.Quantity) AS AverageMonthlySales FROM products INNER JOIN [Order Details] od ON products.ProductID = od.ProductID GROUP BY products.ProductID, products.ProductName;",The generated query does not calculate average sales per month; it only averages sales per product without considering the monthly breakdown.,None
Find the product with the highest total revenue after discounts.,"SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenueAfterDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalRevenueAfterDiscount DESC LIMIT 1;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalRevenue DESC
LIMIT 1;
```","Both queries calculate total revenue after applying discounts, group by product, and return the product with the highest revenue. The difference in selected columns (ProductID in the generated query) does not affect the result as only one product is returned.","SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 1;","The generated query does not join the products table, so it cannot return the product name as requested. It only IDs the ProductID, whereas the ground truth query includes the ProductName.",Base
Which products have stock below their reorder level?,SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock < ReorderLevel;
```","The generated query includes additional columns (ProductID, UnitsInStock, ReorderLevel) compared to the ground truth query, which only selects ProductName.",SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"Both queries select ProductName from products where UnitsInStock is less than ReorderLevel, accurately answering the user's question.",FT
What is the average order fulfillment time per month for 2023?,"SELECT EXTRACT(MONTH FROM OrderDate) AS Month, AVG(DATEDIFF(day, OrderDate, ShippedDate)) AS AvgFulfillmentTime FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = 2023 GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
    AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM 
    orders
WHERE 
    OrderDate >= '2023-01-01' AND OrderDate < '2024-01-01'
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries calculate the average fulfillment time per month for orders in 2023. The generated query uses DATE_FORMAT to extract the year and month, while the ground truth query uses EXTRACT. Both approaches yield equivalent results for this context.","SELECT EXTRACT(MONTH FROM OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY Month;","The generated query uses 'DATEDIFF(ShippedDate, OrderDate)', which may result in a SQL error unless adjusted for syntax. The ground truth uses 'DATEDIFF(day, OrderDate, ShippedDate)' which is correct based on proper syntax and functions for SQL Server. Also, how the year is filtered differs, which might cause issues in platforms sensitive to date formats.",Base
How quickly are orders generally shipped after being placed?,"SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgShipTime FROM orders WHERE orders.ShippedDate IS NOT NULL;","```sql
SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM orders;
```","The generated query does not filter out null ShippedDate values, unlike the ground truth query, potentially skewing the result.","SELECT DATEDIFF(ShippedDate, OrderDate) AS ShippingTime FROM orders;","The generated query lists individual shipping times, while the ground truth calculates the average shipping time, which directly answers how quickly orders are generally shipped.",None
Which suppliers supply the highest number of different products?,"SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC;","```sql
SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount
FROM products
GROUP BY SupplierID
ORDER BY ProductCount DESC;
```","Both queries are identical in functionality, ordering suppliers by the count of unique products they supply, in descending order.","SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1;","Both queries count the number of distinct products supplied by each supplier and order the result in descending order, but the generated SQL query also limits the result to the top 1 supplier, effectively identifying the one supplying the highest number of different products.",both
Which employee handles the most valuable products by unit price?,"SELECT e.FirstName, e.LastName FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID ORDER BY od.UnitPrice DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, MAX(od.UnitPrice) AS MaxUnitPrice
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY MaxUnitPrice DESC
LIMIT 1;
```","The generated query groups the employees and finds the max unit price per employee, while the ground truth query simply orders by unit price and takes the top result. This can lead to different outcomes if multiple employees handle the same highest priced product.","SELECT e.FirstName, e.LastName FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.UnitPrice = (SELECT MAX(UnitPrice) FROM [Order Details]) LIMIT 1;","Both queries find the employee associated with the highest unit price, even though the ground truth query joins with the products table without affecting the result.",FT
How much sales did each employee generate in Q1 2023?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY employees.EmployeeID;","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN employees ON orders.EmployeeID = employees.EmployeeID 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' 
GROUP BY employees.EmployeeID
```",The generated SQL query gives the same results as the ground truth query. The queries are identical except for formatting.,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY employees.EmployeeID;","The generated SQL query is identical to the ground truth query, both yielding the same results by calculating sales per employee for the specified date range.",both
Which products have been discontinued but still have stock available?,"SELECT ProductName, UnitsInStock FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;","```sql
SELECT ProductID, ProductName, UnitsInStock
FROM products
WHERE Discontinued = 1 AND UnitsInStock > 0;
```","Both queries correctly identify discontinued products that still have stock available. The only difference is that the generated query includes the ProductID, which does not affect the results relevant to the user's question.",SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;,"The generated query only selects ProductName, while the ground truth query also selects UnitsInStock.",Base
What is the average unit price of products per category?,"SELECT c.CategoryName, AVG(p.UnitPrice) AS AveragePrice FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryName;","```sql
SELECT CategoryID, AVG(UnitPrice) AS AverageUnitPrice
FROM products
GROUP BY CategoryID;
```","The generated query returns the averages grouped by CategoryID, whereas the ground truth query returns averages grouped by CategoryName, also including a join with the categories table to fetch the category names.","SELECT CategoryID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY CategoryID;","The generated query groups by CategoryID from the products table without joining the categories table, missing the CategoryName in the output.",None
Which orders had the highest total discount applied?,"SELECT OrderID, SUM(Discount * UnitPrice * Quantity) AS TotalDiscount FROM [Order Details] GROUP BY OrderID ORDER BY TotalDiscount DESC LIMIT 1;","```sql
SELECT OrderID, SUM(Discount) AS TotalDiscount
FROM [Order Details]
GROUP BY OrderID
ORDER BY TotalDiscount DESC
LIMIT 1;
```","The generated query calculates discount as a simple sum, ignoring the effect of UnitPrice and Quantity, whereas the ground truth query calculates total discount applied in terms of monetary value.","SELECT OrderID, SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details] GROUP BY OrderID ORDER BY TotalDiscount DESC LIMIT 1;","Both queries calculate the total discount for each order and order the results in descending order to find the order with the highest discount. The calculations in the 'SUM' function are equivalent, leading to the same outcome.",FT
What is the average reorder level for products provided by each supplier?,"SELECT p.SupplierID, AVG(p.ReorderLevel) AS AverageReorderLevel FROM products p GROUP BY p.SupplierID;","```sql
SELECT suppliers.SupplierID, AVG(products.ReorderLevel) AS AverageReorderLevel
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
GROUP BY suppliers.SupplierID;
```",Both queries calculate the average reorder level for each supplier and group by supplier ID. The different table joins do not affect the result because the same SupplierID linkage is used.,"SELECT s.CompanyName, AVG(p.ReorderLevel) AS AverageReorderLevel FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName","Both queries calculate the average reorder level per supplier. The generated query uses the supplier's company name for grouping, while the ground truth uses the supplier ID. These will produce the same result if the mapping between supplier IDs and company names is one-to-one.",both
How many products are currently at or above their reorder level?,SELECT COUNT(*) AS AtOrAboveReOrder FROM products WHERE UnitsInStock >= ReorderLevel;,"```sql
SELECT COUNT(*) AS ProductsAtOrAboveReorderLevel
FROM products
WHERE UnitsInStock >= ReorderLevel;
```",Both queries count the number of products where the UnitsInStock is greater than or equal to the ReorderLevel. The slight difference in alias names does not affect the result.,SELECT COUNT(*) AS at_reorder_level FROM products WHERE UnitsInStock >= ReorderLevel;,Both queries count the number of products with UnitsInStock greater than or equal to ReorderLevel and will yield the same result.,both
Which customer has the highest total freight cost over all their orders?,"SELECT CustomerID, SUM(Freight) AS TotalFreight FROM orders GROUP BY CustomerID ORDER BY TotalFreight DESC LIMIT 1;","```sql
SELECT CustomerID, SUM(Freight) AS TotalFreight
FROM orders
GROUP BY CustomerID
ORDER BY TotalFreight DESC
LIMIT 1;
```","The generated SQL query is logically identical to the ground truth query. Both calculate the total freight cost per customer and order by total freight in descending order, returning the customer with the highest total freight cost using LIMIT 1. Differences in formatting do not affect the result.","SELECT customers.CustomerID, SUM(orders.Freight) AS TotalFreight FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID ORDER BY TotalFreight DESC LIMIT 1;",Both queries calculate the total freight per customer and return the one with the highest freight. The join with the customers table in the generated query doesn't affect the result since only CustomerID is required.,both
Find the top 3 products with the most significant increase in order quantities month-over-month.,"WITH MonthlySales AS (SELECT DATE_TRUNC('month', o.OrderDate) AS Month, od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY Month, od.ProductID), MonthOverMonthChange AS (SELECT a.ProductID, a.Month, a.TotalQuantity, a.TotalQuantity - COALESCE(b.TotalQuantity, 0) AS Increase FROM MonthlySales a LEFT JOIN MonthlySales b ON a.ProductID = b.ProductID AND a.Month = b.Month + INTERVAL '1 month') SELECT ProductID FROM MonthOverMonthChange ORDER BY Increase DESC LIMIT 3;","```sql
SELECT ProductID, 
       SUM(Quantity) AS TotalQuantity,
       MONTH(OrderDate) AS OrderMonth,
       YEAR(OrderDate) AS OrderYear
FROM [Order Details]
JOIN Orders ON [Order Details].OrderID = Orders.OrderID
GROUP BY ProductID, YEAR(OrderDate), MONTH(OrderDate)
ORDER BY TotalQuantity DESC
LIMIT 3;
```","The generated query selects the top 3 products by total quantity in a month, not by the increase in quantity month-over-month, which is the user's request. The ground truth query calculates the change in sales month-over-month and sorts by this change.","SELECT p.ProductName, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 2 MONTH) AND CURRENT_DATE GROUP BY p.ProductName, EXTRACT(MONTH FROM o.OrderDate);\",The generated query only calculates total quantities by month without comparing month-over-month changes. It lacks the calculation of increase in order quantities and doesn’t limit the results to the top 3 products based on the increase.,None
Determine the average reorder level for each category.,"SELECT c.CategoryName, AVG(p.ReorderLevel) AS AverageReorderLevel FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryName;","```sql
SELECT CategoryID, AVG(ReorderLevel) AS AverageReorderLevel
FROM products
GROUP BY CategoryID;
```",The generated query returns CategoryID instead of CategoryName and does not join with the categories table.,"SELECT c.CategoryID, AVG(p.ReorderLevel) AS AverageReorderLevel FROM products p JOIN Categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;","The generated SQL query groups by CategoryID, while the ground truth groups by CategoryName. This can lead to different outputs if categories have non-unique names or if there is a mismatch between CategoryID and CategoryName.",None
What is the total freight cost associated with all orders to a specific country?,"SELECT ShipCountry, SUM(Freight) FROM orders WHERE ShipCountry = 'specific_country' GROUP BY ShipCountry","```sql
SELECT SUM(orders.Freight) AS TotalFreightCost
FROM orders
WHERE orders.ShipCountry = 'specific_country';
```",Both queries calculate the sum of Freight for orders shipped to 'specific_country'. The difference in formatting does not affect the result since the SUM operation for a single country doesn't require grouping.,"SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders WHERE ShipCountry = 'SpecificCountry' GROUP BY ShipCountry;","Both queries calculate the total freight cost for a specific country, differing only in the naming convention ('SpecificCountry' vs 'specific_country') which is not relevant to the logic of the query.",both
Identify the product with the highest reorder level.,SELECT ProductName FROM products ORDER BY ReorderLevel DESC LIMIT 1;,"```sql
SELECT ProductID, ProductName, ReorderLevel 
FROM products 
ORDER BY ReorderLevel DESC 
LIMIT 1;
```","The generated SQL query returns additional columns (ProductID, ReorderLevel) that are not requested in the ground truth SQL (which only selects ProductName).",SELECT ProductName FROM products WHERE ReorderLevel = (SELECT MAX(ReorderLevel) FROM products);,Both queries correctly identify the product with the highest reorder level by either using a subquery or ordering and limiting the results.,FT
What percentage of products are currently discontinued?,SELECT (COUNT(ProductID) * 100.0 / (SELECT COUNT(*) FROM products)) AS DiscontinuedPercentage FROM products WHERE Discontinued = 1;,"```sql
SELECT 
    (COUNT(CASE WHEN Discontinued = 1 THEN 1 END) * 100.0 / COUNT(*)) AS DiscontinuedPercentage
FROM 
    products;
```","Both queries calculate the percentage of discontinued products by dividing the count of discontinued products by the total count of products, then multiplying by 100.0. They yield the same result.",SELECT COUNT(ProductID) * 100.0 / (SELECT COUNT(ProductID) FROM products) AS discontinued_percentage FROM products WHERE Discontinued = 1,Both queries correctly calculate the percentage of discontinued products by dividing the count of discontinued products by the total count of products.,both
What is the average freight cost by shipping method?,"SELECT ShipVia, AVG(Freight) AS AverageFreightCost FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, AVG(Freight) AS AverageFreightCost
FROM orders
GROUP BY ShipVia;
```",The generated SQL query and the ground truth query are functionally identical and both accurately calculate the average freight cost by shipping method.,"SELECT ShipVia, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipVia;","Both queries compute the average freight cost grouped by shipping method (ShipVia). The difference is only in the alias name used for the average freight column, which does not affect the accuracy or the results.",both
What is the monthly trend of on-time delivery rates in 2023?,"SELECT MONTH(orders.OrderDate) AS order_month, COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 1.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE YEAR(orders.OrderDate) = 2023 GROUP BY MONTH(orders.OrderDate)","```sql
SELECT MONTH(orders.OrderDate) AS month, 
       COUNT(orders.OrderID WHERE orders.ShippedDate <= orders.RequiredDate) * 1.0 / 
       COUNT(orders.OrderID) AS on_time_delivery_rate 
FROM orders 
WHERE YEAR(orders.OrderDate) = 2023 
GROUP BY MONTH(orders.OrderDate)
```","The generated query incorrectly uses 'COUNT' with a 'WHERE' clause inside it, which is invalid SQL syntax. The ground truth query correctly uses 'COUNT' with a 'CASE WHEN' statement to count on-time deliveries.","SELECT TO_CHAR(shippingdate, 'YYYY-MM') AS month, COUNT(CASE WHEN order_status = 'Shipped' THEN 1 END) * 100.0 / COUNT(order_id) AS on_time_delivery_rate FROM orders WHERE shippingdate >= '2023-01-01' AND shippingdate < '2024-01-01' GROUP BY month ORDER BY month;","The generated query calculates on-time delivery based on 'order_status = Shipped' without comparing shippingdate to required dates, while the ground truth query checks if ShippedDate is before or on RequiredDate. Additionally, the date extraction and range criteria differ.",None
Which product has the highest discount applied across all orders?,"SELECT p.ProductID, p.ProductName, od.Discount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID ORDER BY od.Discount DESC LIMIT 1;","```sql
SELECT ProductID, MAX(Discount) AS MaxDiscount
FROM [Order Details]
GROUP BY ProductID
ORDER BY MaxDiscount DESC
LIMIT 1;
```","The generated query groups by ProductID and finds the max discount per product, then selects the product with the highest among these. However, it does not guarantee the single highest discount across all orders. The ground truth query directly orders all discounts and picks the highest one, ensuring the product with the maximum discount overall is selected.","SELECT [Order Details].ProductID, MAX([Order Details].Discount) AS MaxDiscount FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY MaxDiscount DESC LIMIT 1;","The generated query returns the product ID with the highest discount, but it may not capture the exact product if multiple products have the same max discount. The ground truth query retrieves both the product ID and name of the product with the highest single discount value by joining with the products table.",None
Which products have not been reordered past their reorder level?,SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND UnitsOnOrder = 0;,"```sql
SELECT ProductID, ProductName 
FROM products 
WHERE UnitsInStock <= ReorderLevel AND UnitsOnOrder = 0;
```","The generated query includes ProductID, while the ground truth query only selects ProductName. Both queries would yield similar results in terms of the condition for not being reordered, but the selected columns differ.","SELECT ProductName, UnitsOnOrder, ReorderLevel FROM products WHERE UnitsOnOrder <= ReorderLevel;","The generated query checks if UnitsOnOrder is less than or equal to ReorderLevel, but it should check if UnitsInStock is less than or equal to ReorderLevel and UnitsOnOrder is zero, like the ground truth query.",None
What is the correlation between freight cost and delivery time?,"SELECT CORR(Freight, DATEDIFF(ShippedDate, OrderDate)) AS Correlation FROM orders;","```sql
SELECT CORR(Freight, DATEDIFF(ShippedDate, OrderDate) AS correlation
FROM orders
WHERE ShippedDate IS NOT NULL AND OrderDate IS NOT NULL;
```",Both queries calculate the correlation between freight cost and delivery time using DATEDIFF on non-null shipped and order dates.,"SELECT CORR(Freight, DATEDIFF(ShippedDate, OrderDate)) AS Correlation FROM orders;",Both queries are identical and correctly calculate the correlation between freight cost and delivery time using the DATEDIFF function.,both
Calculate the total revenue generated by orders shipped after the required date.,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.ShippedDate > orders.RequiredDate;,"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE orders.ShippedDate > orders.RequiredDate;
```",The generated SQL query is identical to the ground truth query in logic and output.,SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.ShippedDate > o.RequiredDate;,"Both queries calculate the total revenue from orders where the shipped date is after the required date, using the same logic and columns.",both
What are the top 5 products that have the highest inventory turnover ratio?,"SELECT products.ProductID, (SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0)) AS InventoryTurnoverRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE products.Discontinued = 0 GROUP BY products.ProductID ORDER BY InventoryTurnoverRatio DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, 
       SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY InventoryTurnoverRatio DESC
LIMIT 5;
```","The generated query does not filter out discontinued products, which the ground truth query does. This can lead to different results.","SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY InventoryTurnoverRatio DESC LIMIT 5;","The generated SQL query does not filter out discontinued products, which affects the calculation of the inventory turnover ratio.",None
Which employee generated the highest sales last month?,"SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) - 1 AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName ORDER BY total_sales DESC LIMIT 1","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN employees ON orders.EmployeeID = employees.EmployeeID 
WHERE orders.OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') 
AND orders.OrderDate < DATE_TRUNC('month', CURRENT_DATE) 
GROUP BY employees.EmployeeID 
ORDER BY employee_sales DESC 
LIMIT 1
```","Both queries calculate the total sales per employee for the previous month and return the employee with the highest sales. The main difference is in the handling of date filtering, but both effectively target the same period. The generated query lacks employee name details but this does not affect the result regarding which employee generated the highest sales.","SELECT orders.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS EmployeeSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) AND MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY orders.EmployeeID ORDER BY EmployeeSales DESC LIMIT 1","The generated query does not include employee names, whereas the ground truth does. Functionally, both queries aim to identify the employee with the highest sales last month, but only the second query provides the employee's full name, which might be part of the user's requirement.",Base
How many products need to be reordered in each category?,"SELECT CategoryID, COUNT(ProductID) AS ReordersNeeded FROM products WHERE UnitsInStock < ReorderLevel GROUP BY CategoryID;","```sql
SELECT p.CategoryID, COUNT(*) AS ProductsToReorder
FROM products p
WHERE p.UnitsInStock <= p.ReorderLevel
GROUP BY p.CategoryID;
```","The generated SQL query uses '<=' instead of '<'. This may include products that are at their reorder level, not just those below it, potentially leading to different results than the ground truth query.","SELECT CategoryID, COUNT(*) AS ReorderNeeded FROM products WHERE UnitsInStock <= ReorderLevel GROUP BY CategoryID;","Both queries group the products by CategoryID and count those needing reorder. 'UnitsInStock <= ReorderLevel' vs. 'UnitsInStock < ReorderLevel' could cause a slight difference, but both check if stock is low.",FT
What is the correlation between supplier location and product price?,"SELECT suppliers.Region, AVG(products.UnitPrice) AS AvgPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.Region;","```sql
SELECT 
    s.Country, 
    AVG(p.UnitPrice) AS AvgProductPrice
FROM 
    suppliers s
JOIN 
    products p ON s.SupplierID = p.SupplierID
GROUP BY 
    s.Country;
```","The generated query groups by Country instead of Region, which may lead to incorrect results if these fields differ.","SELECT suppliers.Country, AVG(products.UnitPrice) AS Average_Price FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.Country;","The generated query groups by Country, while the ground truth groups by Region. These are different attributes and will produce different results.",None
Which customers made more than three purchases in the last year?,"SELECT customers.CustomerID, COUNT(DISTINCT orders.OrderID) AS total_orders FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE YEAR(orders.OrderDate) = (YEAR(CURDATE()) - 1) GROUP BY customers.CustomerID HAVING total_orders > 3","```sql
SELECT CustomerID
FROM orders
WHERE OrderDate >= DATEADD(year, -1, GETDATE())
GROUP BY CustomerID
HAVING COUNT(OrderID) > 3
```","Both queries aim to find customers with more than three purchases in the last year, but they differ in implementation. The generated query uses DATEADD and GETDATE, which may not accurately reflect the last calendar year. The ground truth query uses YEAR function to specifically target the previous calendar year. Moreover, the ground truth query joins with a customers table, checking distinct orders by customers. The generated query does not account for distinct OrderID, potentially leading to different results.","SELECT customers.CustomerID, COUNT(orders.OrderID) AS order_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY customers.CustomerID HAVING order_count > 3","Both queries count the number of orders for each customer from the previous year and select those with more than three purchases. Despite differences in the date filtering method, they achieve the same outcome.",FT
What percentage of orders were delivered on or before the required date in the last quarter?,SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN orders.OrderID END) * 100.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30',"```sql
SELECT (COUNT(orders.OrderID) FILTER (WHERE orders.ShippedDate <= orders.RequiredDate) * 100.0 / COUNT(orders.OrderID)) AS on_time_delivery_rate 
FROM orders 
WHERE orders.OrderDate >= '2023-07-01' AND orders.OrderDate < '2023-10-01'
```","Both queries compute the percentage of orders delivered on or before the required date in the last quarter by dividing the count of such orders by the total orders in the specified date range, which is effectively the same in both cases.",SELECT 100 * SUM(CASE WHEN Order_Details.order_status = 'Shipped' THEN 1 ELSE 0 END) / COUNT(Order_Details.OrderID) AS on_time_delivery_rate FROM Order_Details WHERE Order_Details.OrderDate BETWEEN '2023-07-01' AND '2023-09-30',"The generated query checks if orders are shipped, while the ground truth checks if they are shipped on or before the required date.",Base
Find the average shipping time by country.,"SELECT ShipCountry, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipCountry;","```sql
SELECT ShipCountry, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime
FROM orders
WHERE ShippedDate IS NOT NULL
GROUP BY ShipCountry;
```","The generated SQL query accurately calculates the average shipping time by country, matching the intended structure and logic of the ground truth query.","SELECT ShipCountry, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_shipping_time FROM orders GROUP BY ShipCountry;","The generated SQL query does not account for NULL values in ShippedDate, which could affect the average calculation if there are orders that have not been shipped.",Base
What is the top sales territory based on order quantity?,"SELECT orders.ShipRegion, SUM([Order Details].Quantity) AS OrderQuantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipRegion ORDER BY OrderQuantity DESC LIMIT 1","```sql
SELECT e.Region, SUM(od.Quantity) AS TotalQuantity
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.Region
ORDER BY TotalQuantity DESC
LIMIT 1;
```","The Generated SQL Query groups by employee region, while the Ground Truth SQL Query groups by shipping region.","SELECT salesTerritoryId, SUM([Order Details].Quantity) AS total_quantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.SalesTerritory = salesTerritoryId GROUP BY salesTerritoryId ORDER BY total_quantity DESC LIMIT 1","The generated query groups by salesTerritoryId, while the ground truth query groups by ShipRegion. They aggregate data based on different criteria and will yield different results.",None
Compile a list of employees and their average order quantity per transaction.,"SELECT e.EmployeeID, AVG(od.Quantity) AS AverageOrderQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.Quantity) AS AverageOrderQuantity
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```",Both queries calculate the average order quantity per employee. The generated query includes employee names which does not affect the calculated averages.,"SELECT e.EmployeeID, AVG(od.Quantity) AS AvgOrderQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","The generated SQL query correctly returns the average order quantity per employee, similar to the ground truth query. The only difference is the alias name, which does not affect the result.",both
What is the total revenue generated from each product category?,"SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY CategoryID;","```sql
SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.CategoryID;
```",Both queries calculate the total revenue for each product category by joining the products and order details tables on ProductID and grouping by CategoryID.,"SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID;","Both queries correctly calculate the total revenue per product category by joining the 'products' and 'Order Details' tables, summing up the product of 'Quantity' and 'UnitPrice' for each category.",both
What is the average discount applied across all orders in December 2023?,SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-12-01' AND '2023-12-31',"```sql
SELECT AVG([Order Details].Discount) AS average_discount 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-12-01' AND '2023-12-31'
```","Both queries calculate the average discount for orders in December 2023 with the same logic, differing only in the alias naming.",SELECT AVG(discount) FROM [Order Details] WHERE order_id IN (SELECT order_id FROM orders WHERE order_date BETWEEN '2023-12-01' AND '2023-12-31');,Both queries calculate the average discount for orders placed in December 2023 by filtering orders with a date range and computing the average discount from the [Order Details] table.,both
Which suppliers have the most discontinued products?,"SELECT s.SupplierID, COUNT(*) AS DiscontinuedCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1 GROUP BY s.SupplierID ORDER BY DiscontinuedCount DESC;","```sql
SELECT s.SupplierID, s.CompanyName, COUNT(p.ProductID) AS DiscontinuedProductCount
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
WHERE p.Discontinued = 1
GROUP BY s.SupplierID, s.CompanyName
ORDER BY DiscontinuedProductCount DESC;
```","Both queries accurately identify suppliers with the most discontinued products, grouping by SupplierID. The Generated SQL Query includes the CompanyName, which does not affect the outcome of counting discontinued products.","SELECT SupplierID, COUNT(ProductID) AS DiscontinuedCount FROM products WHERE Discontinued = 1 GROUP BY SupplierID ORDER BY DiscontinuedCount DESC;","Both queries effectively count the discontinued products grouped by SupplierID, including in the result only those suppliers who have products in the products table. Therefore, they should yield the same result regarding the number of discontinued products per supplier.",both
How many customers placed orders in more than two different months in 2023?,"SELECT COUNT(DISTINCT CustomerID) AS customer_count FROM (SELECT CustomerID, COUNT(DISTINCT EXTRACT(MONTH FROM OrderDate)) as months_ordered FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY CustomerID) AS subquery WHERE months_ordered > 2;","```sql
SELECT COUNT(DISTINCT orders.CustomerID) AS customers_count 
FROM orders 
WHERE YEAR(orders.OrderDate) = 2023 
GROUP BY orders.CustomerID 
HAVING COUNT(DISTINCT MONTH(orders.OrderDate)) > 2;
```","Both queries count the number of distinct customers who placed orders in more than two different months in 2023. The generated query uses YEAR and MONTH functions, while the ground truth query uses BETWEEN and EXTRACT(MONTH), but both achieve the same outcome.","SELECT COUNT(customer_id) FROM (SELECT c.CustomerID, COUNT(DISTINCT EXTRACT(MONTH FROM o.OrderDate)) AS MonthsCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE EXTRACT(YEAR FROM o.OrderDate) = 2023 GROUP BY c.CustomerID) AS monthly_counts WHERE MonthsCount > 2;",Both queries count customers who placed orders in more than two different months in 2023. They use similar logic with slight differences in date filtering but will yield the same result.,both
"How many days late, on average, have orders been shipped past the required date?","SELECT AVG(DATEDIFF(o.ShippedDate, o.RequiredDate)) AS AvgDaysLate FROM orders o WHERE DATEDIFF(o.ShippedDate, o.RequiredDate) > 0;","```sql
SELECT AVG(DATEDIFF(orders.ShippedDate, orders.RequiredDate)) AS AverageDaysLate
FROM orders
WHERE orders.ShippedDate > orders.RequiredDate;
```","Both queries calculate the average number of days orders are shipped late by checking when the ShippedDate is greater than the RequiredDate, which gives the same result.","SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AverageDaysLate FROM orders WHERE ShippedDate > RequiredDate;",Both queries compute the average number of days that orders have been shipped late by calculating the difference between ShippedDate and RequiredDate where ShippedDate is later than RequiredDate.,both
Find the supplier with the highest average unit price for their products.,"SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AveragePrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY AveragePrice DESC LIMIT 1;","```sql
SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AverageUnitPrice
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
GROUP BY suppliers.SupplierID
ORDER BY AverageUnitPrice DESC
LIMIT 1;
```",Both queries calculate the average unit price for each supplier's products and return the supplier with the highest average unit price. The group by clause difference does not affect the result as both SupplierID and CompanyName are unique identifiers for suppliers.,"SELECT s.SupplierID, AVG(p.UnitPrice) AS AvgUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY AvgUnitPrice DESC LIMIT 1;","The generated query returns the SupplierID, while the ground truth query returns the CompanyName. Both queries order by average price and limit to one result, so the logic is otherwise similar.",Base
List products that are below reorder level but have no pending orders.,SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel AND UnitsOnOrder = 0;,"```sql
SELECT p.ProductID, p.ProductName, p.UnitsInStock, p.ReorderLevel 
FROM products p 
WHERE p.UnitsInStock < p.ReorderLevel 
AND p.UnitsOnOrder = 0;
```","Both queries select products where UnitsInStock is less than ReorderLevel and UnitsOnOrder is zero. Though the Generated SQL Query returns more columns, the core condition and filtering logic match the user's question.",SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel AND UnitsOnOrder = 0;,Both queries select products where the stock is below reorder level and there are no units on order. They are identical and yield the same results.,both
List the regions covered by employees and the total sales in each.,"SELECT employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Region;","```sql
SELECT employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM employees
JOIN orders ON employees.EmployeeID = orders.EmployeeID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY employees.Region;
```","The generated SQL query and the ground truth query are identical in terms of structure and logic. Both queries join the same tables, perform the same calculations, and group by the same field, yielding the same results.","SELECT employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Region;",The generated SQL query and the ground truth query are identical. They both accurately answer the user's question by retrieving the regions covered by employees and calculating total sales for each region.,both
Which months had the highest on-time delivery rate?,"SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 1.0 / COUNT(OrderID)) * 100 AS OnTimeRate FROM orders GROUP BY Month ORDER BY OnTimeRate DESC;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
       COUNT(OrderID) AS TotalOrders,
       COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveries,
       (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate
FROM orders
GROUP BY Month
ORDER BY OnTimeDeliveryRate DESC;
```",The generated query uses OrderDate for month extraction while the ground truth uses ShippedDate. This affects the grouping and results.,"SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY Year, Month ORDER BY OnTimeRate DESC;","The generated query groups by year and month separately, while the ground truth groups by formatted month-year string. This can result in different grouping and outputs between queries.",None
What is the stock-to-sale ratio for each product?,"SELECT ProductName, UnitsInStock * 1.0 / SUM([Order Details].Quantity) AS StockToSaleRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;","```sql
SELECT 
    p.ProductID,
    p.ProductName,
    p.UnitsInStock,
    SUM(od.Quantity) AS TotalSales,
    CASE 
        WHEN SUM(od.Quantity) = 0 THEN NULL 
        ELSE p.UnitsInStock / SUM(od.Quantity) 
    END AS StockToSaleRatio
FROM 
    products p
LEFT JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.ProductName, p.UnitsInStock;
```","Both queries calculate the stock-to-sale ratio by dividing units in stock by total sales for each product, and their logic is equivalent. The generated query uses LEFT JOIN to include products without sales, which can be seen as more comprehensive.","SELECT ProductID, ProductName, UnitsInStock / SUM(od.Quantity) AS StockToSaleRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY ProductID, ProductName;","Both queries calculate the stock-to-sale ratio by dividing UnitsInStock by the sum of quantities from 'Order Details', grouped by ProductID and ProductName, yielding the same result.",both
Which products are discontinued?,SELECT ProductName FROM products WHERE Discontinued = 1;,"```sql
SELECT ProductID, ProductName
FROM products
WHERE Discontinued = 1;
```","Both queries retrieve discontinued products from the 'products' table using the 'Discontinued = 1' condition. The generated query includes 'ProductID' in the SELECT clause, but the core data returned (product names) remains correct.",SELECT ProductName FROM products WHERE Discontinued = 1;,"Both queries select the 'ProductName' from the 'products' table where 'Discontinued' equals 1, thus they yield the same results.",both
What is the monthly growth rate of total orders shipped?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) - LAG(COUNT(OrderID), 1) OVER (ORDER BY DATE_FORMAT(OrderDate, '%Y-%m')) AS Growth FROM orders WHERE ShippedDate IS NOT NULL GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    COUNT(OrderID) AS TotalOrders,
    (COUNT(OrderID) - LAG(COUNT(OrderID)) OVER (ORDER BY DATE_FORMAT(OrderDate, '%Y-%m'))) / NULLIF(LAG(COUNT(OrderID)) OVER (ORDER BY DATE_FORMAT(OrderDate, '%Y-%m')), 0) * 1.0 AS MonthlyGrowthRate
FROM 
    orders
WHERE 
    ShippedDate IS NOT NULL
GROUP BY 
    Month
ORDER BY 
    Month;
```","The generated query calculates the monthly growth rate as a percentage, while the ground truth query calculates the absolute growth in order counts.","SELECT TO_CHAR(Orders.OrderDate, 'YYYY-MM') AS Month, COUNT(*) AS TotalOrders FROM orders Orders WHERE Orders.ShippedDate IS NOT NULL GROUP BY Month ORDER BY Month","The generated SQL calculates total orders per month, not the growth rate. The ground truth computes the difference in order count between consecutive months, which determines the growth rate.",None
Which employees manage the most valuable orders (by total sales amount)?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY TotalSales DESC;
```","Both queries calculate the total sales for each employee and order by total sales in descending order. However, the generated query includes employee names in the output, which is additional information but does not affect the correctness of the result in terms of identifying which employees manage the most valuable orders.","SELECT o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalManagementValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID ORDER BY TotalManagementValue DESC LIMIT 1;","The generated query returns only the top employee managing the most valuable order, but the ground truth query retrieves the total sales for each employee without limiting to the top one.",Base
What is the inventory turnover ratio for all products in Q1 2023?,SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31';,"```sql
SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio 
FROM [Order Details] 
JOIN products ON [Order Details].ProductID = products.ProductID 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'
```",Both queries compute the same inventory turnover ratio and have identical logic and conditions; the order of JOINs doesn't affect the outcome.,SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31',The generated query and the ground truth query will yield the same result. The join order in SQL does not affect the outcome as long as the relationships between tables are correctly specified.,both
Calculate the total sales and total discount for each product.,"SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales, SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details] GROUP BY ProductID;","```sql
SELECT 
    [Order Details].ProductID,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount
FROM 
    [Order Details]
JOIN 
    orders ON [Order Details].OrderID = orders.OrderID
GROUP BY 
    [Order Details].ProductID
```","Both queries calculate TotalSales and TotalDiscount per ProductID using the [Order Details] table, and the join on orders does not affect the results since orders table is not used in aggregation.","SELECT ProductID, SUM(UnitPrice * Quantity) AS TotalSales, SUM(Discount * UnitPrice * Quantity) AS TotalDiscount FROM [Order Details] GROUP BY ProductID;","The generated query calculates TotalSales without considering the discount, unlike the ground truth query which subtracts the discount from sales.",Base
Identify the suppliers with the highest average unit price for their products.,"SELECT p.SupplierID, AVG(p.UnitPrice) AS AvgUnitPrice FROM products p GROUP BY p.SupplierID ORDER BY AvgUnitPrice DESC;","```sql
SELECT s.CompanyName, AVG(p.UnitPrice) AS AverageUnitPrice
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
GROUP BY s.SupplierID
ORDER BY AverageUnitPrice DESC
LIMIT 1;
```","The generated query limits the result to one supplier, returning only the supplier with the highest average unit price. The ground truth query retrieves all suppliers sorted by average unit price, without limiting the result to the top one.","SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AverageUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID, suppliers.CompanyName ORDER BY AverageUnitPrice DESC LIMIT 5;","The generated query retrieves company names, whereas the ground truth uses SupplierID. Additionally, the generated query limits results to the top 5, while the ground truth does not apply a limit.",None
How many on-time deliveries were recorded in the first quarter of 2023?,SELECT COUNT(orders.OrderID) AS on_time_deliveries FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31',"```sql
SELECT COUNT(orders.OrderID) AS on_time_deliveries 
FROM orders 
WHERE orders.ShippedDate <= orders.RequiredDate 
AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31';
```",Both queries correctly count orders where the ShippedDate is on or before the RequiredDate and the OrderDate falls within the first quarter of 2023.,SELECT COUNT(OrderID) AS on_time_deliveries FROM orders WHERE shipped_date <= required_date AND YEAR(order_date) = 2023 AND QUARTER(order_date) = 1,Both queries accurately count the on-time deliveries where the shipped date is on or before the required date for the first quarter of 2023. The conditions on the order date in both queries encompass the same time period and logic.,both
How many orders were shipped late last month?,SELECT COUNT(o.OrderID) AS LateOrders FROM orders o WHERE o.ShippedDate > o.RequiredDate AND o.OrderDate BETWEEN '2023-09-01' AND '2023-09-30';,"```sql
SELECT COUNT(*) AS LateOrders
FROM orders
WHERE ShippedDate > RequiredDate
AND MONTH(OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH)
AND YEAR(OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH);
```","The generated query calculates the month using CURRENT_DATE, which may not account for months with different end dates. The ground truth query defines a specific date range, ensuring correct results for any month.",SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate AND MONTH(OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH);,"The generated query checks if orders were placed last month, while the ground truth checks if orders were placed within a specific date range.",None
How many orders have been shipped to each country?,"SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCountry;","```sql
SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY ShipCountry;
```",Both queries are identical and correctly count the number of orders shipped to each country by grouping on ShipCountry.,"SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCountry;","Both queries are identical and accurately count the number of orders shipped to each country, grouped by 'ShipCountry'.",both
What is the average discount applied across all orders?,SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];,"```sql
SELECT AVG([Order Details].Discount) AS Average_Discount
FROM [Order Details]
```","Both queries calculate the average discount from the 'Order Details' table and yield the same result, despite minor differences in aliases.",SELECT AVG(Discount) FROM [Order Details];,Both queries calculate the average discount from the [Order Details] table. The difference in aliasing ('AvgDiscount') does not affect the result.,both
What is the average order fulfillment time for each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM orders
GROUP BY Month
ORDER BY Month;
```","Both queries calculate the average order fulfillment time per month by using DATE_FORMAT to extract the year and month, grouping by month, and using AVG and DATEDIFF for fulfillment time. The main difference is the ORDER BY clause in the generated query, which does not affect the accuracy of the result.","SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EXTRACT(YEAR FROM OrderDate), EXTRACT(MONTH FROM OrderDate);",Both queries extract the month and year from OrderDate and calculate the average order fulfillment time using DATEDIFF between ShippedDate and OrderDate. The grouping is functionally equivalent for determining monthly averages.,both
What is the total sales revenue per employee?,"SELECT EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EmployeeID;","```sql
SELECT o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY o.EmployeeID;
```","Both queries calculate the total sales revenue per employee by summing the product of unit price, quantity, and discount from order details, grouped by EmployeeID. They use equivalent joins and field references.","SELECT e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName;","Both queries calculate the total sales revenue per employee by summing the product of unit price, quantity, and discount across order details, grouped by employee IDs. The generated query provides additional employee name details, which does not affect the accuracy of the total sales calculation.",both
Determine the on-time delivery rate for each shipping method.,"SELECT ShipVia, SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipVia;","```sql
SELECT 
    ShipVia, 
    COUNT(OrderID) AS TotalOrders,
    COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveries,
    COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate
FROM 
    orders
GROUP BY 
    ShipVia;
```","Both queries calculate the on-time delivery rate for each shipping method by comparing ShippedDate with RequiredDate, and use the same logic to group by ShipVia. The minor difference in aggregation doesn't affect the correctness of the calculation.","SELECT o.ShipVia, (COUNT(CASE WHEN o.ShippedDate <= o.RequiredDate THEN 1 END) * 1.0 / COUNT(o.OrderID) * 100) AS on_time_delivery_rate FROM orders o GROUP BY o.ShipVia;","Both queries calculate the on-time delivery rate per shipping method comparing ShippedDate and RequiredDate using a conditional count, grouped by ShipVia. They will yield the same results.",both
How does the average salary of employees correlate with their sales performance?,"SELECT e.FirstName, e.LastName, e.Salary, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","```sql
SELECT AVG(e.Salary) AS AverageSalary, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID
LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
```",The generated query calculates the average salary across all employees but doesn't reflect individual employee performance. It lacks individual salary data needed to assess correlation with sales performance.,"SELECT employees.EmployeeID, AVG(employees.Salary) AS AverageSalary, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY AverageSalary;","Both queries compute the total sales per employee and correlate this with the average salary, though one uses EmployeeID and the other uses names for grouping. The logic to calculate total sales and correlate it with an employee identifier is consistent between the two.",FT
Which customers have generated the most revenue lifetime?,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC","```sql
SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN customers ON orders.CustomerID = customers.CustomerID 
GROUP BY customers.CustomerID 
ORDER BY customer_lifetime_value DESC
```",The generated SQL query is identical to the ground truth query and will produce the same results.,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC","The generated SQL query is identical to the ground truth SQL query, hence it accurately answers the user's question.",both
What is the most common discount given on products?,"SELECT [Order Details].Discount, COUNT(*) AS count FROM [Order Details] GROUP BY [Order Details].Discount ORDER BY count DESC LIMIT 1","```sql
SELECT Discount, COUNT(*) AS discount_count
FROM [Order Details]
GROUP BY Discount
ORDER BY discount_count DESC
LIMIT 1
```","Both queries select the most common discount value by counting the occurrences of each discount and ordering by the count in descending order, then limiting to one result.","SELECT Discount, COUNT(*) AS Frequency FROM [Order Details] GROUP BY Discount ORDER BY Frequency DESC LIMIT 1;",Both queries count the frequency of each discount in the 'Order Details' table and return the discount with the highest frequency. The queries use different aliases for the count but achieve the same result.,both
How many orders were made by each employee?,"SELECT employees.EmployeeID, COUNT(orders.OrderID) AS total_orders FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID","```sql
SELECT employees.EmployeeID, COUNT(orders.OrderID) AS order_count
FROM orders
JOIN employees ON orders.EmployeeID = employees.EmployeeID
GROUP BY employees.EmployeeID
```",Both queries count the number of orders for each employee by joining the 'orders' and 'employees' tables on 'EmployeeID' and grouping the results by 'EmployeeID'. The difference in alias names doesn't affect the result.,"SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID;",Both queries count the number of orders made by each employee. The 'Generated SQL Query' assumes 'EmployeeID' exists in the 'orders' table and correctly groups and counts orders. The 'Ground Truth SQL Query' performs a JOIN with the 'employees' table but does not affect the count of orders per employee.,both
What is the total monthly sales generated by each employee?,"SELECT employees.EmployeeID, EXTRACT(YEAR FROM orders.OrderDate) AS Year, EXTRACT(MONTH FROM orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, Year, Month;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, 
       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY TotalSales DESC;
```","The generated query calculates total sales per employee, but does not group the data by month like the ground truth query.","SELECT e.EmployeeID, EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, Year, Month;","Both queries compute total monthly sales per employee by joining employees, orders, and order details tables, grouping by employee ID and date.",FT
Which products are being ordered at a rate that suggests they should be reordered?,"SELECT ProductID, ProductName FROM products WHERE UnitsOnOrder > 0 AND UnitsInStock < ReorderLevel;","```sql
SELECT p.ProductID, p.ProductName, p.UnitsInStock, p.ReorderLevel, SUM(od.Quantity) AS TotalOrdered
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName, p.UnitsInStock, p.ReorderLevel
HAVING SUM(od.Quantity) > p.ReorderLevel;
```","The generated query checks if total ordered quantity exceeds reorder level, while the ground truth checks if units on order are greater than zero and units in stock are less than reorder level.",SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;,"The generated query checks if UnitsInStock is less than or equal to the ReorderLevel, but misses checking if UnitsOnOrder is greater than 0. The ground truth query includes this condition.",None
What is the average order fulfillment time during the last year?,"SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31';","```sql
SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM orders
WHERE OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE);
```","The generated query uses DATEADD(YEAR, -1, CURRENT_DATE) which is dynamic and may not align with the fixed range in the ground truth query for the year 2022.","SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2022-12-31' AND '2023-12-31'","The generated query uses the wrong time frame; it captures dates from the end of 2022 to the end of 2023, while the ground truth query correctly captures all of 2022.",None
List the top 5 suppliers based on the total sales value of their products.,"SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY TotalSales DESC LIMIT 5;","```sql
SELECT s.SupplierID, s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY s.SupplierID, s.CompanyName
ORDER BY TotalSales DESC
LIMIT 5;
```",Both queries calculate the total sales value per supplier and return the top 5 suppliers based on this value. The inclusion of the CompanyName in the generated query does not affect the total sales calculation or the result set.,"SELECT s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.CompanyName ORDER BY TotalSales DESC LIMIT 5;","The generated SQL query groups by CompanyName, while the ground truth groups by SupplierID. This may lead to different results if two suppliers share the same company name.",Base
Identify the products that have never been ordered.,"SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL;","```sql
SELECT p.ProductID, p.ProductName
FROM products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.ProductID IS NULL;
```","Both queries identify products that have never been ordered by checking for NULL values in the 'Order Details' join. The filter conditions use different columns but are equivalent, as a missing OrderID also implies a missing ProductID in the join.",SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT ProductID FROM order_details);,Both queries correctly identify products that have never been ordered by checking for products with no corresponding entries in the order_details table.,both
What is the Customer Lifetime Value (CLV) for each customer?,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CLV FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;","```sql
SELECT customers.CustomerID, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CustomerLifetimeValue
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID;
```","Both SQL queries perform the same operations: they calculate the Customer Lifetime Value by summing the total sales for each customer. The difference is just in the alias for the output column, which doesn't affect the results.","SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID","Both queries calculate the Customer Lifetime Value by summing the product of UnitPrice, Quantity, and the factor (1 - Discount) per customer. They join the same tables and group by customers.CustomerID, producing the same results.",both
Find the most recent order for each customer.,"SELECT CustomerID, MAX(OrderDate) AS RecentOrderDate FROM orders GROUP BY CustomerID;","```sql
SELECT c.CustomerID, c.CompanyName, o.OrderID, o.OrderDate
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
WHERE o.OrderDate = (
    SELECT MAX(OrderDate)
    FROM orders
    WHERE CustomerID = c.CustomerID
)
```","The generated query returns additional columns such as CompanyName and OrderID, whereas the ground truth query only returns CustomerID and the most recent OrderDate.","SELECT c.CustomerID, MAX(o.OrderDate) AS MostRecentOrderDate FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID;","Both queries aim to find the most recent order date for each customer by grouping on CustomerID, and will yield the same results. The generated query includes an unnecessary join, but it does not affect the outcome since it is using the orders table correctly.",FT
How many orders were shipped by each employee each month?,"SELECT EXTRACT(YEAR FROM ShippedDate) AS Year, EXTRACT(MONTH FROM ShippedDate) AS Month, EmployeeID, COUNT(*) AS OrderCount FROM orders GROUP BY Year, Month, EmployeeID;","```sql
SELECT 
    EmployeeID, 
    YEAR(ShippedDate) AS Year, 
    MONTH(ShippedDate) AS Month, 
    COUNT(OrderID) AS TotalOrdersShipped
FROM 
    orders
GROUP BY 
    EmployeeID, 
    YEAR(ShippedDate), 
    MONTH(ShippedDate)
ORDER BY 
    Year, 
    Month, 
    EmployeeID;
```","Both queries group by EmployeeID, Year, and Month to count the number of orders shipped, producing the same result.","SELECT e.FirstName, e.LastName, MONTH(o.ShippedDate) AS Month, COUNT(o.OrderID) AS ShippedOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NOT NULL GROUP BY e.EmployeeID, e.FirstName, e.LastName, MONTH(o.ShippedDate);","The generated SQL query includes employee names (FirstName, LastName) in the result set but does not extract the year from the ShippedDate. The ground truth query groups by year, month, and employee without including employee names, which results in potentially different grouping and column outputs.",Base
What is the correlation between employee sales and order fulfillment time?,"SELECT employees.EmployeeID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID ORDER BY employee_sales DESC;","```sql
SELECT 
    AVG(employee_sales.total_sales) AS avg_employee_sales,
    AVG(order_fulfillment.fulfillment_time) AS avg_order_fulfillment_time
FROM 
    (SELECT 
        employees.EmployeeID, 
        SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales 
     FROM 
        [Order Details] 
     JOIN 
        orders ON [Order Details].OrderID = orders.OrderID 
     JOIN 
        employees ON orders.EmployeeID = employees.EmployeeID 
     GROUP BY 
        employees.EmployeeID) AS employee_sales,
    (SELECT 
        AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS fulfillment_time 
     FROM 
        orders) AS order_fulfillment
```","The generated query calculates the average of total sales and fulfillment time across all employees, rather than examining the correlation per employee. The ground truth query computes sales and fulfillment time for each employee, allowing for a proper correlation analysis.","SELECT employees.EmployeeID, CORR(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)), AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate))) AS Correlation FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;","The generated SQL query calculates the correlation directly using CORR() on employee sales and fulfillment time, while the ground truth query computes average fulfillment time and total sales for each employee, without directly calculating correlation.",None
Determine the revenue generated by each product category.,"SELECT p.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID;","```sql
SELECT products.CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Revenue
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
GROUP BY products.CategoryID;
```",Both queries calculate the total revenue generated by each product category by joining the 'products' and 'Order Details' tables on ProductID and grouping by CategoryID.,"SELECT CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY CategoryID;","The generated query does not account for the 'Discount' factor, resulting in a different revenue calculation from the ground truth query.",Base
What is the correlation between unit price and quantity ordered for each product?,"SELECT ProductID, CORR(UnitPrice, Quantity) AS PriceQuantityCorrelation FROM [Order Details] GROUP BY ProductID;","```sql
SELECT 
    p.ProductID,
    p.ProductName,
    CORR(od.UnitPrice, od.Quantity) AS Price_Quantity_Correlation
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.ProductName;
```",Both queries calculate the correlation between unit price and quantity ordered for each product and group by ProductID. The inclusion of ProductName in the generated query does not alter the correlation results.,"SELECT ProductID, CORR(UnitPrice, Quantity) AS PriceQuantityCorrelation FROM [Order Details] GROUP BY ProductID;",The generated query and the ground truth query are identical and both correctly compute the correlation between unit price and quantity for each product.,both
What is the customer retention rate for the past month?,SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-08-01' AND '2023-08-31' THEN orders.CustomerID END) / COUNT(DISTINCT CASE WHEN orders.OrderDate < '2023-08-01' THEN orders.CustomerID END)) AS RetentionRate FROM orders;,"```sql
SELECT 
    (COUNT(DISTINCT orders.CustomerID) FILTER (WHERE orders.OrderDate BETWEEN DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day'))::FLOAT / 
    (COUNT(DISTINCT orders.CustomerID) FILTER (WHERE orders.OrderDate < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month')) AS Customer_Retention_Rate
FROM 
    orders;
```","The generated query calculates the number of unique customers who made orders in the last month as a fraction of those who made orders before the last month, not the retention rate.",SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN CURRENT_DATE - INTERVAL '1 month' AND CURRENT_DATE THEN orders.CustomerID END) / COUNT(DISTINCT CASE WHEN orders.OrderDate < CURRENT_DATE - INTERVAL '1 month' THEN orders.CustomerID END)) * 100 AS customer_retention_rate FROM orders;,"The generated query uses CURRENT_DATE and '1 month' interval which isn't fixed, while the ground truth uses specific dates. This could lead to different results.",None
Find the products with the highest discounts applied.,"SELECT p.ProductName, od.Discount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID ORDER BY od.Discount DESC;","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    od.Discount
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
ORDER BY 
    od.Discount DESC
LIMIT 1;
```","The generated query limits the result to one product, while the ground truth query returns all products with the highest discounts.",SELECT ProductName FROM products WHERE ProductID IN (SELECT ProductID FROM [Order Details] ORDER BY Discount DESC LIMIT 1);,"The generated query only selects the product name with the highest discount, but it does not match the ground truth query which includes both the product name and the discount value, and lists all products ordered by discount.",None
Find the most frequently ordered product.,"SELECT ProductID, COUNT(*) AS OrderCount FROM [Order Details] GROUP BY ProductID ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalOrdered
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalOrdered DESC
LIMIT 1;
```","The generated query calculates the most ordered product based on total quantity, while the ground truth query calculates it based on the number of orders.","SELECT products.ProductID, COUNT([Order Details].OrderID) AS times_ordered FROM [Order Details] INNER JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID ORDER BY times_ordered DESC LIMIT 1","Both queries aim to find the most frequently ordered product by counting orders per product and ordering the result in descending order, selecting the top one.",FT
What is the total revenue generated from each customer?,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;","```sql
SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID
```",The generated query and the ground truth query are functionally equivalent and will yield the same results. Both queries aggregate total revenue by each customer using the same joins and calculations.,"SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalRevenue DESC;","Both queries join the customers, orders, and order details tables correctly and calculate total revenue per customer with the same aggregation logic. The order of results due to sorting in the generated query does not affect the accuracy pertaining to the question asked.",both
Which employee handled the most expensive single order?,"SELECT employees.EmployeeID, orders.OrderID, MAX([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MaxSingleOrderValue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID, employees.EmployeeID ORDER BY MaxSingleOrderValue DESC LIMIT 1","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, MAX(o.Freight) AS MaxOrderFreight
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY MaxOrderFreight DESC
LIMIT 1;
```","The generated query calculates the max freight cost per employee, not the max single order value, and does not consider the details needed to calculate the actual order value.","SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, orders.OrderID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS OrderValue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, orders.OrderID, employees.FirstName, employees.LastName ORDER BY OrderValue DESC LIMIT 1","The generated SQL query calculates the total order value per order, not the maximum value of a single item within an order. The ground truth query correctly identifies the single item with the maximum impact on the order value.",None
Determine the employee with the most orders shipped before the required date.,"SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) as EarlyShipments FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate < o.RequiredDate GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY EarlyShipments DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrdersCount
FROM orders
WHERE ShippedDate < RequiredDate
GROUP BY EmployeeID
ORDER BY OrdersCount DESC
LIMIT 1;
```","The generated query does not include employee names, and thus may not yield the same result set with the required employee details as the ground truth query.","SELECT e.FirstName, e.LastName, COUNT(o.OrderID) AS on_time_orders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate <= o.RequiredDate GROUP BY e.EmployeeID ORDER BY on_time_orders DESC LIMIT 1;","The generated query uses a less than or equal to condition (<=) for ShippedDate, while the ground truth uses strictly less than (<). This could return different results.",None
What is the monthly trend in order quantities for each product?,"SELECT DATE_TRUNC('month', o.OrderDate) AS Month, p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalOrderQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY DATE_TRUNC('month', o.OrderDate), p.ProductID, p.ProductName ORDER BY DATE_TRUNC('month', o.OrderDate), TotalOrderQuantity DESC;","```sql
SELECT 
    MONTH(o.OrderDate) AS OrderMonth, 
    p.ProductID, 
    p.ProductName, 
    SUM(od.Quantity) AS TotalQuantity 
FROM 
    [Order Details] od 
JOIN 
    products p ON od.ProductID = p.ProductID 
JOIN 
    orders o ON od.OrderID = o.OrderID 
GROUP BY 
    MONTH(o.OrderDate), 
    p.ProductID, 
    p.ProductName 
ORDER BY 
    OrderMonth, 
    p.ProductID;
```","The generated SQL query uses MONTH(o.OrderDate) which groups by month number, losing year context, whereas the ground truth query uses DATE_TRUNC('month', o.OrderDate) preserving the year. This could yield different results if data spans multiple years.","SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, [Order Details].ProductID, SUM([Order Details].Quantity) AS Quantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m'), [Order Details].ProductID;",The generated query groups by month and product ID but misses the product name and doesn't order the results. It also uses DATE_FORMAT instead of DATE_TRUNC.,None
Which shipping method is used most frequently?,"SELECT ShipVia, COUNT(OrderID) AS TimesUsed FROM orders GROUP BY ShipVia ORDER BY TimesUsed DESC;","```sql
SELECT ShipVia, COUNT(*) AS Frequency
FROM orders
GROUP BY ShipVia
ORDER BY Frequency DESC
LIMIT 1;
```","Both queries calculate the frequency of each shipping method by grouping on ShipVia, sorting by highest frequency, and selecting the top result. The use of COUNT(*) versus COUNT(OrderID) does not affect the result in this context.","SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;","The generated query accurately answers the user's question by selecting the shipping method used most frequently. Although it includes a LIMIT 1 clause, this is consistent with determining the 'most frequently used' method.",both
What are the total units ordered for each product?,"SELECT ProductID, SUM(Quantity) AS TotalUnitsOrdered FROM [Order Details] GROUP BY ProductID;","```sql
SELECT 
    p.ProductID, 
    SUM(od.Quantity) AS TotalUnitsOrdered
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID;
```","Both queries calculate the total units ordered for each product by summing the Quantity from the Order Details. The Generated SQL query uses an additional join with the products table, but it still groups by ProductID and returns the same result set as the Ground Truth query, provided there is no ProductID in the Order Details that is not present in the products.","SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalUnitsOrdered FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName","The generated query includes the ProductName in the output while the ground truth query uses ProductID. The results won't match in structure, though they both calculate the sum of units ordered.",Base
Calculate the cumulative sales by category for this year.,"SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalCategorySales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID WHERE EXTRACT(YEAR FROM od.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY c.CategoryID;","```sql
SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) AS CumulativeSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE YEAR(od.OrderID) = YEAR(CURRENT_DATE)
GROUP BY p.CategoryID;
```","The generated query does not include the 'Discount' in the calculation and checks the year on 'OrderID' instead of 'OrderDate', which may not yield accurate results as needed.","SELECT c.CategoryName, SUM(od.Quantity * od.UnitPrice) AS CumulativeSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID WHERE YEAR(od.OrderDate) = YEAR(CURRENT_DATE) GROUP BY c.CategoryName;","The generated query does not include discounts in the sales calculation, unlike the ground truth query. Also, the generated query groups by category name instead of category ID.",None
List the top 5 products by revenue.,"SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 5;","```sql
SELECT OrderDetails.ProductID, SUM(OrderDetails.UnitPrice * OrderDetails.Quantity * (1 - OrderDetails.Discount)) AS Revenue
FROM [Order Details] AS OrderDetails
JOIN orders AS Orders ON OrderDetails.OrderID = Orders.OrderID
GROUP BY OrderDetails.ProductID
ORDER BY Revenue DESC
LIMIT 5;
```","Both queries calculate the revenue for each product by multiplying UnitPrice, Quantity, and applying the Discount, then group by ProductID. They order by the calculated revenue in descending order and limit the results to the top 5, achieving the same outcome.","SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY Revenue DESC LIMIT 5;","The generated SQL query calculates the revenue by multiplying unit price, quantity, and discount, groups by ProductID, orders by revenue in descending order, and limits the result to the top 5 products. It performs the same operations as the ground truth query.",both
What is the average lead time for each supplier in delivering products?,"SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM products p INNER JOIN [Order Details] od ON p.ProductID = od.ProductID INNER JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.SupplierID;","```sql
SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.CompanyName;
```",The generated query groups by supplier company name while the ground truth groups by SupplierID. The generated query may yield incorrect results if different SupplierIDs map to the same company name.,"SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM orders JOIN `Order Details` ON orders.OrderID = `Order Details`.OrderID JOIN products ON `Order Details`.ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName;","The generated query groups by suppliers.CompanyName, while the ground truth groups by SupplierID. If supplier names are unique, the result might be similar, but the grouping is technically different.",None
What is the average discount offered on products?,SELECT AVG(Discount) FROM [Order Details];,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details];
```",Both queries calculate the average of the 'Discount' column from the 'Order Details' table and will yield the same result.,SELECT AVG(Discount) AS AverageDiscount FROM [Order Details] WHERE Discount > 0;,"The generated query only calculates the average discount for products with a discount greater than 0, whereas the ground truth query calculates the average discount for all products regardless of the discount value.",Base
How does sales performance fluctuate by employee age group?,"SELECT e.EmployeeID, FLOOR(DATEDIFF(CURDATE(), e.BirthDate)/365) AS AgeGroup, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, AgeGroup;","```sql
SELECT
    CASE 
        WHEN (YEAR(CURRENT_DATE) - YEAR(BirthDate)) < 25 THEN 'Under 25'
        WHEN (YEAR(CURRENT_DATE) - YEAR(BirthDate)) BETWEEN 25 AND 34 THEN '25-34'
        WHEN (YEAR(CURRENT_DATE) - YEAR(BirthDate)) BETWEEN 35 AND 44 THEN '35-44'
        WHEN (YEAR(CURRENT_DATE) - YEAR(BirthDate)) BETWEEN 45 AND 54 THEN '45-54'
        ELSE '55 and above'
    END AS AgeGroup,
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY AgeGroup
ORDER BY AgeGroup;
```","The generated query groups results by predefined age brackets, whereas the ground truth groups by individual employees and uses precise age calculation. This results in different groupings and outputs.","SELECT e.EmployeeID, e.AgeGroup, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.AgeGroup;","The generated query uses a pre-defined AgeGroup, while the ground truth query calculates AgeGroup by dividing the difference in years between current date and birth date.",None
What is the correlation between the hire date and sales performance of employees?,"SELECT employees.EmployeeID, employees.HireDate, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, employees.HireDate ORDER BY employees.HireDate","```sql
SELECT e.HireDate, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.HireDate
ORDER BY e.HireDate;
```","The generated query groups results by HireDate instead of EmployeeID and HireDate, so it does not accurately reflect individual employee performance over time.","SELECT e.EmployeeID, e.HireDate, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN ""Order Details"" od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.HireDate ORDER BY TotalSales DESC;","The generated query orders results by TotalSales, while the ground truth query orders by HireDate. They may yield different insights for correlation analysis.",None
Identify the shipping country with the most orders this month.,"SELECT o.ShipCountry, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE + INTERVAL '1 month') GROUP BY o.ShipCountry ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT ShipCountry, COUNT(OrderID) AS OrderCount
FROM orders
WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE) AND YEAR(OrderDate) = YEAR(CURRENT_DATE)
GROUP BY ShipCountry
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries are functionally equivalent. They filter the orders from the current month, group by ShipCountry, and order by the count of orders to find the maximum, returning the country with the most orders.","SELECT orders.ShipCountry, COUNT(orders.OrderID) AS order_count FROM orders WHERE DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m') GROUP BY orders.ShipCountry ORDER BY order_count DESC LIMIT 1","The generated query uses DATE_FORMAT and CURDATE() functions, which are non-standard and likely from MySQL, while the ground truth query uses DATE_TRUNC which is standard SQL, likely from PostgreSQL. The logic of date filtering slightly differs.",Base
How does the time gap between order and shipment affect total sales?,"SELECT DATEDIFF(orders.ShippedDate, orders.OrderDate) AS TimeGap, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY TimeGap;","```sql
SELECT 
    AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS Average_Fulfillment_Time,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Total_Sales
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    DATEDIFF(orders.ShippedDate, orders.OrderDate)
```","The generated query calculates the average fulfillment time across all orders, rather than using the time gap to group sales figures like the ground truth query.","SELECT DATEDIFF(ShippedDate, OrderDate) AS ShippingTime, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShippingTime;","Both queries compute the time difference between 'OrderDate' and 'ShippedDate' and group by this time difference to calculate total sales, yielding the same result.",FT
Find the total number of units ordered per supplier.,"SELECT SupplierID, SUM([Order Details].Quantity) FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY SupplierID;","```sql
SELECT p.SupplierID, SUM(od.Quantity) AS TotalUnitsOrdered
FROM [Order Details] od
JOIN products p ON od.ProductID = p.ProductID
GROUP BY p.SupplierID;
```","Both queries calculate the total number of units ordered per supplier by aggregating the Quantity from the Order Details table and using the SupplierID from the products table. The syntax and formatting differ, but the logic and results are equivalent.","SELECT suppliers.CompanyName, SUM([Order Details].Quantity) FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName;","The generated SQL query groups by CompanyName, while the ground truth groups by SupplierID. These groupings may not yield identical results depending on the data structure.",Base
Which category has the highest number of products?,"SELECT CategoryID, COUNT(ProductID) AS NumProducts FROM products GROUP BY CategoryID ORDER BY NumProducts DESC LIMIT 1;","```sql
SELECT CategoryID, COUNT(ProductID) AS NumberOfProducts
FROM products
GROUP BY CategoryID
ORDER BY NumberOfProducts DESC
LIMIT 1;
```","Both queries count products per category, sort the results in descending order of the count, and limit the output to the highest count. Therefore, they yield the same result.","SELECT CategoryID, COUNT(*) FROM products GROUP BY CategoryID ORDER BY COUNT(*) DESC LIMIT 1;","Both queries group products by CategoryID and order by the count of products in descending order, limiting the result to the top category.",both
Determine the most common shipped city for each employee.,"SELECT employees.EmployeeID, orders.ShipCity, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, orders.ShipCity ORDER BY employees.EmployeeID, OrderCount DESC;","```sql
SELECT o.EmployeeID, o.ShipCity, COUNT(o.ShipCity) AS CityCount
FROM orders o
GROUP BY o.EmployeeID, o.ShipCity
HAVING CityCount = (
    SELECT MAX(CityCount)
    FROM (
        SELECT COUNT(o2.ShipCity) AS CityCount
        FROM orders o2
        WHERE o2.EmployeeID = o.EmployeeID
        GROUP BY o2.ShipCity
    ) AS city_counts
)
```","The generated query calculates the most common ship city per employee, but the ground truth sorts the cities by count for each employee without selecting the most common one.","```sql
SELECT employees.EmployeeID, shippedCity, COUNT(*) AS city_count FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID, shippedCity ORDER BY employees.EmployeeID, city_count DESC```
","Both queries aim to find the most common shipped city for each employee. The differences in column naming (shippedCity vs ShipCity) don't affect the logic. Both group by EmployeeID and city, counting orders to determine frequency. The order by count in descending order ensures the most common cities are prioritized.",FT
List the top 5 customers based on the total revenue they generated this year.,"SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY o.CustomerID ORDER BY CustomerRevenue DESC LIMIT 5;","```sql
SELECT orders.CustomerID, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE)
GROUP BY orders.CustomerID
ORDER BY TotalRevenue DESC
LIMIT 5;
```",Both queries calculate the total revenue for each customer for the current year and return the top 5 customers based on revenue. The differences in function names (YEAR vs EXTRACT) and aliases (TotalRevenue vs CustomerRevenue) do not affect the outcome.,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE EXTRACT(YEAR FROM orders.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY customers.CustomerID ORDER BY TotalRevenue DESC LIMIT 5;",Both queries calculate the total revenue for each customer for the current year and order the results to list the top 5 customers based on total revenue. The table joins and calculations are equivalent.,both
Find the product with the highest discount applied in the last month.,"SELECT products.ProductName, [Order Details].Discount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) ORDER BY [Order Details].Discount DESC LIMIT 1;","```sql
SELECT od.ProductID, SUM(od.Discount) AS TotalDiscount
FROM [Order Details] od
JOIN products p ON od.ProductID = p.ProductID
WHERE od.OrderID IN (
    SELECT OrderID FROM orders WHERE OrderDate >= DATEADD(MONTH, -1, GETDATE())
)
GROUP BY od.ProductID
ORDER BY TotalDiscount DESC
LIMIT 1;
```","Both queries aim to find the product with the highest total discount in the last month. The generated query aggregates discounts on a product, while the ground truth looks for a single instance of maximum discount. Given the context, aggregating by total discount is reasonable for identifying the overall maximum discount for a product.","SELECT od.ProductID, od.Discount FROM [Order Details] od WHERE od.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND od.OrderDate < DATE_TRUNC('month', CURRENT_DATE) ORDER BY od.Discount DESC LIMIT 1;","The generated query and ground truth query differ in the handling of the date range and product information. The generated query uses DATE_TRUNC which may not correctly capture the 'last month' logic intended by the ground truth query, which uses DATE_SUB with CURDATE(). Furthermore, the ground truth query joins with the products table to retrieve the product name, which the generated query does not do.",Base
Which products have stock levels below their reorder level?,"SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;","```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock < ReorderLevel;
```","Both queries select products where the stock levels are below the reorder level, although the generated query includes additional columns, which does not change the correctness of the result.",SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"The generated SQL query only selects 'ProductName', whereas the ground truth query includes both 'ProductID' and 'ProductName'. Therefore, the generated query does not yield the same results.",Base
How many employees report directly to each manager?,"SELECT Manager.EmployeeID, COUNT(Employee.EmployeeID) AS DirectReports FROM employees AS Employee JOIN employees AS Manager ON Employee.ReportsTo = Manager.EmployeeID GROUP BY Manager.EmployeeID;","```sql
SELECT ReportsTo, COUNT(EmployeeID) AS EmployeeCount
FROM employees
GROUP BY ReportsTo;
```","Both queries count the number of employees who report directly to each manager, using 'ReportsTo' or 'Manager.EmployeeID' as the grouping key, yielding the same results.","SELECT ReportsTo, COUNT(EmployeeID) AS Reports FROM employees WHERE ReportsTo IS NOT NULL GROUP BY ReportsTo","Both queries count the number of employees assigned to each manager by grouping on the 'ReportsTo' (or Manager.EmployeeID) column. They achieve the same result using different methods: one directly counts non-null 'ReportsTo', the other uses a self-join.",both
What is the average time gap between order placement and shipping for each employee?,"SELECT E.EmployeeID, AVG(DATEDIFF(O.ShippedDate, O.OrderDate)) AS AverageTimeGap FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID WHERE O.ShippedDate IS NOT NULL GROUP BY E.EmployeeID;","```sql
SELECT 
    e.EmployeeID, 
    e.FirstName, 
    e.LastName, 
    AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageShippingTime
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
WHERE 
    o.ShippedDate IS NOT NULL
GROUP BY 
    e.EmployeeID, e.FirstName, e.LastName;
```","Both queries calculate the average time gap between order placement and shipping for each employee. The generated query includes employee names in the output, which does not affect the average calculation.","SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingGap FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NOT NULL GROUP BY e.EmployeeID;","The generated SQL query and the ground truth query are logically equivalent. Both calculate the average time gap between order placement and shipping for each employee by joining the employees and orders tables, filtering out orders without a shipped date, and grouping by EmployeeID.",both
What is the percentage of orders with a discount applied?,SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM [Order Details])) AS percentage_with_discount FROM [Order Details] WHERE Discount > 0,"```sql
SELECT (COUNT(OrderID WHERE Discount > 0) * 100.0 / COUNT(OrderID)) AS discount_percentage FROM [Order Details]
```","The generated SQL query contains a syntax error in 'COUNT(OrderID WHERE Discount > 0)'. The correct syntax should use a WHERE clause separately, as shown in the ground truth query.",SELECT COUNT(DISTINCT CASE WHEN od.Discount > 0 THEN od.OrderID END) * 1.0 / COUNT(DISTINCT od.OrderID) AS DiscountPercentage FROM [Order Details] od;,Both queries calculate the percentage of orders with a discount by comparing the count of orders with a discount against the total count of orders.,FT
What are the shipping patterns (frequency) for each shipping method?,"SELECT ShipVia, COUNT(OrderID) AS Frequency FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, COUNT(OrderID) AS ShippingFrequency
FROM orders
GROUP BY ShipVia;
```",Both queries accurately determine the frequency of each shipping method by counting the number of orders associated with each 'ShipVia' value. The difference in the alias name does not affect the results.,"SELECT ShipVia, COUNT(*) AS Frequency FROM orders GROUP BY ShipVia;",Both queries count the number of orders for each shipping method using different column aliases but result in the same frequency counts.,both
Which suppliers have delivered products with high discounts?,SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount > 0.2 GROUP BY suppliers.SupplierID;,"```sql
SELECT s.SupplierID, s.CompanyName, SUM(od.Discount) AS TotalDiscount
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY s.SupplierID, s.CompanyName
HAVING SUM(od.Discount) > 0
ORDER BY TotalDiscount DESC;
```","The generated SQL aggregates discounts without a specific threshold, while the ground truth only considers discounts greater than 0.2.","SELECT suppliers.CompanyName, products.ProductName, [Order Details].Discount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount > 0.2;","The generated query selects the company name, product name, and discount while filtering for discounts over 0.2. The ground truth query only selects distinct supplier names by grouping, without including product names or discount details. This difference impacts the output structure.",None
Calculate the average order value per customer.,"SELECT orders.CustomerID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.CustomerID;","```sql
SELECT CustomerID, AVG(OrderValue) AS AverageOrderValue
FROM (
    SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS OrderValue
    FROM orders
    JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
    GROUP BY OrderID, CustomerID
) AS OrderSummaries
GROUP BY CustomerID;
```","Both queries calculate the average order value per customer. The generated query calculates the total order value per order first, then averages these totals per customer, which results in the same average as directly averaging line item value per customer in the ground truth query.","SELECT AVG(TotalOrderValue) AS AvgOrderValue FROM (SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID, o.CustomerID) AS CustomerOrders;","The generated query calculates the average of total order values, whereas the ground truth query calculates the average at the item level for each customer.",Base
How many products are discontinued?,SELECT COUNT(*) FROM products WHERE Discontinued = 1;,"```sql
SELECT COUNT(*) AS DiscontinuedProducts
FROM products
WHERE Discontinued = 1;
```","Both queries count the number of products where the Discontinued column has a value of 1, thus they yield the same result.",SELECT COUNT(*) FROM products WHERE Discontinued = 1;,Both queries count the number of products that are marked as discontinued with the value 1 in the 'Discontinued' column.,both
What is the average fulfillment time for orders with freight costs above the monthly average?,"SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE Freight > (SELECT AVG(Freight) FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) AND EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE));","```sql
SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
WHERE Freight > (
    SELECT AVG(Freight)
    FROM orders
)
```","The generated query calculates the average freight cost across all time, while the ground truth query calculates it for the current month only.","SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) FROM orders WHERE Freight > (SELECT AVG(Freight) FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURDATE()) AND EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURDATE()));","Both queries calculate the average fulfillment time for orders with freight costs above the monthly average, using the same logic and conditions.",FT
Identify employees without a manager.,"SELECT EmployeeID, FirstName, LastName FROM employees WHERE ReportsTo IS NULL;","```sql
SELECT *
FROM employees
WHERE ReportsTo IS NULL;
```","Both queries identify employees without a manager by checking where ReportsTo IS NULL. The difference is in the selected columns, but the intended result is the same.","SELECT EmployeeID, FirstName, LastName FROM employees WHERE ReportsTo IS NULL;",Both queries are identical and accurately answer the question by selecting employees whose 'ReportsTo' field is NULL.,both
Which city has the highest number of orders shipped late?,"SELECT ShipCity, COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipCity ORDER BY LateOrders DESC LIMIT 1;","```sql
SELECT ShipCity, COUNT(OrderID) AS LateOrders
FROM orders
WHERE ShippedDate > RequiredDate
GROUP BY ShipCity
ORDER BY LateOrders DESC
LIMIT 1;
```",Both queries select the city with the highest number of late orders by comparing ShippedDate to RequiredDate and grouping by ShipCity. The difference in counting method (COUNT(OrderID) vs COUNT(*)) does not affect the result in this context.,"SELECT ShipCity, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipCity ORDER BY LateOrders DESC LIMIT 1;","Both queries correctly count orders where the ShippedDate is later than the RequiredDate, grouped by ShipCity, and return the city with the highest count of late orders.",both
What are the top 10 cities with the highest number of orders?,"SELECT customers.City, COUNT(orders.OrderID) AS order_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.City ORDER BY order_count DESC LIMIT 10","```sql
SELECT ShipCity, COUNT(OrderID) AS number_of_orders 
FROM orders 
GROUP BY ShipCity 
ORDER BY number_of_orders DESC 
LIMIT 10
```","The generated query groups by ShipCity assuming orders table has this field. The ground truth joins orders with customers to use the City from the customers table, which might differ.","SELECT ShipCity, COUNT(OrderID) FROM orders GROUP BY ShipCity ORDER BY COUNT(OrderID) DESC LIMIT 10;","The generated query counts orders grouped by ShipCity in the orders table, while the ground truth counts orders grouped by City obtained from a join with the customers table. These may yield different results if the city data is not identical across both methods.",None
Find the product with the highest inventory turnover ratio.,"SELECT ProductName, (SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(UnitsInStock), 0)) AS InventoryTurnoverRatio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName ORDER BY InventoryTurnoverRatio DESC LIMIT 1;","```sql
SELECT p.ProductID, p.ProductName, 
       SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY InventoryTurnoverRatio DESC
LIMIT 1;
```","The generated query calculates InventoryTurnoverRatio without checking for Division by Zero (using NULLIF or similar), potentially leading to inaccurate results compared to the ground truth query.",SELECT ProductName FROM products WHERE (UnitsOnOrder + UnitsInStock) / UnitsOnOrder = (SELECT MAX((UnitsOnOrder + UnitsInStock) / UnitsOnOrder) FROM products);,"The generated query attempts to calculate inventory turnover using UnitsOnOrder and UnitsInStock directly, without accounting for sales from Order Details. The ground truth query calculates turnover based on actual sales data and inventory, offering a more accurate measure of turnover.",None
What is the total freight cost for each shipping country?,"SELECT orders.ShipCountry, SUM(orders.Freight) AS TotalFreight FROM orders GROUP BY orders.ShipCountry","```sql
SELECT ShipCountry, SUM(Freight) AS TotalFreight
FROM orders
GROUP BY ShipCountry;
```",Both queries aggregate the Freight cost by ShipCountry from the orders table and provide the same results by grouping and summing accurately.,"SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",Both queries calculate the total freight cost for each shipping country from the 'orders' table using the same grouping and aggregation logic.,both
Which employee generated the most sales revenue in March 2023?,"SELECT employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
JOIN employees ON orders.EmployeeID = employees.EmployeeID
WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31'
GROUP BY employees.EmployeeID
ORDER BY total_sales DESC
LIMIT 1;
```","The generated SQL query returns EmployeeID, while the ground truth query returns FirstName and LastName, leading to different outputs.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1","Both queries calculate the same sales revenue per employee for March 2023 and order the results to get the top employee, differing only in the selected columns.",FT
Calculate the contribution of each product category to total sales.,"SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;","```sql
SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.CategoryID;
```",The generated query might miss product categories that have no matching products in the 'products' table due to a missing join with the 'categories' table.,"SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName","The generated query groups by 'CategoryName' instead of 'CategoryID', which may yield different results if multiple categories share the same name.",None
What is the average delivery time for products in each region?,"SELECT suppliers.Region, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgDeliveryTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY suppliers.Region;","```sql
SELECT suppliers.Region, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageDeliveryTime
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.Region;
```","Both queries join the same tables in the same manner, use the DATEDIFF function to calculate delivery time, and group by region to calculate the average. They yield the same results, despite minor differences in syntax and aliasing.","SELECT ShipRegion, AVG(DATEDIFF(day, OrderDate, ShippedDate)) AS AvgDeliveryTime FROM orders GROUP BY ShipRegion;","The generated query determines average delivery time by ShipRegion from the orders table, while the ground truth query computes it by Region from the suppliers table, involving joins with products and order details. Therefore, they may yield different results.",Base
What is the average fulfillment time for orders in Q1 2023?,"SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'","```sql
SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time 
FROM orders 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'
```",Both queries calculate the average difference in days between the OrderDate and ShippedDate for orders placed in Q1 2023. The difference in alias naming does not affect the accuracy of the query.,"SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE YEAR(orders.OrderDate) = 2023 AND MONTH(orders.OrderDate) <= 3",Both queries accurately filter orders placed in Q1 2023 and calculate the average fulfillment time using DATEDIFF.,both
What is the average order fulfillment time for the past year?,"SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgFulfillmentTime FROM orders WHERE orders.ShippedDate IS NOT NULL AND orders.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);","```sql
SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM orders
WHERE OrderDate >= DATEADD(year, -1, CURRENT_DATE);
```","The generated query does not check if ShippedDate is NOT NULL, which may result in incorrect fulfillment time calculations if ShippedDate is NULL.","SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS average_fulfillment_time FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1","The generated query filters orders from the previous calendar year, while the ground truth query considers orders from the past 365 days from the current date.",None
Which month in 2023 had the highest number of orders?,"SELECT MONTH(OrderDate) AS OrderMonth, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY OrderMonth ORDER BY NumberOfOrders DESC LIMIT 1;","```sql
SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) AS NumberOfOrders
FROM orders
WHERE EXTRACT(YEAR FROM OrderDate) = 2023
GROUP BY Month
ORDER BY NumberOfOrders DESC
LIMIT 1;
```","Both queries extract the month from OrderDate, filter orders from 2023, group by month, and order by the count of orders in descending order, returning the single month with the most orders.","SELECT MONTH(OrderDate) AS Month, COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY MONTH(OrderDate) ORDER BY OrderCount DESC LIMIT 1;","Both queries calculate the count of orders for each month in 2023, group by month, and order the results in descending order to retrieve the month with the highest orders. The queries are functionally equivalent despite using different alias names for the columns.",both
Find the most common city for customer addresses.,"SELECT City, COUNT(CustomerID) AS CustomerCount FROM customers GROUP BY City ORDER BY CustomerCount DESC LIMIT 1;","```sql
SELECT City, COUNT(*) AS CustomerCount
FROM customers
GROUP BY City
ORDER BY CustomerCount DESC
LIMIT 1;
```",Both queries correctly count the number of customers per city and sort them in descending order to find the most common city. The use of COUNT(*) and COUNT(CustomerID) produces the same outcome assuming CustomerID is never NULL.,"SELECT City, COUNT(CustomerID) AS CityCount FROM customers GROUP BY City ORDER BY CityCount DESC LIMIT 1;","Both queries correctly count customers per city, sort in descending order, and return the top city, achieving the same result despite different aliases.",both
Rank employees based on the total value of discounts provided in their orders.,"SELECT E.EmployeeID, SUM(OD.UnitPrice * OD.Quantity * OD.Discount) AS TotalDiscountValue FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY E.EmployeeID ORDER BY TotalDiscountValue DESC;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.Discount * od.UnitPrice * od.Quantity) AS TotalDiscount
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY TotalDiscount DESC;
```",Both queries calculate the total discount value per employee and order by the total discount in descending order. The difference in column selection does not affect the ranking based on the discount.,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalDiscount DESC;","Both queries calculate the same total discount for each employee and order the results in descending order by the total discount value. They use equivalent joins and aggregations, differing only in aliasing.",both
Which products have less than the reorder level in stock?,SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock < ReorderLevel;
```","The generated query includes additional columns (ProductID, UnitsInStock, ReorderLevel) compared to the ground truth, which only selects ProductName.",SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,The generated query and the ground truth query are identical and accurately answer the user's question by selecting products with stock less than their reorder level.,FT
How does the average shipping cost vary by shipper?,"SELECT shippers.CompanyName, AVG(orders.Freight) AS average_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName","```sql
SELECT shippers.ShipperID, AVG(orders.Freight) AS average_shipping_cost
FROM orders
JOIN shippers ON orders.ShipVia = shippers.ShipperID
GROUP BY shippers.ShipperID
```","Both queries calculate the average shipping cost by shipper. The difference is in selecting 'ShipperID' instead of 'CompanyName', but both yield correct average calculations grouped by shippers.","SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipVia;","The generated query does not join with the shippers table, so it returns the shipper ID instead of the company name.",Base
What is the total sales for each month in 2023?,"SELECT DATE_TRUNC('month', orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month","```sql
SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE YEAR(orders.OrderDate) = 2023 
GROUP BY month
```","Both queries calculate the total sales per month for 2023. The generated query uses DATE_FORMAT and YEAR to filter and group by month, while the ground truth query uses DATE_TRUNC and a BETWEEN condition for the same purpose. The results will be equivalent.","SELECT YEAR(OrderDate) AS Year, MONTH(OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(OrderDate) = 2023 GROUP BY YEAR(OrderDate), MONTH(OrderDate);","Both queries calculate the total sales per month for 2023 and use similar logic. The first query uses YEAR and MONTH functions, while the second query uses DATE_TRUNC to group by month. Both yield the same result.",both
What is the total revenue generated from each product?,"SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName;
```","The generated query does not account for any discount in the calculation of total revenue, while the ground truth query includes a discount factor.","SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalRevenue FROM [Order Details] GROUP BY ProductID;","The generated query does not include ProductName, which is present in the ground truth query. Also, it does not JOIN with the 'products' table, potentially missing relevant data.",None
What is the average order value for the first quarter of 2023?,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31',"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'
```","Both queries are identical and will yield the same results, as they calculate the average order value for the specified date range.",SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS avg_order_value FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-03-31',"Both queries calculate the average order value for the first quarter of 2023 by joining orders and order details, summing the order values, and dividing by the count of distinct orders. They are functionally equivalent.",both
How much revenue did each employee generate after discounts?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, 
       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName
```","Both queries calculate the total revenue per employee after discounts. The generated query includes employee names in the SELECT clause and GROUP BY, but these fields do not affect the revenue calculation.","SELECT employees.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] od ON orders.OrderID = od.OrderID GROUP BY employees.EmployeeID;",Both queries calculate the same revenue for each employee by summing the discounted order details and grouping by EmployeeID. The difference is only in aliasing.,both
How many products have more units on order than in stock?,SELECT COUNT(ProductID) FROM products WHERE UnitsOnOrder > UnitsInStock;,"```sql
SELECT COUNT(*) AS ProductCount 
FROM products 
WHERE UnitsOnOrder > UnitsInStock;
```",Both queries count the number of products where UnitsOnOrder exceeds UnitsInStock. The difference in column specified in COUNT() does not affect the result.,SELECT COUNT(ProductID) FROM products WHERE UnitsOnOrder > UnitsInStock;,The generated SQL query and the ground truth SQL query are identical and correctly count products with more units on order than in stock.,both
What is the most common shipping city for orders?,"SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT ShipCity, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY ShipCity
ORDER BY OrderCount DESC
LIMIT 1;
```",The generated SQL query matches the ground truth query and correctly answers the user's question by finding the most common shipping city for orders.,"SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1","Both queries select the shipping city with the highest count of orders, using ORDER BY DESC and LIMIT 1. They perform the same operation despite formatting differences.",both
List the top 3 products with the lowest stock levels.,"SELECT ProductID, ProductName, UnitsInStock FROM products ORDER BY UnitsInStock ASC LIMIT 3;","```sql
SELECT ProductID, ProductName, UnitsInStock
FROM products
ORDER BY UnitsInStock ASC
LIMIT 3;
```","The generated SQL query and the ground truth query are functionally equivalent, both returning the top 3 products with the lowest stock levels.",SELECT ProductName FROM products ORDER BY UnitsInStock ASC LIMIT 3;,"The generated query only retrieves the ProductName, while the ground truth also retrieves ProductID and UnitsInStock.",Base
What is the average discount provided across all products?,SELECT AVG(Discount) FROM [Order Details];,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details]
```","Both queries calculate the average discount from the 'Order Details' table. The generated query also includes an alias for the result, which does not affect the accuracy of the answer.",SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];,Both queries calculate the average discount from the 'Order Details' table and yield the same result.,both
Which supplier has the lowest average lead time?,"SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY avg_lead_time ASC LIMIT 1","```sql
SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_lead_time 
FROM orders 
JOIN products ON orders.OrderID = products.ProductID 
GROUP BY products.SupplierID 
ORDER BY average_lead_time 
LIMIT 1;
```",The generated query joins on incorrect columns (OrderID and ProductID) and does not include necessary joins with Order Details and Suppliers tables. It also selects SupplierID instead of CompanyName.,"SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLead FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID ORDER BY AverageLead ASC LIMIT 1;","The generated query returns the SupplierID, while the ground truth returns the CompanyName. They may yield the same supplier, but the output format is different.",None
Which shipping method has the highest average shipping cost?,"SELECT ShipVia, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipVia ORDER BY AvgShippingCost DESC LIMIT 1;","```sql
SELECT ShipVia, AVG(Freight) AS AverageShippingCost
FROM orders
GROUP BY ShipVia
ORDER BY AverageShippingCost DESC
LIMIT 1;
```",Both queries correctly calculate the average shipping cost for each shipping method and order the results to return the method with the highest average. Differences in aliases do not affect the result.,"SELECT ShipVia, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipVia ORDER BY AvgShippingCost DESC LIMIT 1;","The generated SQL query and the ground truth SQL query are identical, both correctly calculate the average shipping cost for each shipping method, order the results by average shipping cost in descending order, and limit the output to the top result.",both
Which region has the highest number of delayed deliveries?,"SELECT ShipRegion, COUNT(*) AS DelayedOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipRegion ORDER BY DelayedOrders DESC LIMIT 1;","```sql
SELECT ShipRegion, COUNT(OrderID) AS DelayedDeliveries
FROM orders
WHERE ShippedDate > RequiredDate
GROUP BY ShipRegion
ORDER BY DelayedDeliveries DESC
LIMIT 1;
```",Both queries count the number of orders where the ShippedDate is later than the RequiredDate for each ShipRegion and return the region with the highest count. The differences in column aliasing (DelayedDeliveries vs. DelayedOrders) do not affect the result.,"SELECT ShipRegion, COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) AS DelayedDeliveries FROM orders GROUP BY ShipRegion ORDER BY DelayedDeliveries DESC LIMIT 1;","Both queries count delayed deliveries per region and order the results in descending order, selecting the top one. They yield the same result.",both
Which employee has generated the highest sales in the last year?,"SELECT e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 1;
```",Both queries calculate total sales for employees in the last year and return the employee with the highest sales. Field differences do not affect correctness.,"SELECT e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= CURRENT_DATE - INTERVAL '1 year' GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1","The generated query does not group by e.FirstName and e.LastName, which can cause an SQL error or incorrect results if FirstName and LastName are not dependent on EmployeeID. The ground truth query includes these in the GROUP BY clause.",Base
What is the total inventory value for each product category?,"SELECT c.CategoryID, SUM(p.UnitsInStock * p.UnitPrice) AS TotalInventoryValue FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;","```sql
SELECT p.CategoryID, SUM(p.UnitPrice * p.UnitsInStock) AS TotalInventoryValue
FROM products p
GROUP BY p.CategoryID;
```",Both queries calculate the total inventory value per product category using the formula SUM(UnitPrice * UnitsInStock) and group by CategoryID. The join in the ground truth query does not affect the result since CategoryID exists in both tables.,"SELECT c.CategoryName, SUM(p.UnitPrice * p.UnitsInStock) AS TotalInventoryValue FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryName;","The generated query groups by CategoryName, while the ground truth groups by CategoryID, which may yield different results if there are multiple categories with the same name.",Base
How many customers placed orders during a promotion?,SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate BETWEEN 'promotion_start_date' AND 'promotion_end_date';,"```sql
SELECT COUNT(DISTINCT CustomerID) AS CustomersPlacedOrders
FROM orders
WHERE OrderDate BETWEEN 'promotion_start_date' AND 'promotion_end_date';
```","Both queries accurately count the distinct number of customers who placed orders during the specified promotion period, using the same condition.",SELECT COUNT(DISTINCT o.CustomerID) AS PromotionCustomers FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0;,"The generated query counts customers with at least one discounted order, assuming discount implies promotion. The ground truth counts customers based on order date within a promotion period, not on discounts.",Base
What is the total number of orders shipped by month?,"SELECT DATE_FORMAT(o.ShippedDate, '%Y-%m') AS ShipMonth, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE o.ShippedDate IS NOT NULL GROUP BY ShipMonth;","```sql
SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, COUNT(OrderID) AS TotalOrders
FROM orders
WHERE ShippedDate IS NOT NULL
GROUP BY Month
ORDER BY Month;
```","The generated query and the ground truth query both calculate the total number of orders shipped by month, use the same logic with DATE_FORMAT to extract the month, filter out null shipped dates, and group by month. The differences in column aliases and formatting do not affect the result.","SELECT DATE_TRUNC('month', ShippedDate) AS Month, COUNT(OrderID) AS TotalOrders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month;","Both queries correctly group orders by month from the ShippedDate and count the total number of orders. Although they use different functions (DATE_TRUNC vs. DATE_FORMAT), both achieve the same result.",both
Which products have the highest profit margin?,"SELECT p.ProductID, SUM(od.Quantity * (od.UnitPrice - od.Discount)) - SUM(od.Quantity * p.UnitPrice) AS ProfitMargin FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY ProfitMargin DESC;","```sql
SELECT p.ProductID, p.ProductName, 
       (SUM(od.Quantity * od.UnitPrice) - SUM(od.Quantity * (p.UnitPrice * (1 - od.Discount)))) AS ProfitMargin
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY ProfitMargin DESC
```","The generated query inaccurately calculates the profit margin by swapping costs and revenues. It subtracts discounted prices from the full order price, unlike the ground truth query which subtracts the total purchase cost from adjusted revenue.","SELECT p.ProductName, (OD.UnitPrice - p.UnitPrice) / OD.UnitPrice AS ProfitMargin FROM products p JOIN [Order Details] OD ON p.ProductID = OD.ProductID WHERE OD.Quantity > 0 ORDER BY ProfitMargin DESC LIMIT 5;","The generated query calculates profit margin per order and uses unit prices directly, while the ground truth aggregates total profit margins considering discounts across all orders.",None
What is the percentage of orders shipped on time versus late?,SELECT (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0) / COUNT(*) AS OnTimePercentage FROM orders;,"```sql
SELECT 
    SUM(CASE WHEN DATEDIFF(ShippedDate, RequiredDate) <= 0 THEN 1 ELSE 0 END) AS OnTimeOrders,
    SUM(CASE WHEN DATEDIFF(ShippedDate, RequiredDate) > 0 THEN 1 ELSE 0 END) AS LateOrders,
    (SUM(CASE WHEN DATEDIFF(ShippedDate, RequiredDate) <= 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(OrderID)) AS OnTimePercentage
FROM 
    orders;
```","The generated query calculates both on-time and late orders but does not provide a percentage of late orders, while the ground truth only calculates the on-time percentage.","SELECT ROUND(COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID), 2) AS OnTimeOrderPercentage FROM orders;",Both queries calculate the percentage of orders shipped on time by comparing ShippedDate with RequiredDate and dividing by the total number of orders.,FT
Which shipping method has the fastest average delivery time?,"SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgDeliveryTime FROM orders GROUP BY ShipVia ORDER BY AvgDeliveryTime ASC LIMIT 1;","```sql
SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageDeliveryTime
FROM orders
GROUP BY ShipVia
ORDER BY AverageDeliveryTime ASC
LIMIT 1;
```",Both queries calculate the average delivery time per shipping method and return the one with the fastest average delivery time. They use the same logic and differ only in the alias used for the average delivery time column.,"SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageDeliveryTime FROM orders GROUP BY ShipVia ORDER BY AverageDeliveryTime ASC LIMIT 1",Both queries calculate the average delivery time for each shipping method and retrieve the one with the smallest average. They yield the same result.,both
What is the total number of orders shipped on time by each employee?,"SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OnTimeOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY employees.EmployeeID","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS TotalOnTimeOrders
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.ShippedDate <= o.RequiredDate
GROUP BY e.EmployeeID
```","Both queries calculate the total number of orders shipped on or before the required date by each employee, grouping by EmployeeID. They effectively yield the same results with minor variations in column selections.","SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OnTimeOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY employees.EmployeeID;",The generated SQL query and the ground truth SQL query are identical and correctly calculate the total number of orders shipped on time by each employee.,both
Determine the product with the best performance based on sales.,"SELECT ProductName, SUM(Quantity) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 0 GROUP BY ProductName ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSales DESC
LIMIT 1;
```","The generated query does not filter out discontinued products, which the ground truth query does with 'WHERE products.Discontinued = 0'.","SELECT p.ProductName, SUM(od.Quantity) AS TotalSaleQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSaleQuantity DESC LIMIT 1;","The generated query does not filter out discontinued products, unlike the ground truth query, which could affect the result.",None
List the customers who have placed orders only with a specific EmployeeID.,SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID HAVING COUNT(DISTINCT o.EmployeeID) = 1 AND MAX(o.EmployeeID) = specific_id;,"```sql
SELECT c.CustomerID, c.CompanyName
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerID, c.CompanyName
HAVING COUNT(DISTINCT o.EmployeeID) = 1 AND MAX(o.EmployeeID) = specific_EmployeeID;
```",Both queries achieve the same outcome. They group customers by CustomerID and check that they have orders linked to only one distinct EmployeeID equal to the specific_EmployeeID.,SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(DISTINCT EmployeeID) = 1;,"The generated query does not filter on a specific EmployeeID. It only checks if each customer has orders from one unique EmployeeID, without verifying that this ID is the specific EmployeeID.",Base
Identify the orders that were shipped after the required date.,SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;,"```sql
SELECT *
FROM orders
WHERE ShippedDate > RequiredDate;
```","The generated SQL query selects all columns, while the ground truth query selects only the OrderID column.",SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;,The generated SQL query and the ground truth query are identical and will produce the same results.,FT
Find discontinued products that still have units in stock.,SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;,"```sql
SELECT ProductID, ProductName, UnitsInStock 
FROM products 
WHERE Discontinued = 1 AND UnitsInStock > 0;
```","The generated query returns ProductID, ProductName, and UnitsInStock, while the ground truth query only returns ProductName.","SELECT ProductID, ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;","Both queries check for discontinued products with stock remaining. The generated query includes ProductID in the select clause, but it does not affect the validity of the results in terms of addressing the user's question.",FT
Identify the region with the highest on-time delivery rate.,"SELECT ShipRegion, COUNT(OrderID) FILTER(WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipRegion ORDER BY OnTimeRate DESC LIMIT 1;","```sql
SELECT ShipRegion, 
       COUNT(OrderID) AS TotalOrders, 
       SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) AS OnTimeDeliveries,
       (SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 1.0 / COUNT(OrderID)) AS OnTimeDeliveryRate
FROM orders
GROUP BY ShipRegion
ORDER BY OnTimeDeliveryRate DESC
LIMIT 1;
```","Both queries calculate the on-time delivery rate per region, sort by it in descending order, and limit the result to the top region. They achieve the same end result using slightly different approaches.","SELECT ShipRegion, (SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / CAST(COUNT(OrderID) AS FLOAT)) * 100 AS OnTimeRate FROM orders GROUP BY ShipRegion ORDER BY OnTimeRate DESC LIMIT 1;","Both queries calculate the on-time delivery rate per region by dividing the number of on-time deliveries by the total number of orders, then multiply by 100. They order the results by on-time rate in descending order and return the top result. The logic is equivalent despite using different SQL syntax.",both
How many products from each supplier are currently discontinued?,"SELECT s.CompanyName, COUNT(*) AS DiscontinuedProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1 GROUP BY s.CompanyName;","```sql
SELECT s.CompanyName, COUNT(p.ProductID) AS DiscontinuedProducts
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
WHERE p.Discontinued = 1
GROUP BY s.CompanyName;
```",Both queries count the number of discontinued products for each supplier by filtering where 'p.Discontinued = 1' and grouping by 's.CompanyName'. The difference between 'COUNT(p.ProductID)' and 'COUNT(*)' does not affect the results in this context.,"SELECT s.SupplierID, COUNT(p.ProductID) AS DiscontinuedCount FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.Discontinued = 1 GROUP BY s.SupplierID;","The generated query groups by SupplierID, while the ground truth query groups by CompanyName.",Base
Which employee reports to the manager with the highest average sales per employee?,SELECT e.EmployeeID FROM employees e WHERE e.ReportsTo = (SELECT employees.EmployeeID FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) DESC LIMIT 1);,"```sql
SELECT e.*
FROM employees e
JOIN (
    SELECT e2.ReportsTo, AVG(total_sales) AS avg_sales
    FROM (
        SELECT o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS total_sales
        FROM orders o
        JOIN [Order Details] od ON o.OrderID = od.OrderID
        GROUP BY o.EmployeeID
    ) sales
    JOIN employees e2 ON sales.EmployeeID = e2.EmployeeID
    GROUP BY e2.ReportsTo
    ORDER BY avg_sales DESC
    LIMIT 1
) manager_sales ON e.EmployeeID = manager_sales.ReportsTo;
```",Both queries determine which employee reports to the manager with the highest average sales per employee by calculating average sales through a similar aggregation and ordering logic. They effectively yield the same results.,"SELECT employees.EmployeeID FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN (SELECT EmployeeID, AVG(SUM(TotalSales)) OVER (PARTITION BY e.ReportsTo) AS AvgSales FROM (SELECT e.ReportsTo, od.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN employees e ON o.EmployeeID = e.EmployeeID GROUP BY e.ReportsTo, od.EmployeeID) AS SalesByManager) AS ManagerSales ON employees.EmployeeID = ManagerSales.EmployeeID WHERE ManagerSales.AvgSales = (SELECT MAX(AvgSales) FROM (SELECT e.ReportsTo, AVG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) AS AvgSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN employees e ON o.EmployeeID = e.EmployeeID GROUP BY e.ReportsTo) AS M)",The generated query incorrectly aggregates sales by manager and averages them per employee. It also uses an incorrect OVER() clause and a subquery structure for computing maximum average sales. The ground truth query correctly identifies the manager with the highest average sales and returns employees reporting to that manager.,Base
Which orders have the highest discount applied?,"SELECT OrderID, Discount FROM [Order Details] ORDER BY Discount DESC LIMIT 10;","```sql
SELECT OrderID, SUM(Discount) AS TotalDiscount
FROM [Order Details]
GROUP BY OrderID
ORDER BY TotalDiscount DESC
LIMIT 1;
```",The generated query calculates the total discount per order and returns the order with the highest total discount. The ground truth query sorts individual discount entries and returns the top 10 discounted details.,"SELECT OrderID, Discount FROM [Order Details] ORDER BY Discount DESC;","The generated query does not limit the number of results, whereas the ground truth query applies a LIMIT 10 to show only the top 10 orders with the highest discounts.",None
What is the average lead time per supplier in months?,"SELECT suppliers.SupplierID, EXTRACT(YEAR_MONTH FROM orders.OrderDate) AS Month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY suppliers.SupplierID, Month;","```sql
SELECT suppliers.SupplierID, suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate) / 30.44) AS AverageLeadTime
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.SupplierID, suppliers.CompanyName
```","The generated query calculates average lead time in months using a direct conversion (dividing by 30.44), while the ground truth does not convert days to months but extracts the month from the order date, which changes the context of aggregation.","SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate) / 30.44) AS AvgLeadTimeMonths FROM products JOIN orders ON products.SupplierID = orders.ShipVia GROUP BY products.SupplierID;","The generated SQL query calculates the average lead time in months using a division by 30.44 and groups by products.SupplierID, not per supplier. The ground truth query groups by suppliers.SupplierID and month to find the average lead time without converting to months.",None
What is the total potential revenue from products not yet ordered?,SELECT SUM(UnitPrice * UnitsInStock) AS PotentialRevenue FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"```sql
SELECT SUM(p.UnitPrice * p.UnitsOnOrder) AS TotalPotentialRevenue
FROM products p
WHERE p.UnitsOnOrder > 0;
```","The generated query calculates potential revenue from products that have units on order, whereas the ground truth query calculates potential revenue from unsold units in stock for products not yet ordered.",SELECT SUM(UnitPrice * UnitsInStock) FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"Both queries compute the sum of the potential revenue (UnitPrice * UnitsInStock) for products that have not been ordered, and use identical logic and conditions.",FT
Which region has the lowest average order value?,"SELECT o.ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipRegion ORDER BY AvgOrderValue ASC LIMIT 1;","```sql
SELECT ShipRegion, 
       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY ShipRegion
ORDER BY AvgOrderValue ASC
LIMIT 1;
```",Both queries calculate the average order value per region and return the region with the lowest average order value.,"SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion ORDER BY AvgOrderValue ASC LIMIT 1;","Both queries calculate the average order value per region and select the region with the lowest value. They apply the same logic using joins and aggregation, although they use different aliases.",both
Determine the total orders and average order value for each shipping country.,"SELECT ShipCountry, COUNT(DISTINCT OrderID) AS TotalOrders, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCountry;","```sql
SELECT 
    ShipCountry, 
    COUNT(OrderID) AS TotalOrders, 
    AVG(UnitPrice * Quantity * (1 - Discount)) AS AverageOrderValue
FROM 
    orders 
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID 
GROUP BY 
    ShipCountry
```","The generated SQL query uses COUNT(OrderID) instead of COUNT(DISTINCT OrderID), which may lead to different total order counts if there are duplicate OrderID values in 'Order Details'. Otherwise, both calculate the average order value in the same way.","SELECT ShipCountry, COUNT(DISTINCT OrderID) AS TotalOrders, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry","Both queries calculate total orders and average order value per shipping country by joining 'orders' with 'Order Details', using the same logic for calculations and grouping by 'ShipCountry'.",FT
Which city receives the most shipments?,"SELECT ShipCity, COUNT(*) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC;","```sql
SELECT ShipCity, COUNT(OrderID) AS ShipmentCount
FROM orders
GROUP BY ShipCity
ORDER BY ShipmentCount DESC
LIMIT 1;
```","Both queries group by ShipCity, count the shipments, and order the results by the count in descending order. The generated query also includes a LIMIT 1 clause to return only the city with the most shipments, which directly answers the user's question. Despite minor structural differences, both queries yield the same result.","SELECT ShipCity, COUNT(OrderID) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 1;","Both queries count the number of shipments per city and order the results in descending order, selecting the top city with the most shipments. The only difference is that the generated query uses 'LIMIT 1' to get the top result explicitly, while the ground truth query requires further specification to limit the results.",both
Identify products with the highest unit price that have never been ordered.,SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]) ORDER BY UnitPrice DESC LIMIT 1;,"```sql
SELECT ProductID, ProductName, UnitPrice
FROM products
WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details])
ORDER BY UnitPrice DESC
LIMIT 1;
```","The generated query selects ProductID, ProductName, and UnitPrice, while the ground truth query selects only ProductName. Although both queries aim to find products with the highest unit price that have never been ordered, the columns selected differ.","SELECT ProductName, UnitPrice FROM products WHERE UnitPrice = (SELECT MAX(UnitPrice) FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]));",The generated query does not consider that multiple products could have the same highest unit price and does not use ORDER BY with LIMIT like the ground truth query.,None
What are the top 3 most purchased products in terms of quantity?,"SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalQuantity DESC LIMIT 3;","```sql
SELECT OrderDetails.ProductID, SUM(OrderDetails.Quantity) AS TotalQuantity
FROM [Order Details] AS OrderDetails
GROUP BY OrderDetails.ProductID
ORDER BY TotalQuantity DESC
LIMIT 3;
```","The 'LIMIT' clause is non-standard in some SQL databases and may not work as expected depending on the SQL dialect. Otherwise, both queries are equivalent in logic.","SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 3;","Both queries perform the same operations: they select ProductID, sum the Quantity, group by ProductID, order the results by the summed quantity in descending order, and limit the output to the top three entries.",FT
How much freight cost is incurred per supplier?,"SELECT s.SupplierID, SUM(o.Freight) AS TotalFreight FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID;","```sql
SELECT suppliers.SupplierID, suppliers.CompanyName, SUM(orders.Freight) AS TotalFreightCost
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.SupplierID, suppliers.CompanyName;
```","Both queries calculate the total freight cost per supplier by joining suppliers, products, order details, and orders. The difference is that the generated query includes the supplier's company name in the result, which does not affect the freight calculation.","SELECT suppliers.CompanyName, SUM(orders.Freight) AS TotalFreight FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN orders ON orders.OrderDetails.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID;","The generated query incorrectly joins the orders table on an assumed column in orders.OrderDetails, while the ground truth joins on Order Details using ProductID and OrderID.",Base
List products with orders but no stock.,SELECT DISTINCT products.ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE products.UnitsInStock = 0;,"```sql
SELECT p.ProductID, p.ProductName
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE p.UnitsInStock = 0
GROUP BY p.ProductID, p.ProductName;
```","Both queries correctly identify products with orders but no stock by joining the products and order details tables, ensuring the stock is zero. The first query uses GROUP BY, while the second uses DISTINCT, leading to the same result.",SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.UnitsInStock = 0;,"Both queries accurately answer the question by listing products with orders but no stock. The queries select products from the 'products' table that have a corresponding entry in the 'Order Details' table and have 'UnitsInStock' equal to 0. The difference is that the ground truth query uses 'DISTINCT' to ensure unique product names, which may be necessary depending on the dataset.",both
Which region has the highest average freight cost?,"SELECT ShipRegion, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipRegion ORDER BY AvgFreightCost DESC;","```sql
SELECT ShipRegion, AVG(Freight) AS AverageFreight
FROM orders
GROUP BY ShipRegion
ORDER BY AverageFreight DESC
LIMIT 1;
```","Both queries calculate the average freight cost per region and return the region with the highest average freight. The Generated SQL Query adds a LIMIT 1 to ensure only the top result is returned, which aligns with the user's question.","SELECT ShipRegion, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipRegion ORDER BY AvgFreight DESC LIMIT 1;","The generated SQL query correctly calculates the average freight cost per region and orders them in descending order to select the top one, which aligns with the user's question and produces the same result as the ground truth query.",both
What is the average discount given by employees?,"SELECT e.EmployeeID, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details] od
JOIN orders o ON od.OrderID = o.OrderID
JOIN employees e ON o.EmployeeID = e.EmployeeID;
```","The generated query calculates the overall average discount across all employees, while the ground truth query calculates the average discount per employee. They yield different results.","SELECT employees.EmployeeID, AVG([Order Details].Discount) AS AverageDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;","Both queries compute the average discount for each employee by joining the employees, orders, and [Order Details] tables on the necessary keys. They group by EmployeeID and calculate the average discount, yielding the same results.",FT
What is the relationship between order discounts and total sales?,"SELECT orders.OrderID, SUM([Order Details].Discount * [Order Details].UnitPrice * [Order Details].Quantity) AS total_discounts, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.OrderID","```sql
SELECT 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales,
    AVG([Order Details].Discount) AS average_discount
FROM 
    [Order Details]
JOIN 
    orders ON [Order Details].OrderID = orders.OrderID
```","The generated query calculates the total sales and average discount over all orders, while the ground truth query computes the total discounts and total sales per order, providing a more detailed relationship between discounts and sales.","SELECT o.OrderID, d.Discount * d.UnitPrice * d.Quantity AS DiscountImpact, o.ShipCountry FROM orders o JOIN [Order Details] d ON o.OrderID = d.OrderID GROUP BY o.OrderID, o.ShipCountry HAVING SUM(d.Discount * d.UnitPrice * d.Quantity) > 0 ORDER BY DiscountImpact DESC;","The generated SQL query calculates individual discount impacts per order but does not compute total sales, whereas the ground truth query computes total discounts and total sales for each order.",None
Calculate the total discount given on products sold in the last month.,"SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount) AS TotalDiscount FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE());","```sql
SELECT SUM([Order Details].Discount) AS TotalDiscount
FROM [Order Details]
WHERE OrderID IN (
    SELECT OrderID
    FROM Orders
    WHERE OrderDate >= DATEADD(month, -1, GETDATE())
)
```","The generated SQL calculates the sum of Discount directly, while the ground truth SQL calculates the total monetary value of discounts based on Quantity, UnitPrice, and Discount.",SELECT SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE - INTERVAL '1 month') AND EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '1 month')),The generated query calculates discounts for orders made in the same month but the previous year if the current date is early in the new month. The ground truth query correctly selects orders within the last 30 days.,None
Determine the month with the highest total sales in the previous year.,"SELECT MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY MONTH(o.OrderDate) ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS SalesMonth, 
       SUM(OrderDetails.UnitPrice * OrderDetails.Quantity * (1 - OrderDetails.Discount)) AS TotalSales
FROM orders
JOIN [Order Details] AS OrderDetails ON orders.OrderID = OrderDetails.OrderID
WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1
GROUP BY SalesMonth
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries correctly aggregate total sales by month for the previous year and identify the month with the highest sales, returning the same result. Differences in function naming and grouping do not affect the outcome.","SELECT MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY MONTH(o.OrderDate) ORDER BY TotalSales DESC LIMIT 1;","The generated SQL query effectively mirrors the ground truth SQL query. Despite using different date functions (CURDATE() vs CURRENT_DATE), both functions derive the current date according to ANSI SQL standards. The logical structure and operations in both queries are identical, thus ensuring they return the same result.",both
What is the retention rate between January and February 2023?,SELECT (COUNT(DISTINCT o.JanuaryCustomerID) * 1.0 / COUNT(DISTINCT o2.PreJanuaryCustomerID)) * 100 AS RetentionRate FROM (SELECT DISTINCT CustomerID AS JanuaryCustomerID FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-02-01') o LEFT JOIN (SELECT DISTINCT CustomerID AS PreJanuaryCustomerID FROM orders WHERE OrderDate < '2023-01-01') o2 ON o.JanuaryCustomerID = o2.PreJanuaryCustomerID;,"```sql
SELECT 
    (COUNT(DISTINCT o2.CustomerID) * 1.0 / NULLIF(COUNT(DISTINCT o1.CustomerID), 0)) AS RetentionRate
FROM 
    orders o1
LEFT JOIN 
    orders o2 ON o1.CustomerID = o2.CustomerID AND o2.OrderDate BETWEEN '2023-01-01' AND '2023-02-28'
WHERE 
    o1.OrderDate < '2023-01-01';
```","The generated query calculates retention rate based on distinct CustomerIDs who placed orders before January and continued ordering in January-February, whereas the ground truth calculates it specifically for customers who ordered in January.","SELECT (COUNT(o1.CustomerID) * 1.0 / COUNT(o2.CustomerID)) * 100 AS retention_rate FROM orders o1, orders o2 WHERE o1.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' AND o2.OrderDate BETWEEN '2023-02-01' AND '2023-02-28' AND o1.CustomerID = o2.CustomerID","The generated query calculates the retention rate by counting customers present in both January and February, assuming all customers in February had to be present in January. The ground truth calculates retention based on unique customers from January also being present before January, which is a different logic.",None
Identify customers who have ordered within the last month but not in the previous three months.,SELECT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate BETWEEN CURRENT_DATE - INTERVAL '1 month' AND CURRENT_DATE AND customers.CustomerID NOT IN (SELECT CustomerID FROM orders WHERE OrderDate BETWEEN CURRENT_DATE - INTERVAL '4 months' AND CURRENT_DATE - INTERVAL '2 month');,"```sql
SELECT c.CustomerID, c.CompanyName
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
WHERE o.OrderDate >= DATEADD(MONTH, -1, GETDATE())
AND c.CustomerID NOT IN (
    SELECT CustomerID
    FROM orders
    WHERE OrderDate BETWEEN DATEADD(MONTH, -4, GETDATE()) AND DATEADD(MONTH, -1, GETDATE())
)
GROUP BY c.CustomerID, c.CompanyName;
```","The generated query uses DATEADD with GETDATE() which may not work in all SQL implementations, and it uses wrong intervals for filtering orders made in the last month. It also checks the previous three months incorrectly by overlapping the last month.","SELECT CustomerID FROM orders WHERE OrderDate >= DATE_ADD(CURRENT_DATE, INTERVAL -1 MONTH) GROUP BY CustomerID HAVING COUNT(CASE WHEN OrderDate < DATE_ADD(CURRENT_DATE, INTERVAL -1 MONTH) THEN 1 END) = 0;",The generated query checks for customers ordering in the last month but does not correctly exclude those who ordered in the prior three months. It uses an incorrect logic for identifying past orders.,None
List products that have the highest margin by comparing unit price with discounted price.,"SELECT ProductName, UnitPrice - MIN(od.UnitPrice * (1 - od.Discount)) AS Margin FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY ProductName ORDER BY Margin DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, 
       (od.UnitPrice * (1 - od.Discount)) AS DiscountedPrice, 
       (p.UnitPrice - (od.UnitPrice * (1 - od.Discount))) AS Margin
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.Discount > 0
ORDER BY Margin DESC;
```","The generated query calculates a margin for each order and orders by it, while the ground truth query calculates the minimum discounted price per product and computes margin.","SELECT ProductName, (UnitPrice - (UnitPrice * (1 - Discount))) AS ProfitMargin FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID ORDER BY ProfitMargin DESC LIMIT 1;","The generated query calculates margin as (UnitPrice - (UnitPrice * (1 - Discount))) only for a single entry and limits to 1, while the ground truth query finds the minimum discounted price and calculates the margin per product, grouping results to get the top 5.",None
Determine the month with the most number of orders placed.,"SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(*) AS TotalOrders FROM orders GROUP BY Month ORDER BY TotalOrders DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY OrderMonth
ORDER BY OrderCount DESC
LIMIT 1;
```","The generated query uses DATE_FORMAT which assumes a MySQL environment, while the ground truth uses DATE_TRUNC for a SQL-standard or PostgreSQL environment. They apply to different systems and might not yield identical results if not adapted to the same SQL dialect.","SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY Month ORDER BY TotalOrders DESC LIMIT 1;","Both queries extract the month from OrderDate, group by month, count the number of orders, and sort by total orders to return the month with the most orders. They differ in date extraction functions but yield the same result.",FT
Identify products that have never been ordered.,SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"```sql
SELECT p.ProductID, p.ProductName
FROM products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.ProductID IS NULL;
```",Both queries correctly identify products never ordered by checking for ProductIDs in 'products' that do not appear in '[Order Details]'. The JOIN approach and the NOT IN approach yield the same results.,SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,Both queries are identical and correctly identify products that have never been ordered by checking which ProductIDs are absent from the Order Details.,both
What is the total value of unshipped orders?,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS UnshippedValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE ShippedDate IS NULL;,"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalUnshippedValue
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE orders.ShippedDate IS NULL;
```","Both SQL queries calculate the total value of unshipped orders by summing up the total price of items, factoring in the discount, and filtering the orders where ShippedDate is NULL.",SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.ShippedDate IS NULL;,"Both queries calculate the total value of unshipped orders by joining 'orders' and 'Order Details' on the 'OrderID'. They filter using 'ShippedDate IS NULL' and use the same formula to sum the price, quantity, and apply discount. The differences in aliases and formatting do not affect the result.",both
Which products have been ordered the most across all customers?,"SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalQuantity DESC;","```sql
SELECT [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalQuantity
FROM [Order Details]
GROUP BY [Order Details].ProductID
ORDER BY TotalQuantity DESC;
```","Both queries calculate the total quantity ordered for each product and order the results in descending order, which correctly identifies the products ordered most across all customers.","SELECT p.ProductID, p.ProductName, COUNT(od.OrderID) AS TimesOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TimesOrdered DESC LIMIT 5;","The generated query counts the number of orders per product, while the ground truth query sums the quantities ordered for each product. These are different criteria.",Base
Which employees handled the most orders in the last month?,"SELECT o.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE o.OrderDate >= DATE_ADD(LAST_DAY(DATE_SUB(CURDATE(), INTERVAL 2 MONTH)), INTERVAL 1 DAY) AND o.OrderDate <= LAST_DAY(DATE_SUB(CURDATE(), INTERVAL 1 MONTH)) GROUP BY o.EmployeeID ORDER BY OrderCount DESC;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
WHERE OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE)
GROUP BY EmployeeID
ORDER BY OrderCount DESC;
```","The generated query calculates from the current date minus one month to the current date, while the ground truth query calculates specifically for the last calendar month.","SELECT employees.EmployeeID, COUNT(orders.OrderID) AS order_count FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE MONTH(orders.OrderDate) = MONTH(CURDATE()-INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURDATE()-INTERVAL 1 MONTH) GROUP BY employees.EmployeeID ORDER BY order_count DESC","Both queries aim to find which employees handled the most orders in the last month. They use different methods to calculate the date range, yet effectively filter and group the data for that specific month, yielding the same results.",FT
Identify the top 5 products with the highest inventory turnover ratio.,"SELECT p.ProductID, SUM(od.Quantity * od.UnitPrice) / CASE WHEN AVG(p.UnitsInStock) = 0 THEN NULL ELSE AVG(p.UnitsInStock) END AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY InventoryTurnover DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName,
       SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY InventoryTurnoverRatio DESC
LIMIT 5;
```","Both queries calculate the inventory turnover ratio as the sum of sales divided by the average units in stock, group by ProductID, and order by turnover to get the top 5, though the ground truth adds a null check for zero stock.","SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(NULLIF(p.UnitsInStock, 0)), 0) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY InventoryTurnoverRatio DESC LIMIT 5;","The generated SQL query calculates the Inventory Turnover Ratio using the product of quantity and unit price, grouped by product name and ID, whereas the ground truth query only groups by product ID and uses a different method to handle zero stock.",Base
Which products have been ordered the most?,"SELECT ProductName, SUM([Order Details].Quantity) AS TotalOrdered FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY TotalOrdered DESC;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalOrdered
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalOrdered DESC;
```","Both queries compute the total quantity ordered for each product and order the results by this total in descending order, effectively answering the user's question.","SELECT orders.OrderID, products.ProductName, SUM([Order Details].Quantity) AS TotalQuantityOrdered FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.OrderID, products.ProductName ORDER BY TotalQuantityOrdered DESC;","The generated query groups by OrderID and ProductName, while the ground truth groups only by ProductName, focusing on total quantities per product.",Base
What is the average shipping cost per order for each shipping method?,"SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.ShipperID","```sql
SELECT orders.ShipVia, AVG(orders.Freight) AS average_shipping_cost
FROM orders
GROUP BY orders.ShipVia
```","The generated SQL query groups by ShipVia from orders, missing the join with the shippers table to include CompanyName, whereas the ground truth query joins on the ShipVia and ShipperID to retrieve the CompanyName for each shipping method.","SELECT ShipVia, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY ShipVia","The generated query does not include the company name from the 'shippers' table, which the ground truth query does.",None
How many orders were delivered on time in the last six months?,"SELECT COUNT(o.OrderID) AS OnTimeOrders FROM orders o WHERE o.ShippedDate <= o.RequiredDate AND o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);","```sql
SELECT COUNT(OrderID) AS OnTimeDeliveryCount
FROM orders
WHERE ShippedDate <= RequiredDate
AND OrderDate >= DATEADD(MONTH, -6, GETDATE());
```","The generated query uses GETDATE() which is specific to SQL Server, while the ground truth uses CURDATE(), specific to MySQL. This can lead to different results if the queries are run in different SQL environments.","SELECT COUNT(OrderID) FROM orders WHERE ShippedDate <= RequiredDate AND OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);",Both queries count the number of orders where ShippedDate is on or before RequiredDate and the OrderDate is within the last six months. They yield the same results.,FT
What is the total revenue generated from orders last month?,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN Orders ON [Order Details].OrderID = Orders.OrderID WHERE YEAR(Orders.OrderDate) = YEAR(GETDATE()) AND MONTH(Orders.OrderDate) = MONTH(GETDATE()) - 1;,"```sql
SELECT SUM(od.Quantity * od.UnitPrice) AS TotalRevenue
FROM [Order Details] od
JOIN orders o ON od.OrderID = o.OrderID
WHERE o.OrderDate >= DATEADD(MONTH, -1, GETDATE()) 
AND o.OrderDate < GETDATE();
```",The generated SQL query does not consider discounts and improperly calculates last month's date range. It includes partial days instead of isolating the previous month entirely.,"SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND orders.OrderDate < CURDATE();","The generated query uses CURDATE() to calculate the range for last month, which may include partial months based on the current date, while the ground truth query explicitly calculates last month using YEAR and MONTH functions, ensuring it covers exactly the previous month.",None
Which employees have orders pending for more than a month?,"SELECT e.EmployeeID, o.OrderID, DATEDIFF(CURDATE(), o.OrderDate) AS DaysPending FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.RequiredDate IS NOT NULL AND DATEDIFF(CURDATE(), o.OrderDate) > 30;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.RequiredDate < CURRENT_DATE - INTERVAL '1 month' AND o.ShippedDate IS NULL;
```","The generated SQL checks for orders with a missing ShippedDate and RequiredDate less than a month ago, while the ground truth checks for a RequiredDate and days since OrderDate greater than 30.","SELECT employees.EmployeeID FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE DATEDIFF(CURRENT_DATE, orders.OrderDate) > 30 AND orders.ShippedDate IS NULL;","The generated query checks if the order is unshipped by checking 'ShippedDate IS NULL', whereas the ground truth checks if 'RequiredDate IS NOT NULL'. The focus on pending status and the columns involved differ.",None
Identify the products with the highest discount rate.,"SELECT od.ProductID, MAX(od.Discount) AS MaxDiscount FROM [Order Details] od GROUP BY od.ProductID ORDER BY MaxDiscount DESC","```sql
SELECT p.ProductID, p.ProductName, od.Discount
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
ORDER BY od.Discount DESC
LIMIT 1;
```","The generated query returns only one product with the highest single discount, whereas the ground truth query finds the maximum discount for each product and orders them. The intents are different.","SELECT ProductName, Discount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE Discount = (SELECT MAX(Discount) FROM [Order Details]);","The generated query finds products with the single max discount overall, while the ground truth query orders all products by their max discount rate.",None
How many orders were shipped late in the last quarter?,SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate AND QUARTER(OrderDate) = QUARTER(CURDATE()) - 1;,"```sql
SELECT COUNT(OrderID) AS LateOrders
FROM orders
WHERE ShippedDate > RequiredDate
AND ShippedDate BETWEEN DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '1 quarter') 
AND DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 day';
```","The generated query checks for orders shipped late based on the shipment date in the last quarter using 'ShippedDate BETWEEN'. The ground truth uses 'QUARTER(OrderDate)' to find the orders of the last quarter, which could lead to different results if OrderDate and ShippedDate are not consistently aligned.",SELECT COUNT(OrderID) AS late_orders FROM orders WHERE ShippedDate > RequiredDate AND OrderDate BETWEEN '2023-07-01' AND '2023-09-30',"The generated query filters orders based on the fixed dates for Q3, 2023. The ground truth uses the QUARTER function to dynamically identify the last quarter, which might be different depending on the current date.",None
Which products have the highest revenue but are discontinued?,"SELECT p.ProductID, p.ProductName, SUM(od.Quantity * (od.UnitPrice - od.UnitPrice * od.Discount)) AS Revenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1 GROUP BY p.ProductID, p.ProductName ORDER BY Revenue DESC;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS Revenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE p.Discontinued = 1
GROUP BY p.ProductID, p.ProductName
ORDER BY Revenue DESC;
```","The generated SQL query does not account for discounts in calculating revenue, which results in different outputs compared to the ground truth query.","SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1 GROUP BY products.ProductName ORDER BY total_revenue DESC","Both queries calculate total revenue for discontinued products and order them by revenue in descending order. They use similar logic and operations, differing only slightly in aliasing and arithmetic expression format, which does not affect the outcome.",FT
Analyze the monthly sales trend for a particular product.,"SELECT DATE_TRUNC('month', OrderDate) AS OrderMonth, SUM(Quantity) AS TotalQuantity FROM [Order Details] WHERE ProductID = YOUR_PRODUCT_ID GROUP BY OrderMonth ORDER BY OrderMonth;","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month,
    products.ProductName,
    SUM([Order Details].Quantity) AS TotalSales
FROM 
    [Order Details]
JOIN 
    products ON [Order Details].ProductID = products.ProductID
JOIN 
    orders ON [Order Details].OrderID = orders.OrderID
WHERE 
    products.ProductID = ?  -- Replace ? with the specific ProductID
GROUP BY 
    Month, products.ProductName
ORDER BY 
    Month;
```","Both queries aim to provide the monthly sales trend for a specific product by summing quantities. Despite minor differences, the generated query joins additional tables for product details, which doesn't impact the monthly sales analysis.","SELECT p.ProductName, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS MonthlySales FROM products p INNER JOIN [Order Details] od ON p.ProductID = od.ProductID INNER JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, Month;","The generated query evaluates monthly sales across all products, while the ground truth focuses on a specific product identified by ProductID.",Base
What is the total discount amount applied to each product?,"SELECT p.ProductName, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;","```sql
SELECT [Order Details].ProductID, SUM([Order Details].Discount) AS TotalDiscount
FROM [Order Details]
GROUP BY [Order Details].ProductID;
```","The generated query only sums the Discount, but it should multiply Discount with Quantity and UnitPrice like the ground truth query to get the total discount amount for each product.","SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * od.Discount) AS DiscountAmount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;","Both queries calculate the total discount amount per product by multiplying Quantity, UnitPrice, and Discount, then summing for each product.",FT
What is the highest discount given on an order and by which employee?,"SELECT o.EmployeeID, od.Discount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID ORDER BY od.Discount DESC LIMIT 1;","```sql
SELECT e.FirstName, e.LastName, MAX(od.Discount) AS HighestDiscount
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
ORDER BY HighestDiscount DESC
LIMIT 1;
```","The generated query includes employee names and limits the results to one grouped by employee, but doesn't accurately fetch the single highest discount across all orders. The ground truth query directly retrieves the order with the highest discount without grouping.","SELECT e.FirstName, e.LastName, od.Discount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount = (SELECT MAX(Discount) FROM [Order Details]) LIMIT 1;","The generated SQL query retrieves the first name and last name of the employee, while the ground truth query retrieves only the employee ID. Both queries aim to find the maximum discount but use different methods of sorting and limiting to identify it. The difference in returned columns means they do not yield the same results.",None
What is the total number of returning customers this year?,SELECT COUNT(DISTINCT orders.CustomerID) AS returning_customers FROM orders WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) AND orders.CustomerID IN (SELECT CustomerID FROM orders WHERE YEAR(OrderDate) < YEAR(CURRENT_DATE)),"```sql
SELECT COUNT(DISTINCT orders.CustomerID) AS returning_customers 
FROM orders 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' 
AND orders.CustomerID IN (SELECT DISTINCT CustomerID FROM orders WHERE OrderDate < '2023-01-01')
```",Both queries calculate the total number of distinct returning customers for the current year by checking if a customer has orders in the past. The difference in date handling ('2023-01-01' to '2023-12-31' vs 'YEAR' functions) does not affect correctness if the current year is 2023.,SELECT COUNT(DISTINCT o1.CustomerID) AS returning_customers FROM orders o1 WHERE YEAR(OrderDate) = 2023 AND o1.CustomerID IN (SELECT o2.CustomerID FROM orders o2 WHERE YEAR(o2.OrderDate) < 2023),"Both queries count distinct CustomerIDs from the current year where those CustomerIDs also appear in previous years, accurately capturing returning customers.",both
List all customers who have placed more than five orders throughout 2023.,SELECT customers.CustomerID FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 5,"```sql
SELECT customers.CustomerID, customers.CompanyName
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY customers.CustomerID, customers.CompanyName
HAVING COUNT(orders.OrderID) > 5
```","Both queries accurately answer the user's question by identifying customers with more than five orders in 2023. The Generated SQL provides additional customer information (CompanyName) not required by the question, but it does not affect the correctness of the result.",SELECT customers.CustomerID FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 5,"Both queries correctly filter orders placed in 2023 and group by CustomerID to count the number of orders, checking for more than five orders.",both
Who are the top 3 employees by sales performance for February 2023?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 3","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN employees ON orders.EmployeeID = employees.EmployeeID 
WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28' 
GROUP BY employees.EmployeeID 
ORDER BY employee_sales DESC 
LIMIT 3;
```",The generated SQL query accurately answers the user's question and yields the same results as the ground truth query. Both queries calculate the total sales for each employee in February 2023 and return the top 3 employees by sales performance.,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 3",The generated SQL query accurately answers the user's question and yields the same results as the ground truth query. Both queries are identical in logic and structure.,both
What is the performance of each product in terms of sales?,"SELECT p.ProductName, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSales DESC;","```sql
SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalSales
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY products.ProductID, products.ProductName
```","Both queries calculate the total sales quantity for each product by joining the 'products' table with the 'Order Details' table and grouping by product name. The only difference is the order of columns and an ORDER BY clause in the ground truth, which does not change the result set for equivalent aggregation.","SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM products p JOIN ""Order Details"" od ON p.ProductID = od.ProductID WHERE p.Discontinued = 0 GROUP BY p.ProductName ORDER BY TotalSold DESC;","The generated query excludes products that are discontinued by adding a WHERE clause 'p.Discontinued = 0', while the ground truth query does not, possibly leading to different results.",Base
List the top 5 best-selling products based on quantity ordered.,SELECT P.ProductName FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID GROUP BY P.ProductName ORDER BY SUM(OD.Quantity) DESC LIMIT 5;,"```sql
SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY products.ProductID, products.ProductName
ORDER BY TotalQuantity DESC
LIMIT 5;
```","Both queries correctly calculate the top 5 best-selling products by quantity ordered. The generated query provides additional detail (ProductID and total quantity), but this does not affect the correctness in terms of fulfilling the user's request for top products by sales.","SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantityOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantityOrdered DESC LIMIT 5;","Both queries aggregate the total quantity ordered per product, sort by this total in descending order, and limit the result to the top 5 products. They yield the same results.",both
How does the customer retention rate compare between the first and second half of 2023?,SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-07-01' AND '2023-12-31' THEN orders.CustomerID END) * 100.0 / COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30' THEN orders.CustomerID END)) AS retention_rate_comparison FROM orders,"```sql
SELECT 
    (SELECT COUNT(DISTINCT orders.CustomerID) 
     FROM orders 
     WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30') / 
    (SELECT COUNT(DISTINCT orders.CustomerID) 
     FROM orders 
     WHERE orders.OrderDate < '2023-01-01') AS customer_retention_rate_first_half,
    
    (SELECT COUNT(DISTINCT orders.CustomerID) 
     FROM orders 
     WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-12-31') / 
    (SELECT COUNT(DISTINCT orders.CustomerID) 
     FROM orders 
     WHERE orders.OrderDate < '2023-07-01') AS customer_retention_rate_second_half
```","The generated query compares customers in each half of 2023 to all previous customers, not directly comparing the first and second halves of 2023 retention.","SELECT (COUNT(DISTINCT first_half_orders.CustomerID) / NULLIF((SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE CAST(OrderDate AS DATE) BETWEEN '2023-01-01' AND '2023-06-30'), 0)) AS retention_rate_first_half, (COUNT(DISTINCT second_half_orders.CustomerID) / NULLIF((SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE CAST(OrderDate AS DATE) BETWEEN '2023-07-01' AND '2023-12-31'), 0)) AS retention_rate_second_half FROM (SELECT DISTINCT o.CustomerID FROM orders o WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-06-30') AS first_half_orders FULL OUTER JOIN (SELECT DISTINCT o.CustomerID FROM orders o WHERE o.OrderDate BETWEEN '2023-07-01' AND '2023-12-31') AS second_half_orders ON first_half_orders.CustomerID = second_half_orders.CustomerID","The generated query calculates the retention rate separately for the first and second halves, while the ground truth query directly compares the retention rate from the first half that appears in the second half.",None
Which employee handled the most orders in a given month?,"SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) AND EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
WHERE MONTH(OrderDate) = :month AND YEAR(OrderDate) = :year
GROUP BY EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```","The generated query uses placeholders :month and :year, allowing for dynamic date input, while the ground truth query uses EXTRACT to get the current year and month.","SELECT o.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE MONTH(o.OrderDate) = 7 AND YEAR(o.OrderDate) = 2023 GROUP BY o.EmployeeID ORDER BY OrderCount DESC LIMIT 1","The generated query is hardcoded for July 2023, while the ground truth query dynamically uses the current year and month.",None
What are the average sales per order for each employee?,"SELECT E.EmployeeID, AVG(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS AverageSalesPerOrder FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY E.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageSalesPerOrder
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","Both queries calculate the average sales per order for each employee by joining employees, orders, and order details, though the generated query includes employee first and last names in the select and group by clauses, which does not affect the calculation of average sales per order.","SELECT e.EmployeeID, AVG(o.OrderTotal) AS AvgSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN (SELECT OrderID, SUM(UnitPrice * Quantity * (1 - Discount)) AS OrderTotal FROM [Order Details] GROUP BY OrderID) od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","Both queries calculate the average sales per order for each employee by joining the employees and orders tables, and computing the total sales for each order using details from the Order Details table. The method of aggregation and grouping yields equivalent results.",both
Find the shipping method with the highest total freight cost.,"SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia ORDER BY TotalFreight DESC LIMIT 1;","```sql
SELECT ShipVia, SUM(Freight) AS TotalFreight
FROM orders
GROUP BY ShipVia
ORDER BY TotalFreight DESC
LIMIT 1;
```","The generated SQL query accurately answers the user's question and yields the same results as the ground truth query. Both queries aggregate freight costs by shipping method and order them in descending order, returning the one with the highest total freight.","SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia ORDER BY TotalFreight DESC LIMIT 1;",The generated SQL query and the ground truth SQL query are identical and correctly answer the user's question.,both
"Which orders had the highest discount applied, and what was the discount percentage?","SELECT o.OrderID, od.ProductID, od.Discount * 100 AS DiscountPercentage FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE od.Discount = (SELECT MAX(Discount) FROM [Order Details]) ORDER BY DiscountPercentage DESC, o.OrderID LIMIT 1;","```sql
SELECT OrderID, Discount
FROM [Order Details]
ORDER BY Discount DESC
LIMIT 1;
```","The generated query only retrieves the OrderID and raw Discount, not the percentage. It does not include additional details about ties, nor does it calculate the DiscountPercentage. The ground truth query also includes ProductID and handles potential ties in discount values.","SELECT OrderID, Discount * 100 as DiscountPercentage FROM [Order Details] WHERE Discount = (SELECT MAX(Discount) FROM [Order Details])","The generated query does not include a JOIN with the orders table nor limits the result to a single entry, potentially missing sorting and additional context provided by the ground truth query.",None
Find the most ordered product in December 2023.,"SELECT products.ProductName, SUM([Order Details].Quantity) AS total_orders FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-12-01' AND '2023-12-31' GROUP BY products.ProductName ORDER BY total_orders DESC LIMIT 1","```sql
SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE orders.OrderDate BETWEEN '2023-12-01' AND '2023-12-31'
GROUP BY products.ProductID
ORDER BY total_quantity DESC
LIMIT 1
```","The generated query selects ProductID, whereas the ground truth selects ProductName, which may lead to a different result if there are multiple products with the same total order quantity. The grouping key is different.","SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity_ordered FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 AND MONTH(orders.OrderDate) = 12 GROUP BY products.ProductName ORDER BY total_quantity_ordered DESC LIMIT 1;","Both queries calculate the total quantity ordered for each product in December 2023, group by product name, and select the product with the highest total, ensuring the same result.",FT
Find the percentage of discontinued products in inventory.,SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM products) AS PercentageDiscontinued FROM products WHERE Discontinued = 1;,"```sql
SELECT 
    (SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS DiscontinuedPercentage
FROM 
    products;
```","Both queries calculate the percentage of discontinued products by dividing the count of discontinued products by the total product count, multiplied by 100, yielding equivalent results.",SELECT (COUNT(*) FILTER (WHERE Discontinued = 1) * 100.0 / COUNT(*)) AS DiscontinuedPercentage FROM products;,"Both queries calculate the percentage of discontinued products by dividing the count of discontinued products by the total count of products, and then multiplying by 100. They use different SQL syntax but produce the same result.",both
Calculate the on-time delivery rate for each shipping company in Q2 2023.,"SELECT shippers.CompanyName, SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / CAST(COUNT(orders.OrderID) AS DECIMAL) AS on_time_delivery_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY shippers.CompanyName","```sql
SELECT orders.ShipVia, 
       COUNT(orders.OrderID) * 1.0 / COUNT(orders.OrderID) AS on_time_delivery_rate
FROM orders
WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30'
GROUP BY orders.ShipVia
HAVING COUNT(orders.OrderID) > 0;
```","The generated query calculates a meaningless fraction (count divided by itself) and does not account for on-time delivery using 'ShippedDate' and 'RequiredDate'. It also uses 'ShipVia', not the shipping company name.","SELECT shippers.CompanyName, (SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / CAST(COUNT(orders.OrderID) AS FLOAT)) * 100 AS on_time_delivery_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY shippers.CompanyName","Both queries correctly calculate the on-time delivery rate by dividing on-time deliveries by total orders for each shipping company in Q2 2023. They differ only in the data type used for casting the count, which doesn't affect the result.",FT
What is the average discount given on orders for each supplier?,"SELECT suppliers.CompanyName, AVG([Order Details].Discount) AS AvgDiscount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName;","```sql
SELECT suppliers.SupplierID, suppliers.CompanyName, AVG([Order Details].Discount) AS AverageDiscount
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.SupplierID, suppliers.CompanyName;
```","Both queries calculate the average discount per supplier. The generated query includes SupplierID in the result, but it doesn't affect the average calculation.","SELECT p.SupplierID, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;","The generated SQL query groups by SupplierID, while the ground truth query groups by suppliers.CompanyName. This could lead to different outputs if a supplier has more than one entry in the suppliers table.",Base
Find the number of orders placed each month this year.,"SELECT MONTH(OrderDate) AS OrderMonth, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY MONTH(OrderDate)","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
    COUNT(OrderID) AS NumberOfOrders
FROM 
    orders
WHERE 
    YEAR(OrderDate) = YEAR(CURDATE())
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries count the number of orders per month this year. They differ in date formatting: one uses MONTH() and the other DATE_FORMAT(), leading to slightly different output but identical results.","SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, COUNT(*) AS OrderCount FROM orders o WHERE EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY Month;","Both queries count the orders placed each month for the current year, using similar logic with the difference being in the function syntax for month and year extraction, which should yield identical results in practice.",both
Which supplier has delivered products the fastest on average in the last month?,"SELECT s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE() GROUP BY s.CompanyName ORDER BY AvgLeadTime ASC LIMIT 1;","```sql
SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE orders.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)
GROUP BY suppliers.SupplierID
ORDER BY AverageLeadTime ASC
LIMIT 1;
```","The generated query uses `orders.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)` which doesn't include the current day, while the ground truth query uses `BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE()`, ensuring inclusion of today. Also, it groups by `suppliers.SupplierID` instead of `s.CompanyName`, but this might not impact the result if there's a one-to-one mapping.","SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN orders ON products.ProductID = [Order Details].ProductID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate > LAST_MONTH_GROUP GROUP BY suppliers.SupplierID, suppliers.CompanyName ORDER BY AvgLeadTime ASC LIMIT 1;","The generated query uses 'LAST_MONTH_GROUP' instead of a valid date range and groups by SupplierID, which could yield different average lead times if there are multiple companies with the same name.",None
What is the average discount applied across all orders?,SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details];
```",The generated SQL query and the ground truth query both calculate the average discount from the 'Order Details' table. The difference in the alias name does not affect the result.,SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];,"Both queries calculate the average discount from the 'Order Details' table, using the AVG function on the 'Discount' column, thus yielding the same result.",both
Which supplier has the shortest average lead time for deliveries?,"SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC LIMIT 1","```sql
SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_lead_time 
FROM orders 
JOIN products ON orders.OrderID = products.ProductID 
GROUP BY products.SupplierID 
ORDER BY average_lead_time ASC 
LIMIT 1;
```","The generated query joins orders directly with products using incorrect keys and omits joining with 'Order Details', which is necessary for a proper relationship between orders and products. It also doesn't join with the suppliers table.","SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN orders ON products.ProductID = orders.OrderID GROUP BY suppliers.CompanyName ORDER BY avg_lead_time ASC LIMIT 1",The generated SQL query incorrectly joins orders on products.ProductID = orders.OrderID. It should join through order details to properly associate orders with products and their suppliers.,None
Which region generates the most revenue?,"SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Revenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion ORDER BY Revenue DESC LIMIT 1","```sql
SELECT customers.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.Region
ORDER BY TotalRevenue DESC
LIMIT 1;
```","The generated SQL query groups by 'customers.Region', while the ground truth groups by 'ShipRegion'. They may yield different results depending on data consistency between 'customers.Region' and 'ShipRegion'.","SELECT c.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Region ORDER BY TotalRevenue DESC LIMIT 1;","The generated query groups revenue by customer region, while the ground truth groups by shipping region.",None
How many orders have a discount applied?,SELECT COUNT(DISTINCT o.OrderID) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0;,"```sql
SELECT COUNT(DISTINCT OrderID) AS OrdersWithDiscount
FROM [Order Details]
WHERE Discount > 0;
```",Both queries count distinct OrderIDs from 'Order Details' where the discount is greater than zero. The join in the ground truth query is redundant for counting distinct OrderIDs with a discount from 'Order Details'.,SELECT COUNT(DISTINCT OrderID) AS DiscountedOrders FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0;,"Both queries count distinct OrderIDs from the same tables with the condition that the discount is greater than zero, so they yield the same result.",both
Which products have a stock below their reorder level?,SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock < ReorderLevel;
```","Both queries filter products where 'UnitsInStock' is less than 'ReorderLevel'. The generated query provides additional columns ('ProductID', 'UnitsInStock', 'ReorderLevel') but still correctly identifies the products matching the condition.",SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"Both the generated SQL query and the ground truth query check for products with stock below their reorder level, targeting the same columns and conditions.",both
Find products that have no units on order.,SELECT ProductName FROM products WHERE UnitsOnOrder = 0;,"```sql
SELECT *
FROM products
WHERE UnitsOnOrder = 0;
```","The generated query selects all columns, while the ground truth query selects only the ProductName.",SELECT ProductName FROM products WHERE UnitsOnOrder = 0;,Both the generated and ground truth SQL queries are identical and accurately answer the user's question by selecting products with zero units on order.,FT
