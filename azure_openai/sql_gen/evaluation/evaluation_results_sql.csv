User Question,Ground Truth SQL Query,Generated SQL by Base Model,Explanation by Base Model,Generated SQL by FT Model,Explanation by FT Model,Model that got it right
What is the average discount applied to orders each month?,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY month","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, 
    AVG([Order Details].Discount) AS average_discount 
FROM 
    [Order Details] 
JOIN 
    orders ON [Order Details].OrderID = orders.OrderID 
GROUP BY 
    month
```","The generated query does not filter the results to only include orders from the year 2023, as specified in the ground truth query.","SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG([Order Details].Discount) AS avg_discount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY month","The generated query does not filter the data to only include orders from the year 2023, unlike the ground truth query.",None
Which city had the highest number of orders placed?,"SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1","```sql
SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY ShipCity
ORDER BY NumberOfOrders DESC
LIMIT 1;
```","Both queries group by ShipCity, count OrderID, and return the city with the highest number of orders, using ORDER BY DESC and LIMIT 1.","SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1","Both queries are identical and correctly group the orders by city, count them, and return the city with the highest order count.",both
Who are the top 5 employees in terms of total sales revenue?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 5;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 5;
```","Both queries calculate total sales per employee and return the top 5 employees based on those totals. The ground truth query omits employee names, but this does not affect the correctness regarding total sales calculation.","SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 5;","The generated SQL query and the ground truth SQL query are effectively the same, using the same logic, tables, and conditions to find the top 5 employees in terms of total sales revenue.",both
Which suppliers have products with zero stock available?,"SELECT s.SupplierID, s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.UnitsInStock = 0;","```sql
SELECT s.SupplierID, s.CompanyName
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
WHERE p.UnitsInStock = 0;
```","The generated SQL query accurately answers the user's question by selecting suppliers with products that have zero stock, and it yields the same results as the ground truth query.",SELECT s.SupplierID FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.UnitsInStock = 0;,"The generated query only returns SupplierID, while the ground truth query returns both SupplierID and CompanyName. The results are not the same.",Base
What is the total number of sales per city?,"SELECT ShipCity, COUNT(OrderID) AS TotalSales FROM orders GROUP BY ShipCity;","```sql
SELECT ShipCity, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY ShipCity;
```","The generated SQL calculates sales as the sum of product prices per city, while the ground truth counts the number of orders per city.","SELECT o.ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCity","The generated query calculates total sales value per city, whereas the ground truth query counts the number of sales (orders) per city.",None
Which customers have received the largest discounts?,"SELECT c.CustomerID, MAX(od.Discount) AS MaxDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY MaxDiscount DESC;","```sql
SELECT customers.CustomerID, customers.CompanyName, SUM([Order Details].Discount) AS TotalDiscount
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID, customers.CompanyName
ORDER BY TotalDiscount DESC;
```","The generated SQL calculates the total discount per customer, while the ground truth aims to find the maximum single discount received by each customer.","SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY TotalDiscount DESC;","The generated query calculates total discounts per customer, whereas the ground truth query finds the maximum discount per order for each customer.",None
Which customers have placed more than ten orders?,SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 10;,"```sql
SELECT CustomerID
FROM orders
GROUP BY CustomerID
HAVING COUNT(OrderID) > 10;
```","The generated SQL query and the ground truth query are functionally equivalent. Both query the 'orders' table, group by 'CustomerID', and use HAVING to filter customers with more than ten orders.",SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID HAVING COUNT(o.OrderID) > 10;,"Both queries accurately answer the question by identifying customers with more than ten orders. They group by CustomerID and use HAVING COUNT(OrderID) > 10 to filter customers, thus yielding the same result.",both
What is the customer lifetime value of each customer?,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID","```sql
SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN customers ON orders.CustomerID = customers.CustomerID 
GROUP BY customers.CustomerID
```",The generated SQL query accurately answers the user's question and yields the same results as the ground truth query. Both queries are functionally equivalent and calculate the customer lifetime value correctly.,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID","Both queries are identical, performing the same calculations and aggregations to find the customer lifetime value.",both
What is the average number of products ordered per order?,"SELECT AVG(OrderQuantity) AS AvgProductsPerOrder FROM (SELECT OrderID, COUNT(ProductID) AS OrderQuantity FROM [Order Details] GROUP BY OrderID) AS OrderCounts;","```sql
SELECT AVG(TotalProducts) AS AverageProductsPerOrder
FROM (
    SELECT OrderID, SUM(Quantity) AS TotalProducts
    FROM [Order Details]
    GROUP BY OrderID
) AS OrderSummaries;
```","Both queries calculate the average number of products per order by aggregating total quantities for each order, even though one uses SUM(Quantity) and the other uses COUNT(ProductID).",SELECT AVG(total_products) AS AverageProductsPerOrder FROM (SELECT SUM(od.Quantity) AS total_products FROM [Order Details] od GROUP BY od.OrderID) AS subquery;,Both queries calculate the average number of products per order by aggregating the total quantity of products in each order (via SUM or COUNT) and then averaging these totals.,both
Identify the top 5 products with the highest sales revenue.,"SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS product_sales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY product_sales DESC LIMIT 5;","```sql
SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM [Order Details] od
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY od.ProductID
ORDER BY TotalRevenue DESC
LIMIT 5;
```","Both queries calculate total revenue per product and order the results to find the top 5 products with the highest sales revenue. Although the generated SQL joins with the 'orders' table, it doesn't affect the aggregation result since the critical calculation is performed within the '[Order Details]' table.","SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) as TotalSalesRevenue FROM [Order Details] GROUP BY ProductID ORDER BY TotalSalesRevenue DESC LIMIT 5;","Both queries calculate the total sales revenue for each product by summing up the products of UnitPrice, Quantity, and (1 - Discount) grouped by ProductID, and then order the results in descending order to limit to the top 5.",both
How many orders were not shipped at all?,SELECT COUNT(*) FROM orders WHERE ShippedDate IS NULL,"```sql
SELECT COUNT(OrderID) AS UnshippedOrders
FROM orders
WHERE ShippedDate IS NULL;
```","Both queries accurately count the number of orders with NULL in the ShippedDate column, indicating orders not shipped at all.",SELECT COUNT(DISTINCT OrderID) FROM orders WHERE ShippedDate IS NULL;,"Both queries count orders where ShippedDate is NULL, thus they yield the same result.",both
Identify orders that were shipped late and the shipping method used.,"SELECT OrderID, ShipVia FROM orders WHERE ShippedDate > RequiredDate;","```sql
SELECT OrderID, ShipVia
FROM orders
WHERE ShippedDate > RequiredDate;
```","The generated SQL query and the ground truth SQL query are identical, thus will yield the same results.","SELECT OrderID, ShipVia FROM orders WHERE ShippedDate > RequiredDate;",The generated SQL query matches the ground truth SQL query exactly. Both accurately identify orders shipped late and the shipping method used.,both
Which product category generates the most revenue?,"SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY Revenue DESC LIMIT 1;","```sql
SELECT ProductCategory, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalRevenue
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
GROUP BY ProductCategory
ORDER BY TotalRevenue DESC
LIMIT 1;
```","The generated query aggregates by ProductCategory while the ground truth aggregates by ProductID, resulting in different outputs.","SELECT pc.CategoryName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN ProductCategories pc ON p.CategoryID = pc.CategoryID GROUP BY pc.CategoryName ORDER BY TotalRevenue DESC LIMIT 1","The generated query calculates revenue by category and correctly identifies the category with the highest revenue, whereas the ground truth query calculates revenue by product and identifies the product with the highest revenue. These address different aspects of revenue analysis.",None
Which suppliers have delivered discontinued products?,SELECT DISTINCT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE products.Discontinued = 1;,"```sql
SELECT DISTINCT s.CompanyName, s.SupplierID
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
WHERE p.Discontinued = 1;
```",The generated query does not check if the discontinued products were actually delivered. The ground truth query does so by joining with 'Order Details'.,"```sql
SELECT DISTINCT s.SupplierID FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1;
```",The generated query returns SupplierID while the ground truth query returns CompanyName and checks for order details.,None
What is the revenue generated from each product?,"SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS Revenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    SUM(od.Quantity * od.UnitPrice) AS Revenue
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.ProductName;
```","The generated SQL query and the ground truth SQL query are functionally identical, both calculating revenue per product by joining the 'products' and 'Order Details' tables and grouping by ProductID and ProductName.","SELECT ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName;","The generated query accounts for discounts in the revenue calculation, but the ground truth query does not. This will yield different results.",Base
How many products are currently being discontinued?,SELECT COUNT(*) FROM products WHERE Discontinued = 1,"```sql
SELECT COUNT(*) AS DiscontinuedProductCount 
FROM products 
WHERE Discontinued = 1;
```","Both queries count the number of products that are discontinued by checking if the 'Discontinued' column is equal to 1. The difference is merely in the naming of the result column, which does not affect the accuracy of the answer.",SELECT COUNT(*) AS TotalDiscontinued FROM products WHERE Discontinued = 1;,"Both queries count the rows in the 'products' table where the 'Discontinued' column has a value of 1, which answers the user's question.",both
What is the average shipping cost per order for each shipper?,"SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName","```sql
SELECT shippers.ShipperID, AVG(orders.Freight) AS average_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.ShipperID
```","The generated query groups by ShipperID, while the ground truth groups by CompanyName. They may yield the same averages but present different outputs.","SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName","The generated SQL query accurately matches the ground truth query both syntactically and semantically, resulting in the same output.",FT
Which category has the longest list of discontinued products?,"SELECT c.CategoryID, COUNT(p.ProductID) AS DiscontinuedCount FROM products p JOIN categories c ON p.CategoryID = c.CategoryID WHERE p.Discontinued = 1 GROUP BY c.CategoryID ORDER BY DiscontinuedCount DESC LIMIT 1;","```sql
SELECT CategoryID, COUNT(ProductID) AS DiscontinuedCount
FROM products
WHERE Discontinued = 1
GROUP BY CategoryID
ORDER BY DiscontinuedCount DESC
LIMIT 1;
```","Both queries aim to find the category with the most discontinued products. They count discontinued products per category and order by the count, returning the top one. The generated query assumes 'CategoryID' is in the 'products' table, which matches the ground truth result.","SELECT c.CategoryID, COUNT(p.ProductID) AS DiscontinuedCount FROM products p JOIN categories c ON p.CategoryID = c.CategoryID WHERE p.Discontinued = 1 GROUP BY c.CategoryID ORDER BY DiscontinuedCount DESC LIMIT 1;",Both queries are identical and correctly find the category with the highest count of discontinued products.,both
What is the average unit price of all products?,SELECT AVG(UnitPrice) FROM products,"```sql
SELECT AVG(UnitPrice) AS AverageUnitPrice FROM products;
```","Both queries calculate the average unit price of all products from the 'products' table and yield the same result, despite the Generated SQL Query using an alias.",SELECT AVG(UnitPrice) AS AvgUnitPrice FROM products;,"Both queries calculate the average of the UnitPrice column from the products table. The difference is only the alias used in the generated query, which does not affect the result of the query.",both
Which customers have placed orders with the highest discounts?,"SELECT o.CustomerID, MAX(od.Discount) AS MaxDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID ORDER BY MaxDiscount DESC;","```sql
SELECT o.CustomerID, SUM(od.Discount) AS TotalDiscount
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY o.CustomerID
ORDER BY TotalDiscount DESC;
```","The generated query calculates the total discount for each customer, while the ground truth query looks for the highest single discount for each customer. These approaches yield different results.","SELECT CustomerID, AVG(Discount) AS AverageDiscount FROM [Order Details] GROUP BY CustomerID ORDER BY AverageDiscount DESC;","The generated query uses AVG to calculate average discounts per customer, whereas the ground truth query correctly uses MAX to identify the highest discount per customer.",None
Which products have sales exceeding $5000?,SELECT ProductName FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName HAVING SUM([Order Details].Quantity * [Order Details].UnitPrice) > 5000;,"```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
HAVING SUM(od.Quantity * od.UnitPrice) > 5000;
```","Both queries correctly identify products with total sales exceeding $5000. The generated query provides additional columns (ProductID and TotalSales), but the condition and result logic align with the ground truth.",SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity * od.UnitPrice) > 5000;,"Both queries select products with total sales exceeding $5000, using the same logic to calculate sales.",both
Calculate the total discount given on products sold in the last month.,"SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount) AS TotalDiscount FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE());","```sql
SELECT SUM([Order Details].Discount) AS TotalDiscount
FROM [Order Details]
WHERE OrderID IN (
    SELECT OrderID
    FROM Orders
    WHERE OrderDate >= DATEADD(month, -1, GETDATE())
);
```","The generated query sums the Discount field directly, while the ground truth query calculates the total discount value as Quantity * UnitPrice * Discount.","SELECT SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscount FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE);","The generated query uses DATEADD which is not ANSI SQL and compares with CURRENT_DATE, potentially not aligned with the ground truth which uses DATE_SUB and handles dates inclusively using BETWEEN.",None
Which company name appears most frequently in the customer database?,"SELECT CompanyName, COUNT(*) AS Frequency FROM customers GROUP BY CompanyName ORDER BY Frequency DESC LIMIT 1;","```sql
SELECT CompanyName, COUNT(*) AS Frequency
FROM customers
GROUP BY CompanyName
ORDER BY Frequency DESC
LIMIT 1;
```","The generated SQL query correctly groups the customers by CompanyName, counts the occurrences, orders them by frequency in descending order, and limits the result to one, which matches the ground truth query.","SELECT CompanyName, COUNT(*) AS Frequency FROM customers GROUP BY CompanyName ORDER BY Frequency DESC LIMIT 1;","The generated SQL query is identical to the ground truth SQL query, and both correctly determine the company name that appears most frequently in the customer database by counting occurrences and ordering by frequency in descending order, limiting the result to the top entry.",both
What are the top 5 cities by number of shipments?,"SELECT ShipCity, COUNT(OrderID) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 5","```sql
SELECT ShipCity, COUNT(OrderID) AS ShipmentCount
FROM orders
GROUP BY ShipCity
ORDER BY ShipmentCount DESC
LIMIT 5;
```","Both queries count the number of orders per city, order by this count in descending order, and limit the results to the top 5 cities, effectively answering the user's question the same way.","SELECT ShipCity, COUNT(OrderID) AS NumberOfShipments FROM orders GROUP BY ShipCity ORDER BY NumberOfShipments DESC LIMIT 5;","Both queries calculate the number of shipments per city, order by this count in descending order, and limit the results to the top 5 cities. The difference in alias names (NumberOfShipments vs. Shipments) does not affect the outcome.",both
What is the stock-to-sale ratio for each product?,"SELECT ProductName, UnitsInStock * 1.0 / SUM([Order Details].Quantity) AS StockToSaleRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    (p.UnitsInStock / NULLIF(SUM(od.Quantity), 0)) AS StockToSaleRatio
FROM 
    products p
LEFT JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.ProductName
```","Both queries calculate the stock-to-sale ratio per product by dividing the units in stock by the sum of quantities sold. They use a join between the 'products' and '[Order Details]' tables and group by product details. Despite different syntax, the logic is the same.","SELECT products.ProductName, (UnitsInStock / (SUM([Order Details].Quantity) + NULLIF(SUM(NULLIF([Order Details].Discount, 0)), 0))) AS StockToSaleRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName;","The generated query includes discount handling which affects the calculation by possibly reducing the total order quantity, differing from the ground truth calculation.",Base
Identify products with the highest discount offered historically.,"SELECT ProductID, MAX(Discount) AS MaxDiscount FROM [Order Details] GROUP BY ProductID ORDER BY MaxDiscount DESC LIMIT 1;","```sql
SELECT p.ProductID, p.ProductName, MAX(od.Discount) AS HighestDiscount
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY HighestDiscount DESC;
```","The generated query lists all products with their highest discounts, while the ground truth query aims to find a single product with the absolute highest discount.","SELECT p.ProductID, p.ProductName, MAX(od.Discount) AS MaxDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY MaxDiscount DESC;","The generated query returns all products ordered by discount, while the ground truth query returns only the single product with the maximum discount.",None
Evaluate the impact of hiring date on the sales performance.,"SELECT employees.EmployeeID, YEAR(employees.HireDate) AS HireYear, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, YEAR(employees.HireDate)","```sql
SELECT 
    e.HireDate,
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    e.HireDate
ORDER BY 
    e.HireDate;
```","The generated query groups by hire date, while the ground truth query groups by employee ID and hire year. Thus, the results will differ.","SELECT e.EmployeeID, e.HireDate, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate < '2022-01-01' GROUP BY e.EmployeeID, e.HireDate;","The generated query includes a WHERE clause filtering orders before '2022-01-01', which is missing in the ground truth query. Also, the generated query groups by EmployeeID and HireDate, whereas the ground truth groups by EmployeeID and the year of HireDate. These differences can lead to different results.",None
Determine the average unit price of products supplied by each supplier.,"SELECT s.SupplierID, AVG(p.UnitPrice) AS AvgUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;","```sql
SELECT suppliers.SupplierID, AVG(products.UnitPrice) AS AverageUnitPrice
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
GROUP BY suppliers.SupplierID;
```",Both queries calculate the average unit price of products for each supplier using a join on SupplierID and grouping by SupplierID.,"SELECT suppliers.SupplierID, AVG(products.UnitPrice) as AverageUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID;","Both queries join the suppliers and products tables on SupplierID, calculate the average UnitPrice per supplier, and group by SupplierID. They achieve the same result.",both
Identify the top 5 suppliers by total sales revenue generated.,"SELECT suppliers.SupplierID, CompanyName, SUM([Order Details].UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID, CompanyName ORDER BY TotalSales DESC LIMIT 5;","```sql
SELECT s.SupplierID, s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY s.SupplierID, s.CompanyName
ORDER BY TotalSales DESC
LIMIT 5;
```","The generated SQL query and the ground truth query both aim to calculate the total sales revenue per supplier, and they perform identical operations: they join the same tables on the same keys, compute the same aggregate metric, group by the same fields, and limit the result to the top 5 records based on total sales. The syntax and formatting are slightly different, but they produce the same results.","SELECT suppliers.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID ORDER BY TotalSales DESC LIMIT 5;","The generated query does not return the 'CompanyName' field, and does not include a join with the 'orders' table like the ground truth query does.",Base
How many orders were shipped via each shipping company?,"SELECT shippers.CompanyName, COUNT(orders.OrderID) AS order_count FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName","```sql
SELECT orders.ShipVia, COUNT(orders.OrderID) AS order_count
FROM orders
GROUP BY orders.ShipVia
```","The generated query groups by ShipVia ID but does not provide the company names, unlike the ground truth query which joins with the shippers table to display company names.","SELECT shippers.CompanyName, COUNT(orders.OrderID) AS order_count FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",Both the generated and ground truth SQL queries are identical and correctly compute the number of orders shipped via each shipping company by joining the orders and shippers tables and grouping by the company name.,FT
Identify the top 5 products with the highest sales performance based on quantity sold.,"SELECT p.ProductID, SUM(od.Quantity) AS TotalQuantitySold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY TotalQuantitySold DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantitySold
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalQuantitySold DESC
LIMIT 5;
```","The generated query includes 'p.ProductName' in the GROUP BY clause, which may cause different results if multiple products have the same ProductID but different names. The ground truth query does not include this, thus focusing solely on ProductID.","SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName ORDER BY TotalQuantity DESC LIMIT 5;","The generated query lists the product names while the ground truth lists product IDs. Though both queries aim to find the top 5 products by quantity sold, the output fields differ.",None
Determine the most common discount rates used.,"SELECT Discount, COUNT(*) AS Count FROM [Order Details] GROUP BY Discount ORDER BY Count DESC;","```sql
SELECT Discount, COUNT(*) AS DiscountCount
FROM [Order Details]
GROUP BY Discount
ORDER BY DiscountCount DESC;
```","Both queries group by Discount, count occurrences, and order by the count in descending order.","SELECT Discount, COUNT(*) AS Frequency FROM [Order Details] GROUP BY Discount ORDER BY Frequency DESC;",Both queries count the occurrence of each discount rate and order the results in descending order of frequency. The column alias differences do not affect the outcome.,both
Which shipping company has the highest average delay in delivery?,"SELECT ShipVia, AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AverageDelay FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipVia ORDER BY AverageDelay DESC LIMIT 1;","```sql
SELECT ShipVia, AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AverageDelay
FROM orders
WHERE ShippedDate IS NOT NULL
GROUP BY ShipVia
ORDER BY AverageDelay DESC
LIMIT 1;
```","The generated query includes on-time shipments, while the ground truth only considers late shipments.","SELECT ShipVia, AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgDelay FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipVia ORDER BY AvgDelay DESC LIMIT 1;","The generated query includes delays where ShippedDate is before RequiredDate, while the ground truth only considers cases where ShippedDate is after RequiredDate.",None
Which products have been discontinued but still have stock available?,"SELECT ProductName, UnitsInStock FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;","```sql
SELECT ProductID, ProductName, UnitsInStock
FROM products
WHERE Discontinued = 1 AND UnitsInStock > 0;
```","Both queries select products that are discontinued and have units in stock. The only difference is an additional column (ProductID) in the generated query, which does not affect the answer to the user's question.",SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;,"The generated query only selects ProductName, whereas the ground truth query also selects UnitsInStock.",Base
Calculate the total freight cost for all orders shipped to the USA.,SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShipCountry = 'USA';,"```sql
SELECT SUM(Freight) AS TotalFreight
FROM orders
WHERE ShipCountry = 'USA';
```","Both queries calculate the sum of the Freight column for orders where ShipCountry is 'USA', producing the same result.",SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShipCountry = 'USA';,Both queries are identical and accurately calculate the total freight cost for orders shipped to the USA.,both
Which product has the highest number of units on order?,"SELECT p.ProductID, p.UnitsOnOrder FROM products p ORDER BY p.UnitsOnOrder DESC LIMIT 1;","```sql
SELECT ProductID, UnitsOnOrder
FROM products
ORDER BY UnitsOnOrder DESC
LIMIT 1;
```",Both queries are functionally equivalent and will return the product with the highest number of units on order by ordering in descending order and limiting the result to one.,"SELECT ProductName, UnitsOnOrder FROM products ORDER BY UnitsOnOrder DESC FETCH FIRST 1 ROW ONLY;","The generated query selects 'ProductName' instead of 'ProductID', which may lead to different results if 'ProductID' is needed. The core logic of ordering and limiting to one result is correct, so they will likely yield the same row based on 'UnitsOnOrder'.",Base
Which shipping method is used the most?,"SELECT ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1","```sql
SELECT ShipVia, COUNT(*) AS OrderCount
FROM orders
GROUP BY ShipVia
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries group by ShipVia, count the occurrences, and retrieve the method with the highest count, ensuring they yield the same results.","SELECT o.ShipVia, COUNT(o.OrderID) AS Total FROM orders o GROUP BY o.ShipVia ORDER BY Total DESC LIMIT 1",Both queries group by ShipVia and order by the count of orders to find the most used shipping method.,both
Which products have the highest quantities on order?,"SELECT ProductName, UnitsOnOrder FROM products ORDER BY UnitsOnOrder DESC;","```sql
SELECT ProductID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder
FROM products
GROUP BY ProductID
ORDER BY TotalUnitsOnOrder DESC;
```","The generated query summarizes UnitsOnOrder by ProductID, while the ground truth sorts by UnitsOnOrder without aggregation and selects ProductName.","SELECT ProductID, ProductName, UnitsOnOrder FROM products ORDER BY UnitsOnOrder DESC;","Both queries order the products by UnitsOnOrder in descending order to find products with the highest quantities on order, differing only in including the ProductID in the generated query, which does not affect the results.",FT
Which products have the highest sales quantity this month?,"SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m') GROUP BY products.ProductID, products.ProductName ORDER BY TotalQuantity DESC;","```sql
SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
WHERE MONTH(CURRENT_DATE) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(CURRENT_DATE) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH)
GROUP BY products.ProductID, products.ProductName
ORDER BY TotalQuantity DESC;
```","The generated query has a logic error in the WHERE clause, checking the current month against the previous. It should compare the order date's month and year to the current month and year, like the ground truth query.","SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate BETWEEN DATE_TRUNC('month', CURRENT_DATE) AND CURRENT_DATE GROUP BY p.ProductName ORDER BY TotalQuantity DESC;","The generated SQL query uses DATE_TRUNC for date filtering, which might not be supported in all SQL dialects. Furthermore, it checks dates differently from the ground truth query, potentially leading to different results depending on how dates are handled.",None
What is the product-wise breakdown of Total Sales for this year?,"SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY od.ProductID ORDER BY ProductSales DESC;","```sql
SELECT 
    [Order Details].ProductID, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Total_Sales
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE 
    YEAR(orders.OrderDate) = YEAR(CURRENT_DATE)
GROUP BY 
    [Order Details].ProductID
```",Both queries correctly calculate the total sales per product for the current year using similar logic and operations. The addition of 'ORDER BY' in the ground truth query does not affect the accuracy of the generated query in terms of answering the user's question.,"SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductSales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_FORMAT(CURDATE(), '%Y-01-01') GROUP BY od.ProductID;",Both queries calculate the product-wise total sales for the current year and group the results by ProductID. The difference in date filtering logic doesn't affect the outcome for selecting the current year's data.,both
Which region has the highest number of orders?,"SELECT ShipRegion, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipRegion ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT ShipRegion, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY ShipRegion
ORDER BY OrderCount DESC
LIMIT 1;
```","The generated SQL query and the ground truth query are identical in functionality. Both calculate the number of orders per region, sort by descending order count, and limit the result to the top entry, answering the user's question of which region has the highest number of orders.","SELECT ShipRegion, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipRegion ORDER BY NumberOfOrders DESC LIMIT 1;","Both queries group orders by ShipRegion, count OrderID, and return the region with the highest number of orders using ORDER BY and LIMIT 1. The difference in alias names does not affect the result.",both
List the suppliers with products that are consistently ordered.,SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName HAVING COUNT(DISTINCT [Order Details].OrderID) > 1;,"```sql
SELECT DISTINCT s.SupplierID, s.CompanyName
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY s.SupplierID, s.CompanyName
HAVING COUNT(od.Quantity) > 0;
```",The generated query checks for any orders (COUNT > 0). The ground truth checks for multiple unique orders (COUNT(DISTINCT OrderID) > 1) for consistency.,"SELECT s.SupplierID, s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID, s.CompanyName HAVING COUNT(DISTINCT od.OrderID) > 10;","The generated query requires more than 10 distinct orders for a supplier's products, while the ground truth requires more than 1 distinct order.",None
Identify the products that are provided by multiple suppliers.,SELECT P.ProductName FROM products P JOIN (SELECT ProductID FROM products GROUP BY ProductID HAVING COUNT(DISTINCT SupplierID) > 1) AS MultiSupplier ON P.ProductID = MultiSupplier.ProductID;,"```sql
SELECT ProductID, ProductName
FROM products
GROUP BY ProductID, ProductName
HAVING COUNT(DISTINCT SupplierID) > 1;
```","Both queries identify products supplied by multiple suppliers by grouping products and counting distinct suppliers. The structure differs, but results will be the same.",SELECT ProductName FROM products GROUP BY ProductName HAVING COUNT(DISTINCT SupplierID) > 1;,"Both queries identify products supplied by multiple suppliers, using the count of distinct SupplierID to filter products.",both
What are the average sales per order for each employee?,"SELECT E.EmployeeID, AVG(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS AverageSalesPerOrder FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY E.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageSalesPerOrder
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","Both queries calculate the average sales per order for each employee, grouping by EmployeeID. The generated query selects additional columns (FirstName, LastName), but this does not affect the computation of the average sales per order for each employee.","SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgSalesPerOrder FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID","Both queries calculate the average sales per order for each employee by joining employees, orders, and order details tables and aggregating by EmployeeID. They use the same logic to compute sales per order and aggregate it, though they use different alias conventions.",both
Determine the total number of customers who have never placed an order.,SELECT COUNT(CustomerID) AS NeverOrdered FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders);,"```sql
SELECT COUNT(*) AS TotalCustomers
FROM customers
WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders);
```","Both queries count customers who are not in the orders table, thus yielding the same result.",SELECT COUNT(*) FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderID IS NULL;,"Both queries correctly count customers who have never placed an order. The first uses a LEFT JOIN with a NULL check, and the second uses a NOT IN subquery, achieving the same result.",both
How many orders include a discount greater than 20%?,SELECT COUNT(DISTINCT [Order Details].OrderID) AS HighDiscountOrders FROM [Order Details] WHERE [Order Details].Discount > 0.2;,"```sql
SELECT COUNT(DISTINCT OrderID) 
FROM [Order Details] 
WHERE Discount > 0.20;
```","Both queries count the distinct OrderID from the [Order Details] table where the Discount is greater than 0.20, yielding the same results.",SELECT COUNT(DISTINCT o.OrderID) FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE od.Discount > 0.2;,Both queries count distinct orders from [Order Details] with a discount greater than 20%. The join in the generated query does not affect the count of distinct OrderID since it matches directly on OrderID.,both
Which products have less than 10 units in stock and need reordering?,SELECT ProductName FROM products WHERE UnitsInStock < 10 AND UnitsInStock <= ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock < 10 AND UnitsInStock <= ReorderLevel;
```","The generated query includes extra columns: ProductID, UnitsInStock, and ReorderLevel, which are not required in the ground truth query that only selects ProductName.","SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;","The generated query checks if 'UnitsInStock' is less than 'ReorderLevel', while the ground truth checks if 'UnitsInStock' is less than 10 and at or below 'ReorderLevel'. The conditions do not match.",None
What is the average shipping cost per order in 2023?,SELECT AVG(orders.Freight) AS avg_shipping_cost_per_order FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31',"```sql
SELECT AVG(orders.Freight) AS shipping_cost_per_order FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
```","Both queries calculate the average shipping cost per order for the year 2023 using the 'Freight' column and filter by the same date range. The only difference is the alias name, which does not affect the result.",SELECT AVG(orders.Freight) AS shipping_cost_per_order FROM orders WHERE YEAR(orders.OrderDate) = 2023,"Both queries calculate the average 'Freight' for orders in 2023. The generated query uses YEAR() to filter the dates, while the ground truth query uses BETWEEN with specific dates. Both approaches are functionally equivalent for filtering year 2023 orders.",both
Find any correlation between the employees' hire date and their performance in sales.,"SELECT e.EmployeeID, e.HireDate, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.HireDate ORDER BY TotalSales DESC","```sql
SELECT e.HireDate, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.HireDate
ORDER BY e.HireDate;
```","The generated query groups results by HireDate, while the ground truth query groups by both EmployeeID and HireDate, showing individual performance differences.","SELECT e.EmployeeID, (YEAR(CURDATE()) - YEAR(e.HireDate)) AS YearsAtCompany, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.HireDate;","The generated query calculates 'YearsAtCompany,' whereas the ground truth does not. Both queries aggregate sales, but the ground truth orders results by 'TotalSales', which could indicate correlation via sales rank.",None
Calculate the average unit price of all products per supplier.,"SELECT s.CompanyName, AVG(p.UnitPrice) AS AvgUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName;","```sql
SELECT suppliers.SupplierID, suppliers.CompanyName, AVG(products.UnitPrice) AS AverageUnitPrice
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
GROUP BY suppliers.SupplierID, suppliers.CompanyName;
```","Both queries calculate the average unit price of products per supplier. Though the Generated SQL includes SupplierID in the SELECT and GROUP BY clauses, it yields the same results.","SELECT s.SupplierID, AVG(p.UnitPrice) AS AvgUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;","Both queries calculate the average unit price of all products per supplier. The only difference is that one query groups by SupplierID and the other by CompanyName, but the results will be consistent as long as SupplierID uniquely identifies each supplier.",both
Find the correlation between employee hire date and total sales.,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, YEAR(CURDATE()) - YEAR(e.HireDate) AS YearsSinceHire FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","```sql
SELECT 
    (julianday(EmployeeHireDate) - julianday('1970-01-01')) AS HireDateInDays,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM 
    employees
JOIN 
    orders ON employees.EmployeeID = orders.EmployeeID
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    employees.EmployeeID
```","The generated query calculates HireDateInDays and TotalSales but does not explicitly calculate the correlation between them. The ground truth query calculates TotalSales and YearsSinceHire, which aligns better with computing correlation.","SELECT employees.EmployeeID, employees.HireDate, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, employees.HireDate",The generated query finds total sales per employee but lacks correlation analysis and uses HireDate directly instead of calculating years since hire.,None
What percentage of orders were delivered on time this month?,"SELECT COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE);","```sql
SELECT 
    (COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID)) AS OnTimeDeliveryRate
FROM 
    orders
WHERE 
    DATE_TRUNC('month', OrderDate) = DATE_TRUNC('month', CURRENT_DATE);
```","Both queries calculate the percentage of on-time deliveries for orders placed this month using 'OrderDate'. The use of DATE_TRUNC is equivalent, and filtering logic is identical.","SELECT (COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders WHERE DATE_TRUNC('month', OrderDate) = CURRENT_DATE;","The queries have different date criteria. The generated query uses 'DATE_TRUNC('month', OrderDate) = CURRENT_DATE', potentially capturing only the current date this month. The ground truth query uses 'OrderDate >= DATE_TRUNC('month', CURRENT_DATE)', ensuring it covers all orders from the start of the current month. Thus, the queries may yield different results.",Base
Which suppliers are located in 'USA' and how many products do they supply?,"SELECT CompanyName, COUNT(ProductID) FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE Country = 'USA' GROUP BY CompanyName;","```sql
SELECT s.CompanyName, COUNT(p.ProductID) AS NumberOfProducts
FROM suppliers s
LEFT JOIN products p ON s.SupplierID = p.SupplierID
WHERE s.Country = 'USA'
GROUP BY s.SupplierID, s.CompanyName;
```","Both queries correctly identify suppliers located in 'USA' and count the number of products they supply. The generated query uses a LEFT JOIN, while the ground truth uses an INNER JOIN, but since we're filtering by supplier location, the results will be identical as only suppliers from 'USA' are considered.","SELECT suppliers.CompanyName, COUNT(products.ProductID) AS NumberOfProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE suppliers.Country = 'USA' GROUP BY suppliers.CompanyName;","Both queries accurately answer the user's question and produce the same results. They select supplier names and count their products, filtering by suppliers located in 'USA', and group by supplier names.",both
Which employee has the most orders shipped on time?,"SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OnTimeOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY employees.EmployeeID ORDER BY OnTimeOrders DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OnTimeOrders
FROM orders
WHERE DATEDIFF(ShippedDate, RequiredDate) <= 0
GROUP BY EmployeeID
ORDER BY OnTimeOrders DESC
LIMIT 1;
```","The generated query does not join the 'employees' and 'orders' tables, potentially missing employees without orders in results. Also, it uses 'DATEDIFF', which is unnecessary when comparing dates directly as in the ground truth.","SELECT e.EmployeeID, COUNT(o.OrderID) AS OnTimeOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate <= o.RequiredDate GROUP BY e.EmployeeID ORDER BY OnTimeOrders DESC;","The generated query does not limit the result to only the top employee, while the ground truth query includes a LIMIT 1 clause.",None
Which are the top 5 products by sales revenue?,"SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS ProductSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY ProductSales DESC LIMIT 5;","```sql
SELECT 
    [Order Details].ProductID, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM 
    [Order Details]
JOIN 
    orders ON [Order Details].OrderID = orders.OrderID
GROUP BY 
    [Order Details].ProductID
ORDER BY 
    TotalRevenue DESC
LIMIT 5;
```",Both queries calculate the total sales revenue per product and return the top 5 products by revenue. The JOIN with 'orders' in the generated query does not alter the result as it's irrelevant to the revenue calculation.,"SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductRevenue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY od.ProductID ORDER BY ProductRevenue DESC FETCH FIRST 5 ROWS ONLY;",Both queries calculate the same product revenue by summing the sales for each product and ordering the results to get the top 5. The difference in syntax (LIMIT vs FETCH FIRST) and the join with 'orders' does not affect the outcome since no order-specific data is used in the calculation.,both
Calculate the average fulfillment time for shipped orders.,"SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.ShippedDate IS NOT NULL","```sql
SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS average_fulfillment_time FROM orders WHERE ShippedDate IS NOT NULL;
```",Both queries calculate the average difference between the shipped and order dates for records where the shipped date is not null. They yield the same result.,"SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.ShippedDate IS NOT NULL;",The generated SQL query accurately answers the user's question. Both queries calculate the average fulfillment time for orders with a shipped date using the DATEDIFF function and filter out orders with a NULL shipped date.,both
What was the most common order month for new customers?,"SELECT EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, COUNT(o.CustomerID) AS NewCustomerCount FROM orders o JOIN customers c ON o.CustomerID = c.CustomerID WHERE o.OrderDate = c.RegisterDate GROUP BY OrderMonth ORDER BY NewCustomerCount DESC LIMIT 1;","```sql
SELECT EXTRACT(YEAR FROM o.OrderDate) AS OrderYear, EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, COUNT(o.OrderID) AS OrderCount
FROM orders o
JOIN customers c ON o.CustomerID = c.CustomerID
WHERE o.OrderDate = (SELECT MIN(OrderDate) FROM orders WHERE CustomerID = o.CustomerID)
GROUP BY OrderYear, OrderMonth
ORDER BY OrderCount DESC
LIMIT 1;
```","The generated SQL checks for the first order date per customer, not the customer's registration date like the ground truth query. This might yield different most common order months.","SELECT EXTRACT(MONTH FROM OrderDate) AS OrderMonth, COUNT(OrderID) AS TotalOrders FROM orders WHERE OrderDate BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY OrderMonth ORDER BY TotalOrders DESC LIMIT 1;","The generated query counts orders by month for all customers within a year, while the ground truth query counts orders by month only for those orders made on the same day the customer registered.",None
What is the customer lifetime value for customers in the USA?,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Country = 'USA' GROUP BY customers.CustomerID","```sql
SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN customers ON orders.CustomerID = customers.CustomerID 
WHERE customers.Country = 'USA' 
GROUP BY customers.CustomerID
```","The generated SQL query and the ground truth SQL query are identical in functionality. Both calculate the customer lifetime value for customers in the USA, using the same selection criteria and calculation method.","SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Country = 'USA' GROUP BY customers.CustomerID","The generated SQL query matches the ground truth SQL query exactly, both in structure and logic. They both calculate the customer lifetime value for customers in the USA.",both
Which product has the highest total sales revenue?,SELECT ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY SUM([Order Details].Quantity * [Order Details].UnitPrice) DESC LIMIT 1;,"```sql
SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSalesRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductName
ORDER BY TotalSalesRevenue DESC
LIMIT 1;
```",Both queries calculate the total sales revenue for each product and return the product with the highest revenue.,"SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSales DESC FETCH FIRST 1 ROW ONLY","The generated SQL query includes a discount factor in the calculation of total sales revenue, whereas the ground truth query does not account for any discounts.",Base
What percentage of orders have a shipping address in the 'California' region?,SELECT (COUNT(OrderID) FILTER (WHERE ShipRegion = 'California') * 100.0 / COUNT(OrderID)) AS PercentageInCalifornia FROM orders;,"```sql
SELECT 
    (COUNT(CASE WHEN ShipRegion = 'California' THEN 1 END) * 100.0 / COUNT(*)) AS PercentageOfOrdersInCalifornia
FROM 
    orders;
```",Both queries calculate the percentage of orders with 'California' as the shipping region using similar approaches.,SELECT (COUNT(OrderID) * 100.0 / (SELECT COUNT(*) FROM orders)) AS CaliforniaOrderPercentage FROM orders WHERE ShipRegion = 'California';,"Both queries calculate the percentage of orders with a shipping address in 'California' by dividing the count of such orders by the total number of orders. They handle the logic correctly, even though the syntax differs.",both
Which suppliers provide products that have been ordered more than 100 times?,SELECT SupplierID FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY SupplierID HAVING COUNT(od.ProductID) > 100;,"```sql
SELECT DISTINCT p.SupplierID
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.SupplierID
HAVING SUM(od.Quantity) > 100;
```",The generated query uses SUM(od.Quantity) while the ground truth uses COUNT(od.ProductID). They measure different things: total quantity vs. number of orders.,SELECT SupplierID FROM [Order Details] GROUP BY SupplierID HAVING SUM(Quantity) > 100;,The generated query only considers the quantity of each order and might incorrectly sum the quantities across fewer order instances. The ground truth query correctly counts the number of orders for each supplier.,None
Which shipping method had the highest number of delays in the last quarter?,"SELECT ShipVia, COUNT(*) AS Delays FROM orders WHERE ShippedDate > RequiredDate AND TO_CHAR(OrderDate, 'YYYY-Q') = TO_CHAR(DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months', 'YYYY-Q') GROUP BY ShipVia ORDER BY Delays DESC LIMIT 1;","```sql
SELECT ShipVia, COUNT(OrderID) AS DelayedOrders
FROM orders
WHERE ShippedDate > RequiredDate AND OrderDate >= DATEADD(QUARTER, -1, GETDATE())
GROUP BY ShipVia
ORDER BY DelayedOrders DESC
LIMIT 1;
```","The generated query calculates delays for the previous quarter based on the current date minus one quarter, which could include parts of two quarters depending on the current date. The ground truth query accurately identifies the delays in the exact last quarter using date truncation and quarter intervals.","SELECT ShipVia, COUNT(*) AS DelayCount FROM orders WHERE ShippedDate > RequiredDate AND ShippedDate BETWEEN DATEADD(QUARTER, -1, CURRENT_DATE) AND CURRENT_DATE GROUP BY ShipVia ORDER BY DelayCount DESC LIMIT 1;","The generated query uses 'ShippedDate BETWEEN DATEADD(QUARTER, -1, CURRENT_DATE) AND CURRENT_DATE', which captures the last three months from today rather than the last quarter. The ground truth query correctly calculates the last quarter using 'TO_CHAR(OrderDate, 'YYYY-Q')'.",None
Analyze the impact of employee birth month on sales performance.,"SELECT e.EmployeeID, MONTH(e.BirthDate) AS BirthMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, MONTH(e.BirthDate);","```sql
SELECT 
    MONTH(BirthDate) AS BirthMonth,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM 
    employees
JOIN 
    orders ON employees.EmployeeID = orders.EmployeeID
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    MONTH(BirthDate)
ORDER BY 
    BirthMonth;
```","The generated query groups by BirthMonth only, aggregating sales across all employees born in the same month. The ground truth query groups both by EmployeeID and BirthMonth, leading to results that differentiate sales performance by individual employees' birth months.","SELECT e.BirthMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.BirthMonth;","The generated query groups by BirthMonth only, whereas the ground truth groups by both EmployeeID and BirthMonth, potentially giving different results.",None
What is the total freight cost for each shipping country?,"SELECT orders.ShipCountry, SUM(orders.Freight) AS TotalFreight FROM orders GROUP BY orders.ShipCountry","```sql
SELECT ShipCountry, SUM(Freight) AS TotalFreight
FROM orders
GROUP BY ShipCountry;
```","Both queries perform the same aggregation on the 'orders' table, grouping by 'ShipCountry' and summing up 'Freight'. The use of table aliases in the ground truth query does not affect the output.","SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;","Both queries select the shipping country and calculate the total freight cost grouped by shipping country, yielding the same results.",both
What was the average order value each month?,"SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_TRUNC('month', orders.OrderDate);","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    Month
ORDER BY 
    Month;
```","The generated query calculates the average order value by dividing the sum of order values by the count of distinct order IDs, which is incorrect. It should compute the sum of values for a month divided by the number of orders in that month, which is what the ground truth query achieves by using DATE_TRUNC to group and sum correctly.","SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Year, Month","Both queries calculate the average order value each month by summing the product of unit price, quantity, and discount and dividing by the distinct number of orders per month. Although they use different methods for date extraction (EXTRACT vs. DATE_TRUNC), they produce equivalent results.",FT
What is the average shipping cost per order for each shipping method?,"SELECT ShipVia, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, AVG(Freight) AS AverageShippingCost
FROM orders
GROUP BY ShipVia;
```",Both queries calculate the average freight cost per shipping method using ShipVia to group and AVG(Freight) to compute the average. Differences are only in naming conventions.,"SELECT ShipVia, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipVia;",Both the generated SQL query and the ground truth SQL query are identical and correctly calculate the average shipping cost per order for each shipping method by grouping on ShipVia and averaging the Freight.,both
Identify the top 5 customers by order count.,"SELECT CustomerID, COUNT(*) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 5;","```sql
SELECT CustomerID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY CustomerID
ORDER BY OrderCount DESC
LIMIT 5;
```","Both queries count orders per customer, group by CustomerID, order by the count in descending order, and limit the result to the top 5.","SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 5;",Both queries count the number of orders per customer and sort them in descending order to retrieve the top 5 customers. They will produce the same results.,both
What is the average time taken from order placement to shipment for each employee?,"SELECT employees.EmployeeID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageShippingTime FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;","```sql
SELECT 
    e.EmployeeID, 
    e.FirstName, 
    e.LastName, 
    AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageShippingTime
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
WHERE 
    o.ShippedDate IS NOT NULL
GROUP BY 
    e.EmployeeID, e.FirstName, e.LastName;
```",Both queries calculate the average time from order placement to shipment per employee and correctly handle shipped orders. Differences in selected columns do not affect the outcome of the average calculation.,"```sql
SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageShippingTime
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.ShippedDate IS NOT NULL
GROUP BY e.EmployeeID;
```","Both queries calculate the average time between order placement and shipment for each employee using valid logic. The only difference is the inclusion of a check for non-null ShippedDate in the generated query, which ensures accuracy by excluding pending shipments.",both
Which suppliers deliver products to the most diverse set of countries?,"SELECT s.SupplierID, COUNT(DISTINCT o.ShipCountry) AS CountryCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID ORDER BY CountryCount DESC;","```sql
SELECT s.SupplierID, s.CompanyName, COUNT(DISTINCT o.ShipCountry) AS CountryCount
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN orders o ON p.ProductID = o.ProductID
GROUP BY s.SupplierID, s.CompanyName
ORDER BY CountryCount DESC;
```","The generated query joins 'orders' directly with 'products', while the ground truth query joins 'orders' through 'Order Details', which affects the results.","SELECT s.SupplierID, COUNT(DISTINCT o.ShipCountry) AS DiversityScore FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID ORDER BY DiversityScore DESC;",Both queries calculate the number of distinct countries each supplier delivers to and order the results in descending order. The column alias doesn't affect the logic or outcome.,FT
Which city has the highest number of supplier contacts?,"SELECT City, COUNT(ContactName) AS ContactCount FROM suppliers GROUP BY City ORDER BY ContactCount DESC LIMIT 1;","```sql
SELECT City, COUNT(*) AS SupplierContactCount
FROM suppliers
GROUP BY City
ORDER BY SupplierContactCount DESC
LIMIT 1;
```",Both queries accurately determine the city with the highest number of supplier contacts by counting rows per city and ordering them.,"SELECT City, COUNT(SupplierID) AS ContactCount FROM suppliers GROUP BY City ORDER BY ContactCount DESC LIMIT 1;","Both queries group by 'City' and count entries per city. They order the results by the count in descending order and limit to the top result. Although they count different columns (SupplierID vs. ContactName), as long as both columns uniquely identify contacts, the result will be the same.",both
How many products have a stock higher than their reorder level?,SELECT COUNT(*) FROM products WHERE UnitsInStock > ReorderLevel;,"```sql
SELECT COUNT(*) AS ProductsAboveReorderLevel
FROM products
WHERE UnitsInStock > ReorderLevel;
```",Both queries count the number of products where UnitsInStock is greater than ReorderLevel. The naming of the count column does not affect the result.,SELECT COUNT(*) AS CountOfProducts FROM products WHERE UnitsInStock > ReorderLevel;,"Both queries calculate the count of products where UnitsInStock is greater than ReorderLevel, yielding the same result.",both
How many orders has each employee processed?,"SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;","```sql
SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount
FROM employees e
LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID;
```",Both queries join employees with orders based on EmployeeID and group by EmployeeID to count the number of orders processed. The queries achieve the same result despite different alias usage.,"SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;","The generated SQL query uses an INNER JOIN, which will exclude employees with no orders, while the ground truth uses a LEFT JOIN, which will include all employees, even those with zero orders.",Base
Discover products sold in quantities exceeding 1000 units per month.,SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity) > 1000;,"```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantity
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
HAVING SUM(od.Quantity) > 1000
```",Both queries group by ProductName and identify products whose total quantity sold exceeds 1000 units. The difference in columns selected does not affect the correctness.,"SELECT ProductName FROM (SELECT ProductName, SUM([Order Details].Quantity) AS TotalSold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName) AS ProductSales WHERE TotalSold > 1000;","The generated SQL query checks for totals exceeding 1000 units overall, not per month, whereas the ground truth query correctly checks the monthly condition.",Base
Which country had the highest average order value last year?,"SELECT Country, AVG(TotalOrderValue) AS AverageOrderValue FROM (SELECT orders.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalOrderValue, customers.Country FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY orders.OrderID, customers.Country) AS CountryOrderAverages GROUP BY Country ORDER BY AverageOrderValue DESC LIMIT 1;","```sql
SELECT c.Country, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) - 1
GROUP BY c.Country
ORDER BY AverageOrderValue DESC
LIMIT 1;
```",Both queries calculate the average order value per country for the previous year and select the country with the highest average. The logic for computing the order value and applying the year condition is consistent across both queries.,"SELECT ShipCountry, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY ShipCountry ORDER BY AvgOrderValue DESC LIMIT 1;","The generated query calculates the average based on Shipping Country, while the ground truth calculates on Customer Country. Additionally, the date filters differ.",Base
What is the total sales revenue for each product?,"SELECT P.ProductName, SUM(OD.Quantity * OD.UnitPrice) AS TotalRevenue FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID GROUP BY P.ProductName;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSalesRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName;
```","Both queries calculate the total sales revenue for each product by summing the product of quantity and unit price. They use the same joins and aggregate functions, only differing in selected columns and grouping. Results are the same.","SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSalesRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",The generated SQL query and the ground truth query both calculate the total sales revenue for each product by joining the 'products' table with the 'Order Details' table using 'ProductID' and aggregating the revenue using SUM. The queries are logically equivalent.,both
Which city has the highest number of unique customers?,"SELECT City, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM customers GROUP BY City ORDER BY UniqueCustomers DESC LIMIT 1;","```sql
SELECT City, COUNT(DISTINCT CustomerID) AS UniqueCustomerCount
FROM customers
GROUP BY City
ORDER BY UniqueCustomerCount DESC
LIMIT 1;
```","The generated SQL query and the ground truth query both count the distinct CustomerID grouped by City, order the results in descending order based on the count, and limit the output to one row. They will yield the same result.","SELECT City, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM customers GROUP BY City ORDER BY UniqueCustomers DESC LIMIT 1;",The generated SQL query accurately answers the user's question and matches the ground truth query; both return the city with the highest number of unique customers.,both
How many distinct products are ordered in each country?,"SELECT Country, COUNT(DISTINCT [Order Details].ProductID) AS DistinctProducts FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY Country;","```sql
SELECT c.Country, COUNT(DISTINCT od.ProductID) AS DistinctProducts
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.Country;
```",Both queries group by 'Country' and count distinct 'ProductID' for each country. The JOIN order differs but results are the same.,"SELECT ShipCountry, COUNT(DISTINCT ProductID) AS DistinctProducts FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCountry;","The generated query uses 'ShipCountry' from the 'orders' table, while the ground truth query derives 'Country' from the 'customers' table. These may reference different fields, leading to potentially different results depending on how countries are recorded in each table.",Base
Identify employees who have never handled an order in a specific region.,SELECT employees.EmployeeID FROM employees WHERE NOT EXISTS (SELECT 1 FROM orders WHERE orders.EmployeeID = employees.EmployeeID AND orders.ShipRegion = 'SpecificRegion'),"```sql
SELECT e.EmployeeID, e.FirstName, e.LastName
FROM employees e
LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND o.ShipRegion = 'specific_region'
WHERE o.OrderID IS NULL;
```",Both queries correctly identify employees who have never handled an order in the specified region by using LEFT JOIN in one query and NOT EXISTS in the other.,"SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID LEFT JOIN (SELECT DISTINCTShipping.Region FROM orders Shipping) r ON o.ShipRegion = r.Region WHERE o.OrderID IS NULL OR r.Region IS NULL GROUP BY EmployeeID;","The generated query attempts to use a LEFT JOIN to identify employees without orders in any region, but it incorrectly assumes the presence of a 'Shipping.Region' from a nested query. It does not filter orders by a 'specific region' as the ground truth does, which looks for employees with no orders in a specific region using a NOT EXISTS clause.",Base
What is the average fulfillment time for orders shipped in the last month?,"SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE ShippedDate BETWEEN DATEADD(MONTH, -1, CURRENT_DATE) AND CURRENT_DATE","```sql
SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM orders
WHERE ShippedDate >= DATEADD(MONTH, -1, CURRENT_DATE);
```","The generated query checks if ShippedDate is after ``DATEADD(MONTH, -1, CURRENT_DATE)``, but does not ensure it is before or on CURRENT_DATE like the ground truth query.","SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE ShippedDate BETWEEN DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND DATE_TRUNC('month', CURRENT_DATE)","The generated query's date range includes the entire previous month, but the ground truth query includes only the last month from the current date.",None
Which suppliers provide the most products by quantity?,"SELECT s.SupplierID, SUM(od.Quantity) AS TotalQuantity FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY TotalQuantity DESC;","```sql
SELECT p.SupplierID, COUNT(p.ProductID) AS ProductCount
FROM products p
GROUP BY p.SupplierID
ORDER BY ProductCount DESC;
```","The generated query counts the number of products each supplier offers, while the ground truth query sums the quantities of products supplied by each supplier.","SELECT SupplierID, COUNT(ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID ORDER BY NumberOfProducts DESC;","The generated query counts the number of products each supplier provides, not the total quantity of products supplied. The ground truth query correctly sums the quantities from order details.",None
What is the sales trend over the last 6 months for each employee?,"SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalSales, EXTRACT(MONTH FROM o.OrderDate) as SalesMonth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -6, CURRENT_DATE) GROUP BY e.EmployeeID, SalesMonth ORDER BY e.EmployeeID, SalesMonth;","```sql
SELECT 
    e.EmployeeID, 
    e.FirstName, 
    e.LastName, 
    DATE_FORMAT(o.OrderDate, '%Y-%m') AS SalesMonth, 
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    employees e
LEFT JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
LEFT JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
WHERE 
    o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)
GROUP BY 
    e.EmployeeID, SalesMonth
ORDER BY 
    e.EmployeeID, SalesMonth;
```","The generated SQL query uses LEFT JOINs, increasing the chance of including employees with no sales in the last 6 months, while the ground truth uses INNER JOINs. They could yield different results because of this. Also, the date filtering functions differ, affecting compatibility depending on SQL dialect.","SELECT e.EmployeeID, DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY e.EmployeeID, DATE_FORMAT(o.OrderDate, '%Y-%m') ORDER BY e.EmployeeID, Month;","The generated query uses DATE_FORMAT for grouping by month, while the ground truth uses EXTRACT(MONTH). The generated query includes CURDATE(), and the ground truth uses CURRENT_DATE which might not yield the same date boundary results. Also, the generated query does not include employee names.",None
What is the average discount given on orders?,SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details];
```",The generated SQL query accurately answers the user's question and yields the same results as the ground truth query. Both queries calculate the average discount from the 'Order Details' table.,SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details];,"Both queries calculate the average discount from the Order Details table, disregarding the bracket notation in the generated query.",both
Which product has the most units on order?,"SELECT products.ProductID, products.ProductName, products.UnitsOnOrder FROM products ORDER BY products.UnitsOnOrder DESC LIMIT 1","```sql
SELECT ProductID, UnitsOnOrder 
FROM products 
ORDER BY UnitsOnOrder DESC 
LIMIT 1;
```","The generated query omits the ProductName field, while the ground truth query includes it.","SELECT products.ProductName, products.UnitsOnOrder FROM products ORDER BY products.UnitsOnOrder DESC LIMIT 1;","Both queries aim to find the product with the most units on order, ordering by UnitsOnOrder in descending order and limiting the result to one. The difference in selected columns does not affect the answer to the user's question.",FT
Are there any suppliers with discontinued products only?,SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID HAVING COUNT(products.ProductID) = COUNT(CASE WHEN products.Discontinued = 1 THEN 1 END);,"```sql
SELECT s.SupplierID, s.CompanyName
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
GROUP BY s.SupplierID, s.CompanyName
HAVING COUNT(CASE WHEN p.Discontinued = 0 THEN 1 END) = 0;
```","Both queries check for suppliers whose products are all marked as discontinued. The generated query achieves this by ensuring the count of non-discontinued products is zero, which matches the ground truth logic.","SELECT suppliers.SupplierID, suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID, suppliers.CompanyName HAVING COUNT(CASE WHEN products.Discontinued = 0 THEN 1 END) = 0;","Both queries check for suppliers whose products are all discontinued. The generated SQL uses a CASE for non-discontinued products and checks for zero count, while the ground truth counts discontinued products and compares totals. Both yield the same result.",both
What is the percentage of orders that were shipped late?,SELECT (COUNT(*) FILTER (WHERE ShippedDate > RequiredDate)::FLOAT / COUNT(*)) * 100 AS LateShipmentPercentage FROM orders;,"```sql
SELECT 
    (COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) * 100.0 / COUNT(*)) AS LateShippedPercentage
FROM 
    orders;
```",Both queries calculate the percentage of orders shipped late by comparing 'ShippedDate' and 'RequiredDate'. They use different syntax but achieve the same result.,SELECT COUNT(o.OrderID) * 100.0 / (SELECT COUNT(*) FROM orders) AS LateOrderPercentage FROM orders o WHERE o.ShippedDate > o.RequiredDate;,"Both queries calculate the percentage of orders shipped late by dividing the count of late shipments by total orders, then multiplying by 100.",both
Find the average shipping time for orders handled by each employee.,"SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NOT NULL GROUP BY e.EmployeeID;","```sql
SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageShippingTime
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.ShippedDate IS NOT NULL
GROUP BY e.EmployeeID;
```",The generated SQL query and the ground truth query both compute the average shipping time per employee using the same logic and conditions.,"```sql
SELECT e.EmployeeID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgShippingTime
FROM employees e
JOIN orders ON e.EmployeeID = orders.EmployeeID
WHERE orders.ShippedDate IS NOT NULL
GROUP BY e.EmployeeID;
```",Both queries calculate the average shipping time for orders by each employee using the DATEDIFF function and join the employees and orders tables correctly. The differences in table aliases and formatting do not affect the result.,both
Which orders have a discount greater than 20% and who manages them?,"SELECT o.OrderID, e.FirstName, e.LastName FROM orders o JOIN employees e ON o.EmployeeID = e.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0.2;","```sql
SELECT o.OrderID, o.OrderDate, o.Freight, e.FirstName, e.LastName
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
JOIN employees e ON o.EmployeeID = e.EmployeeID
WHERE od.Discount > 0.2;
```",Both queries filter orders with discounts greater than 20% and join with employees to list the manager's first and last names. The differences in selected columns do not affect the main criteria.,"SELECT o.OrderID, e.EmployeeID, e.FirstName, e.LastName FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID JOIN employees e ON o.EmployeeID = e.EmployeeID WHERE od.Discount > 0.20","Both queries retrieve orders with a discount greater than 20% and the employees who manage them, although the generated query includes an additional EmployeeID column.",both
Which city received the most shipments?,"SELECT ShipCity, COUNT(OrderID) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 1;","```sql
SELECT ShipCity, COUNT(*) AS ShipmentCount
FROM orders
GROUP BY ShipCity
ORDER BY ShipmentCount DESC
LIMIT 1;
```","Both queries count the number of shipments per city and order the cities to find the one with the most shipments, using a similar approach to achieve the same result.","SELECT ShipCity, COUNT(OrderID) AS ShipmentCount FROM orders GROUP BY ShipCity ORDER BY ShipmentCount DESC LIMIT 1;",Both queries correctly count the number of orders per city and select the city with the highest count.,both
What is the total number of different products sold to date?,SELECT COUNT(DISTINCT ProductID) AS UniqueProductsSold FROM [Order Details];,"```sql
SELECT COUNT(DISTINCT ProductID) AS TotalDifferentProductsSold
FROM [Order Details];
```","Both queries count the distinct ProductID entries in the [Order Details] table, thus answering the user's question the same way.",SELECT COUNT(DISTINCT ProductID) AS TotalProductsSold FROM [Order Details];,"Both queries count distinct ProductID values in the [Order Details] table, fulfilling the user's request.",both
Which month had the highest total sales revenue this year?,"SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY Month ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE 
    YEAR(OrderDate) = YEAR(CURDATE())
GROUP BY 
    Month
ORDER BY 
    TotalSales DESC
LIMIT 1;
```","Both queries calculate the total sales revenue per month for the current year and then find the month with the highest total sales. The main differences are in the date formatting functions used, but the logic and results are equivalent.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY Month ORDER BY TotalSales DESC LIMIT 1","The generated SQL query uses DATE_FORMAT which is specific to MySQL, while the ground truth query uses DATE_TRUNC which is standard SQL. If executed in a PostgreSQL-like database, the generated query may not work as expected.",Base
Identify the top 5 customers with the highest spending.,"SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSpent FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID ORDER BY TotalSpent DESC LIMIT 5","```sql
SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSpending
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY CustomerID
ORDER BY TotalSpending DESC
LIMIT 5;
```","Both queries correctly aggregate spending per customer and order by the total spending in descending order, limiting the result to the top 5 customers. The alias names and format might differ, but the logic and output are the same.","SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSpent FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID ORDER BY TotalSpent DESC LIMIT 5","The syntax used for limiting results is incorrect in standard SQL. Instead of LIMIT 5, it should be FETCH FIRST 5 ROWS ONLY or equivalent.",Base
Which city receives the most shipments?,"SELECT ShipCity, COUNT(*) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC;","```sql
SELECT ShipCity, COUNT(OrderID) AS ShipmentCount
FROM orders
GROUP BY ShipCity
ORDER BY ShipmentCount DESC
LIMIT 1;
```","Both queries aim to find the city with the most shipments. The generated query uses COUNT(OrderID), which should yield the same count as COUNT(*). The LIMIT 1 clause ensures only the city with the highest count is returned, matching the intended output of the ground truth query.","SELECT ShipCity, COUNT(*) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC;","Both queries group the orders by ShipCity, count the number of shipments, and order by the count descending. They will yield the same result.",both
How many products have never been ordered?,SELECT COUNT(products.ProductName) FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].ProductID IS NULL;,"```sql
SELECT COUNT(*) AS Products_Never_Ordered
FROM products
WHERE ProductID NOT IN (
    SELECT DISTINCT ProductID
    FROM [Order Details]
);
```","Both queries count the products that have no corresponding entries in the 'Order Details' table, achieving the same result.",SELECT COUNT(ProductID) FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"Both queries count products where the ProductID does not appear in the Order Details table, effectively identifying unordered products.",both
Determine the total number of products that are overstocked.,SELECT COUNT(*) AS OverstockedCount FROM products WHERE UnitsInStock > (ReorderLevel + UnitsOnOrder);,"```sql
SELECT COUNT(*) AS OverstockedProducts
FROM products
WHERE UnitsInStock > ReorderLevel;
```","The generated query checks if UnitsInStock is greater than ReorderLevel, while the ground truth query checks if UnitsInStock is greater than the sum of ReorderLevel and UnitsOnOrder.",SELECT COUNT(*) AS OverstockedProductCount FROM products WHERE UnitsInStock > ReorderLevel;,"The generated query checks if UnitsInStock is greater than ReorderLevel, while the ground truth query checks if UnitsInStock is greater than the sum of ReorderLevel and UnitsOnOrder. They do not yield the same results.",None
Calculate the total sales for each product.,"SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] GROUP BY ProductID;","```sql
SELECT 
    [Order Details].ProductID,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM 
    [Order Details]
GROUP BY 
    [Order Details].ProductID;
```",Both queries calculate the total sales for each product using the same formula and group by ProductID.,"SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] GROUP BY [Order Details].ProductID;","Both queries calculate the total sales per product by multiplying unit price, quantity, and discount, and then grouping by ProductID.",both
Analyze the correlation between unit price and units ordered for the products.,"SELECT p.ProductName, CORR(p.UnitPrice, od.Quantity) AS PriceQuantityCorrelation FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;","```sql
SELECT p.UnitPrice, SUM(od.Quantity) AS TotalUnitsOrdered
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.UnitPrice
```","The generated query calculates total units ordered per unit price, lacking correlation analysis. The ground truth calculates correlation between unit price and quantity ordered for each product.","SELECT products.ProductID, corr([Order Details].UnitPrice, [Order Details].Quantity) AS PriceQuantityCorrelation FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;","The generated query calculates the correlation on each ProductID but only includes the ProductID in the select clause, while the ground truth query includes the ProductName as well. This could lead to different interpretations if ProductID does not uniquely identify the product.",None
Which suppliers have shipped orders on time this year?,SELECT DISTINCT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.ShippedDate) = YEAR(CURRENT_DATE) AND orders.RequiredDate >= orders.ShippedDate;,"```sql
SELECT DISTINCT s.SupplierID, s.CompanyName
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) 
AND o.ShippedDate <= o.RequiredDate;
```",Both queries identify suppliers who shipped orders on or before the required date within the current year. The differences in syntax do not affect the final result.,"SELECT s.SupplierID, s.CompanyName FROM suppliers s INNER JOIN products p ON s.SupplierID = p.SupplierID INNER JOIN [Order Details] od ON p.ProductID = od.ProductID INNER JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.ShippedDate) = YEAR(CURDATE()) AND o.ShippedDate <= o.RequiredDate GROUP BY s.SupplierID, s.CompanyName;","Both queries check for suppliers who shipped orders on time this year by ensuring the shipped date is within this year and on or before the required date. Despite differences in structure such as grouping vs distinct, they yield the same result.",both
What is the average order fulfillment time for each employee?,"SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY EmployeeID;","```sql
SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY EmployeeID;
```","The generated SQL query and the ground truth SQL query are identical in logic and structure, both calculating the average order fulfillment time for each employee.","SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EmployeeID","Both queries calculate the average order fulfillment time for each employee and will yield the same results, despite a slight difference in the alias name for the calculated column.",both
Find out the monthly average units in stock for each product.,"SELECT p.ProductName, EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, AVG(p.UnitsInStock) AS AverageMonthlyStock FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, Year, Month;","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    AVG(p.UnitsInStock) AS AverageUnitsInStock
FROM 
    products p
GROUP BY 
    p.ProductID, 
    p.ProductName
```","The generated query averages UnitsInStock over all records without considering monthly partitioning, while the ground truth query computes monthly averages using OrderDate.","SELECT p.ProductID, p.ProductName, AVG(p.UnitsInStock) AS MonthlyAvgStock FROM products p GROUP BY p.ProductID, p.ProductName;","The generated SQL does not calculate the average units in stock on a monthly basis, as it lacks the logic to group data by year and month. It simply averages over all product units across all data without considering time periods.",None
How many late shipments were there each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, COUNT(OrderID) AS LateShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY OrderMonth;","```sql
SELECT 
    DATE_FORMAT(orders.ShippedDate, '%Y-%m') AS Month,
    COUNT(orders.OrderID) AS LateShipments
FROM 
    orders
WHERE 
    orders.ShippedDate > orders.RequiredDate
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries group shipments by month and count late shipments, using either ShippedDate or OrderDate for monthly aggregation. This does not affect the outcome as they both filter by ShippedDate being greater than RequiredDate.","SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(OrderID) AS LateShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');","Both queries group the count of late shipments by month using different date formatting functions (TO_CHAR and DATE_FORMAT), but they achieve the same result.",both
What's the average discount applied to product orders?,SELECT AVG(Discount) FROM [Order Details];,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details];
```",Both queries calculate the average discount from the 'Order Details' table and yield the same result.,SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];,Both queries calculate the average discount from the 'Order Details' table despite one having an alias for the result.,both
What is the total freight cost by region over the last year?,"SELECT ShipRegion, SUM(Freight) AS TotalFreight FROM orders WHERE OrderDate >= DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '1 year' GROUP BY ShipRegion;","```sql
SELECT ShipRegion, SUM(Freight) AS TotalFreightCost
FROM orders
WHERE OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE)
GROUP BY ShipRegion;
```","The generated query calculates the freight cost for the past 365 days, while the ground truth calculates for the previous calendar year.","SELECT YEAR(orders.ShipDate) AS Year, orders.ShipRegion, SUM(orders.Freight) AS TotalFreight FROM orders WHERE orders.ShipDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY YEAR(orders.ShipDate), orders.ShipRegion;","The generated query groups by both year and region, while the ground truth query groups only by region. Additionally, the generated query uses ShipDate, unlike the ground truth query's OrderDate.",None
What is the most common shipping method?,"SELECT ShipVia, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipVia ORDER BY NumberOfOrders DESC LIMIT 1;","```sql
SELECT ShipVia, COUNT(*) AS ShippingCount
FROM orders
GROUP BY ShipVia
ORDER BY ShippingCount DESC
LIMIT 1;
```","Both queries count the number of orders for each shipping method and return the most common one, using the COUNT function and ordering by the count in descending order, then limiting to the top result.","SELECT orders.ShipVia, COUNT(orders.OrderID) AS MethodCount FROM orders GROUP BY orders.ShipVia ORDER BY MethodCount DESC LIMIT 1;","Both queries select ShipVia, count orders, group by ShipVia, and order by count descending with a limit of 1. They yield the same result.",both
List the orders that were fulfilled late.,SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;,"```sql
SELECT *
FROM orders
WHERE ShippedDate > RequiredDate;
```","The generated SQL query retrieves all columns, while the ground truth query only retrieves the OrderID column.",SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;,Both queries are identical and correctly fulfill the task of listing orders that were shipped after the required date.,FT
What percentage of orders were delivered on time in the last quarter?,SELECT SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE QUARTER(orders.OrderDate) = (QUARTER(CURDATE()) - 1) AND YEAR(orders.OrderDate) = YEAR(CURDATE()),"```sql
SELECT (COUNT(orders.OrderID) FILTER (WHERE orders.ShippedDate <= orders.RequiredDate) * 100.0 / COUNT(orders.OrderID)) AS on_time_delivery_rate
FROM orders
WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30'
```","The generated query uses a static date range, whereas the ground truth query dynamically calculates the last quarter based on the current date.","SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '3 month') AND LAST_DAY(DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '1 month')))","The generated SQL query incorrectly calculates the last quarter using DATE_TRUNC and LAST_DAY, while the ground truth query correctly uses QUARTER() and CURDATE(). Also, the generated query calculates the percentage differently and has a potential syntax error with an extra parenthesis.",None
What is the total freight cost incurred in each country?,"SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;","```sql
SELECT ShipCountry, SUM(Freight) AS TotalFreightCost
FROM orders
GROUP BY ShipCountry;
```","Both queries compute the same total freight cost for each country by grouping on ShipCountry and summing Freight. The difference is only in the alias naming, which does not affect the result.","SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;","Both queries select ShipCountry and calculate the sum of Freight, grouping by ShipCountry. The alias for SUM(Freight) differs but does not affect the result.",both
What is the total number of unique products ordered?,SELECT COUNT(DISTINCT ProductID) FROM [Order Details];,"```sql
SELECT COUNT(DISTINCT ProductID) AS UniqueProductsOrdered
FROM [Order Details];
```","Both queries count the distinct ProductID from the Order Details table, achieving the same result.",SELECT COUNT(DISTINCT ProductID) FROM [Order Details];,Both the generated and ground truth SQL queries are identical and correctly calculate the total number of unique products ordered by counting distinct ProductID from the 'Order Details' table.,both
What is the distribution of orders shipped per region each month?,"SELECT DATE_TRUNC('month', ShippedDate) AS Month, ShipRegion, COUNT(OrderID) AS OrdersShipped FROM orders GROUP BY Month, ShipRegion;","```sql
SELECT 
    YEAR(OrderDate) AS Year,
    MONTH(OrderDate) AS Month,
    ShipRegion,
    COUNT(OrderID) AS OrdersShipped
FROM 
    orders
GROUP BY 
    YEAR(OrderDate), 
    MONTH(OrderDate), 
    ShipRegion
ORDER BY 
    Year, 
    Month, 
    ShipRegion;
```","The generated query is grouping by OrderDate instead of ShippedDate, which might yield different results if orders and shipments occur in different months.","SELECT DATE_FORMAT(orders.ShippedDate, '%Y-%m') AS OrderMonth, ShipRegion, COUNT(OrderID) AS OrderCount FROM orders GROUP BY OrderMonth, ShipRegion;","Both queries group orders by month and region, counting the number of orders, despite differences in date formatting functions.",FT
How many orders were placed each month?,"SELECT COUNT(OrderID) AS OrderCount, EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month FROM orders GROUP BY Year, Month;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY OrderMonth
ORDER BY OrderMonth;
```",Both queries count the number of orders per month and order them by month. The DATE_FORMAT function in the generated query and the EXTRACT function in the ground truth query achieve the same grouping by year and month.,"SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EXTRACT(YEAR FROM OrderDate), EXTRACT(MONTH FROM OrderDate);","Both queries group by year and month and count orders, yielding the same result.",both
What is the on-time delivery rate for each shipping method?,"SELECT ShipVia, ROUND(100.0 * SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID), 2) AS OnTimeDeliveryRate FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, 
       COUNT(OrderID) AS TotalOrders, 
       COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveries,
       COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate
FROM orders
GROUP BY ShipVia;
```","Both queries calculate the on-time delivery rate for each shipping method by using the COUNT of orders delivered on or before the required date divided by the total number of orders. The generated query provides additional details on total orders and on-time deliveries, but the on-time delivery rate calculation is equivalent.","SELECT ShipVia, SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipVia;","Both queries calculate the on-time delivery rate by dividing the number of on-time shipments by the total number of orders for each shipping method. The difference lies only in the rounding, which doesn't affect the correctness of the result.",both
Which category of products has generated the most revenue?,"SELECT CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY CategoryID ORDER BY TotalRevenue DESC;","```sql
SELECT products.CategoryID, 
       SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY products.CategoryID
ORDER BY TotalRevenue DESC
LIMIT 1;
```","The generated query limits the result to one row, while the ground truth query does not, possibly yielding different results.","SELECT products.CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.CategoryID ORDER BY TotalRevenue DESC LIMIT 1;","The generated query considers discounts when calculating total revenue, while the ground truth does not.",None
What are the total sales for each product over the last year?,"SELECT products.ProductName, SUM([Order Details].Quantity * (1 - [Order Details].Discount) * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= DATEADD(YEAR, -1, GETDATE()))
GROUP BY p.ProductID, p.ProductName
```","The generated SQL doesn't account for discounts and filters on the last year, whereas the ground truth query includes discounts but not the date filter.","SELECT p.ProductID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= DATEADD(year, -1, CURRENT_DATE) GROUP BY p.ProductID;","The generated SQL query calculates total sales without considering discounts and only for the last year, while the ground truth query includes discounts and considers all data. Additionally, the generated query groups by ProductID instead of ProductName.",None
Which orders had the highest freight costs?,"SELECT o.OrderID, o.Freight FROM orders o ORDER BY o.Freight DESC;","```sql
SELECT OrderID, Freight
FROM orders
ORDER BY Freight DESC
LIMIT 1;
```","The generated query limits the result to only one order with the highest freight, while the ground truth lists all orders sorted by freight in descending order without limiting the number of results.","SELECT OrderID, Freight FROM orders ORDER BY Freight DESC LIMIT 5;","The generated query limits the result to the top 5 orders, while the ground truth query retrieves all orders with highest freight costs without a limit.",None
Which employee made the highest sales in July 2023?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-07-31' GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN employees ON orders.EmployeeID = employees.EmployeeID 
WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-07-31' 
GROUP BY employees.EmployeeID 
ORDER BY total_sales DESC 
LIMIT 1
```","The generated SQL query is identical to the ground truth query, both effectively calculate the employee with the highest sales for July 2023.","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE MONTH(orders.OrderDate) = 7 AND YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1
```","Both queries accurately determine the employee with the highest sales in July 2023 by calculating total sales per employee within the specified month and ordering the results to find the top performer. The date filtering methods differ, but they yield the same results.",both
Identify products due for reorder based on their reorder level and current stock.,"SELECT ProductID, ProductName FROM products WHERE UnitsInStock <= ReorderLevel;","```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock <= ReorderLevel;
```","Both queries return products due for reorder by checking if UnitsInStock is less than or equal to ReorderLevel. The generated query includes UnitsInStock and ReorderLevel in the SELECT clause, but this does not affect the correctness of the answer to the user's question.",SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;,The generated query excludes 'Discontinued = 0' condition present in the ground truth query and returns only 'ProductName' instead of both 'ProductID' and 'ProductName'.,Base
Which shipping company has the highest average cost per shipment?,"SELECT ShipVia, AVG(Freight) AS AverageCost FROM orders GROUP BY ShipVia ORDER BY AverageCost DESC LIMIT 1","```sql
SELECT ShipVia, AVG(Freight) AS AverageCost
FROM orders
GROUP BY ShipVia
ORDER BY AverageCost DESC
LIMIT 1;
```","The generated query correctly calculates the average freight cost per shipping company, orders them in descending order, and limits the result to the highest, matching the ground truth query.","SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipVia ORDER BY AvgFreight DESC LIMIT 1;","Both queries select the same columns, calculate the average freight cost per shipping company, and order by this average in descending order, limiting to one result.",both
What is the percentage of total sales contributed by each supplier?,"SELECT suppliers.SupplierID, (SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID)) * 100 AS supplier_sales_percentage FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID;","```sql
SELECT suppliers.SupplierID, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS supplier_sales,
       (SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / 
       (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) FROM [Order Details])) * 100 AS percentage_of_total_sales
FROM [Order Details] 
JOIN products ON [Order Details].ProductID = products.ProductID 
JOIN suppliers ON products.SupplierID = suppliers.SupplierID 
GROUP BY suppliers.SupplierID;
```","Both queries calculate the percentage of total sales for each supplier by aggregating sales and dividing by the total sales, providing equivalent results.","SELECT suppliers.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) FROM [Order Details]) * 100 AS sales_contribution FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID",Both queries calculate the percentage of total sales for each supplier using similar logic and table joins. The difference in inner subquery placement does not affect the result.,both
What is the retention rate for January 2023?,"SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' THEN orders.CustomerID END) * 1.0) / (NULLIF(COUNT(DISTINCT CASE WHEN orders.OrderDate < '2023-01-01' THEN orders.CustomerID END), 0)) AS RetentionRate FROM orders;","```sql
SELECT 
    COUNT(DISTINCT o2.CustomerID) * 1.0 / COUNT(DISTINCT o1.CustomerID) AS RetentionRate
FROM 
    orders o1
LEFT JOIN 
    orders o2 ON o1.CustomerID = o2.CustomerID AND o2.OrderDate BETWEEN '2023-01-01' AND '2023-01-31'
WHERE 
    o1.OrderDate < '2023-01-01';
```",Both queries calculate the retention rate by counting distinct CustomerIDs who ordered in January 2023 and dividing by those who ordered before January 2023. They yield equivalent logic despite different structures.,"SELECT (COUNT(DISTINCT CASE WHEN OrderDate BETWEEN '2023-01-01' AND '2023-01-31' THEN CustomerID END) / NULLIF(COUNT(DISTINCT CASE WHEN OrderDate < '2023-01-01' THEN CustomerID END), 0)) * 100 AS RetentionRate FROM orders;",The generated and ground truth queries calculate the retention rate for January 2023 by dividing the number of distinct customers who ordered in January 2023 by the number of distinct customers who ordered before January 2023. Both queries are functionally equivalent.,both
What is the lifetime value of each customer?,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID","```sql
SELECT 
    customers.CustomerID,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CustomerLifetimeValue
FROM 
    customers
JOIN 
    orders ON customers.CustomerID = orders.CustomerID
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    customers.CustomerID
```","Both queries calculate the lifetime value of each customer using the same logic and structure, grouping by CustomerID and summing up the product of UnitPrice, Quantity, and adjusted Discount from order details.","SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;","Both queries join the customers, orders, and order details tables correctly, aggregating sales data using SUM on the same expression to calculate LifetimeValue for each CustomerID, with correct grouping.",both
Identify suppliers whose lead time is reducing over the last six months.,"SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN CURRENT_DATE - INTERVAL '6 MONTH' AND CURRENT_DATE GROUP BY suppliers.SupplierID HAVING AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) < (SELECT AVG(DATEDIFF(o2.ShippedDate, o2.OrderDate)) FROM orders o2 JOIN [Order Details] od2 ON o2.OrderID = od2.OrderID JOIN products p2 ON od2.ProductID = p2.ProductID WHERE p2.SupplierID = suppliers.SupplierID AND o2.OrderDate BETWEEN CURRENT_DATE - INTERVAL '1 YEAR' AND CURRENT_DATE - INTERVAL '6 MONTH');","```sql
SELECT s.SupplierID, s.CompanyName
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN orders o ON p.ProductID = o.ProductID
WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)
GROUP BY s.SupplierID, s.CompanyName
HAVING AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) < (
    SELECT AVG(DATEDIFF(o2.ShippedDate, o2.OrderDate))
    FROM suppliers s2
    JOIN products p2 ON s2.SupplierID = p2.SupplierID
    JOIN orders o2 ON p2.ProductID = o2.ProductID
    WHERE o2.OrderDate < DATE_SUB(CURDATE(), INTERVAL 6 MONTH)
)
```",The generated query does not correctly compare the average lead time over two different 6-month periods for each supplier. It incorrectly uses a global subquery rather than comparing previous 6-month average lead times per supplier.,"SELECT s.SupplierID, s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.ShippedDate IS NOT NULL AND o.OrderDate > DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY s.SupplierID, s.CompanyName ORDER BY s.SupplierID;",The generated query does not compute or compare lead times; it just lists suppliers with recent orders. The ground truth query calculates average lead times over two intervals and checks for reduction.,None
Who are the top 5 employees generating the most sales this year?,"SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName ORDER BY sales DESC LIMIT 5","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN employees ON orders.EmployeeID = employees.EmployeeID 
WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) 
GROUP BY employees.EmployeeID 
ORDER BY employee_sales DESC 
LIMIT 5
```","The generated query does not include employee names, which may affect interpretation, but otherwise it will yield the correct top 5 employees by sales similar to the ground truth query.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 5","The generated query uses CURDATE() to get the current year, which is dynamic, whereas the ground truth query uses 2023, which is static. This could yield different results if the current year changes.",None
Which orders have a fulfillment time greater than 30 days?,"SELECT o.OrderID FROM orders o WHERE DATEDIFF(o.ShippedDate, o.OrderDate) > 30;","```sql
SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTime
FROM orders
WHERE DATEDIFF(ShippedDate, OrderDate) > 30;
```","Both queries filter orders based on fulfillment time greater than 30 days, although they select different columns, the condition remains the same.","SELECT o.OrderID FROM orders o WHERE DATEDIFF(o.ShippedDate, o.OrderDate) > 30",Both queries correctly select orders with a fulfillment time greater than 30 days. They use the same logic: DATEDIFF on ShippedDate and OrderDate.,both
Which employee managed the most orders last month?,"SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE() - INTERVAL 1 MONTH, '%Y-%m') GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month')
  AND OrderDate < DATE_TRUNC('month', CURRENT_DATE)
GROUP BY EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```",Both queries filter orders from the previous month and select the employee with the highest order count. They use different methods to determine the date range but will produce the same result.,"SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE MONTH(OrderDate) = LAST_MONTH AND YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;","The generated query uses LAST_MONTH, which is not a valid SQL function. It also possibly assumes a function to get last month without defining it correctly. The ground truth query uses a valid method to determine the previous month by subtracting an interval from the current date.",Base
Which products are most frequently ordered with a discount?,"SELECT ProductID, COUNT(OrderID) AS TimesOrdered FROM [Order Details] WHERE Discount > 0 GROUP BY ProductID ORDER BY TimesOrdered DESC;","```sql
SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity
FROM [Order Details] od
WHERE od.Discount > 0
GROUP BY od.ProductID
ORDER BY TotalQuantity DESC;
```","The generated query calculates the total quantity of products ordered with a discount, while the ground truth counts the number of distinct orders in which the products were ordered with a discount.","SELECT od.ProductID, COUNT(od.ProductID) AS Frequency FROM [Order Details] od WHERE od.Discount > 0 GROUP BY od.ProductID ORDER BY Frequency DESC;",Both queries count the number of times each product is ordered with a discount and order the results by frequency. The difference in alias names (Frequency vs. TimesOrdered) does not affect the result.,FT
What is the most shipped product in terms of quantity?,"SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 1;","```sql
SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY products.ProductName
ORDER BY TotalQuantity DESC
LIMIT 1;
```","Both queries calculate the total quantity of each product shipped, group by product name, and order by the total quantity in descending order to find the highest. The difference in the queries is the inclusion of an unnecessary join with the 'orders' table in the generated query, which does not affect the outcome.","SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalShippedQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalShippedQuantity DESC LIMIT 1;",Both queries calculate the total quantity shipped per product and select the one with the highest total. They differ only in aliasing and naming but yield the same result.,both
"Which product had the most orders, and how many were ordered?","SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 1;","```sql
SELECT OrderDetails.ProductID, COUNT(OrderDetails.OrderID) AS TotalOrders
FROM [Order Details] AS OrderDetails
GROUP BY OrderDetails.ProductID
ORDER BY TotalOrders DESC
LIMIT 1;
```","The generated query counts the number of orders for each product, while the ground truth query sums the quantity ordered for each product. They answer different questions.","SELECT od.ProductID, COUNT(DISTINCT od.OrderID) AS OrderCount FROM [Order Details] od GROUP BY od.ProductID ORDER BY OrderCount DESC LIMIT 1;","The generated query counts the number of distinct orders per product, whereas the ground truth query sums the quantities ordered for each product. These queries answer different questions.",None
Which products have been discontinued?,SELECT ProductName FROM products WHERE Discontinued = 1;,"```sql
SELECT ProductID, ProductName
FROM products
WHERE Discontinued = 1;
```","The generated query selects 'ProductID' in addition to 'ProductName', whereas the ground truth query selects only 'ProductName'.",SELECT ProductName FROM products WHERE Discontinued = 1;,Both queries are identical and correctly filter for products where the 'Discontinued' column is set to 1.,FT
Which employee has handled the highest number of orders?,"SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries calculate the highest number of orders handled by an employee by counting OrderID and return the top result, ordered by the count in descending order and limited to one result. The difference in alias naming (OrderCount vs TotalOrders) does not affect the result.","SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",Both queries count orders per employee and return the employee with the most orders. Column alias differences ('OrderCount' vs. 'TotalOrders') don't affect the result.,both
What is the total freight cost per shipping method this month?,"SELECT o.ShipVia, SUM(o.Freight) AS TotalFreightCost FROM orders o WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) GROUP BY o.ShipVia;","```sql
SELECT ShipVia, SUM(Freight) AS TotalFreightCost
FROM orders
WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE()) AND YEAR(OrderDate) = YEAR(CURRENT_DATE())
GROUP BY ShipVia;
```","Both queries compute the total freight cost by shipping method for the current month. The generated SQL uses functions to match the current month and year, while the ground truth query uses DATE_TRUNC to get the start of the current month. Both approaches yield the same result.","SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders WHERE DATE_PART('month', OrderDate) = DATE_PART('month', CURRENT_DATE) AND DATE_PART('year', OrderDate) = DATE_PART('year', CURRENT_DATE) GROUP BY ShipVia;","Both queries accurately calculate the total freight cost per shipping method for the current month. The first uses DATE_PART to match the year and month, while the second uses DATE_TRUNC to ensure dates are from the current month onwards. Both approaches yield equivalent results.",both
What is the total revenue for each product category?,"SELECT p.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.CategoryID;","```sql
SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalRevenue
FROM [Order Details]
GROUP BY ProductID
```","The generated query groups by ProductID, not by Product CategoryID, which is needed to find the total revenue per product category.","```sql
SELECT products.CategoryID, products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.CategoryID, products.ProductName ORDER BY TotalRevenue DESC;
```","The generated SQL groups by CategoryID and ProductName, which leads to revenue per product, not category. The ground truth correctly groups by CategoryID, providing total revenue per category.",None
Determine the total quantity of products on order for each supplier.,"SELECT s.SupplierName, SUM(p.UnitsOnOrder) FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.UnitsOnOrder > 0 GROUP BY s.SupplierName;","```sql
SELECT p.SupplierID, SUM(p.UnitsOnOrder) AS TotalQuantityOnOrder
FROM products p
GROUP BY p.SupplierID;
```",The generated query does not filter out products with zero units on order and does not include supplier names.,"SELECT SupplierID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY SupplierID;","The generated query omits suppliers without products on order and does not handle cases where UnitsOnOrder is zero, unlike the ground truth query.",None
Which orders had the highest total discount applied?,"SELECT OrderID, SUM(Discount * UnitPrice * Quantity) AS TotalDiscount FROM [Order Details] GROUP BY OrderID ORDER BY TotalDiscount DESC LIMIT 1;","```sql
SELECT OrderID, SUM(Discount) AS TotalDiscount
FROM [Order Details]
GROUP BY OrderID
ORDER BY TotalDiscount DESC
LIMIT 1;
```","The generated query sums only the Discount column, while the ground truth query multiplies Discount by UnitPrice and Quantity to calculate the total discount per order.","SELECT OrderID, SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details] GROUP BY OrderID ORDER BY TotalDiscount DESC LIMIT 1",Both queries calculate the sum of discounts per order and order the results in descending order to find the highest total discount. The ordering of multiplication doesn't affect the result.,FT
Which products need to be reordered based on current levels?,SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;
```","The generated query includes 'ProductID' and 'Discontinued' filtering, while the ground truth query does not. This can lead to different results.",SELECT ProductName FROM products WHERE UnitsInStock + UnitsOnOrder <= ReorderLevel AND Discontinued = 0;,"The generated query considers both 'UnitsInStock' and 'UnitsOnOrder' to determine if a reorder is needed, whereas the ground truth query only considers 'UnitsInStock'. Additionally, the generated query checks if 'Discontinued' is 0, which is not part of the ground truth query.",None
Which employee handles the most valuable products by unit price?,"SELECT e.FirstName, e.LastName FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID ORDER BY od.UnitPrice DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, od.UnitPrice
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
ORDER BY od.UnitPrice DESC
LIMIT 1;
```","The generated query does not join the 'products' table and incorrectly selects 'EmployeeID', leading to potentially incorrect results. The ground truth query includes the 'products' table, ensuring unit prices are accurately linked to products.","SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalProductValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalProductValue DESC LIMIT 1;",The generated query calculates the total value associated with each employee and returns the one with the highest total value. The ground truth query returns the employee who handles the product with the highest unit price. They address different criteria.,None
Which product generated the most revenue this quarter?,"SELECT ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductRevenue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE QUARTER(o.OrderDate) = QUARTER(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY ProductID ORDER BY ProductRevenue DESC LIMIT 1;","```sql
SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM [Order Details] od
JOIN orders o ON od.OrderID = o.OrderID
WHERE o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) AND o.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) + INTERVAL '3 month'
GROUP BY od.ProductID
ORDER BY TotalRevenue DESC
LIMIT 1;
```","Both queries accurately calculate the revenue for each product of the current quarter, sort by revenue, and return the product with the highest revenue. The methods to determine the current quarter differ but yield the same result.","SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= '2023-07-01' AND o.OrderDate < '2023-10-01' GROUP BY od.ProductID ORDER BY Revenue DESC LIMIT 1;","The generated query uses static date values for the quarter, while the ground truth query calculates the current quarter dynamically, relying on the current date.",Base
Which shipping company handled the most orders in USD value in Q2 2023?,"SELECT shippers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_shipping_value FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY shippers.CompanyName ORDER BY total_shipping_value DESC;","```sql
SELECT shippers.CompanyName, 
       SUM(orders.Freight + ([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) AS total_value
FROM orders 
JOIN shippers ON orders.ShipVia = shippers.ShipperID 
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID 
WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30'
GROUP BY shippers.CompanyName 
ORDER BY total_value DESC 
LIMIT 1;
```","The generated SQL includes 'Freight' in the total calculation, which the ground truth does not. This causes a discrepancy in the total shipping values.","SELECT shippers.CompanyName, COUNT(orders.OrderID) AS order_count FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY shippers.CompanyName ORDER BY SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) DESC LIMIT 1",The generated query counts orders instead of summing the order values in USD. It also incorrectly limits the results and does not match the user's requirement to find the total value.,None
What is the average age of employees at the time of hire?,"SELECT AVG((CAST(JULIANDAY(employees.HireDate) - JULIANDAY(employees.BirthDate)) / 365.25 AS DECIMAL(5, 2))) AS AverageAgeAtHire FROM employees","```sql
SELECT AVG(YEAR(HireDate) - YEAR(BirthDate)) AS AverageAgeAtHire
FROM employees;
```","The generated query calculates the difference in years using YEAR function, ignoring month and day accuracy, while the ground truth query calculates an accurate age difference in days divided by 365.25 to account for leap years.","SELECT employees.EmployeeID, YEAR(HireDate) - YEAR(BirthDate) AS AgeAtHire FROM employees;","The generated SQL query calculates 'AgeAtHire' for each employee but does not compute an average, whereas the ground truth query computes the average age at the time of hire for all employees.",None
What is the total number of units sold by each employee?,"SELECT e.EmployeeID, SUM(od.Quantity) AS TotalUnits FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","```sql
SELECT e.EmployeeID, SUM(od.Quantity) AS TotalUnitsSold
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
```","Both queries calculate the total units sold by each employee by joining the same tables and grouping by EmployeeID, thus yielding the same results.","SELECT e.EmployeeID, SUM(od.Quantity) AS TotalUnitsSold FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",Both queries calculate the total number of units sold by each employee. The difference in column alias does not affect the results.,both
What is the total number of units in stock for each product category?,"SELECT CategoryID, SUM(UnitsInStock) AS TotalUnitsInStock FROM products GROUP BY CategoryID;","```sql
SELECT products.CategoryID, SUM(products.UnitsInStock) AS TotalUnitsInStock
FROM products
GROUP BY products.CategoryID;
```",The generated SQL query and the ground truth SQL query produce the same result and correctly answer the user's question by grouping the products by CategoryID and summing the UnitsInStock for each category.,"SELECT c.CategoryID, SUM(p.UnitsInStock) AS TotalUnitsInStock FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",Both queries calculate the total units in stock for each product category by aggregating UnitsInStock and grouping by CategoryID. The JOIN in the generated query is unnecessary but does not affect the outcome since it doesn't alter the totals.,both
What is the total number of products sold to each country?,"SELECT orders.ShipCountry, SUM([Order Details].Quantity) AS TotalProductsSold FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipCountry;","```sql
SELECT o.ShipCountry, SUM(od.Quantity) AS TotalProductsSold
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY o.ShipCountry;
```",Both queries calculate the total number of products sold per country by joining the 'orders' and '[Order Details]' tables and grouping by the 'ShipCountry'. The differences in table aliases do not affect the outcome.,"SELECT ShipCountry, SUM([Order Details].Quantity) AS TotalProductsSold FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry;","Both queries group by ShipCountry from the orders table and sum the Quantity from [Order Details], yielding the same results.",both
List the top 5 products by sales revenue.,"SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS SalesRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY SalesRevenue DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS SalesRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY SalesRevenue DESC
LIMIT 5;
```","Both queries compute the total sales revenue for each product and list the top 5 by sales revenue. The differences in the queries, such as including ProductID in the SELECT and GROUP BY clauses, do not affect the outcome of the user question.","SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName ORDER BY TotalSales DESC FETCH FIRST 5 ROWS ONLY;","Both queries calculate total sales revenue for each product and return the top 5 products ordered by sales revenue. The primary difference is in the column selection (ProductID in the generated query) and the use of FETCH FIRST vs. LIMIT, but this does not affect the result.",both
What is the total freight cost by shipping method?,"SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, SUM(Freight) AS TotalFreightCost
FROM orders
GROUP BY ShipVia;
```","Both queries calculate the total freight cost grouped by the shipping method, differing only in the alias used for the SUM(Freight) result.","SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",The generated query accurately answers the user's question. Both queries calculate the total freight cost grouped by shipping method (ShipVia) and yield the same results despite differing in alias naming.,both
What is the total sales value for each product?,"SELECT products.ProductID, ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID, ProductName ORDER BY TotalSales DESC;","```sql
SELECT products.ProductID, products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY products.ProductID, products.ProductName
```",Both queries calculate the total sales value for each product correctly. The minor differences like join order and the ORDER BY clause do not affect the result set.,"SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) as TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;","Both queries calculate the total sales per product using the same formula and group by product name. The generated query does not order the results, and it groups only by ProductName instead of ProductID and ProductName, but it still provides total sales per product accurately.",both
Which employee's orders have the highest average discount applied?,"SELECT E.EmployeeID, AVG(OD.Discount) AS AverageDiscount FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY E.EmployeeID ORDER BY AverageDiscount DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.Discount) AS AverageDiscount
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
ORDER BY AverageDiscount DESC
LIMIT 1;
```",Both queries calculate the highest average discount per employee and return the EmployeeID of the employee with the highest average discount.,"SELECT employees.EmployeeID, AVG([Order Details].Discount) AS AvgDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY AvgDiscount DESC LIMIT 1;","Both queries calculate the average discount per employee and return the employee with the highest average discount, using identical logic and table relationships.",both
Calculate the average discount applied to orders in the last 3 months.,"SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)","```sql
SELECT AVG(Discount) AS average_discount 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate >= DATEADD(MONTH, -3, GETDATE())
```","Both queries calculate the average discount for orders in the last 3 months. The difference lies in the SQL functions used for date calculation, but they achieve the same outcome.","SELECT AVG(od.Discount) FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -3, CURRENT_DATE)","Both queries calculate the average discount on orders from the last 3 months, using appropriate date functions and joining on OrderID.",both
Which supplier has the most units in stock across all their products?,SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID ORDER BY SUM(products.UnitsInStock) DESC LIMIT 1;,"```sql
SELECT s.CompanyName, SUM(p.UnitsInStock) AS TotalUnitsInStock
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
GROUP BY s.SupplierID
ORDER BY TotalUnitsInStock DESC
LIMIT 1;
```",Both queries calculate the total units in stock for each supplier and order the results to return the supplier with the highest stock.,"SELECT suppliers.CompanyName, SUM(products.UnitsInStock) AS TotalUnitsInStock FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY TotalUnitsInStock DESC LIMIT 1;","Both queries are functionally equivalent as they identify the supplier with the most units in stock across all products, using an aggregate sum and ordering by it in descending order, then limiting to one result.",both
What is the inventory turnover ratio for February 2023?,SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28',"```sql
SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio 
FROM [Order Details] 
JOIN products ON [Order Details].ProductID = products.ProductID 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28'
```","The generated SQL query is identical to the ground truth SQL query, hence it accurately answers the user's question and will yield the same results.","SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) AS inventory_turnover_ratio FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE EXTRACT(MONTH FROM orders.OrderDate) = 2 AND EXTRACT(YEAR FROM orders.OrderDate) = 2023 GROUP BY products.ProductID","The generated query includes a GROUP BY clause that alters the aggregation logic, and it uses NULLIF to handle division by zero, which changes the result. Additionally, the filtering method for February 2023 orders differs between queries.",Base
What are the total sales for each product in the current month?,"SELECT P.ProductName, SUM(OD.Quantity * OD.UnitPrice) AS TotalSales FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID WHERE DATE_FORMAT(CURDATE(), '%Y-%m') = DATE_FORMAT(CURRENT_DATE(), '%Y-%m') GROUP BY P.ProductName;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE MONTH(CURRENT_DATE) = MONTH(od.OrderID) AND YEAR(CURRENT_DATE) = YEAR(od.OrderID)
GROUP BY p.ProductID, p.ProductName;
```","The generated query sums the quantity of products, whereas the ground truth query calculates total sales using both quantity and unit price.","SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE DATE_TRUNC('month', CURRENT_DATE) = DATE_TRUNC('month', o.OrderDate) GROUP BY p.ProductName;","The generated SQL query references 'o.OrderDate' without joining the 'orders' table, unlike the ground truth query.",None
Which products have the highest inventory turnover ratio?,"SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY turnover_ratio DESC","```sql
SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio 
FROM [Order Details] 
JOIN products ON [Order Details].ProductID = products.ProductID 
GROUP BY products.ProductID, products.ProductName 
ORDER BY inventory_turnover_ratio DESC;
```","The generated SQL query includes the column ProductID in the SELECT and GROUP BY clauses, while the ground truth query does not. This could lead to different results because the GROUP BY conditions are not identical.","SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID ORDER BY inventory_turnover_ratio DESC","The generated query uses ProductID, whereas the ground truth query uses ProductName for grouping and output. This indicates a difference in focus on attributes.",None
Which shipping company handled the most deliveries in 2023?,"SELECT shippers.CompanyName, COUNT(orders.OrderID) AS num_deliveries FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY shippers.CompanyName ORDER BY num_deliveries DESC LIMIT 1","```sql
SELECT shippers.CompanyName, COUNT(orders.OrderID) AS delivery_count
FROM orders
JOIN shippers ON orders.ShipVia = shippers.ShipperID
WHERE YEAR(orders.ShippedDate) = 2023
GROUP BY shippers.CompanyName
ORDER BY delivery_count DESC
LIMIT 1;
```","The generated query filters by the year of the 'ShippedDate', while the ground truth uses 'OrderDate' within the year 2023. They may produce different results if certain orders placed in 2023 are shipped in other years or vice versa.","SELECT shippers.CompanyName, COUNT(orders.OrderID) AS delivery_count FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY shippers.CompanyName ORDER BY delivery_count DESC LIMIT 1","Both queries correctly join orders and shippers, filter for 2023 orders, group by CompanyName, and limit the result to the shipper with the most deliveries.",FT
Determine the busiest month for orders.,"SELECT EXTRACT(MONTH FROM OrderDate) AS OrderMonth, COUNT(OrderID) AS MonthlyOrders FROM orders GROUP BY OrderMonth ORDER BY MonthlyOrders DESC LIMIT 1;","```sql
SELECT EXTRACT(YEAR FROM OrderDate) AS OrderYear, EXTRACT(MONTH FROM OrderDate) AS OrderMonth, COUNT(OrderID) AS TotalOrders
FROM orders
GROUP BY OrderYear, OrderMonth
ORDER BY TotalOrders DESC
LIMIT 1;
```","The generated query considers both year and month, while the ground truth only considers the month. This might affect the outcome if the same month has different order totals across multiple years.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY Month ORDER BY TotalOrders DESC LIMIT 1;",The generated query extracts year and month together while the ground truth query extracts only the month. This could lead to different interpretations of 'busiest month' if the dataset spans multiple years.,None
Which cities do the top three suppliers operate from?,SELECT suppliers.City FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.City ORDER BY COUNT(DISTINCT products.SupplierID) DESC LIMIT 3;,"```sql
SELECT City
FROM suppliers
WHERE SupplierID IN (
    SELECT DISTINCT SupplierID
    FROM products
    ORDER BY SupplierID -- Assuming SupplierID indicates performance
    LIMIT 3
);
```","The generated query uses SupplierID in an incorrect context to find top suppliers. It assumes ordering by SupplierID correlates to performance, which is not guaranteed. The ground truth query counts distinct suppliers per city and orders by this count to find the top cities.","SELECT suppliers.CompanyName, suppliers.City FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName, suppliers.City ORDER BY COUNT(products.ProductID) DESC LIMIT 3;","The generated query orders by product count per supplier, while the ground truth orders by distinct supplier count per city.",None
What is the longest time taken to fulfill an order?,"SELECT MAX(DATEDIFF(ShippedDate, OrderDate)) AS LongestFulfillmentTime FROM orders;","```sql
SELECT MAX(DATEDIFF(ShippedDate, OrderDate)) AS Longest_Fulfillment_Time
FROM orders;
```","Both queries calculate the same result by finding the maximum difference between ShippedDate and OrderDate in the 'orders' table, using DATEDIFF.","SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL ORDER BY FulfillmentTime DESC LIMIT 1;","Both queries are evaluating the difference between ShippedDate and OrderDate to determine the longest fulfillment time. The generated SQL sorts and limits the result to one, effectively achieving the same outcome as using MAX in the ground truth.",both
What is the total freight cost incurred for orders handled by each employee?,"SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(o.Freight) AS TotalFreight
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","The generated SQL query and the ground truth SQL query both calculate the total freight cost incurred for orders handled by each employee. The generated query includes additional columns for the employee's first and last names, which does not alter the result of the total freight calculation grouped by EmployeeID.","SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;","Both queries are identical and accurately calculate the total freight cost for each employee, grouped by EmployeeID.",both
What is the average monthly sales growth for each product?,"SELECT p.ProductName, AVG(CASE WHEN LAG(SUM(od.Quantity), 1) OVER (PARTITION BY p.ProductID ORDER BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate)) = 0 THEN NULL ELSE (SUM(od.Quantity) - LAG(SUM(od.Quantity), 1) OVER (PARTITION BY p.ProductID ORDER BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate))) / LAG(SUM(od.Quantity), 1) OVER (PARTITION BY p.ProductID ORDER BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate)) END) AS AvgSalesGrowth FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, p.ProductName, EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate);","```sql
SELECT 
    products.ProductID, 
    products.ProductName,
    AVG(monthly_sales.sales) AS AverageMonthlySalesGrowth
FROM (
    SELECT 
        ProductID, 
        SUM(Quantity) AS sales,
        DATE_FORMAT(OrderDate, '%Y-%m') AS sale_month
    FROM 
        [Order Details] 
    JOIN orders ON [Order Details].OrderID = orders.OrderID
    GROUP BY 
        ProductID, sale_month
) AS monthly_sales
JOIN products ON monthly_sales.ProductID = products.ProductID
GROUP BY 
    products.ProductID, products.ProductName;
```","The generated query calculates the average sales per month for each product, not the average growth. The ground truth query calculates growth by comparing each month's sales to the previous month's using LAG.","SELECT p.ProductID, AVG((SUM(od.Quantity * od.UnitPrice) - LAG(SUM(od.Quantity * od.UnitPrice)) OVER (PARTITION BY p.ProductID ORDER BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate))) / LAG(SUM(od.Quantity * od.UnitPrice)) OVER (PARTITION BY p.ProductID ORDER BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate))) * 100) AS AvgMonthlySalesGrowth FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID;","The generated query uses SUM(od.Quantity * od.UnitPrice) for sales calculation, while the ground truth uses SUM(od.Quantity). The grouping in the generated query is only by ProductID, while the ground truth includes year and month to calculate monthly growth.",None
How does the sales quantity of each product compare month over month?,"SELECT ProductName, EXTRACT(MONTH FROM OrderDate) AS Month, SUM([Order Details].Quantity) AS MonthlyQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ProductName, EXTRACT(MONTH FROM OrderDate) ORDER BY ProductName, EXTRACT(MONTH FROM OrderDate);","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    DATE_FORMAT(o.OrderDate, '%Y-%m') AS SaleMonth, 
    SUM(od.Quantity) AS TotalQuantity
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
JOIN 
    orders o ON od.OrderID = o.OrderID
GROUP BY 
    p.ProductID, SaleMonth
ORDER BY 
    p.ProductID, SaleMonth;
```","The generated SQL query uses DATE_FORMAT(o.OrderDate, '%Y-%m') which groups by month and year, while the ground truth query uses EXTRACT(MONTH FROM OrderDate) which groups by month only. This can lead to different results if the dataset spans multiple years.","SELECT p.ProductName, EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS MonthlyQuantity, LAG(SUM(od.Quantity)) OVER (PARTITION BY p.ProductName, EXTRACT(YEAR FROM o.OrderDate) ORDER BY EXTRACT(MONTH FROM o.OrderDate)) AS PreviousMonthQuantity FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName, EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate);","The generated SQL query includes year and uses LAG to compare monthly data, while the ground truth query only summarizes data by product name and month without year or previous month comparison.",None
What is the total discount given for each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS Total_Discount
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    Month
ORDER BY 
    Month;
```",Both queries calculate the total discount for each month using the same logic and SQL operations. Ordering the results does not affect the answer to the user's question.,"SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM');","Both queries aggregate total discounts by month and calculate it the same way, despite using different date formatting functions for month extraction.",both
What is the average discount applied per order this year?,SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE),"```sql
SELECT AVG([Order Details].Discount) AS average_discount 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
```","Both queries correctly calculate the average discount per order for the current year, but the first uses a date range, and the second uses a year function.",SELECT AVG(Discount) AS average_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE());,"Both queries calculate the average discount for orders from the current year, using a join on 'OrderID' between 'Order Details' and 'orders' and filtering by the current year using 'YEAR(CURDATE())' and 'YEAR(CURRENT_DATE)'. The function calls are equivalent.",both
What is the average lead time for each supplier over the past year?,"SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN orders o ON p.ProductID IN (SELECT od.ProductID FROM [Order Details] od WHERE od.OrderID = o.OrderID) WHERE o.OrderDate BETWEEN CURDATE() - INTERVAL 1 YEAR AND CURDATE() GROUP BY s.SupplierID;","```sql
SELECT suppliers.SupplierID, suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
GROUP BY suppliers.SupplierID, suppliers.CompanyName
```","Both queries calculate the average lead time per supplier over the past year, using similar logic and joins to link suppliers with orders through products.","SELECT s.SupplierID, s.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON od.ProductID = p.ProductID JOIN orders ON od.OrderID = orders.OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY s.SupplierID, s.CompanyName","The generated query includes the supplier company name in the GROUP BY clause, which is not part of the ground truth query. Also, it uses a different date function (DATE_SUB) to filter the past year, though this part likely works as intended.",Base
Which employee has the most orders completed in a given month?,"SELECT orders.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM orders WHERE MONTH(orders.OrderDate) = 6 AND YEAR(orders.OrderDate) = 2023 GROUP BY orders.EmployeeID ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT employees.EmployeeID, employees.FirstName, employees.LastName, COUNT(orders.OrderID) AS OrderCount
FROM employees
JOIN orders ON employees.EmployeeID = orders.EmployeeID
WHERE orders.ShippedDate >= '2023-10-01' AND orders.ShippedDate < '2023-11-01'
GROUP BY employees.EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```","The generated query calculates orders based on 'ShippedDate' in October 2023, while the ground truth uses 'OrderDate' in June 2023.","SELECT e.EmployeeID, COUNT(o.OrderID) AS TotalOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate BETWEEN '2022-01-01' AND '2022-01-31' GROUP BY e.EmployeeID ORDER BY TotalOrders DESC;","The generated SQL query uses a specific date range in January 2022, while the ground truth query checks for June 2023. Additionally, the ground truth query limits results to one employee, whereas the generated query does not use a LIMIT clause.",None
Find the maximum reorder level for products from each supplier.,"SELECT SupplierID, MAX(ReorderLevel) AS MaxReorderLevel FROM products GROUP BY SupplierID;","```sql
SELECT 
    p.SupplierID, 
    MAX(p.ReorderLevel) AS MaxReorderLevel
FROM 
    products p
GROUP BY 
    p.SupplierID;
```","Both queries select SupplierID and the maximum reorder level per supplier from the products table, grouping by SupplierID. They yield the same results.","SELECT SupplierID, MAX(ReorderLevel) AS MaxReorderLevel FROM products GROUP BY SupplierID;","Both queries group by SupplierID and calculate the maximum ReorderLevel, thus yielding the same results.",both
Which shipping company was used the most in the previous quarter?,"SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders WHERE QUARTER(OrderDate) = QUARTER(CURDATE()) - 1 AND YEAR(OrderDate) = YEAR(CURDATE()) OR (QUARTER(CURDATE()) = 1 AND YEAR(OrderDate) = YEAR(CURDATE()) - 1) GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;","```sql
SELECT ShipVia, COUNT(*) AS OrderCount
FROM orders
WHERE OrderDate >= DATEADD(quarter, -1, GETDATE()) AND OrderDate < GETDATE()
GROUP BY ShipVia
ORDER BY OrderCount DESC
LIMIT 1;
```","The generated query doesn't correctly filter for the previous quarter: it uses DATEADD to subtract a quarter from the current date, which doesn't handle quarter boundaries accurately like the ground truth query that explicitly checks for the current and previous year's quarters.","SELECT ShipVia, COUNT(OrderID) AS ShippingCount FROM orders WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '1 quarter') AND OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY ShipVia ORDER BY ShippingCount DESC LIMIT 1;","The generated query uses DATE_TRUNC for date calculation, which does not account for year change between quarters, while the ground truth query accounts for year transitions correctly.",None
Which employee handled the most on-time deliveries in the last year?,"SELECT EmployeeID, COUNT(OrderID) AS OnTimeDeliveries FROM orders WHERE ShippedDate <= RequiredDate AND YEAR(OrderDate) = YEAR(CURDATE()) - 1 GROUP BY EmployeeID ORDER BY OnTimeDeliveries DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OnTimeDeliveries
FROM orders
WHERE ShippedDate <= RequiredDate AND OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE)
GROUP BY EmployeeID
ORDER BY OnTimeDeliveries DESC
LIMIT 1;
```","The generated query calculates on-time deliveries for the past year from the current date, while the ground truth query calculates for the entire previous calendar year.","SELECT EmployeeID, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveries FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1 GROUP BY EmployeeID ORDER BY OnTimeDeliveries DESC LIMIT 1;","Both queries count the number of orders where the shipment date was on or before the required date, targeting deliveries from the previous year, grouped by employee, and return the employee with the most on-time deliveries.",FT
How many employees were hired before 2000?,SELECT COUNT(*) FROM employees WHERE HireDate < '2000-01-01';,"```sql
SELECT COUNT(*) AS NumberOfEmployees
FROM employees
WHERE HireDate < '2000-01-01';
```","Both queries accurately count the employees hired before the year 2000, as they apply the same WHERE condition on the HireDate and use the COUNT() function.",SELECT COUNT(*) FROM employees WHERE HireDate < '2000-01-01';,Both queries are identical and correctly count employees hired before 2000.,both
Which employees have a higher average order value than their direct manager?,"SELECT a.EmployeeID FROM employees a JOIN orders b ON a.EmployeeID = b.EmployeeID JOIN [Order Details] c ON b.OrderID = c.OrderID JOIN employees d ON a.ReportsTo = d.EmployeeID GROUP BY a.EmployeeID, d.EmployeeID HAVING AVG(c.UnitPrice * c.Quantity * (1 - c.Discount)) > (SELECT AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.EmployeeID = d.EmployeeID);","```sql
SELECT e1.EmployeeID, e1.FirstName, e1.LastName
FROM employees e1
JOIN employees e2 ON e1.ReportsTo = e2.EmployeeID
JOIN (
    SELECT EmployeeID, AVG(UnitPrice * Quantity * (1 - Discount)) AS AvgOrderValue
    FROM orders o
    JOIN [Order Details] od ON o.OrderID = od.OrderID
    GROUP BY o.EmployeeID
) AS avg_vals ON e1.EmployeeID = avg_vals.EmployeeID
WHERE avg_vals.AvgOrderValue > (
    SELECT AVG(UnitPrice * Quantity * (1 - Discount))
    FROM orders o
    JOIN [Order Details] od ON o.OrderID = od.OrderID
    WHERE o.EmployeeID = e2.EmployeeID
    GROUP BY o.EmployeeID
)
```",Both queries calculate the average order value for employees and compare it with their manager's average order value. The logic and comparisons are equivalent.,"SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",The generated SQL query calculates the average order value for each employee but doesn't compare it to their direct manager's average order value. It lacks the necessary join and comparison logic present in the ground truth query.,Base
What is the average units in stock per product category?,"SELECT CategoryID, AVG(UnitsInStock) AS AvgUnitsInStock FROM products GROUP BY CategoryID;","```sql
SELECT products.CategoryID, AVG(products.UnitsInStock) AS AverageUnitsInStock
FROM products
GROUP BY products.CategoryID;
```",Both queries calculate the average units in stock per product category by grouping by CategoryID and averaging UnitsInStock.,"SELECT CategoryID, AVG(UnitsInStock) AS AvgUnitsInStock FROM products GROUP BY CategoryID;","Both the generated SQL query and the ground truth query are identical, thus they will yield the same result.",both
Which shipping methods are most frequently used?,"SELECT o.ShipVia, COUNT(o.OrderID) AS UseCount FROM orders o GROUP BY o.ShipVia ORDER BY UseCount DESC;","```sql
SELECT ShipVia, COUNT(*) AS Frequency
FROM orders
GROUP BY ShipVia
ORDER BY Frequency DESC;
```",Both queries count the number of times each shipping method is used and sort the results in descending order of frequency. The aggregate function and grouping are equivalent in functionality.,"```sql
SELECT ShipVia, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipVia ORDER BY NumberOfOrders DESC;
```","Both queries count the number of orders for each shipping method and order the results in descending order, yielding the same results.",both
Find the supplier with the largest revenue from sales.,"SELECT products.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID ORDER BY TotalRevenue DESC LIMIT 1;","```sql
SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY suppliers.SupplierID
ORDER BY TotalRevenue DESC
LIMIT 1;
```","Both queries calculate the total revenue per supplier and order by it in descending order, selecting the top result. They differ in approach: the generated query retrieves the CompanyName, while the ground truth retrieves SupplierID. However, both should yield the correct supplier with the largest revenue.","SELECT s.SupplierID, s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID, s.CompanyName ORDER BY TotalSales DESC LIMIT 1;","Both queries calculate the total revenue for each supplier by joining suppliers, products, and order details, and then find the supplier with the highest revenue. The generated query includes additional columns in the SELECT statement but still correctly identifies the supplier with the highest total revenue.",both
Determine the products that have not been sold at all.,"SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;","```sql
SELECT P.ProductID, P.ProductName 
FROM products P 
LEFT JOIN [Order Details] OD ON P.ProductID = OD.ProductID 
WHERE OD.Quantity IS NULL;
```","Both queries identify products with no corresponding entries in the 'Order Details' table, indicating they have not been sold. The use of LEFT JOIN and checking for NULL in the joined table ensures the same results.","SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;",The generated SQL query is identical to the ground truth query and correctly retrieves products that have not been sold by using a LEFT JOIN and checking for NULL in the 'Order Details' table.,both
What is the percentage of orders delivered on time each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 100.0 * COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
    (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID)) AS OnTimeDeliveryRate
FROM 
    orders
GROUP BY 
    Month
```",Both queries calculate the percentage of orders delivered on time each month by grouping by the formatted month and comparing ShippedDate to RequiredDate.,"SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, (SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS OnTimeDeliveryRate FROM orders GROUP BY Year, Month;","Both queries calculate the percentage of on-time orders per month. The generated query uses YEAR and MONTH separately, while the ground truth query uses DATE_FORMAT to group by year and month. Both approaches yield equivalent results.",both
What is the total number of units on order for each product category?,"SELECT CategoryID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY CategoryID;","```sql
SELECT p.CategoryID, SUM(p.UnitsOnOrder) AS TotalUnitsOnOrder
FROM products p
GROUP BY p.CategoryID;
```","Both queries group by CategoryID and calculate the sum of UnitsOnOrder, yielding the same results.","SELECT CategoryID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY CategoryID;","The generated SQL query accurately answers the user's question by summing the UnitsOnOrder for each CategoryID, which matches the ground truth query.",both
What is the total freight cost for each shipping method?,"SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia","```sql
SELECT ShipVia, SUM(Freight) AS TotalFreightCost
FROM orders
GROUP BY ShipVia;
```","Both queries calculate the total freight cost grouped by the 'ShipVia' column from the 'orders' table, yielding identical results.","SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;",Both queries calculate the total freight cost for each shipping method by summing the Freight column and grouping by ShipVia. The result is the same; only the alias for the summed column differs.,both
What is the average discount provided across all products?,SELECT AVG(Discount) FROM [Order Details];,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details];
```",Both queries calculate the average discount across all products from the 'Order Details' table. The alias 'AverageDiscount' does not affect the query's functionality.,SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];,Both queries calculate the average discount from the [Order Details] table. Adding an alias in the generated query does not affect the result.,both
Which suppliers have not been used in any orders?,SELECT s.SupplierID FROM suppliers s LEFT JOIN products p ON s.SupplierID = p.SupplierID LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL;,"```sql
SELECT s.SupplierID, s.CompanyName
FROM suppliers s
LEFT JOIN products p ON s.SupplierID = p.SupplierID
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
LEFT JOIN orders o ON od.OrderID = o.OrderID
WHERE o.OrderID IS NULL;
```","Both queries aim to find suppliers not used in orders by using LEFT JOINs and checking for NULL in related order tables. They yield the same result, with a slight difference in displayed columns.","## SQL Query:
SELECT s.SupplierID, s.CompanyName FROM suppliers s LEFT JOIN products p ON s.SupplierID = p.SupplierID LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL",Both queries correctly identify suppliers not used in any orders by checking for NULL values in the joined Order Details table. The difference in columns selected does not impact the correctness for identifying unused suppliers.,both
Calculate the total sales revenue per supplier for the last fiscal year.,"SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SupplierRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY suppliers.CompanyName ORDER BY SupplierRevenue DESC;","```sql
SELECT 
    suppliers.SupplierID, 
    suppliers.CompanyName, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM 
    suppliers
JOIN 
    products ON suppliers.SupplierID = products.SupplierID
JOIN 
    [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN 
    orders ON [Order Details].OrderID = orders.OrderID
WHERE 
    orders.OrderDate >= '2022-01-01' AND orders.OrderDate < '2023-01-01'
GROUP BY 
    suppliers.SupplierID, suppliers.CompanyName
```","The generated query filters by a specific date range for 2022, whereas the ground truth calculates based on the last fiscal year relative to the current date.","SELECT S.CompanyName, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS SupplierRevenue FROM suppliers S JOIN products P ON S.SupplierID = P.SupplierID JOIN [Order Details] OD ON P.ProductID = OD.ProductID JOIN orders O ON OD.OrderID = O.OrderID WHERE YEAR(O.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY S.CompanyName;",Both queries calculate total sales revenue per supplier for the last fiscal year by joining the same tables and applying the same conditions. The differences in the use of alias names and order of operations do not affect the logic.,FT
What are the top five customers based on order volume?,"SELECT CustomerID, COUNT(OrderID) AS OrderVolume FROM orders GROUP BY CustomerID ORDER BY OrderVolume DESC LIMIT 5;","```sql
SELECT CustomerID, COUNT(OrderID) AS OrderVolume
FROM orders
GROUP BY CustomerID
ORDER BY OrderVolume DESC
LIMIT 5;
```","The generated SQL query accurately answers the user's question. Both queries count the number of orders per customer, sort them in descending order based on order volume, and limit the results to the top five customers. The logic and result will be the same as the ground truth query.","SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID ORDER BY NumberOfOrders DESC LIMIT 5;","Both queries count orders per customer, sort in descending order by the count, and limit to the top five customers. The difference is only in the alias name used for the count.",both
What are the top 5 cities with the most supplier companies?,"SELECT City, COUNT(DISTINCT SupplierID) AS SupplierCount FROM suppliers GROUP BY City ORDER BY SupplierCount DESC LIMIT 5;","```sql
SELECT City, COUNT(*) AS SupplierCount
FROM suppliers
GROUP BY City
ORDER BY SupplierCount DESC
LIMIT 5;
```","The generated SQL counts all rows in each city without ensuring SupplierIDs are distinct, which may lead to incorrect counts if there are duplicates.","SELECT suppliers.City, COUNT(suppliers.SupplierID) AS NumberOfSuppliers FROM suppliers GROUP BY suppliers.City ORDER BY NumberOfSuppliers DESC LIMIT 5;","Both queries count the number of suppliers per city, order the results by descending count, and limit to the top 5 cities. The use of DISTINCT is irrelevant here assuming SupplierID is unique.",FT
What is the most common region suppliers are from?,"SELECT Region, COUNT(*) FROM suppliers GROUP BY Region ORDER BY COUNT(*) DESC;","```sql
SELECT Region, COUNT(*) AS SupplierCount
FROM suppliers
GROUP BY Region
ORDER BY SupplierCount DESC
LIMIT 1;
```","Both queries select the region with the highest count of suppliers, though the ground truth does not limit to a single result, the ordered output ensures that the first is the most common.","SELECT Region, COUNT(*) AS SupplierCount FROM suppliers GROUP BY Region ORDER BY SupplierCount DESC LIMIT 1;","Both queries aim to find the most common region by counting suppliers per region and ordering the results to get the top one. The generated query explicitly limits the result to one, which matches the user's question to find the most common.",both
Find employees who have worked for more than 10 years and their number of orders handled.,"SELECT e.EmployeeID, COUNT(o.OrderID) FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE YEAR(CURRENT_DATE) - YEAR(e.HireDate) > 10 GROUP BY e.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS NumberOfOrders
FROM employees e
LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE DATE_SUB(CURDATE(), INTERVAL 10 YEAR) > e.HireDate
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","The generated query uses LEFT JOIN and COUNT, which will include employees with no orders, giving potentially incorrect order counts, while the ground truth query uses INNER JOIN to count only employees with orders.","SELECT e.EmployeeID, COUNT(o.OrderID) AS NumberOfOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE e.HireDate < CURDATE() - INTERVAL 10 YEAR GROUP BY e.EmployeeID;","The generated query uses 'e.HireDate < CURDATE() - INTERVAL 10 YEAR', which includes employees exactly 10 years. The ground truth query uses 'YEAR(CURRENT_DATE) - YEAR(e.HireDate) > 10', excluding exactly 10 years. The logic differs slightly.",None
What is the total freight cost by country?,"SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;","```sql
SELECT ShipCountry, SUM(Freight) AS TotalFreightCost
FROM orders
GROUP BY ShipCountry;
```","The generated SQL query is equivalent to the ground truth query, yielding the same results.","SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",Both queries are identical and correctly calculate the total freight cost by country by grouping and summing the Freight field.,both
Determine the top 5 customers by lifetime value.,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY LifetimeValue DESC LIMIT 5;","```sql
SELECT c.CustomerID, c.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.CustomerID, c.CompanyName
ORDER BY LifetimeValue DESC
LIMIT 5;
```","The generated query includes 'CompanyName' in the SELECT and GROUP BY clauses, which can cause different results if there are duplicate CustomerIDs with different CompanyNames.","SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY LifetimeValue DESC LIMIT 5;","Both queries calculate the lifetime value by summing up the product of UnitPrice, Quantity, and the discount adjustment for each customer, and then order by the sum in descending order to get the top 5 customers.",FT
Identify the regions with the highest order volumes.,"SELECT ShipRegion, COUNT(OrderID) AS OrderVolume FROM orders GROUP BY ShipRegion ORDER BY OrderVolume DESC;","```sql
SELECT ShipRegion, COUNT(OrderID) AS OrderVolume
FROM orders
GROUP BY ShipRegion
ORDER BY OrderVolume DESC;
```","The generated SQL query accurately answers the user's question and yields the same results as the ground truth query. Both queries select the ShipRegion and count the OrderID, grouping by ShipRegion, and order the results in descending order of order volume.","SELECT ShipRegion, COUNT(OrderID) AS OrderVolume FROM orders GROUP BY ShipRegion ORDER BY OrderVolume DESC;",Both queries are identical and accurately group and order regions by their order volumes in descending order.,both
Which employee generated the highest sales in Q2 2023?,"SELECT employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN employees ON orders.EmployeeID = employees.EmployeeID 
WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' 
GROUP BY employees.EmployeeID 
ORDER BY total_sales DESC 
LIMIT 1
```",The Generated SQL Query retrieves 'EmployeeID' while the Ground Truth SQL Query retrieves 'FirstName' and 'LastName'. The results are functionally different.,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1","The generated SQL query selects EmployeeID while the ground truth selects FirstName and LastName. Both queries calculate sales correctly, but the output columns differ.",None
How many orders were placed and not yet shipped?,SELECT COUNT(OrderID) AS UnshippedOrders FROM orders WHERE ShippedDate IS NULL;,"```sql
SELECT COUNT(OrderID) AS UnshippedOrders
FROM orders
WHERE ShippedDate IS NULL;
```","The generated SQL query accurately answers the user's question and matches the ground truth query because both count orders that have a NULL ShippedDate, indicating they are not yet shipped.",SELECT COUNT(OrderID) AS UnshippedOrders FROM orders WHERE ShippedDate IS NULL;,"Both queries count the number of orders with a null ShippedDate, which reflects orders placed but not yet shipped.",both
What is the total freight cost incurred for each shipping country?,"SELECT o.ShipCountry, SUM(o.Freight) AS TotalFreight FROM orders o GROUP BY o.ShipCountry;","```sql
SELECT ShipCountry, SUM(Freight) AS TotalFreightCost
FROM orders
GROUP BY ShipCountry;
```","Both queries calculate the sum of freight costs grouped by shipping country, using the same logic and structure, resulting in identical outcomes.","SELECT ShipCountry, SUM(Freight) AS TotalFreightByCountry FROM orders GROUP BY ShipCountry;",Both queries calculate the total freight cost for each shipping country by summing the 'Freight' column and grouping by 'ShipCountry'. The differences in aliasing do not affect the output.,both
Which products are below their reorder level?,SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock < ReorderLevel;
```","The generated query returns additional columns (ProductID, UnitsInStock, ReorderLevel) not present in the ground truth query, which may change the nature of the result set.","SELECT ProductID, ProductName, UnitsInStock, ReorderLevel FROM products WHERE UnitsInStock < ReorderLevel;",Both queries check for products where UnitsInStock is less than ReorderLevel and effectively answer the user's question. The difference in selected columns does not affect the core result of identifying products below their reorder level.,FT
Which employees have not recorded any sales this year?,SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND YEAR(o.OrderDate) = YEAR(CURDATE()) WHERE o.OrderID IS NULL;,"```sql
SELECT e.EmployeeID, e.FirstName, e.LastName
FROM employees e
LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE)
LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE od.OrderID IS NULL
```","The generated query incorrectly checks for 'Order Details' being null, which could exclude employees who have orders without any details. The ground truth correctly checks for orders themselves being null.",SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) AND o.OrderDate IS NULL GROUP BY e.EmployeeID,"The generated query incorrectly filters using 'AND o.OrderDate IS NULL' and 'YEAR(o.OrderDate) = YEAR(CURRENT_DATE)'. This will never be true, causing no results. The correct approach is in the ground truth query, which checks 'AND YEAR(o.OrderDate) = YEAR(CURDATE())' in the JOIN condition and uses 'WHERE o.OrderID IS NULL'.",None
Which products are below their reorder level and need to be restocked?,SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock < ReorderLevel;
```","The generated query returns ProductID, ProductName, UnitsInStock, and ReorderLevel, while the ground truth query only returns ProductName.","SELECT ProductID, ProductName FROM products WHERE UnitsInStock + UnitsOnOrder < ReorderLevel AND Discontinued = 0;","The generated query includes additional conditions and checks amounts on order, which may not match the ground truth.",None
Which employee handled the most orders that were shipped late?,"SELECT employees.EmployeeID, COUNT(orders.OrderID) AS LateOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE ShippedDate > RequiredDate GROUP BY employees.EmployeeID ORDER BY LateOrders DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS LateOrderCount
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.ShippedDate > o.RequiredDate
GROUP BY e.EmployeeID
ORDER BY LateOrderCount DESC
LIMIT 1;
```","Both queries accurately answer the question by counting the number of orders shipped late per employee, then sorting to find the one with the most and limiting the result to a single employee. The main difference is that the generated query includes employee names in the SELECT clause for more detailed output, which does not affect the functionality related to the user's question.","SELECT e.EmployeeID, COUNT(o.OrderID) AS LateOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate > o.RequiredDate GROUP BY e.EmployeeID ORDER BY LateOrders DESC LIMIT 1;","The generated SQL query and the ground truth query are functionally equivalent, despite minor differences in alias usage. Both join employees and orders on EmployeeID, filter for late shipments, count late orders per employee, and select the employee with the highest count.",both
List all products that have never been ordered.,SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"```sql
SELECT p.ProductID, p.ProductName 
FROM products p 
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID 
WHERE od.ProductID IS NULL;
```",Both queries effectively retrieve products that have never been ordered by identifying ProductIDs in 'products' that are not associated with any records in '[Order Details]'.,SELECT p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;,Both queries correctly list products that have never been ordered by checking for products with no matching entries in the Order Details table.,both
What is the percentage of orders delivered on or before the required date each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 100.0 * COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
    (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) / COUNT(OrderID)) * 100 AS On_time_Delivery_Percentage
FROM 
    orders
GROUP BY 
    Month
```",Both queries calculate the percentage of orders delivered on or before the required date each month using similar logic and have equivalent logic for grouping and calculating the percentage.,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY month;",Both queries calculate the percentage of orders delivered on or before the required date for each month using the same logic and group by the formatted month from the OrderDate.,both
Which city has the highest average shipping cost?,"SELECT ShipCity, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipCity ORDER BY AvgShippingCost DESC LIMIT 1;","```sql
SELECT ShipCity, AVG(Freight) AS AverageShippingCost
FROM orders
GROUP BY ShipCity
ORDER BY AverageShippingCost DESC
LIMIT 1;
```","Both queries group by ShipCity, calculate the average freight, and order the results to return the city with the highest average shipping cost.","SELECT ShipCity, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipCity ORDER BY AvgShippingCost DESC LIMIT 1;",The generated SQL query and the ground truth SQL query are identical and will yield the same result.,both
Determine which products have had discounts applied most frequently.,"SELECT p.ProductName, COUNT(od.Discount) AS DiscountCount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.Discount > 0 GROUP BY p.ProductName ORDER BY DiscountCount DESC;","```sql
SELECT ProductID, COUNT(*) AS DiscountCount
FROM [Order Details]
WHERE Discount > 0
GROUP BY ProductID
ORDER BY DiscountCount DESC;
```","The generated SQL query returns ProductID and doesn't join with the products table to return ProductName, while the ground truth query returns ProductName.","SELECT ProductID, COUNT(*) AS DiscountOccurrence FROM [Order Details] WHERE Discount > 0 GROUP BY ProductID ORDER BY DiscountOccurrence DESC;","Both queries are effectively counting the number of times discounts are applied to each product. The generated SQL query returns ProductID, while the ground truth returns ProductName. Assuming ProductID uniquely maps to ProductName, the result is effectively the same in terms of frequency of discounts applied.",FT
Identify the countries with the most unique suppliers.,"SELECT Country, COUNT(DISTINCT SupplierID) AS UniqueSuppliers FROM suppliers GROUP BY Country ORDER BY UniqueSuppliers DESC;","```sql
SELECT Country, COUNT(DISTINCT SupplierID) AS UniqueSuppliers
FROM suppliers
GROUP BY Country
ORDER BY UniqueSuppliers DESC;
```",The generated SQL query is functionally identical to the ground truth query and will produce the same results.,"SELECT s.Country, COUNT(DISTINCT s.SupplierID) AS UniqueSuppliers FROM suppliers s GROUP BY s.Country ORDER BY UniqueSuppliers DESC;","Both queries select countries with the count of unique suppliers and order by the number of unique suppliers in descending order. The only difference is alias usage, which does not affect the result.",both
Which employees are linked to the most orders?,"SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY EmployeeID
ORDER BY OrderCount DESC;
```","The generated query retrieves all employees ordered by most orders, whereas the ground truth limits the result to the single employee with the most orders.","SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC;","The generated query lists all employees ordered by the number of orders, while the ground truth query selects only the employee with the most orders.",None
Which city has the highest number of orders placed in 2023?,"SELECT orders.ShipCity, COUNT(orders.OrderID) AS num_orders FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY orders.ShipCity ORDER BY num_orders DESC LIMIT 1","```sql
SELECT ShipCity, COUNT(OrderID) AS order_count 
FROM orders 
WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31' 
GROUP BY ShipCity 
ORDER BY order_count DESC 
LIMIT 1;
```",Both queries count the number of orders per city in 2023 and return the city with the highest count. They have the same logic and results despite minor differences in alias usage.,"SELECT customers.City, COUNT(orders.OrderID) AS order_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.City ORDER BY order_count DESC LIMIT 1","The generated query counts orders by customer city, while the ground truth query counts by the shipping city.",Base
How many products have zero units in stock?,SELECT COUNT(ProductID) AS NumberOfProductsWithZeroStock FROM products WHERE UnitsInStock = 0;,"```sql
SELECT COUNT(*) AS ZeroUnitsInStock
FROM products
WHERE UnitsInStock = 0;
```","Both queries count the number of products with zero units in stock, although they alias the result differently.",SELECT COUNT(*) AS NumberOfProductsOutOfStock FROM products WHERE UnitsInStock = 0;,"Both queries count the rows in the 'products' table where 'UnitsInStock' is zero, giving the same result.",both
Analyze the correlation between employee job title and sales performance.,"SELECT employees.Title, AVG(TotalSales) AS AverageSales FROM (SELECT employees.Title, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, employees.Title) AS EmployeeSales GROUP BY employees.Title;","```sql
SELECT e.Title, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.Title
```","The generated query calculates total sales per job title, while the ground truth query calculates the average sales per job title.","SELECT Title, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Title ORDER BY TotalSales DESC;","The generated query calculates the total sales per job title, while the ground truth query calculates the average sales per job title. These are different measures of sales performance.",None
What is the average order fulfillment time for each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM 
    orders
GROUP BY 
    Month
```","The generated SQL query accurately answers the user's question. Both queries calculate the average order fulfillment time per month using DATE_FORMAT to extract the month and AVG with DATEDIFF to calculate fulfillment time. The only difference is the alias name for the average fulfillment time, which does not affect the result.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month","Both queries calculate the average order fulfillment time for each month. The generated query adds a condition to exclude orders with NULL ShippedDate, which effectively maintains relevance by only including fulfilled orders.",both
Identify orders with a shipping delay greater than 7 days.,SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate + INTERVAL '7' DAY;,"```sql
SELECT *
FROM orders
WHERE DATEDIFF(ShippedDate, OrderDate) > 7;
```","The generated SQL calculates the difference between ShippedDate and OrderDate, while the ground truth compares ShippedDate with RequiredDate plus 7 days.","SELECT OrderID, DATEDIFF(day, RequiredDate, ShippedDate) AS ShippingDelay FROM orders WHERE ShippedDate - RequiredDate > 7;","The generated query uses incorrect logic to calculate the delay; DATEDIFF(day, RequiredDate, ShippedDate) > 7 should be used instead of ShippedDate - RequiredDate > 7.",None
How many products are currently at or above their reorder level?,SELECT COUNT(*) AS AtOrAboveReOrder FROM products WHERE UnitsInStock >= ReorderLevel;,"```sql
SELECT COUNT(*) AS ProductsAtOrAboveReorderLevel
FROM products
WHERE UnitsInStock >= ReorderLevel;
```","Both queries count the number of products with UnitsInStock greater than or equal to ReorderLevel, despite different aliases for the count.",SELECT COUNT(*) FROM products WHERE UnitsInStock >= ReorderLevel;,"Both queries count the number of products with UnitsInStock greater than or equal to ReorderLevel. The difference is only in the alias used for the count result, which does not affect the core functionality.",both
What is the current inventory turnover ratio?,SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID;,"```sql
SELECT 
    SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio
FROM 
    products
JOIN 
    [Order Details] ON products.ProductID = [Order Details].ProductID
```","Both queries calculate the inventory turnover ratio using total sales over average units in stock, and will yield the same results.","SELECT SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(CAST(p.UnitsInStock AS FLOAT)), 0) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.UnitsInStock > 0;","The generated query filters for products with UnitsInStock > 0, which the ground truth query does not. This can lead to different averages and therefore different turnover ratios.",Base
What is the correlation between employee sales and years of service?,"SELECT employees.EmployeeID, (YEAR(CURDATE()) - YEAR(employees.HireDate)) AS years_of_service, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID","```sql
SELECT employees.EmployeeID, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales,
       DATEDIFF(NOW(), employees.HireDate) / 365 AS years_of_service
FROM employees
JOIN orders ON employees.EmployeeID = orders.EmployeeID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY employees.EmployeeID;
```",Both queries calculate the total sales per employee and approximate years of service. The difference in calculating years of service should not affect the final correlation result for this analysis.,"### SQL Query:
```sql
SELECT AVG(employee_sales.sales) AS avg_employee_sales, AVG(years_of_service.years) AS avg_years_of_service FROM (SELECT EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) - AVG(CASE WHEN YEAR(OrderDate) = YEAR(NOW()) THEN 0 ELSE 1 END) * (DATEDIFF(YEAR, HireDate, NOW()) - 1) AS sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID, HireDate) employee_sales JOIN employees ON employee_sales.EmployeeID = employees.EmployeeID JOIN (SELECT EmployeeID, DATEDIFF(YEAR, HireDate, NOW()) AS years FROM employees) years_of_service ON employee_sales.EmployeeID = years_of_service.EmployeeID;
```","The generated query calculates average sales and average years of service, whereas the ground truth query calculates total sales per employee and years of service per employee. The generated query does not address the correlation query.",Base
Which city has received the highest number of shipments?,"SELECT ShipCity, COUNT(OrderID) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 1;","```sql
SELECT ShipCity, COUNT(OrderID) AS ShipmentCount
FROM orders
GROUP BY ShipCity
ORDER BY ShipmentCount DESC
LIMIT 1;
```","Both queries use the same logic to count shipments per city, order by the count in descending order, and limit the result to one city with the highest shipments.","SELECT ShipCity, COUNT(OrderID) AS total_shipments FROM orders GROUP BY ShipCity ORDER BY total_shipments DESC LIMIT 1;","Both queries count the number of shipments per city and select the city with the highest count. The difference is only in the alias names, which does not affect the result.",both
Calculate the percentage of orders shipped on time.,SELECT (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID)) AS OnTimePercentage FROM orders;,"```sql
SELECT 
    (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*)) AS Percentage_Shipped_On_Time
FROM 
    orders;
```",Both queries calculate the same percentage by dividing the count of orders shipped on or before the required date by the total count of orders.,SELECT COUNT(OrderID) * 100.0 / (SELECT COUNT(*) FROM orders) AS OnTimeShippingRate FROM orders WHERE ShippedDate <= RequiredDate;,"Both queries calculate the percentage of orders shipped on or before the required date by using the condition ShippedDate <= RequiredDate, and both divide by the total order count.",both
List all orders with their shipment region and corresponding total order value.,"SELECT o.OrderID, o.ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID, o.ShipRegion;","```sql
SELECT 
    o.OrderID, 
    o.ShipRegion, 
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue
FROM 
    orders o
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    o.OrderID, 
    o.ShipRegion
```","Both queries achieve the same result by selecting the OrderID, ShipRegion, and calculating the total order value with a SUM on the join between orders and order details, and they group by OrderID and ShipRegion.","SELECT o.OrderID, o.ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID, o.ShipRegion;","Both queries compute the total order value using the same formula and group by OrderID and ShipRegion. The only difference is the alias used for the total value, which does not affect the correctness of the query result.",both
Find the employee with the highest average order value.,"SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AvgOrderValue DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY AverageOrderValue DESC
LIMIT 1;
```",Both queries calculate the average order value for each employee and return the employee with the highest value. Minor differences in selected columns do not affect the final outcome.,"SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AvgOrderValue DESC LIMIT 1","Both queries calculate the average order value per employee and select the employee with the highest value, using the same logic and structure. The difference in semicolon use does not affect the logic or result.",both
What is the average age of employees who have made a sale in the last year?,"SELECT AVG(DATEDIFF(CURRENT_DATE, e.BirthDate) / 365) AS AverageAge FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);","```sql
SELECT AVG(TIMESTAMPDIFF(YEAR, BirthDate, CURDATE())) AS AverageAge
FROM employees
WHERE EmployeeID IN (
    SELECT DISTINCT EmployeeID
    FROM orders
    WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
);
```","Both queries calculate the average age of employees who have made a sale in the last year. The Generated SQL uses a subquery to determine employees who made sales, while the Ground Truth SQL uses a JOIN. Both approaches should yield the same result.","SELECT AVG(YEAR(CURRENT_DATE) - YEAR(BirthDate)) AS AverageAge FROM employees WHERE EmployeeID IN (SELECT DISTINCT EmployeeID FROM orders WHERE OrderDate > DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR));","The generated SQL uses YEAR difference which can be inaccurate for age as it doesn't consider exact birthdate within the year. The ground truth query uses DATEDIFF and division by 365, which is more precise.",Base
What is the sum of all discounts given on 'Order Details'?,SELECT SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscounts FROM [Order Details] od;,"```sql
SELECT SUM(Discount) AS TotalDiscounts
FROM [Order Details];
```","The generated query sums only the Discount column, while the ground truth query calculates the sum of the actual discounted amounts by multiplying Discount, Quantity, and UnitPrice.",SELECT SUM(Discount) AS TotalDiscounts FROM [Order Details];,"The generated query simply sums the Discount column, while the ground truth query calculates the total discount value by considering Discount, Quantity, and UnitPrice.",None
How many orders were shipped late last month?,"SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate AND DATE_TRUNC('month', ShippedDate) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month');","```sql
SELECT COUNT(OrderID) AS LateOrders
FROM orders
WHERE ShippedDate > RequiredDate
AND MONTH(OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH)
AND YEAR(OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH);
```","The generated query checks for 'OrderDate' to be last month, while the ground truth checks for 'ShippedDate' to be last month.",SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate AND EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '1' MONTH) AND EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE - INTERVAL '1' MONTH);,"The generated query counts orders based on the OrderDate being last month, whereas the ground truth counts orders with ShippedDate in last month, which is correctly assessing late shipments based on when they were actually shipped.",None
How many customers were retained from Q1 to Q2 in 2023?,SELECT COUNT(DISTINCT o.CustomerID) AS retained_customers FROM orders o WHERE o.CustomerID IN (SELECT CustomerID FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-03-31') AND o.OrderDate BETWEEN '2023-04-01' AND '2023-06-30',"```sql
SELECT 
    COUNT(DISTINCT orders.CustomerID) AS retained_customers 
FROM 
    orders 
WHERE 
    orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' 
    AND orders.CustomerID IN (
        SELECT DISTINCT 
            orders.CustomerID 
        FROM 
            orders 
        WHERE 
            orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'
    );
```",Both queries count distinct customers who made orders in both Q1 and Q2 of 2023.,SELECT COUNT(DISTINCT Q1.CustomerID) FROM orders AS Q1 WHERE Q1.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' AND EXISTS (SELECT 1 FROM orders AS Q2 WHERE Q2.CustomerID = Q1.CustomerID AND Q2.OrderDate BETWEEN '2023-04-01' AND '2023-06-30'),Both queries accurately find the count of distinct customers who placed orders in both Q1 and Q2 of 2023 by checking for existence or intersection of CustomerIDs within the specified date ranges.,both
What is the total number of units sold by supplier?,"SELECT suppliers.CompanyName, SUM([Order Details].Quantity) AS total_units_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY total_units_sold DESC","```sql
SELECT products.SupplierID, SUM([Order Details].Quantity) AS total_units_sold
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
GROUP BY products.SupplierID
```","The generated query groups by SupplierID rather than CompanyName and doesn't join with the suppliers table, so it does not provide supplier names.","SELECT suppliers.SupplierID, SUM([Order Details].Quantity) AS total_units_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID",Both queries calculate the total number of units sold by each supplier. The difference is only in the selected fields; the generated query selects SupplierID while the ground truth selects CompanyName. The results quantitatively are the same in both cases.,FT
Which customers are from a specific country and have placed orders?,"SELECT customers.CustomerID, customers.CompanyName FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE customers.Country = 'Specific Country';","```sql
SELECT DISTINCT c.CustomerID, c.CompanyName, c.ContactName, c.ContactTitle, c.Address, c.City, c.Region, c.PostalCode, c.Country, c.Phone, c.Fax
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
WHERE c.Country = 'specific_country';
```",The queries are not equivalent as the generated query selects more columns and uses 'specific_country' which is case-sensitive and likely a placeholder.,SELECT DISTINCT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE customers.Country = 'specific_country';,"The generated query doesn't match the ground truth because it only selects CustomerID and uses 'specific_country' instead of 'Specific Country', affecting result accuracy.",None
Which supplier has the longest average lead time?,"SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID, suppliers.CompanyName ORDER BY AvgLeadTime DESC LIMIT 1;","```sql
SELECT s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY s.SupplierID
ORDER BY AverageLeadTime DESC
LIMIT 1;
```","Both queries calculate the average lead time per supplier and select the one with the longest average lead time. The main difference is the use of table aliases in the generated query and inclusion of the company name in the GROUP BY clause in the ground truth query, but these differences do not affect the result.","SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN orders ON products.ProductID = orders.[Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY AverageLeadTime DESC LIMIT 1;","The generated SQL query incorrectly joins the orders table directly to the products table, whereas it should join through the [Order Details] table as the ground truth query does. This may lead to incorrect results.",Base
What are the top 5 products by sales volume?,"SELECT p.ProductName, SUM(od.Quantity) AS SalesVolume FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY SalesVolume DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSales DESC
LIMIT 5;
```",Both queries calculate the total sales volume for each product by summing the quantity from the 'Order Details' table and then ordering the results in descending order to get the top 5 products. The difference in column selection does not affect the correctness of the result regarding product ranking.,"SELECT products.ProductID, SUM([Order Details].Quantity) AS SalesVolume FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID ORDER BY SalesVolume DESC LIMIT 5;","The generated query selects ProductID, while the ground truth selects ProductName. Both queries should return the same top 5 products by sales volume, but the generated query provides different columns.",Base
Which products are currently at or below their reorder level?,SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel 
FROM products 
WHERE UnitsInStock <= ReorderLevel;
```","The generated query selects additional columns (ProductID, UnitsInStock, ReorderLevel) not required by the user's question, which only asks for ProductName.","SELECT ProductID, ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",Both queries return products that are at or below their reorder level. They differ only in whether the ProductID is included in the result.,FT
How many orders have a discount applied?,SELECT COUNT(DISTINCT o.OrderID) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0;,"```sql
SELECT COUNT(DISTINCT OrderID) AS OrdersWithDiscount
FROM [Order Details]
WHERE Discount > 0;
```",Both queries count distinct OrderIDs with a discount greater than zero from the 'Order Details'. Joining the 'orders' table is unnecessary unless checking order existence.,SELECT COUNT(DISTINCT OrderID) AS OrdersWithDiscount FROM [Order Details] WHERE Discount > 0;,Both queries count distinct OrderIDs with a Discount greater than 0. The join in the ground truth query is redundant for this purpose.,both
Which suppliers have the shortest average lead time for deliveries?,"SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC","```sql
SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_lead_time 
FROM orders 
JOIN products ON orders.OrderID = products.ProductID 
GROUP BY products.SupplierID 
ORDER BY average_lead_time ASC
```","The generated SQL query incorrectly joins 'orders' and 'products' tables on 'OrderID' and 'ProductID', but it should use the 'Order Details' table to join 'products' to 'orders'. Also, it fails to join the 'suppliers' table to fetch SupplierID accurately.","SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY average_lead_time ASC","The generated SQL query and the ground truth SQL query both compute the average lead time for each supplier by calculating the difference between the ShippedDate and OrderDate and then averaging it, while grouping by SupplierID. Both queries join the same tables in a similar manner and order the results by the calculated average lead time in ascending order. The difference in naming the result column as 'average_lead_time' in one and 'avg_lead_time' in the other does not affect the correctness of the results.",FT
What is the monthly growth rate in sales for each employee?,"SELECT e.EmployeeID, YEAR(o.OrderDate) AS Year, MONTH(o.OrderDate) AS Month, (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) - LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) OVER (PARTITION BY e.EmployeeID ORDER BY YEAR(o.OrderDate), MONTH(o.OrderDate))) / LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) OVER (PARTITION BY e.EmployeeID ORDER BY YEAR(o.OrderDate), MONTH(o.OrderDate)) AS MonthlyGrowth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, YEAR(o.OrderDate), MONTH(o.OrderDate);","```sql
SELECT 
    e.EmployeeID,
    e.FirstName,
    e.LastName,
    (SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) -
    SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) / 
    NULLIF(SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END), 0) * 1.0 AS MonthlyGrowthRate
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
WHERE 
    o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) 
GROUP BY 
    e.EmployeeID, e.FirstName, e.LastName;
```","The generated query only compares the current month and the previous month, whereas the ground truth calculates the growth for each month across the year using the LAG function.","```sql
SELECT e.EmployeeID, 
       EXTRACT(MONTH FROM o.OrderDate) AS SalesMonth, 
       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales 
FROM employees e 
JOIN orders o ON e.EmployeeID = o.EmployeeID 
JOIN [Order Details] od ON o.OrderID = od.OrderID 
GROUP BY e.EmployeeID, SalesMonth;
```",The generated SQL query calculates total monthly sales but does not compute the monthly growth rate. The ground truth query uses LAG to calculate the growth rate between months.,None
What is the monthly trend of new customers acquired?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(DISTINCT CustomerID) AS NewCustomers FROM orders GROUP BY Month ORDER BY Month;","```sql
SELECT 
    DATE_TRUNC('month', o.OrderDate) AS Month,
    COUNT(DISTINCT c.CustomerID) AS NewCustomers
FROM 
    customers c
JOIN 
    orders o ON c.CustomerID = o.CustomerID
GROUP BY 
    Month
ORDER BY 
    Month;
```","The generated query joins the customers and orders tables, implying new customers are identified per order. The ground truth query counts distinct customers directly from orders, focusing only on order activity without needing the customers table. The results may differ if one customer has multiple orders in the same month.","SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(DISTINCT customers.CustomerID) AS NewCustomers FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY Month ORDER BY Month;","The generated query uses customers.CustomerID, which implies it ensures the customer ID exists in the customers table, this can affect the count. Ground Truth query only considers the OrderDate from the orders table.",None
What is the total quantity of products ordered by each customer?,"SELECT c.CustomerID, SUM(od.Quantity) AS TotalQuantity FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;","```sql
SELECT customers.CustomerID, SUM([Order Details].Quantity) AS TotalQuantity
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID;
```","Both queries join the same tables using the same keys and correctly calculate the total quantity of products ordered by each customer, grouping by CustomerID.","SELECT customers.CustomerID, SUM([Order Details].Quantity) AS TotalQuantity FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID","Both queries join the same tables and aggregate the quantity of products for each customer, yielding the same results.",both
What is the total sales value in the last quarter?,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-12-31',"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-12-31'
```",The generated query is identical to the ground truth query and accurately calculates the total sales for the specified last quarter date range.,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30',"The generated SQL query and the ground truth SQL query have different date ranges for 'OrderDate', resulting in different quarters being evaluated.",Base
What is the monthly customer retention rate for 2023?,"SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(DISTINCT o1.CustomerID) * 1.0 / NULLIF((SELECT COUNT(DISTINCT o2.CustomerID) FROM orders o2 WHERE o2.OrderDate < '2023-01-01'), 0) AS RetentionRate FROM orders o1 WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY EXTRACT(MONTH FROM OrderDate);","```sql
SELECT 
    EXTRACT(YEAR FROM o1.OrderDate) AS year,
    EXTRACT(MONTH FROM o1.OrderDate) AS month,
    COUNT(DISTINCT o1.CustomerID) * 1.0 / NULLIF(COUNT(DISTINCT o2.CustomerID), 0) AS retention_rate
FROM 
    orders o1
LEFT JOIN 
    orders o2 ON o1.CustomerID = o2.CustomerID AND o2.OrderDate < DATE_TRUNC('month', o1.OrderDate)
WHERE 
    o1.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY 
    year, month
ORDER BY 
    year, month;
```","The generated query calculates a monthly retention rate by month in 2023 using customers from the previous months, while the ground truth calculates it based on all unique customers before 2023.","SELECT (COUNT(DISTINCT CASE WHEN o1.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' THEN o1.CustomerID END) * 100.0) / NULLIF(COUNT(DISTINCT CASE WHEN o2.OrderDate < '2023-01-01' THEN o2.CustomerID END), 0) AS RetentionRate FROM orders o1 LEFT JOIN orders o2 ON o1.CustomerID = o2.CustomerID;",The generated query does not calculate a monthly retention rate. It calculates an overall retention rate for 2023 by comparing distinct customers in 2023 with those before 2023. The ground truth query calculates the retention rate for each month by grouping by month and uses a subquery to get the initial customer count.,None
What is the average discount applied to orders per supplier?,"SELECT suppliers.SupplierID, suppliers.SupplierName, AVG([Order Details].Discount) AS AverageDiscount FROM suppliers INNER JOIN products ON suppliers.SupplierID = products.SupplierID INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID, suppliers.SupplierName;","```sql
SELECT p.SupplierID, AVG(od.Discount) AS AverageDiscount
FROM [Order Details] od
JOIN products p ON od.ProductID = p.ProductID
GROUP BY p.SupplierID;
```","Both queries calculate the average discount per SupplierID using join operations between the Order Details and Products tables. The inclusion of SupplierName in the ground truth does not affect the average calculation, so they yield the same result regarding the average discount per supplier.","SELECT p.SupplierID, AVG(od.Discount) AS AverageDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;","The generated query does not include the SupplierName in the SELECT clause, which is present in the ground truth query. Also, the relationship between suppliers and products tables is not explicitly stated in the generated query.",Base
What is the total revenue generated from each product?,"SELECT ProductName, SUM(Quantity * UnitPrice * (1 - Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName;","```sql
SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY products.ProductID, products.ProductName;
```","The generated query does not account for potential discounts, whereas the ground truth query includes a discount calculation in the total revenue.","SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName;","The generated query does not account for the Discount factor, which is included in the ground truth query.",None
Which supplier has the most diverse product range?,"SELECT SupplierID, COUNT(DISTINCT CategoryID) AS ProductRange FROM products GROUP BY SupplierID ORDER BY ProductRange DESC LIMIT 1;","```sql
SELECT p.SupplierID, COUNT(DISTINCT p.ProductID) AS ProductCount
FROM products p
GROUP BY p.SupplierID
ORDER BY ProductCount DESC
LIMIT 1;
```","The generated query counts distinct ProductIDs, while the ground truth query counts distinct CategoryIDs to determine product range diversity by supplier.","SELECT suppliers.CompanyName, COUNT(DISTINCT category_id) AS DiverseRange FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY suppliers.SupplierID ORDER BY DiverseRange DESC;","Both queries aim to identify the supplier with the most diverse product range by counting distinct categories per supplier. The generated query includes supplier names and category details, while the ground truth query limits the output for direct comparison. Adjusting the generated query with 'LIMIT 1' would make them fully align in purpose.",FT
Get the supplier details for products with the lowest units in stock.,"SELECT p.ProductName, s.SupplierID FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.UnitsInStock = (SELECT MIN(UnitsInStock) FROM products);","```sql
SELECT p.ProductID, p.ProductName, p.UnitsInStock, s.SupplierID, s.SupplierName
FROM products p
JOIN suppliers s ON p.SupplierID = s.SupplierID
WHERE p.UnitsInStock = (SELECT MIN(UnitsInStock) FROM products);
```","Both queries correctly identify products with the lowest units in stock and fetch the supplier details. The generated query provides more detailed output, including ProductID and UnitsInStock, but still satisfies the user's request.","SELECT s.SupplierID, s.SupplierName FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.UnitsInStock = (SELECT MIN(UnitsInStock) FROM products);","The generated query retrieves SupplierID and SupplierName, while the ground truth retrieves ProductName and SupplierID.",Base
What is the distribution of employees across different cities?,"SELECT City, COUNT(EmployeeID) AS EmployeeCount FROM employees GROUP BY City;","```sql
SELECT City, COUNT(*) AS EmployeeCount 
FROM employees 
GROUP BY City;
```","Both queries accurately count the number of employees per city, as COUNT(*) and COUNT(EmployeeID) yield the same result unless there are nulls in EmployeeID, which typically should not occur in a primary key column.","SELECT City, COUNT(EmployeeID) AS EmployeeCount FROM employees GROUP BY City ORDER BY EmployeeCount DESC;","Both queries accurately answer the user's question by counting employees in each city. The generated query also orders results by employee count, but this does not affect the accuracy of the distribution information.",both
How many orders are shipped using more than one shipping method?,"SELECT COUNT(*) FROM (SELECT OrderID, COUNT(DISTINCT ShipVia) AS MethodCount FROM orders GROUP BY OrderID HAVING MethodCount > 1) AS MultiMethodOrders;","```sql
SELECT COUNT(DISTINCT o1.OrderID) AS OrdersShippedWithMultipleMethods
FROM orders o1
JOIN orders o2 ON o1.OrderID = o2.OrderID AND o1.ShipVia <> o2.ShipVia;
```",Both queries count distinct OrderIDs where more than one shipping method (ShipVia) is used. They achieve this with different approaches but yield the same result.,SELECT COUNT(DISTINCT o1.OrderID) FROM orders o1 JOIN orders o2 ON o1.OrderID = o2.OrderID AND o1.ShipVia <> o2.ShipVia;,"Both queries count the number of orders with more than one distinct shipping method by using different approaches. The generated query uses a self-join to find orders with differing 'ShipVia', while the ground truth groups orders to count unique 'ShipVia'. Both arrive at the same result.",both
What is the total revenue attributed to each supplier?,"SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID;","```sql
SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.CompanyName;
```","Both queries calculate the total revenue for each supplier by aggregating order details related to supplier's products. The grouping column differs, but since CompanyName corresponds uniquely to SupplierID, the results will be the same.","SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName;",Both queries calculate total revenue per supplier. The difference in grouping by CompanyName vs SupplierID doesn't affect the result since CompanyName is unique to SupplierID.,both
Which month had the highest average order value?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_TRUNC('month', OrderDate) ORDER BY AvgOrderValue DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month,
       AVG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) AS AverageOrderValue
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY Month
ORDER BY AverageOrderValue DESC
LIMIT 1;
```","The generated query is incorrect because it attempts to use AVG on a SUM within the same level of aggregation without proper sub-query handling. It also incorrectly groups by formatted dates. The ground truth query calculates the average by dividing the total sum of order values by the count of distinct orders per month, which is accurate.","SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_TRUNC('month', orders.OrderDate) ORDER BY AvgOrderValue DESC LIMIT 1","Both queries calculate the average order value per month and order by descending average value, limiting the result to the top month. The main logic and calculation are the same.",FT
What is the inventory turnover ratio for each product category last quarter?,"SELECT c.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(p.UnitsInStock) AS turnover_ratio FROM [Order Details] JOIN products p ON [Order Details].ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID WHERE [Order Details].OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY c.CategoryName","```sql
SELECT categories.CategoryID, 
       SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio 
FROM [Order Details] 
JOIN products ON [Order Details].ProductID = products.ProductID 
JOIN categories ON products.CategoryID = categories.CategoryID 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30' 
GROUP BY categories.CategoryID
```","The generated query uses the date range '2023-07-01' to '2023-09-30', while the ground truth query uses '2023-01-01' to '2023-03-31'. Additionally, the generated query returns CategoryID instead of CategoryName.","SELECT categories.CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30' GROUP BY categories.CategoryID;",The generated query uses different quarter dates ('2023-07-01' to '2023-09-30') instead of the first quarter ('2023-01-01' to '2023-03-31'). It also retrieves CategoryID instead of CategoryName and handles division by zero differently.,None
List all products and their respective stock and order quantities.,"SELECT ProductName, UnitsInStock, UnitsOnOrder FROM products;","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    p.UnitsInStock, 
    p.UnitsOnOrder 
FROM 
    products p;
```","Both queries retrieve ProductName, UnitsInStock, and UnitsOnOrder from the products table, which satisfies the user's request for listing all products with their stock and order quantities.","SELECT ProductID, ProductName, UnitsInStock, UnitsOnOrder FROM products;","The generated SQL query includes the 'ProductID' column, which is not present in the ground truth query.",Base
Which supplier has delivered the highest total number of product units?,"SELECT s.SupplierID, SUM(od.Quantity) AS TotalUnits FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY TotalUnits DESC LIMIT 1;","```sql
SELECT suppliers.CompanyName, SUM([Order Details].Quantity) AS TotalUnitsDelivered
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY suppliers.CompanyName
ORDER BY TotalUnitsDelivered DESC
LIMIT 1;
```","The generated query selects the supplier's company name, while the ground truth selects the supplier's ID. Both should return the same total units delivered, but the requested output (CompanyName vs. SupplierID) differs.","SELECT s.SupplierID, s.CompanyName, SUM(od.Quantity) AS TotalUnits FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID, s.CompanyName ORDER BY TotalUnits DESC LIMIT 1;","Both queries calculate the same total number of units delivered per supplier and return the supplier with the highest total. The difference is that the generated query includes the supplier's company name in the output, but this does not affect the correctness regarding the user's question.",FT
Which shipper has the highest on-time delivery rate in 2023?,"SELECT shippers.CompanyName, (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / CAST(COUNT(orders.OrderID) AS FLOAT) * 100) AS on_time_delivery_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY shippers.CompanyName ORDER BY on_time_delivery_rate DESC LIMIT 1;","```sql
SELECT shippers.CompanyName, 
       COUNT(orders.OrderID) AS on_time_deliveries,
       COUNT(orders.OrderID) FILTER (WHERE orders.ShippedDate <= orders.RequiredDate) AS total_deliveries,
       (COUNT(orders.OrderID) FILTER (WHERE orders.ShippedDate <= orders.RequiredDate) * 1.0 / COUNT(orders.OrderID)) AS on_time_delivery_rate
FROM orders 
JOIN shippers ON orders.ShipVia = shippers.ShipperID
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY shippers.CompanyName
ORDER BY on_time_delivery_rate DESC
LIMIT 1;
```","The generated SQL query incorrectly calculates the 'total_deliveries' using 'FILTER', which is meant to calculate 'on_time_deliveries'. Only one count should be filtered in ground truth.","SELECT shippers.ShipperID, shippers.CompanyName, COUNT(orders.OrderID) AS on_time_orders, SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) AS total_orders, (SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID)) AS on_time_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY shippers.ShipperID, shippers.CompanyName ORDER BY on_time_rate DESC LIMIT 1","The generated SQL calculates on-time orders incorrectly as it does not distinguish between on-time and total orders. It also uses integer division, while the ground truth query uses a float division with a cast and percentage conversion. The WHERE clause incorrectly uses YEAR() instead of a BETWEEN condition for dates.",None
Which products should be considered for discontinuation based on sales?,SELECT ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName HAVING SUM([Order Details].Quantity) < MIN(ReorderLevel);,"```sql
SELECT p.ProductID, p.ProductName
FROM products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
HAVING SUM(od.Quantity) IS NULL OR SUM(od.Quantity) < p.ReorderLevel;
```","The generated query considers products with no sales for discontinuation and uses a LEFT JOIN with a condition on SUM(od.Quantity) to be NULL or less than the ReorderLevel. The ground truth query only checks if sales are below the ReorderLevel, using JOIN and MIN(ReorderLevel), focusing on low sales but not considering no sales.","SELECT p.ProductID, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 0 GROUP BY p.ProductID HAVING TotalSales < 100;","The queries use different criteria for discontinuation. The generated query checks for total sales less than 100, while the ground truth checks for sales less than the ReorderLevel, and it focuses on ProductName.",None
Determine the month with the highest total product sales value.,"SELECT EXTRACT(MONTH FROM o.OrderDate) AS SalesMonth, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY SalesMonth ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS SalesMonth, 
       SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSalesValue
FROM [Order Details]
JOIN Orders ON [Order Details].OrderID = Orders.OrderID
GROUP BY SalesMonth
ORDER BY TotalSalesValue DESC
LIMIT 1;
```","The generated SQL query extracts the year and month using DATE_FORMAT, while the ground truth only extracts the month. This might affect the results if there are sales from different years.","SELECT DATE_TRUNC('month', o.OrderDate) AS SaleMonth, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalSalesValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY SaleMonth ORDER BY TotalSalesValue DESC LIMIT 1;","The generated SQL query calculates TotalSalesValue considering discounts, whereas the ground truth query does not account for discounts. Additionally, the generated query uses 'DATE_TRUNC' for monthly grouping, while the ground truth query uses 'EXTRACT(MONTH)' which could lead to different interpretations if dealing with different years.",None
What are the top 5 cities with the highest number of orders?,"SELECT ShipCity, COUNT(OrderID) AS order_count FROM orders GROUP BY ShipCity ORDER BY order_count DESC LIMIT 5","```sql
SELECT ShipCity, COUNT(OrderID) AS number_of_orders
FROM orders
GROUP BY ShipCity
ORDER BY number_of_orders DESC
LIMIT 5
```","Both queries retrieve the top 5 cities ordered by the number of orders and use COUNT, GROUP BY, ORDER BY, and LIMIT correctly, resulting in the same output.","SELECT orders.ShipCity, COUNT(orders.OrderID) AS order_count FROM orders GROUP BY orders.ShipCity ORDER BY order_count DESC LIMIT 5","The generated SQL query and the ground truth query are functionally equivalent and will produce the same result, despite the slight difference in column referencing.",both
Which product generated the highest sales revenue in March 2023?,"SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY products.ProductName ORDER BY sales_revenue DESC LIMIT 1","```sql
SELECT products.ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales_revenue
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
JOIN products ON [Order Details].ProductID = products.ProductID
WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31'
GROUP BY products.ProductID
ORDER BY sales_revenue DESC
LIMIT 1;
```","The generated query selects ProductID while the ground truth query selects ProductName, which may lead to different outputs in terms of identifiers.","SELECT products.ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales_revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY products.ProductID ORDER BY sales_revenue DESC LIMIT 1;","The generated query selects ProductID while the ground truth query selects ProductName, which could yield different interpretations of the highest-selling product. The results are not the same because they group by different fields.",None
What is the average order fulfillment time each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY DATE_TRUNC('month', OrderDate);","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
       AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM orders
GROUP BY Month
```","The generated query uses DATE_FORMAT, which is typically for MySQL, while the ground truth uses DATE_TRUNC, which is used in SQL systems like PostgreSQL. The functionality might differ depending on the SQL database being used.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY Month;","The functions DATE_FORMAT and DATE_TRUNC may yield different outputs depending on the SQL dialect. DATE_FORMAT is often used in MySQL and DATE_TRUNC in PostgreSQL. The logic is similar, but they are not directly interchangeable, potentially leading to grouping differences.",None
What is the percentage of orders delivered before the required date for the last three months?,"SELECT 100 * COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN orders.OrderID END) / COUNT(orders.OrderID) AS on_time_rate FROM orders WHERE orders.OrderDate BETWEEN DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' AND CURRENT_DATE","```sql
SELECT (COUNT(orders.OrderID) FILTER (WHERE orders.ShippedDate < orders.RequiredDate) * 100.0) / COUNT(orders.OrderID) AS percentage_delivered_early
FROM orders
WHERE orders.OrderDate >= DATEADD(MONTH, -3, CURRENT_DATE);
```","The generated SQL query checks for orders shipped before the required date, not by or before as in the ground truth. It also uses a different approach for the date range by subtracting 3 months from the current date, which may not cover the last three full months.","SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN DATEADD(MONTH, -3, CURRENT_DATE) AND CURRENT_DATE","The generated SQL uses DATEADD while the ground truth uses DATE_TRUNC and INTERVAL. The interpretation of 'last three months' is not the same, leading to potentially different date ranges.",None
Which products have the highest reorder level?,SELECT ProductName FROM products WHERE ReorderLevel = (SELECT MAX(ReorderLevel) FROM products);,"```sql
SELECT ProductID, ProductName, ReorderLevel 
FROM products 
ORDER BY ReorderLevel DESC 
LIMIT 1;
```","The generated query limits the results to one product, while the ground truth query handles ties by checking all products with the highest reorder level.",SELECT ProductName FROM products ORDER BY ReorderLevel DESC LIMIT 10;,"The generated query returns the top 10 products by reorder level, while the ground truth query returns products with the maximum reorder level only.",None
Which supplier contributed the most to our total sales?,"SELECT suppliers.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS supplier_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY supplier_sales DESC LIMIT 1","```sql
SELECT products.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN products ON [Order Details].ProductID = products.ProductID 
GROUP BY products.SupplierID 
ORDER BY total_sales DESC 
LIMIT 1;
```","Both queries calculate the total sales for each supplier and order them in descending order, returning the supplier with the highest sales. The main difference is the naming of tables and columns, but they perform the same logical operations.","SELECT suppliers.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY total_sales DESC LIMIT 1;","Both queries calculate total sales per supplier and return the supplier with the maximum sales, differing only in the alias used for the sales sum.",both
What is the average discount for each order?,"SELECT OrderID, AVG(Discount) AS AverageDiscount FROM [Order Details] GROUP BY OrderID;","```sql
SELECT OrderID, AVG(Discount) AS AverageDiscount
FROM [Order Details]
GROUP BY OrderID;
```","The generated SQL query calculates the average discount per order by grouping the data by OrderID, which matches the ground truth.","SELECT [OrderID], AVG(Discount) AS AverageDiscount FROM [Order Details] GROUP BY OrderID;","The generated SQL query and the ground truth query yield the same results because the only difference is the presence of square brackets, which does not affect the outcome.",both
How often are products reordered compared to their reorder level?,"SELECT ProductName, (UnitsOnOrder - ReorderLevel) AS ReorderDifference FROM products WHERE (UnitsOnOrder - ReorderLevel) > 0;","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    p.ReorderLevel, 
    p.UnitsInStock, 
    SUM(CASE WHEN od.Quantity > p.ReorderLevel THEN 1 ELSE 0 END) AS Reorders
FROM 
    products p
LEFT JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.ProductName, p.ReorderLevel, p.UnitsInStock
```","The generated query calculates the number of reorders when the quantity exceeds the reorder level using order details, whereas the ground truth calculates the difference between units on order and reorder level for products.","SELECT ProductID, (SELECT COUNT(*) FROM [Order Details] WHERE ProductID = p.ProductID) AS ReorderCount, ReorderLevel FROM products p WHERE UnitsInStock < ReorderLevel;","The generated query counts the number of times products with low stock are reordered, while the ground truth query calculates the difference between units on order and reorder level for products that exceed their reorder level.",None
How many orders are shipped to each city?,"SELECT ShipCity, COUNT(*) AS OrderCount FROM orders GROUP BY ShipCity;","```sql
SELECT ShipCity, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY ShipCity;
```",Both queries count the number of orders grouped by ShipCity. COUNT(OrderID) and COUNT(*) are equivalent in this context since OrderID is non-null in each order row.,"SELECT ShipCity, COUNT(OrderID) AS NumOrders FROM orders GROUP BY ShipCity;",Both queries count the number of orders shipped to each city by grouping by ShipCity and the difference in counting method (OrderID vs. *) does not impact the result as OrderID is a non-null primary key.,both
How many orders were shipped late in each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY DATE_TRUNC('month', OrderDate);","```sql
SELECT 
    DATE_FORMAT(orders.ShippedDate, '%Y-%m') AS Month, 
    COUNT(orders.OrderID) AS LateOrders
FROM 
    orders
WHERE 
    orders.ShippedDate > orders.RequiredDate
GROUP BY 
    Month
ORDER BY 
    Month;
```","The generated query formats the 'ShippedDate' instead of truncating 'OrderDate' to get the month, which might lead to different monthly groupings.","SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS ShipMonth, COUNT(OrderID) AS LateShipOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipMonth;","Both queries calculate the number of orders shipped late per month using a date grouping function and counting late orders, though they use different date formatting functions.",FT
Which shipping method is used most frequently?,"SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT ShipVia, COUNT(*) AS Frequency
FROM orders
GROUP BY ShipVia
ORDER BY Frequency DESC
LIMIT 1;
```",Both queries correctly count the frequency of each shipping method using 'ShipVia' and sort the results in descending order to get the most frequently used shipping method. They both limit the results to one row for the most frequent entry.,"SELECT ShipVia, COUNT(OrderID) AS Frequency FROM orders GROUP BY ShipVia ORDER BY Frequency DESC LIMIT 1;","Both queries count the frequency of 'ShipVia' and order the results in descending order, limiting to one result, thus providing the most frequent shipping method.",both
Find the reorder levels for products nearing zero stock.,"SELECT products.ProductName, products.ReorderLevel FROM products WHERE products.UnitsInStock < products.ReorderLevel","```sql
SELECT ProductID, ReorderLevel FROM products WHERE UnitsInStock <= ReorderLevel;
```",The generated query returns products with UnitsInStock less than or equal to ReorderLevel and includes ProductID instead of ProductName.,"SELECT products.ProductID, products.ReorderLevel FROM products WHERE products.UnitsInStock > 0 AND products.UnitsInStock <= products.ReorderLevel;","The generated query filters products with stock above zero, while the ground truth includes those with stock below reorder level, not strictly greater than zero.",None
Which employee territories are underperforming in terms of sales?,"SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS territory_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryID, territories.TerritoryDescription ORDER BY territory_sales","```sql
SELECT et.TerritoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS total_sales
FROM employeeTerritories et
JOIN employees e ON et.EmployeeID = e.EmployeeID
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY et.TerritoryID
HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) < (SELECT AVG(total_sales) FROM (SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS total_sales
FROM employeeTerritories et
JOIN employees e ON et.EmployeeID = e.EmployeeID
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY et.TerritoryID) AS avg_sales);
```","The generated query includes a HAVING clause to filter underperforming territories based on sales, whereas the ground truth query simply orders the territories by sales without such a filter. The generated query attempts to identify underperforming territories, but results will differ due to the lack of equivalent filtering in the ground truth query.","To analyze the performance of employee territories in terms of sales, we need to compare the sales figures generated by employees in each territory. An underperforming territory can be identified by evaluating sales numbers against certain thresholds or averages.

Here is the SQL query for this analysis:

```sql
SELECT et.TerritoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS territory_sales
FROM [Order Details] od
JOIN orders o ON od.OrderID = o.OrderID
JOIN employees e ON o.EmployeeID = e.EmployeeID
JOIN employeeTerritories et ON e.EmployeeID = et.EmployeeID
GROUP BY et.TerritoryID
HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) < (SELECT AVG(territory_sales) FROM (SELECT et2.TerritoryID, SUM(od2.UnitPrice * od2.Quantity * (1 - od2.Discount)) AS territory_sales FROM [Order Details] od2 JOIN orders o2 ON od2.OrderID = o2.OrderID JOIN employees e2 ON o2.EmployeeID = e2.EmployeeID JOIN employeeTerritories et2 ON e2.EmployeeID = et2.EmployeeID GROUP BY et2.TerritoryID) as all_sales_of_territories);
```

This query first computes sales for each territory and then compares it against the average sales of all territories to identify underperforming ones.","The generated SQL query identifies underperforming territories by comparing against the average sales, while the ground truth query lists all territories with sales without identifying underperformance.",None
Identify the employee with the most orders shipped late.,"SELECT e.EmployeeID, COUNT(o.OrderID) AS LateOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.RequiredDate < o.ShippedDate GROUP BY e.EmployeeID ORDER BY LateOrders DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS LateOrders 
FROM orders 
WHERE ShippedDate > RequiredDate 
GROUP BY EmployeeID 
ORDER BY LateOrders DESC 
LIMIT 1;
```","Both queries calculate the number of orders an employee has shipped late and return the employee with the highest count. They will yield the same results, as the join in the ground truth query is implicit in the generated query's logic.","SELECT employees.EmployeeID, COUNT(orders.OrderID) AS LateOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate > orders.RequiredDate GROUP BY employees.EmployeeID ORDER BY LateOrders DESC LIMIT 1",Both queries correctly identify the employee with the most orders shipped late by comparing ShippedDate to RequiredDate and then counting and sorting the late orders.,both
Which products have not been ordered at all?,SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"```sql
SELECT p.ProductID, p.ProductName 
FROM products p 
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID 
WHERE od.OrderID IS NULL;
```","Both queries accurately find products that have not been ordered by selecting products not linked with any order details, though they use different methods: LEFT JOIN with IS NULL vs. NOT IN.",SELECT ProductName FROM products p WHERE p.ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"Both queries achieve the same result by selecting ProductName from the products that have ProductIDs not present in the Order Details subquery, despite a slight difference in alias usage.",both
Which city has the lowest on-time delivery rate?,"SELECT ShipCity, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0) / COUNT(*) AS OnTimeDeliveryRate FROM orders GROUP BY ShipCity ORDER BY OnTimeDeliveryRate ASC LIMIT 1;","```sql
SELECT ShipCity, 
       COUNT(OrderID) AS TotalOrders,
       COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveries,
       (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID)) AS OnTimeDeliveryRate
FROM orders
GROUP BY ShipCity
ORDER BY OnTimeDeliveryRate ASC
LIMIT 1;
```",Both queries calculate the on-time delivery rate by city and order by this rate in ascending order to find the city with the lowest rate. They are functionally equivalent despite minor differences in format.,"SELECT ShipCity, COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipCity ORDER BY OnTimeRate ASC LIMIT 1;","Both queries calculate the on-time delivery rate by comparing the ShippedDate to the RequiredDate, group by ShipCity, and order by the calculated rate in ascending order to find the city with the lowest rate.",both
Find employees living in the same city as their manager.,"SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e JOIN employees m ON e.ReportsTo = m.EmployeeID WHERE e.City = m.City;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, e.City
FROM employees e
JOIN employees m ON e.ReportsTo = m.EmployeeID
WHERE e.City = m.City;
```","Both queries return employees living in the same city as their manager. The Generated SQL Query includes an extra column (City), but it doesn't affect the core result regarding employees' matching criteria with their managers.","SELECT e1.EmployeeID, e2.EmployeeID, e2.City AS ManagerCity FROM employees e1 JOIN employees e2 ON e1.ReportsTo = e2.EmployeeID WHERE e1.City = e2.City;","The generated SQL query returns both employee and manager IDs and the city name, while the ground truth query focuses on employee details only.",Base
Find the difference in sales between the current and previous year for each employee.,"SELECT e.EmployeeID, (SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) AS SalesDifference FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","```sql
SELECT 
    e.EmployeeID,
    e.FirstName,
    e.LastName,
    COALESCE(SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) END), 0) AS CurrentYearSales,
    COALESCE(SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) END), 0) AS PreviousYearSales,
    (COALESCE(SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) END), 0) - 
     COALESCE(SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) END), 0)) AS SalesDifference
FROM 
    employees e
LEFT JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
LEFT JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    e.EmployeeID, e.FirstName, e.LastName;
```","Both queries correctly calculate the sales difference for each employee between the current and previous year. Although the generated query includes employee names and separate columns for current and previous year sales, it ultimately calculates the same sales difference as the ground truth.","SELECT e.EmployeeID, e.FirstName, e.LastName, COALESCE(SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURDATE()) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) END), 0) AS CurrentYearSales, COALESCE(SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURDATE()) - 1 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) END), 0) AS PreviousYearSales, (COALESCE(SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURDATE()) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) END), 0) - COALESCE(SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURDATE()) - 1 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) END), 0)) AS SalesDifference FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName;","Both queries calculate the sales difference between the current and previous year per employee. They use similar logic to aggregate sales, though the generated query also includes employee names and calculates current and previous year sales separately, which doesn't affect the result for the sales difference.",both
Which specific products need to be reordered immediately?,SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;
```","The generated query selects additional columns (ProductID, UnitsInStock, ReorderLevel) not present in the ground truth query, which only selects ProductName.",SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0,Both queries select the ProductName from products where the UnitsInStock is less than or equal to ReorderLevel and the product is not discontinued. The queries are functionally identical and address the user's question accurately.,FT
What are the top three countries by total sales?,"SELECT o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CountrySales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry ORDER BY CountrySales DESC LIMIT 3","```sql
SELECT ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY ShipCountry
ORDER BY TotalSales DESC
LIMIT 3;
```",Both queries accurately calculate total sales per country and order by sales in descending order to return the top three countries. 'ShipCountry' and 'o.ShipCountry' refer to the same field and do not affect the results.,"SELECT od.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY od.ShipCountry ORDER BY TotalSales DESC LIMIT 3;","The generated query uses 'od.ShipCountry' for grouping, which should be 'o.ShipCountry' as in the ground truth query. This could yield different results if the ShipCountry field is intended to come from the orders table.",Base
Identify the suppliers with late shipments on orders.,SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.RequiredDate < orders.ShippedDate GROUP BY suppliers.CompanyName;,"```sql
SELECT DISTINCT s.SupplierID, s.CompanyName
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
WHERE o.ShippedDate > o.RequiredDate;
```","Both queries correctly identify suppliers with late shipments by joining suppliers with products, order details, and orders, and checking if the ShippedDate is after the RequiredDate. The difference in structure does not affect the outcome.","SELECT products.SupplierID, orders.OrderID FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID WHERE orders.ShippedDate > orders.RequiredDate GROUP BY products.SupplierID, orders.OrderID;","The generated SQL query selects SupplierID and OrderID with late shipments, whereas the ground truth query selects CompanyName of suppliers with late shipments. They produce different outputs.",Base
What is the average shipping cost per order by shipping company?,"SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName","```sql
SELECT shippers.ShipperID, AVG(orders.Freight) AS average_shipping_cost
FROM orders
JOIN shippers ON orders.ShipVia = shippers.ShipperID
GROUP BY shippers.ShipperID
```","The generated SQL query groups by ShipperID, while the ground truth query groups by CompanyName. The results would differ if multiple ShipperIDs map to the same CompanyName.","SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",Both queries are identical and accurately calculate the average shipping cost per order by shipping company.,FT
List suppliers located in the same city.,"SELECT DISTINCT s1.CompanyName, s2.CompanyName FROM suppliers s1 JOIN suppliers s2 ON s1.City = s2.City AND s1.SupplierID < s2.SupplierID;","```sql
SELECT s1.CompanyName, s1.City
FROM suppliers s1
JOIN suppliers s2 ON s1.City = s2.City AND s1.SupplierID <> s2.SupplierID
ORDER BY s1.City;
```","The generated query returns each supplier's company name and city, listing suppliers per city. The ground truth query returns pairs of distinct supplier names from the same city.","SELECT s1.CompanyName, s2.CompanyName FROM suppliers s1 JOIN suppliers s2 ON s1.City = s2.City WHERE s1.SupplierID <> s2.SupplierID;",Both queries effectively pair suppliers from the same city but use different methods to avoid duplicate pairs.,FT
How many customers have been retained from 2022 to 2023?,SELECT COUNT(DISTINCT retained.CustomerID) FROM (SELECT CustomerID FROM orders WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31') AS previous INNER JOIN (SELECT CustomerID FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31') AS current ON previous.CustomerID = current.CustomerID,"```sql
SELECT COUNT(DISTINCT orders.CustomerID) 
FROM orders 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' 
AND orders.CustomerID IN 
    (SELECT DISTINCT orders.CustomerID 
     FROM orders 
     WHERE orders.OrderDate < '2023-01-01');
```","The generated query checks for customer activity before 2023, not specifically for 2022, which leads to different results.",SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' AND orders.CustomerID IN (SELECT orders.CustomerID FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31')) AS retained_customers;,"Both queries accurately identify customers who have made purchases in both 2022 and 2023 by using a distinct count of CustomerID. The generated query uses an IN clause, while the ground truth uses an INNER JOIN, but they achieve the same result.",FT
Which customer placed the most orders in the last year?,"SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT CustomerID, COUNT(OrderID) AS OrderCount
FROM orders
WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
GROUP BY CustomerID
ORDER BY OrderCount DESC
LIMIT 1;
```","The generated query uses a dynamic date range (past year from current date), while the ground truth query uses a fixed date range of 2022. They might not yield the same results depending on the current date.","SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;","Both queries aim to find the customer with the most orders in the last year. The generated query uses EXTRACT(YEAR FROM CURRENT_DATE) - 1 to dynamically calculate the last year, while the ground truth query uses fixed dates for the year 2022. Assuming the current year is 2023, both approaches yield equivalent results for the desired year.",FT
Which region has the most orders?,"SELECT ShipRegion, COUNT(OrderID) AS NumOrders FROM orders GROUP BY ShipRegion ORDER BY NumOrders DESC LIMIT 1;","```sql
SELECT ShipRegion, COUNT(OrderID) AS TotalOrders
FROM orders
GROUP BY ShipRegion
ORDER BY TotalOrders DESC
LIMIT 1;
```","Both queries group by ShipRegion, count the number of OrderID, and order them by the count in descending order, limiting the results to 1, thereby providing the same answer.","SELECT ShipRegion, COUNT(*) AS OrderCount FROM orders GROUP BY ShipRegion ORDER BY OrderCount DESC LIMIT 1;","Both queries count the number of orders per region and return the region with the highest count, ensuring the same result.",both
How many orders were shipped more than a week after the order date?,"SELECT COUNT(o.OrderID) AS DelayedOrders FROM orders o WHERE DATEDIFF(o.ShippedDate, o.OrderDate) > 7;","```sql
SELECT COUNT(*) AS LateShipments
FROM orders
WHERE DATEDIFF(ShippedDate, OrderDate) > 7;
```",Both queries count the number of orders where the difference between ShippedDate and OrderDate is greater than 7 days. The difference in aliases and column selection does not affect the result.,SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate - OrderDate > 7;,Both queries count the number of orders where the shipped date is more than 7 days after the order date. The difference in functions (DATEDIFF vs subtraction) does not affect the result in this context.,both
Which employee has the highest sales in the last month?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= DATE_TRUNC('MONTH', CURRENT_DATE - INTERVAL '1 MONTH') 
AND o.OrderDate < DATE_TRUNC('MONTH', CURRENT_DATE)
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY TotalSales DESC
LIMIT 1;
```","The generated query uses DATE_TRUNC and a different date range logic, which might not match the intended last month period in the ground truth query using DATEADD.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Sales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT DATE - INTERVAL '1' MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT DATE - INTERVAL '1' MONTH) GROUP BY employees.EmployeeID ORDER BY Sales DESC LIMIT 1","The generated SQL query uses MONTH and YEAR functions which may not handle year boundaries correctly, while the ground truth query uses DATEADD function for last month's date range.",None
Find the total number of products in each category.,"SELECT CategoryID, COUNT(ProductID) AS TotalProducts FROM products GROUP BY CategoryID;","```sql
SELECT CategoryID, COUNT(ProductID) AS TotalProducts
FROM products
GROUP BY CategoryID;
```",The generated SQL query matches the ground truth and accurately finds the total number of products in each category by counting ProductID for each CategoryID and using GROUP BY.,"SELECT CategoryID, COUNT(ProductID) AS TotalProducts FROM products GROUP BY CategoryID;",Both SQL queries are identical and correctly calculate the total number of products for each category using the GROUP BY clause.,both
What is the inventory turnover ratio for each product in 2023?,"SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID","```sql
SELECT products.ProductID, 
       SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio 
FROM [Order Details] 
JOIN products ON [Order Details].ProductID = products.ProductID 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' 
GROUP BY products.ProductID
```",The generated SQL query and the ground truth query are identical and should yield the same results.,"SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID","Both queries compute the inventory turnover ratio for each product in 2023 by joining the same tables, filtering by order date, and grouping by ProductID for the same calculation. The order of the joins does not affect the outcome.",both
How many products have stock levels below their reorder level?,SELECT COUNT(products.ProductID) AS low_stock_products FROM products WHERE products.UnitsInStock < products.ReorderLevel;,"```sql
SELECT COUNT(*) AS products_below_reorder_level FROM products WHERE UnitsInStock < ReorderLevel
```","Both queries count the number of products with stock levels below their reorder level, using similar logic to achieve the same result.",SELECT COUNT(products.ProductID) AS low_stock_products FROM products WHERE products.UnitsInStock < products.ReorderLevel,"Both queries count the number of products where UnitsInStock is less than ReorderLevel, and they are identical.",both
What is the total value of unshipped orders?,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS UnshippedValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE ShippedDate IS NULL;,"```sql
SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalUnshippedValue
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.ShippedDate IS NULL;
```",Both SQL queries join the 'orders' table with the 'Order Details' table and compute the total value of unshipped orders by checking where 'ShippedDate' is NULL. The calculations and conditions are equivalent in both queries.,SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS UnshippedOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.ShippedDate IS NULL;,"Both queries calculate the total value of unshipped orders by summing the product of UnitPrice, Quantity, and (1 - Discount) from the 'Order Details' table, where orders have a NULL ShippedDate. The differences in syntax do not affect the outcome.",both
Which customers received shipments to multiple countries?,SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID HAVING COUNT(DISTINCT o.ShipCountry) > 1;,"```sql
SELECT CustomerID, COUNT(DISTINCT ShipCountry) AS CountryCount
FROM orders
GROUP BY CustomerID
HAVING COUNT(DISTINCT ShipCountry) > 1;
```",Both queries effectively select customers who have shipments to more than one distinct country. They group by CustomerID and use a HAVING clause to count distinct ShipCountry values greater than one.,"SELECT c.CustomerID, COUNT(DISTINCT o.ShipCountry) AS CountryCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID HAVING CountryCount > 1;","Both queries select customers who have orders shipped to more than one distinct country. The Generated SQL query also includes the count of distinct countries, which doesn't affect the answer, making both queries equivalent in terms of identifying customers shipped to multiple countries.",both
Which suppliers provide the most products?,"SELECT s.SupplierName, COUNT(*) AS ProductCount FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierName ORDER BY ProductCount DESC","```sql
SELECT SupplierID, COUNT(ProductID) AS ProductCount
FROM products
GROUP BY SupplierID
ORDER BY ProductCount DESC;
```",The generated query only returns SupplierID and misses the SupplierName. The ground truth query joins suppliers to get SupplierName and then counts the products per supplier.,"SELECT SupplierID, COUNT(ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID ORDER BY NumberOfProducts DESC;","The generated SQL query lists SupplierID rather than SupplierName and does not join with the suppliers table, so it does not fully address the user's question as the ground truth does.",None
Which products have the highest unit prices in each category?,"SELECT p.CategoryID, p.ProductName, p.UnitPrice FROM products p JOIN (SELECT CategoryID, MAX(UnitPrice) AS MaxPrice FROM products GROUP BY CategoryID) pm ON p.CategoryID = pm.CategoryID AND p.UnitPrice = pm.MaxPrice;","```sql
SELECT p.CategoryID, p.ProductName, p.UnitPrice
FROM products p
INNER JOIN (
    SELECT CategoryID, MAX(UnitPrice) AS MaxUnitPrice
    FROM products
    GROUP BY CategoryID
) AS maxPrices ON p.CategoryID = maxPrices.CategoryID AND p.UnitPrice = maxPrices.MaxUnitPrice
```",Both queries correctly select product information by joining on the maximum unit prices within each category.,"SELECT CategoryID, MAX(UnitPrice) AS HighestPrice FROM products GROUP BY CategoryID;","The generated query only returns the highest unit price per category, while the ground truth query also returns the product names associated with those prices.",Base
What is the distribution of employee salaries?,"SELECT Salary, COUNT(EmployeeID) AS EmployeeCount FROM employees GROUP BY Salary;","```sql
SELECT Salary, COUNT(*) AS Count 
FROM employees 
GROUP BY Salary 
ORDER BY Salary;
```",Both queries group employees by salary and count the number of employees for each salary. The difference in column alias or ordering does not affect the result in terms of answering the question.,"SELECT Salary, COUNT(*) AS Frequency FROM employees GROUP BY Salary ORDER BY Salary;","Both queries are counting employees per distinct salary and grouping by salary, which provides the salary distribution.",both
What is the average discount given on each product?,"SELECT p.ProductName, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    AVG(od.Discount) as AverageDiscount
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.ProductName
```","The generated query includes 'p.ProductID' in the SELECT clause and GROUP BY clause, whereas the ground truth query only includes 'p.ProductName'. This could cause differing groupings if ProductID and ProductName are not unique mappings, potentially leading to different results.","SELECT P.ProductName, AVG(OD.Discount) AS AverageDiscount FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID GROUP BY P.ProductName;",The generated SQL query and the ground truth query are functionally equivalent. Both queries calculate the average discount per product by joining the 'products' table with the 'Order Details' table and grouping by product name. Differences in alias casing do not affect the results.,FT
What is the average discount given on all orders?,SELECT AVG(Discount) FROM [Order Details];,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details];
```","Both queries calculate the average discount from the 'Order Details' table. The generated query includes a column alias, but it does not affect the result.",SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details];,"Both queries calculate the average discount from the 'Order Details' table, thus they produce the same result.",both
Calculate the inventory turnover ratio for all products.,"SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.ProductName;
```","Both queries calculate the same inventory turnover ratio by dividing the total sales value by average inventory for each product, and they differ only in the inclusion of ProductID in the GROUP BY clause.",SELECT SUM(OD.Quantity * OD.UnitPrice) / AVG(P.UnitsInStock) AS InventoryTurnoverRatio FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID;,"The generated query does not include ProductName and lacks a GROUP BY clause, so it does not calculate turnover per product.",Base
What is the total sales revenue generated by each employee?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, 
       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","Both queries calculate the total sales revenue by employee, grouping by EmployeeID. The generated query includes employee names, which does not affect the correctness of the total sales calculation.","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;
```","The generated SQL query computes the total sales revenue by multiplying UnitPrice, Quantity, and (1 - Discount) for each employee, which matches the logic of the ground truth query. Both queries group the results by EmployeeID.",both
How many discontinued products are still listed?,SELECT COUNT(*) FROM products WHERE Discontinued = 1;,"```sql
SELECT COUNT(*) AS DiscontinuedProductCount 
FROM products 
WHERE Discontinued = 1;
```","Both queries count the number of products where the Discontinued column equals 1, which correctly answers the user's question. The difference in column alias does not affect the outcome.",SELECT COUNT(*) FROM products WHERE Discontinued = 1;,Both queries are identical and accurately count the number of discontinued products listed in the 'products' table.,both
Which region has the highest number of orders in 2023?,"SELECT region.RegionDescription, COUNT(orders.OrderID) AS order_count FROM orders JOIN territories ON orders.ShipRegion = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY region.RegionDescription ORDER BY order_count DESC LIMIT 1","```sql
SELECT o.ShipRegion, COUNT(o.OrderID) AS number_of_orders 
FROM orders o 
WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' 
GROUP BY o.ShipRegion 
ORDER BY number_of_orders DESC 
LIMIT 1;
```","The generated query uses ShipRegion from orders table, while the ground truth uses RegionDescription from a join between territories and region tables.","SELECT region.RegionDescription, COUNT(orders.OrderID) AS order_count FROM orders JOIN region ON orders.RegionID = region.RegionID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY region.RegionDescription ORDER BY order_count DESC LIMIT 1;","The generated query joins the 'orders' table directly with the 'region' table using 'RegionID,' whereas the ground truth query joins through the 'territories' table using 'TerritoryID.' This difference affects the accuracy based on how 'regions' are determined from 'orders.'",None
What is the average shipping cost per order for each customer country?,"SELECT customers.Country, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.Country","```sql
SELECT customers.Country, AVG(orders.Freight) AS average_shipping_cost
FROM orders
JOIN customers ON orders.CustomerID = customers.CustomerID
GROUP BY customers.Country
```","Both queries calculate the average shipping cost per order grouped by customer country, and the differences in alias naming ('average_shipping_cost' vs 'avg_shipping_cost') do not affect the results.","SELECT customers.Country, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.Country","The generated SQL query and the ground truth SQL query are identical, both correctly calculating the average shipping cost per order for each customer country.",both
What is the average discount applied to products in each order?,"SELECT OrderID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY OrderID;","```sql
SELECT orders.OrderID, AVG([Order Details].Discount) AS AverageDiscount
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY orders.OrderID;
```",Both queries calculate the average discount per order by grouping records based on OrderID. Joining the 'orders' table in the generated query does not affect the average calculation since the grouping key is OrderID and both datasets are joined by this same key.,"SELECT orders.OrderID, AVG([Order Details].Discount) AS AvgDiscount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY [Order Details].OrderID",Both queries calculate the average discount per OrderID and should yield the same results.,both
What are the details of orders where a discount was applied?,SELECT * FROM [Order Details] WHERE Discount > 0;,"```sql
SELECT * 
FROM [Order Details] 
WHERE Discount > 0;
```",The generated SQL query and the ground truth SQL query are identical and accurately answer the user's question about orders with a discount applied.,"SELECT DISTINCT od.*, od.Discount FROM [Order Details] od WHERE od.Discount > 0;","Both queries select all order details where a discount was applied (Discount > 0). The generated query uses DISTINCT and explicitly selects the Discount column, but it retrieves the same results as the ground truth query.",both
Which products are most frequently ordered?,"SELECT ProductID, COUNT(ProductID) AS Frequency FROM [Order Details] GROUP BY ProductID ORDER BY Frequency DESC;","```sql
SELECT ProductID, COUNT(*) AS OrderCount
FROM [Order Details]
GROUP BY ProductID
ORDER BY OrderCount DESC;
```","Both queries calculate the order count for each ProductID and order the results in descending order, achieving the same result.","SELECT od.ProductID, COUNT(od.ProductID) AS Frequency FROM [Order Details] od GROUP BY od.ProductID ORDER BY Frequency DESC;","Both queries are functionally equivalent; they group by ProductID, count the occurrences, and order by frequency in descending order. The use of alias 'od' does not change the result.",both
What is the total discount offered across all orders this month?,"SELECT SUM(od.Discount) AS TotalDiscount FROM [Order Details] od WHERE DATE_TRUNC('month', CURRENT_DATE) = DATE_TRUNC('month', OrderDate);","```sql
SELECT SUM(Discount) AS TotalDiscount
FROM ""[Order Details]""
WHERE OrderID IN (
    SELECT OrderID
    FROM Orders
    WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE)
);
```","The generated query checks OrderDate using a subquery on OrderID, but the ground truth directly compares OrderDate with the current month using DATE_TRUNC, which could yield different results.",SELECT SUM(od.Quantity * od.UnitPrice * od.Discount) FROM [Order Details] od;,"The generated query calculates the sum of discounts by multiplying quantity, unit price, and discount for each order without filtering for the current month, while the ground truth query correctly filters the orders from the current month and sums the discount values directly.",None
Which products had the highest discount applied last month?,"SELECT p.ProductName, od.Discount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate >= DATEADD(month, -1, CURRENT_DATE) AND od.OrderDate < CURRENT_DATE ORDER BY od.Discount DESC","```sql
SELECT p.ProductName, MAX(od.Discount) AS HighestDiscount
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE MONTH(od.OrderID) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH)
AND YEAR(od.OrderID) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH)
GROUP BY p.ProductName
ORDER BY HighestDiscount DESC;
```","The generated query aggregates discounts and checks the month of OrderID, which is incorrect. Ground truth uses OrderDate for the last month's date range and doesn't aggregate discounts.","SELECT p.ProductName, od.Discount, SUM(od.Quantity) AS TotalDiscountApplications FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.Discount > 0 AND od.OrderID IN (SELECT OrderID FROM orders WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE) - 1 AND YEAR(OrderDate) = YEAR(CURRENT_DATE)) GROUP BY p.ProductName, od.Discount ORDER BY TotalDiscountApplications DESC LIMIT 1;","The generated query finds the product with the highest number of discount applications, not the highest discount value. It also restricts results to last month but uses an incorrect approach with month subtraction, potentially causing errors at year boundaries. The ground truth query correctly orders products by the discount value and uses a more precise date range for 'last month'.",None
Calculate the customer retention rate for January 2022.,SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2022-01-01' AND '2022-01-31' THEN orders.CustomerID END) * 1.0 / COUNT(DISTINCT CASE WHEN orders.OrderDate < '2022-01-01' THEN orders.CustomerID END)) AS RetentionRate FROM orders;,"```sql
SELECT 
    (COUNT(DISTINCT orders.CustomerID) 
    WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-01-31') * 1.0 /
    (COUNT(DISTINCT orders.CustomerID) 
    WHERE orders.OrderDate < '2022-01-01') AS Customer_Retention_Rate
FROM 
    orders;
```",The generated SQL query contains incorrect syntax with misplaced WHERE clauses and would not execute. It doesn't use the CASE statement like the ground truth query for conditional counting.,"```sql
(SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate BETWEEN '2022-01-01' AND '2022-01-31') / (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate < '2022-01-01')
```",Both queries calculate the retention rate for January 2022 by dividing the number of unique customers who ordered in January by the number of unique customers who ordered before January. Both yield the same logic and results.,FT
What percentage of customers are repeat buyers in 2023?,"SELECT (COUNT(DISTINCT o2023.CustomerID) * 1.0 / NULLIF(COUNT(DISTINCT oBefore2023.CustomerID), 0)) AS repeat_customer_rate FROM orders o2023 JOIN orders oBefore2023 ON o2023.CustomerID = oBefore2023.CustomerID WHERE o2023.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND oBefore2023.OrderDate < '2023-01-01'","```sql
SELECT 
    (COUNT(DISTINCT orders.CustomerID) * 100.0 / (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate < '2023-01-01')) AS repeat_buyer_percentage
FROM 
    orders 
WHERE 
    OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
```","The generated SQL calculates repeat buyers based only on their purchases in 2023, without determining if they bought before 2023. The ground truth checks for previous purchases before 2023 as well.",SELECT (COUNT(DISTINCT o1.CustomerID) / COUNT(DISTINCT o2.CustomerID)) * 100 AS repeat_customer_rate FROM orders o1 JOIN (SELECT DISTINCT CustomerID FROM orders WHERE OrderDate < '2023-01-01') o2 ON o1.CustomerID = o2.CustomerID WHERE o1.OrderDate BETWEEN '2023-01-01' AND '2023-12-31';,"The generated query incorrectly divides by the count of customers who made any purchase before 2023 rather than only those who also made a purchase in 2023. The ground truth query calculates the percentage of 2023 buyers who are repeat buyers, dividing by all 2023 customers, not just those who have ever purchased before.",None
How much revenue has each customer generated over their lifetime?,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID","```sql
SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN customers ON orders.CustomerID = customers.CustomerID 
GROUP BY customers.CustomerID
```",The generated SQL query accurately answers the user's question and yields the same results as the ground truth query. Both queries calculate the revenue per customer using the same logic and structure.,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID","Both generated and ground truth SQL queries are identical and will yield the same results, calculating revenue per customer accurately.",both
What is the total quantity sold for each product this month?,"SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE DATE_TRUNC('month', CURRENT_DATE) = DATE_TRUNC('month', od.OrderDate) GROUP BY p.ProductName;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantitySold
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE MONTH(od.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(od.OrderDate) = YEAR(CURRENT_DATE)
GROUP BY p.ProductID, p.ProductName;
```","Both queries compute the total quantity sold for each product in the current month, using a join on ProductID and grouping by product. Differences in field names in the select and conditions for the current month do not affect the logical equivalence.","SELECT p.ProductID, SUM(od.Quantity) AS TotalSold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE MONTH(od.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(od.OrderDate) = YEAR(CURRENT_DATE) GROUP BY p.ProductID;",Both queries calculate the total quantity sold for each product this month using a JOIN between the 'Order Details' and 'products' tables. The difference in column selection (ProductID vs ProductName) does not affect the equivalence in terms of aggregate results per product.,both
Which city received the most shipments?,"SELECT ShipCity, COUNT(*) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 1","```sql
SELECT ShipCity, COUNT(OrderID) AS ShipmentCount
FROM orders
GROUP BY ShipCity
ORDER BY ShipmentCount DESC
LIMIT 1;
```","Both queries count the number of shipments per city and return the city with the most shipments, ordering by the count in descending order and limiting the result to one.","SELECT ShipCity, COUNT(OrderID) AS TotalShipments FROM orders GROUP BY ShipCity ORDER BY TotalShipments DESC LIMIT 1;",Both queries correctly identify the city with the highest number of shipments by counting the orders grouped by city and ordering the results in descending order to fetch the top city.,both
Identify suppliers who supply discontinued products.,SELECT SupplierID FROM products WHERE Discontinued = 1;,"```sql
SELECT DISTINCT SupplierID 
FROM products 
WHERE Discontinued = 1;
```","Both queries retrieve SupplierIDs for discontinued products, yielding the same results.",SELECT DISTINCT SupplierID FROM products WHERE Discontinued = 1;,"Both queries select SupplierID where Discontinued equals 1. The only difference is the use of DISTINCT, which doesn't change the set of supplier IDs since Ground Truth does not specify handling duplicates.",both
Which employee had the most sales in the last quarter?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(QUARTER, -1, CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months'
  AND o.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE)
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY TotalSales DESC
LIMIT 1;
```","The generated query filters orders between the start of the current quarter minus three months and the current quarter, potentially excluding some current quarter sales, which is incorrect for last quarter's sales. The ground truth uses DATEADD to get the last quarter accurately.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATEADD(QUARTER, -1, CURRENT_DATE) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","The Generated SQL Query is incorrect because DATEADD(QUARTER, -1, CURRENT_DATE) doesn't reliably return the start date of the last quarter. This needs a specific date calculation for the last quarter.",None
Which products have orders that significantly exceed their reorder levels?,SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID HAVING SUM(od.Quantity) > p.ReorderLevel;,"```sql
SELECT p.ProductID, p.ProductName, p.UnitsInStock, p.ReorderLevel, SUM(od.Quantity) AS TotalOrdered
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName, p.UnitsInStock, p.ReorderLevel
HAVING SUM(od.Quantity) > p.ReorderLevel;
```","Both queries retrieve products with total orders exceeding reorder levels, though the generated query returns additional columns.",SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity) > MAX(p.ReorderLevel);,The generated query compares the sum of quantities to the maximum reorder level across all orders rather than each product's reorder level.,Base
Analyze the products with higher sales than the average monthly performance.,"SELECT ProductID FROM (SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID) AS ProductPerformance WHERE TotalQuantity > (SELECT AVG(TotalQuantity) FROM (SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID) AS AvgPerformance);","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
HAVING SUM(od.Quantity) > (
    SELECT AVG(MonthlySales) 
    FROM (
        SELECT SUM(od.Quantity) AS MonthlySales
        FROM products p
        JOIN [Order Details] od ON p.ProductID = od.ProductID
        GROUP BY p.ProductID
    ) AS MonthlyPerformance
);
```","The generated query calculates average sales per product and compares individual product sales against this, not the monthly average performance.","SELECT p.ProductName FROM products p JOIN (SELECT ProductID, SUM(Quantity) AS TotalSales FROM [Order Details] GROUP BY ProductID) AS sales ON p.ProductID = sales.ProductID WHERE sales.TotalSales > (SELECT AVG(TotalSales) FROM (SELECT ProductID, SUM(Quantity) AS TotalSales FROM [Order Details] GROUP BY ProductID) AS avg_sales);","Both queries determine products with higher sales than the average by comparing aggregated total quantities to the average, although the generated query includes a JOIN operation to select the product name.",FT
Identify the most common shipping recipient names.,"SELECT ShipName, COUNT(*) AS Frequency FROM orders GROUP BY ShipName ORDER BY Frequency DESC LIMIT 5;","```sql
SELECT ShipName, COUNT(*) AS count
FROM orders
GROUP BY ShipName
ORDER BY count DESC;
```","The generated query does not include a LIMIT clause, so it may return more results than needed.","SELECT ShipName, COUNT(*) AS TotalOrders FROM orders GROUP BY ShipName ORDER BY TotalOrders DESC LIMIT 5;","Both queries count the number of orders per shipping recipient and order the results by the count in descending order, limiting to the top 5.",FT
Find the top 3 cities with the most suppliers.,"SELECT City, COUNT(*) AS SupplierCount FROM suppliers GROUP BY City ORDER BY SupplierCount DESC LIMIT 3;","```sql
SELECT City, COUNT(*) AS SupplierCount
FROM suppliers
GROUP BY City
ORDER BY SupplierCount DESC
LIMIT 3;
```","The generated SQL query and the ground truth query are functionally equivalent, as they both group by City, count the suppliers, order the results by SupplierCount in descending order, and limit the results to the top 3 cities.","```sql
SELECT City, COUNT(*) AS SupplierCount FROM suppliers GROUP BY City ORDER BY SupplierCount DESC LIMIT 3;
```",Both queries are identical and correctly find the top 3 cities with the most suppliers. They will yield the same results.,both
Which customers have placed the most orders?,"SELECT o.CustomerID, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.CustomerID ORDER BY OrderCount DESC;","```sql
SELECT customers.CustomerID, customers.CompanyName, COUNT(orders.OrderID) AS OrderCount
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
GROUP BY customers.CustomerID, customers.CompanyName
ORDER BY OrderCount DESC;
```","Both queries calculate the count of orders per customer and sort the results in descending order by the order count, correctly answering the user's question. The presence of 'customers.CompanyName' in the generated query does not affect the result.","SELECT customers.CustomerID, COUNT(orders.OrderID) AS OrderCount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID ORDER BY OrderCount DESC;",Both queries count the number of orders per customer and order the results by the number of orders in descending order. They produce the same output.,both
What is the current stock level for each product?,"SELECT ProductID, UnitsInStock FROM products;","```sql
SELECT ProductID, ProductName, UnitsInStock 
FROM products;
```","The generated query includes ProductName, but it still provides the necessary information: ProductID and UnitsInStock, as required by the user's question.","SELECT ProductID, ProductName, UnitsInStock FROM products;","Both queries retrieve the current stock level for each product using the UnitsInStock column. The generated query includes ProductName, which does not affect the correctness of the stock level retrieval.",both
Calculate the overall product performance score using a composite measure of sales and inventory levels.,"SELECT p.ProductID, p.ProductName, (SUM(od.Quantity) * (1 - p.Discontinued)) / (p.UnitsInStock + 1) AS ProductPerformanceScore FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID;","```sql
SELECT 
    p.ProductID, 
    SUM(od.Quantity) AS TotalSales, 
    p.UnitsInStock AS InventoryLevel, 
    (SUM(od.Quantity) / NULLIF(p.UnitsInStock, 0)) AS PerformanceScore
FROM 
    products p
LEFT JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.UnitsInStock
```","The generated query calculates the performance score as sales divided by inventory, but it doesn't handle discontinued products like the ground truth query, which adjusts sales and increments inventory.","SELECT p.ProductName, (SUM(od.Quantity) - p.UnitsInStock) AS PerformanceScore FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY PerformanceScore DESC;","The generated query calculates PerformanceScore as the difference between total order quantity and stock, while the ground truth uses a composite measure of total order quantity adjusted for discontinuation, divided by stock+1.",None
Which products have reached their reorder level as of the current date?,SELECT products.ProductName FROM products WHERE products.UnitsInStock <= products.ReorderLevel,"```sql
SELECT products.ProductID, products.ProductName, products.UnitsInStock, products.ReorderLevel 
FROM products 
WHERE products.UnitsInStock <= products.ReorderLevel;
```","The generated query returns ProductID, ProductName, UnitsInStock, and ReorderLevel, while the ground truth only returns ProductName.",SELECT p.ProductName FROM products p WHERE p.QuantityInStock <= p.ReorderLevel,"Both queries check if the stock is less than or equal to the reorder level, meaning they yield the same result.",FT
What is the total discount given for each product?,"SELECT ProductID, SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details] GROUP BY ProductID;","```sql
SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount
FROM [Order Details]
GROUP BY [Order Details].ProductID;
```","Both queries calculate the total discount for each product by summing up the product of unit price, quantity, and discount, grouped by ProductID. The only difference is the use of table aliasing, which does not affect the outcome.","SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM [Order Details] GROUP BY [Order Details].ProductID;","Both queries calculate the total discount for each product by multiplying UnitPrice, Quantity, and Discount, and then summing the results for each ProductID. The use of table alias '[Order Details]' in the generated query does not affect the accuracy of the results compared to the ground truth query.",both
How many products are currently discontinued?,SELECT COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1;,"```sql
SELECT COUNT(*) AS DiscontinuedProductsCount
FROM products
WHERE Discontinued = 1;
```","Both queries count the number of discontinued products where the column 'Discontinued' equals 1, differing only in the alias name, which does not affect the result.",SELECT COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1;,The generated SQL query and the ground truth query are identical and both correctly count the number of discontinued products.,both
Calculate the lifetime value of each customer.,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;","```sql
SELECT 
    customers.CustomerID,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue
FROM 
    customers
JOIN 
    orders ON customers.CustomerID = orders.CustomerID
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    customers.CustomerID;
```","The generated SQL query and the ground truth query are functionally equivalent and produce the same results. They have the same structure, joins, and calculations, differing only in formatting.","SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",The generated SQL query is identical to the ground truth query and accurately calculates the lifetime value for each customer by summing the total sales for each CustomerID.,both
What is the average discount given by each employee on their orders?,"SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.Discount) AS AverageDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName;","```sql
SELECT 
    employees.EmployeeID,
    employees.FirstName,
    employees.LastName,
    AVG([Order Details].Discount) AS AverageDiscount
FROM 
    employees
JOIN 
    orders ON employees.EmployeeID = orders.EmployeeID
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    employees.EmployeeID, employees.FirstName, employees.LastName;
```","The generated SQL query and the ground truth query are equivalent in functionality. Both calculate the average discount given by each employee, using the same joins and groupings.","SELECT e.EmployeeID, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","Both queries calculate the average discount given by each employee on their orders. The generated query omits the first and last name of the employee but still groups by EmployeeID, which yields the same aggregated result.",both
Identify the top-performing products based on sales.,"SELECT ProductName, SUM(Quantity) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 0 GROUP BY ProductName ORDER BY TotalSales DESC LIMIT 10;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSales DESC;
```",The generated query does not filter out discontinued products and lacks a limit to return only the top 10 results.,"SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalSales DESC;",The generated query does not filter out discontinued products and does not limit the results to the top 10.,None
What is the variance in shipping costs for each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, VARIANCE(Freight) AS FreightVariance FROM orders GROUP BY OrderMonth;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    VARIANCE(Freight) AS ShippingCostVariance
FROM 
    orders
GROUP BY 
    Month;
```","Both queries group by month and calculate the variance of freight costs, which answers the user's question.","SELECT DATE_TRUNC('month', OrderDate) AS Month, VARIANCE(Freight) AS CostVariance FROM orders GROUP BY DATE_TRUNC('month', OrderDate);","Both queries calculate the variance of the 'Freight' cost, grouped by month from the 'OrderDate'. They achieve this using equivalent methods for date truncation, ensuring the results are the same.",both
What is the total freight cost for each shipping country?,"SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry","```sql
SELECT ShipCountry, SUM(Freight) AS TotalFreightCost
FROM orders
GROUP BY ShipCountry;
```",Both queries calculate the total freight cost for each shipping country by summing the Freight values and grouping by ShipCountry. The difference in the alias name ('TotalFreightCost' vs 'TotalFreight') does not affect the results.,"SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;","Both queries calculate the sum of freight cost grouped by shipping country, and the only difference is the alias used for the sum, which does not affect the results.",both
What is the month-by-month growth in total sales?,"SELECT DATE_FORMAT(O.OrderDate, '%Y-%m') AS Month, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY Month ORDER BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales,
    LAG(SUM(UnitPrice * Quantity * (1 - Discount))) OVER (ORDER BY DATE_FORMAT(OrderDate, '%Y-%m')) AS PreviousMonthSales,
    (SUM(UnitPrice * Quantity * (1 - Discount)) - LAG(SUM(UnitPrice * Quantity * (1 - Discount))) OVER (ORDER BY DATE_FORMAT(OrderDate, '%Y-%m'))) AS Growth
FROM 
    orders o
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    Month
ORDER BY 
    Month;
```","The generated query includes calculation of growth by using the LAG window function, which is not present in the ground truth query. The ground truth query only calculates total sales per month without determining growth.","SELECT MONTH(OrderDate) AS OrderMonth, (SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) AS Sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY MONTH(OrderDate);","The generated query groups by month alone, not considering the year, while the ground truth query uses a year-month format, which distinguishes between same months in different years and orders the results.",None
What is the total freight cost for shipped orders?,SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShippedDate IS NOT NULL;,"```sql
SELECT SUM(Freight) AS TotalFreightCost
FROM orders
WHERE ShippedDate IS NOT NULL;
```",The Generated SQL Query and Ground Truth SQL Query are identical and both correctly calculate the total freight cost for shipped orders by summing the 'Freight' column where 'ShippedDate' is not null.,SELECT SUM(orders.Freight) AS TotalFreightCost FROM orders WHERE orders.ShippedDate IS NOT NULL;,The generated SQL query and the ground truth SQL query produce the same result. They both calculate the sum of the Freight column for orders that have a ShippedDate that is not NULL.,both
How much revenue is generated from orders with more than 10 units?,SELECT SUM(UnitPrice * Quantity) AS Revenue FROM [Order Details] WHERE Quantity > 10;,"```sql
SELECT SUM(od.Quantity * od.UnitPrice) AS TotalRevenue
FROM [Order Details] od
WHERE od.Quantity > 10;
```",Both queries calculate the total revenue from orders with more than 10 units by summing the product of Quantity and UnitPrice in the Order Details table. They yield the same results.,SELECT SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS Revenue FROM [Order Details] od WHERE od.Quantity > 10;,"The generated query considers discounts in the revenue calculation, while the ground truth does not.",Base
How many orders were shipped on time each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) FROM orders WHERE ShippedDate <= RequiredDate GROUP BY DATE_TRUNC('month', OrderDate);","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, 
    COUNT(orders.OrderID) AS OnTimeOrders
FROM 
    orders
WHERE 
    orders.ShippedDate <= orders.RequiredDate
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries group orders by month and count those shipped on or before the required date. They use different functions to extract the month, but both achieve the same result.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate IS NOT NULL AND ShippedDate <= RequiredDate GROUP BY month;","Both queries count the number of orders shipped on or before the required date, grouped by month. They use different functions to extract the month from the OrderDate, but the logic is the same.",both
What is the variance in shipping costs across different regions?,"SELECT ShipRegion, VAR_SAMP(Freight) AS FreightVariance FROM orders GROUP BY ShipRegion;","```sql
SELECT ShipRegion, VARIANCE(Freight) AS VarianceShippingCost
FROM orders
GROUP BY ShipRegion;
```","The generated SQL query uses the VARIANCE function, which calculates the population variance. The ground truth query uses VAR_SAMP, which calculates the sample variance. They yield different results.","SELECT ShipRegion, VARIANCE(Freight) AS FreightVariance FROM orders GROUP BY ShipRegion;","The generated query uses VARIANCE, which is not a standard function in SQL. The ground truth query uses VAR_SAMP, which is the SQL standard function for sample variance.",None
What percentage of orders have a shipping cost greater than $100?,SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM orders) AS Percentage FROM orders WHERE Freight > 100;,"```sql
SELECT (COUNT(OrderID) * 100.0 / (SELECT COUNT(OrderID) FROM orders)) AS Percentage
FROM orders
WHERE Freight > 100;
```","Both queries calculate the percentage of orders with Freight greater than 100, using the same logic and structure.",SELECT COUNT(OrderID) * 100.0 / (SELECT COUNT(*) FROM orders) AS PercentageOfHighCostOrders FROM orders WHERE Freight > 100;,Both queries calculate the percentage of orders with a shipping cost greater than $100 by dividing the count of such orders by the total order count. They will yield the same results.,both
What is the most common order quantity?,"SELECT od.Quantity, COUNT(od.Quantity) AS Frequency FROM [Order Details] od GROUP BY od.Quantity ORDER BY Frequency DESC LIMIT 1;","```sql
SELECT Quantity
FROM [Order Details]
GROUP BY Quantity
ORDER BY COUNT(*) DESC
LIMIT 1;
```","Both queries find the most common order quantity by grouping by quantity, counting occurrences, and sorting by count in descending order, then limiting to the top result.","SELECT [Order Details].Quantity, COUNT(*) AS Frequency FROM [Order Details] GROUP BY [Order Details].Quantity ORDER BY Frequency DESC LIMIT 1;","Both queries correctly find the most common order quantity by counting and sorting the quantities in descending order of frequency, returning the top result. They differ in table alias usage but yield the same result.",both
What are the top-selling products based on total sales in the last month?,"SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE) - 1 AND YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY od.ProductID, p.ProductName ORDER BY TotalSales DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.OrderID IN (
    SELECT OrderID
    FROM [Order Details]
    WHERE OrderDate >= DATEADD(MONTH, -1, GETDATE())
)
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSales DESC
LIMIT 10;
```","The generated query counts total quantities, not sales value, and checks incorrect date range using DATEADD. It also selects different columns and limits results to 10 instead of 5.","SELECT [Order Details].ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) GROUP BY [Order Details].ProductID ORDER BY TotalSales DESC;","The generated query does not correctly filter the last month's sales. It uses 'DATEADD(MONTH, -1, CURRENT_DATE)', which might not align with 'MONTH(OrderDate) = MONTH(CURRENT_DATE) - 1 AND YEAR(OrderDate) = YEAR(CURRENT_DATE)'. The ground truth query also includes a LIMIT clause, while the generated query does not.",None
Find the product with the most significant percentage sales growth month-over-month.,"SELECT p.ProductID, ((SUM(CASE WHEN EXTRACT(MONTH FROM od.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) THEN od.Quantity ELSE 0 END) - SUM(CASE WHEN EXTRACT(MONTH FROM od.OrderDate) = EXTRACT(MONTH FROM DATE_ADD('month', -1, CURRENT_DATE)) THEN od.Quantity ELSE 0 END)) / NULLIF(SUM(CASE WHEN EXTRACT(MONTH FROM od.OrderDate) = EXTRACT(MONTH FROM DATE_ADD('month', -1, CURRENT_DATE)) THEN od.Quantity ELSE 0 END), 0)) * 100 AS SalesGrowth FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY SalesGrowth DESC LIMIT 1;","```sql
WITH MonthlySales AS (
    SELECT 
        p.ProductID,
        p.ProductName,
        DATE_TRUNC('month', o.OrderDate) AS SaleMonth,
        SUM(od.Quantity) AS TotalSales
    FROM 
        products p
    JOIN 
        [Order Details] od ON p.ProductID = od.ProductID
    JOIN 
        orders o ON od.OrderID = o.OrderID
    GROUP BY 
        p.ProductID, p.ProductName, SaleMonth
),
PercentageGrowth AS (
    SELECT 
        ProductID,
        ProductName,
        SaleMonth,
        TotalSales,
        LAG(TotalSales) OVER (PARTITION BY ProductID ORDER BY SaleMonth) AS PreviousMonthSales
    FROM 
        MonthlySales
)
SELECT 
    ProductID,
    ProductName,
    SaleMonth,
    ((TotalSales - PreviousMonthSales) / PreviousMonthSales) * 100 AS SalesGrowthPercentage
FROM 
    PercentageGrowth
WHERE 
    PreviousMonthSales IS NOT NULL
ORDER BY 
    SalesGrowthPercentage DESC
LIMIT 1;
```",The generated SQL calculates percentage growth for each month's change whereas the ground truth calculates it only for the current versus previous month. The approaches differ in scope.,"SELECT ProductID, (SUM(CASE WHEN MONTH(OrderDate) = 1 THEN Quantity * UnitPrice END) - SUM(CASE WHEN MONTH(OrderDate) = 2 THEN Quantity * UnitPrice END)) / NULLIF(SUM(CASE WHEN MONTH(OrderDate) = 2 THEN Quantity * UnitPrice END), 0) * 100.0 AS Growth FROM [Order Details] GROUP BY ProductID ORDER BY Growth DESC LIMIT 1;","The generated query calculates growth between January and February specifically, while the ground truth query calculates current month vs prior month growth based on current date.",None
What is the average number of orders processed per employee each month?,"SELECT employees.EmployeeID, COUNT(orders.OrderID) / COUNT(DISTINCT EXTRACT(YEAR_MONTH FROM orders.OrderDate)) AS AvgOrdersPerMonth FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;","```sql
SELECT 
    e.EmployeeID, 
    e.FirstName, 
    e.LastName, 
    COUNT(o.OrderID) / COUNT(DISTINCT DATE_TRUNC('month', o.OrderDate)) AS AverageOrdersPerMonth
FROM 
    employees e
LEFT JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
GROUP BY 
    e.EmployeeID, e.FirstName, e.LastName
```","The generated query includes employee names and uses DATE_TRUNC('month', o.OrderDate), while the ground truth uses EXTRACT(YEAR_MONTH FROM orders.OrderDate) for month calculation. Both might yield similar results but are implemented differently, potentially affecting functionality depending on the SQL dialect.","SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) / COUNT(DISTINCT EXTRACT(YEAR FROM o.OrderDate) || '-' || EXTRACT(MONTH FROM o.OrderDate)) AS AvgOrdersPerMonth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName;","The generated query counts months by concatenating year and month as a string, while the ground truth query uses YEAR_MONTH. Both aim to count distinct months, but implementation differs. Also, the generated query includes employee names in the selection and grouping, which isn't necessary for the result.",None
What is the average fulfillment time for orders in Q1 2023?,"SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'","```sql
SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'
```","Both queries calculate the average fulfillment time in days for orders placed between January 1 and March 31, 2023. The column alias differs but doesn't impact the result.","SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31';","Both queries calculate the average fulfillment time for orders placed between 2023-01-01 and 2023-03-31, with the only difference being the presence of a semicolon in the generated query which does not affect execution results.",both
Which products are most frequently ordered together?,"SELECT od1.ProductID, od2.ProductID, COUNT(*) AS OrderedTogetherCount FROM [Order Details] od1 JOIN [Order Details] od2 ON od1.OrderID = od2.OrderID AND od1.ProductID < od2.ProductID GROUP BY od1.ProductID, od2.ProductID ORDER BY OrderedTogetherCount DESC;","```sql
SELECT od1.ProductID, od2.ProductID, COUNT(*) AS Frequency
FROM [Order Details] od1
JOIN [Order Details] od2 ON od1.OrderID = od2.OrderID AND od1.ProductID < od2.ProductID
GROUP BY od1.ProductID, od2.ProductID
ORDER BY Frequency DESC;
```","Both queries select pairs of products ordered together in the same order, counting these pairs and ordering by count, though column aliases are named differently.","SELECT od1.ProductID AS ProductA, od2.ProductID AS ProductB, COUNT(*) AS Frequency FROM [Order Details] od1 JOIN [Order Details] od2 ON od1.OrderID = od2.OrderID AND od1.ProductID <> od2.ProductID GROUP BY ProductA, ProductB ORDER BY Frequency DESC;","The generated query includes both (ProductA, ProductB) and (ProductB, ProductA) pairs, whereas the ground truth query only includes unique pairs by using od1.ProductID < od2.ProductID.",Base
Find the average order quantity per product.,"SELECT p.ProductName, AVG(od.Quantity) AS AverageQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;","```sql
SELECT 
    products.ProductID, 
    AVG([Order Details].Quantity) AS AverageOrderQuantity
FROM 
    products
JOIN 
    [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY 
    products.ProductID;
```","The generated query calculates average quantity per ProductID, while the ground truth uses ProductName. The results might differ if there are multiple products with the same name but different IDs.","SELECT ProductID, AVG(Quantity) AS AverageOrderQuantity FROM [Order Details] GROUP BY ProductID","The generated query groups by ProductID and calculates the average quantity, but it does not join with the products table to retrieve the ProductName, which is part of the ground truth query's results.",None
Which recipient received the highest number of shipments?,"SELECT ShipName, COUNT(OrderID) AS NumShipments FROM orders GROUP BY ShipName ORDER BY NumShipments DESC LIMIT 1;","```sql
SELECT ShipName, COUNT(OrderID) AS ShipmentCount
FROM orders
GROUP BY ShipName
ORDER BY ShipmentCount DESC
LIMIT 1;
```","Both queries count the number of shipments per recipient and return the recipient with the highest count, ordering by the count in descending order and limiting the result to one.","SELECT ShipName, COUNT(*), ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS Rank FROM orders GROUP BY ShipName ORDER BY COUNT(*) DESC LIMIT 1;","The generated query uses ROW_NUMBER(), introduces a 'Rank' column, and lacks an alias for COUNT(*). The ranking and additional column are unnecessary for determining the top recipient, whereas the ground truth query directly computes the count and sorts it.",Base
What is the distribution of order quantities for each employee over the last three months?,"SELECT e.FirstName, e.LastName, od.Quantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY e.FirstName, e.LastName, od.Quantity ORDER BY od.Quantity;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.Quantity) AS TotalQuantity
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= DATEADD(MONTH, -3, GETDATE())
GROUP BY e.EmployeeID, e.FirstName, e.LastName
```","The generated query calculates the sum of quantities per employee, while the ground truth query lists the quantities for each order quantity without summing them.","SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount, SUM([Order Details].Quantity) AS TotalQuantity FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY employees.EmployeeID","The generated query calculates order counts and total quantities aggregated by EmployeeID, whereas the ground truth query retrieves individual order quantities grouped by employee names and quantity.",None
Which products have an inventory turnover ratio below the average?,"SELECT ProductName FROM (SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS TurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName) AS Turnover WHERE TurnoverRatio < (SELECT AVG(TurnoverRatio) FROM (SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS TurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID) AS AvgTurnover);","```sql
SELECT p.ProductID, p.ProductName, 
       (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) AS InventoryTurnoverRatio
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
HAVING (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) < 
       (SELECT AVG(SUM(od2.Quantity * od2.UnitPrice) / AVG(p2.UnitsInStock))
        FROM products p2
        JOIN [Order Details] od2 ON p2.ProductID = od2.ProductID
        GROUP BY p2.ProductID)
```","The generated query calculates the turnover ratio incorrectly by using SUM of UnitPrice and Quantity, which would give total sales instead of turnover ratio. It also applies an incorrect calculation on AVG() functions within the subquery.",SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID HAVING SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) < (SELECT AVG(SUM(od2.Quantity * od2.UnitPrice)) / AVG(p2.UnitsInStock) FROM products p2 JOIN [Order Details] od2 ON p2.ProductID = od2.ProductID GROUP BY p2.ProductID);,The generated query uses ProductID for grouping while the ground truth query uses ProductName. This might lead to different results if multiple ProductIDs map to the same ProductName.,None
How many active products have stock quantities between their reorder level and maximum?,SELECT COUNT(ProductID) FROM products WHERE UnitsInStock > ReorderLevel AND Discontinued = 0;,"```sql
SELECT COUNT(*) AS ActiveProductsCount
FROM products
WHERE UnitsInStock > ReorderLevel AND Discontinued = 0;
```","The generated SQL query does not accurately capture the user question. Both queries do not consider the condition to check if the quantity is below the maximum stock level. Thus, neither addresses the full requirement of the user question.",SELECT COUNT(*) FROM products WHERE UnitsInStock BETWEEN ReorderLevel AND (ReorderLevel + UnitsOnOrder);,The generated query counts products with stock between reorder level and sum of reorder level and units on order. The ground truth query counts active (not discontinued) products with stock greater than reorder level. They measure different conditions.,None
Identify the top 5 customers by total revenue.,"SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalRevenue DESC LIMIT 5;","```sql
SELECT c.CustomerID, c.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.CustomerID, c.CompanyName
ORDER BY TotalRevenue DESC
LIMIT 5;
```",Both queries calculate the total revenue for each customer and return the top 5 customers based on this value. The inclusion of 'CompanyName' in the generated query does not affect the outcome.,"SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalRevenue DESC LIMIT 5;","Both the generated and ground truth SQL queries are identical, and they fetch the top 5 customers by total revenue using appropriate joins and aggregations.",both
What is the most popular product by quantity ordered?,SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY SUM(od.Quantity) DESC LIMIT 1;,"```sql
SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity
FROM [Order Details] od
GROUP BY od.ProductID
ORDER BY TotalQuantity DESC
LIMIT 1;
```","The generated query returns ProductID and TotalQuantity, while the ground truth query returns ProductName.","SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantityOrdered FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalQuantityOrdered DESC LIMIT 1;","Both queries find the most popular product by ordering the sum of quantities. 'Generated SQL' also returns the total quantity, which does not affect correctness.",FT
Who are the top 5 customers by lifetime value?,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC LIMIT 5","```sql
SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN customers ON orders.CustomerID = customers.CustomerID 
GROUP BY customers.CustomerID 
ORDER BY customer_lifetime_value DESC 
LIMIT 5
```","The generated SQL query and the ground truth query are identical in terms of logic and structure. They both calculate the customers' lifetime value, group the results by CustomerID, order by lifetime value in descending order, and limit the result to the top 5 customers.","SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY lifetime_value DESC LIMIT 5;","Both queries perform the same aggregation and ordering to find the top 5 customers by lifetime value, differing only in the alias name for the aggregate column.",both
Identify the products with the most stock variability (highest fluctuation).,"SELECT ProductName, MAX(UnitsInStock) - MIN(UnitsInStock) AS StockVariance FROM products GROUP BY ProductName ORDER BY StockVariance DESC;","```sql
SELECT ProductID, 
       MAX(UnitsInStock) - MIN(UnitsInStock) AS StockVariability
FROM products
GROUP BY ProductID
ORDER BY StockVariability DESC;
```",The generated query and the ground truth query differ in the column used for grouping: ProductID vs ProductName. These may refer to different attributes of products and may yield different results.,"SELECT p.ProductID, MAX(p.UnitsInStock) - MIN(p.UnitsInStock) AS StockFluctuation FROM products p GROUP BY p.ProductID ORDER BY StockFluctuation DESC;","The generated query returns ProductID, while the ground truth query returns ProductName. The requested information is about product identifiers, not names.",None
Which employees have earned a salary above the average?,SELECT employees.EmployeeID FROM employees WHERE Salary > (SELECT AVG(Salary) FROM employees);,"```sql
SELECT *
FROM employees
WHERE Salary > (SELECT AVG(Salary) FROM employees);
```","The generated SQL query returns all employee details, while the ground truth only selects the EmployeeID.","SELECT EmployeeID, Salary FROM employees WHERE Salary > (SELECT AVG(Salary) FROM employees);","Both queries correctly select employees who have a salary above the average. The generated SQL query includes the 'Salary' column, but this does not affect the correctness regarding the user question.",FT
Which employees have more than five years of employment?,"SELECT EmployeeID FROM employees WHERE DATEDIFF(CURRENT_DATE, HireDate) / 365 > 5;","```sql
SELECT EmployeeID, FirstName, LastName, HireDate
FROM employees
WHERE DATEDIFF(CURRENT_DATE, HireDate) > 1825;
```","Both queries effectively filter employees with more than five years of employment. The generated query uses days and assumes 365 days per year, yielding the same results as the ground truth, which directly checks for years.","SQL query: `SELECT EmployeeID FROM employees WHERE DATEDIFF(CURDATE(), HireDate) > 365 * 5;`",Both queries calculate the duration of employment by comparing the current date to the hire date and check if it exceeds five years.,both
What are the top three regions with the highest on-time delivery rate?,"SELECT ShipRegion, 100.0 * COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipRegion ORDER BY OnTimeDeliveryRate DESC LIMIT 3;","```sql
SELECT ShipRegion, 
       COUNT(OrderID) AS TotalOrders,
       SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) AS OnTimeDeliveries,
       (SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 1.0 / COUNT(OrderID)) AS OnTimeDeliveryRate
FROM orders
GROUP BY ShipRegion
ORDER BY OnTimeDeliveryRate DESC
LIMIT 3;
```","Both queries calculate the on-time delivery rate by dividing the number of on-time deliveries by the total number of orders for each region and then order by this rate in descending order, limiting the results to the top three regions.","SELECT ShipRegion, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*) AS OnTimeRate FROM orders GROUP BY ShipRegion ORDER BY OnTimeRate DESC LIMIT 3;","Both queries calculate the on-time delivery rate as the percentage of shipments that were on time for each region, and both order the results to return the top three regions. The calculations and logic are equivalent.",both
Which products have the highest orders on discount?,"SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice * od.Discount) AS DiscountedRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0 GROUP BY p.ProductID, p.ProductName ORDER BY DiscountedRevenue DESC;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantity, SUM(od.Discount * od.Quantity) AS TotalDiscount
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.Discount > 0
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalDiscount DESC;
```","The generated query orders products based on total quantity affected by discounts, while the ground truth orders by discounted revenue (quantity * price * discount).","SELECT p.ProductID, SUM(od.Quantity * od.Discount) AS total_discount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY total_discount DESC;","The generated query calculates total discount based on Quantity and Discount, whereas the ground truth query calculates discounted revenue including UnitPrice, and also includes only orders with a discount greater than 0.",None
What are the top 5 products with the highest revenue?,"SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 5;","```sql
SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue
FROM [Order Details] od
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY od.ProductID
ORDER BY Revenue DESC
LIMIT 5;
```","Both queries calculate revenue for each product by aggregating the order details, filtering for the top 5 products by revenue. The join to the orders table in the generated query doesn't affect the result since it's not used in the SELECT or WHERE clauses.","SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 5;","The generated query and the ground truth query are identical and both correctly calculate total revenue for each product, order by descending revenue, then select the top 5 products.",both
What is the average inventory level for each supplier?,"SELECT SupplierID, AVG(UnitsInStock) AS AvgInventory FROM products GROUP BY SupplierID;","```sql
SELECT
    SupplierID,
    AVG(UnitsInStock) AS AverageInventoryLevel
FROM
    products
GROUP BY
    SupplierID;
```","Both queries calculate the average inventory level for each supplier by grouping on SupplierID and averaging UnitsInStock, only differing in column alias names.","SELECT SupplierID, AVG(UnitsInStock) AS AvgInventory FROM products GROUP BY SupplierID;","Both queries calculate the average inventory level per supplier, grouping by SupplierID and averaging UnitsInStock, thus yielding the same result.",both
What are the top 3 regions with the highest order volumes?,"SELECT territories.TerritoryDescription, COUNT(orders.OrderID) AS order_count FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryDescription ORDER BY order_count DESC LIMIT 3","```sql
SELECT orders.ShipRegion, COUNT(orders.OrderID) AS order_volume
FROM orders
GROUP BY orders.ShipRegion
ORDER BY order_volume DESC
LIMIT 3;
```","The generated query counts orders by ShipRegion, while the ground truth query counts orders by TerritoryDescription, which involves joining multiple tables. They group and organize by different definitions of 'region'.","```sql
SELECT region.RegionDescription, COUNT(orders.OrderID) AS total_orders FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID JOIN region ON customers.Region = region.RegionID GROUP BY region.RegionDescription ORDER BY total_orders DESC LIMIT 3
```",The two queries differ in their joins and sources: the generated query uses customer regions while the ground truth uses employee territories to determine order volumes.,None
What is the average discount applied to each product?,"SELECT p.ProductName, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    AVG(od.Discount) AS AverageDiscount
FROM 
    products p
LEFT JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, 
    p.ProductName;
```","The generated query includes both ProductID and ProductName in the GROUP BY clause, whereas the ground truth omits ProductName. However, since ProductName is functionally dependent on ProductID, the results will be the same.","SELECT ProductID, AVG(Discount) AS AverageDiscount FROM [Order Details] GROUP BY ProductID;","The generated SQL query returns 'ProductID' instead of 'ProductName' as required by the user question according to the ground truth query, which joins with the 'products' table to obtain the product name.",Base
How many sales were made by employees hired in the last year?,"SELECT e.EmployeeID, COUNT(o.OrderID) AS RecentSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE e.HireDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY e.EmployeeID;","```sql
SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE e.HireDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);
```","The generated query calculates total sales amount, whereas the ground truth query counts the number of sales orders. They are addressing different aspects of sales.",SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE e.HireDate >= CURRENT_DATE - INTERVAL '1 YEAR';,"The generated query calculates the total sales amount, whereas the ground truth query counts the number of sales orders by employees hired in the last year.",None
How many units of each product are on order?,"SELECT ProductID, UnitsOnOrder FROM products;","```sql
SELECT ProductID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder
FROM products
GROUP BY ProductID;
```","The generated query calculates the total units on order for each product, while the ground truth query lists units on order for each product without aggregation.","SELECT ProductID, SUM(UnitsOnOrder) AS TotalOnOrder FROM products GROUP BY ProductID;","The generated SQL query calculates the total units on order for each product by using SUM and GROUP BY, which answers the user's question correctly. The ground truth query only lists the UnitsOnOrder for each product without summing them, so it does not fully answer the user's question.",None
Which orders were shipped after the required date?,SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;,"```sql
SELECT * FROM orders WHERE ShippedDate > RequiredDate;
```","The generated query selects all columns, while the ground truth query selects only the OrderID column.",SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;,The generated SQL query is identical to the ground truth query and correctly retrieves orders where the ShippedDate is after the RequiredDate.,FT
Which product has the highest sales revenue?,"SELECT products.ProductID, products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID, products.ProductName ORDER BY TotalRevenue DESC LIMIT 1;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSalesRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSalesRevenue DESC
LIMIT 1;
```","The generated query does not account for discounts in the sales revenue calculation, unlike the ground truth query.","SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalRevenue DESC LIMIT 1;","The generated query does not account for discounts, while the ground truth query does. This can lead to different results if discounts are present.",None
What is the most frequently ordered product?,"SELECT ProductName, COUNT([Order Details].OrderID) AS OrderCount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName ORDER BY OrderCount DESC FETCH FIRST 1 ROW ONLY;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantityOrdered
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalQuantityOrdered DESC
LIMIT 1;
```","The generated SQL query calculates the total quantity ordered for each product, while the ground truth query counts the number of orders each product appears in. These metrics are different, and thus the queries may not yield the same result for determining the most frequently ordered product.","SELECT od.ProductID, SUM(od.Quantity) AS TotalOrdered FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalOrdered DESC LIMIT 1;","The generated query calculates the most ordered product based on quantity, while the ground truth query determines it based on the count of orders.",None
What is the total discount provided by each employee?,"SELECT e.EmployeeID, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","```sql
SELECT employees.EmployeeID, 
       employees.FirstName, 
       employees.LastName, 
       SUM([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount) AS TotalDiscount
FROM employees
JOIN orders ON employees.EmployeeID = orders.EmployeeID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName
```","Both queries calculate the total discount by multiplying the discount rate by the quantity and unit price, then summing up these values for each employee. The only difference is that the generated query includes the employee's first and last name in the SELECT and GROUP BY clauses, but this does not affect the calculation of the total discount per employee.","SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","Both queries calculate the total discount as the product of UnitPrice, Quantity, and Discount grouped by EmployeeID. The order of multiplication doesn't affect the result.",both
What is the average shipping cost per order for the last month?,"SELECT AVG(Freight) FROM orders WHERE OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE);","```sql
SELECT AVG(Freight) AS AverageShippingCost
FROM orders
WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' 
AND OrderDate < DATE_TRUNC('month', CURRENT_DATE);
```","The generated query correctly filters orders from the last month using date boundaries, while the ground truth query uses DATEADD but incorrectly captures all dates after one month ago, not just the last month.","SELECT AVG(Freight) FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND OrderDate < DATE_TRUNC('month', CURRENT_DATE);","The generated query correctly finds records from the previous month by using date truncation for the month. However, the ground truth query includes dates from one month ago today, not necessarily the entire last month.",None
What is the total sales revenue for each category?,"SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName;","```sql
SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSalesRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.CategoryID;
```","The generated query groups by CategoryID, whereas the ground truth query groups by CategoryName and joins with the categories table. This can lead to different outputs, especially if the CategoryID does not directly imply the category name in the results.","SELECT CategoryID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID;","The generated query calculates revenue by CategoryID and includes discounts, while the ground truth groups by CategoryName without discounts.",None
Which customers placed orders in January that were shipped by a specific shipping method?,SELECT DISTINCT customers.CompanyName FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE EXTRACT(MONTH FROM orders.OrderDate) = 1 AND orders.ShipVia = 1;,"```sql
SELECT DISTINCT customers.CustomerID, customers.CompanyName, customers.ContactName
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
WHERE orders.OrderDate BETWEEN 'YYYY-01-01' AND 'YYYY-01-31'
AND orders.ShipVia = specific_shipping_method;
```","The generated query uses 'BETWEEN' with placeholders 'YYYY-01-01' and 'YYYY-01-31', which are incorrect. It also uses 'orders.ShipVia = specific_shipping_method', which requires substitution. The ground truth query uses 'EXTRACT(MONTH FROM orders.OrderDate) = 1' and a specific integer for 'orders.ShipVia'. They differ in handling dates and conditions.","SELECT customers.CustomerID, COUNT(orders.OrderID) AS OrdersCount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-01-31' AND orders.ShipVia = specific_shipping_method GROUP BY customers.CustomerID;","The generated query counts orders for each customer and filters by a variable 'specific_shipping_method' that is not defined, whereas the ground truth query selects distinct customer names and filters by a specific method with the ID '1'. The intended outputs differ.",None
Calculate the total potential revenue for products in stock.,SELECT SUM(products.UnitPrice * products.UnitsInStock) AS TotalPotentialRevenue FROM products WHERE products.Discontinued = 0;,"```sql
SELECT SUM(UnitPrice * UnitsInStock) AS TotalPotentialRevenue
FROM products
WHERE Discontinued = 0;
```","Both queries calculate the total potential revenue for non-discontinued products by multiplying UnitPrice and UnitsInStock, and summing the result for all applicable products.",SELECT SUM(UnitPrice * UnitsInStock) AS TotalPotentialRevenue FROM products WHERE Discontinued = 0;,Both queries calculate the total potential revenue for products in stock by summing the value of UnitPrice multiplied by UnitsInStock for non-discontinued products.,both
How many returning customers were there in 2023?,SELECT COUNT(DISTINCT o1.CustomerID) AS returning_customers FROM orders o1 WHERE o1.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND o1.CustomerID IN (SELECT DISTINCT o2.CustomerID FROM orders o2 WHERE o2.OrderDate < '2023-01-01'),"```sql
SELECT COUNT(DISTINCT orders.CustomerID) AS returning_customers 
FROM orders 
WHERE orders.CustomerID IN (
    SELECT CustomerID 
    FROM orders 
    WHERE OrderDate < '2023-01-01' 
) AND OrderDate BETWEEN '2023-01-01' AND '2023-12-31';
```","Both queries count distinct customers who ordered before 2023 and again within 2023, so they yield the same results.",SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND orders.CustomerID IN (SELECT orders.CustomerID FROM orders WHERE orders.OrderDate < '2023-01-01') AS returning_customers_2023,Both queries count distinct CustomerIDs from 2023 orders that also exist in orders before 2023.,both
Which employee has generated the highest total sales?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 1;
```","The generated query includes EmployeeID, FirstName, and LastName in the SELECT clause while the ground truth query only includes EmployeeID. This could lead to differences if not handled properly in grouping.","SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1","Both queries calculate the total sales for each employee by multiplying the unit price, quantity, and discount, then group by employee and return the employee with the highest sales.",FT
Calculate the Customer Lifetime Value for each customer.,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID","```sql
SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN customers ON orders.CustomerID = customers.CustomerID 
GROUP BY customers.CustomerID
```","Both queries achieve the same result, as they are syntactically and functionally identical, calculating Customer Lifetime Value by aggregating order values for each customer.","SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID","Both queries are identical and calculate the Customer Lifetime Value using the same logic for each customer, grouping by CustomerID.",both
What is the average lead time for each supplier's deliveries?,"SELECT s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.CompanyName;","```sql
SELECT 
    products.SupplierID,
    AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
JOIN 
    products ON [Order Details].ProductID = products.ProductID
GROUP BY 
    products.SupplierID;
```","The generated SQL query groups by SupplierID, while the ground truth groups by CompanyName from the suppliers table. The results might not match if multiple suppliers share the same SupplierID.","```sql
SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID JOIN products p ON od.ProductID = p.ProductID WHERE o.ShippedDate IS NOT NULL GROUP BY p.SupplierID;
```","The generated query groups by SupplierID, whereas the ground truth groups by CompanyName, potentially leading to different results.",None
What is the total discount given per month in 2023?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE YEAR(OrderDate) = 2023 GROUP BY Month;","```sql
SELECT 
    MONTH(orders.OrderDate) AS Month, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS Total_Discount
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE 
    YEAR(orders.OrderDate) = 2023
GROUP BY 
    MONTH(orders.OrderDate)
ORDER BY 
    Month;
```","The generated query groups by the numeric representation of the month, while the ground truth query aggregates by the year-month format. This can lead to different groupings.","SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m');","Both queries calculate the total discount per month for 2023, using the same logic to join tables and perform aggregation. The differences in table aliasing and date formatting do not affect the result.",FT
What is the product with the highest inventory turnover ratio?,"SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) DESC LIMIT 1;","```sql
SELECT p.ProductID, p.ProductName, 
       SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY InventoryTurnoverRatio DESC
LIMIT 1;
```","Both queries calculate the inventory turnover ratio in a similar manner and return the product with the highest ratio. The main difference is in the handling of possible division by zero, but it doesn't affect the correct result given the context.","SELECT p.ProductID, (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY InventoryTurnover DESC LIMIT 1;","The generated query fetches ProductID while the ground truth fetches ProductName. Additionally, the ground truth handles division by zero with NULLIF.",Base
How many units of each product are on order?,"SELECT ProductID, ProductName, UnitsOnOrder FROM products WHERE UnitsOnOrder > 0;","```sql
SELECT ProductID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder
FROM products
GROUP BY ProductID;
```","The generated query calculates the total units on order for each product, while the ground truth query retrieves the product details for those with more than zero units on order.","SELECT ProductName, UnitsOnOrder FROM products;",The generated query does not filter for products with units on order greater than zero and does not include ProductID.,None
How many orders were fulfilled on time this month?,SELECT COUNT(orders.OrderID) AS on_time_orders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND MONTH(orders.ShippedDate) = MONTH(CURRENT_DATE) AND YEAR(orders.ShippedDate) = YEAR(CURRENT_DATE),"```sql
SELECT COUNT(orders.OrderID) AS on_time_orders
FROM orders
WHERE orders.ShippedDate <= orders.RequiredDate
AND MONTH(orders.OrderDate) = MONTH(CURRENT_DATE())
AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE())
```","The generated query checks if orders were placed this month, while the ground truth checks if they were shipped this month.","SELECT COUNT(orders.OrderID) AS on_time_orders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND DATE_PART('month', orders.OrderDate) = DATE_PART('month', CURRENT_DATE) AND DATE_PART('year', orders.OrderDate) = DATE_PART('year', CURRENT_DATE);","The generated query filters orders based on the order date being this month, while the ground truth query filters based on the shipped date being this month. Therefore, they may yield different results.",None
What is the trend in the number of orders over time?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY Month ORDER BY Month;","```sql
SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY Month
ORDER BY Month;
```","The generated SQL query and the ground truth query perform the same operations: they both count the number of orders for each month by truncating the 'OrderDate' to monthly granularity, group the results by month, and order them accordingly. The only difference is in the alias used for the count, which does not affect the outcome of the query.","SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY Month ORDER BY Month;",The generated SQL query is identical to the ground truth query and accurately determines the trend in the number of orders over time by grouping and counting orders per month.,both
Find products with a sales decline over the past three months.,"SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IN (SELECT OrderID FROM orders WHERE OrderDate BETWEEN DATEADD(MONTH, -3, CURRENT_DATE) AND CURRENT_DATE) GROUP BY p.ProductID, p.ProductName HAVING SUM(CASE WHEN OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) THEN od.Quantity ELSE 0 END) < SUM(CASE WHEN OrderDate < DATEADD(MONTH, -1, CURRENT_DATE) THEN od.Quantity ELSE 0 END) ORDER BY SUM(od.Quantity) DESC;","```sql
SELECT p.ProductID, p.ProductName
FROM products p
JOIN (
    SELECT ProductID, SUM(Quantity) as TotalSales, 
           DATEPART(MONTH, OrderDate) as SalesMonth
    FROM [Order Details] od
    JOIN orders o ON od.OrderID = o.OrderID
    WHERE o.OrderDate >= DATEADD(MONTH, -3, GETDATE())
    GROUP BY ProductID, DATEPART(MONTH, OrderDate)
) monthly_sales
ON p.ProductID = monthly_sales.ProductID
GROUP BY p.ProductID, p.ProductName
HAVING COUNT(*) > 1 AND 
       MAX(TotalSales) < MIN(TotalSales)
```","The generated query checks for a decline in sales by comparing monthly totals and looks for products sold in the last three months, but it incorrectly assumes a decline when MAX sales are less than MIN sales, which is not sufficient for confirming a gradual decline over specific months. The ground truth query accurately compares the last month's sales to the previous months' sales.",SELECT ProductID FROM products WHERE ProductID IN (SELECT DISTINCT od.ProductID FROM [Order Details] od WHERE od.OrderID IN (SELECT DISTINCT OrderID FROM orders WHERE OrderDate >= '2023-07-01')) AND ProductID NOT IN (SELECT DISTINCT od.ProductID FROM [Order Details] od WHERE od.OrderID IN (SELECT DISTINCT OrderID FROM orders WHERE OrderDate < '2023-07-01'));,"The generated query checks for products that were sold only after a certain date, whereas the ground truth query evaluates the quantity sold over the past three months to determine a decline, comparing sales in the last month versus the two preceding months.",None
What is the average time taken to fulfill orders each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month ORDER BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
    AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM 
    orders
GROUP BY 
    Month
```","Both queries calculate the average fulfillment time per month. The difference in date formatting functions (DATE_FORMAT vs. DATE_TRUNC) is due to SQL dialect differences, but they serve the same purpose. The absence of ORDER BY in the generated query does not change the average results.","SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month","Both queries group by month and calculate the average number of days between ShippedDate and OrderDate using the DATEDIFF function. Although they use different functions to extract the month (DATE_FORMAT vs DATE_TRUNC), they provide the same logical grouping and aggregation.",both
What percentage of orders were placed by returning customers?,"SELECT COUNT(DISTINCT o.CustomerID) * 100.0 / (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR)) AS ReturningCustomerPercentage FROM orders o WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) AND o.CustomerID IN (SELECT CustomerID FROM orders WHERE OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR));","```sql
SELECT 
    (COUNT(DISTINCT o.CustomerID) WHERE o.OrderDate >= 'start_date' AND o.CustomerID IN (SELECT CustomerID FROM orders WHERE OrderDate < 'start_date')) * 100.0 / COUNT(*) AS ReturningCustomerPercentage
FROM 
    orders o;
```","The generated SQL query checks for returning customers based on 'start_date', but the ground truth query uses a date one year before today's date for filtering. Also, they calculate the customer count for different date ranges.","SELECT (COUNT(DISTINCT returning_orders.CustomerID) * 100.0 / NULLIF(total_orders.total_count, 0)) AS ReturningCustomerPercentage FROM (SELECT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate < 'start_date' GROUP BY customers.CustomerID) AS returning_orders JOIN (SELECT COUNT(o.CustomerID) AS total_count FROM orders o) AS total_orders ON 1=1;","The generated query uses a static 'start_date' and considers all past orders, while the ground truth query specifies a dynamic one-year look-back period from the current date and considers orders in the current year.",None
How much revenue did each region generate?,"SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Revenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion;","```sql
SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY ShipRegion;
```","Both queries calculate total revenue by region using identical logic and columns, differing only in alias names, which is inconsequential to the result.","SELECT ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipRegion;","Both queries calculate the revenue per region by joining the 'orders' and 'Order Details' tables using the same logic, summing up UnitPrice * Quantity * (1 - Discount) and grouping by ShipRegion. The differences in table aliasing do not affect the result.",both
Which employee has the highest total sales so far this year?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE YEAR(o.OrderDate) = YEAR(CURDATE())
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries correctly sum the total sales per employee for the current year and select the employee with the highest total sales. The generated query includes employee names, but this does not affect the accuracy in identifying the top-performing employee.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-10-31' GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","The generated query explicitly uses '2023-01-01' to '2023-10-31' whereas the ground truth uses the current year dynamically, which could yield different results if executed on dates outside this range.",Base
What are the top 3 employees by sales amount?,"SELECT EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SalesAmount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EmployeeID ORDER BY SalesAmount DESC LIMIT 3","```sql
SELECT orders.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY orders.EmployeeID
ORDER BY TotalSales DESC
LIMIT 3;
```",The SQL standard does not support LIMIT in all systems. The correct syntax for ANSI SQL is to use FETCH FIRST 3 ROWS ONLY.,"SELECT EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY EmployeeID ORDER BY TotalSales DESC LIMIT 3;","The generated SQL query uses 'LIMIT 3', which is not ANSI SQL standard. The correct standard would be 'FETCH FIRST 3 ROWS ONLY'. Other aspects like joins and calculations are identical.",None
Which employee had the highest sales last month?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) 
AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH)
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY TotalSales DESC
LIMIT 1;
```",Both queries calculate the total sales for each employee for the last month and return the employee with the highest total sales. The difference in column selection does not affect the outcome.,"SELECT employees.EmployeeID, employees.FirstName, employees.LastName, monthly_sales FROM (SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS monthly_sales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY e.EmployeeID, e.FirstName, e.LastName) AS monthly_sales_table ORDER BY monthly_sales DESC LIMIT 1;","The generated query uses DATE_SUB with CURRENT_DATE to filter last month's date range, which doesn't guarantee an exact monthly comparison. The ground truth query correctly uses MONTH and YEAR functions to ensure the sales are filtered precisely for the last calendar month.",Base
What is the shipping cost per order for each shipping method?,"SELECT ShipVia, AVG(Freight) AS avg_shipping_cost FROM orders GROUP BY ShipVia","```sql
SELECT orders.ShipVia, AVG(orders.Freight) AS shipping_cost_per_order 
FROM orders 
GROUP BY orders.ShipVia
```","Both queries calculate the average shipping cost per order for each shipping method by grouping by the ShipVia field, despite differences in the column alias.","SELECT ShipVia, AVG(Freight) AS avg_shipping_cost FROM orders GROUP BY ShipVia;","Both the generated SQL query and the ground truth SQL query are identical, and they correctly calculate the average shipping cost per order for each shipping method by grouping by ShipVia.",both
What are the products with below-average sales but above-average stock levels?,SELECT ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName HAVING SUM(Quantity) < (SELECT AVG(total_quantity) FROM (SELECT SUM(Quantity) AS total_quantity FROM [Order Details] GROUP BY ProductID) AS subquery) AND AVG(products.UnitsInStock) > (SELECT AVG(UnitsInStock) FROM products),"```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales, p.UnitsInStock
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
HAVING SUM(od.Quantity) < (SELECT AVG(TotalSales)
                            FROM (SELECT SUM(Quantity) AS TotalSales
                                  FROM [Order Details]
                                  GROUP BY ProductID) AS SalesSum)
AND p.UnitsInStock > (SELECT AVG(UnitsInStock) FROM products)
```","The generated SQL query uses p.UnitsInStock directly while the ground truth query uses AVG(products.UnitsInStock). The aggregation logic differs, affecting the conditions for stock levels.",SELECT ProductName FROM products WHERE ProductID IN (SELECT ProductID FROM [Order Details] GROUP BY ProductID HAVING SUM(Quantity) < (SELECT AVG(TotalSales) FROM (SELECT SUM(Quantity) as TotalSales FROM [Order Details] GROUP BY ProductID) as Subquery)) AND UnitsInStock > (SELECT AVG(UnitsInStock) FROM products),The generated query checks average stock levels per product instead of comparing each product's stock level directly to the overall average stock level.,None
Which product had the highest sales volume last quarter?,"SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE QUARTER(o.OrderDate) = QUARTER(CURDATE() - INTERVAL 3 MONTH) AND YEAR(o.OrderDate) = YEAR(CURDATE() - INTERVAL 3 MONTH) GROUP BY od.ProductID ORDER BY TotalQuantity DESC LIMIT 1;","```sql
SELECT 
    [Order Details].ProductID, 
    SUM([Order Details].Quantity) AS TotalQuantity
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE 
    orders.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '3 months') 
    AND orders.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE)
GROUP BY 
    [Order Details].ProductID
ORDER BY 
    TotalQuantity DESC
LIMIT 1;
```","The generated query uses DATE_TRUNC to determine the last quarter, which may not align with the logic of QUARTER and YEAR in the ground truth query.","SELECT ProductID, SUM(Quantity) AS TotalVolume FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE QUARTER(OrderDate) = QUARTER(CURRENT_DATE - INTERVAL '3' MONTH) AND YEAR(OrderDate) = YEAR(CURRENT_DATE - INTERVAL '3' MONTH) GROUP BY ProductID ORDER BY TotalVolume DESC LIMIT 1;","Both queries select the product with the highest sales volume last quarter by summing quantities, grouping by ProductID, and ordering by total in descending order. Date functions and logic are equivalent, ensuring results match.",FT
What are the total sales for each shipping country?,"SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry;","```sql
SELECT orders.ShipCountry, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY orders.ShipCountry;
```","Both queries calculate the total sales for each shipping country by joining the same tables, using the same formula, and grouping by ShipCountry.","SELECT ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCountry;","Both queries calculate the total sales for each shipping country by summing the product of UnitPrice, Quantity, and (1 - Discount) for each order detail, grouped by ShipCountry. The queries are equivalent in logic and will yield the same results.",both
What is the rate of orders with a fulfillment time under 5 days?,"SELECT (CAST(COUNT(CASE WHEN DATEDIFF(ShippedDate, OrderDate) < 5 THEN OrderID END) AS FLOAT) / COUNT(OrderID)) * 100 AS QuickFulfillmentRate FROM orders;","```sql
SELECT COUNT(OrderID) * 1.0 / COUNT(*) AS Fulfillment_Rate_Under_5_Days
FROM orders
WHERE DATEDIFF(ShippedDate, OrderDate) < 5;
```","Both queries calculate the ratio of orders with a fulfillment time under 5 days to total orders. Although they format the result differently (percentage vs. ratio), they compute the same logical outcome.","SELECT COUNT(OrderID) * 100.0 / COUNT(*) AS Fulfillment_Rate FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) < 5;","Both queries calculate the percentage of orders with a fulfillment time under 5 days, using different methods to achieve the same result.",both
Who are the top 5 sales employees based on total sales?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 5;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY TotalSales DESC
LIMIT 5
```",Both queries calculate the total sales for each employee and return the top 5 by total sales. The difference in naming columns does not affect the results.,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 5;",The generated SQL query and the ground truth query are identical. Both correctly calculate the total sales for each employee and retrieve the top 5 based on total sales.,both
What is the average age of employees?,"SELECT AVG(TIMESTAMPDIFF(YEAR, BirthDate, CURDATE())) AS AvgAge FROM employees;","```sql
SELECT AVG(YEAR(CURDATE()) - YEAR(BirthDate)) AS AverageAge FROM employees;
```",Both queries calculate the average age of employees using the current date and the BirthDate field. The methods differ but will yield the same results.,SELECT AVG(YEAR(CURDATE()) - YEAR(BirthDate)) AS AverageAge FROM employees;,"Both queries calculate the average age of employees using the birth date and the current date, although they use different methods for computing the age.",both
How many orders have been shipped late?,SELECT COUNT(*) FROM orders WHERE orders.ShippedDate > orders.RequiredDate;,"```sql
SELECT COUNT(*) AS LateOrders 
FROM orders 
WHERE ShippedDate > RequiredDate;
```","Both queries count orders where the ShippedDate is later than the RequiredDate, indicating late shipments.",SELECT COUNT(*) AS LateOrders FROM orders WHERE orders.ShippedDate > orders.RequiredDate;,Both queries calculate the count of late orders by comparing ShippedDate to RequiredDate. They yield the same result with the only difference being the alias 'LateOrders' in the first query.,both
Which products have the highest average monthly sales growth?,"SELECT ProductID, (SUM([Order Details].Quantity) / COUNT(DISTINCT EXTRACT(YEAR_MONTH FROM order_date))) AS AvgMonthlySalesGrowth FROM [Order Details] GROUP BY ProductID ORDER BY AvgMonthlySalesGrowth DESC;","```sql
SELECT p.ProductID, p.ProductName, 
       AVG(sales_growth) AS AvgMonthlySalesGrowth
FROM (
    SELECT ProductID, 
           (SUM(Quantity) - LAG(SUM(Quantity)) OVER (PARTITION BY ProductID ORDER BY MONTH(OrderDate))) / LAG(SUM(Quantity)) OVER (PARTITION BY ProductID ORDER BY MONTH(OrderDate)) AS sales_growth
    FROM [Order Details] od
    JOIN Orders o ON od.OrderID = o.OrderID
    GROUP BY ProductID, MONTH(OrderDate)
) AS monthly_growth
JOIN products p ON monthly_growth.ProductID = p.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY AvgMonthlySalesGrowth DESC;
```","The generated query calculates the growth based on the change from month to month using LAG() and averages these changes, while the ground truth query calculates the average sales per distinct year-month period without considering growth over time.","SELECT p.ProductName, AVG(monthly_sales_growth) AS AvgMonthlyGrowth FROM (SELECT ProductID, EXTRACT(YEAR FROM order_date) AS Year, EXTRACT(MONTH FROM order_date) AS Month, SUM(od.Quantity * od.UnitPrice) AS TotalSales, (SUM(od.Quantity * od.UnitPrice) - LAG(SUM(od.Quantity * od.UnitPrice)) OVER (PARTITION BY ProductID ORDER BY EXTRACT(YEAR FROM order_date), EXTRACT(MONTH FROM order_date))) / NULLIF(LAG(SUM(od.Quantity * od.UnitPrice)) OVER (PARTITION BY ProductID ORDER BY EXTRACT(YEAR FROM order_date), EXTRACT(MONTH FROM order_date)), 0) AS monthly_sales_growth FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY ProductID, Year, Month) monthly_sales GROUP BY ProductID;

","The generated query calculates the average monthly sales growth by tracking monthly changes and using LAG, whereas the ground truth query calculates the average monthly sales based on year-month without evaluating growth between months.",None
Identify the month with the highest sales volume.,"SELECT EXTRACT(YEAR FROM orders.order_date) AS Year, EXTRACT(MONTH FROM orders.order_date) AS Month, SUM([Order Details].Quantity) AS TotalSalesVolume FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Year, Month ORDER BY TotalSalesVolume DESC LIMIT 1;","```sql
SELECT 
    DATE_TRUNC('month', o.OrderDate) AS SalesMonth,
    SUM(od.Quantity) AS TotalSales
FROM 
    [Order Details] od
JOIN 
    orders o ON od.OrderID = o.OrderID
GROUP BY 
    SalesMonth
ORDER BY 
    TotalSales DESC
LIMIT 1;
```","Both queries are effectively calculating the total sales volume per month and returning the month with the highest sales. The generated query uses DATE_TRUNC to group by month, while the ground truth extracts year and month separately. Both approaches will yield the same result for identifying the month with the highest total sales.","SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.Quantity) AS SalesVolume FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY Month ORDER BY SalesVolume DESC LIMIT 1;","The generated query combines year and month into a single field and considers it for grouping, which may inaccurately result in the highest month across different years. The ground truth query groups by both year and month, preserving distinct years.",Base
Which employees have not processed any orders?,SELECT employees.EmployeeID FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderID IS NULL;,"```sql
SELECT e.EmployeeID, e.FirstName, e.LastName
FROM employees e
LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.OrderID IS NULL;
```",Both queries correctly find employees who have not processed any orders by checking for null OrderID after a left join on EmployeeID.,"SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL;","Both queries use a LEFT JOIN to find employees without matching order entries, checking for NULL OrderID to identify employees with no orders. The difference in selected columns (additional FirstName, LastName) does not affect the correctness in identifying such employees.",both
How many orders have been delivered on time?,SELECT COUNT(OrderID) FROM orders WHERE ShippedDate <= RequiredDate;,"```sql
SELECT COUNT(OrderID) AS OnTimeDeliveries
FROM orders
WHERE ShippedDate <= RequiredDate;
```","Both queries count the number of orders where the ShippedDate is on or before the RequiredDate. They are functionally equivalent, although the generated query includes an alias.",SELECT COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate;,Both queries accurately count orders shipped on or before the required date.,both
Find products with the highest unit price and lowest quantity in stock.,"SELECT ProductID, ProductName FROM products WHERE UnitsInStock = (SELECT MIN(UnitsInStock) FROM products) ORDER BY UnitPrice DESC LIMIT 1;","```sql
SELECT ProductID, ProductName, UnitPrice, UnitsInStock
FROM products
ORDER BY UnitPrice DESC, UnitsInStock ASC
LIMIT 1;
```","The generated query finds the single product with the highest UnitPrice and lowest UnitsInStock combined, whereas the ground truth query finds products with the lowest quantity in stock first and then selects the one with the highest UnitPrice.","SELECT p.ProductName, p.UnitPrice, p.UnitsInStock FROM products p WHERE p.UnitPrice = (SELECT MAX(UnitPrice) FROM products) AND p.UnitsInStock = (SELECT MIN(UnitsInStock) FROM products WHERE UnitsInStock > 0);","The generated query checks for the highest UnitPrice and lowest UnitsInStock greater than 0 simultaneously, while the ground truth query only sorts by UnitPrice after finding the lowest UnitsInStock.",None
How many unique customers placed orders each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, 
    COUNT(DISTINCT CustomerID) AS UniqueCustomers
FROM 
    orders
GROUP BY 
    DATE_FORMAT(OrderDate, '%Y-%m')
```","Both queries calculate the number of unique customers per month. The difference is in date formatting functions, but they yield the same grouping result.","SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');","Both queries group orders by month and count distinct CustomerIDs, achieving the same result.",both
What percentage of orders are completed without any discount?,"SELECT COUNT(DISTINCT OrderID) * 1.0 / NULLIF((SELECT COUNT(DISTINCT OrderID) FROM [Order Details]), 0) AS NoDiscountRate FROM [Order Details] WHERE Discount = 0;","```sql
SELECT 
    (COUNT(CASE WHEN Discount = 0 THEN 1 END) * 100.0 / COUNT(*)) AS PercentageCompletedWithoutDiscount
FROM 
    [Order Details]
```","The generated query calculates the percentage of order lines (rows) with a discount of 0, while the ground truth query calculates the percentage of unique orders with a discount of 0. These are not equivalent if an order has multiple lines.","SELECT ROUND((SUM(CASE WHEN od.Discount = 0 THEN 1 ELSE 0 END) * 100.0) / COUNT(*), 2) AS PercentageWithoutDiscount FROM [Order Details] od;","Both queries calculate the percentage of orders without a discount. The generated query calculates the percentage directly by dividing the count of order details with zero discount by the total count, while the ground truth query involves a similar calculation using distinct OrderIDs. Assuming unique OrderIDs for each order, both should give equivalent results.",FT
Which supplier has the shortest average lead time?,"SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC LIMIT 1","```sql
SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_lead_time 
FROM orders 
JOIN products ON orders.OrderID = products.ProductID 
GROUP BY products.SupplierID 
ORDER BY average_lead_time ASC 
LIMIT 1
```","The generated query incorrectly joins 'orders' and 'products' on 'OrderID' and 'ProductID'. It also omits the join with 'Order Details', missing necessary data for correct calculations.","SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC LIMIT 1",The generated SQL query is identical to the ground truth query and accurately answers the user's question by selecting the supplier with the shortest average lead time.,FT
Identify suppliers with more than five discontinued products.,SELECT s.SupplierID FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.Discontinued = 1 GROUP BY s.SupplierID HAVING COUNT(p.ProductID) > 5;,"```sql
SELECT SupplierID
FROM products
WHERE Discontinued = 1
GROUP BY SupplierID
HAVING COUNT(ProductID) > 5;
```","Both queries correctly identify suppliers with more than five discontinued products. The JOIN in the ground truth query is unnecessary if we only need SupplierID from the products table, as done in the generated query.","SELECT SupplierID, COUNT(ProductID) AS DiscontinuedCount FROM products WHERE Discontinued = 1 GROUP BY SupplierID HAVING COUNT(ProductID) > 5;",Both queries correctly identify suppliers with more than five discontinued products. The join with the suppliers table in the ground truth query is unnecessary if we're only querying 'SupplierID' from the 'products' table.,both
Identify cities with the highest average order fulfillment time.,"SELECT ShipCity, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipCity ORDER BY AvgFulfillmentTime DESC;","```sql
SELECT ShipCity, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime
FROM orders
GROUP BY ShipCity
ORDER BY AvgFulfillmentTime DESC;
```","The generated SQL query correctly identifies cities with the highest average order fulfillment time by calculating the average difference between ShippedDate and OrderDate, then ordering the results in descending order. It matches the logic of the ground truth query.","SELECT ShipCity, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipCity ORDER BY AvgFulfillmentTime DESC;","Both queries are identical and correctly calculate the average order fulfillment time by city, ordering results in descending order.",both
What is the average freight cost for orders shipped in December?,SELECT AVG(Freight) AS AverageFreightCost FROM orders WHERE EXTRACT(MONTH FROM ShippedDate) = 12,"```sql
SELECT AVG(Freight) AS AverageFreightCost
FROM orders
WHERE MONTH(OrderDate) = 12;
```","The generated SQL query filters orders by the month of the OrderDate, while the ground truth query filters orders by the month of the ShippedDate. This results in potentially different records being included in the calculation.",SELECT AVG(Freight) AS AvgFreightCost FROM orders WHERE MONTH(OrderDate) = 12;,The generated query uses OrderDate and ShippedDate correctly in the ground truth to identify December shipments.,None
What is the total revenue generated from orders in the last month?,"SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE);","```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Total_Sales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE orders.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month'
  AND orders.OrderDate < DATE_TRUNC('month', CURRENT_DATE);
```","Both queries calculate the total revenue from orders in the previous month by joining the 'orders' and 'Order Details' tables, summing product of UnitPrice, Quantity, and Discount, and using the same date range logic.","SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LastMonthTotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE);","Both queries calculate the total revenue from orders in the last month using the same logic and conditions. They differ only in the alias name for the result, which does not affect the outcome.",both
What is the inventory turnover ratio for the electronics category in 2023?,SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID JOIN orders o ON od.OrderID = o.OrderID WHERE c.CategoryName = 'Electronics' AND YEAR(o.OrderDate) = 2023,"```sql
SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio 
FROM [Order Details] 
JOIN products ON [Order Details].ProductID = products.ProductID 
JOIN categories ON products.CategoryID = categories.CategoryID 
WHERE categories.CategoryName = 'Electronics' AND YEAR(orders.OrderDate) = 2023
```","The generated query does not join the 'orders' table, which is necessary to filter by the year 2023 using the 'OrderDate' field.",SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = 2023 AND c.CategoryName = 'Electronics',"Both queries have the same logic and will yield the same results, as the order of the WHERE clause conditions does not affect the query's outcome.",FT
What are the top 5 countries in terms of supplier presence?,"SELECT Country, COUNT(DISTINCT SupplierID) AS SupplierCount FROM suppliers GROUP BY Country ORDER BY SupplierCount DESC LIMIT 5;","```sql
SELECT Country, COUNT(SupplierID) AS SupplierCount
FROM suppliers
GROUP BY Country
ORDER BY SupplierCount DESC
LIMIT 5;
```","Both queries count the number of suppliers in each country, order by the count in descending order, and limit to the top 5. The use of DISTINCT in the ground truth query is redundant if SupplierID is unique, so both queries produce the same results.","SELECT suppliers.Country, COUNT(suppliers.SupplierID) AS SupplierCount FROM suppliers GROUP BY suppliers.Country ORDER BY SupplierCount DESC LIMIT 5","Both queries count suppliers per country and select the top 5, assuming SupplierID is unique. The use of DISTINCT is irrelevant if SupplierID is inherently unique, yielding the same result.",both
Which categories have the highest number of discontinued products?,"SELECT CategoryID, COUNT(*) AS DiscontinuedCount FROM products WHERE Discontinued = 1 GROUP BY CategoryID ORDER BY DiscontinuedCount DESC;","```sql
SELECT CategoryID, COUNT(ProductID) AS DiscontinuedCount
FROM products
WHERE Discontinued = 1
GROUP BY CategoryID
ORDER BY DiscontinuedCount DESC;
```","Both queries count the number of discontinued products per category, grouping by CategoryID, and order the results by the count in descending order. The difference in the COUNT function (COUNT(ProductID) vs COUNT(*)) does not affect the outcome since all relevant rows are included in both cases.","SELECT CategoryID, COUNT(*) AS DiscontinuedCount FROM products WHERE Discontinued = 1 GROUP BY CategoryID ORDER BY DiscontinuedCount DESC;","The generated SQL query matches the ground truth query exactly, both in logic and expected result.",both
Which product has generated the highest revenue?,"SELECT ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] GROUP BY ProductID ORDER BY TotalRevenue DESC LIMIT 1;","```sql
SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Revenue
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY [Order Details].ProductID
ORDER BY Revenue DESC
LIMIT 1;
```","Both queries calculate the revenue for each product by summing up the product of UnitPrice, Quantity, and the discount factor. They group by ProductID and order the results by the calculated revenue in descending order, then limit the output to the top result. The JOIN in the generated query is unnecessary but does not affect the result since the revenue calculation is correct.","SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY Revenue DESC LIMIT 1","Both queries calculate revenue by multiplying UnitPrice, Quantity, and the discount factor, then group by ProductID and order by revenue descending, selecting the top result.",both
Which product generated the highest revenue last quarter?,"SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE QUARTER(o.OrderDate) = QUARTER(CURRENT_DATE) - 1 AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY od.ProductID ORDER BY Revenue DESC LIMIT 1","```sql
SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue
FROM ""Order Details"" od
JOIN orders o ON od.OrderID = o.OrderID
WHERE o.OrderDate >= DATEADD(QUARTER, -1, GETDATE()) AND o.OrderDate < GETDATE()
GROUP BY od.ProductID
ORDER BY Revenue DESC
LIMIT 1;
```","The generated query calculates the last quarter using DATEADD with GETDATE(), which might not correspond exactly to the previous calendar quarter. The ground truth query explicitly checks the quarter and year, ensuring it matches the previous calendar quarter.","SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS Revenue FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 month' AND OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY ProductID ORDER BY Revenue DESC LIMIT 1;","The generated query calculates the last quarter dynamically using date functions, whereas the ground truth query explicitly compares the quarter values. This can yield different results depending on the start and end of the quarter.",None
Which product categories generate the most revenue?,"SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS Revenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID ORDER BY Revenue DESC;","```sql
SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.CategoryID
ORDER BY TotalRevenue DESC;
```","The generated query does not account for discounts, which affects the revenue calculation.","SELECT CategoryID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY CategoryID ORDER BY TotalRevenue DESC;","Both queries compute the total revenue per product category by summing the discounted total price from the 'Order Details' table after joining with the 'products' table, then grouping and ordering by total revenue.",FT
What is the monthly sales performance for each product?,"SELECT ProductName, SUM([Order Details].Quantity) AS MonthlySales, EXTRACT(MONTH FROM OrderDate) AS Month FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ProductName, Month ORDER BY ProductName, Month;","```sql
SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS MonthlySales
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY products.ProductID, products.ProductName
```",The generated query does not group by or extract the month from the order dates. It only aggregates sales without considering the monthly breakdown.,"SELECT products.ProductID, SUM([Order Details].Quantity) AS TotalSales FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;","The generated query does not group by month nor does it join with orders to access the OrderDate, which is needed to determine monthly sales.",None
How does the sales quantity for a product change each month?,"SELECT P.ProductID, EXTRACT(MONTH FROM O.OrderDate) AS Month, SUM(OD.Quantity) AS MonthlyQuantity FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID JOIN orders O ON OD.OrderID = O.OrderID GROUP BY P.ProductID, EXTRACT(MONTH FROM O.OrderDate);","```sql
SELECT 
    p.ProductID,
    p.ProductName,
    DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month,
    SUM(od.Quantity) AS SalesQuantity
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
JOIN 
    orders o ON od.OrderID = o.OrderID
GROUP BY 
    p.ProductID, Month
ORDER BY 
    p.ProductID, Month;
```","The generated SQL query uses DATE_FORMAT to extract year and month combined, while the ground truth query uses EXTRACT for just the month. This could result in different grouping if orders span multiple years.","SELECT MONTH(OrderDate) AS Month, ProductID, SUM([Order Details].Quantity) AS MonthlySalesQty FROM [Order Details] JOIN Orders ON [Order Details].OrderID = Orders.OrderID GROUP BY MONTH(OrderDate), ProductID ORDER BY MONTH(OrderDate), ProductID;","The generated query groups by ProductID and MONTH(OrderDate), while the ground truth groups by P.ProductID and EXTRACT(MONTH FROM O.OrderDate). The generated query does not ensure correct grouping by ProductID relative to products table.",None
Identify trends in product sales over the last year using monthly data.,"SELECT EXTRACT(MONTH FROM OrderDate) AS Month, ProductID, SUM(Quantity) AS TotalSold FROM [Order Details] WHERE OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY EXTRACT(MONTH FROM OrderDate), ProductID ORDER BY Month;","```sql
SELECT 
    DATE_FORMAT(O.OrderDate, '%Y-%m') AS Month,
    P.ProductID,
    P.ProductName,
    SUM(OD.Quantity) AS TotalQuantitySold
FROM 
    [Order Details] OD
JOIN 
    products P ON OD.ProductID = P.ProductID
JOIN 
    orders O ON OD.OrderID = O.OrderID
WHERE 
    O.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
GROUP BY 
    Month, P.ProductID
ORDER BY 
    Month, TotalQuantitySold DESC;
```","The generated query formats the date as '%Y-%m' which results in YYYY-MM, while the ground truth extracts only the month. It also includes ProductName and orders the results differently.","SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.Quantity * od.UnitPrice) AS MonthlySales FROM orders o INNER JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY Month ORDER BY Month;","The generated query calculates total sales (price times quantity) per month, while the ground truth query calculates total quantity sold per product per month. They measure different metrics and group by different fields.",None
What is the growth rate of sales for each employee over the past year?,"SELECT e.EmployeeID, (SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) / NULLIF(SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END), 0) AS GrowthRate FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","```sql
SELECT 
    e.EmployeeID, 
    e.FirstName, 
    e.LastName, 
    (SUM(CASE WHEN o.OrderDate >= DATEADD(YEAR, -1, GETDATE()) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - 
     SUM(CASE WHEN o.OrderDate < DATEADD(YEAR, -1, GETDATE()) AND o.OrderDate >= DATEADD(YEAR, -2, GETDATE()) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) / 
    NULLIF(SUM(CASE WHEN o.OrderDate < DATEADD(YEAR, -1, GETDATE()) AND o.OrderDate >= DATEADD(YEAR, -2, GETDATE()) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END), 0) 
    AS SalesGrowthRate
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    e.EmployeeID, e.FirstName, e.LastName;
```","The generated SQL query and the ground truth use different methods to identify the past year. The generated query uses DATEADD with GETDATE(), which may not align with the calendar year in the ground truth query using YEAR(CURRENT_DATE). This can lead to different results based on the execution date.","```sql
SELECT e.EmployeeID, 
       (SUM(CASE WHEN o.OrderDate BETWEEN '2022-10-01' AND '2022-12-31' THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - 
        SUM(CASE WHEN o.OrderDate BETWEEN '2023-01-01' AND '2023-09-30' THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) /
       NULLIF(SUM(CASE WHEN o.OrderDate BETWEEN '2023-01-01' AND '2023-09-30' THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END), 0) AS SalesGrowth
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE e.EmployeeID IS NOT NULL
GROUP BY e.EmployeeID;
```","The generated query uses specific date ranges for 2022 Q4 and 2023 Q1-Q3, while the ground truth calculates based on full years using CURRENT_DATE. This makes their time periods different.",None
Identify the orders shipped with discount greater than 10%.,SELECT OrderID FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE [Order Details].Discount > 0.10;,"```sql
SELECT * 
FROM orders 
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID 
WHERE [Order Details].Discount > 0.1;
```","The generated query returns all columns, while the ground truth query returns only OrderID.",SELECT orders.OrderID FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID WHERE [Order Details].Discount > 0.1;,Both queries select OrderID from the orders with a discount greater than 10%. The table joins and conditions are equivalent.,FT
What is the monthly trend of order values for the top 3 customers by sales?,"SELECT customers.CustomerID, DATE_TRUNC('month', orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID, month ORDER BY order_value DESC LIMIT 3","```sql
SELECT 
    MONTH(orders.OrderDate) AS month, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_order_value
FROM 
    orders 
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE 
    orders.CustomerID IN (
        SELECT CustomerID
        FROM (
            SELECT orders.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
            FROM orders 
            JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
            GROUP BY orders.CustomerID
            ORDER BY total_sales DESC
            LIMIT 3
        ) AS top_customers
    )
GROUP BY 
    month
ORDER BY 
    month;
```","The generated query aims to find the monthly trend of order values for the top 3 customers by sales, while the ground truth query selects the top 3 monthly order values across all customers. They address different aspects: monthly trend vs. best months.","SELECT customers.CustomerID, EXTRACT(YEAR FROM orders.OrderDate) AS year, EXTRACT(MONTH FROM orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID, year, month ORDER BY total_value DESC FETCH FIRST 3 ROWS ONLY;","The generated query extracts the top 3 rows by total order value, not the top 3 customers. Additionally, it fetches the top 3 rows only once rather than summarizing monthly totals for the top 3 customers.",None
What is the total quantity ordered for discontinued products?,"SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1 GROUP BY p.ProductName;","```sql
SELECT SUM(od.Quantity) AS TotalQuantityOrdered
FROM [Order Details] od
JOIN products p ON od.ProductID = p.ProductID
WHERE p.Discontinued = 1;
```","Both queries calculate the total quantity ordered for discontinued products by filtering on the 'Discontinued' column. Although the ground truth query groups by product name, the generated query sums the total quantity directly, which still answers the user's question.",SELECT SUM([Order Details].Quantity) AS TotalQuantityOrdered FROM [Order Details] INNER JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1;,"Both queries calculate the total quantity ordered for discontinued products. The generated query sums the quantity directly, while the ground truth groups by product name first, which doesn't change the total sum of quantities.",both
How many distinct customers made a purchase in Q1 2023 versus Q2 2023?,"SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31') AS Q1_customers, (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30') AS Q2_customers","```sql
SELECT 
    (SELECT COUNT(DISTINCT CustomerID) 
     FROM orders 
     WHERE OrderDate BETWEEN '2023-01-01' AND '2023-03-31') AS Q1_Customers,
    (SELECT COUNT(DISTINCT CustomerID) 
     FROM orders 
     WHERE OrderDate BETWEEN '2023-04-01' AND '2023-06-30') AS Q2_Customers;
```","The generated SQL query accurately answers the user's question and should yield the same results as the ground truth query. Both queries count distinct customers for Q1 and Q2 2023 using subqueries, with matching logic and date ranges.",SELECT COUNT(DISTINCT orders.OrderID) AS q1_customers FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) BETWEEN 1 AND 3 AND YEAR(orders.OrderDate) = 2023 UNION SELECT COUNT(DISTINCT orders.OrderID) AS q2_customers FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) BETWEEN 4 AND 6 AND YEAR(orders.OrderDate) = 2023;,"The generated query counts distinct OrderIDs instead of distinct CustomerIDs, and uses a UNION instead of providing both counts in the same row.",Base
What is the average shipping time for orders shipped to each region?,"SELECT ShipRegion, AVG(DATE_PART('day', ShippedDate - OrderDate)) AS AvgShipTime FROM orders GROUP BY ShipRegion;","```sql
SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime
FROM orders
GROUP BY ShipRegion;
```","Both queries calculate the average shipping time by subtracting the OrderDate from the ShippedDate for each ShipRegion, and the difference in days is averaged per region. The generated query uses DATEDIFF which achieves the same result as DATE_PART('day', ... - ...).","SELECT ShipRegion, AVG(DATEDIFF(days, OrderDate, ShippedDate)) AS AvgShippingTime FROM orders GROUP BY ShipRegion;","The generated query uses 'DATEDIFF' which may not be supported in all SQL dialects. The ground truth query uses 'DATE_PART', which is specific to certain SQL dialects like PostgreSQL. The logic is similar, but compatibility and dialect differences mean they may not yield the same results across all systems.",Base
What is the total discount given on all orders each month?,"SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS Total_Discount
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries calculate the total discount given on all orders each month by joining the orders with order details and summing the discounted amounts. The only difference is the use of alias names and ordering clause, which does not affect the outcome.","SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].Discount * [Order Details].UnitPrice * [Order Details].Quantity) AS TotalDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month ORDER BY Month;","Both queries calculate the total discount for each month by summing the product of UnitPrice, Quantity, and Discount from the Order Details, grouped by month extracted from OrderDate, despite different functions used for month extraction and syntax differences.",both
What are the top five cities with the highest sales revenue?,"SELECT ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CitySales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCity ORDER BY CitySales DESC LIMIT 5;","```sql
SELECT o.ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY o.ShipCity
ORDER BY TotalSales DESC
LIMIT 5;
```","The queries are functionally equivalent. Both calculate total sales per city, group by city, order by sales in descending order, and limit the results to the top five. The use of different aliases for the total sales column does not impact the result.","SELECT ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCity ORDER BY TotalRevenue DESC LIMIT 5;","The generated SQL query uses 'LIMIT 5', which is not standard SQL and may not work in all databases. The rest of the query structure is equivalent, using 'TotalRevenue' instead of 'CitySales' which does not affect the result.",Base
What is the average discount offered on products?,SELECT AVG(Discount) FROM [Order Details];,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details];
```",Both queries calculate the average discount from the 'Order Details' table and provide the same result.,SELECT AVG(od.Discount) AS AvgDiscount FROM [Order Details] od;,"Both queries calculate the average discount from the 'Order Details' table, yielding the same result despite minor differences in syntax.",both
What is the total number of products that are out of stock?,SELECT COUNT(*) FROM products WHERE UnitsInStock = 0,"```sql
SELECT COUNT(*) AS total_out_of_stock FROM products WHERE UnitsInStock = 0;
```","Both queries count the number of products where UnitsInStock is 0, providing the same result.",SELECT COUNT(products.ProductID) AS out_of_stock FROM products WHERE products.UnitsInStock = 0,"Both queries count the number of products where UnitsInStock is zero, yielding the same result.",both
Which customer generated the most revenue last year?,"SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= '2022-01-01' AND o.OrderDate <= '2022-12-31' GROUP BY c.CustomerID ORDER BY TotalRevenue DESC LIMIT 1;","```sql
SELECT customers.CustomerID, customers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) - 1
GROUP BY customers.CustomerID, customers.CompanyName
ORDER BY TotalRevenue DESC
LIMIT 1;
```","Both queries calculate the total revenue per customer for the previous year and return the customer with the highest revenue. The date condition in the generated SQL is equivalent to the ground truth, although they use different methods to specify the date range.","SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers INNER JOIN orders ON customers.CustomerID = orders.CustomerID INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY customers.CustomerID ORDER BY TotalRevenue DESC LIMIT 1;","Both queries aim to find the customer with the highest total revenue from the previous year. The main difference is in the date filtering approach: the generated query uses YEAR(CURRENT_DATE) - 1, assuming CURRENT_DATE is 2023-01-01, and the ground truth query specifies exact date boundaries, but both target the same timeframe. The rest of the logic, including joins and calculations, is consistent.",both
How many distinct products have been sold?,SELECT COUNT(DISTINCT ProductID) FROM [Order Details];,"```sql
SELECT COUNT(DISTINCT ProductID) AS DistinctProductsSold
FROM [Order Details];
```","Both queries count the distinct ProductID from the 'Order Details' table, thus providing the correct answer to the user's question.",SELECT COUNT(DISTINCT ProductID) AS DistinctProducts FROM [Order Details];,"Both queries count the distinct number of ProductID in the 'Order Details' table, achieving the same result. The only difference is that the generated query uses an alias for the count, which does not affect the result.",both
What is the average time taken to fulfill orders per month?,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(DATE_DIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY month","```sql
SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_fulfillment_time
FROM orders
GROUP BY month
```","The functions 'DATEDIFF' and 'DATE_DIFF' need to be standardized, but 'DATEDIFF' is correct. Other than that, both queries are effectively the same.","SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')","Both queries compute the average fulfillment time per month using DATEDIFF to calculate the difference between ShippedDate and OrderDate. The difference in function naming (DATEDIFF vs DATE_DIFF) is likely a typo or dialect variation. Both group by month, so they will yield the same results.",FT
What is the total order quantity for each product?,"SELECT products.ProductID, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID;","```sql
SELECT ProductID, SUM(Quantity) AS TotalOrderQuantity
FROM [Order Details]
GROUP BY ProductID;
```","Both queries calculate the total quantity for each product using SUM on 'Order Details'. Assuming 'ProductID' exists in both 'Order Details' and 'products', the results would be the same.","SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalOrderQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;","The generated query groups by ProductName, while the ground truth query groups by ProductID, which might lead to different results if there are multiple products with the same name.",Base
What is the total sales for each product?,"SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] GROUP BY [Order Details].ProductID;","```sql
SELECT 
    [Order Details].ProductID, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM 
    [Order Details]
GROUP BY 
    [Order Details].ProductID;
```","The generated SQL query is functionally the same as the ground truth query, both calculate total sales per product.","SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] GROUP BY [Order Details].ProductID","The generated SQL query and the ground truth query are functionally identical, both returning the total sales for each product after applying the discount and aggregating by ProductID.",both
Which product generates the highest revenue?,"SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalRevenue FROM [Order Details] GROUP BY ProductID ORDER BY TotalRevenue DESC LIMIT 1","```sql
SELECT OrderDetails.ProductID, 
       SUM(OrderDetails.UnitPrice * OrderDetails.Quantity * (1 - OrderDetails.Discount)) AS Revenue
FROM [Order Details] AS OrderDetails
JOIN orders AS Orders ON OrderDetails.OrderID = Orders.OrderID
GROUP BY OrderDetails.ProductID
ORDER BY Revenue DESC
LIMIT 1;
```","Both queries calculate revenue per product and return the highest, despite the generated query having an unnecessary join.","SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY Revenue DESC LIMIT 1;","Both queries calculate the total revenue for each product and return the product with the highest revenue. The calculations and logic are equivalent, even though the column aliases differ.",both
What is the average fulfillment time for orders in 2023?,"SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'","```sql
SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
```","Both queries calculate the average fulfillment time for orders in 2023 using the same logic, despite using different alias names.","SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'","Both queries calculate the average fulfillment time for orders in 2023 using the same logic and conditions. The only difference is the alias name, which does not affect the result.",both
Which category of products generated the most sales in 2023?,"SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY categories.CategoryName ORDER BY sales DESC LIMIT 1;","```sql
SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN categories ON products.CategoryID = categories.CategoryID
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY categories.CategoryName
ORDER BY total_sales DESC
LIMIT 1;
```","Both queries calculate total sales per category for 2023 and identify the category with the highest sales. Although the date filtering is different, they are logically equivalent for this context.","SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY categories.CategoryName ORDER BY total_sales DESC LIMIT 1",Both queries calculate total sales for each category in 2023 using the same logic and return the top category based on total sales.,both
What is the trend of total sales revenue over the past year?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY DATE_FORMAT(OrderDate, '%Y-%m') DESC;","```sql
SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Total_Sales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
GROUP BY Month
ORDER BY Month;
```","The generated query orders the results in ascending order by 'Month', while the ground truth orders them in descending order. This discrepancy affects the presentation of the trend.","SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m');","The generated query lacks an ORDER BY clause, which means the trend direction (e.g., chronological order) may not be clear.",None
Identify the products with the largest discrepancies between units on order and units in stock.,"SELECT ProductID, ProductName, UnitsOnOrder - UnitsInStock AS Discrepancy FROM products ORDER BY Discrepancy DESC;","```sql
SELECT ProductID, UnitsInStock, UnitsOnOrder, (UnitsOnOrder - UnitsInStock) AS Discrepancy
FROM products
ORDER BY Discrepancy DESC;
```","The generated query does not include ProductName, which is present in the ground truth query.","SELECT p.ProductName, (p.UnitsOnOrder - p.UnitsInStock) AS Discrepancy FROM products p WHERE p.UnitsOnOrder - p.UnitsInStock > 0 ORDER BY Discrepancy DESC;","The generated query only includes products where the discrepancy is positive, while the ground truth query includes all products regardless of whether the discrepancy is positive or negative. Additionally, the generated query omits ProductID which is included in the ground truth query.",None
Which suppliers have the lowest average lead time for delivery?,"SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY avg_lead_time ASC","```sql
SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_lead_time 
FROM orders 
JOIN products ON orders.OrderID = products.ProductID 
GROUP BY products.SupplierID 
ORDER BY average_lead_time ASC
```","The generated query joins orders directly with products using OrderID and ProductID, which is incorrect. The ground truth query uses [Order Details] to establish the correct relationship between orders and products and includes the suppliers table to get the CompanyName. These differences result in different outcomes.","SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE orders.ShippedDate IS NOT NULL AND orders.OrderDate IS NOT NULL GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC",The generated SQL query returns SupplierID instead of CompanyName and includes a NULL check not present in the ground truth.,None
What is the growth rate in customer orders year over year?,"SELECT EXTRACT(YEAR FROM o.OrderDate) AS Year, COUNT(o.OrderID) AS OrderCount, COUNT(o.OrderID) - LAG(COUNT(o.OrderID)) OVER (ORDER BY EXTRACT(YEAR FROM o.OrderDate)) AS OrderGrowth FROM orders o GROUP BY EXTRACT(YEAR FROM o.OrderDate);","```sql
SELECT 
    YEAR(OrderDate) AS Year,
    COUNT(OrderID) AS TotalOrders,
    (COUNT(OrderID) - LAG(COUNT(OrderID)) OVER (ORDER BY YEAR(OrderDate))) * 1.0 / LAG(COUNT(OrderID)) OVER (ORDER BY YEAR(OrderDate)) AS GrowthRate
FROM 
    orders
GROUP BY 
    YEAR(OrderDate)
ORDER BY 
    Year;
```","The Generated SQL Query calculates the growth rate as a percentage, whereas the Ground Truth Query calculates the difference in order count directly. The expressions for calculating growth are different.","SELECT EXTRACT(YEAR FROM OrderDate) AS Year, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY Year ORDER BY Year;","The generated query calculates total orders per year but does not compute the year-over-year growth, which involves comparing orders of consecutive years.",None
What is the total sales generated by employees hired in the last five years?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE employees.HireDate >= DATE_SUB(CURRENT_DATE, INTERVAL 5 YEAR) GROUP BY employees.EmployeeID;","```sql
SELECT 
    e.EmployeeID, 
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
WHERE 
    e.HireDate >= DATEADD(YEAR, -5, GETDATE())
GROUP BY 
    e.EmployeeID;
```","The generated query uses DATEADD and GETDATE, which are SQL Server functions, whereas the ground truth uses DATE_SUB and CURRENT_DATE, which are MySQL functions. This could lead to differences in execution if the database is not SQL Server.","SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e INNER JOIN orders o ON e.EmployeeID = o.EmployeeID INNER JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE e.HireDate >= DATE_SUB(CURRENT_DATE, INTERVAL 5 YEAR);","The generated query does not group the results by EmployeeID, causing it to return the total sales for all eligible employees instead of individual totals for each employee as in the ground truth query.",None
What is the total quantity ordered for products with discontinued status?,SELECT SUM(Quantity) FROM [Order Details] INNER JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1;,"```sql
SELECT SUM([Order Details].Quantity) AS TotalQuantityOrdered
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
WHERE products.Discontinued = 1;
```",Both queries calculate the total quantity ordered for products with a discontinued status by performing a join on the same tables and applying the same condition.,SELECT SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 1;,"Both queries select the sum of quantities from the 'Order Details' table, joining with the 'products' table on ProductID, and both filter for products where Discontinued is 1.",both
What is the average order fulfillment time for the last 6 months?,"SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time FROM orders WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)","```sql
SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time 
FROM orders 
WHERE orders.OrderDate >= DATEADD(MONTH, -6, GETDATE())
```","The generated query uses GETDATE() and DATEADD, which are functions from SQL Server, while the ground truth query uses CURDATE() and DATE_SUB, which are MySQL functions. They may not yield the same results depending on the SQL environment.","SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_order_fulfillment_time FROM orders WHERE orders.ShippedDate BETWEEN DATEADD(MONTH, -6, CURRENT_DATE) AND CURRENT_DATE","The generated query filters by ShippedDate, while the ground truth query filters by OrderDate, leading to potentially different date ranges.",None
List orders with a required date earlier than the order date.,SELECT OrderID FROM orders WHERE RequiredDate < OrderDate;,"```sql
SELECT *
FROM orders
WHERE RequiredDate < OrderDate;
```","The generated query selects all columns, whereas the ground truth query selects only the OrderID column.",SELECT OrderID FROM orders WHERE RequiredDate < OrderDate;,Both queries are identical and correctly select orders where the required date is earlier than the order date.,FT
What is the total number of orders shipped by each shipping method per employee?,"SELECT employees.EmployeeID, ShipVia, COUNT(orders.OrderID) AS ShippedOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, ShipVia;","```sql
SELECT e.EmployeeID, COUNT(o.OrderID) AS TotalOrders, o.ShipVia
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.ShippedDate IS NOT NULL
GROUP BY e.EmployeeID, o.ShipVia;
```","Both queries compute the total number of orders shipped per employee and shipping method, including only orders that have a shipped date.","SELECT employees.EmployeeID, orders.ShipVia, COUNT(orders.OrderID) AS TotalOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, orders.ShipVia","Both queries group by EmployeeID and ShipVia, counting OrderID. They address the user's question correctly.",both
Which products have received the highest total discount amounts?,"SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Discount * [Order Details].Quantity) AS Total_Discount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY Total_Discount DESC LIMIT 1","```sql
SELECT 
    products.ProductID, 
    products.ProductName, 
    SUM([Order Details].Discount * [Order Details].Quantity) AS TotalDiscount
FROM 
    products
JOIN 
    [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY 
    products.ProductID, 
    products.ProductName
ORDER BY 
    TotalDiscount DESC;
```","The generated query calculates discounts as Discount * Quantity, while the ground truth considers UnitPrice * Discount * Quantity. Also, the ground truth limits the result to one product using LIMIT 1.","SELECT p.ProductName, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalDiscount DESC;","The generated query lists all products with their total discount amounts, whereas the ground truth query retrieves only the product with the highest total discount amount.",None
What is the difference in total revenue between 2021 and 2022?,SELECT (SUM(CASE WHEN YEAR(OrderDate) = 2022 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - SUM(CASE WHEN YEAR(OrderDate) = 2021 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) AS RevenueDifference FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID;,"```sql
SELECT 
    (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))
     FROM orders
     JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
     WHERE orders.OrderDate BETWEEN '2021-01-01' AND '2021-12-31') AS TotalRevenue2021,
    
    (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))
     FROM orders
     JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
     WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31') AS TotalRevenue2022,
    
    (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))
     FROM orders
     JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
     WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31') -
    
    (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))
     FROM orders
     JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
     WHERE orders.OrderDate BETWEEN '2021-01-01' AND '2021-12-31') AS RevenueDifference
```","Both queries calculate the difference in total revenue between 2021 and 2022 by summarizing the revenue for each year and subtracting them. The generated query performs this using subqueries, while the ground truth query uses CASE statements, but they yield the same result.",SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' - (SELECT SUM(od2.UnitPrice * od2.Quantity * (1 - od2.Discount)) FROM [Order Details] od2 JOIN orders o2 ON od2.OrderID = o2.OrderID WHERE o2.OrderDate BETWEEN '2021-01-01' AND '2021-12-31');,Both queries calculate the total revenue for 2022 and subtract the total revenue for 2021. They use different approaches but achieve the same result.,both
Which customers have placed more than 10 orders?,SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 10;,"```sql
SELECT CustomerID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY CustomerID
HAVING COUNT(OrderID) > 10;
```","Both queries correctly identify customers with more than 10 orders. The generated query includes an additional column, OrderCount, which does not alter the filter logic.","SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 10;",Both queries identify customers with more than 10 orders. The generated query includes 'COUNT(OrderID) AS NumberOfOrders' but ultimately filters the same customers as the ground truth query.,both
Identify employees who report to a specific manager.,"SELECT employees.EmployeeID, employees.FirstName, employees.LastName FROM employees WHERE employees.ReportsTo = ?;","```sql
SELECT * 
FROM employees 
WHERE ReportsTo = ?;
```","Both queries select employees reporting to a specific manager using the ReportsTo column. The only difference is the generated query selects all columns instead of just EmployeeID, FirstName, and LastName.","SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e WHERE e.ReportsTo = [ManagerID];","Both queries select the EmployeeID, FirstName, and LastName from the employees who report to a specific manager using a corresponding identifier for the manager.",both
Which products have the highest inventory turnover ratio?,"SELECT products.ProductID, (SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0)) AS InventoryTurnoverRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID ORDER BY InventoryTurnoverRatio DESC;","```sql
SELECT p.ProductID, p.ProductName,
       SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY InventoryTurnoverRatio DESC
LIMIT 10;
```","The generated query includes 'p.ProductName' in the SELECT and GROUP BY clauses, which is not present in the ground truth query. This could cause different results due to variations in grouping and non-existent column 'UnitsInStock' in the ground truth query also prevents divide by zero errors using NULLIF, which the generated query lacks.","SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / AVG(CASE WHEN p.UnitsInStock IS NOT NULL THEN p.UnitsInStock ELSE 1 END) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY InventoryTurnoverRatio DESC;","The generated query and the ground truth query differ in grouping columns; one groups by ProductName, the other by ProductID. This could result in different results if ProductIDs are not unique for each ProductName.",None
What is the average discount applied per unit across all orders?,SELECT AVG(od.Discount) AS AverageDiscount FROM [Order Details] od;,"```sql
SELECT AVG(Discount) AS AverageDiscountPerUnit
FROM [Order Details];
```","Both queries calculate the average discount applied per unit using the same column from the same table, yielding identical results.",SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];,"Both queries calculate the average discount from the 'Order Details' table, thus answering the user's question.",both
How many products have more units on order than in stock?,SELECT COUNT(*) FROM products WHERE UnitsOnOrder > UnitsInStock;,"```sql
SELECT COUNT(*) AS ProductCount
FROM products
WHERE UnitsOnOrder > UnitsInStock;
```",Both queries count the number of products where UnitsOnOrder exceeds UnitsInStock. The differences in aliasing are superficial and do not affect the result.,SELECT COUNT(*) FROM products WHERE UnitsOnOrder > UnitsInStock;,Both queries count the number of products where UnitsOnOrder is greater than UnitsInStock.,both
What is the average discount given per order item?,SELECT AVG([Order Details].Discount) AS avg_discount_given FROM [Order Details],"```sql
SELECT AVG([Order Details].Discount) AS average_discount_per_order_item FROM [Order Details]
```","Both queries calculate the average discount from the same table and field, differing only in the alias used for the result.",SELECT AVG([Order Details].Discount) AS avg_discount_per_item FROM [Order Details],"Both queries calculate the average discount on order items, only the alias for the result differs.",both
Which city has the highest average shipping cost per order?,"SELECT ShipCity, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipCity ORDER BY AverageFreight DESC LIMIT 1;","```sql
SELECT ShipCity, AVG(Freight) AS AverageShippingCost
FROM orders
GROUP BY ShipCity
ORDER BY AverageShippingCost DESC
LIMIT 1;
```",Both queries calculate the average shipping cost per order for each city and return the city with the highest average. The column alias difference does not affect the functionality.,"SELECT ShipCity, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipCity ORDER BY AvgShippingCost DESC LIMIT 1;",Both queries calculate the average freight cost per city and return the city with the highest average. The column aliases differ but do not affect the result.,both
What proportion of customers are from a specific demographic type?,"SELECT customerDemographics.CustomerDesc, COUNT(customers.CustomerID) AS customer_count, COUNT(customers.CustomerID) * 1.0 / (SELECT COUNT(*) FROM customers) AS proportion FROM customerCustomerDemo JOIN customers ON customerCustomerDemo.CustomerID = customers.CustomerID JOIN customerDemographics ON customerCustomerDemo.CustomerTypeID = customerDemographics.CustomerTypeID GROUP BY customerDemographics.CustomerDesc","```sql
SELECT 
    customerDemographics.CustomerTypeID, 
    COUNT(DISTINCT customers.CustomerID) * 1.0 / (SELECT COUNT(DISTINCT CustomerID) FROM customers) AS proportion 
FROM 
    customers 
JOIN 
    customerCustomerDemo ON customers.CustomerID = customerCustomerDemo.CustomerID 
JOIN 
    customerDemographics ON customerCustomerDemo.CustomerTypeID = customerDemographics.CustomerTypeID 
GROUP BY 
    customerDemographics.CustomerTypeID;
```","The generated query uses DISTINCT on CustomerID, which could undercount customers if a customer exists in multiple demographics. This could lead to different results compared to the ground truth query.","```sql
SELECT customerDemographics.CustomerDesc, COUNT(DISTINCT customers.CustomerID) AS customer_count, (COUNT(DISTINCT customers.CustomerID) * 1.0 / (SELECT COUNT(DISTINCT CustomerID) FROM customers)) AS proportion FROM customers JOIN customerCustomerDemo ON customers.CustomerID = customerCustomerDemo.CustomerID JOIN customerDemographics ON customerCustomerDemo.CustomerTypeID = customerDemographics.CustomerTypeID GROUP BY customerDemographics.CustomerDesc
```","Both queries calculate the proportion of customers for each demographic type, using a similar approach. The use of COUNT(DISTINCT) in the generated query and COUNT in the ground truth slightly differ, but if CustomerID is unique, the output will be the same.",FT
What is the correlation between employee sales and order fulfillment time?,"SELECT employees.EmployeeID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID ORDER BY employee_sales DESC;","```sql
SELECT AVG(employee_sales) AS avg_employee_sales, 
       AVG(order_fulfillment_time) AS avg_order_fulfillment_time
FROM (
    SELECT employees.EmployeeID, 
           SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales,
           AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time
    FROM [Order Details] 
    JOIN orders ON [Order Details].OrderID = orders.OrderID 
    JOIN employees ON orders.EmployeeID = employees.EmployeeID 
    GROUP BY employees.EmployeeID
) AS sales_fulfillment;
```","The generated query calculates average sales and fulfillment time across the entire dataset, not the correlation. The ground truth query lists sales and fulfillment time for each employee, which is more aligned with analyzing correlation.","To find the correlation between employee sales and order fulfillment time, we first need to calculate the employee sales and the average order fulfillment time, and then determine how they are related. 

Here's the SQL query you could use to calculate both metrics and check for correlation:

```sql
WITH EmployeeSales AS (
    SELECT 
        employees.EmployeeID,
        SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
    FROM 
        [Order Details] 
    JOIN 
        orders ON [Order Details].OrderID = orders.OrderID 
    JOIN 
        employees ON orders.EmployeeID = employees.EmployeeID 
    GROUP BY 
        employees.EmployeeID
),
FulfillmentTime AS (
    SELECT 
        AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_fulfillment
    FROM 
        orders
)
SELECT 
    employee_sales.EmployeeID,
    employee_sales.total_sales,
    fulfillment_time.average_fulfillment,
    CORR(employee_sales.total_sales, fulfillment_time.average_fulfillment) AS correlation
FROM 
    EmployeeSales employee_sales
CROSS JOIN 
    FulfillmentTime fulfillment_time;
```

This SQL query retrieves employee sales, calculates average fulfillment time, and checks the correlation between the two metrics. However, please note that the actual correlation calculation may depend on the SQL database being used, as not all SQL databases support the `CORR` function.","The generated query attempts to calculate a correlation which is not supported by the SQL directly, while the ground truth query only calculates and orders by average fulfillment time and employee sales. They are not equivalent in intent or output.",None
Name suppliers who have never been involved in any orders.,SELECT suppliers.CompanyName FROM suppliers WHERE suppliers.SupplierID NOT IN (SELECT DISTINCT products.SupplierID FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID);,"```sql
SELECT CompanyName 
FROM suppliers 
WHERE SupplierID NOT IN (
    SELECT DISTINCT SupplierID 
    FROM products 
    WHERE ProductID IN (
        SELECT ProductID 
        FROM [Order Details]
    )
);
```",Both queries are equivalent. They identify suppliers whose SupplierID does not appear in the list of SupplierIDs from products with any orders in the [Order Details] table.,"SELECT s.SupplierID, s.CompanyName FROM suppliers s LEFT JOIN products p ON s.SupplierID = p.SupplierID LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL;","Both queries identify suppliers who have never had their products involved in any orders. The generated query uses a series of LEFT JOINs to find suppliers where no corresponding order details exist, whereas the ground truth query uses a subquery to exclude suppliers with products found in any order details. Both approaches accurately achieve the same result.",both
What are the top 5 products by units sold?,"SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalSold DESC LIMIT 5;","```sql
SELECT p.ProductName, SUM(od.Quantity) AS TotalUnitsSold
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalUnitsSold DESC
LIMIT 5;
```",Both queries calculate the total units sold for each product and order the results in descending order to get the top 5 products by units sold. The difference in the column names and join order does not affect the correctness of the result.,"SELECT p.ProductName, SUM(od.Quantity) AS TotalUnitsSold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalUnitsSold DESC LIMIT 5;","The generated SQL query and the ground truth SQL query both calculate the total units sold for each product, sort them in descending order, and limit the results to the top 5. The only difference is in the alias used for the total, which does not affect the result.",both
How many orders require shipping but have not yet been shipped per employee?,"SELECT employees.EmployeeID, COUNT(orders.OrderID) AS UnshippedOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate IS NULL AND orders.RequiredDate IS NOT NULL GROUP BY employees.EmployeeID;","```sql
SELECT e.EmployeeID, COUNT(o.OrderID) AS OrdersPendingShipping
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.RequiredDate < CURRENT_DATE AND o.ShippedDate IS NULL
GROUP BY e.EmployeeID;
```","The generated query filters orders with RequiredDate in the past, while the ground truth query checks if RequiredDate is present. They may return different results based on data conditions.","SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS PendingOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NULL AND o.RequiredDate <= CURRENT_DATE GROUP BY e.EmployeeID, e.FirstName, e.LastName;","The queries use different criteria. The generated query assumes orders with a required date up to the current date are pending, while the ground truth considers any order requiring shipping without a shipped date. Additionally, the ground truth does not include the employee names and has no date comparison with CURRENT_DATE.",None
Which product categories are generating the most revenue?,"SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS revenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY revenue DESC","```sql
SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN categories ON products.CategoryID = categories.CategoryID
GROUP BY categories.CategoryName
ORDER BY total_revenue DESC;
```","The difference between the queries is that the ground truth includes a join with the 'orders' table, which does not contribute to the revenue calculation. Both queries accurately calculate the revenue per category by joining 'Order Details', 'products', and 'categories' and summing the relevant fields.","SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY total_revenue DESC","Both queries calculate revenue for each category and group by category name. The generated query does not explicitly join with the orders table, which does not affect the final revenue calculation per category in this context.",both
Identify products that have never been ordered.,SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"```sql
SELECT p.ProductID, p.ProductName
FROM products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.ProductID IS NULL;
```","Both queries return products that have never been ordered. The generated query uses a LEFT JOIN with a WHERE clause checking for NULL values, while the ground truth query uses a subquery with NOT IN to exclude products that appear in the 'Order Details' table. Both approaches are valid and yield the same results.","SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;","Both queries correctly identify products that have never been ordered. The first query uses a LEFT JOIN with a NULL check, while the second uses a NOT IN subquery. Both yield the same result.",both
Which month had the highest total sales revenue in 2023?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(OrderDate) = 2023 GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY total_sales DESC LIMIT 1","```sql
SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY month
ORDER BY total_sales DESC
LIMIT 1;
```","Both queries calculate total sales per month in 2023 and return the month with the highest sales. The methods to specify the date range differ, but both effectively limit the data to 2023 and will yield the same result.","SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS monthly_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY month ORDER BY monthly_sales DESC LIMIT 1","The generated query does not filter the data to the year 2023, while the ground truth query does. This may lead to different results.",Base
Which products have a high sales volume due to specific employees?,"SELECT [Order Details].ProductID, employees.EmployeeID, SUM([Order Details].Quantity) AS TotalQuantity FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY [Order Details].ProductID, employees.EmployeeID HAVING SUM([Order Details].Quantity) > 1000;","```sql
SELECT [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalQuantity
FROM employees
JOIN orders ON employees.EmployeeID = orders.EmployeeID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY [Order Details].ProductID
ORDER BY TotalQuantity DESC;
```","The generated query does not filter products by a specific quantity threshold and does not include employee details, unlike the ground truth query.","SELECT [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalVolume FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY [Order Details].ProductID ORDER BY TotalVolume DESC;","The generated query does not consider specific employees or a sales threshold. It aggregates sales volume by products only, lacking the employee-wise breakdown and the condition for high volume sales as in the ground truth query.",None
Which employees have sales in more than three different countries?,"SELECT e.EmployeeID, COUNT(DISTINCT o.ShipCountry) AS Countries FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID HAVING Countries > 3;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID, e.FirstName, e.LastName
HAVING COUNT(DISTINCT o.ShipCountry) > 3;
```",Both queries correctly identify employees who have sales in more than three different countries by counting distinct shipping countries per employee.,"SELECT e.EmployeeID, COUNT(DISTINCT o.ShipCountry) AS CountryCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID HAVING CountryCount > 3;","Both queries calculate the number of distinct countries where each employee has sales, and filter employees with sales in more than three countries. The difference in alias names for the column is irrelevant to the result.",both
Which region experiences the most delays in shipments?,"SELECT ShipRegion, COUNT(OrderID) AS DelayedShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipRegion ORDER BY DelayedShipments DESC LIMIT 1;","```sql
SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AverageDelay
FROM orders
WHERE ShippedDate > RequiredDate
GROUP BY ShipRegion
ORDER BY AverageDelay DESC
LIMIT 1;
```","The generated query calculates the average delay in days for late shipments, while the ground truth query counts the number of late shipments per region, which directly answers the question about which region experiences the most delays.","SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgDelay FROM orders GROUP BY ShipRegion;","The generated query calculates average delay, while the ground truth counts the number of delayed shipments. They measure different things.",None
Which category of products has the highest number of units sold?,"SELECT CategoryID, SUM([Order Details].Quantity) AS TotalSold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID ORDER BY TotalSold DESC LIMIT 1;","```sql
SELECT p.CategoryID, SUM(od.Quantity) AS TotalUnitsSold
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.CategoryID
ORDER BY TotalUnitsSold DESC
LIMIT 1;
```","Both queries correctly calculate the total units sold for each product category by summing the quantity from [Order Details], and they order the results in descending order to identify the category with the highest sales. They both also limit the result to one row, which represents the category with the highest units sold.","SELECT CategoryID, SUM([Order Details].Quantity) AS TotalUnitsSold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID ORDER BY TotalUnitsSold DESC LIMIT 1;","Both queries calculate the total quantity sold for each product category, group by CategoryID, and return the category with the highest number of units sold. They differ only in alias naming, which does not affect the result.",both
Identify products below their reorder levels.,SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock < ReorderLevel;
```","The generated SQL query selects additional columns (ProductID, UnitsInStock, ReorderLevel) not requested by the user, whereas the ground truth query selects only ProductName.","SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;","Both queries identify products below their reorder levels. The generated query includes 'ProductID', but this does not affect the correctness of the answer.",FT
Which product category has the highest average unit price?,"SELECT categories.CategoryName, AVG(products.UnitPrice) AS avg_unit_price FROM products JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY avg_unit_price DESC LIMIT 1","```sql
SELECT categories.CategoryName, AVG(products.UnitPrice) AS average_unit_price
FROM products
JOIN categories ON products.CategoryID = categories.CategoryID
GROUP BY categories.CategoryName
ORDER BY average_unit_price DESC
LIMIT 1
```","The generated SQL query and the ground truth query perform the same operations: they calculate the average unit price of products per category, order by descending average price, and limit the results to one. Despite minor naming differences in the alias, they yield the same outcome.","```sql
SELECT categories.CategoryName, AVG(products.UnitPrice) AS avg_unit_price FROM products JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY avg_unit_price DESC LIMIT 1
```",Both queries are identical and accurately determine the category with the highest average unit price.,both
What percentage of products are currently discontinued?,SELECT COUNT(CASE WHEN products.Discontinued = 1 THEN 1 END) * 100.0 / COUNT(products.ProductID) AS discontinued_percentage FROM products,"```sql
SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM products)) AS percentage_discontinued FROM products WHERE Discontinued = 1;
```","Both queries correctly calculate the percentage of discontinued products by dividing the count of discontinued products by the total count of products, then multiplying by 100.0 to get a percentage. The logic and results are equivalent.",SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM products) AS discontinued_percentage FROM products WHERE Discontinued = 1;,"Both queries calculate the percentage of discontinued products by dividing the count of discontinued products by the total number of products, then multiplying by 100.",both
Which customer has placed the highest number of orders?,"SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID ORDER BY NumberOfOrders DESC LIMIT 1;","```sql
SELECT CustomerID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY CustomerID
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries group by CustomerID, aggregate the count of orders, and return the customer with the highest count. The differences in alias naming ('OrderCount' vs 'NumberOfOrders') do not affect the results.","SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;",Both queries count the number of orders per customer and select the customer with the highest count. The column alias difference does not affect the outcome.,both
What is the total sales generated by each employee in 2023?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN employees ON orders.EmployeeID = employees.EmployeeID 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' 
GROUP BY employees.EmployeeID
```","Both queries select EmployeeID and calculate the total sales in 2023 by summing up the product of UnitPrice, Quantity, and Discount. They join the same tables and filter by the same date range, grouping by EmployeeID, producing equivalent results.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID","Both queries calculate the total sales generated by each employee in 2023, grouping by EmployeeID and summing the sales values. The only difference is the alias used for the summed value, which does not affect the result.",both
Identify the employees who have a higher salary than the average salary.,"SELECT EmployeeID, CONCAT(FirstName, ' ', LastName) AS EmployeeName FROM employees WHERE Salary > (SELECT AVG(Salary) FROM employees);","```sql
SELECT *
FROM employees
WHERE Salary > (SELECT AVG(Salary) FROM employees);
```",The generated query selects all columns whereas the ground truth query specifically selects EmployeeID and a concatenated EmployeeName.,SELECT e.EmployeeID FROM employees e WHERE e.Salary > (SELECT AVG(Salary) FROM employees);,"The generated query only selects EmployeeID, while the ground truth query selects both EmployeeID and the concatenated EmployeeName.",None
What is the total number of orders handled by each employee?,"SELECT EmployeeID, COUNT(*) AS OrdersHandled FROM orders GROUP BY EmployeeID ORDER BY OrdersHandled DESC;","```sql
SELECT EmployeeID, COUNT(OrderID) AS TotalOrders
FROM orders
GROUP BY EmployeeID;
```","Both queries count the number of orders handled by each employee using GROUP BY on EmployeeID, differing only in column alias and order, without affecting the result.","SELECT EmployeeID, COUNT(*) AS TotalOrders FROM orders GROUP BY EmployeeID;","Both queries calculate the total number of orders handled by each employee using the COUNT function and GROUP BY clause. The difference is in the column alias and the ORDER BY clause in the ground truth query, which doesn't affect the count result.",both
What are the names and unit prices of all products that are currently in stock?,"SELECT ProductName, UnitPrice FROM products WHERE UnitsInStock > 0;","```sql
SELECT ProductName, UnitPrice 
FROM products 
WHERE UnitsInStock > 0;
```","The generated SQL query accurately filters products with UnitsInStock greater than 0, matching the requirement for products currently in stock, and selects the ProductName and UnitPrice, which answers the user's question.","SELECT ProductName, UnitPrice FROM products WHERE UnitsInStock > 0;","The generated SQL query accurately answers the user's question and matches the ground truth query, retrieving names and unit prices of products that are in stock.",both
What is the on-time delivery rate per month?,"SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS Month, COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 1.0 / COUNT(orders.OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM')","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month,
    COUNT(orders.OrderID WHERE orders.ShippedDate <= orders.RequiredDate) / COUNT(orders.OrderID) AS OnTimeDeliveryRate
FROM 
    orders
GROUP BY 
    Month
```",The generated SQL query has a syntax error. The WHERE clause is incorrectly used within the COUNT() function. It should use a conditional expression like CASE WHEN to filter the valid count for on-time deliveries.,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month",Both queries calculate the on-time delivery rate per month by comparing the ShippedDate to the RequiredDate and grouping by a formatted OrderDate. They use different SQL functions for date formatting but achieve the same result.,FT
Which suppliers have the slowest lead times in the last year?,"SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS avg_lead_time FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY s.SupplierID ORDER BY avg_lead_time DESC","```sql
SELECT suppliers.SupplierID, suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_lead_time
FROM orders 
JOIN products ON orders.OrderID = products.ProductID 
JOIN suppliers ON products.SupplierID = suppliers.SupplierID
WHERE orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE()
GROUP BY suppliers.SupplierID
ORDER BY average_lead_time DESC
```","The generated query incorrectly joins orders to products using the wrong key (ProductID instead of OrderID), omits the order details table, and uses a dynamic date range instead of the specific year in the ground truth query.","SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY suppliers.SupplierID ORDER BY avg_lead_time DESC","The date range in the generated SQL query is for the year 2023, while the ground truth query uses 2022. The results will differ due to this discrepancy in the date filter.",None
What was the average time taken to fulfill orders each month?,"SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Year, Month;","```sql
SELECT YEAR(OrderDate) AS Year, MONTH(OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY YEAR(OrderDate), MONTH(OrderDate)
ORDER BY Year, Month;
```","Both queries calculate the average fulfillment time per month by extracting the year and month from the OrderDate, computing the difference between ShippedDate and OrderDate, and then taking the average, grouped by year and month. The ordering does not affect the result.","SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY DATE_TRUNC('month', OrderDate);","The generated SQL groups by truncated date which results in a single Month column, while the ground truth query groups by separate Year and Month columns.",Base
Calculate the total revenue generated by each product.,"SELECT ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName;
```","Both queries calculate the total revenue per product by summing the product of quantity and unit price from the order details. The grouping ensures revenue is totaled per product. The difference in columns selected (ProductID, ProductName) and table aliases does not affect the correctness of the revenue calculation.","SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;","The generated query includes a discount factor in the revenue calculation, which is not present in the ground truth query.",Base
What is the customer retention rate for Q2 2023?,SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30')::FLOAT / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-04-01') AS retention_rate,"```sql
SELECT (COUNT(DISTINCT orders.CustomerID) 
        FROM orders 
        WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30') / 
       (COUNT(DISTINCT orders.CustomerID) 
        FROM orders 
        WHERE orders.OrderDate < '2023-04-01') AS customer_retention_rate
```","The generated query is attempting to perform division directly in the SELECT clause without using subqueries or casting, which may lead to unexpected behavior and errors. It also lacks casting to ensure a floating-point result.",(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-04-01') AS customer_retention_rate,"The generated query calculates the ratio of customers who placed orders in Q2 2023 to those who placed orders before Q2 2023. This is not the standard definition of retention rate, which typically measures retained customers compared to those who could have left.",None
Which products have never been ordered?,"SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL;","```sql
SELECT p.ProductID, p.ProductName 
FROM products p 
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID 
WHERE od.ProductID IS NULL;
```",Both queries achieve the same result by checking for products that do not have corresponding entries in the 'Order Details' table. They use a LEFT JOIN and check for NULL values in the joined table. The difference in checking 'od.ProductID IS NULL' versus 'od.OrderID IS NULL' does not affect the outcome as any missing entry in the 'Order Details' table would make both columns NULL.,SELECT p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;,"Both queries correctly identify products that have never been ordered by checking for NULL values after a LEFT JOIN with the 'Order Details' table, though they return slightly different columns.",both
Identify customers with orders shipped within 7 days of the order date.,"SELECT c.CustomerID, o.OrderID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE DATEDIFF(o.ShippedDate, o.OrderDate) <= 7;","```sql
SELECT DISTINCT c.CustomerID, c.CompanyName, c.ContactName, c.ContactTitle, c.Address, c.City, c.Region, c.PostalCode, c.Country, c.Phone, c.Fax
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
WHERE DATEDIFF(o.ShippedDate, o.OrderDate) <= 7;
```","Both queries correctly identify customers with orders shipped within 7 days. The generated query provides additional customer details, but it doesn't affect the core functionality of identifying the customers.","SELECT DISTINCT CustomerID FROM orders WHERE DATEDIFF(day, OrderDate, ShippedDate) <= 7;","The generated SQL query returns only CustomerID, while the ground truth query includes both CustomerID and OrderID. Additionally, the generated query uses incorrect argument order for DATEDIFF function.",Base
What are the top 3 shipping addresses based on frequency of deliveries?,"SELECT ShipAddress, COUNT(*) AS DeliveryCount FROM orders GROUP BY ShipAddress ORDER BY DeliveryCount DESC LIMIT 3;","```sql
SELECT ShipAddress, COUNT(OrderID) AS DeliveryCount
FROM orders
GROUP BY ShipAddress
ORDER BY DeliveryCount DESC
LIMIT 3;
```",Both queries count the number of deliveries per shipping address and order the results in descending order to find the top 3 addresses. They will yield the same output.,"SELECT ShipAddress, COUNT(OrderID) AS Frequency FROM orders GROUP BY ShipAddress ORDER BY Frequency DESC LIMIT 3;","Both queries count orders per ShipAddress, order by the count in descending order, and limit the results to the top 3. They produce the same result.",both
How many products from each supplier are on order?,"SELECT p.SupplierID, COUNT(*) AS ProductsOnOrder FROM products p WHERE p.UnitsOnOrder > 0 GROUP BY p.SupplierID;","```sql
SELECT SupplierID, COUNT(ProductID) AS ProductsOnOrder
FROM products
WHERE UnitsOnOrder > 0
GROUP BY SupplierID;
```",Both queries count the number of products on order per SupplierID where UnitsOnOrder is greater than 0. They use a similar structure but differ slightly in syntax. Both will yield the same results.,"SELECT SupplierID, COUNT(ProductID) AS OnOrderCount FROM products WHERE UnitsOnOrder > 0 GROUP BY SupplierID;","Both queries count the number of products on order for each supplier, grouping by SupplierID and filtering where UnitsOnOrder is greater than 0.",both
Identify the top 5 best-selling products based on order quantity.,"SELECT ProductID, ProductName, SUM(Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductID, ProductName ORDER BY TotalQuantity DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantity
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalQuantity DESC
LIMIT 5;
```",The syntax for LIMIT is incorrect in the generated SQL query for ANSI SQL. It should be replaced with FETCH FIRST 5 ROWS ONLY.,"SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID ORDER BY TotalQuantity DESC FETCH FIRST 5 ROWS ONLY;","Both queries are selecting the product names and summing the quantities from the joined tables, grouping by product, and ordering in descending order to get the top 5 products. Differences in syntax such as 'FETCH FIRST 5 ROWS ONLY' and 'LIMIT 5' do not affect the result, and both achieve the same outcome.",FT
Identify the least sold product and the number of units sold.,"SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY TotalSold ASC LIMIT 1;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalUnitsSold
FROM products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalUnitsSold ASC
LIMIT 1;
```","Both queries achieve the same result by identifying the least sold product and the number of units sold, despite minor differences in selected columns and join type.","SELECT p.ProductName, SUM(od.Quantity) AS TotalUnitsSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalUnitsSold ASC LIMIT 1;","Both queries aim to identify the least sold product by summing quantities sold and ordering them ascendingly. The difference lies in the grouping column, but ProductID uniquely identifies each product, ensuring the same result.",both
Which employee generated the most sales revenue in 2023?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN employees ON orders.EmployeeID = employees.EmployeeID 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' 
GROUP BY employees.EmployeeID 
ORDER BY total_sales DESC 
LIMIT 1
```","The generated SQL query and the ground truth perform the same operations: they join the same tables, calculate the same total sales metric, filter by the same date range, group by EmployeeID, and order by sales in descending order with a limit of 1.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales_revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID ORDER BY sales_revenue DESC LIMIT 1;","Both queries calculate the sales revenue for each employee in 2023, group by EmployeeID, and sort by the total revenue to find the highest. The difference in alias names does not affect the result.",both
Determine the average discount given to products per month.,"SELECT MONTH(OrderDate) AS Month, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY MONTH(OrderDate);","```sql
SELECT 
    AVG(Discount) AS AverageDiscount,
    DATE_TRUNC('month', OrderID) AS Month
FROM 
    [Order Details]
GROUP BY 
    DATE_TRUNC('month', OrderID);
```","The generated query uses DATE_TRUNC on OrderID, which seems incorrect. It should use a date column similar to OrderDate. Also, DATE_TRUNC function usage may not align with MONTH function behavior.",SELECT AVG(od.Discount) AS Average_Discount FROM [Order Details] od;,"The generated SQL query calculates the overall average discount without considering monthly grouping, unlike the ground truth which averages discounts per month.",None
What is the total value of current inventory for each supplier?,"SELECT SupplierID, SUM(UnitsInStock * UnitPrice) AS InventoryValue FROM products GROUP BY SupplierID;","```sql
SELECT p.SupplierID, SUM(p.UnitPrice * p.UnitsInStock) AS TotalInventoryValue
FROM products p
WHERE p.Discontinued = 0
GROUP BY p.SupplierID;
```","The generated query filters out discontinued products, while the ground truth query includes all products.","SELECT SupplierID, SUM(UnitesInStock * UnitPrice) AS TotalInventoryValue FROM products GROUP BY SupplierID;","The generated SQL query and the ground truth query are functionally equivalent, as they both compute the total value of current inventory for each supplier using the same columns and grouping by SupplierID. The difference in alias names does not affect the results.",FT
List all customers who placed orders in the first quarter of 2023.,SELECT DISTINCT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31';,"```sql
SELECT DISTINCT customers.CustomerID, customers.CompanyName, customers.ContactName
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31';
```","The generated query selects more columns (CustomerID, CompanyName, ContactName) than the ground truth query, which only selects CustomerID.",SELECT DISTINCT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31';,"Both the generated query and the ground truth query are identical and correctly list all customers who placed orders between '2023-01-01' and '2023-03-31', covering the first quarter of 2023.",FT
What is the average freight cost of all orders?,SELECT AVG(o.Freight) AS AvgFreightCost FROM orders o;,"```sql
SELECT AVG(Freight) AS AverageFreightCost FROM orders;
```",Both queries calculate the average freight cost from the 'orders' table and will produce the same result. They differ only in aliasing and formatting details.,SELECT AVG(Freight) AS AverageFreightCost FROM orders;,"Both queries calculate the average of the Freight column from the orders table, so they yield the same result.",both
What is the total freight cost for orders handled by each employee?,"SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(o.Freight) AS TotalFreightCost
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","Both queries calculate the total freight cost for each employee by summing the 'Freight' from the 'orders' table, grouped by 'EmployeeID'. The generated query includes additional columns (FirstName, LastName), but this does not affect the total calculation of freight cost by employee.","SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreightCost FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",Both queries calculate the total freight cost for each employee by summing the Freight field from the orders table and grouping by EmployeeID. The choice of aliases does not affect the outcome.,both
Determine the monthly trend of quantities sold for each product.,"SELECT DATE_TRUNC('month', OrderDate) AS Month, p.ProductName, SUM(od.Quantity) AS MonthlyQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY DATE_TRUNC('month', OrderDate), p.ProductName;","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    DATE_TRUNC('month', o.OrderDate) AS Month, 
    SUM(od.Quantity) AS TotalQuantitySold
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
JOIN 
    orders o ON od.OrderID = o.OrderID
GROUP BY 
    p.ProductID, p.ProductName, Month
ORDER BY 
    Month, p.ProductID;
```","Both queries calculate the monthly trend of quantities sold per product. They group and summarize quantities by product and month, resulting in the same output.","SELECT MONTH(o.OrderDate) AS OrderMonth, p.ProductName, SUM(od.Quantity) AS TotalSold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY OrderMonth, p.ProductName ORDER BY OrderMonth, TotalSold DESC;","The generated query uses 'MONTH(o.OrderDate)' which does not consider the year, whereas the ground truth uses 'DATE_TRUNC('month', OrderDate)' ensuring correct monthly aggregation across different years.",Base
How many units of each product were sold monthly?,"SELECT products.ProductID, DATE_TRUNC('month', orders.OrderDate) AS order_month, SUM([Order Details].Quantity) AS units_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductID, order_month","```sql
SELECT products.ProductID, SUM([Order Details].Quantity) AS units_sold, MONTH(orders.OrderDate) AS month, YEAR(orders.OrderDate) AS year 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN products ON [Order Details].ProductID = products.ProductID 
GROUP BY products.ProductID, month, year
```","Both queries calculate the total units sold for each product per month, but they use different methods to extract the month from the OrderDate. The generated query uses MONTH() and YEAR() functions, while the ground truth uses DATE_TRUNC(). Both approaches categorize data by month and yield equivalent results.","SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID","The Generated SQL Query does not include a monthly breakdown, whereas the Ground Truth SQL Query provides monthly totals using DATE_TRUNC and includes orders table for order dates.",Base
What is the total potential revenue from products not yet ordered?,SELECT SUM(UnitPrice * UnitsInStock) AS PotentialRevenue FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"```sql
SELECT SUM(UnitPrice * UnitsInStock) AS TotalPotentialRevenue
FROM products
WHERE UnitsOnOrder = 0;
```","The generated query calculates potential revenue for products with zero units on order, while the ground truth query calculates for products that have never been ordered.",SELECT SUM(UnitPrice * UnitsOnOrder) AS PotentialRevenue FROM products WHERE UnitsOnOrder > 0;,"The generated query calculates potential revenue based on products that have units on order, while the ground truth query calculates potential revenue for products not ordered at all.",None
Determine the top 3 countries by total supplier revenue.,"SELECT suppliers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CountryRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.Country ORDER BY CountryRevenue DESC LIMIT 3;","```sql
SELECT suppliers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.Country
ORDER BY TotalRevenue DESC
LIMIT 3;
```","The generated query includes an extra JOIN with orders table which is unnecessary and might affect performance, but it will not change the result since it's not used in calculation.","SELECT suppliers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CountryRevenue FROM suppliers INNER JOIN products ON suppliers.SupplierID = products.SupplierID INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.Country ORDER BY CountryRevenue DESC LIMIT 3;",The generated SQL query and the ground truth query produce the same results; they both calculate total supplier revenue by country and limit the results to the top 3. The difference in syntax ('INNER JOIN' vs. 'JOIN') does not affect the result.,FT
Which employee has generated the highest sales revenue?,"SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries calculate the total sales revenue for each employee, group by employee, and then order the results descending to find the highest total sales. The difference in the columns selected (such as the concatenation of first and last name) does not affect the outcome of identifying the employee with the highest sales.","SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",Both queries calculate total sales revenue per employee using the same formula and return the employee with the highest sales. The difference in output columns doesn't affect the result.,both
What is the average order fulfillment time in days for each month?,"SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Year, Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
    AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM 
    orders
GROUP BY 
    Month
ORDER BY 
    Month;
```","The generated SQL query uses DATE_FORMAT to group orders by year and month combined, while the ground truth query groups by separate columns for year and month, which means they could potentially yield different outputs, especially in the way months are ordered or displayed.","SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EXTRACT(YEAR FROM OrderDate), EXTRACT(MONTH FROM OrderDate);",Both queries calculate the average order fulfillment time per year and month. The difference in grouping syntax does not affect the result.,FT
How does the on-time delivery rate vary by region?,"SELECT ShipRegion, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID)) * 100 AS on_time_delivery_rate FROM orders GROUP BY ShipRegion;","```sql
SELECT ShipRegion, 
       COUNT(OrderID) AS TotalOrders,
       COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) AS OnTimeDeliveries,
       COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate
FROM orders
GROUP BY ShipRegion;
```",Both queries calculate the on-time delivery rate by region using different SQL techniques but achieve the same result: dividing the count of on-time deliveries by the total orders and multiplying by 100 for percentage.,"SELECT ShipRegion, (SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 100.0) / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipRegion;","Both queries calculate the on-time delivery rate by region using the same logic: counting orders shipped on or before the required date divided by total orders for each region, expressed as a percentage.",both
How does the average order value change per region?,"SELECT c.Region, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Region","```sql
SELECT c.Region, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue
FROM customers AS c
JOIN orders AS o ON c.CustomerID = o.CustomerID
JOIN [Order Details] AS od ON o.OrderID = od.OrderID
GROUP BY c.Region;
```",The generated SQL query computes the average order value per region using the same logic and joins as the ground truth query. The difference in alias names for the result column does not affect the outcome.,"SELECT ShipRegion, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion;","The generated query calculates the average order value per ShipRegion from the orders table, whereas the ground truth query calculates it per customer Region by joining the customers and orders tables. This could yield different results if ShipRegion and customer Region are not equivalent.",Base
What is the total number of orders shipped on time by each employee?,"SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OnTimeOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY employees.EmployeeID","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS TotalOrdersShippedOnTime
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.ShippedDate <= o.RequiredDate
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```",Both queries count the number of orders shipped on or before the required date for each employee. The generated query includes employee names but this does not affect the count logic.,"SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OnTimeOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY employees.EmployeeID;",The generated SQL query accurately answers the user's question and matches the ground truth query in logic and result. Both queries calculate the count of orders shipped on time by each employee by comparing ShippedDate and RequiredDate.,both
How much total revenue did each product category generate in 2023?,"SELECT c.CategoryName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS total_revenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = 2023 GROUP BY c.CategoryName","```sql
SELECT categories.CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN categories ON products.CategoryID = categories.CategoryID
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY categories.CategoryID
```","The generated query groups by CategoryID, while the ground truth groups by CategoryName, affecting the output labels. Both calculate total revenue similarly, but the grouping columns differ.","SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY categories.CategoryName","Both queries join the same tables and calculate the total revenue using the same formula, grouping by category name and filtering by orders in 2023. The aliases used for tables are different but do not affect the result.",FT
Find the top 5 products with the highest sales revenue.,"SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS SalesRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SalesRevenue DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalRevenue DESC
LIMIT 5;
```","Both queries calculate total sales revenue per product and return the top 5 highest revenue products, differing only in the selection of ProductID in the generated query, which does not affect the result.","SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalRevenue DESC LIMIT 5;",Both queries calculate the total sales revenue for each product and order the results to find the top 5 products. The difference in alias naming ('TotalRevenue' vs. 'SalesRevenue') does not affect the query results.,both
Which supplier provides the maximum number of products?,"SELECT suppliers.CompanyName, COUNT(products.ProductID) AS TotalProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY TotalProducts DESC LIMIT 1","```sql
SELECT SupplierID, COUNT(ProductID) AS ProductCount
FROM products
GROUP BY SupplierID
ORDER BY ProductCount DESC
LIMIT 1;
```","The generated query does not return the supplier's name and lists SupplierID instead, which does not match the format of the result expected by the user's question.","SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1",The generated query does not provide the supplier's name and assumes SupplierID is sufficient. The ground truth query joins the suppliers table to return the Company's name.,None
Which month has the highest on-time delivery rate?,"SELECT EXTRACT(MONTH FROM OrderDate) AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID)) AS OnTimeRate FROM orders GROUP BY Month ORDER BY OnTimeRate DESC LIMIT 1;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
    COUNT(OrderID) AS TotalOrders,
    COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveries,
    (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID)) AS OnTimeDeliveryRate
FROM 
    orders
GROUP BY 
    Month
ORDER BY 
    OnTimeDeliveryRate DESC
LIMIT 1;
```","Both queries calculate the on-time delivery rate per month and order the results in descending order to find the highest rate. The generated query uses `DATE_FORMAT` for formatting while the ground truth query uses `EXTRACT(MONTH)`, but both achieve the same result.","```sql
WITH OnTimeDelivery AS (
    SELECT 
        DATE_TRUNC('month', OrderDate) AS OrderMonth,
        COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 1.0 / COUNT(OrderID) AS OnTimeRate
    FROM 
        orders
    GROUP BY 
        DATE_TRUNC('month', OrderDate)
)
SELECT 
    OrderMonth, OnTimeRate
FROM 
    OnTimeDelivery
ORDER BY 
    OnTimeRate DESC
FETCH FIRST 1 ROWS ONLY;
```","The generated query truncates the date to a month, preserving the year, while the ground truth query extracts the month only, ignoring the year. This could lead to different results if the dataset spans multiple years.",Base
Calculate the total sales and total discount for each product.,"SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales, SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details] GROUP BY ProductID;","```sql
SELECT 
    [Order Details].ProductID,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount
FROM 
    [Order Details]
GROUP BY 
    [Order Details].ProductID
```","The generated SQL query accurately calculates the total sales and total discount for each product, matching the ground truth query in logic and results.","SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM [Order Details] od GROUP BY od.ProductID;","The generated SQL query and the ground truth query both calculate the total sales and total discount for each product by summing over the product of UnitPrice, Quantity, and Discount for each ProductID. The structure and logic of both queries are equivalent.",both
Find the average unit price of products supplied by each supplier.,"SELECT SupplierID, AVG(UnitPrice) AS AverageUnitPrice FROM products GROUP BY SupplierID;","```sql
SELECT SupplierID, AVG(UnitPrice) AS AverageUnitPrice
FROM products
GROUP BY SupplierID;
```","Both queries group the products by SupplierID and calculate the average UnitPrice, correctly addressing the user's question, despite having identical structures.","SELECT s.SupplierID, AVG(p.UnitPrice) AS AverageUnitPrice FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID;",Both queries calculate the average unit price of products for each supplier. The join in the generated SQL query does not affect the outcome as it's on the specified fields and filters down to the same result set.,both
Which region has the highest total sales?,"SELECT Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Region ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM employees
JOIN orders ON employees.EmployeeID = orders.EmployeeID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY employees.Region
ORDER BY TotalSales DESC
LIMIT 1;
```",Both queries perform the same operations: they calculate total sales by region and return the region with the highest total sales. The difference in the format of the queries does not affect the outcome.,"SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ShipRegion ORDER BY TotalSales DESC;","The generated query groups by ShipRegion but the ground truth groups by Region. They reference potentially different columns, affecting the result.",Base
Which shipping method tends to have the fastest fulfillment time?,"SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia ORDER BY AvgFulfillmentTime ASC LIMIT 1;","```sql
SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY ShipVia
ORDER BY AverageFulfillmentTime ASC
LIMIT 1;
```",Both queries calculate the average fulfillment time by ShipVia and return the shipping method with the fastest (smallest) average fulfillment time.,"SELECT o.ShipVia, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgFulfillmentTime FROM orders o GROUP BY o.ShipVia ORDER BY AvgFulfillmentTime ASC;","The generated query analyzes all shipping methods but does not limit the result to the fastest one, unlike the ground truth query, which uses LIMIT 1 to find the fastest shipping method.",Base
What is the total sales revenue generated monthly?,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY month","```sql
SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
GROUP BY month
```","The generated SQL query and the ground truth query produce the same results. Both queries calculate the total sales revenue monthly by summing the product of UnitPrice, Quantity, and Discount from the 'Order Details' table joined with the 'orders' table. The grouping by month is done correctly using DATE_FORMAT.","SELECT MONTH(orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY MONTH(orders.OrderDate);","The generated SQL query groups by the month only, without considering the year, which could lump sales from different years together. The ground truth query groups by a combination of year and month, providing distinct monthly totals over different years.",Base
Identify suppliers whose products have the lowest average inventory.,"SELECT SupplierID, AVG(UnitsInStock) AS AverageInventory FROM products GROUP BY SupplierID ORDER BY AverageInventory ASC LIMIT 1;","```sql
SELECT p.SupplierID, AVG(p.UnitsInStock) AS AvgInventory
FROM products p
GROUP BY p.SupplierID
ORDER BY AvgInventory ASC
LIMIT 1;
```",Both queries calculate the average inventory per supplier and return the supplier with the lowest average.,"SELECT SupplierID, AVG(UnitsInStock) AS AvgInventory FROM products GROUP BY SupplierID ORDER BY AvgInventory ASC;","The generated query does not include 'LIMIT 1', so it does not return only the supplier with the lowest average inventory.",Base
Which city has the largest number of employees based on their address?,"SELECT City, COUNT(EmployeeID) AS EmployeeCount FROM employees GROUP BY City ORDER BY EmployeeCount DESC LIMIT 1;","```sql
SELECT City, COUNT(*) AS NumberOfEmployees
FROM employees
GROUP BY City
ORDER BY NumberOfEmployees DESC
LIMIT 1;
```","Both queries perform the same operations: they count employees by city, group by city, and order by the count to find the city with the most employees. The COUNT(*) and COUNT(EmployeeID) are equivalent here because each row represents an employee.","SELECT e.City, COUNT(e.EmployeeID) AS NumEmployees FROM employees e GROUP BY e.City ORDER BY NumEmployees DESC LIMIT 1;","Both queries select the city with the largest number of employees by counting EmployeeID grouped by City and ordering by the count in descending order, limiting the result to one.",both
Which orders include products that are currently out of stock?,SELECT DISTINCT OrderID FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.UnitsInStock = 0;,"```sql
SELECT DISTINCT od.OrderID
FROM [Order Details] od
JOIN products p ON od.ProductID = p.ProductID
WHERE p.UnitsInStock = 0;
```",The generated SQL query and the ground truth query use identical logic to retrieve distinct OrderIDs where the product's UnitsInStock is 0. Both join the 'Order Details' and 'products' tables on ProductID and filter for products that are out of stock.,SELECT DISTINCT od.OrderID FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.UnitsInStock = 0;,Both queries join the 'Order Details' table with 'products' on 'ProductID' and filter orders where 'UnitsInStock' is zero. They produce the same result set by selecting distinct 'OrderID'.,both
How many orders were shipped with each shipping method?,"SELECT ShipVia, COUNT(*) AS OrdersShipped FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY ShipVia;
```","Both queries count the number of orders grouped by ShipVia, leading to equivalent results.","SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia;","Both queries count the number of orders grouped by the shipping method, 'ShipVia', and should yield the same results.",both
Which orders were delivered on time in 2023?,SELECT orders.OrderID FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31',"```sql
SELECT * FROM orders WHERE ShippedDate <= RequiredDate AND YEAR(OrderDate) = 2023
```","Both queries filter orders with ShippedDate less than or equal to RequiredDate and orders within 2023. They effectively retrieve the orders delivered on time in 2023, although one uses the YEAR function and the other uses a date range.",SELECT orders.OrderID FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND YEAR(orders.OrderDate) = 2023,Both queries filter orders delivered on or before the required date and restrict to the year 2023. They are functionally equivalent because YEAR(orders.OrderDate) = 2023 and 'orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' accomplish the same date filtering.,both
How many orders were placed by each customer in the last year?,"SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= DATEADD(year, -1, CURRENT_DATE) GROUP BY CustomerID;","```sql
SELECT CustomerID, COUNT(OrderID) AS OrderCount
FROM orders
WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
GROUP BY CustomerID;
```","Both queries accurately return the number of orders placed by each customer in the past year. They utilize different date functions (`DATE_SUB` vs `DATEADD`), but both achieve the same result by filtering `OrderDate` to the last year and grouping by `CustomerID`.","SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY CustomerID;","Both queries count the number of orders per customer in the last year, using equivalent date functions for filtering the order dates.",both
What is the average unit price for products from each supplier?,"SELECT s.SupplierID, AVG(p.UnitPrice) AS AverageUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;","```sql
SELECT SupplierID, AVG(UnitPrice) AS AverageUnitPrice
FROM products
GROUP BY SupplierID;
```",Both queries compute the average unit price for products grouped by each supplier. The difference in table reference does not affect the result because the necessary join condition is inherently managed by grouping on SupplierID in both cases.,"SELECT SupplierID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY SupplierID;","Both queries calculate the average unit price of products grouped by SupplierID, assuming all products have valid SupplierIDs.",both
How many units of each product have been ordered so far?,"SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalOrdered FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;","```sql
SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalUnitsOrdered
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY products.ProductID, products.ProductName;
```","Both queries group by product and sum the quantity, providing the total units ordered per product. The inclusion of ProductID in the generated query does not change the result.","SELECT p.ProductName, SUM(od.Quantity) AS TotalOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",Both SQL queries join the 'products' table with the 'Order Details' table on 'ProductID'. They then group by 'ProductName' and sum 'Quantity'. The results will be the same.,both
What is the current stock level of each product?,"SELECT ProductName, UnitsInStock FROM products;","```sql
SELECT ProductID, ProductName, UnitsInStock
FROM products;
```","Both queries retrieve the 'ProductName' and 'UnitsInStock' from the 'products' table, which answers the user's question about the current stock level of each product. The inclusion of 'ProductID' in the generated query does not affect the accuracy of the answer.","SELECT ProductID, ProductName, UnitsInStock FROM products;","Both queries retrieve the product name and stock level. The generated query includes an additional ProductID column, but this does not affect the correctness regarding the core user question.",both
Identify products that need to be reordered based on their reorder level.,SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;
```","The generated query includes additional columns and a condition for 'Discontinued', which the ground truth query does not include.",SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;,"The generated query includes a condition to exclude discontinued products with 'Discontinued = 0', which the ground truth query does not include.",None
Which customer placed the most orders?,"SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT CustomerID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY CustomerID
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries are identical and accurately return the customer who placed the most orders by counting OrderID and sorting by OrderCount in descending order, then limiting to one result.","SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;",Both queries are identical and correctly retrieve the customer who placed the most orders by counting orders per customer and sorting in descending order.,both
List all products that are currently out of stock.,SELECT ProductName FROM products WHERE UnitsInStock = 0;,"```sql
SELECT ProductID, ProductName
FROM products
WHERE UnitsInStock = 0;
```","The generated query includes 'ProductID', which is not present in the ground truth query output.",SELECT ProductName FROM products WHERE UnitsInStock = 0;,"Both queries are identical and correctly select products with UnitsInStock equal to 0, indicating they are out of stock.",FT
What is the average order fulfillment time by region?,"SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipRegion;","```sql
SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY ShipRegion;
```","Both queries calculate the average fulfillment time by region in the same way, despite a difference in alias naming.","SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipRegion;","The generated SQL query is identical to the ground truth query, both correctly calculating the average order fulfillment time by region.",both
Which city has the highest number of returning customers?,"SELECT customers.City, COUNT(DISTINCT orders.CustomerID) AS returning_customers FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.CustomerID IN (SELECT o.CustomerID FROM orders o WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') AND orders.OrderDate < '2023-01-01' GROUP BY customers.City ORDER BY returning_customers DESC LIMIT 1","```sql
SELECT customers.City, COUNT(DISTINCT orders.CustomerID) AS returning_customer_count
FROM orders
JOIN customers ON orders.CustomerID = customers.CustomerID
WHERE orders.OrderDate < 'start_date' -- Modify this to define the previous period
AND orders.CustomerID IN (
    SELECT CustomerID
    FROM orders
    WHERE OrderDate BETWEEN 'start_date' AND 'end_date' -- Modify this to define the current period
)
GROUP BY customers.City
ORDER BY returning_customer_count DESC
LIMIT 1;
```","The generated query uses placeholders for dates instead of specific values, which might lead to different results if not replaced with actual dates as in the ground truth query.","SELECT customers.City, COUNT(DISTINCT orders.CustomerID) AS returning_customers FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.City ORDER BY returning_customers DESC LIMIT 1","The generated query looks for customers with orders in 2023, while the ground truth identifies returning customers who ordered before 2023 and returned during 2023.",None
What is the average number of days late for orders shipped past the required date?,"SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgDaysLate FROM orders WHERE ShippedDate > RequiredDate;","```sql
SELECT AVG(DATEDIFF(orders.ShippedDate, orders.RequiredDate)) AS AverageDaysLate
FROM orders
WHERE orders.ShippedDate > orders.RequiredDate;
```","Both queries calculate the average number of days an order is shipped late, using DATEDIFF on ShippedDate and RequiredDate with a condition that ShippedDate is greater than RequiredDate, which results in the same outcome.","SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgDaysLate FROM orders WHERE ShippedDate > RequiredDate;",Both queries are identical and correctly calculate the average number of days late for orders shipped after the required date.,both
Which employee has generated the highest sales revenue this year?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE)
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 1;
```",Both queries calculate total sales per employee for the current year and return the employee with the highest sales. The inclusion of first and last name in the generated query does not affect the correctness of the result.,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",The generated SQL query and the ground truth query are functionally equivalent. They both calculate the total sales for each employee for the current year and return the employee with the highest sales. The difference in using CURDATE() vs CURRENT_DATE does not affect the result as they refer to the current date in most SQL environments.,both
List all orders where the freight cost exceeded $100.,SELECT * FROM orders WHERE Freight > 100;,"```sql
SELECT * FROM orders WHERE Freight > 100;
```",Both queries are identical and accurately answer the user's question by selecting orders where the freight cost exceeds $100.,SELECT OrderID FROM orders WHERE Freight > 100;,"The generated query only selects the OrderID, whereas the ground truth query selects all columns from the orders where the freight cost exceeded $100.",Base
Which month had the highest number of late deliveries?,"SELECT DATE_TRUNC('month', ShippedDate) AS Month, COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) AS LateDeliveries FROM orders GROUP BY Month ORDER BY LateDeliveries DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS LateDeliveries
FROM orders
WHERE ShippedDate > RequiredDate
GROUP BY Month
ORDER BY LateDeliveries DESC
LIMIT 1;
```",Both queries count the number of late deliveries per month and order the results to find the month with the most late deliveries. They both group by month and apply the correct condition for late deliveries.,"SELECT TRUNC(OrderDate, 'MM') AS Month, COUNT(OrderID) AS LateDeliveries FROM orders WHERE ShippedDate > RequiredDate GROUP BY TRUNC(OrderDate, 'MM') ORDER BY LateDeliveries DESC FETCH FIRST ROW ONLY;","The generated SQL query groups by the month of OrderDate, while the ground truth query groups by the month of ShippedDate. This could lead to different results if the months differ between OrderDate and ShippedDate.",Base
Which supplier has the highest total revenue from product sales?,"SELECT s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.CompanyName ORDER BY TotalRevenue DESC LIMIT 1;","```sql
SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.SupplierID, suppliers.CompanyName
ORDER BY TotalRevenue DESC
LIMIT 1;
```",The generated SQL query and the ground truth query both calculate the total revenue for each supplier and select the supplier with the highest total revenue. They join the same tables and compute the revenue in the same way.,"SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY TotalRevenue DESC LIMIT 1;","Both queries calculate total revenue by multiplying unit price, quantity, and subtracting discount, then group by supplier name, order by total revenue, and limit to one result. They yield the same results.",both
Identify the top 3 employees by total sales in 2023.,"SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName ORDER BY total_sales DESC LIMIT 3","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
JOIN employees ON orders.EmployeeID = employees.EmployeeID
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY employees.EmployeeID
ORDER BY total_sales DESC
LIMIT 3
```","The generated SQL query omits the employees' FirstName and LastName fields, which are included in the ground truth query's SELECT and GROUP BY clauses. This means the outputs will differ in terms of the columns provided.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 3","The generated query does not select employees' first and last names, which might be necessary for identifying them, whereas the ground truth query includes these columns.",None
Which shipper was used the most last year?,"SELECT o.ShipVia, COUNT(o.OrderID) AS ShipCount FROM orders o WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY o.ShipVia ORDER BY ShipCount DESC LIMIT 1;","```sql
SELECT ShipVia, COUNT(*) AS OrderCount
FROM orders
WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1
GROUP BY ShipVia
ORDER BY OrderCount DESC
LIMIT 1;
```","The generated query covers the entire previous calendar year, while the ground truth query considers only the last 12 months from the current date, which may not yield the same result.","SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1 GROUP BY ShipVia ORDER BY OrderCount DESC LIMIT 1;","The generated query correctly calculates last year's orders, but the ground truth calculates orders from the last 365 days. Therefore, they may yield different results.",None
Who are the top five customers by total ordered quantity?,"SELECT customers.CustomerID, SUM([Order Details].Quantity) AS TotalQuantity FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY TotalQuantity DESC LIMIT 5;","```sql
SELECT customers.CustomerID, customers.CompanyName, SUM([Order Details].Quantity) AS TotalOrderedQuantity
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID, customers.CompanyName
ORDER BY TotalOrderedQuantity DESC
LIMIT 5;
```",Both queries rank customers by total ordered quantity and limit the result to the top five. The inclusion of 'CompanyName' in the selected columns and GROUP BY clause in the generated query does not alter the ranking or quantity.,"SELECT customers.CustomerID, SUM([Order Details].Quantity) AS TotalQuantity FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY TotalQuantity DESC FETCH FIRST 5 ROWS ONLY","Both queries correctly identify the top five customers by total ordered quantity, differing only in the syntax used for limiting the number of results (FETCH FIRST vs. LIMIT). These syntactical differences are equivalent in function.",both
Compare shipping costs across different shipping companies.,"SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM shippers JOIN orders ON shippers.ShipperID = orders.ShipVia GROUP BY shippers.CompanyName","```sql
SELECT shippers.CompanyName, AVG(orders.Freight) AS average_shipping_cost
FROM orders
JOIN shippers ON orders.ShipVia = shippers.ShipperID
GROUP BY shippers.CompanyName
```","Both queries calculate the average shipping cost per shipping company by joining the shippers and orders tables on the ShipVia and ShipperID columns, and then using AVG on the Freight column. The differences in alias names and table join order do not affect the result.","SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName","The generated SQL query and the ground truth SQL query are logically equivalent. Both queries perform the same operations: they join the 'orders' table and the 'shippers' table based on the 'ShipVia' and 'ShipperID' columns, and calculate the average 'Freight' cost grouped by 'CompanyName'.",both
How many units of discontinued products are still in stock?,SELECT SUM(UnitsInStock) FROM products WHERE Discontinued = 1;,"```sql
SELECT SUM(UnitsInStock) AS TotalUnitsInStock
FROM products
WHERE Discontinued = 1;
```",Both queries calculate the total units in stock for discontinued products. The difference in column naming (TotalUnitsInStock) does not affect the result.,SELECT SUM(UnitsInStock) FROM products WHERE Discontinued = 1;,Both queries are identical and correctly calculate the sum of units in stock for discontinued products.,both
Find the most recent order details for a specific customer.,"SELECT customers.CustomerID, orders.OrderID, orders.OrderDate FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE customers.CustomerID = 'specific_customer_id' ORDER BY orders.OrderDate DESC LIMIT 1;","```sql
SELECT o.OrderID, o.OrderDate, od.ProductID, od.UnitPrice, od.Quantity, od.Discount
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.CustomerID = 'specific_customer_id'
ORDER BY o.OrderDate DESC
LIMIT 1;
```","The generated query retrieves order details and filters by CustomerID, but includes order details like ProductID, UnitPrice, Quantity, and Discount, which are not part of the ground truth query. The ground truth focuses on CustomerID, OrderID, and OrderDate only.","SELECT o.OrderID, o.OrderDate, o.ShippedDate, od.ProductID, od.Quantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.CustomerID = 'specific_customer_id' ORDER BY o.OrderDate DESC LIMIT 1","The generated query retrieves details from the 'Order Details' table, while the ground truth only retrieves from 'orders'. The field selections differ, and the requirement of joining the 'Order Details' is unique to the generated query.",None
Find the product with the largest discrepancy between units in stock and on order.,SELECT ProductName FROM products ORDER BY ABS(UnitsInStock - UnitsOnOrder) DESC LIMIT 1;,"```sql
SELECT ProductID, 
       ProductName, 
       UnitsInStock, 
       UnitsOnOrder, 
       (UnitsInStock - UnitsOnOrder) AS Discrepancy
FROM products
ORDER BY Discrepancy DESC
LIMIT 1;
```","The generated SQL query looks for the largest positive discrepancy, while the ground truth query finds the largest absolute discrepancy, regardless of sign.","SELECT ProductName, UnitsInStock - UnitsOnOrder AS StockDifference FROM products ORDER BY StockDifference DESC LIMIT 1;","The generated SQL selects products with the largest positive discrepancy, while the ground truth considers both positive and negative discrepancies using ABS().",None
What are the monthly shipping costs across different shipping methods?,"SELECT EXTRACT(YEAR FROM orders.OrderDate) AS year, EXTRACT(MONTH FROM orders.OrderDate) AS month, orders.ShipVia, AVG(orders.Freight) AS avg_shipping_cost FROM orders GROUP BY year, month, orders.ShipVia","```sql
SELECT MONTH(orders.OrderDate) AS month, orders.ShipVia, AVG(orders.Freight) AS average_shipping_cost
FROM orders
GROUP BY MONTH(orders.OrderDate), orders.ShipVia
```","The generated query does not group by year, which could cause incorrect aggregation across years.","SELECT MONTH(orders.OrderDate) AS month, shippers.CompanyName, AVG(orders.Freight) AS avg_freight FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY month, shippers.CompanyName","The generated query groups by shipper names, while the ground truth groups by ShipVia ID and includes the year, potentially leading to different results.",None
Identify the customers with the highest order frequency in the last year.,"SELECT CustomerID, COUNT(OrderID) AS OrderFrequency FROM orders WHERE OrderDate > CURRENT_DATE - INTERVAL '1 year' GROUP BY CustomerID ORDER BY OrderFrequency DESC LIMIT 10;","```sql
SELECT customers.CustomerID, customers.CompanyName, COUNT(orders.OrderID) AS OrderFrequency
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
WHERE orders.OrderDate >= DATEADD(year, -1, GETDATE())
GROUP BY customers.CustomerID, customers.CompanyName
ORDER BY OrderFrequency DESC;
```","The generated query includes customer names and does not limit the results, while the ground truth doesn't include customers' names and limits the output to the top 10.","SELECT customers.CustomerID, COUNT(orders.OrderID) AS OrderFrequency FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate >= CURRENT_DATE - INTERVAL '1 YEAR' GROUP BY customers.CustomerID ORDER BY OrderFrequency DESC;","The generated query does not limit the results to the top 10 customers, unlike the ground truth query.",None
What is the total revenue contribution from each supplier?,"SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;","```sql
SELECT s.SupplierID, s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY s.SupplierID, s.CompanyName;
```","Both queries calculate the total revenue contribution from each supplier by aggregating the revenue derived from order details. Although the generated query includes 'CompanyName' in the GROUP BY clause, it does not affect the revenue calculation.","SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity) AS TotalRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName;","The generated query does not account for discounts in the revenue calculation, which the ground truth query does.",Base
Determine the average reorder level for each category.,"SELECT c.CategoryName, AVG(p.ReorderLevel) AS AverageReorderLevel FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryName;","```sql
SELECT CategoryID, AVG(ReorderLevel) AS AverageReorderLevel
FROM products
GROUP BY CategoryID;
```","The generated query groups by CategoryID and doesn't include category names from the categories table, while the ground truth query joins with categories to provide CategoryName.","SELECT CategoryID, AVG(ReorderLevel) AS AverageReorderLevel FROM products GROUP BY CategoryID;","The generated query groups by CategoryID, but doesn't join with the categories table to provide category names, which the ground truth query does.",None
What is the product performance metric for the last six months?,"SELECT p.ProductID, SUM(od.Quantity) AS PerformanceMetric FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= DATEADD(month, -6, CURRENT_DATE) GROUP BY p.ProductID;","```sql
SELECT p.ProductID, SUM(od.Quantity) AS ProductPerformance
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.OrderID IN (
    SELECT OrderID 
    FROM Orders 
    WHERE OrderDate >= DATEADD(MONTH, -6, GETDATE())
)
GROUP BY p.ProductID;
```","The Generated SQL Query filters orders using the 'Orders' table for the date range, whereas the Ground Truth Query directly filters based on 'Order Details'. If 'OrderDate' in 'Order Details' differs from that in 'Orders', they may yield different results. Additionally, GETDATE() vs. CURRENT_DATE may lead to timezone differences.","SELECT p.ProductName, SUM(od.Quantity) AS ProductPerformance FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate >= DATEADD(month, -6, CURRENT_DATE) GROUP BY p.ProductID;","The generated query selects ProductName instead of ProductID, which changes the grouping condition and results.",None
What is the trend of average order value over the past year?,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS average_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE() GROUP BY month ORDER BY month","```sql
SELECT 
    DATE_TRUNC('month', orders.OrderDate) AS month, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value
FROM 
    [Order Details] 
JOIN 
    orders ON [Order Details].OrderID = orders.OrderID 
WHERE 
    orders.OrderDate >= DATEADD(year, -1, GETDATE())
GROUP BY 
    month
ORDER BY 
    month;
```","The generated query uses DATE_TRUNC and DATEADD, which might not be supported in all SQL dialects. The ground truth query uses DATE_FORMAT and DATE_SUB with CURDATE() for a similar purpose. Both aim to get monthly trends but may behave differently depending on the SQL engine.","SELECT DATE_TRUNC('month', orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY month","The generated query uses a fixed date range, while the ground truth query uses dynamic dates based on the current date to determine the past year.",None
Determine the total number of orders for each product.,"SELECT products.ProductName, COUNT(DISTINCT [Order Details].OrderID) AS TotalOrders FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName","```sql
SELECT products.ProductID, COUNT(orders.OrderID) AS TotalOrders
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY products.ProductID;
```","The Generated SQL counts all order occurrences, while the Ground Truth SQL counts distinct order occurrences. They group by different fields—ProductID vs ProductName—and thus yield potentially different results.","SELECT p.ProductID, p.ProductName, COUNT(od.OrderID) AS OrderCount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;","The generated query counts all OrderID occurrences, while the ground truth counts distinct OrderID.",None
Which shipping company has the highest average freight cost?,"SELECT ShipVia, AVG(Freight) AS avg_freight FROM orders GROUP BY ShipVia ORDER BY avg_freight DESC LIMIT 1;","```sql
SELECT ShipVia, AVG(Freight) AS AverageFreight
FROM orders
GROUP BY ShipVia
ORDER BY AverageFreight DESC
LIMIT 1;
```","Both queries calculate the average freight cost per shipping company, sort in descending order of average freight, and return the top result.","SELECT ShipVia, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipVia ORDER BY AvgFreightCost DESC LIMIT 1;","Both queries calculate the average freight cost per shipping company and order the results to find the highest average, limiting the output to one row. The differences in alias naming do not affect the outcome.",both
Determine the employee with the most orders shipped before the required date.,"SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) as EarlyShipments FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate < o.RequiredDate GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY EarlyShipments DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrdersShippedBeforeRequiredDate
FROM orders
WHERE ShippedDate < RequiredDate
GROUP BY EmployeeID
ORDER BY OrdersShippedBeforeRequiredDate DESC
LIMIT 1;
```","The generated query misses joining the employees table, thus lacks employee details beyond EmployeeID, while the ground truth query provides full employee information.","SELECT e.EmployeeID, COUNT(o.OrderID) AS EarlyOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate < o.RequiredDate GROUP BY e.EmployeeID ORDER BY EarlyOrders DESC LIMIT 1;","Both queries calculate the employee with the most orders shipped before the required date. The difference is that the ground truth query includes the first and last names of the employee, but this does not affect the accuracy of the result relevant to the original question.",FT
Calculate the average discount given per order.,SELECT AVG(od.Discount) AS AvgDiscount FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID;,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details];
```","Both queries calculate the average discount, and if all order details are relevant, they yield the same result.",SELECT AVG(od.Discount) AS AverageDiscount FROM [Order Details] od;,"Both queries calculate the average discount from the [Order Details] table, the JOIN in the ground truth is unnecessary for the calculation.",both
How many unique products have been ordered in the last year?,SELECT COUNT(DISTINCT ProductID) FROM [Order Details] o JOIN orders ON o.OrderID = orders.OrderID WHERE EXTRACT(YEAR FROM orders.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1;,"```sql
SELECT COUNT(DISTINCT od.ProductID) AS UniqueProductsOrdered
FROM [Order Details] od
JOIN orders o ON od.OrderID = o.OrderID
WHERE o.OrderDate >= DATEADD(YEAR, -1, GETDATE());
```","The generated query calculates the last 365 days from today, while the ground truth query filters products from the previous calendar year.",SELECT COUNT(DISTINCT ProductID) FROM [Order Details] WHERE OrderDate BETWEEN CURRENT_DATE - INTERVAL '1 year' AND CURRENT_DATE;,"The generated query checks for orders in the last year from the current date, while the ground truth checks specifically for orders in the previous calendar year.",None
What is the total freight cost for orders shipped in the last quarter?,"SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShippedDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months';","```sql
SELECT SUM(Freight) AS TotalFreightCost
FROM orders
WHERE ShippedDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 quarter'
  AND ShippedDate < DATE_TRUNC('quarter', CURRENT_DATE);
```",Both queries correctly calculate the total freight cost for orders shipped in the last quarter by setting the date range appropriately.,"SELECT SUM(Freight) AS TotalFreight FROM orders WHERE ShippedDate BETWEEN DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' AND DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 day';","The generated query incorrectly calculates the date range. It excludes the end date of the last quarter by using 'DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 day'', whereas it should include all dates from the start of the previous quarter to the current truncated quarter date.",Base
List products with the highest total sales value.,"SELECT ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY ProductName ORDER BY TotalSales DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSalesValue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSalesValue DESC;
```","The generated query does not have a LIMIT 5 clause, so it doesn't restrict the results to the top 5 products by total sales value as the ground truth query does.","SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSalesValue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSalesValue DESC;","The generated query does not limit the results, whereas the ground truth query includes a LIMIT 5 clause to return only the top 5 products.",None
How many orders were shipped after the required date?,SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;,"```sql
SELECT COUNT(*) AS OrdersShippedLate
FROM orders
WHERE ShippedDate > RequiredDate;
```","Both queries count the number of orders where the ShippedDate is later than the RequiredDate, yielding the same result.",SELECT COUNT(OrderID) AS LateShipments FROM orders WHERE ShippedDate > RequiredDate;,"Both queries count the number of orders where the ShippedDate is later than the RequiredDate, thus yielding the same result.",both
What is the monthly trend in sales quantity for each product?,"SELECT ProductID, EXTRACT(MONTH FROM OrderDate) AS Month, SUM(Quantity) AS MonthlySales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ProductID, Month;","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    DATE_TRUNC('month', o.OrderDate) AS Month, 
    SUM(od.Quantity) AS TotalQuantity
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
JOIN 
    orders o ON od.OrderID = o.OrderID
GROUP BY 
    p.ProductID, p.ProductName, Month
ORDER BY 
    Month, p.ProductID;
```","The generated query includes the columns ProductName and the use of DATE_TRUNC on OrderDate, whereas the ground truth query extracts the month using EXTRACT. Additionally, the generated query orders the result, which the ground truth does not.","SELECT DATE_TRUNC('month', o.OrderDate) AS Month, p.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY Month, p.ProductID ORDER BY Month, p.ProductID;","Both queries group the sales quantity by product and month, though the generated query uses DATE_TRUNC while the ground truth uses EXTRACT. Both achieve the desired trend analysis by summing quantities per product and month.",FT
What is the average supplier lead time for each supplier?,"SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID, suppliers.CompanyName;","```sql
SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
JOIN products ON [Order Details].ProductID = products.ProductID
GROUP BY products.SupplierID
```","The generated query groups by SupplierID but does not join with the suppliers table to retrieve the supplier name, which could result in different outputs if multiple suppliers have the same SupplierID.","SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID;","Both queries calculate the average lead time by computing the difference between ShippedDate and OrderDate for each supplier. They join the same tables and group by SupplierID, ensuring equivalent results.",FT
How many unique customers placed orders with discounts greater than 20%?,SELECT COUNT(DISTINCT orders.CustomerID) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE [Order Details].Discount > 0.2,"```sql
SELECT COUNT(DISTINCT orders.CustomerID) AS unique_customers 
FROM orders 
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID 
WHERE [Order Details].Discount > 0.20;
```","Both queries select distinct CustomerIDs from orders with a discount greater than 20%, and use the same join condition and tables.",SELECT COUNT(DISTINCT orders.CustomerID) AS unique_customers FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE [Order Details].Discount > 0.20,The queries have the same logic and will produce the same result. The difference in the discount condition (> 0.20 vs > 0.2) does not affect the outcome due to equivalent numerical representation.,both
Which products have the highest units on order but are still in stock?,SELECT ProductName FROM products WHERE UnitsOnOrder > 0 AND UnitsInStock > 0 ORDER BY UnitsOnOrder DESC;,"```sql
SELECT ProductName, UnitsOnOrder, UnitsInStock
FROM products
WHERE UnitsOnOrder > 0 AND UnitsInStock > 0
ORDER BY UnitsOnOrder DESC;
```","The generated query selects additional columns (UnitsOnOrder, UnitsInStock) that are not present in the ground truth query.","SELECT ProductID, UnitsOnOrder FROM products WHERE UnitsOnOrder > 0 AND UnitsInStock > 0 ORDER BY UnitsOnOrder DESC;","The generated query selects ProductID and UnitsOnOrder, while the ground truth query selects ProductName. The queries will have different outputs.",None
List the employee sales on each day of a specific month.,"SELECT e.EmployeeID, o.OrderDate, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS DailySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = %s AND YEAR(o.OrderDate) = %s GROUP BY e.EmployeeID, o.OrderDate;","```sql
SELECT 
    e.EmployeeID,
    e.FirstName,
    e.LastName,
    o.OrderDate,
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
WHERE 
    MONTH(o.OrderDate) = specific_month AND YEAR(o.OrderDate) = specific_year
GROUP BY 
    e.EmployeeID, o.OrderDate
ORDER BY 
    o.OrderDate, e.EmployeeID;
```","Both queries achieve the same objective of listing employee sales for each day of a specified month and year. The generated SQL includes additional employee details (first and last names) and orders the results, but these are not essential to the query's primary purpose.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales, DATE(orders.OrderDate) AS OrderDay FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = :SpecificMonth GROUP BY employees.EmployeeID, DATE(orders.OrderDate)","The generated query does not filter by year, while the ground truth query does. This could lead to inconsistent results if there are sales from the same month in different years.",Base
Identify products whose sales volume exceeds 100 units in the past month.,"SELECT products.ProductName FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderDate >= DATEADD(month, -1, CURRENT_DATE) GROUP BY products.ProductName HAVING SUM([Order Details].Quantity) > 100;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.OrderID IN (
    SELECT OrderID
    FROM [Order Details]
    WHERE OrderDate >= DATEADD(month, -1, GETDATE())
)
GROUP BY p.ProductID, p.ProductName
HAVING SUM(od.Quantity) > 100;
```",The generated query incorrectly filters OrderID instead of OrderDate. It might include orders from outside the past month if an OrderID has earlier dates as well.,SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderID = (SELECT OrderID FROM orders WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY OrderID) GROUP BY p.ProductID HAVING SUM(od.Quantity) > 100;,"The generated query retrieves products with sales in orders specifically from the previous month, but incorrectly uses 'OrderID' for filtering and lacks correct date filtering. It also assumes a Partially nested subquery. The ground truth query correctly filters by date using 'OrderDate' and aggregates sales correctly.",None
Calculate the total revenue for each shipping country.,"SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry;","```sql
SELECT ShipCountry, SUM(OrderDetails.UnitPrice * OrderDetails.Quantity * (1 - OrderDetails.Discount)) AS TotalRevenue
FROM orders
JOIN [Order Details] AS OrderDetails ON orders.OrderID = OrderDetails.OrderID
GROUP BY ShipCountry;
```","Both queries join the same tables and calculate the total revenue for each shipping country using the same logic and aggregation function. The only difference is the alias used for the 'Order Details' table in the generated query, which does not affect the result.","SELECT ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCountry;","Both queries calculate the total revenue per shipping country by joining 'orders' with 'Order Details' and using the same revenue formula. The table references and column names match, ensuring they produce identical outcomes.",both
What is the average lead time for each supplier in delivering their products?,"SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID;","```sql
SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.CompanyName;
```","Both queries calculate the average lead time for each supplier. The difference is in the columns selected for output (CompanyName vs SupplierID), but this does not affect the calculation of average lead time.","SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;","Both queries calculate the average lead time for each supplier by joining the necessary tables and grouping by SupplierID, yielding the same results.",both
Which employee was hired most recently?,"SELECT FirstName, LastName, HireDate FROM employees ORDER BY HireDate DESC LIMIT 1;","```sql
SELECT * FROM employees ORDER BY HireDate DESC LIMIT 1;
```",Both queries return the most recently hired employee by ordering by HireDate in descending order and limiting the result to 1 record.,"SELECT EmployeeID, LastName, FirstName, HireDate FROM employees ORDER BY HireDate DESC LIMIT 1;",The generated query includes 'EmployeeID' which is not present in the ground truth query. This additional column means the results are not identical.,Base
Determine the total quantity sold for each supplier.,"SELECT p.SupplierID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;","```sql
SELECT p.SupplierID, SUM(od.Quantity) AS TotalQuantitySold
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.SupplierID;
```",Both queries calculate the total quantity sold for each supplier by summing the quantities in the 'Order Details' table and grouping by 'SupplierID'. The joins and logic are functionally equivalent.,"SELECT s.SupplierName, SUM(od.Quantity) AS TotalSold FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierName;","The generated query groups by SupplierName, while the ground truth query groups by SupplierID. They provide results at different levels, potentially leading to different outcomes.",Base
Identify employees who have processed orders only within a specific country.,SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(DISTINCT o.ShipCountry) = 1 AND MAX(o.ShipCountry) = 'Specific Country';,"```sql
SELECT DISTINCT e.EmployeeID, e.FirstName, e.LastName
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.ShipCountry = 'SpecificCountry'
GROUP BY e.EmployeeID
HAVING COUNT(DISTINCT o.ShipCountry) = 1;
```","The generated query lacks a check for MAX(o.ShipCountry) = 'SpecificCountry', which ensures employees only processed orders in that specific country, matching the intent of the ground truth query.",SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShipCountry = 'SpecificCountry' GROUP BY e.EmployeeID HAVING COUNT(DISTINCT o.OrderID) = COUNT(DISTINCT CASE WHEN o.ShipCountry = 'SpecificCountry' THEN o.OrderID END);,"The generated SQL query focuses on orders processed in a specific country by matching the ShipCountry, whereas the ground truth checks for employees who have processed orders only in one country, regardless of what country that is. The logic is different.",None
Calculate the total sales revenue for each supplier for the last quarter.,"SELECT SupplierID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE QUARTER(OrderDate) = QUARTER(CURDATE()) - 1 GROUP BY SupplierID;","```sql
SELECT p.SupplierID, SUM(od.Quantity * od.UnitPrice) AS TotalSalesRevenue
FROM [Order Details] od
JOIN products p ON od.ProductID = p.ProductID
WHERE od.OrderID IN (
    SELECT OrderID 
    FROM Orders 
    WHERE OrderDate >= DATEADD(QUARTER, -1, GETDATE())
)
GROUP BY p.SupplierID;
```","The generated query uses DATEADD with GETDATE() to calculate the last quarter, which might not match the ground truth's use of QUARTER and CURDATE() - 1 for the previous quarter.","SELECT s.SupplierID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE Quarter(DATE_ADD(CURDATE(), INTERVAL -3 MONTH)) = 4 GROUP BY s.SupplierID;","The generated query incorrectly calculates the last quarter by using DATE_ADD and the fixed quarter value 4, which doesn't adapt to different times of the year. It also does not account for transferring the calculation to the OrderDate column. The ground truth query correctly determines the last quarter using QUARTER(OrderDate) = QUARTER(CURDATE()) - 1.",None
What is the average shipping cost for each shipping company?,"SELECT ShipVia, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, AVG(Freight) AS AverageShippingCost
FROM orders
GROUP BY ShipVia;
```","Both queries calculate the average freight cost grouped by shipping company (ShipVia) with only a difference in the alias for the AVG function, which does not affect the results.","SELECT ShipVia, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipVia;","Both queries select the shipping method (ShipVia) and calculate the average freight cost, grouping results by the shipping method. They are functionally identical and will yield the same results.",both
What is the average hiring duration of employees in correlation to their sales?,"SELECT AVG(DATEDIFF(CURDATE(), e.HireDate)) AS AvgHireDuration, AVG(sales.TotalSales) AS AvgSales FROM employees e JOIN (SELECT o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID) sales ON e.EmployeeID = sales.EmployeeID;","```sql
SELECT AVG(DATEDIFF(o.OrderDate, e.HireDate)) AS AverageHiringDuration, 
       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
```",The generated query calculates the average hiring duration based on order dates instead of the current date and does not average sales; it sums sales grouped by employee.,"SELECT E.EmployeeID, E.HireDate, CTE.total_sales, DATEDIFF(CURRENT_DATE, E.HireDate) AS hiring_duration FROM employees E JOIN (SELECT o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS total_sales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID) CTE ON E.EmployeeID = CTE.EmployeeID GROUP BY E.EmployeeID, E.HireDate, CTE.total_sales;","The generated query calculates hiring duration and sales for each employee but doesn't compute the average. The ground truth query calculates the average hiring duration and average sales, correlating them as requested.",None
What percentage of products were shipped via each shipping method?,"SELECT ShipVia, COUNT(orders.OrderID) * 100.0 / (SELECT COUNT(*) FROM orders) AS shipping_method_percentage FROM orders GROUP BY ShipVia","```sql
SELECT ShipVia, 
       COUNT(OrderID) * 100.0 / (SELECT COUNT(*) FROM orders) AS percentage_shipped 
FROM orders 
GROUP BY ShipVia
```","Both queries calculate the percentage of products shipped via each shipping method using the same logic and structure, yielding identical results.","```sql
SELECT ShipVia, COUNT(orders.OrderID) * 100.0 / (SELECT COUNT(*) FROM orders) AS percentage FROM orders GROUP BY ShipVia
```","Both queries calculate the percentage of products shipped via each shipping method using a similar formula and grouping by ShipVia. The only difference is in the alias name, which does not affect the calculation or the result.",both
What is the total discount value given for each order?,"SELECT od.OrderID, SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscount FROM [Order Details] od GROUP BY od.OrderID;","```sql
SELECT OrderID, SUM(Discount) AS TotalDiscount
FROM [Order Details]
GROUP BY OrderID;
```","The generated query sums the 'Discount' field directly, while the ground truth calculates the discount as Quantity * UnitPrice * Discount for each order.","SELECT OrderID, SUM(Quantity * UnitPrice * Discount) AS TotalDiscountValue FROM [Order Details] GROUP BY OrderID;","Both queries calculate the total discount value per order by summing the product of Quantity, UnitPrice, and Discount for each OrderID. They use equivalent SELECT statements and GROUP BY clauses.",FT
What is the correlation between unit price and quantity ordered for each product?,"SELECT ProductID, CORR(UnitPrice, Quantity) AS PriceQuantityCorrelation FROM [Order Details] GROUP BY ProductID;","```sql
SELECT 
    p.ProductID,
    p.ProductName,
    AVG(od.UnitPrice) AS AvgUnitPrice,
    AVG(od.Quantity) AS AvgQuantityOrdered,
    CORR(od.UnitPrice, od.Quantity) AS Correlation
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.ProductName
```","Both queries calculate the correlation between unit price and quantity for each product. The generated query includes additional fields (ProductName, averages) which do not affect the core calculation of correlation by ProductID.","SELECT p.ProductName, CORR(od.UnitPrice, od.Quantity) AS Correlation FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName","The generated query groups by ProductName and ProductID, returning ProductName, while the ground truth query only groups by ProductID and returns ProductID. Both queries aim to calculate the correlation per product but differ in selected columns.",Base
What is the most common ship region for orders?,"SELECT orders.ShipRegion, COUNT(orders.OrderID) AS RegionCount FROM orders GROUP BY orders.ShipRegion ORDER BY RegionCount DESC LIMIT 1;","```sql
SELECT ShipRegion, COUNT(*) AS OrderCount
FROM orders
GROUP BY ShipRegion
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries count the number of orders per ShipRegion and then sort this count in descending order, limiting the result to the top one. They yield the same result.","SELECT ShipRegion, COUNT(ShipRegion) AS OrderCount FROM orders GROUP BY ShipRegion ORDER BY OrderCount DESC LIMIT 1;","Both queries group by ShipRegion, count orders, and return the region with the highest count. Despite counting different columns, the results are logically equivalent for this question.",both
What is the inventory turnover ratio for each product category in June 2023?,"SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE DATE_FORMAT(orders.OrderDate, '%Y-%m') = '2023-06' GROUP BY categories.CategoryName","```sql
SELECT categories.CategoryID, 
       SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio
FROM [Order Details] 
JOIN products ON [Order Details].ProductID = products.ProductID 
JOIN categories ON products.CategoryID = categories.CategoryID 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-06-01' AND '2023-06-30'
GROUP BY categories.CategoryID
```","The generated query groups by CategoryID, while the ground truth query groups by CategoryName. The results will differ if CategoryID and CategoryName don't perfectly align.","SELECT category.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-06-01' AND '2023-06-30' GROUP BY category.CategoryName","Both queries calculate the inventory turnover ratio for each product category for June 2023, using total sales and average stock. The date filtering methods differ but yield the same result.",FT
"Are there any orders with zero freight costs, and if so, how many?",SELECT COUNT(OrderID) FROM orders WHERE Freight = 0;,"```sql
SELECT COUNT(*) AS ZeroFreightOrderCount
FROM orders
WHERE Freight = 0;
```","Both queries count the number of orders with zero freight costs, using either COUNT(*) or COUNT(OrderID), which yield the same result in this context.",SELECT COUNT(O.OrderID) AS OrdersWithZeroFreight FROM orders O WHERE O.Freight = 0;,Both queries count the number of orders with Freight equal to zero. The aliases and column names differ but do not affect the result.,both
Which employee has the highest sales in the western region?,"SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID WHERE territories.RegionID = (SELECT RegionID FROM region WHERE RegionDescription = 'Western') GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
JOIN employees ON orders.EmployeeID = employees.EmployeeID
JOIN territories ON employees.EmployeeID = employeeTerritories.EmployeeID
JOIN region ON territories.RegionID = region.RegionID
WHERE region.RegionDescription = 'Western'
GROUP BY employees.EmployeeID
ORDER BY employee_sales DESC
LIMIT 1;
```",The generated SQL query misses the join with 'employeeTerritories' and has an incorrect join logic on territories. It also does not include employee names.,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID WHERE region.RegionDescription = 'Western' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1;","Both queries correctly determine the employee with the highest sales in the Western region. The generated query uses `region.RegionDescription` for filtering and joins directly on `region`, while the ground truth uses a subquery for the same purpose. The main difference is in additional selected columns, which do not affect the correctness of finding the employee with the highest sales.",FT
Find the trend of order fulfillment time over the last year.,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM 
    orders
WHERE 
    OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
GROUP BY 
    Month
ORDER BY 
    Month;
```",Both queries calculate the average order fulfillment time by month for the last year and order the results by month. The differences in naming conventions and function calls do not affect the output.,"SELECT MONTH(OrderDate) AS OrderMonth, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY MONTH(OrderDate);","The generated query does not filter orders from the last year, and it groups by month without considering the year, which could lead to incorrect trends if the data spans multiple years.",Base
Find the top 5 customers by lifetime value.,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY LifetimeValue DESC LIMIT 5;","```sql
SELECT c.CustomerID, c.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.CustomerID, c.CompanyName
ORDER BY LifetimeValue DESC
LIMIT 5
```","The generated query includes CompanyName in the SELECT and GROUP BY clauses, which could change the output. The ground truth query does not include CompanyName, and adding it could affect grouping and ordering.","SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY LifetimeValue DESC LIMIT 5;","Both queries correctly calculate the lifetime value for each customer by summing the total price for all orders, accounting for discounts. The queries group by CustomerID, order by descending lifetime value, and limit the result to the top 5 customers. The table aliases and the naming are different, but the logic and the result are the same.",FT
Which month had the highest number of orders?,"SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EXTRACT(MONTH FROM OrderDate) ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, COUNT(OrderID) AS TotalOrders
FROM orders
GROUP BY OrderMonth
ORDER BY TotalOrders DESC
LIMIT 1;
```","The generated SQL query groups by year and month, whereas the ground truth groups by month, without considering the year.","SELECT DATE_TRUNC('month', OrderDate) AS OrderMonth, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY OrderMonth ORDER BY TotalOrders DESC LIMIT 1;","The generated query groups by month and year, while the ground truth query groups by month only. This may yield different results if orders span multiple years.",None
What percentage of customers are returning customers within the last month?,SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN CURRENT_DATE - INTERVAL '1 month' AND CURRENT_DATE THEN orders.CustomerID END) / COUNT(DISTINCT orders.CustomerID)) * 100 AS RetentionRate FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate < CURRENT_DATE - INTERVAL '1 month';,"```sql
SELECT 
    (COUNT(DISTINCT o1.CustomerID) * 100.0 / NULLIF(COUNT(DISTINCT o2.CustomerID), 0)) AS ReturningCustomerRate
FROM 
    orders o1
JOIN 
    orders o2 ON o1.CustomerID = o2.CustomerID
WHERE 
    o1.OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) 
    AND o1.OrderDate < CURRENT_DATE
    AND o2.OrderDate < DATEADD(MONTH, -1, CURRENT_DATE);
```","The generated query computes the percentage of returning customers based on both orders in the past month and prior months, whereas the ground truth query calculates the percentage of customers with orders in the last month out of all customers with any order.","SELECT (COUNT(DISTINCT CASE WHEN OrderDate BETWEEN '2023-09-01' AND '2023-09-30' THEN CustomerID END) / NULLIF(COUNT(DISTINCT CASE WHEN OrderDate < '2023-09-01' THEN CustomerID END), 0)) * 100 AS ReturningPercentage FROM orders;","The generated query calculates returning customers within September, not the last month relative to the current date, and uses a different denominator, only considering customers prior to September.",None
What is the total number of orders placed per month?,"SELECT TO_CHAR(o.OrderDate, 'YYYY-MM') AS Month, COUNT(o.OrderID) AS NumberOfOrders FROM orders o GROUP BY TO_CHAR(o.OrderDate, 'YYYY-MM');","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, COUNT(OrderID) AS TotalOrders
FROM orders
GROUP BY OrderMonth
ORDER BY OrderMonth;
```","Both queries group the results by month and count the number of orders, using slightly different date formatting functions but achieving the same grouping and counting logic.","SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');",Both queries group by month using TO_CHAR on OrderDate and count the OrderID. The column aliases differ but do not affect results.,both
What is the frequency distribution of order quantities?,"SELECT Quantity, COUNT(*) AS Frequency FROM [Order Details] GROUP BY Quantity ORDER BY Frequency DESC;","```sql
SELECT Quantity, COUNT(*) AS Frequency
FROM [Order Details]
GROUP BY Quantity
ORDER BY Quantity;
```","The queries order results differently. The generated query orders by Quantity, whereas the ground truth orders by Frequency DESC.","SELECT Quantity, COUNT(*) AS Frequency FROM ""Order Details"" GROUP BY Quantity;",The generated SQL query accurately provides the frequency distribution of order quantities without ordering. The inclusion of ORDER BY in the ground truth does not alter the distribution result.,FT
What is the most common shipping method used?,"SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT ShipVia, COUNT(*) AS MethodCount
FROM orders
GROUP BY ShipVia
ORDER BY MethodCount DESC
LIMIT 1;
```",Both queries achieve the same result by counting the occurrences of each shipping method and returning the most common one. The column alias difference ('MethodCount' vs 'OrderCount') does not affect the outcome.,"SELECT ShipVia, COUNT(OrderID) AS TimesUsed FROM orders GROUP BY ShipVia ORDER BY TimesUsed DESC FETCH FIRST 1 ROW ONLY;",Both queries correctly find the most common shipping method by counting occurrences of 'ShipVia' and returning the top result.,both
What is the average shipping cost per order each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY Month;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AverageShippingCost
FROM orders
GROUP BY Month
ORDER BY Month;
```","Both queries calculate the average shipping cost per month, grouping by month and using AVG on the Freight column. The difference in date formatting functions does not affect the outcome in this context.","SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');","Both queries group orders by month and calculate the average freight cost, although they use different methods to extract the month from OrderDate.",both
Identify the product with the highest inventory turnover ratio.,"SELECT p.ProductID, (SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0)) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY InventoryTurnoverRatio DESC LIMIT 1;","```sql
SELECT p.ProductID, p.ProductName, 
       SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY InventoryTurnoverRatio DESC
LIMIT 1;
```","The generated SQL query includes 'p.ProductName' in the SELECT and GROUP BY clauses, which could yield different results if multiple products have the same turnover ratio. The ground truth query ensures only the ProductID with the highest turnover is selected.","SELECT P.ProductName, SUM(OD.Quantity * OD.UnitPrice) / NULLIF(AVG(P.UnitsInStock), 0) AS InventoryTurnoverRatio FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID GROUP BY P.ProductName ORDER BY InventoryTurnoverRatio DESC LIMIT 1;","The generated query selects ProductName while the ground truth selects ProductID, which may lead to a different result if products have different names.",None
What is the trend of total sales revenue over the quarters?,"SELECT DATE_TRUNC('quarter', o.OrderDate) AS Quarter, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Quarter ORDER BY Quarter;","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-Q%q') AS Quarter, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Total_Sales
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    Quarter
ORDER BY 
    Quarter;
```","The generated query uses DATE_FORMAT to format quarters, which is not the ANSI SQL standard. Ground truth uses DATE_TRUNC, groups correctly by quarter, and both should yield similar results, but the formatting function indicates a potential difference in environments or output precision.","SELECT to_char(TO_DATE(CONCAT(to_char(OrderDate, 'YYYY'), '-Q'), 'YYYY-Q'), 'YYYY') AS Year, TO_CHAR(OrderDate, 'Q') AS Quarter, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Year, Quarter ORDER BY Year, Quarter;","The generated query potentially miscalculates the year and quarter. The ground truth uses DATE_TRUNC which correctly aggregates data by quarter, whereas the generated query attempts to format the date, which may not accurately group by the intended quarter.",None
Compute the total inventory value grouped by supplier.,"SELECT SupplierID, SUM(UnitPrice * UnitsInStock) as InventoryValue FROM products GROUP BY SupplierID;","```sql
SELECT p.SupplierID, SUM(p.UnitPrice * p.UnitsInStock) AS TotalInventoryValue
FROM products p
GROUP BY p.SupplierID;
```",Both queries calculate the total inventory value grouped by SupplierID using the same formula. They should yield the same results.,"SELECT s.SupplierID, SUM(p.UnitPrice * p.UnitsInStock) AS TotalInventoryValue FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID;",Both queries compute the total inventory value for each supplier by multiplying UnitPrice by UnitsInStock and grouping by SupplierID. The inclusion of a JOIN with the suppliers table in the generated query does not affect the result if SupplierID is correctly linked.,both
Identify customers who have never received a discount.,SELECT CustomerID FROM customers WHERE NOT EXISTS (SELECT 1 FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE customers.CustomerID = o.CustomerID AND od.Discount > 0);,"```sql
SELECT DISTINCT c.CustomerID, c.CompanyName, c.ContactName, c.ContactTitle, c.Address, c.City, c.Region, c.PostalCode, c.Country, c.Phone, c.Fax
FROM customers c
LEFT JOIN [Order Details] od ON c.CustomerID = od.CustomerID
GROUP BY c.CustomerID, c.CompanyName, c.ContactName, c.ContactTitle, c.Address, c.City, c.Region, c.PostalCode, c.Country, c.Phone, c.Fax
HAVING SUM(od.Discount) = 0 OR SUM(od.Discount) IS NULL;
```","The generated query checks for customers with a total discount of zero, including those with no orders, while the ground truth excludes those with any discount at all.",SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID HAVING COUNT(CASE WHEN od.Discount > 0 THEN 1 END) = 0;,"Both queries identify customers who have never received a discount by checking for the absence of discounts in the order details. The generated query uses a HAVING clause to count discounts, while the ground truth query uses a NOT EXISTS check.",FT
"What are the top 5 products by sales revenue, and which suppliers provide them?","SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue, p.SupplierID FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY od.ProductID, p.SupplierID ORDER BY TotalRevenue DESC LIMIT 5;","```sql
SELECT p.ProductName, s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
JOIN suppliers s ON p.SupplierID = s.SupplierID
GROUP BY p.ProductID, p.ProductName, s.CompanyName
ORDER BY TotalSales DESC
LIMIT 5;
```","Both queries calculate the top 5 products by sales revenue, including the suppliers. The generated query directly includes supplier details, aligning with the user's request.","SELECT p.ProductName, s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, s.CompanyName ORDER BY Revenue DESC LIMIT 5;","The generated query includes product and supplier names and uses the GROUP BY ProductName, while the ground truth query uses GROUP BY ProductID and SupplierID, leading to potential discrepancies if there are products with the same name from different suppliers.",Base
Which customer generated the highest revenue in the last year?,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY customers.CustomerID ORDER BY TotalRevenue DESC LIMIT 1;","```sql
SELECT c.CustomerID, c.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= DATEADD(year, -1, GETDATE())
GROUP BY c.CustomerID, c.CompanyName
ORDER BY TotalRevenue DESC
LIMIT 1;
```","The generated query calculates revenue for the past 12 months using GETDATE(), while the ground truth query calculates revenue for the last calendar year using CURRENT_DATE.","SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATEADD(YEAR, -1, current_date) GROUP BY customers.CustomerID ORDER BY TotalRevenue DESC LIMIT 1;","The queries differ in how they determine the date range. The generated query calculates starting from the current date minus one year, while the ground truth query considers the previous calendar year.",None
What is the average customer rating per order (assuming ratings are stored)?,"SELECT OrderID, AVG(Rating) AS AvgRating FROM RatingsTable GROUP BY OrderID","```sql
SELECT AVG(CustomerRating) AS AverageCustomerRating
FROM orders
JOIN CustomerRatings ON orders.OrderID = CustomerRatings.OrderID
GROUP BY orders.OrderID;
```","The generated query does not include the OrderID in the SELECT clause. Without OrderID, it doesn't match the ground truth query, which groups and displays average ratings by each OrderID.","The question falls outside the provided schema and metrics. To track customer ratings per order, another table is needed, which hasn't been defined in the schema. Therefore, there isn't a corresponding SQL query that can be provided based on the current schema.","The generated SQL query states that a RatingsTable is missing whereas the ground truth query assumes its presence. Without a RatingsTable, the generated response is correct in flagging this absence.",None
What percentage of products are currently discontinued?,SELECT (COUNT(CASE WHEN Discontinued = 1 THEN ProductID END) * 1.0 / COUNT(ProductID) * 100) AS PercentageDiscontinued FROM products;,"```sql
SELECT 
    (SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS PercentageDiscontinued
FROM 
    products;
```","Both queries calculate the percentage of products that are discontinued by dividing the count of discontinued products by the total count of products, then multiplying by 100. The difference in calculation approach does not affect the result.",SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM products) AS DiscontinuedPercentage FROM products WHERE Discontinued = 1;,"Both queries calculate the percentage of discontinued products by dividing the count of discontinued products by the total count of products, then multiplying by 100 to get the percentage.",both
What percentage of orders were delivered on time in June 2023?,SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-06-01' AND '2023-06-30',"```sql
SELECT (COUNT(orders.OrderID) FILTER (WHERE orders.ShippedDate <= orders.RequiredDate) * 100.0 / COUNT(orders.OrderID)) AS on_time_delivery_rate 
FROM orders 
WHERE orders.OrderDate BETWEEN '2023-06-01' AND '2023-06-30'
```",Both queries calculate the percentage of orders delivered on time by comparing ShippedDate and RequiredDate and using the same COUNT logic to filter and compute for June 2023.,SELECT COUNT(orders.OrderID) FILTER (WHERE orders.ShippedDate <= orders.RequiredDate) * 100.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE EXTRACT(YEAR FROM orders.OrderDate) = 2023 AND EXTRACT(MONTH FROM orders.OrderDate) = 6,"Both queries calculate the percentage of orders delivered on time by comparing ShippedDate and RequiredDate for orders in June 2023. The date filtering methods differ but yield the same range, resulting in identical outcomes.",both
What is the most common discount given on products?,"SELECT [Order Details].Discount, COUNT(*) AS count FROM [Order Details] GROUP BY [Order Details].Discount ORDER BY count DESC LIMIT 1","```sql
SELECT Discount, COUNT(*) AS discount_count
FROM [Order Details]
GROUP BY Discount
ORDER BY discount_count DESC
LIMIT 1
```","Both queries retrieve the most common discount from the 'Order Details' table by counting occurrences of each discount, grouping by discount, and ordering by the count in descending order, returning the top result. The syntax and aliases slightly differ, but the logic and outcome are the same.","SELECT [Order Details].Discount, COUNT(*) AS discount_count FROM [Order Details] GROUP BY [Order Details].Discount ORDER BY discount_count DESC LIMIT 1",Both queries count occurrences of each discount in [Order Details] and return the one with the highest count. The difference in column alias does not affect the result.,both
"Which customers have placed orders totaling more than $10,000?","SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSpent FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID HAVING TotalSpent > 10000;","```sql
SELECT c.CustomerID, c.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSpent
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.CustomerID, c.CompanyName
HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 10000;
```","Both queries calculate the total spent by each customer and filter the results for totals exceeding $10,000. Despite using different alias names and specifying additional columns, they produce the same outcomes.",SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 10000;,"Both queries correctly sum the total spend per customer and filter for totals greater than $10,000. They group by CustomerID and calculate the sum using UnitPrice, Quantity, and Discount from the Order Details. The output should yield the same results.",both
How does the shipping cost vary by region?,"SELECT ShipRegion, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipRegion;","```sql
SELECT ShipRegion, AVG(Freight) AS AverageShippingCost
FROM orders
GROUP BY ShipRegion;
```",Both queries calculate the average shipping cost by region and should yield the same results. The column alias difference does not affect the outcome.,"SELECT ShipRegion, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipRegion;",The generated SQL query is identical to the ground truth query and accurately calculates the average shipping cost by region.,both
Which product has the highest sales volume this quarter?,"SELECT products.ProductID, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE QUARTER(orders.OrderDate) = QUARTER(CURDATE()) AND YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY products.ProductID ORDER BY sales_volume DESC LIMIT 1","```sql
SELECT products.ProductID, SUM([Order Details].Quantity) AS total_sales_volume 
FROM [Order Details] 
JOIN products ON [Order Details].ProductID = products.ProductID 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-12-31' 
GROUP BY products.ProductID 
ORDER BY total_sales_volume DESC 
LIMIT 1;
```","The generated query uses hard-coded dates for the quarter, whereas the ground truth query dynamically calculates the current quarter and year. If the current date is within Q4 2023, both queries yield the same results; otherwise, they do not.","SELECT products.ProductName, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-12-31' GROUP BY products.ProductName ORDER BY sales_volume DESC LIMIT 1","The generated SQL query uses a fixed date range for the current quarter, while the ground truth query dynamically calculates the current quarter using QUARTER() and CURDATE(). This could yield different results if the exact dates of the quarter differ from October 1 to December 31.",None
What is the total discount amount applied by each employee?,"SELECT employees.EmployeeID, SUM([Order Details].Discount * [Order Details].UnitPrice * [Order Details].Quantity) AS TotalDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscount
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","Both queries calculate the total discount amount applied by each employee by summing the product of Quantity, UnitPrice, and Discount from the 'Order Details', grouped by EmployeeID. The difference in column naming in the SELECT clause does not affect the outcome.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID","Both queries calculate the total discount amount for each employee, using the same formula and structure, just with different order of multiplication terms. This does not affect the result.",both
Calculate the sales growth percentage for each employee from the previous month.,"SELECT e.EmployeeID, ((SUM(CASE WHEN MONTH(o.OrderDate) = 6 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END) - SUM(CASE WHEN MONTH(o.OrderDate) = 5 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END)) / NULLIF(SUM(CASE WHEN MONTH(o.OrderDate) = 5 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END), 0)) * 100 AS GrowthPercentage FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] ON o.OrderID = [Order Details].OrderID GROUP BY e.EmployeeID;","```sql
SELECT 
    e.EmployeeID,
    e.FirstName,
    e.LastName,
    COALESCE(SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) THEN od.Quantity * od.UnitPrice * (1 - od.Discount) END), 0) AS LastMonthSales,
    COALESCE(SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE) THEN od.Quantity * od.UnitPrice * (1 - od.Discount) END), 0) AS CurrentMonthSales,
    (COALESCE(SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE) THEN od.Quantity * od.UnitPrice * (1 - od.Discount) END), 0) - 
    COALESCE(SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) THEN od.Quantity * od.UnitPrice * (1 - od.Discount) END), 0)) / 
    NULLIF(COALESCE(SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) THEN od.Quantity * od.UnitPrice * (1 - od.Discount) END), 0), 0) * 1.0 * 100 AS SalesGrowthPercentage
FROM 
    employees e
LEFT JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
LEFT JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    e.EmployeeID, e.FirstName, e.LastName;
```","The generated query uses CURRENT_DATE for dynamic month calculation, while the ground truth uses hardcoded months (5 and 6) assuming a specific time frame. Additionally, the generated query includes employee details in the SELECT clause and uses LEFT JOINs, whereas the ground truth uses INNER JOINs and focuses solely on EmployeeID and GrowthPercentage.","SELECT e.EmployeeID, e.FirstName, e.LastName, (SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 2 MONTH) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 2 MONTH) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) / NULLIF(SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END), 0) * 100 AS SalesGrowth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName","The generated SQL query uses dynamic month calculations (CURRENT_DATE) for sales growth, whereas the ground truth query uses fixed months (May and June). The generated query adapts to any month, but the ground truth query only compares specific months (May vs. June). This would yield different results depending on the current date.",None
What is the total sales revenue generated by each supplier?,"SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID, suppliers.CompanyName;","```sql
SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.CompanyName;
```","Both queries calculate total sales revenue per supplier by summing up the adjusted sales (including discounts) and grouping by supplier company name. The main difference is the order of joins and the inclusion of SupplierID in the GROUP BY clause in the ground truth query, which doesn't affect the final result as long as CompanyName is also included.","SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;","The generated query excludes the supplier's CompanyName in the SELECT clause and GROUP BY, which may cause a mismatch in results if the CompanyName is required.",Base
How do discount rates impact the average order value?,"SELECT AVG(([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) AS avg_order_value, [Order Details].Discount FROM [Order Details] GROUP BY [Order Details].Discount","```sql
SELECT AVG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) AS avg_order_value
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY [Order Details].Discount
```","The generated query incorrectly uses SUM within the AVG function and includes a join with the orders table unnecessarily. This affects the computation of average order value, leading to potential errors in calculation.","To analyze how discount rates impact the average order value, we can calculate the relationship between discount rates and average order values across different orders. Here's the query:

```sql
SELECT discount_rate, AVG(invoice_value / (1 - discount_rate)) AS avg_order_value 
FROM (
    SELECT discounts.Discount AS discount_rate, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS invoice_value
    FROM [Order Details] 
    JOIN orders ON [Order Details].OrderID = orders.OrderID 
    JOIN discounts ON [Order Details].Discount = discounts.Discount
    GROUP BY discounts.Discount
) AS order_values;
```

This query checks how average order values (after discount) changes with different discount rates. Each discount rate's effect on average order value will be visible in the results.","The generated query includes a join with a 'discounts' table, which is unnecessary as the discount is already in the 'Order Details' table. It calculates an 'invoice_value' per discount rate and then attempts to average this, which is not logically equivalent to the ground truth query. The ground truth directly averages the adjusted order value per discount without any unnecessary complexity.",None
"What is the maximum, minimum, and average shipping cost for orders shipped within Europe?","SELECT MAX(Freight) AS MaxCost, MIN(Freight) AS MinCost, AVG(Freight) AS AvgCost FROM orders WHERE ShipCountry IN ('France', 'Germany', 'Italy');","```sql
SELECT 
    MAX(Freight) AS Max_Shipping_Cost,
    MIN(Freight) AS Min_Shipping_Cost,
    AVG(Freight) AS Avg_Shipping_Cost
FROM 
    orders
WHERE 
    ShipRegion IN ('Europe');
```","The generated query filters by ShipRegion = 'Europe', which may not properly identify European countries. The ground truth query filters specifically by European countries, potentially yielding different results.","SELECT MAX(Freight) AS MaxFreight, MIN(Freight) AS MinFreight, AVG(Freight) AS AvgFreight FROM orders WHERE ShipCountry IN ('Germany', 'France', 'Spain', 'Italy', 'UK');","The generated SQL query includes additional countries ('Spain', 'UK') compared to the ground truth, altering the results.",None
List the top 5 products with the highest inventory levels.,SELECT ProductName FROM products ORDER BY UnitsInStock DESC LIMIT 5;,"```sql
SELECT ProductID, ProductName, UnitsInStock
FROM products
ORDER BY UnitsInStock DESC
LIMIT 5;
```","The generated query includes 'ProductID' and 'UnitsInStock' in the SELECT clause, while the ground truth query only selects 'ProductName'.","SELECT ProductName, UnitsInStock FROM products ORDER BY UnitsInStock DESC LIMIT 5;","Both queries effectively rank products by 'UnitsInStock' in descending order and limit the results to the top 5, meeting the user's request.",FT
Identify employees with a salary above the average and who have generated above-average sales.,"WITH AvgSalary AS (SELECT AVG(Salary) AS AvgSal FROM employees), AvgSales AS (SELECT AVG(TotalSales) AS AvgEmpSales FROM (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID) Sub) SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e JOIN AvgSalary a ON e.Salary > a.AvgSal JOIN (SELECT e2.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS EmpSales FROM employees e2 JOIN orders o2 ON e2.EmployeeID = o2.EmployeeID JOIN [Order Details] od ON o2.OrderID = od.OrderID GROUP BY e2.EmployeeID) s ON e.EmployeeID = s.EmployeeID JOIN AvgSales av ON s.EmpSales > av.AvgEmpSales;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, e.Salary, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName, e.Salary
HAVING e.Salary > (SELECT AVG(Salary) FROM employees) AND TotalSales > (SELECT AVG(TotalSales)
    FROM (SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
          FROM employees e
          JOIN orders o ON e.EmployeeID = o.EmployeeID
          JOIN [Order Details] od ON o.OrderID = od.OrderID
          GROUP BY e.EmployeeID) AS SalesData);
```","Both queries calculate average salary and sales, then filter employees whose salary and sales exceed the respective averages. Differences in structure do not affect the result.",SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > (SELECT AVG(sales) FROM (SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS sales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID) AS avg_sales) AND e.Salary > (SELECT AVG(Salary) FROM employees);,"Both queries correctly identify employees with salaries and generated sales above the respective averages. The structure and elements vary, but the logic aligns.",both
How many different customers placed orders in January 2022?,SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate BETWEEN '2022-01-01' AND '2022-01-31';,"```sql
SELECT COUNT(DISTINCT CustomerID) AS DifferentCustomers
FROM orders
WHERE OrderDate >= '2022-01-01' AND OrderDate < '2022-02-01';
```","Both queries count distinct customers who placed orders in January 2022. The difference in date range specification (using '<' compared to 'BETWEEN') leads to the same result, as January 31 is effectively included in both queries.",SELECT COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders WHERE MONTH(OrderDate) = 1 AND YEAR(OrderDate) = 2022;,Both queries count distinct CustomerIDs for orders placed in January 2022. The methods of filtering dates differ but yield the same result.,both
Find products with below-average unit prices.,SELECT ProductName FROM products WHERE UnitPrice < (SELECT AVG(UnitPrice) FROM products);,"```sql
SELECT ProductID, ProductName, UnitPrice
FROM products
WHERE UnitPrice < (SELECT AVG(UnitPrice) FROM products);
```","Both queries identify products with below-average unit prices. The generated query includes ProductID, which does not affect the correctness.",SELECT ProductName FROM products WHERE UnitPrice < (SELECT AVG(UnitPrice) FROM products);,Both queries are identical and accurately find products with below-average unit prices by comparing each product's UnitPrice to the average UnitPrice.,both
Determine the most frequently ordered product.,"SELECT ProductID, COUNT(ProductID) AS OrderFrequency FROM [Order Details] GROUP BY ProductID ORDER BY OrderFrequency DESC LIMIT 1;","```sql
SELECT [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalQuantity
FROM [Order Details]
GROUP BY [Order Details].ProductID
ORDER BY TotalQuantity DESC
LIMIT 1;
```","The generated query calculates total quantity ordered, while the ground truth query counts the frequency of orders per product. These may yield different results.","SELECT ProductID, COUNT(*) AS OrderCount FROM [Order Details] GROUP BY ProductID ORDER BY OrderCount DESC LIMIT 1;",The SQL syntax uses LIMIT which is not part of the SQL ANSI standard. It should use FETCH FIRST 1 ROWS ONLY or a similar standard clause.,None
Identify the products with the highest discount rate.,"SELECT od.ProductID, MAX(od.Discount) AS MaxDiscount FROM [Order Details] od GROUP BY od.ProductID ORDER BY MaxDiscount DESC","```sql
SELECT p.ProductID, p.ProductName, od.Discount
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
ORDER BY od.Discount DESC
LIMIT 1;
```","The generated query selects one product with the highest discount across all rows, while the ground truth query identifies the maximum discount rate per product and orders them. They do not produce the same result.","SELECT od.ProductID, MAX(od.Discount) AS MaxDiscount FROM [Order Details] od GROUP BY od.ProductID ORDER BY MaxDiscount DESC;","Both queries aim to select the ProductID and the maximum discount for each product, ordering the results by the maximum discount in descending order. The difference is in the presence of a semicolon at the end of the generated query, which does not affect the correctness of the SQL statement.",FT
What is the total value of products currently in stock?,SELECT SUM(UnitPrice * UnitsInStock) AS TotalStockValue FROM products;,"```sql
SELECT SUM(UnitPrice * UnitsInStock) AS TotalValueInStock
FROM products
WHERE Discontinued = 0;
```","The generated query only considers non-discontinued products, while the ground truth query includes all products.",SELECT SUM(UnitPrice * UnitsInStock) AS TotalStockValue FROM products;,The generated SQL query and the ground truth SQL query are identical and both accurately calculate the total value of products in stock.,FT
What is the average fulfillment time for orders shipped by each method?,"SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY ShipVia;
```","The generated SQL query and the ground truth SQL query are identical, both correctly calculating the average fulfillment time for orders shipped by each method by using DATEDIFF to find the difference between ShippedDate and OrderDate and grouping by ShipVia.","SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia;","The generated query and the ground truth query calculate the same average fulfillment time for each shipping method; only the alias for the result column is different, which does not affect the output.",both
Find the distribution of employee sales across different regions.,"SELECT e.EmployeeID, o.ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, o.ShipRegion;","```sql
SELECT e.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.Region;
```","The generated query groups by Region, while the ground truth groups by EmployeeID and ShipRegion, indicating different groupings and outputs.","SELECT e.EmployeeID, o.ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, o.ShipRegion;","Both queries are identical and correctly calculate the distribution of employee sales across different regions by grouping by EmployeeID and ShipRegion, and summing the total sales.",FT
Compare the sales performance of all products per quarter.,"SELECT p.ProductName, DATE_TRUNC('quarter', o.OrderDate) AS Quarter, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID GROUP BY p.ProductName, Quarter;","```sql
SELECT 
    YEAR(o.OrderDate) AS Year, 
    QUARTER(o.OrderDate) AS Quarter, 
    p.ProductID, 
    p.ProductName, 
    SUM(od.Quantity) AS TotalSales
FROM 
    [Order Details] od
JOIN 
    products p ON od.ProductID = p.ProductID
JOIN 
    orders o ON od.OrderID = o.OrderID
GROUP BY 
    YEAR(o.OrderDate), 
    QUARTER(o.OrderDate), 
    p.ProductID, 
    p.ProductName
ORDER BY 
    Year, 
    Quarter, 
    p.ProductID;
```","The generated query includes additional columns (Year and ProductID) in GROUP BY and SELECT, and orders the results. The ground truth query uses DATE_TRUNC for quarters and doesn’t include YEAR. The total calculation logic aligns, but the structure differs.","SELECT p.ProductID, SUM(od.Quantity) AS TotalSales, DATE_TRUNC('quarter', o.OrderDate) AS Quarter FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, DATE_TRUNC('quarter', o.OrderDate) ORDER BY TotalSales DESC;","The generated query uses 'ProductID' instead of 'ProductName', and orders results by 'TotalSales', which can lead to different output order compared to the ground truth query.",None
Find orders that were shipped after the required date and provide their details.,SELECT * FROM orders WHERE ShippedDate > RequiredDate;,"```sql
SELECT *
FROM orders
WHERE ShippedDate > RequiredDate;
```",The generated SQL query and the ground truth SQL query are syntactically and semantically identical. Both queries retrieve details of orders where the ShippedDate is later than the RequiredDate.,"SELECT OrderID, OrderDate, RequiredDate, ShippedDate, Freight, ShipName, ShipAddress FROM orders WHERE ShippedDate > RequiredDate;","Both queries filter orders where ShippedDate is later than RequiredDate. The generated query specifies columns, while the ground truth query selects all columns, but both will yield orders that meet the condition.",both
What is the average order fulfillment time for each shipping method?,"SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS average_fulfillment_time FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS average_fulfillment_time
FROM orders
GROUP BY ShipVia
```","Both queries calculate the average DATEDIFF between ShippedDate and OrderDate for each unique ShipVia from the orders table, producing the same result.","SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY ShipVia;","Both queries calculate the average order fulfillment time for each shipping method using the same logic and grouping. The difference is only in the alias name, which does not affect the result.",both
What is the total sales revenue for the current year?,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE),"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
```","Both queries calculate the total sales for the current year. The generated query uses explicit date boundaries for 2023, while the ground truth dynamically uses the current year. Assuming the current date is in 2023, both will yield the same result.",SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()),"Both queries are logically equivalent, as CURDATE() and CURRENT_DATE are interchangeable in this context, ensuring the same year comparison.",both
How many customers have ordered more than 10 times?,SELECT COUNT(*) FROM (SELECT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 10) AS subquery;,"```sql
SELECT COUNT(DISTINCT CustomerID) AS CustomerCount
FROM orders
GROUP BY CustomerID
HAVING COUNT(OrderID) > 10;
```","Both queries count the number of customers who have more than 10 orders. The generated query uses DISTINCT, whereas the ground truth query uses a subquery, but both approaches achieve the same result.","SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID HAVING OrderCount > 10;",Both queries count the number of customers who have made more than 10 orders. The generated query groups by CustomerID and counts those with more than 10 orders. The ground truth query also groups by CustomerID and checks the count of orders per customer. Both yield the same result.,both
What is the total sales revenue generated by each product?,"SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSalesRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
```","Both queries calculate the total sales revenue per product by multiplying the quantity by the unit price, summing the results for each product, and grouping by product name. The Generated SQL also includes ProductID in the result, which does not affect the calculation of total sales revenue.","SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSalesRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;","Both queries correctly calculate the total sales revenue for each product by joining the products and order details tables and summing the product of quantity and unit price, grouped by product name.",both
What is the total sales value generated by each employee in the last month?,"SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND o.OrderDate < CURDATE() GROUP BY e.EmployeeID, e.FirstName, e.LastName;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, 
       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= DATEADD(MONTH, -1, GETDATE())
GROUP BY e.EmployeeID, e.FirstName, e.LastName
```","The generated query includes recent orders from the current day as well, while the ground truth query excludes them, resulting in different periods for calculations.","SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('MONTH', CURRENT_DATE) - INTERVAL '1 MONTH' AND o.OrderDate < DATE_TRUNC('MONTH', CURRENT_DATE) GROUP BY e.EmployeeID;",Both queries calculate total sales for each employee in the last month. The extra columns in the ground truth don't change the total sales calculation.,FT
Calculate the average order size in terms of total items.,"SELECT AVG(TotalItems) AS AverageOrderSize FROM (SELECT OrderID, SUM(Quantity) AS TotalItems FROM [Order Details] GROUP BY OrderID) AS OrderSizes;","```sql
SELECT AVG(total_items) AS average_order_size
FROM (
    SELECT SUM(Quantity) AS total_items
    FROM [Order Details]
    GROUP BY OrderID
) AS order_totals;
```","The generated query calculates the average order size by summing quantities per order and then averaging, just like the ground truth query.","SELECT AVG(total_items) FROM (SELECT OrderID, SUM(Quantity) AS total_items FROM [Order Details] GROUP BY OrderID) AS order_items;",Both queries calculate the average of total items per order by summing the Quantity for each OrderID and then taking the average. The queries use different column aliases but achieve the same result.,both
Find employees whose most common shipment destination is outside their country of residence.,"SELECT e.FirstName, e.LastName, most_common.ShipCountry FROM (SELECT o.EmployeeID, o.ShipCountry, COUNT(*) as cnt, RANK() OVER (PARTITION BY o.EmployeeID ORDER BY COUNT(*) DESC) as rnk FROM orders o GROUP BY o.EmployeeID, o.ShipCountry) as most_common JOIN employees e ON e.EmployeeID = most_common.EmployeeID WHERE most_common.rnk = 1 AND most_common.ShipCountry <> e.Country;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, e.Country,
       COUNT(o.ShipCountry) AS DestinationCount, 
       o.ShipCountry
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID, o.ShipCountry
HAVING o.ShipCountry != e.Country
ORDER BY COUNT(o.ShipCountry) DESC;
```",The generated query counts all shipment destinations outside the employee's country but does not determine the most common destination. It lacks logic to find the most frequent destination for each employee.,"SELECT e.EmployeeID, e.Country FROM employees e INNER JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.Country HAVING COUNT(CASE WHEN o.ShipCountry <> e.Country THEN 1 END) > 0;","The generated query checks if there are any shipments outside the employee's country, not if the most common destination is outside the country of residence.",None
What is the total freight cost per region?,"SELECT ShipRegion, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipRegion;","```sql
SELECT ShipRegion, SUM(Freight) AS TotalFreightCost
FROM orders
GROUP BY ShipRegion;
```","Both queries calculate the total freight cost per region by grouping the orders based on ShipRegion and summing the Freight, and will yield the same results.","SELECT ShipRegion, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipRegion;",Both queries are identical and accurately compute the total freight cost per region by grouping on ShipRegion and summing the Freight values.,both
Identify employees with no sales in the last month.,"SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE) WHERE o.OrderID IS NULL;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName
FROM employees e
LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND o.OrderDate >= DATEADD(month, -1, CURRENT_DATE)
LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE od.OrderID IS NULL;
```","The generated query uses an incorrect condition for identifying employees with no sales. It checks if 'OrderID IS NULL' on [Order Details], which is incorrect for this purpose. The ground truth correctly evaluates 'OrderID IS NULL' on the 'orders' table.","SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) AND e.EmployeeID IS NOT NULL;","The generated query is incorrect as it checks for sales made within the last month, and includes employees who have sales for EmployeeID not being null, rather than checking for employees with no sales in the last month. The ground truth query correctly identifies employees with no sales by using a LEFT JOIN and checking for NULL OrderID with the condition on OrderDate ensuring no sales in the previous month.",None
How much freight cost did we incur last month?,"SELECT SUM(o.Freight) AS TotalFreightLastMonth FROM orders o WHERE o.OrderDate >= DATEADD(MONTH, DATEDIFF(MONTH, 0, CURRENT_DATE) - 1, 0) AND o.OrderDate < DATEADD(MONTH, DATEDIFF(MONTH, 0, CURRENT_DATE), 0);","```sql
SELECT SUM(Freight) AS TotalFreightCost
FROM orders
WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') 
AND OrderDate < DATE_TRUNC('month', CURRENT_DATE);
```",Both queries calculate the total freight cost for the previous month. They use different date functions but achieve the same result.,"SELECT SUM(Freight) AS LastMonthFreightCost FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND OrderDate < DATE_TRUNC('month', CURRENT_DATE);","The generated SQL query uses DATE_TRUNC with INTERVAL, which may not accurately calculate last month's date range in SQL systems that do not support this syntax. The ground truth uses DATEADD and DATEDIFF, which is more compatible.",Base
Find the average shipping time for orders.,"SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM orders WHERE ShippedDate IS NOT NULL","```sql
SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime
FROM orders
WHERE ShippedDate IS NOT NULL;
```",Both queries calculate the average shipping time by finding the difference between ShippedDate and OrderDate and averaging it for entries where ShippedDate is not null. They achieve the same result despite the slight difference in alias naming.,"SELECT AVG(CAST(DATEDIFF(ShippedDate, OrderDate) AS FLOAT)) AS AverageProcessingTime FROM orders WHERE ShippedDate IS NOT NULL;","Both queries calculate the average difference between ShippedDate and OrderDate for orders where ShippedDate is not NULL, effectively resulting in the same outcome.",both
Which suppliers provide products that are currently reordered the most?,"SELECT SupplierID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products WHERE UnitsOnOrder > 0 GROUP BY SupplierID ORDER BY TotalUnitsOnOrder DESC;","```sql
SELECT p.SupplierID, COUNT(p.ProductID) AS ReorderCount
FROM products p
WHERE p.UnitsInStock <= p.ReorderLevel
GROUP BY p.SupplierID
ORDER BY ReorderCount DESC;
```","The generated query checks for stock at or below reorder levels, whereas the ground truth query sums units on order and only considers them if greater than zero.","SELECT SupplierID, COUNT(*) AS TotalReorders FROM products WHERE UnitsInStock <= ReorderLevel GROUP BY SupplierID ORDER BY TotalReorders DESC;","The generated query counts products with stock at or below reorder level, while the ground truth sums units currently on order. These measure different aspects of reordering.",None
Determine the product with the lowest unit price that is not discontinued.,"SELECT ProductName, UnitPrice FROM products WHERE Discontinued = 0 ORDER BY UnitPrice ASC LIMIT 1;","```sql
SELECT ProductID, ProductName, UnitPrice
FROM products
WHERE Discontinued = 0
ORDER BY UnitPrice
LIMIT 1;
```","Both queries correctly return the product with the lowest unit price that is not discontinued. They order the products by UnitPrice in ascending order and limit the result to one. The Generated SQL Query includes the ProductID, but this does not affect the correctness based on the user's question.","SELECT ProductName, UnitPrice FROM products WHERE Discontinued = 0 ORDER BY UnitPrice ASC LIMIT 1;","The generated SQL query and the ground truth SQL query are identical, therefore they produce the same result.",both
Which categories have the highest total sales?,"SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID ORDER BY TotalSales DESC;","```sql
SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.CategoryID
ORDER BY TotalSales DESC;
```","Both queries calculate total sales by category and order the results in descending order of total sales. The structure and logic are equivalent, leading to the same outcome.","SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID ORDER BY TotalSales DESC;","Both queries join the 'products' and 'Order Details' tables on 'ProductID', calculate total sales for each category, group by 'CategoryID', and order the results by 'TotalSales' in descending order. The use of 'INNER JOIN' and 'JOIN' is functionally equivalent.",both
Which product has the highest total sales?,"SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS ProductSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY ProductSales DESC LIMIT 1;","```sql
SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY [Order Details].ProductID
ORDER BY TotalSales DESC
LIMIT 1;
```",Both queries calculate the total sales for each product using the same formula and group by ProductID. They then order the results in descending order by sales and limit the result to the top entry. The JOIN operation in the generated query does not affect the outcome because it does not impact the calculation or aggregation.,"SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY TotalSales DESC LIMIT 1;",Both queries calculate total sales per product and return the product ID with the highest sales. The differing alias names for the SUM result do not affect the outcome.,both
What is the total number of orders shipped last month?,SELECT COUNT(orders.OrderID) AS Shipped_Orders FROM orders WHERE MONTH(orders.ShippedDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.ShippedDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH);,"```sql
SELECT COUNT(*) AS TotalOrders
FROM orders
WHERE ShippedDate >= DATE_FORMAT(CURDATE() - INTERVAL 1 MONTH, '%Y-%m-01')
AND ShippedDate < DATE_FORMAT(CURDATE(), '%Y-%m-01');
```","Both queries calculate the total orders shipped in the last month. The generated query uses a date range for the previous month, while the ground truth query uses MONTH and YEAR functions to filter the same period. Both approaches yield equivalent results.","SELECT COUNT(*) FROM orders WHERE MONTH(ShippedDate) = MONTH(DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)) AND YEAR(ShippedDate) = YEAR(DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH));","Both queries count the total number of orders shipped in the previous month by comparing the month and year of the ShippedDate with the current date minus one month, using equivalent logic.",both
Which supplier is used the least for orders based on total sales?,"SELECT suppliers.SupplierID, CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID, CompanyName ORDER BY TotalSales ASC LIMIT 1;","```sql
SELECT s.SupplierID, s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY s.SupplierID, s.CompanyName
ORDER BY TotalSales ASC
LIMIT 1;
```","The generated query and the ground truth query differ in that the ground truth query includes a join with the orders table, whereas the generated query does not. This could affect the result if there are conditions in orders that impact the calculation of total sales.","SELECT suppliers.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY TotalSales ASC LIMIT 1;",Both queries calculate the total sales per supplier and order by total sales in ascending order to find the least used supplier. The inclusion of additional columns like CompanyName in the ground truth does not affect the correctness of the generated query regarding the total sales calculation and order of suppliers.,FT
What is the average discount given on orders for each supplier?,"SELECT suppliers.CompanyName, AVG([Order Details].Discount) AS AvgDiscount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName;","```sql
SELECT s.SupplierID, AVG(od.Discount) AS AverageDiscount
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY s.SupplierID;
```","The generated query groups by SupplierID, whereas the ground truth query groups by CompanyName. They may yield different grouping results.","SELECT s.CompanyName, AVG(od.Discount) AS AverageDiscount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.CompanyName;","Both queries calculate the average discount given on orders for each supplier by joining the suppliers, products, and order details tables, grouping by supplier company name.",FT
Find the total sales revenue for each supplier.,"SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;","```sql
SELECT s.SupplierID, s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY s.SupplierID, s.CompanyName;
```","Both queries calculate the total sales revenue for each supplier using the same formula. The only difference is that the generated query includes the supplier's company name in the output, which does not affect the calculation result.","SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName;","The generated SQL groups by CompanyName, while the ground truth groups by SupplierID. This could yield different results if multiple suppliers have the same CompanyName.",Base
Calculate total sales per month.,"SELECT EXTRACT(MONTH FROM orders.OrderDate) AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EXTRACT(MONTH FROM orders.OrderDate);","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    month
ORDER BY 
    month;
```","The generated query groups by full year-month format, while the ground truth groups only by month, not considering the year. This might yield different results if multiple years are present.","SELECT EXTRACT(MONTH FROM orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EXTRACT(MONTH FROM orders.OrderDate)",Both queries calculate total sales per month by extracting the month from OrderDate and summing the sales. Only the alias for the month differs.,FT
How many customers are there in each region?,"SELECT c.Region, COUNT(c.CustomerID) AS CustomerCount FROM customers c GROUP BY c.Region;","```sql
SELECT Region, COUNT(CustomerID) AS CustomerCount
FROM customers
GROUP BY Region;
```",Both queries count the number of customers in each region using the same logic and structure. The difference in aliasing does not affect the result.,"SELECT Region, COUNT(CustomerID) AS CustomerCount FROM customers GROUP BY Region;","Both queries select the Region and count CustomerID, grouping by Region. They yield the same result.",both
What is the average discount given on orders per month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Discount) AS AvgDiscount FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT 
    MONTH(orders.OrderDate) AS OrderMonth, 
    AVG([Order Details].Discount) AS AverageDiscount
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    MONTH(orders.OrderDate)
```","The generated query uses MONTH() which returns only the month number, causing it to group all years together. The ground truth query uses DATE_FORMAT('%Y-%m'), which considers both year and month, preserving them as separate groups.","SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY Month","Both queries calculate the average discount per month by grouping order details by month and using a join, even though the date formatting functions and aliasing differ.",FT
Which supplier has the highest number of unique products?,"SELECT s.CompanyName, COUNT(DISTINCT p.ProductID) AS UniqueProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY UniqueProducts DESC LIMIT 1;","```sql
SELECT s.CompanyName, COUNT(DISTINCT p.ProductID) AS UniqueProductCount
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
GROUP BY s.SupplierID
ORDER BY UniqueProductCount DESC
LIMIT 1;
```","Both queries select the company name of the supplier with the highest count of unique products, grouping by supplier and ordering by the count in descending order, limiting to one result. They yield the same result.","SELECT s.SupplierID, s.CompanyName, COUNT(DISTINCT p.ProductID) AS UniqueProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID, s.CompanyName ORDER BY UniqueProducts DESC LIMIT 1;","Both queries retrieve the supplier with the highest number of unique products, with the main difference being in grouping columns and the inclusion of SupplierID in the first query, which does not affect the result.",both
Which employee handles the most orders shipped late?,"SELECT EmployeeID, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY EmployeeID ORDER BY LateOrders DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS LateOrders
FROM orders
WHERE ShippedDate > RequiredDate
GROUP BY EmployeeID
ORDER BY LateOrders DESC
LIMIT 1;
```",The generated SQL query and the ground truth query yield the same results and correctly answer the user's question. Both count the number of late orders per employee and order by the descending count to find the employee with the most late orders.,"SELECT EmployeeID, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY EmployeeID ORDER BY LateOrders DESC;","The generated SQL query returns all employees with their late order counts in descending order, while the ground truth query limits the result to only the employee with the most late orders.",Base
Which country has the highest number of orders?,"SELECT ShipCountry, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipCountry ORDER BY TotalOrders DESC LIMIT 1","```sql
SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY ShipCountry
ORDER BY NumberOfOrders DESC
LIMIT 1;
```",Both queries count orders per country and return the country with the highest count; field aliases do not affect the result.,"SELECT ShipCountry, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCountry ORDER BY OrderCount DESC LIMIT 1;","Both queries aim to find the country with the highest number of orders by grouping by ShipCountry and ordering in descending order, limiting the result to one. The difference in alias names (OrderCount vs TotalOrders) does not affect the outcome.",both
What are the top 5 cities where suppliers are located?,"SELECT suppliers.City, COUNT(*) AS SupplierCount FROM suppliers GROUP BY suppliers.City ORDER BY SupplierCount DESC LIMIT 5;","```sql
SELECT City, COUNT(*) as SupplierCount
FROM suppliers
GROUP BY City
ORDER BY SupplierCount DESC
LIMIT 5;
```","Both queries select the city and count suppliers from the 'suppliers' table, group by city, order by supplier count in descending order, and limit the results to the top 5.","SELECT suppliers.City, COUNT(suppliers.SupplierID) AS SupplierCount FROM suppliers GROUP BY suppliers.City ORDER BY SupplierCount DESC LIMIT 5;","Both queries count the number of suppliers in each city, group by city, order by the count in descending order, and limit the results to the top 5 cities.",both
Identify products with the highest average discount.,"SELECT products.ProductID, AVG([Order Details].Discount) AS AverageDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID ORDER BY AverageDiscount DESC LIMIT 1;","```sql
SELECT products.ProductID, products.ProductName, AVG([Order Details].Discount) AS AverageDiscount
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY products.ProductID, products.ProductName
ORDER BY AverageDiscount DESC
```",The generated query lists all products with average discounts in descending order. The ground truth query limits the result to the product with the highest average discount.,"SELECT products.ProductName, AVG([Order Details].Discount) AS AvgDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName ORDER BY AvgDiscount DESC;","The generated query lists all products with their average discounts in descending order, while the ground truth query returns only the product with the highest average discount.",None
Analyze the correlation between product price and the number of orders received.,"SELECT P.ProductName, P.UnitPrice, COUNT(OD.OrderID) AS OrderCount FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID GROUP BY P.ProductID, P.ProductName, P.UnitPrice ORDER BY OrderCount DESC;","```sql
SELECT 
    p.UnitPrice,
    COUNT(od.OrderID) AS NumberOfOrders
FROM 
    products p
LEFT JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.UnitPrice
ORDER BY 
    p.UnitPrice;
```","The generated query groups by UnitPrice alone, while the ground truth groups by ProductID, ProductName, and UnitPrice, showing product details with order counts. The generated query could aggregate different products with the same price, potentially losing necessary distinctions.","SELECT p.ProductID, 
       p.ProductName, 
       SUM(od.Quantity) AS TotalOrders, 
       AVG(od.UnitPrice) AS AvgPrice 
FROM products p 
JOIN [Order Details] od ON p.ProductID = od.ProductID 
GROUP BY p.ProductID, p.ProductName 
HAVING COUNT(DISTINCT od.OrderID) > 10;","The generated query calculates total orders and average price, applying a condition on order count, while the ground truth focuses on order count and price per product, ordering by order count.",None
Which employees handled the most customer orders?,"SELECT o.EmployeeID, COUNT(o.OrderID) AS OrdersHandled FROM orders o GROUP BY o.EmployeeID ORDER BY OrdersHandled DESC;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY EmployeeID
ORDER BY OrderCount DESC;
```",Both queries count the number of orders for each employee and order the results by the count in descending order. They yield the same results.,"SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC;","Both queries select the EmployeeID, count the number of OrderID for each employee, group by EmployeeID, and order the results by the count in descending order. The column aliases differ, but this does not affect the result.",both
Which products are on order but currently discontinued?,"SELECT ProductID, ProductName FROM products WHERE Discontinued = 1 AND UnitsOnOrder > 0;","```sql
SELECT p.ProductID, p.ProductName
FROM products p
WHERE p.Discontinued = 1 AND p.UnitsOnOrder > 0;
```",Both queries retrieve products that are discontinued and have units on order by checking the same conditions on the 'products' table.,SELECT ProductName FROM products WHERE UnitsOnOrder > 0 AND Discontinued = 1;,"The generated query only selects ProductName while the ground truth query selects both ProductID and ProductName, potentially omitting key information.",Base
How many unique products does each supplier offer?,"SELECT p.SupplierID, COUNT(DISTINCT p.ProductID) AS UniqueProducts FROM products p GROUP BY p.SupplierID;","```sql
SELECT suppliers.CompanyName, COUNT(DISTINCT products.ProductID) AS UniqueProducts
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
GROUP BY suppliers.CompanyName;
```","The generated SQL query returns the company names along with the count of unique products, while the ground truth query provides the supplier IDs with the count of unique products.","SELECT s.SupplierID, COUNT(DISTINCT p.ProductID) AS UniqueProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;","Both queries calculate the number of unique products for each supplier using COUNT(DISTINCT ProductID) and group by SupplierID. The generated query includes a join with the suppliers table, but it doesn't affect the result as it still groups by SupplierID.",FT
What is the on-time delivery rate each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month ORDER BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    COUNT(OrderID WHERE ShippedDate <= RequiredDate) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate
FROM 
    orders
GROUP BY 
    Month
```","The generated SQL query contains a syntax error due to incorrect placement of WHERE inside COUNT. It should use a CASE statement inside COUNT, similar to the ground truth query.","SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;","The generated query calculates the on-time delivery rate by comparing ShippedDate and RequiredDate, and both queries calculate the proportion of on-time deliveries per month. The differences in the multiplication by 100 and the use of '1' or 'OrderID' do not affect the outcome as both equate to checking true conditions.",FT
Which suppliers are located in the same city?,"SELECT City, STRING_AGG(DISTINCT SupplierID, ', ') AS SupplierIDs FROM suppliers GROUP BY City HAVING COUNT(DISTINCT SupplierID) > 1;","```sql
SELECT s1.CompanyName AS Supplier1, s2.CompanyName AS Supplier2, s1.City
FROM suppliers s1
JOIN suppliers s2 ON s1.City = s2.City AND s1.SupplierID <> s2.SupplierID
ORDER BY s1.City, Supplier1, Supplier2;
```","The generated query lists pairs of suppliers in the same city, while the ground truth query aggregates Suppliers by city and lists SupplierIDs with more than one supplier per city.","SELECT s1.SupplierID, s2.SupplierID FROM suppliers s1 JOIN suppliers s2 ON s1.City = s2.City AND s1.SupplierID < s2.SupplierID;","The generated query lists pairs of SupplierIDs in the same city, while the ground truth aggregates all SupplierIDs per city if more than one supplier exists in that city.",None
Which employees are responsible for the majority of orders in a specific territory?,"SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.ShipRegion = 'SpecificTerritory' GROUP BY employees.EmployeeID ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS OrderCount
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE e.Region = 'specific_territory'  -- Replace 'specific_territory' with the actual territory
GROUP BY e.EmployeeID
HAVING COUNT(o.OrderID) = (
    SELECT MAX(OrderCount)
    FROM (
        SELECT COUNT(OrderID) AS OrderCount
        FROM orders
        WHERE EmployeeID IN (SELECT EmployeeID FROM employees WHERE Region = 'specific_territory') 
        GROUP BY EmployeeID
    ) AS OrderCounts
)
```","The generated query uses a Region filter for employees which does not match the ground truth query that uses ShipRegion for orders. The generated query calculates the max order count across all employees in the territory, while the ground truth query uses ORDER BY and LIMIT to find the top employee by order count in a specific territory, potentially resulting in different employees being returned.","SELECT employees.EmployeeID, employees.FirstName, employees.LastName, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShipRegion = 'YourTerritory' GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName ORDER BY OrderCount DESC;","The generated query does not contain a LIMIT clause to return the top employee responsible for the majority of orders. It also uses 'YourTerritory' instead of 'SpecificTerritory'. Additionally, it does not include a join with the 'Order Details' table, which might be necessary for comprehensive data analysis.",None
Which supplier has the most delayed shipments?,"SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.RequiredDate)) AS AvgDelay FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.ShippedDate > orders.RequiredDate GROUP BY suppliers.SupplierID ORDER BY AvgDelay DESC LIMIT 1;","```sql
SELECT s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageDelay
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
WHERE o.ShippedDate > o.OrderDate
GROUP BY s.CompanyName
ORDER BY AverageDelay DESC
LIMIT 1;
```","The generated query calculates delay based on OrderDate, while the ground truth uses RequiredDate. This impacts the definition of delay and the final result.","SELECT suppliers.CompanyName, DATEDIFF(orders.ShippedDate, orders.OrderDate) AS DeliveryDelay FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID WHERE orders.ShippedDate > orders.OrderDate GROUP BY suppliers.CompanyName, DeliveryDelay ORDER BY DeliveryDelay DESC LIMIT 1;","The generated query calculates delay based on 'ShippedDate' and 'OrderDate', while the ground truth uses 'ShippedDate' and 'RequiredDate'. Additionally, the generated query does not calculate an average delay, which is essential for determining the supplier with the most delayed shipments.",None
How many unique products has each employee sold?,"SELECT E.EmployeeID, COUNT(DISTINCT OD.ProductID) AS UniqueProducts FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY E.EmployeeID;","```sql
SELECT e.EmployeeID, COUNT(DISTINCT od.ProductID) AS UniqueProductsSold
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID;
```","Both queries select the EmployeeID and count the distinct ProductID from the employees, orders, and Order Details tables, grouped by EmployeeID. The only difference is the alias name for the count column, which does not affect the result.","SELECT employees.EmployeeID, COUNT(DISTINCT [Order Details].ProductID) FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;","Both queries calculate the number of unique products sold by each employee by grouping by employee ID and using COUNT(DISTINCT ProductID). They use the same joins and groupings, so they yield the same results.",both
What is the total discount given on all orders?,SELECT SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details];,"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount
FROM [Order Details];
```","Both queries calculate the total discount by multiplying UnitPrice, Quantity, and Discount from the [Order Details] table, summing the results.",SELECT SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details];,Both the generated SQL query and the ground truth SQL query are identical and accurately calculate the total discount given on all orders.,both
What are the top 5 countries generating the most revenue from orders?,"SELECT customers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.Country ORDER BY total_revenue DESC LIMIT 5","```sql
SELECT customers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN customers ON orders.CustomerID = customers.CustomerID 
GROUP BY customers.Country 
ORDER BY total_revenue DESC 
LIMIT 5;
```","The generated SQL query uses 'LIMIT 5', which is not standard ANSI SQL. The correct keyword for top results is 'FETCH FIRST 5 ROWS ONLY' after 'ORDER BY' in ANSI SQL.","SELECT customers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.Country ORDER BY total_sales DESC FETCH FIRST 5 ROWS ONLY","Both queries calculate the total revenue per country and then order the results in descending order of revenue, fetching the top 5 countries. The difference in syntax for limiting the results ('FETCH FIRST 5 ROWS ONLY' vs 'LIMIT 5') is due to dialect variations, but they achieve the same outcome.",FT
How many orders were shipped by each shipping method?,"SELECT ShipVia, COUNT(OrderID) AS NumOrders FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY ShipVia;
```",Both queries count the number of orders for each shipping method by grouping on the 'ShipVia' column. The differences are only in the alias names and do not affect the result.,"SELECT ShipVia, COUNT(*) AS ShippedOrders FROM orders GROUP BY ShipVia;","Both queries count the number of orders for each shipping method grouped by the 'ShipVia' column, which accurately answers the user's question. The difference in column aliases (ShippedOrders vs. NumOrders) does not affect the result.",both
What is the effect of discount on product sales?,"SELECT Discount, SUM(Quantity) AS TotalSales FROM [Order Details] GROUP BY Discount ORDER BY Discount DESC;","```sql
SELECT 
    p.ProductID,
    p.ProductName,
    SUM(od.Quantity) AS TotalSales,
    SUM(od.Discount) AS TotalDiscount
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.ProductName
ORDER BY 
    TotalSales DESC;
```","The generated query aggregates sales by product, while the ground truth query aggregates sales by discount value.","SELECT [Order Details].ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS TotalSalesWithoutDiscount, SUM([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount) AS TotalDiscountAmount FROM [Order Details] GROUP BY [Order Details].ProductID;","The generated query calculates total sales with and without discount by ProductID, while the ground truth groups sales by discount level to evaluate its impact on total sales.",None
Which shipping method has the best on-time delivery rate?,"SELECT ShipVia, 100.0 * COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipVia ORDER BY OnTimeRate DESC LIMIT 1;","```sql
SELECT ShipVia, 
       COUNT(OrderID) AS TotalOrders, 
       COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveries, 
       COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate
FROM orders
GROUP BY ShipVia
ORDER BY OnTimeDeliveryRate DESC
LIMIT 1;
```","Both queries calculate the on-time delivery rate for each shipping method by comparing 'ShippedDate' to 'RequiredDate', group by 'ShipVia', and order by the on-time delivery rate in descending order. The scaling of the on-time delivery rate (100.0 vs 1.0) does not affect the final ordering. Both limit the result to the top shipping method.","SELECT ShipVia, COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipVia ORDER BY OnTimeRate DESC LIMIT 1;",Both queries calculate the on-time delivery rate by dividing the number of on-time shipments by the total number of shipments for each shipping method and order the results descending to find the best rate. The methods of counting on-time shipments are different but equivalent.,both
Which region has the highest total sales?,"SELECT Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Region ORDER BY TotalSales DESC;","```sql
SELECT customers.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.Region
ORDER BY TotalSales DESC
LIMIT 1;
```","The generated query includes 'LIMIT 1', which will return only the top region with the highest total sales, while the ground truth query does not include this limit and would list all regions sorted by sales.","SELECT ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCountry ORDER BY TotalSales DESC LIMIT 1;","The generated query calculates total sales by ShipCountry, not Region. It also doesn't join with the customers table to get the Region.",None
What is the correlation between order value and shipping delay?,"SELECT CORR(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) OVER (PARTITION BY orders.OrderID), DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS OrderValueShippingDelayCorrelation FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID;","```sql
SELECT 
    AVG(OrderValue) AS AverageOrderValue,
    AVG(ShippingDelay) AS AverageShippingDelay
FROM (
    SELECT 
        (SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID)) AS OrderValue,
        DATEDIFF(orders.ShippedDate, orders.OrderDate) AS ShippingDelay
    FROM 
        orders
    JOIN 
        [Order Details] ON orders.OrderID = [Order Details].OrderID
    GROUP BY 
        orders.OrderID
) AS OrderMetrics;
```",The generated query calculates average order values and shipping delays rather than correlating them. The ground truth query directly computes the correlation between order values and shipping delays.,"SELECT CORR(order_value, delay) FROM (SELECT o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS order_value, DATEDIFF(o.ShippedDate, o.RequiredDate) AS delay FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID) AS subquery;","The generated query calculates delay using RequiredDate, while the ground truth uses OrderDate. These differences in delay calculation could yield different correlation results.",None
Which city received the highest number of shipments?,"SELECT ShipCity, COUNT(OrderID) FROM orders GROUP BY ShipCity ORDER BY COUNT(OrderID) DESC LIMIT 1;","```sql
SELECT ShipCity, COUNT(OrderID) AS ShipmentCount
FROM orders
GROUP BY ShipCity
ORDER BY ShipmentCount DESC
LIMIT 1;
```","Both queries correctly find the city with the maximum number of shipments by grouping by ShipCity, counting OrderID, and ordering by the count in descending order. They limit the results to one city, which matches the user's request.","SELECT ShipCity, COUNT(OrderID) AS TotalShipments FROM orders GROUP BY ShipCity ORDER BY TotalShipments DESC LIMIT 1;",Both queries select the city with the highest number of shipments by counting OrderID and ordering in descending order. The difference in output column naming does not affect the result.,both
List employees who have been hired in the last 5 years.,"SELECT EmployeeID, FirstName, LastName FROM employees WHERE HireDate >= DATE_SUB(CURDATE(), INTERVAL 5 YEAR);","```sql
SELECT * FROM employees WHERE HireDate >= DATEADD(YEAR, -5, GETDATE());
```","The generated query uses a different date function (DATEADD and GETDATE), not ANSI SQL standard, and it selects all columns instead of only EmployeeID, FirstName, and LastName.","SELECT EmployeeID, FirstName, LastName FROM employees WHERE HireDate >= CURRENT_DATE - INTERVAL '5 YEARS';","Both queries select EmployeeID, FirstName, and LastName from employees where the HireDate is within the last 5 years, using equivalent date functions and intervals.",FT
Which products are often paired together in orders?,"SELECT od1.ProductID, od2.ProductID, COUNT(*) AS PairCount FROM [Order Details] od1 JOIN [Order Details] od2 ON od1.OrderID = od2.OrderID AND od1.ProductID < od2.ProductID GROUP BY od1.ProductID, od2.ProductID ORDER BY PairCount DESC LIMIT 5;","```sql
SELECT od1.ProductID AS ProductA, od2.ProductID AS ProductB, COUNT(*) AS PairCount
FROM [Order Details] od1
JOIN [Order Details] od2 ON od1.OrderID = od2.OrderID AND od1.ProductID <> od2.ProductID
GROUP BY od1.ProductID, od2.ProductID
ORDER BY PairCount DESC;
```",The generated SQL query does not ensure unique pairs as it uses 'od1.ProductID <> od2.ProductID' instead of 'od1.ProductID < od2.ProductID'. This may lead to duplicate pairs in reverse order.,"SELECT od1.ProductID, od2.ProductID, COUNT(*) AS PairCount 
FROM [Order Details] od1 JOIN [Order Details] od2 ON od1.OrderID = od2.OrderID AND od1.ProductID < od2.ProductID GROUP BY od1.ProductID, od2.ProductID ORDER BY PairCount DESC;","The generated SQL query does not have a LIMIT clause, so it returns all the paired products instead of just the top 5 as specified in the ground truth query.",None
Identify employees who have been with the company for over 10 years.,"SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e WHERE DATEDIFF(CURRENT_DATE, e.HireDate) > 3650;","```sql
SELECT EmployeeID, FirstName, LastName, HireDate
FROM employees
WHERE HireDate <= DATE_SUB(CURDATE(), INTERVAL 10 YEAR);
```","Both queries correctly identify employees who have been with the company for over 10 years, though they use different date calculations.","SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e WHERE e.HireDate <= DATE_SUB(CURDATE(), INTERVAL 10 YEAR);","Both queries use different date functions to check if HireDate is over 10 years ago. The generated query uses DATE_SUB with an interval of 10 years, while the ground truth uses DATEDIFF with 3650 days, which is approximately 10 years.",both
Which city has the highest number of shipments?,"SELECT ShipCity, COUNT(OrderID) AS ShipmentCount FROM orders GROUP BY ShipCity ORDER BY ShipmentCount DESC LIMIT 1;","```sql
SELECT ShipCity, COUNT(OrderID) AS ShipmentCount
FROM orders
GROUP BY ShipCity
ORDER BY ShipmentCount DESC
LIMIT 1;
```","The generated SQL query accurately answers the user's question and yields the same results as the ground truth query. Both queries select and count the number of shipments per city, group by city, order by shipment count in descending order, and limit the result to the city with the highest number of shipments.","SELECT ShipCity, COUNT(orders.OrderID) AS ShipmentCount FROM orders GROUP BY ShipCity ORDER BY ShipmentCount DESC LIMIT 1;",Both queries correctly count and order the shipments by city and limit the results to the city with the highest count. The difference in table aliasing does not affect the result.,both
What is the highest discount given to a single product?,"SELECT ProductName, [Order Details].Discount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount = (SELECT MAX(Discount) FROM [Order Details]) LIMIT 1;","```sql
SELECT MAX(Discount) AS HighestDiscount
FROM [Order Details];
```","The generated SQL query returns only the maximum discount value, while the ground truth query provides the product name along with the highest discount.",SELECT MAX(Discount) AS HighestDiscount FROM [Order Details];,The generated SQL query accurately returns the maximum discount but does not include the product details as requested in the ground truth query.,None
How many orders did each employee process last quarter?,"SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND CURRENT_DATE GROUP BY e.EmployeeID;","```sql
SELECT employees.EmployeeID, COUNT(orders.OrderID) AS NumberOfOrders
FROM employees
JOIN orders ON employees.EmployeeID = orders.EmployeeID
WHERE orders.OrderDate >= DATEADD(quarter, -1, GETDATE()) AND orders.OrderDate < GETDATE()
GROUP BY employees.EmployeeID
```",The generated query uses DATEADD and GETDATE which may not accurately retrieve the last quarter's data. The ground truth query uses DATE_SUB and CURRENT_DATE to correctly capture orders from the last three months.,"SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderDate BETWEEN DATE_SUB(DATE_FORMAT(CURDATE(), '%Y-%m-01'), INTERVAL 3 MONTH) AND DATE_SUB(DATE_FORMAT(CURDATE(), '%Y-%m-01'), INTERVAL 1 DAY) GROUP BY employees.EmployeeID;","The queries use different logic to determine 'last quarter.' The generated query uses a fixed calculation to determine the start and end of the last quarter based on the current date. The ground truth query calculates the range as the past three months from the current date, which may overlap with or differ from a standard quarter definition.",None
How many orders are pending shipment as of today?,SELECT COUNT(OrderID) AS PendingOrders FROM orders WHERE ShippedDate IS NULL;,"```sql
SELECT COUNT(OrderID) AS PendingOrders
FROM orders
WHERE ShippedDate IS NULL;
```","The generated SQL query and the ground truth query are identical and correctly count orders where ShippedDate is NULL, indicating pending shipments.",SELECT COUNT(OrderID) AS PendingOrders FROM orders WHERE ShippedDate IS NULL;,Both queries are identical and correctly filter orders that have not been shipped by checking where ShippedDate is NULL. This accurately counts the pending orders.,both
Determine the impact of discontinued products on total inventory.,SELECT SUM(UnitsInStock) FROM products WHERE Discontinued = 1;,"```sql
SELECT 
    SUM(UnitsInStock) AS TotalInventory,
    SUM(CASE WHEN Discontinued = 1 THEN UnitsInStock ELSE 0 END) AS DiscontinuedInventory,
    SUM(CASE WHEN Discontinued = 0 THEN UnitsInStock ELSE 0 END) AS ActiveInventory
FROM 
    products;
```","The generated query provides a breakdown of total, discontinued, and active inventory, while the ground truth query only calculates the discontinued inventory.",SELECT SUM(UnitsInStock) AS TotalInventory FROM products WHERE Discontinued = 1;,"Both queries calculate the sum of UnitsInStock for discontinued products, thus yielding the same results.",FT
Calculate the total order quantity for each product over the past year.,"SELECT ProductID, SUM(Quantity) AS AnnualOrderQuantity FROM [Order Details] WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY ProductID;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalOrderQuantity
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
WHERE o.OrderDate >= DATEADD(year, -1, GETDATE())
GROUP BY p.ProductID, p.ProductName
```","The generated query considers orders from the past 365 days from the current date, while the ground truth query focuses on the entire past calendar year.","SELECT p.ProductID, SUM(od.Quantity) AS TotalOrderQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY p.ProductID;","The generated query calculates total quantity over the past year using a date range, while the ground truth query calculates total quantity for the last complete year.",None
How many different shipping methods have been used to ship orders?,SELECT COUNT(DISTINCT ShipVia) AS ShippingMethods FROM orders;,"```sql
SELECT COUNT(DISTINCT ShipVia) AS DifferentShippingMethods
FROM orders;
```",Both queries calculate the number of distinct shipping methods used by counting distinct values in the 'ShipVia' column from the 'orders' table.,SELECT COUNT(DISTINCT ShipVia) AS ShippingMethods FROM orders;,"Both queries count the distinct values in the ShipVia column from the orders table, addressing the user's question accurately.",both
What is the monthly growth rate of returning customers over the last year?,"SELECT ((COUNT(DISTINCT CASE WHEN YEAR(o1.OrderDate) = 2022 THEN o1.CustomerID END) - COUNT(DISTINCT CASE WHEN YEAR(o2.OrderDate) = 2021 THEN o2.CustomerID END)) / NULLIF(COUNT(DISTINCT CASE WHEN YEAR(o2.OrderDate) = 2021 THEN o2.CustomerID END), 0)) * 100 AS monthly_growth FROM orders o1, orders o2 WHERE o1.CustomerID = o2.CustomerID AND YEAR(o1.OrderDate) = 2022 AND YEAR(o2.OrderDate) = 2021;","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, 
    COUNT(DISTINCT orders.CustomerID) AS returning_customers,
    (COUNT(DISTINCT orders.CustomerID) - COALESCE(LAG(COUNT(DISTINCT orders.CustomerID)) OVER (ORDER BY DATE_FORMAT(orders.OrderDate, '%Y-%m')), 0)) / 
    NULLIF(COALESCE(LAG(COUNT(DISTINCT orders.CustomerID)) OVER (ORDER BY DATE_FORMAT(orders.OrderDate, '%Y-%m')), 0), 0)) * 100 AS growth_rate
FROM 
    orders
WHERE 
    orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
GROUP BY 
    month
ORDER BY 
    month;
```","The generated query calculates monthly growth year-over-year for each month within the last year, using window functions and COALESCE/LAG to compute a growth rate. The ground truth query calculates growth from one year to the next overall, using conditional aggregations across two fixed years.","To calculate the monthly growth rate of returning customers over the last year, we need to first count the number of returning customers for each month and then calculate the growth rate based on the previous month's returning customers.

Here’s a step-by-step breakdown of the query:

1. **Identify New and Returning Customers**: We would check which customers made their first purchase and track their activity.
2. **Calculate Monthly Counts**: We need to count new customers versus returning ones for every month using a common table expression or subquery.
3. **Calculate Growth Rate**: Compare counts to find the growth in returning customers over the months.

Putting this into SQL:

```sql
WITH monthly_customers AS (
    SELECT 
        DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month,
        orders.CustomerID,
        ROW_NUMBER() OVER (PARTITION BY orders.CustomerID ORDER BY orders.OrderDate) AS rn
    FROM orders
),
customer_freq AS (
    SELECT 
        month,
        COUNT(DISTINCT CASE WHEN rn > 1 THEN CustomerID END) AS returning_customers_count,
        COUNT(DISTINCT CASE WHEN rn = 1 THEN CustomerID END) AS new_customers_count
    FROM monthly_customers
    GROUP BY month
),
growth_rate AS (
    SELECT 
        month,
        returning_customers_count,
        LAG(returning_customers_count) OVER (ORDER BY month) AS previous_month_count
    FROM customer_freq
)
SELECT 
    month,
    ((returning_customers_count - previous_month_count) / NULLIF(previous_month_count, 0)) * 100 AS growth_rate
FROM growth_rate
WHERE previous_month_count IS NOT NULL;
```

In this query:
- We first group customer purchase histories by month.
- We calculate how many of each are returning vs. new over each month.
- Finally, we derive the growth rate from the change in returning customer counts month over month. 

This comprehensive approach gives us insight into how customer retention trends evolve over the year.","The generated query calculates the monthly growth rate of returning customers by comparing consecutive months, whereas the ground truth query compares customer counts between two specific years, 2021 and 2022. They are measuring different time intervals and customer behaviors.",None
Find out the average discount given for each customer.,"SELECT customers.CustomerID, AVG([Order Details].Discount) AS AverageDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;","```sql
SELECT customers.CustomerID, AVG([Order Details].Discount) AS AverageDiscount
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID;
```",The generated SQL query and the ground truth query are semantically equivalent and will yield the same results for the user question. They both calculate the average discount for each customer.,"SELECT customers.CustomerID, AVG([Order Details].Discount) AS AvgDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;","Both queries calculate the average discount for each customer by joining the same tables and grouping by CustomerID. The only difference is in the alias name, which does not affect the results.",both
Find the total sales for each employee in a specific region.,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.ShipRegion = ? GROUP BY employees.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE e.Region = 'specific_region'  -- Replace 'specific_region' with the desired region
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","The queries differ in filtering criteria; the first query filters by employees' regions, while the second filters by the orders' shipping regions.","SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE e.Region = 'SpecificRegion' GROUP BY e.EmployeeID;","The generated query filters by employee region, while the ground truth filters by order ship region. These are different fields and could yield different results.",None
Which supplier supplies the most number of different products?,"SELECT s.SupplierID, s.CompanyName, COUNT(DISTINCT p.ProductID) AS NumberOfProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY NumberOfProducts DESC LIMIT 1;","```sql
SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount
FROM products
GROUP BY SupplierID
ORDER BY ProductCount DESC
LIMIT 1;
```","The generated query lacks the JOIN with the suppliers table, which means it doesn't provide the company name. However, both queries do accurately find the supplier with the most different products.","SELECT suppliers.CompanyName, COUNT(DISTINCT products.ProductID) AS ProductCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID, suppliers.CompanyName ORDER BY ProductCount DESC;","Both queries aim to find the supplier with the highest count of distinct products. The generated SQL query sorts by ProductCount in descending order, while the ground truth query limits the result to the top supplier. Despite this slight difference in presentation, they are functionally equivalent.",FT
Find the employee with the longest tenure at the company.,"SELECT FirstName, LastName, DATEDIFF(NOW(), HireDate) AS Tenure FROM employees ORDER BY Tenure DESC LIMIT 1;","```sql
SELECT EmployeeID, FirstName, LastName, DATEDIFF(CURRENT_DATE, HireDate) AS Tenure
FROM employees
ORDER BY Tenure DESC
LIMIT 1;
```",Both queries calculate tenure and retrieve the employee with the longest tenure using similar logic. The differences in function (CURRENT_DATE vs NOW()) and selected columns do not affect the result regarding the employee's tenure.,"SELECT e.FirstName, e.LastName, e.HireDate FROM employees e ORDER BY e.HireDate ASC LIMIT 1;","Both queries aim to find the employee with the longest tenure. The generated query sorts by earliest HireDate, while the ground truth calculates tenure and sorts by it. Both yield the same result.",both
What is the total freight cost by region?,"SELECT o.ShipRegion, SUM(o.Freight) AS TotalFreight FROM orders o GROUP BY o.ShipRegion;","```sql
SELECT Region, SUM(Freight) AS TotalFreightCost
FROM orders
JOIN customers ON orders.CustomerID = customers.CustomerID
GROUP BY Region;
```","The generated query groups by 'Region' from the customers table, while the ground truth query groups by 'ShipRegion' from the orders table. These may refer to different region attributes, potentially leading to different results.","SELECT ShipRegion, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipRegion;","The generated query and the ground truth query both calculate the total freight cost grouped by ShipRegion, yielding the same results.",FT
What is the average unit price of products supplied by each supplier?,"SELECT SupplierID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY SupplierID;","```sql
SELECT SupplierID, AVG(UnitPrice) AS AverageUnitPrice
FROM products
GROUP BY SupplierID;
```","Both queries calculate the average unit price of products by supplier, differing only in the alias naming.","SELECT s.SupplierID, AVG(p.UnitPrice) AS AverageUnitPrice FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID;","Both queries calculate the average unit price for each supplier by using the 'products' table and grouping by 'SupplierID'. The JOIN with 'suppliers' in the generated query does not affect the result, as it doesn't introduce new columns or filters.",both
Which suppliers have received the most customer orders?,"SELECT s.CompanyName, COUNT(DISTINCT o.OrderID) AS NumberOfOrders FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.CompanyName ORDER BY NumberOfOrders DESC;","```sql
SELECT s.SupplierID, s.CompanyName, COUNT(o.OrderID) AS TotalOrders
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY s.SupplierID, s.CompanyName
ORDER BY TotalOrders DESC;
```","The generated query counts all occurrences of OrderID without removing duplicates. The ground truth query counts distinct OrderIDs, which is necessary to avoid double-counting orders that have multiple products.","SELECT suppliers.CompanyName, COUNT(DISTINCT orders.OrderID) AS TotalOrders FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY suppliers.CompanyName ORDER BY TotalOrders DESC;","Both queries calculate the number of distinct orders per supplier by joining the same tables with identical conditions and grouping by supplier's company name, ordering by the order count in descending order.",FT
What is the total number of units on order for each product category?,"SELECT categories.CategoryID, SUM(products.UnitsOnOrder) FROM products JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID;","```sql
SELECT p.CategoryID, SUM(p.UnitsOnOrder) AS TotalUnitsOnOrder
FROM products p
GROUP BY p.CategoryID;
```","Both queries calculate the total number of units on order for each product category by summing 'UnitsOnOrder' and grouping by 'CategoryID'. The join in the ground truth query is not necessary if 'CategoryID' is already in the 'products' table, as shown in the generated query. The results will be the same.","SELECT CategoryID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY CategoryID;","The generated query assumes the CategoryID is directly available in the products table, without joining with the categories table, which may lead to different results if there are discrepancies between the two tables.",Base
What is the total quantity ordered for each product supplied by a supplier?,"SELECT p.ProductName, s.CompanyName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY p.ProductName, s.CompanyName;","```sql
SELECT p.ProductID, SUM(od.Quantity) AS TotalQuantityOrdered
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
WHERE p.SupplierID = <SupplierID>  -- Replace <SupplierID> with the actual SupplierID
GROUP BY p.ProductID;
```","The generated query includes a WHERE clause for a specific SupplierID which filters results to one supplier, while the ground truth query does not have this filter and aggregates quantities for all suppliers. Additionally, the ground truth query includes supplier and product names in the output, while the generated query outputs ProductID.","SELECT suppliers.SupplierID, products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID, products.ProductName ORDER BY suppliers.SupplierID;","The generated query uses SupplierID instead of CompanyName. Additionally, the order of columns in the GROUP BY clause and JOIN logic differ, affecting the output structure.",None
Find the customer with the highest single order value.,"SELECT o.CustomerID, od.OrderID, (od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID ORDER BY OrderValue DESC LIMIT 1;","```sql
SELECT orders.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS OrderValue
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY orders.CustomerID, orders.OrderID
ORDER BY OrderValue DESC
LIMIT 1;
```","Both queries calculate the order value and fetch the customer associated with the highest single order, so they should yield the same result.","SELECT o.CustomerID, oi.OrderID, (oi.UnitPrice * oi.Quantity * (1 - oi.Discount)) AS OrderValue FROM [Order Details] oi JOIN orders o ON oi.OrderID = o.OrderID ORDER BY OrderValue DESC LIMIT 1;",Both queries correctly calculate the order value and select the customer with the highest single order value. The queries are functionally equivalent.,both
What is the monthly product performance for each product?,"SELECT products.ProductName, EXTRACT(MONTH FROM orders.OrderDate) AS Month, SUM([Order Details].Quantity) AS MonthlyPerformance FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductName, EXTRACT(MONTH FROM orders.OrderDate);","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantity
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
```",The generated query does not calculate monthly performance; it only aggregates total quantity per product without considering the month of the orders.,"SELECT p.ProductID, p.ProductName, EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, p.ProductName, Year, Month;","The generated SQL includes additional grouping by year and returns ProductID, which the ground truth does not include. This results in different output focusing on yearly and monthly performance instead of just monthly performance per product.",None
How many unique products are ordered each month?,"SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(DISTINCT ProductID) AS UniqueProducts FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY TO_CHAR(OrderDate, 'YYYY-MM')","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth,
    COUNT(DISTINCT ProductID) AS UniqueProductsOrdered
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    OrderMonth
ORDER BY 
    OrderMonth;
```",Both queries count the distinct products ordered each month by ordering dates in the same table join operation and return similar results using different date formatting functions.,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(DISTINCT ProductID) AS UniqueProducts FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","Both queries count distinct products ordered each month after joining 'orders' and '[Order Details]' on 'OrderID'. They differ only in the date formatting function, using either 'DATE_FORMAT' or 'TO_CHAR', which is irrelevant within the context if the databases support these functions.",both
How many orders have a shipping cost above $50?,SELECT COUNT(*) AS high_freight_orders FROM orders WHERE Freight > 50,"```sql
SELECT COUNT(OrderID) AS orders_above_50_shipping 
FROM orders 
WHERE Freight > 50;
```","Both queries count the number of orders where the shipping cost, denoted as 'Freight', is greater than $50. They use different aliases but produce the same result.",SELECT COUNT(*) AS order_count FROM orders WHERE Freight > 50,"Both queries count orders with Freight greater than 50, differing only in the alias used.",both
Is there a trend in shipping delays over the past year?,"SELECT DATE_TRUNC('month', OrderDate) AS month, (COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) * 1.0 / COUNT(*)) * 100 AS delay_rate FROM orders WHERE OrderDate >= DATE_ADD(CURRENT_DATE, INTERVAL -1 YEAR) GROUP BY DATE_TRUNC('month', OrderDate);","```sql
SELECT 
    MONTH(OrderDate) AS Month, 
    COUNT(OrderID) AS TotalOrders,
    COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) AS DelayedOrders,
    COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS DelayPercentage
FROM 
    orders
WHERE 
    OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE)
GROUP BY 
    MONTH(OrderDate)
ORDER BY 
    Month;
```","Both queries calculate the percentage of delayed orders per month for the past year to identify trends, despite minor syntax differences.","SELECT TO_CHAR(date_trunc('month', ShippedDate), 'YYYY-MM') AS Month, COUNT(OrderID) AS DelayedOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY Month ORDER BY Month;","The generated query counts delayed orders per month regardless of when they were ordered, while the ground truth query calculates a delay rate for orders placed in the past year, considering their order dates.",Base
What is the average order fulfillment time over the past year?,"SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE OrderDate >= CURRENT_DATE - INTERVAL '1 year';","```sql
SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);
```","Both queries calculate the average fulfillment time for orders placed in the past year using the difference between ShippedDate and OrderDate. The logic and results are equivalent, although they use different date functions.","SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);",Both queries calculate the average order fulfillment time over the past year using the DATEDIFF function and apply a date filter for the past year correctly. The functions DATE_SUB and INTERVAL are used equivalently to achieve the same result.,both
What is the total quantity sold for each product category?,"SELECT categories.CategoryName, SUM([Order Details].Quantity) AS total_quantity_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName","```sql
SELECT categories.CategoryID, SUM([Order Details].Quantity) AS total_quantity_sold 
FROM [Order Details] 
JOIN products ON [Order Details].ProductID = products.ProductID 
JOIN categories ON products.CategoryID = categories.CategoryID 
GROUP BY categories.CategoryID
```","The generated SQL query groups by CategoryID, while the ground truth groups by CategoryName. This difference might lead to different results if CategoryID is not unique per CategoryName.","SELECT categories.CategoryName, SUM([Order Details].Quantity) AS total_quantity_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName;","Both queries are semantically identical and will yield the same results, as they have the same SELECT, JOIN, and GROUP BY clauses.",FT
"Find the average salary of employees who have generated over $50,000 in sales.",SELECT AVG(e.Salary) AS AvgSalary FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 50000;,"```sql
SELECT AVG(e.Salary) AS AverageSalary
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 50000;
```","The generated SQL query accurately matches the ground truth query in logic and calculates the average salary for employees who have generated over $50,000 in sales. Both use the same method for calculating sales and grouping by EmployeeID before applying the HAVING condition.",SELECT AVG(e.Salary) AS AvgSalary FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 50000;,"The generated SQL query and the ground truth SQL query are the same, so they will produce the same results.",both
Which customers have placed orders more than five times?,"SELECT customers.CustomerID, COUNT(orders.OrderID) AS OrderCount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 5","```sql
SELECT customers.CustomerID, customers.CompanyName, COUNT(orders.OrderID) as OrderCount
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
GROUP BY customers.CustomerID, customers.CompanyName
HAVING COUNT(orders.OrderID) > 5;
```","Both queries calculate the number of orders per customer and filter customers with more than five orders. Only an additional column, CompanyName, is included in the generated SQL, which does not affect the logic of selecting customers based on order count.","SELECT customers.CustomerID, COUNT(orders.OrderID) AS NumberOfOrders FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 5;","Both queries perform the same operations: join customers and orders tables, group by CustomerID, count the order IDs, and filter for counts greater than five. The only difference is the alias used for the count, which doesn't affect the result.",both
Rank customers by the number of orders they have placed.,"SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID ORDER BY NumberOfOrders DESC;","```sql
SELECT customers.CustomerID, customers.CompanyName, COUNT(orders.OrderID) AS NumberOfOrders
FROM customers
LEFT JOIN orders ON customers.CustomerID = orders.CustomerID
GROUP BY customers.CustomerID, customers.CompanyName
ORDER BY NumberOfOrders DESC;
```","Both queries aim to rank customers by the number of orders. The generated query includes customer details, not altering the count.","SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY CustomerID ORDER BY TotalOrders DESC;","Both queries count the number of orders per customer and order them by the count in descending order. The only difference is the alias used for the count, which does not affect the result.",both
Calculate the average time between order and shipment.,"SELECT AVG(DATE_PART('day', o.ShippedDate - o.OrderDate)) AS AvgShippingTime FROM orders o WHERE o.ShippedDate IS NOT NULL;","```sql
SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime
FROM orders
WHERE ShippedDate IS NOT NULL;
```",Both queries calculate the average number of days between the OrderDate and ShippedDate where ShippedDate is not null.,"SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders WHERE ShippedDate IS NOT NULL;",Both queries calculate the average number of days between OrderDate and ShippedDate for all orders with non-null ShippedDate. The syntax for date difference calculation (DATEDIFF vs DATE_PART) differs but achieves the same result.,both
What percentage of orders were delivered on time each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, ROUND(100.0 * SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID), 2) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID)) AS On_time_Delivery_Rate
FROM 
    orders
GROUP BY 
    Month
ORDER BY 
    Month;
```",Both queries calculate the percentage of on-time deliveries for each month by comparing the ShippedDate and RequiredDate and then dividing by the total orders. Differences in syntax do not affect the result.,"SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month",Both queries calculate the on-time delivery rate per month by comparing ShippedDate with RequiredDate and aggregating results; differences in date formatting do not affect output.,both
What is the Total Sales revenue for the last month?,SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) AND MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH),"```sql
SELECT 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Total_Sales
FROM 
    orders 
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE 
    orders.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month'
    AND orders.OrderDate < DATE_TRUNC('month', CURRENT_DATE);
```","Both queries calculate total sales for the last month using similar logic, though they use different date handling methods.",SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(MONTH FROM o.OrderDate) = EXTRACT(MONTH FROM current_date - INTERVAL '1' MONTH) AND EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM current_date - INTERVAL '1' MONTH);,"Both queries calculate the total sales revenue for the last month by summing up the product of UnitPrice, Quantity, and a discount factor for all order details. The month and year filtering logic for the last month is equivalent, using similar date extraction and interval adjustment techniques.",both
What is the distribution of orders across different shipping companies?,"SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia ORDER BY OrderCount DESC;","```sql
SELECT ShipVia, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY ShipVia;
```",Both queries calculate the distribution of orders across different shipping companies by counting OrderID for each ShipVia. Ordering does not affect the distribution result.,"SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia;","Both queries provide the distribution of orders across different shipping companies by counting OrderID and grouping by ShipVia. The only difference is that the ground truth query orders the results, which does not affect the distribution itself.",both
How many orders did each employee handle last year?,"SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName);","```sql
SELECT e.EmployeeID, COUNT(o.OrderID) AS OrdersHandled
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1
GROUP BY e.EmployeeID;
```","Both queries count the number of orders each employee handled last year by EmployeeID. The difference in the queries is the inclusion of employee names in the Ground Truth query, which does not affect the count results.","SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY employees.EmployeeID;","Both queries count the number of orders each employee handled last year. The only difference is the inclusion of employee names in the ground truth, which doesn't affect the order count result.",both
What day of the week do most shipments occur?,"SELECT TO_CHAR(ShippedDate, 'Day') AS Weekday, COUNT(OrderID) AS OrderCount FROM orders GROUP BY TO_CHAR(ShippedDate, 'Day') ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT DAYOFWEEK(ShippedDate) AS DayOfWeek, COUNT(OrderID) AS ShipmentCount
FROM orders
GROUP BY DayOfWeek
ORDER BY ShipmentCount DESC
LIMIT 1;
```","The generated query uses DAYOFWEEK() to extract the day of the week as a numeric value, whereas the ground truth query uses TO_CHAR() to get the week day name as a string. The results will not be directly comparable because the groupings are different.","SELECT EXTRACT(DOW FROM ShippedDate) AS DayOfWeek, COUNT(*) AS TotalShipments FROM orders GROUP BY DayOfWeek ORDER BY TotalShipments DESC;",The generated query provides a ranking of days by shipment count but doesn't limit the result to the top one. The ground truth query returns only the top day with the limit clause.,None
What is the total sales generated by each employee for the current month?,"SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE) + INTERVAL '1 month'
GROUP BY e.EmployeeID, e.FirstName, e.LastName
```","Both queries calculate total sales per employee for the current month, joining employees, orders, and order details. The date filtering logic for the current month is equivalent, and both group by employee information.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID;","Both queries calculate the total sales per employee for the current month. The difference is that the ground truth query includes the employee's full name in the output, but this does not affect the calculation of total sales.",both
Find the total sales by supplier in a specific month.,"SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE DATE_FORMAT(orders.OrderDate, '%Y-%m') = 'specific month' GROUP BY suppliers.CompanyName","```sql
SELECT suppliers.CompanyName, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN suppliers ON products.SupplierID = suppliers.SupplierID
WHERE MONTH(orders.OrderDate) = specific_month AND YEAR(orders.OrderDate) = specific_year
GROUP BY suppliers.CompanyName;
```","The generated query filters by MONTH and YEAR separately, while the ground truth query uses a format '%Y-%m' to filter. This may yield different results if not properly adjusted in 'specific month'.","SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SupplierSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = ? AND YEAR(orders.OrderDate) = ? GROUP BY suppliers.CompanyName;",Both queries calculate total sales by supplier and filter orders based on a specific month.,FT
How does the average employee salary compare between different regions?,"SELECT Region, AVG(Salary) AS AvgSalary FROM employees GROUP BY Region;","```sql
SELECT Region, AVG(Salary) AS AverageSalary
FROM employees
GROUP BY Region;
```","The generated SQL query and the ground truth query are functionally equivalent. Both calculate the average salary of employees grouped by region, despite the slight difference in the alias name for average salary.","SELECT Region, AVG(Salary) AS AverageSalary FROM employees GROUP BY Region;","Both queries calculate the average salary for employees grouped by region, thus yielding the same results.",both
What is the total quantity of products ordered in the last year?,"SELECT SUM(od.Quantity) AS TotalQuantityOrdered FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);","```sql
SELECT SUM([Order Details].Quantity) AS TotalQuantityOrdered
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);
```",Both queries calculate the total quantity of products ordered in the last year by joining the 'orders' and 'Order Details' tables and filtering by the date condition using DATE_SUB to get the past year.,"SELECT SUM([Order Details].Quantity) FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE DATE_SUB(CURDATE(), INTERVAL 1 YEAR) <= orders.OrderDate;",Both queries calculate the sum of 'Quantity' from 'Order Details' where 'OrderDate' is within the last year using a similar join and date filter strategy.,both
How many orders were shipped on or before the required date each month?,"SELECT TO_CHAR(ShippedDate, 'YYYY-MM') AS Month, COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY TO_CHAR(ShippedDate, 'YYYY-MM');","```sql
SELECT 
    DATE_FORMAT(ShippedDate, '%Y-%m') AS ShippingMonth, 
    COUNT(OrderID) AS OrdersShippedOnTime 
FROM 
    orders 
WHERE 
    ShippedDate <= RequiredDate 
GROUP BY 
    ShippingMonth;
```","Both queries group orders by the month of 'ShippedDate' and count orders where 'ShippedDate' is on or before 'RequiredDate'. The function to format the date is different, but they accomplish the same result.","SELECT DATE_TRUNC('month', ShippedDate) AS Month, COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY Month;","Both queries count the orders shipped on or before the required date, grouped by month. They simply use different functions to extract the month from ShippedDate, resulting in the same logical outcome.",both
List the top 5 products by revenue.,"SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 5;","```sql
SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue
FROM [Order Details] od
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY od.ProductID
ORDER BY Revenue DESC
LIMIT 5;
```","Both queries calculate the revenue for each product using the same formula and order the results by revenue. The join with 'orders' in the generated query does not affect the output, as it does not change the aggregation results.","SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY Revenue DESC LIMIT 5;","The only difference between the generated and ground truth queries is the alias used for the calculated revenue (Revenue vs TotalRevenue). This does not affect the results of the query, as both queries calculate the same values and apply the same sorting and limit.",both
What is the current total inventory value?,SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;,"```sql
SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue
FROM products;
```",The generated SQL query and the ground truth query are identical and will yield the same result.,SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;,"The generated SQL query is identical to the ground truth query, and they both correctly calculate the total inventory value.",both
What is the distribution of employee salaries by region?,"SELECT employees.Region, AVG(employees.Salary) AS AvgSalary FROM employees GROUP BY employees.Region;","```sql
SELECT Region, AVG(Salary) AS AverageSalary
FROM employees
GROUP BY Region;
```","The generated query calculates the average salary by region, not the full distribution, which should include more detailed statistical information such as counts or other measures beyond the average.","SELECT Region, Salary, COUNT(*) AS SalaryCount FROM employees GROUP BY Region, Salary;","The generated query counts salaries per unique salary amount within each region, while the ground truth query calculates the average salary per region. These two operations provide different insights into the salary distribution.",None
Find all employees who ship to more than three different countries.,SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(DISTINCT o.ShipCountry) > 3;,"```sql
SELECT e.EmployeeID, e.FirstName, e.LastName
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID
HAVING COUNT(DISTINCT o.ShipCountry) > 3;
```","Both queries count distinct ship countries for each employee and select those with more than three. The generated query includes additional employee details, but this does not affect the condition being evaluated.","SELECT e.EmployeeID, COUNT(DISTINCT o.ShipCountry) AS UniqueCountries FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(DISTINCT o.ShipCountry) > 3;","Both queries identify employees who ship to more than three different countries. The generated query includes a count in the SELECT clause, but it does not affect the filtering condition.",both
Which employee has the highest total sales?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM employees
JOIN orders ON employees.EmployeeID = orders.EmployeeID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY employees.EmployeeID
ORDER BY TotalSales DESC
LIMIT 1;
```",Both queries calculate total sales for each employee and return the one with the highest total. The additional columns in the generated query do not affect the result.,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","Both queries calculate the total sales per employee by summing the product of UnitPrice, Quantity, and the discount factor from the Order Details table, joining the necessary tables, and order the results to limit to the top employee. The logic and outcome are identical.",both
Which country has the highest number of customers?,"SELECT Country, COUNT(*) AS NumCustomers FROM customers GROUP BY Country ORDER BY NumCustomers DESC LIMIT 1;","```sql
SELECT Country, COUNT(CustomerID) AS CustomerCount
FROM customers
GROUP BY Country
ORDER BY CustomerCount DESC
LIMIT 1;
```","Both queries count the number of customers per country and return the country with the highest count. They group by Country, count customers, order by the count in descending order, and limit the result to the top one.","SELECT Country, COUNT(CustomerID) AS CustomerCount FROM customers GROUP BY Country ORDER BY CustomerCount DESC LIMIT 1;",Both queries count the number of customers per country and return the country with the highest count. They yield the same result.,both
What is the revenue contribution of each supplier?,"SELECT SupplierID, SUM(od.Quantity * od.UnitPrice) AS SupplierRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY SupplierID;","```sql
SELECT 
    p.SupplierID,
    SUM(od.Quantity * od.UnitPrice) AS RevenueContribution
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.SupplierID;
```",Both queries calculate the total revenue contribution for each SupplierID by joining the products table with the Order Details table on ProductID and summing the product of Quantity and UnitPrice. The differences in column alias names do not affect the correctness or functionality.,"SELECT SupplierID, SUM(od.Quantity * od.UnitPrice) AS Revenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY SupplierID;","Both queries perform a join between 'Order Details' and 'products', aggregate revenue per supplier using SUM on Quantity * UnitPrice, and group the result by SupplierID. The difference in column naming does not affect the results.",both
What has been the month-over-month growth in the number of orders?,"SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(*) AS OrderCount FROM orders GROUP BY Year, Month ORDER BY Year, Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth,
    COUNT(OrderID) AS NumberOfOrders,
    LAG(COUNT(OrderID)) OVER (ORDER BY DATE_FORMAT(OrderDate, '%Y-%m')) AS PreviousMonthOrders,
    COUNT(OrderID) - LAG(COUNT(OrderID)) OVER (ORDER BY DATE_FORMAT(OrderDate, '%Y-%m')) AS MonthlyGrowth
FROM 
    orders
GROUP BY 
    OrderMonth
ORDER BY 
    OrderMonth;
```","The generated query calculates month-over-month growth, but the ground truth query only counts orders per month without calculating growth.","SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS MonthlyOrders, LAG(COUNT(OrderID), 1) OVER (ORDER BY DATE_TRUNC('month', OrderDate)) AS PreviousMonthOrders, (COUNT(OrderID) - LAG(COUNT(OrderID), 1) OVER (ORDER BY DATE_TRUNC('month', OrderDate)))::DECIMAL / NULLIF(LAG(COUNT(OrderID), 1) OVER (ORDER BY DATE_TRUNC('month', OrderDate)), 0) AS GrowthRate FROM orders GROUP BY DATE_TRUNC('month', OrderDate)","The generated query calculates month-over-month growth, while the ground truth query only provides the order count per month without calculating growth.",None
What is the total freight cost incurred in the past quarter?,"SELECT SUM(Freight) FROM orders WHERE OrderDate BETWEEN DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' AND DATE_TRUNC('quarter', CURRENT_DATE);","```sql
SELECT SUM(Freight) AS TotalFreightCost
FROM orders
WHERE OrderDate >= DATEADD(quarter, -1, GETDATE());
```","The generated query calculates from one quarter back from the current date using GETDATE(), which may not align with the past calendar quarter as specified in the ground truth query.","SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE OrderDate BETWEEN DATEADD(QUARTER, -1, CURDATE()) AND CURDATE();","The generated query uses DATEADD and CURDATE() which might not calculate the previous quarter accurately depending on the current date. It should align with the start of the last quarter like the ground truth query, which uses DATE_TRUNC with an interval.",None
How many products are currently out of stock?,SELECT COUNT(products.ProductID) AS out_of_stock_products FROM products WHERE products.UnitsInStock = 0,"```sql
SELECT COUNT(*) AS out_of_stock_count FROM products WHERE UnitsInStock = 0;
```","Both queries count the number of products where UnitsInStock is 0, thus yielding the same result.",SELECT COUNT(ProductID) AS out_of_stock_count FROM products WHERE UnitsInStock = 0,"Both queries count the number of products with UnitsInStock equal to 0, which addresses the user's question.",both
What is the most common customer region?,"SELECT Region, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY Region ORDER BY NumberOfCustomers DESC LIMIT 1;","```sql
SELECT Region, COUNT(*) AS RegionCount
FROM customers
GROUP BY Region
ORDER BY RegionCount DESC
LIMIT 1;
```","Both queries correctly identify the most common customer region by counting occurrences per region, then sorting in descending order and limiting to one result. They differ slightly in column selection for counting but achieve the same outcome.","SELECT Region, COUNT(CustomerID) AS CustomerCount FROM customers GROUP BY Region ORDER BY CustomerCount DESC LIMIT 1;","Both queries correctly determine the most common customer region by counting CustomerIDs and sorting in descending order, limiting to one result.",both
What are the top 5 products in terms of revenue generated?,"SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY Revenue DESC LIMIT 5;","```sql
SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue
FROM [Order Details] od
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY od.ProductID
ORDER BY Revenue DESC
LIMIT 5;
```",Both queries calculate the top 5 products by revenue from the 'Order Details' table using the same formula for revenue and ordering logic.,"SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS Revenue FROM [Order Details] GROUP BY ProductID ORDER BY Revenue DESC LIMIT 5","Both queries calculate the total revenue for each product by using SUM on UnitPrice, Quantity, and Discount, group by ProductID, and then order the results by revenue in descending order, limiting the result to the top 5 products.",both
Find the highest freight charges for each country.,"SELECT ShipCountry, MAX(Freight) AS MaxFreight FROM orders GROUP BY ShipCountry;","```sql
SELECT Country, MAX(Freight) AS HighestFreight
FROM orders
GROUP BY Country;
```",The 'Generated SQL Query' uses 'Country' while the 'Ground Truth SQL Query' uses 'ShipCountry'. Both need to refer to the same column for the queries to yield the same results.,"SELECT ShipCountry, MAX(Freight) AS MaxFreight FROM orders GROUP BY ShipCountry;",The generated SQL query is identical to the ground truth query and accurately answers the user's question by selecting the maximum freight charge for each country from the orders table.,FT
What is the most common city among customers with the highest lifetime value?,SELECT customers.City FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.City ORDER BY SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) DESC LIMIT 1,"```sql
SELECT customers.City, COUNT(customers.City) AS city_count
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID
ORDER BY SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) DESC
LIMIT 1;
```","The generated query groups by 'customers.CustomerID' instead of 'customers.City', leading to incorrect aggregation and ordering for determining the most common city.","Certainly! The SQL query to find the most common city among customers with the highest lifetime value would be:

```sql
SELECT customers.City, COUNT(*) AS city_count FROM (SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID) AS customer_lifetime_values JOIN customers ON customer_lifetime_values.CustomerID = customers.CustomerID GROUP BY customers.City ORDER BY COUNT(*) DESC LIMIT 1;
``` 

This query first calculates the lifetime value of each customer, joins this data to the `customers` table to include city information, and finally counts occurrences of customers by city, returning the city with the highest occurrence.","The generated SQL query calculates the lifetime value for each customer first, then determines the most common city, which could be incorrect as it counts occurrences of cities without considering the highest lifetime value specific to one city. The ground truth query directly ranks cities by the total lifetime value and selects the top one.",None
Which supplier provides the most expensive products on average?,"SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AvgPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID ORDER BY AvgPrice DESC LIMIT 1;","```sql
SELECT s.CompanyName, AVG(p.UnitPrice) AS AveragePrice
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
GROUP BY s.SupplierID
ORDER BY AveragePrice DESC
LIMIT 1;
```","Both queries select the supplier providing the most expensive products on average by calculating the average price for each supplier, ordering by descending average price, and limiting the result to one record. The structure and logic are equivalent.","SELECT s.SupplierID, s.CompanyName, AVG(p.UnitPrice) AS AvgPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID, s.CompanyName ORDER BY AvgPrice DESC LIMIT 1;","Both queries join the suppliers and products tables on SupplierID, group by SupplierID (though generated query includes CompanyName for grouping redundantly), calculate the average UnitPrice, and order by AvgPrice in descending order, limiting to the top result. They will yield the same result.",both
How many orders were shipped late (after the required date)?,SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;,"```sql
SELECT COUNT(*) AS LateOrders
FROM orders
WHERE ShippedDate > RequiredDate;
```","Both queries count the orders where the ShippedDate is later than the RequiredDate, resulting in the same outcome.",SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate;,"Both queries count the number of orders where the ShippedDate is after the RequiredDate, which addresses the user's question about late shipments. The difference in alias usage does not affect the result.",both
What is the fastest average shipping method based on fulfillment time?,"SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia ORDER BY AvgFulfillmentTime ASC LIMIT 1;","```sql
SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY ShipVia
ORDER BY AverageFulfillmentTime ASC
LIMIT 1;
```","Both queries calculate the average fulfillment time for each shipping method and return the method with the shortest average time. The queries are functionally equivalent, despite slight differences in alias names.","SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia ORDER BY AvgFulfillmentTime ASC LIMIT 1;","The generated SQL query and the ground truth query are identical, thus they will yield the same results.",both
What is the most common shipping method for orders with late deliveries?,"SELECT ShipVia, COUNT(OrderID) AS LateCount FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipVia ORDER BY LateCount DESC LIMIT 1;","```sql
SELECT ShipVia, COUNT(*) AS LateDeliveryCount
FROM orders
WHERE ShippedDate > RequiredDate
GROUP BY ShipVia
ORDER BY LateDeliveryCount DESC
LIMIT 1;
```","Both queries correctly identify the most common shipping method for orders with late deliveries by counting orders where ShippedDate is later than RequiredDate, grouping by ShipVia, and ordering by the count, limiting the result to one.","SELECT ShipVia, COUNT(OrderID) AS LateDeliveries FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipVia ORDER BY LateDeliveries DESC LIMIT 1;","Both queries count late deliveries grouped by ShipVia and return the most common shipping method, with only alias differences.",both
What is the total number of discontinued products?,SELECT COUNT(ProductID) AS DiscontinuedProducts FROM products WHERE Discontinued = TRUE;,"```sql
SELECT COUNT(*) AS TotalDiscontinuedProducts 
FROM products 
WHERE Discontinued = 1;
```","Both queries count the number of discontinued products where the Discontinued field is interpreted as true or 1, yielding equivalent results.",SELECT COUNT(*) AS TotalDiscontinued FROM products WHERE Discontinued = 1;,Both queries count the number of products marked as discontinued. The use of '1' and 'TRUE' is functionally equivalent in this context.,both
What is the average discount provided on products in order history?,SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details];
```",The generated SQL query and the ground truth query are identical in function and should yield the same results.,SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];,"Both queries calculate the average discount from the 'Order Details' table, with only the alias differing in name.",both
List the most frequently ordered products.,"SELECT od.ProductID, p.ProductName, COUNT(od.OrderID) AS OrderCount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY od.ProductID, p.ProductName ORDER BY OrderCount DESC LIMIT 5;","```sql
SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalOrdered
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY products.ProductName
ORDER BY TotalOrdered DESC;
```","The generated query calculates the sum of quantities ordered, while the ground truth query counts the number of orders per product. These are different metrics for determining 'most frequently ordered'.","```sql
SELECT p.ProductName, COUNT(od.ProductID) AS OrderCount FROM products p JOIN ""Order Details"" od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY OrderCount DESC;
```","The generated query does not include a LIMIT clause, so it may return more rows than the ground truth query, which limits the result to 5.",None
What are the top selling products and which employees are associated with these sales?,"SELECT [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalQuantity, employees.EmployeeID FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY [Order Details].ProductID, employees.EmployeeID ORDER BY TotalQuantity DESC LIMIT 5;","```sql
SELECT 
    e.EmployeeID,
    e.FirstName,
    e.LastName,
    od.ProductID,
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    e.EmployeeID, e.FirstName, e.LastName, od.ProductID
ORDER BY 
    TotalSales DESC
```","The generated query calculates total sales value for products, while the ground truth query calculates total quantity for products and limits the results to top 5.","SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, e.EmployeeID, e.FirstName, e.LastName FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID JOIN employees e ON o.EmployeeID = e.EmployeeID GROUP BY od.ProductID, e.EmployeeID, e.FirstName, e.LastName ORDER BY TotalSales DESC LIMIT 5;","The generated SQL query calculates total sales value, while the ground truth query calculates total quantity sold. This difference leads to potentially different results.",None
What is the total freight cost incurred each month?,"SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, SUM(Freight) AS TotalFreight FROM orders GROUP BY Year, Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    SUM(Freight) AS TotalFreightCost
FROM 
    orders
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries calculate total freight costs for each month and return the same results, grouping by year and month.","SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(Freight) AS TotalFreight FROM orders GROUP BY DATE_TRUNC('month', OrderDate)","The generated query groups by the full timestamp of the month, while the ground truth query groups by separate year and month fields.",Base
How many orders have a shipping delay longer than 5 days?,"SELECT COUNT(OrderID) AS LongDelays FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) > 5;","```sql
SELECT COUNT(OrderID) 
FROM orders 
WHERE DATEDIFF(ShippedDate, OrderDate) > 5;
```","Both queries count orders with a shipping delay longer than 5 days using the same condition, differing only in the column alias.","SELECT COUNT(*) AS DelayedOrders FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) > 5;",Both queries count orders with a shipping delay longer than 5 days. The difference in column alias does not affect the result.,both
What is the on-time delivery rate for each shipping method?,"SELECT ShipVia, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipVia;","```sql
SELECT 
    ShipVia, 
    COUNT(OrderID) AS TotalOrders,
    COUNT(OrderID WHERE ShippedDate <= RequiredDate) AS OnTimeDeliveries,
    COUNT(OrderID WHERE ShippedDate <= RequiredDate) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate
FROM 
    orders
GROUP BY 
    ShipVia;
```",The generated query uses an incorrect syntax 'COUNT(OrderID WHERE ...)' instead of using a CASE statement or similar approach.,"SELECT ShipVia, SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipVia;","Both queries calculate the on-time delivery rate by comparing the ShippedDate to the RequiredDate and compute the percentage using the same logic. They differ only in their implementations of the CASE statement, but yield the same results for OnTimeDeliveryRate.",FT
What are the total units ordered for products with stock less than 10?,"SELECT p.ProductID, SUM(od.Quantity) AS TotalUnitsOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.UnitsInStock < 10 GROUP BY p.ProductID;","```sql
SELECT SUM([Order Details].Quantity) AS TotalUnitsOrdered
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
WHERE products.UnitsInStock < 10;
```","The generated query calculates the total units ordered globally for products with stock less than 10, while the ground truth query provides total units ordered per product and groups results by ProductID.","SELECT p.ProductID, SUM(od.Quantity) AS TotalUnitsOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.UnitsInStock < 10 GROUP BY p.ProductID;","The generated SQL query is identical to the ground truth query in terms of logic and structure, so it will yield the same results.",FT
Identify the top 3 cities with the highest total revenue.,"SELECT ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCity ORDER BY TotalRevenue DESC LIMIT 3;","```sql
SELECT City, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY City
ORDER BY TotalRevenue DESC
LIMIT 3;
```","The generated query uses 'City' from the 'customers' table, while the ground truth query uses 'ShipCity' from the 'orders' table. This may yield different results if 'City' differs from 'ShipCity'.","SELECT o.ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCity ORDER BY TotalRevenue DESC LIMIT 3;","Both queries calculate the total revenue per city and order the results to return the top 3 cities with the highest total revenue. The only difference is a table alias for ShipCity, which does not affect the outcome.",FT
How many orders were shipped after the required date?,SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;,"```sql
SELECT COUNT(*) AS OrdersShippedLate
FROM orders
WHERE ShippedDate > RequiredDate;
```","Both queries correctly count the number of orders where ShippedDate is after RequiredDate, achieving the same result.",SELECT COUNT(o.OrderID) AS LateShipments FROM orders o WHERE o.ShippedDate > o.RequiredDate;,"Both queries count the orders where ShippedDate is greater than RequiredDate, hence they yield the same result.",both
Identify the earliest and latest order dates for each customer.,"SELECT CustomerID, MIN(OrderDate) AS FirstOrder, MAX(OrderDate) AS LastOrder FROM orders GROUP BY CustomerID;","```sql
SELECT CustomerID, MIN(OrderDate) AS EarliestOrderDate, MAX(OrderDate) AS LatestOrderDate
FROM orders
GROUP BY CustomerID;
```","Both queries accurately compute the earliest and latest order dates for each customer. The difference is merely in the alias names for the result columns, which do not affect the correctness of the query output.","SELECT customers.CustomerID, MIN(orders.OrderDate) AS EarliestOrderDate, MAX(orders.OrderDate) AS LatestOrderDate FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID;","Both queries aggregate OrderDate using MIN and MAX grouped by CustomerID, which will yield the same earliest and latest order dates for each customer.",both
What is the most ordered product category this year?,"SELECT categories.CategoryID, categories.CategoryName, SUM([Order Details].Quantity) AS TotalOrdered FROM categories INNER JOIN products ON categories.CategoryID = products.CategoryID INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY categories.CategoryID, categories.CategoryName ORDER BY TotalOrdered DESC;","```sql
SELECT p.CategoryID, SUM(od.Quantity) AS TotalOrdered
FROM [Order Details] od
JOIN products p ON od.ProductID = p.ProductID
WHERE YEAR(od.OrderDate) = YEAR(CURRENT_DATE)
GROUP BY p.CategoryID
ORDER BY TotalOrdered DESC
LIMIT 1;
```","The generated query is missing a join with the categories table to get category details and does not include the current year's date filter properly. It also lacks the CategoryName in the SELECT and GROUP BY clauses, which the ground truth query includes.","SELECT c.CategoryID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID WHERE YEAR(od.OrderDate) = YEAR(CURDATE()) GROUP BY c.CategoryID ORDER BY TotalQuantity DESC LIMIT 1;","The generated query filters orders only for the current year, which aligns with the user's question. However, the ground truth query does not apply this filter and considers all data. Additionally, the generated query doesn't include CategoryName in the result, whereas the ground truth query does.",None
Assess the impact of discounts on product performance.,"SELECT products.ProductID, SUM([Order Details].Quantity * (1 - [Order Details].Discount)) / SUM([Order Details].Quantity) AS DiscountEffect FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantitySold, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue
FROM products p
INNER JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalQuantitySold DESC;
```","The generated query calculates total quantity sold and total revenue, while the ground truth query assesses the average discount effect on quantity. They answer different aspects of product performance.","SELECT p.ProductID, SUM(od.Quantity) AS TotalQuantity, SUM(od.Quantity * od.Discount) AS TotalDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID HAVING SUM(od.Quantity * od.Discount) > 1000","The generated query calculates total discounts on products with a filter, whereas the ground truth query evaluates the discount effect ratio on product sales.",None
Find the products with the highest and lowest Unit Prices and their associated stock levels.,"SELECT ProductName, UnitsInStock FROM products WHERE UnitPrice = (SELECT MAX(UnitPrice) FROM products) UNION SELECT ProductName, UnitsInStock FROM products WHERE UnitPrice = (SELECT MIN(UnitPrice) FROM products);","```sql
SELECT ProductName, UnitPrice, UnitsInStock
FROM products
WHERE UnitPrice = (SELECT MAX(UnitPrice) FROM products)
   OR UnitPrice = (SELECT MIN(UnitPrice) FROM products);
```","The generated query includes 'UnitPrice' in the SELECT clause, whereas the ground truth query does not. They produce different results.","SELECT p.ProductName, p.UnitPrice, p.UnitsInStock FROM products p WHERE p.UnitPrice IS NOT NULL ORDER BY p.UnitPrice DESC;","The generated SQL query lists all products ordered by UnitPrice, while the ground truth query correctly identifies only the products with the highest and lowest Unit Prices along with their stock levels.",None
Which countries have the highest number of orders in the last year?,"SELECT ShipCountry, COUNT(*) AS OrderCount FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY ShipCountry ORDER BY OrderCount DESC;","```sql
SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders
FROM orders
WHERE OrderDate >= DATEADD(YEAR, -1, GETDATE())
GROUP BY ShipCountry
ORDER BY NumberOfOrders DESC;
```","The generated query considers a rolling year from the current date, while the ground truth query analyzes the entire previous calendar year.","SELECT ShipCountry, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= DATEADD(year, -1, CURRENT_DATE) GROUP BY ShipCountry ORDER BY OrderCount DESC;","The generated query counts orders from the last 365 days, while the ground truth query counts from the entire previous calendar year.",None
What is the customer retention rate for the last quarter?,SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-12-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-10-01') AS customer_retention_rate,"```sql
(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-07-01') AS customer_retention_rate
```","The generated SQL query calculates the retention rate for Q3 (July to September), while the ground truth query is for Q4 (October to December).",SELECT COUNT(DISTINCT CASE WHEN o.OrderDate BETWEEN '2023-07-01' AND '2023-09-30' THEN o.CustomerID ELSE NULL END) / COUNT(DISTINCT CASE WHEN o.OrderDate < '2023-07-01' THEN o.CustomerID ELSE NULL END) AS customer_retention_rate FROM orders o;,The generated SQL query uses incorrect dates ('2023-07-01' to '2023-09-30') for the last quarter compared to the ground truth ('2023-10-01' to '2023-12-31'). This will not yield the same results.,None
Which region has the most sales by employees?,"SELECT o.ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS RegionSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN employees e ON o.EmployeeID = e.EmployeeID GROUP BY o.ShipRegion ORDER BY RegionSales DESC LIMIT 1;","```sql
SELECT e.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.Region
ORDER BY TotalSales DESC
LIMIT 1;
```","The generated query groups by employee region, while the ground truth groups by ship region, which may result in different outputs.","SELECT Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Region ORDER BY TotalSales DESC LIMIT 1;","The generated query uses the 'Region' column, while the ground truth uses 'ShipRegion'. These columns could refer to different definitions of region.",None
What is the total freight cost for all orders shipped to Germany?,SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShipCountry = 'Germany';,"```sql
SELECT SUM(Freight) AS TotalFreightCost
FROM orders
WHERE ShipCountry = 'Germany';
```","Both queries calculate the total freight cost for orders shipped to Germany, and they produce the same result.",SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShipCountry = 'Germany';,"Both queries have the same structure and condition, calculating the total freight cost for shipments to Germany.",both
What is the average order fulfillment time (in days) per month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM 
    orders
GROUP BY 
    Month
```","Both queries group by the formatted month and calculate the average fulfillment time using DATEDIFF function, yielding the same result.","SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(DAY, OrderDate, ShippedDate)) AS AvgFulfillmentTime FROM orders GROUP BY DATE_TRUNC('month', OrderDate);","Both queries calculate the average order fulfillment time in days per month, though they use different date functions and formats. The use of DATE_TRUNC and DATE_FORMAT achieves the same goal of grouping by month, and the DATEDIFF function is appropriately calculating the difference in days between OrderDate and ShippedDate in both cases.",both
Which regions have the highest average order quantities?,"SELECT ShipRegion, AVG([Order Details].Quantity) AS AvgQuantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion ORDER BY AvgQuantity DESC;","```sql
SELECT customers.Region, AVG([Order Details].Quantity) AS AverageOrderQuantity
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.Region
ORDER BY AverageOrderQuantity DESC;
```","The generated query uses 'customers.Region', while the ground truth uses 'ShipRegion'. The regions considered in each query might differ.","SELECT ShipRegion, AVG([Order Details].Quantity) AS AvgOrderQuantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion;",The generated query does not include an ORDER BY clause to sort the regions by the highest average order quantities.,None
Which customers have had all their orders delivered on time?,SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) = COUNT(*) FILTER (WHERE ShippedDate <= RequiredDate);,"```sql
SELECT CustomerID
FROM orders
GROUP BY CustomerID
HAVING COUNT(OrderID) = COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END);
```","Both queries check if the count of orders is equal to the count of orders delivered on time using different syntax, but effectively yield the same result.",SELECT o.CustomerID FROM orders o GROUP BY o.CustomerID HAVING MIN(CASE WHEN o.ShippedDate <= o.RequiredDate THEN 1 ELSE 0 END) = 1;,Both queries correctly identify customers whose all orders were delivered on or before the required date.,both
Determine if any product category consistently exceeds its reorder levels.,"SELECT CategoryID, COUNT(*) AS ExceedCount FROM products WHERE UnitsInStock > ReorderLevel GROUP BY CategoryID HAVING COUNT(*) > 0;","```sql
SELECT p.CategoryID, 
       SUM(p.UnitsInStock) AS TotalUnitsInStock, 
       SUM(p.ReorderLevel) AS TotalReorderLevel
FROM products p
GROUP BY p.CategoryID
HAVING SUM(p.UnitsInStock) > SUM(p.ReorderLevel);
```",The generated query sums the UnitsInStock and ReorderLevel for the entire category and checks if the total UnitsInStock exceeds the total ReorderLevel. The ground truth counts instances where individual products exceed their ReorderLevel within a category.,"SELECT CategoryID, AVG(UnitsOnOrder) AS AvgOrder FROM products GROUP BY CategoryID HAVING AVG(UnitsOnOrder) > AVG(ReorderLevel);","The generated query checks if the average units on order exceed average reorder levels, while the ground truth checks if there are any products in a category where stock exceeds reorder levels.",None
Which product generated the highest total sales revenue?,"SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM [Order Details] od
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY od.ProductID
ORDER BY TotalSales DESC
LIMIT 1;
```",Both queries calculate the total sales revenue for each product using the same formula and order by the total sales to determine the product with the highest revenue. The JOIN in the generated query does not affect the result as it does not change the final total.,"SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY TotalSales DESC LIMIT 1;","The generated SQL query is the same as the ground truth query, correctly calculating total sales per product and ordering by total sales in descending order, limited to one result for the highest sales.",both
What is the highest freight cost recorded in the database?,SELECT MAX(Freight) FROM orders;,"```sql
SELECT MAX(Freight) AS HighestFreightCost FROM orders;
```","Both queries calculate the maximum freight cost from the orders table, yielding the same result.",SELECT MAX(Freight) FROM orders;,Both the generated query and the ground truth query are identical and correctly compute the highest freight cost from the 'orders' table using the MAX function.,both
What is the total discount given on all orders?,SELECT SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM [Order Details] od;,"```sql
SELECT SUM(Discount) AS TotalDiscount
FROM [Order Details];
```","The generated query simply sums the 'Discount' field, whereas the ground truth query calculates the total discount by considering unit price, quantity, and discount rate.",SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM [Order Details];,"Both queries calculate the total discount by multiplying UnitPrice, Quantity, and Discount from the same table, and summing the result. They are syntactically different but functionally equivalent.",FT
Which region has the lowest on-time delivery rate this quarter?,"SELECT ShipRegion, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY ShipRegion ORDER BY OnTimeRate ASC LIMIT 1;","```sql
SELECT ShipRegion, 
       COUNT(OrderID) AS TotalOrders,
       COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveries,
       COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate
FROM orders
WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) 
  AND OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) + INTERVAL '3 months'
GROUP BY ShipRegion
ORDER BY OnTimeDeliveryRate ASC
LIMIT 1;
```","The generated query calculates the on-time delivery rate but includes COUNT(OrderID) which isn't necessary for the on-time delivery rate calculation. Both queries calculate on-time delivery rate per region, but the generated query has an extra column for total orders.","SELECT ShipRegion, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders WHERE QUARTER(OrderDate) = QUARTER(CURDATE()) GROUP BY ShipRegion ORDER BY OnTimeDeliveryRate ASC LIMIT 1;","The generated SQL uses QUARTER() which may not correctly handle quarters for certain SQL dialects and uses * 1.0 for calculating the rate. The ground truth uses DATE_TRUNC which is more precise for current quarter calculation and multiplies by 100.0 for percentage. Despite conceptual similarity, they might produce different results due to these differences.",None
Which customers have placed the most orders with a discount?,"SELECT o.CustomerID, COUNT(DISTINCT o.OrderID) AS DiscountedOrders FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0 GROUP BY o.CustomerID ORDER BY DiscountedOrders DESC;","```sql
SELECT CustomerID, COUNT(OrderID) AS OrderCount
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE [Order Details].Discount > 0
GROUP BY CustomerID
ORDER BY OrderCount DESC;
```","The generated query counts all order occurrences per customer, while the ground truth counts distinct orders. This may lead to different results if an order has multiple entries in the [Order Details] table.","SELECT o.CustomerID, COUNT(*) AS NumDiscountedOrders FROM orders o INNER JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0 GROUP BY o.CustomerID ORDER BY NumDiscountedOrders DESC;","The generated query counts all order details with discounts, while the ground truth query counts distinct orders with discounts. This could yield different results if an order has multiple discounted details.",None
Calculate the total sales grouped by country and month.,"SELECT ShipCountry, TO_CHAR(OrderDate, 'YYYY-MM') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry, TO_CHAR(OrderDate, 'YYYY-MM')","```sql
SELECT 
    orders.ShipCountry,
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    orders.ShipCountry,
    OrderMonth
ORDER BY 
    orders.ShipCountry,
    OrderMonth;
```","Both queries group by country and a formatted month and calculate total sales. DATE_FORMAT and TO_CHAR are equivalent for formatting dates in MySQL and SQL environments, respectively.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m'), ShipCountry;","Both queries calculate total sales grouped by country and month, using different functions for date formatting that yield the same result.",both
Which customers have placed orders with a shipping cost exceeding $100?,"SELECT DISTINCT customers.CustomerID, CompanyName FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.Freight > 100;","```sql
SELECT DISTINCT c.CustomerID, c.CompanyName, c.ContactName, c.ContactTitle, c.Address, c.City, c.Region, c.PostalCode, c.Country, c.Phone, c.Fax
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
WHERE o.Freight > 100;
```","The Generated SQL Query includes more columns in the SELECT clause than the Ground Truth SQL Query, which only selects CustomerID and CompanyName.",SELECT DISTINCT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.Freight > 100;,"Both queries identify customers who have placed orders with a shipping cost exceeding $100. The ground truth query additionally selects the CompanyName, but the core requirement is met by both.",FT
"Calculate the total revenue generated from orders, including discounts.",SELECT SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od;,"```sql
SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS TotalRevenue
FROM [Order Details];
```","Both queries calculate the total revenue from orders, taking discounts into account. They use equivalent logic and should yield the same results.",SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details];,"Both queries calculate the total revenue by multiplying quantity, unit price, and discount factor, then summing up the results from the same table.",both
Which product has the highest total sales in terms of revenue?,"SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductSales FROM [Order Details] od GROUP BY od.ProductID ORDER BY ProductSales DESC LIMIT 1","```sql
SELECT [Order Details].ProductID, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY [Order Details].ProductID
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries calculate the total sales for each product by multiplying UnitPrice, Quantity, and discount factor, group by ProductID, and order by total sales descending to find the highest one. 'orders' join in the generated query does not affect the result as it's not used in the final calculation.","SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY TotalSales DESC LIMIT 1;","Both queries calculate the total revenue for each product by summing the product of UnitPrice, Quantity, and the adjusted Discount, then order the results in descending order to find the product with the highest total sales. They produce equivalent results despite minor differences in aliasing.",both
List all discontinued products and their stock levels.,"SELECT ProductName, UnitsInStock FROM products WHERE Discontinued = 1;","```sql
SELECT ProductName, UnitsInStock
FROM products
WHERE Discontinued = 1;
```",Both queries are identical in functionality and will return discontinued products and their stock levels.,"SELECT ProductID, ProductName, UnitsInStock FROM products WHERE Discontinued = 1;","The generated query includes ProductID, which is not in the ground truth query.",Base
Which five products contribute the most to the total sales of each employee?,"SELECT e.EmployeeID, od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, od.ProductID ORDER BY e.EmployeeID, ProductSales DESC;","```sql
SELECT 
    e.EmployeeID,
    e.FirstName,
    e.LastName,
    od.ProductID,
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    e.EmployeeID, e.FirstName, e.LastName, od.ProductID
ORDER BY 
    e.EmployeeID, TotalSales DESC
LIMIT 5;
```","The generated query uses LIMIT 5, which globally limits the results to five products in total, rather than the top five products per employee.","SELECT e.EmployeeID, od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, od.ProductID ORDER BY TotalSales DESC LIMIT 5","The generated query attempts to find the top 5 products across all employees, instead of finding the top 5 products for each employee.",None
How many unique products were sold in the last year?,"SELECT COUNT(DISTINCT ProductID) FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR));","```sql
SELECT COUNT(DISTINCT [Order Details].ProductID) AS UniqueProductsSold
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE orders.OrderDate >= DATEADD(YEAR, -1, GETDATE());
```","The generated query uses DATEADD and GETDATE(), while the ground truth query uses DATE_SUB and CURDATE(). This leads to differences in date handling functions that might yield different results based on the execution environment.",SELECT COUNT(DISTINCT [Order Details].ProductID) AS Unique_Product_Count FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1;,"The generated query checks orders only in the previous calendar year, while the ground truth checks for the past 365 days from the current date, which can yield different results.",None
Which shipping company has the highest on-time delivery rate?,"SELECT shippers.CompanyName, CAST(COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) AS FLOAT) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName ORDER BY on_time_delivery_rate DESC","```sql
SELECT shippers.CompanyName, 
       COUNT(orders.OrderID) AS total_orders,
       SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) AS on_time_deliveries,
       (SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) * 1.0 / COUNT(orders.OrderID)) AS on_time_delivery_rate
FROM orders 
JOIN shippers ON orders.ShipVia = shippers.ShipperID 
GROUP BY shippers.CompanyName 
ORDER BY on_time_delivery_rate DESC 
LIMIT 1;
```","The generated query selects more columns and includes a LIMIT clause, which affects the output structure. The ground truth query does not limit results to only one company.","SELECT shippers.ShipperID, shippers.CompanyName, COUNT(orders.OrderID) * 1.0 / COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN orders.OrderID END) AS on_time_delivery_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.ShipperID, shippers.CompanyName ORDER BY on_time_delivery_rate DESC LIMIT 1",The generated query incorrectly inverts the ratio calculation for 'on_time_delivery_rate' by dividing the total count by the count of on-time deliveries.,None
How many orders were delivered on time each month?,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, COUNT(*) AS OnTimeOrders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')","```sql
SELECT 
    DATE_FORMAT(orders.ShippedDate, '%Y-%m') AS Month,
    COUNT(orders.OrderID) AS OnTimeDeliveries
FROM 
    orders
WHERE 
    orders.ShippedDate <= orders.RequiredDate
GROUP BY 
    Month
ORDER BY 
    Month;
```","The generated SQL query groups by ShippedDate, while the ground truth groups by OrderDate. This can yield different results if the months of OrderDate and ShippedDate differ.","SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS OnTimeOrderCount FROM orders WHERE ShippedDate <= RequiredDate GROUP BY Month;","Both queries aggregate the count of on-time orders per month using similar time truncation functions, DATE_TRUNC in the generated query and DATE_FORMAT in the ground truth query, and they use equivalent logic for filtering orders that were shipped on or before the required date. The functions serve the same purpose in their respective SQL dialects.",FT
Find the product with the highest discount applied in the last month.,"SELECT products.ProductName, [Order Details].Discount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) ORDER BY [Order Details].Discount DESC LIMIT 1;","```sql
SELECT p.ProductID, p.ProductName, MAX(od.Discount) AS HighestDiscount
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= DATEADD(month, -1, GETDATE()))
GROUP BY p.ProductID, p.ProductName
ORDER BY HighestDiscount DESC
LIMIT 1;
```","The generated query uses MAX and groups by product ID and name, which does not necessarily yield the product with the single highest discount. The ground truth query correctly orders by discount and limits the result, thus finding the correct product.","SELECT od.ProductID, MAX(od.Discount) AS MaxDiscount FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) GROUP BY od.ProductID ORDER BY MaxDiscount DESC LIMIT 1;","The generated query finds the product ID with the highest maximum discount aggregated by product, whereas the ground truth finds the product with the highest single discount value. Additionally, the generated query doesn't output the product name or ensures the discount is from the last month using the correct date function syntax.",None
Find the top three suppliers with the fastest delivery times.,"SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName ORDER BY AverageLeadTime ASC LIMIT 3;","```sql
SELECT s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY s.SupplierID, s.CompanyName
ORDER BY AverageLeadTime ASC
LIMIT 3;
```","Both queries calculate the average lead time for each supplier based on the difference between ShippedDate and OrderDate, group by supplier, and order to find the top three with the fastest delivery times. The key logic and results are the same, even though there are minor differences in the SQL structure.","SELECT s.SupplierID, s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgDeliveryTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID, s.CompanyName ORDER BY AvgDeliveryTime ASC LIMIT 3;","Both queries calculate the average delivery time by joining the same tables and grouping by supplier, then order by delivery time to get the top three. The differences in column naming do not affect functionality.",both
Which countries have suppliers who also have fax numbers listed?,SELECT DISTINCT Country FROM suppliers WHERE Fax IS NOT NULL;,"```sql
SELECT DISTINCT Country 
FROM suppliers 
WHERE Fax IS NOT NULL AND Fax <> '';
```","Both queries check for non-null fax numbers, and the extra condition Fax <> '' in the generated query does not change the outcome because non-null values imply not being an empty string.",SELECT DISTINCT Country FROM suppliers WHERE Fax IS NOT NULL;,"The generated SQL query correctly filters suppliers with a fax number and retrieves distinct countries, matching the user's question and the ground truth query.",both
Which city has the most suppliers located in it?,"SELECT s.City, COUNT(s.SupplierID) AS SupplierCount FROM suppliers s GROUP BY s.City ORDER BY SupplierCount DESC LIMIT 1;","```sql
SELECT City, COUNT(*) AS SupplierCount
FROM suppliers
GROUP BY City
ORDER BY SupplierCount DESC
LIMIT 1;
```",Both queries group by city to count the suppliers and return the city with the highest count. The difference in column counting (COUNT(*) vs COUNT(s.SupplierID)) doesn't affect the result.,"SELECT City, COUNT(SupplierID) AS NumberOfSuppliers FROM suppliers GROUP BY City ORDER BY NumberOfSuppliers DESC LIMIT 1;","Both queries count the number of suppliers per city, order the results in descending order by the count, and return the city with the most suppliers. While the column aliases differ, the outcome is unchanged.",both
Which orders took longer than the required date to be shipped?,SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;,"```sql
SELECT *
FROM orders
WHERE ShippedDate > RequiredDate;
```","The generated query selects all columns, whereas the ground truth query selects only the 'OrderID' column.","SELECT OrderID, OrderDate, RequiredDate, ShippedDate, DATEDIFF(ShippedDate, RequiredDate) AS Delay FROM orders WHERE ShippedDate > RequiredDate;","Both queries identify orders that were shipped after the required date. The generated query provides additional details with Delay calculation, but the core condition is met.",FT
Which orders had the largest discount applied?,"SELECT od.OrderID, od.Discount FROM [Order Details] od WHERE od.Discount = (SELECT MAX(Discount) FROM [Order Details]) ORDER BY od.OrderID;","```sql
SELECT o.OrderID, SUM(od.Discount) AS TotalDiscount
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY o.OrderID
ORDER BY TotalDiscount DESC
LIMIT 1;
```",The generated query aggregates discounts by order and finds the order with the highest total discount. The ground truth query finds orders with the highest individual discount value.,"SELECT orders.OrderID, [Order Details].ProductID, MAX([Order Details].Discount) AS MaxDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID, [Order Details].ProductID ORDER BY MaxDiscount DESC;","The generated query retrieves the maximum discount per product per order, whereas the ground truth query finds orders with the absolute maximum discount across all details, without considering products.",None
Determine the customer satisfaction score based on average order frequency.,"SELECT customers.CustomerID, COUNT(orders.OrderID)/DATEDIFF(MAX(orders.OrderDate), MIN(orders.OrderDate)) AS OrderFrequency FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID ORDER BY OrderFrequency DESC;","```sql
SELECT customers.CustomerID, 
       COUNT(orders.OrderID) * 1.0 / COUNT(DISTINCT orders.OrderDate) AS AverageOrderFrequency
FROM customers
LEFT JOIN orders ON customers.CustomerID = orders.CustomerID
GROUP BY customers.CustomerID;
```","The generated SQL query calculates average order frequency based on distinct order dates, while the ground truth SQL query calculates it over the date difference between the first and last order dates.","To find the average order frequency for each customer, we can break down the SQL query into essential components. The average order frequency can be determined by dividing the number of orders placed by the number of months the customer has been active based on their order history.

Here's the SQL query to calculate this:

```sql
SELECT c.CustomerID, 
       COUNT(DISTINCT o.OrderDate) AS OrderCount,
       COUNT(DISTINCT EXTRACT(YEAR FROM o.OrderDate) || '-' || EXTRACT(MONTH FROM o.OrderDate)) AS MonthsActive,
       COUNT(DISTINCT o.OrderDate) / NULLIF(COUNT(DISTINCT EXTRACT(YEAR FROM o.OrderDate) || '-' || EXTRACT(MONTH FROM o.OrderDate)), 0) AS AvgOrderFreq
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerID;
```

This query extracts the year and month from the OrderDate to group orders and calculate the average order frequency for each customer.","The generated query calculates average order frequency based on months active, while the ground truth calculates frequency based on the difference between the max and min order dates.",None
How many orders did each employee handle in the last quarter?,"SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' AND o.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY e.EmployeeID, e.FirstName, e.LastName;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS TotalOrders
FROM employees e
LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.OrderDate >= DATEADD(quarter, -1, GETDATE()) AND o.OrderDate < GETDATE()
GROUP BY e.EmployeeID, e.FirstName, e.LastName
```","The generated query calculates the last quarter based on the current date minus one quarter, while the ground truth query uses the start of the current quarter minus three months. This can lead to different time ranges depending on the current date.","SELECT e.EmployeeID, COUNT(DISTINCT o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 AND QUARTER(o.OrderDate) = QUARTER(CURRENT_DATE - INTERVAL 1 QUARTER) GROUP BY e.EmployeeID;","The generated query incorrectly calculates last quarter by subtracting from the current date's year and quarter, while the ground truth uses a precise date range for the last quarter using DATE_TRUNC and INTERVAL.",None
Which suppliers have provided products that are no longer in stock?,SELECT DISTINCT SupplierID FROM products WHERE UnitsInStock = 0;,"```sql
SELECT DISTINCT s.SupplierID
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
WHERE p.UnitsInStock = 0;
```","Both queries retrieve the unique SupplierIDs for products that have zero units in stock. The generated query joins the suppliers table, but it effectively provides the same result as the ground truth query by filtering products with UnitsInStock = 0.",SELECT DISTINCT SupplierID FROM products WHERE UnitsInStock = 0;,The generated SQL query and the ground truth query are identical and accurately answer the user's question by selecting distinct SupplierIDs from products where UnitsInStock is 0.,both
Which region generates the most revenue?,"SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Revenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion ORDER BY Revenue DESC LIMIT 1","```sql
SELECT customers.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.Region
ORDER BY TotalRevenue DESC
LIMIT 1;
```",The generated SQL query uses 'customers.Region' while the ground truth query uses 'ShipRegion' to group and determine the top revenue-generating region. This could result in different outputs if 'Region' and 'ShipRegion' are not the same.,"SELECT Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY Region ORDER BY TotalRevenue DESC LIMIT 1;","The generated query uses 'Region' from the 'customers' table, while the ground truth query uses 'ShipRegion', likely from the 'orders' table. This could result in different regions being considered in the calculation.",None
Find the order with the maximum freight cost.,"SELECT OrderID, Freight FROM orders ORDER BY Freight DESC LIMIT 1;","```sql
SELECT * FROM orders
ORDER BY Freight DESC
LIMIT 1;
```","Both queries correctly identify the order with the maximum freight cost by using ORDER BY Freight DESC LIMIT 1, and they will yield the same result.",SELECT OrderID FROM orders WHERE Freight = (SELECT MAX(Freight) FROM orders);,"The generated query selects only the OrderID, while the ground truth includes both OrderID and Freight, which may produce a different understanding of the results.",Base
Find the top 5 products based on total quantity sold.,"SELECT ProductName, SUM([Order Details].Quantity) AS TotalQuantitySold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY TotalQuantitySold DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantitySold
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalQuantitySold DESC
LIMIT 5;
```",Both queries calculate the total quantity sold for each product and return the top 5 products based on this total. They group by product name and order by total quantity in descending order. The inclusion of ProductID in the generated query's SELECT and GROUP BY clauses does not affect the result as ProductID is not used in the ordering or limit criteria.,"SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSold DESC LIMIT 5;","Both queries calculate the total quantity sold for each product by joining the 'products' and '[Order Details]' tables. They group by ProductName, order the results by total sold quantity in descending order, and limit the results to the top 5. The queries are semantically equivalent.",both
What is the current stock status of products by category?,"SELECT p.CategoryID, p.ProductID, p.ProductName, p.UnitsInStock FROM products p ORDER BY p.CategoryID;","```sql
SELECT 
    p.CategoryID, 
    SUM(p.UnitsInStock) AS TotalUnitsInStock, 
    SUM(p.UnitsOnOrder) AS TotalUnitsOnOrder, 
    SUM(p.ReorderLevel) AS TotalReorderLevel
FROM 
    products p
GROUP BY 
    p.CategoryID;
```","The generated query aggregates stock-related data by category, while the ground truth query lists individual product details without aggregation.","SELECT p.CategoryID, SUM(p.UnitsInStock) AS TotalStock FROM products p GROUP BY p.CategoryID;","The generated query returns the total stock by category, while the ground truth query lists individual products with their stock, categorized and ordered by CategoryID.",None
Identify orders with more than five products that received a discount.,SELECT OrderID FROM [Order Details] WHERE Discount > 0 GROUP BY OrderID HAVING COUNT(ProductID) > 5;,"```sql
SELECT o.OrderID
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE od.Quantity > 5 AND od.Discount > 0
GROUP BY o.OrderID;
```","The generated query checks for Quantity > 5 instead of counting distinct products, and it joins orders table unnecessarily.","SELECT OrderID, COUNT(DISTINCT ProductID) AS UniqueProducts FROM [Order Details] WHERE Discount > 0 GROUP BY OrderID HAVING COUNT(DISTINCT ProductID) > 5;","The generated query uses COUNT(DISTINCT ProductID), while the ground truth uses COUNT(ProductID). This can lead to different results if there are duplicate ProductIDs within the same order.",None
What is the distribution of order quantities?,"SELECT Quantity, COUNT(*) AS Frequency FROM [Order Details] GROUP BY Quantity ORDER BY Frequency DESC;","```sql
SELECT Quantity, COUNT(*) AS OrderCount
FROM [Order Details]
GROUP BY Quantity
ORDER BY Quantity;
```","The generated query orders by Quantity, while the ground truth orders by Frequency DESC. This affects the result's order but not the distribution count values.","SELECT od.Quantity AS OrderQuantity, COUNT(*) AS Frequency FROM [Order Details] od GROUP BY od.Quantity ORDER BY OrderQuantity;","The generated query orders by OrderQuantity, while the ground truth query orders by Frequency in descending order. This results in different outputs.",None
Find the average freight cost for orders shipped to each country.,"SELECT ShipCountry, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipCountry;","```sql
SELECT ShipCountry, AVG(Freight) AS AverageFreight
FROM orders
GROUP BY ShipCountry;
```",The generated SQL query is identical to the ground truth SQL query and correctly calculates the average freight cost for orders shipped to each country using the GROUP BY and AVG functions.,"SELECT ShipCountry, AVG(Freight) AS AvgFreightCost FROM orders WHERE ShipCountry IS NOT NULL GROUP BY ShipCountry;",Both queries calculate the average freight cost for each country using ShipCountry as the grouping filter. The condition 'ShipCountry IS NOT NULL' in the generated query does not affect the result because grouping by ShipCountry effectively ignores NULL values.,both
Which region has the lowest average order value?,"SELECT o.ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipRegion ORDER BY AvgOrderValue ASC LIMIT 1;","```sql
SELECT ShipRegion, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY ShipRegion
ORDER BY AverageOrderValue ASC
LIMIT 1;
```","Both queries calculate the average order value per region and return the region with the lowest value. The logic and structure are the same, with only minor differences in aliasing.","SELECT ShipRegion, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipRegion ORDER BY AvgOrderValue ASC LIMIT 1;","The generated SQL query calculates the average order value for each region considering all items per order, while the ground truth divides the total order value by the number of distinct orders, potentially yielding different results.",Base
Which products need to be reordered based on their reorder level?,SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel 
FROM products 
WHERE UnitsInStock <= ReorderLevel;
```",The generated query does not account for the 'Discontinued = 0' condition present in the ground truth query.,SELECT ProductName FROM products WHERE UnitsInStock + UnitsOnOrder <= ReorderLevel AND Discontinued = 0;,"The generated query considers UnitsOnOrder, which is not part of the ground truth logic. This changes the condition for when a product needs reordering.",None
List the customers who have never received a discount on their orders.,SELECT DISTINCT CustomerID FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE Discount > 0);,"```sql
SELECT DISTINCT c.CustomerID, c.CompanyName, c.ContactName, c.ContactTitle, c.Address, c.City, c.Region, c.PostalCode, c.Country, c.Phone, c.Fax
FROM customers c
LEFT JOIN orders o ON c.CustomerID = o.CustomerID
LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.CustomerID, c.CompanyName, c.ContactName, c.ContactTitle, c.Address, c.City, c.Region, c.PostalCode, c.Country, c.Phone, c.Fax
HAVING SUM(od.Discount) = 0 OR SUM(od.Discount) IS NULL;
```","Both queries aim to identify customers whose order details never had a discount. The generated query identifies customers with SUM(od.Discount) = 0 or NULL, equivalent to the ground truth which excludes customers with discounts greater than 0.","SELECT c.CustomerID, c.CompanyName FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID, c.CompanyName HAVING SUM(CASE WHEN od.Discount > 0 THEN 1 ELSE 0 END) = 0;","Both queries identify customers who never received a discount on their orders, albeit with different approaches.",both
Determine the month with the highest number of orders shipped.,"SELECT MONTH(ShippedDate) AS ShipMonth, COUNT(OrderID) AS OrderCount FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipMonth ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY Month
ORDER BY NumberOfOrders DESC
LIMIT 1;
```","The generated query uses DATE_FORMAT to group by year and month, while the ground truth query groups only by month (ignoring year). They might yield different results if there are orders from multiple years.","SELECT DATE_FORMAT(orders.ShippedDate, '%Y-%m') AS Month, COUNT(orders.OrderID) AS OrderCount FROM orders WHERE orders.ShippedDate IS NOT NULL GROUP BY Month ORDER BY OrderCount DESC LIMIT 1;","The queries group by different date formats. The generated query formats the date by year and month, while the ground truth query groups by month only, ignoring the year.",None
What is the average discount given per order each month?,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG([Order Details].Discount) AS average_discount FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY month;","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth,
    AVG([Order Details].Discount) AS AverageDiscount
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    OrderMonth
```","Both queries select the average discount per order month. They join the same tables with the same condition and use the same grouping function, yielding the same results.","SELECT TO_CHAR(o.OrderDate, 'YYYY-MM') AS Month, AVG(d.Discount) AS AvgDiscount FROM orders o JOIN [Order Details] d ON o.OrderID = d.OrderID GROUP BY TO_CHAR(o.OrderDate, 'YYYY-MM');","Both queries group by month and calculate the average discount per order. The differences in date formatting functions (TO_CHAR vs. DATE_FORMAT) are equivalent, and table aliases are used but refer to the same data.",both
What is the total number of products ordered each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Quantity) AS TotalProducts FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, 
    SUM([Order Details].Quantity) AS Total_Products_Ordered
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    Month
ORDER BY 
    Month;
```",Both queries calculate the total number of products ordered each month using the same logic: joining 'orders' and 'Order Details' tables and grouping by month of the 'OrderDate'. They differ only in column aliases and syntactic details.,"SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY Month","Both queries calculate the total number of products ordered each month by grouping the order data by month. The difference is in the date formatting: DATE_TRUNC and DATE_FORMAT functions. However, they both effectively achieve the same monthly grouping. The choice of function depends on the SQL dialect, but the logic aligns to answer the user's question.",both
What is the average freight cost for shipped orders?,SELECT AVG(Freight) AS AvgFreight FROM orders WHERE ShippedDate IS NOT NULL;,"```sql
SELECT AVG(Freight) AS AverageFreightCost 
FROM orders 
WHERE ShippedDate IS NOT NULL;
```","Both queries calculate the average freight cost for orders that have a shipped date, differing only in alias naming, which does not affect the result.",SELECT AVG(Freight) AS AvgFreight FROM orders WHERE ShippedDate IS NOT NULL;,"Both queries calculate the average freight cost for orders that have a non-null ShippedDate, hence they yield the same results.",both
Which product has the highest sales volume this month?,SELECT p.ProductID FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE EXTRACT(MONTH FROM CURRENT_DATE) = EXTRACT(MONTH FROM CURRENT_DATE) GROUP BY p.ProductID ORDER BY SUM(od.Quantity) DESC LIMIT 1;,"```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSalesVolume
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE MONTH(od.OrderID) = MONTH(CURRENT_DATE) AND YEAR(od.OrderID) = YEAR(CURRENT_DATE)
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSalesVolume DESC
LIMIT 1
```","The generated query uses correct logic but incorrectly extracts the month from the OrderID rather than the order date, which likely resides in a different column such as OrderDate. The ground truth query also has the extraction logic issue but lacks explicit date constraints.",SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE EXTRACT(MONTH FROM CURRENT_DATE) = EXTRACT(MONTH FROM od.OrderDate) AND EXTRACT(YEAR FROM CURRENT_DATE) = EXTRACT(YEAR FROM od.OrderDate) GROUP BY p.ProductName ORDER BY SUM(od.Quantity) DESC LIMIT 1,"The generated SQL query extracts and compares both month and year from the order date, while the ground truth SQL query seems to incorrectly compare the month of the current date twice, making it invalid for finding the same results.",None
What is the total discount given for each product?,"SELECT od.ProductID, SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscountGiven FROM [Order Details] od GROUP BY od.ProductID;","```sql
SELECT 
    [Order Details].ProductID, 
    SUM([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount) AS TotalDiscount 
FROM 
    [Order Details] 
GROUP BY 
    [Order Details].ProductID;
```","Both queries calculate the total discount given for each product by summing the product of Quantity, UnitPrice, and Discount from the [Order Details] table, grouped by ProductID.","SELECT ProductID, SUM(Quantity * UnitPrice * Discount) AS TotalDiscount FROM [Order Details] GROUP BY ProductID","Both queries calculate the total discount given for each product by summing the product of Quantity, UnitPrice, and Discount, and grouping by ProductID. The difference in aliases does not affect the outcome.",both
What is the total quantity of products sold by each employee?,"SELECT e.EmployeeID, SUM(od.Quantity) AS TotalQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","```sql
SELECT employees.EmployeeID, SUM([Order Details].Quantity) AS TotalQuantity
FROM employees
JOIN orders ON employees.EmployeeID = orders.EmployeeID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY employees.EmployeeID;
```","Both queries calculate the total quantity of products sold by each employee by joining the employees, orders, and Order Details tables, and aggregating the quantity by EmployeeID.","SELECT e.EmployeeID, SUM(od.Quantity) AS TotalQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","The generated SQL query is identical to the ground truth query, so it accurately answers the user's question.",both
Which products have a unit price greater than $50?,SELECT ProductName FROM products WHERE UnitPrice > 50;,"```sql
SELECT ProductID, ProductName, UnitPrice
FROM products
WHERE UnitPrice > 50;
```","The generated query includes ProductID, which might provide additional information not present in the ground truth query.",SELECT ProductName FROM products WHERE UnitPrice > 50;,The generated SQL query accurately answers the user's question and is identical to the ground truth query.,FT
Identify the product with the lowest performance in terms of sales in October 2023.,"SELECT products.ProductName, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-10-31' GROUP BY products.ProductName ORDER BY product_performance ASC LIMIT 1;","```sql
SELECT products.ProductID, SUM([Order Details].Quantity) AS product_performance 
FROM [Order Details] 
JOIN products ON [Order Details].ProductID = products.ProductID 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-10-31' 
GROUP BY products.ProductID 
ORDER BY product_performance ASC 
LIMIT 1;
```","The generated SQL query selects ProductID, whereas the ground truth selects ProductName. They will group and order by different fields, leading to potentially different outputs.","SELECT products.ProductID, SUM([Order Details].Quantity) AS product_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-10-31' GROUP BY products.ProductID ORDER BY product_sales ASC LIMIT 1","The generated query retrieves ProductID instead of ProductName, making the output differ in terms of product identifier type, though the logic for identifying the product is correct.",None
Which city had the highest number of orders shipped to?,"SELECT orders.ShipCity, COUNT(orders.OrderID) AS NumOrders FROM orders GROUP BY orders.ShipCity ORDER BY NumOrders DESC LIMIT 1;","```sql
SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY ShipCity
ORDER BY NumberOfOrders DESC
LIMIT 1;
```","Both queries count the number of orders per ShipCity and sort them in descending order to return the city with the highest number of orders, which is correct.","SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 1;","Both queries select ShipCity and count OrderID, applying GROUP BY on ShipCity and ordering by count descending, with a limit of 1 to find the city with the most orders. They are functionally equivalent.",both
How many customers placed more than five orders last year?,SELECT COUNT(customers.CustomerID) AS customer_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 5;,"```sql
SELECT COUNT(DISTINCT orders.CustomerID) AS customer_count 
FROM orders 
WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31' 
GROUP BY CustomerID 
HAVING COUNT(OrderID) > 5;
```","The generated query checks dates manually for 2022, whereas the ground truth query dynamically checks last year using YEAR(CURDATE()) - 1. This could yield different results if run in a different year.","SELECT COUNT(CustomerID) FROM (SELECT CustomerID, COUNT(OrderID) AS order_count FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY CustomerID) AS subquery WHERE order_count > 5","Both queries count the number of customers who placed more than five orders the previous year. Though structured differently, they achieve the same outcome.",FT
What is the total quantity of products sold per category?,"SELECT products.CategoryID, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.CategoryID","```sql
SELECT products.CategoryID, SUM([Order Details].Quantity) AS TotalQuantitySold
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
GROUP BY products.CategoryID;
```",Both queries correctly calculate the total quantity of products sold per category by joining the 'Order Details' and 'products' tables and grouping by 'CategoryID'.,"SELECT CategoryID, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID;","Both queries group by the same 'CategoryID' field, ensuring the total quantity of products sold per category is correctly calculated. The output will be the same.",both
How many orders include products from multiple suppliers?,"SELECT COUNT(*) FROM (SELECT OrderID, COUNT(DISTINCT SupplierID) AS SupplierCount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY OrderID) AS OrderSupplierCount WHERE SupplierCount > 1;","```sql
SELECT COUNT(DISTINCT o.OrderID) AS MultiSupplierOrders
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
JOIN products p ON od.ProductID = p.ProductID
GROUP BY o.OrderID
HAVING COUNT(DISTINCT p.SupplierID) > 1;
```",Both queries calculate the count of orders having products from more than one supplier. The generated query and the ground truth query group by OrderID and check the condition of having more than one distinct SupplierID for the products within each order.,SELECT COUNT(DISTINCT o.OrderID) FROM orders o JOIN [Order Details] od1 ON o.OrderID = od1.OrderID JOIN products p1 ON od1.ProductID = p1.ProductID JOIN [Order Details] od2 ON od1.OrderID = od2.OrderID JOIN products p2 ON od2.ProductID = p2.ProductID WHERE p1.SupplierID <> p2.SupplierID AND od1.ProductID <> od2.ProductID,"Both queries aim to count orders with products from multiple suppliers using different methods. The generated query joins the 'orders' table with 'Order Details' and 'products' repeatedly to ensure no single product is contributing, checking differing suppliers, while the ground truth query counts distinct suppliers per order and filters those with more than one. These approaches yield the same result.",both
What is the percentage of returning customers in Q1 2023?,SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-01-01') AS retention_rate,"```sql
SELECT (COUNT(DISTINCT orders.CustomerID) 
        FROM orders 
        WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31') 
       / 
       (SELECT COUNT(DISTINCT orders.CustomerID) 
        FROM orders 
        WHERE orders.OrderDate < '2023-01-01') 
       AS returning_customers_percentage
```","The generated query calculates the percentage of all customers who returned, whereas the ground truth focuses on retention rate of past unique customers.","SELECT (COUNT(DISTINCT CustomerID_Q1) * 100.0 / NULLIF(COUNT(DISTINCT CustomerID_PreQ1), 0)) AS returning_customers_percentage FROM (SELECT orders.CustomerID AS CustomerID_Q1 FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31') AS Q1 JOIN (SELECT orders.CustomerID AS CustomerID_PreQ1 FROM orders WHERE orders.OrderDate < '2023-01-01') AS PreQ1 ON Q1.CustomerID_Q1 = PreQ1.CustomerID_PreQ1","The generated query calculates the percentage of returning customers who made purchases in Q1 2023, while the ground truth calculates retention differently. The ground truth uses all distinct customers in both periods, not just those returning.",None
How many products have a reorder level higher than current stock?,SELECT COUNT(ProductID) AS ProductCount FROM products WHERE ReorderLevel > UnitsInStock;,"```sql
SELECT COUNT(*) AS NumberOfProducts
FROM products
WHERE ReorderLevel > UnitsInStock;
```",Both queries count the number of products where ReorderLevel is greater than UnitsInStock. The difference in COUNT() arguments does not affect the count result.,SELECT COUNT(*) FROM products WHERE ReorderLevel > UnitsInStock,"Both queries count the number of products where the reorder level is higher than the current stock, giving the same result.",both
Find the total number of orders shipped by each method.,"SELECT ShipVia, COUNT(OrderID) AS TotalShippedOrders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipVia;","```sql
SELECT ShipVia, COUNT(OrderID) AS TotalOrders
FROM orders
GROUP BY ShipVia;
```",The generated query does not account for orders that have not been shipped. It should include a condition to check for non-null ShippedDate.,"SELECT ShipVia, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipVia;","The generated SQL query does not filter for orders with a non-null ShippedDate, potentially including orders that weren't actually shipped.",None
Which products were never ordered?,SELECT ProductID FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"```sql
SELECT p.ProductID
FROM products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.OrderID IS NULL;
```","Both queries accurately find products that were never ordered. The first query uses a LEFT JOIN and checks for NULLs, while the second query uses a NOT IN with a subquery. Both yield the same results.",SELECT ProductID FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,Both queries accurately answer the user's question by selecting ProductID from products where ProductID is not present in the Order Details.,both
Which city had the highest number of orders shipped to it in the last year?,"SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE OrderDate >= (CURRENT_DATE - INTERVAL '1 year') GROUP BY ShipCity ORDER BY NumberOfOrders DESC FETCH FIRST 1 ROW ONLY;","```sql
SELECT ShipCity, COUNT(OrderID) AS OrderCount
FROM orders
WHERE ShippedDate >= DATEADD(YEAR, -1, CURRENT_DATE)
GROUP BY ShipCity
ORDER BY OrderCount DESC
LIMIT 1;
```","The generated query uses ShippedDate instead of OrderDate to filter the last year's orders, which could lead to different results.","SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1;","Both queries correctly identify the city with the highest number of orders shipped in the last year. They use different functions for date calculation (DATE_SUB vs. CURRENT_DATE - INTERVAL), but they achieve the same result.",FT
What is the average discount applied for each product?,"SELECT ProductID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY ProductID;","```sql
SELECT ProductID, AVG(Discount) AS AverageDiscount
FROM [Order Details]
GROUP BY ProductID;
```","Both queries calculate the average discount for each product by grouping on ProductID. Thus, they yield the same results.","SELECT ProductID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY ProductID;",Both queries are identical and accurately calculate the average discount for each product using the same table and columns.,both
Find the average discount per customer.,"SELECT customers.CustomerID, AVG([Order Details].Discount) AS AverageDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID","```sql
SELECT customers.CustomerID, AVG([Order Details].Discount) AS AverageDiscount
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID;
```",The generated SQL query accurately reflects the user's request. Both the generated and ground truth queries calculate the average discount per customer by joining the necessary tables and grouping by CustomerID. They yield the same results.,"SELECT c.CustomerID, AVG(od.Discount) AS AverageDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;","Both queries calculate the average discount per customer using the same join operations and aggregation, despite using different table aliasing.",both
Determine the total sales generated for each product category.,"SELECT CategoryID, SUM([Order Details].UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY CategoryID;","```sql
SELECT products.CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN categories ON products.CategoryID = categories.CategoryID
GROUP BY products.CategoryID;
```","Both queries calculate total sales per product category using the necessary joins and aggregate functions. The inclusion of the 'categories' table in the generated query does not affect the results, as it is joined on the CategoryID, which is already accounted for in the grouping.","SELECT CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID;","The generated query and the ground truth query yield the same result. Both join the 'products' table with 'Order Details' on ProductID and calculate total sales per CategoryID considering the UnitPrice, Quantity, and Discount, followed by grouping by CategoryID.",both
How have shipping times changed over the years?,"SELECT YEAR(OrderDate) AS Year, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders GROUP BY Year ORDER BY Year;","```sql
SELECT YEAR(OrderDate) AS Year, 
       AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Shipping_Time
FROM orders
GROUP BY YEAR(OrderDate)
ORDER BY Year;
```","Both queries calculate the average shipping time per year using the same logic, grouping and ordering by year, yielding equivalent results.","SELECT YEAR(OrderDate) AS Year, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM orders GROUP BY YEAR(OrderDate);","The generated query lacks an ORDER BY clause, which means results may not be sorted by year as in the ground truth query.",Base
"Which city has the highest number of orders, and who handles them?","SELECT orders.ShipCity, orders.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM orders GROUP BY orders.ShipCity, orders.EmployeeID ORDER BY OrderCount DESC LIMIT 1","```sql
SELECT ShipCity, e.FirstName, e.LastName, COUNT(o.OrderID) AS NumberOfOrders
FROM orders o
JOIN employees e ON o.EmployeeID = e.EmployeeID
GROUP BY ShipCity, e.EmployeeID
ORDER BY NumberOfOrders DESC
LIMIT 1;
```","The generated query includes employee names, while the ground truth query only uses EmployeeID. They might not yield the same results depending on the database schema.","SELECT orders.ShipCity, COUNT(orders.OrderID) AS TotalOrders, employees.FirstName, employees.LastName FROM orders LEFT JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY orders.ShipCity, employees.FirstName, employees.LastName ORDER BY TotalOrders DESC LIMIT 1;","The generated query includes the employee's full name which affects the grouping, resulting in a different aggregation. The ground truth query groups by EmployeeID and City only, not including employee names.",None
Which product category generated the most revenue in 2023?,"SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY categories.CategoryName ORDER BY total_revenue DESC LIMIT 1","```sql
SELECT categories.CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN categories ON products.CategoryID = categories.CategoryID
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY categories.CategoryID
ORDER BY total_revenue DESC
LIMIT 1
```",The generated query selects 'CategoryID' while the ground truth selects 'CategoryName'. They may yield different results if multiple categories share the same 'CategoryID' or if the naming matters in the context.,"SELECT categories.CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY categories.CategoryID ORDER BY total_revenue DESC LIMIT 1","The generated query selects CategoryID while the ground truth query selects CategoryName. This difference affects the output, although the computation of revenue and ordering remain the same.",None
Identify products with decreasing sales trends over months.,"SELECT ProductName FROM (SELECT ProductName, DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Quantity) AS QuantitySold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ProductName, Month) sub WHERE QuantitySold < LAG(QuantitySold) OVER (PARTITION BY ProductName ORDER BY Month);","```sql
SELECT p.ProductID, p.ProductName, 
       SUM(od.Quantity) AS TotalSales, 
       DATE_FORMAT(o.OrderDate, '%Y-%m') AS MonthYear
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY p.ProductID, MonthYear
HAVING TotalSales < (
    SELECT SUM(od_inner.Quantity)
    FROM products p_inner
    JOIN [Order Details] od_inner ON p_inner.ProductID = od_inner.ProductID
    JOIN orders o_inner ON od_inner.OrderID = o_inner.OrderID
    WHERE p_inner.ProductID = p.ProductID
    AND DATE_FORMAT(o_inner.OrderDate, '%Y-%m') = DATE_FORMAT(DATE_ADD(o.OrderDate, INTERVAL -1 MONTH), '%Y-%m')
)
ORDER BY p.ProductID, MonthYear;
```","The generated query uses a subquery to compare sales of the current month with the previous month, whereas the ground truth query uses the LAG function to achieve this comparison directly for each product.","SELECT p.ProductID, SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL '1 MONTH') THEN od.Quantity ELSE 0 END) AS LastMonthQuantity, SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL '2 MONTH') THEN od.Quantity ELSE 0 END) AS PreviousMonthQuantity FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID JOIN products p ON od.ProductID = p.ProductID WHERE o.OrderDate BETWEEN CURRENT_DATE - INTERVAL '2 MONTH' AND CURRENT_DATE GROUP BY p.ProductID HAVING LastMonthQuantity < PreviousMonthQuantity;","The generated query compares sales of the last two specific months, while the ground truth query assesses broader monthly trends using a window function.",None
What is the average order size in terms of quantity?,SELECT AVG([Order Details].Quantity) AS AvgOrderSize FROM [Order Details];,"```sql
SELECT AVG([Order Details].Quantity) AS AverageOrderSize
FROM [Order Details]
```","Both queries calculate the average of the Quantity column from the [Order Details] table, yielding identical results.","SELECT AVG(item_count) AS AverageOrderSize FROM (SELECT OrderID, SUM(Quantity) AS item_count FROM [Order Details] GROUP BY OrderID) AS order_summary;",The generated query calculates the average quantity per order whereas the ground truth query calculates the average quantity across all order details.,Base
Calculate the total revenue generated by each customer.,"SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;","```sql
SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID;
```","The generated SQL query and the ground truth query are logically equivalent. Both calculate the total revenue generated by each customer by joining the customers, orders, and order details tables, and then summing up the product of UnitPrice, Quantity, and the discount adjustment, grouped by CustomerID.","SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",Both queries are identical and calculate the total revenue by each customer correctly.,both
What is the total quantity of products sold each month?,"SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate);","```sql
SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].Quantity) AS TotalQuantity
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY Month
ORDER BY Month;
```","The generated SQL query formats the date as 'YYYY-MM' and groups by it, while the ground truth query extracts just the month and year separately for grouping. This can potentially yield different results if there are multiple years in the data.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Quantity) AS TotalQuantity FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY Month;","The generated query groups by month format without considering the year, which could aggregate different years' data together. The ground truth query correctly groups by both year and month separately.",None
List all products that have stock levels below their reorder level.,SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock < ReorderLevel;
```","Both queries correctly filter products where UnitsInStock is less than ReorderLevel. The generated query includes additional columns, but this does not change the correctness regarding the user question.",SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"The generated SQL query is identical to the ground truth query, and both accurately answer the user's question by selecting product names where stock levels are below their reorder level.",both
What is the average order quantity for each product?,"SELECT ProductID, AVG(Quantity) AS AverageQuantity FROM [Order Details] GROUP BY ProductID","```sql
SELECT ProductID, AVG(Quantity) AS AverageOrderQuantity
FROM [Order Details]
GROUP BY ProductID
```","Both queries calculate the average order quantity per product from the 'Order Details' table, despite the different alias names used for the average.","SELECT ProductID, AVG(Quantity) AS AvgQuantity FROM [Order Details] GROUP BY ProductID;","The generated query and the ground truth query both calculate the average order quantity for each product by grouping the data by ProductID and computing the average of the Quantity column. The only difference is in the alias name, which does not affect the output.",both
Which employees have the highest number of orders processed?,"SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC;","```sql
SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY EmployeeID
ORDER BY NumberOfOrders DESC;
```",Both queries are identical in logic and will yield the same results. They count the number of orders processed by each employee and order the results in descending order of the count.,"SELECT orders.EmployeeID, COUNT(orders.OrderID) AS NumOrders FROM orders GROUP BY orders.EmployeeID ORDER BY NumOrders DESC;","Both queries count the number of orders per EmployeeID, group by EmployeeID, and order the results in descending order of the count. They yield the same results.",both
List employees who have handled orders with total discounts over 10%.,"SELECT employees.EmployeeID, SUM([Order Details].Discount) AS TotalDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID HAVING TotalDiscount > 0.1;","```sql
SELECT DISTINCT e.EmployeeID, e.FirstName, e.LastName
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE od.Discount > 0.1;
```","The generated query checks for individual discounts over 10%, not total discounts per employee like the ground truth query.",SELECT employees.EmployeeID FROM employees INNER JOIN orders ON employees.EmployeeID = orders.EmployeeID INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE [Order Details].Discount > 0.1 GROUP BY employees.EmployeeID,"The generated query checks for individual discounts greater than 10%, while the ground truth query sums the discounts and filters based on the total being over 10%.",None
What is the total number of products sold by each employee?,"SELECT employees.EmployeeID, SUM([Order Details].Quantity) AS TotalProducts FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID","```sql
SELECT employees.EmployeeID, 
       employees.FirstName, 
       employees.LastName, 
       SUM([Order Details].Quantity) AS TotalProductsSold
FROM employees
JOIN orders ON employees.EmployeeID = orders.EmployeeID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName
```","Both queries calculate the total number of products sold by each employee by summing the quantity from the Order Details table and grouping by EmployeeID. The additional columns in the generated query (FirstName, LastName) do not affect the aggregation and join process.","SELECT employees.EmployeeID, SUM([Order Details].Quantity) AS TotalProducts FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;","Both queries perform the same joins and aggregations, and their SQL syntax is identical, so they yield the same results.",both
List the top 3 products in terms of units sold.,"SELECT p.ProductName, SUM(od.Quantity) AS UnitsSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY UnitsSold DESC LIMIT 3;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalUnitsSold
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalUnitsSold DESC
LIMIT 3;
```",Both queries calculate the sum of quantities for each product and list the top 3 products based on this sum. The inclusion of ProductID in the generated query's SELECT and GROUP BY clauses does not affect the result.,"SELECT ProductName, SUM(od.Quantity) AS TotalUnitsSold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY ProductName ORDER BY TotalUnitsSold DESC LIMIT 3;","Both queries calculate the total units sold for each product, group by product name, and select the top 3 in descending order. The queries are functionally equivalent.",both
What is the average discount given per product?,"SELECT ProductName, AVG(Discount) AS AvgDiscount FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID GROUP BY ProductName;","```sql
SELECT 
    [Order Details].ProductID, 
    AVG([Order Details].Discount) AS AverageDiscount
FROM 
    [Order Details]
GROUP BY 
    [Order Details].ProductID;
```","The generated query groups by ProductID, while the ground truth query groups by ProductName after joining with the products table. This could lead to different results if multiple ProductIDs share the same ProductName.","SELECT p.ProductID, p.ProductName, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;","Both queries calculate the average discount per product using a JOIN between products and order details, and group by ProductName to ensure the average is calculated per product.",FT
What is the total revenue generated by each customer over their lifetime?,"SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;","```sql
SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID;
```","The generated SQL query correctly calculates the total revenue generated by each customer by summing the product of UnitPrice, Quantity, and the discount factor. The JOINs and GROUP BY clauses are accurately placed, matching the ground truth query.","SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",The generated SQL query and the ground truth query are identical and accurately calculate the total revenue generated by each customer over their lifetime using the same logic and structure.,both
Identify the products that have been discontinued.,SELECT ProductName FROM products WHERE Discontinued = 1;,"```sql
SELECT ProductID, ProductName
FROM products
WHERE Discontinued = 1;
```","Both queries filter products that are discontinued. The generated query also retrieves 'ProductID', which does not change the correctness of the output.","SELECT ProductID, ProductName FROM products WHERE Discontinued = 1;","Both queries select products that have been discontinued by filtering where Discontinued = 1. The generated query includes an additional ProductID column, but this does not affect the result of identifying discontinued products.",both
Which products need to be reordered?,SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel 
FROM products 
WHERE UnitsInStock < ReorderLevel;
```","The generated query uses '<', while the ground truth uses '<='. This can affect which products are selected if UnitsInStock equals ReorderLevel. Additionally, the generated query selects extra columns.","SELECT p.ProductName, (p.ReorderLevel - p.UnitsInStock) AS ""Units Needed"" FROM products p WHERE p.UnitsInStock < p.ReorderLevel;","Both queries identify products needing reorder by comparing UnitsInStock and ReorderLevel. The generated query calculates 'Units Needed', but it doesn't affect identifying reorder need.",FT
Identify the cities with the highest number of suppliers.,"SELECT City, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY City ORDER BY SupplierCount DESC;","```sql
SELECT City, COUNT(SupplierID) AS SupplierCount
FROM suppliers
GROUP BY City
ORDER BY SupplierCount DESC;
```","The generated SQL query and the ground truth SQL query are functionally equivalent and will yield the same results. Both queries count the number of suppliers per city, group by city, and order the results by descending supplier count.","SELECT suppliers.City, COUNT(suppliers.SupplierID) AS SupplierCount FROM suppliers GROUP BY suppliers.City ORDER BY SupplierCount DESC;","Both queries are functionally equivalent, selecting cities and counting suppliers, then ordering by supplier count in descending order.",both
Determine the average unit price of products sold in the last quarter.,"SELECT AVG([Order Details].UnitPrice) AS AvgUnitPrice FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE());","```sql
SELECT AVG(od.UnitPrice) AS AverageUnitPrice
FROM [Order Details] od
JOIN products p ON od.ProductID = p.ProductID
WHERE od.OrderID IN (
    SELECT OrderID
    FROM Orders
    WHERE OrderDate >= DATEADD(quarter, -1, GETDATE())
)
```","The generated query uses 'DATEADD(quarter, -1, GETDATE())' which calculates from the current date minus one quarter. This doesn't necessarily match the ground truth query's date range 'BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE()', which calculates from three months ago to today. The quarter and 3-month calculation might not align exactly.","SELECT AVG(od.UnitPrice) AS AverageUnitPrice FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate >= DATEADD(QUARTER, -1, CURRENT_DATE) AND od.OrderDate < CURRENT_DATE;","The generated query includes products join, which is unnecessary. It uses a different date logic relying on QUARTER, potentially leading to a different date range than a simple 3-month interval used in the ground truth.",None
List products with a reorder level higher than units in stock.,SELECT ProductName FROM products WHERE ReorderLevel > UnitsInStock;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel 
FROM products 
WHERE ReorderLevel > UnitsInStock;
```","Both queries filter products where ReorderLevel is greater than UnitsInStock. The difference lies in the columns selected, but the logic for answering the user's question is consistent in both queries.","SELECT ProductID, ProductName FROM products WHERE ReorderLevel > UnitsInStock;","Both queries select products with a reorder level higher than units in stock. The difference is the inclusion of ProductID in the generated query, which does not affect the correctness regarding the user's request.",both
How much freight cost has been incurred by each employee's orders?,"SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(o.Freight) AS TotalFreight
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID;
```","Both queries calculate the total freight cost incurred by each employee's orders by grouping on EmployeeID and summing the Freight, which answers the user's question accurately. The generated query includes additional columns (FirstName, LastName), but this does not affect the correctness of the results.","SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID","Both queries accurately calculate the total freight cost incurred by each employee's orders by joining the 'employees' and 'orders' tables, summing the 'Freight' for each employee, and grouping by 'EmployeeID'. The syntax difference in table aliases does not affect the result.",both
How many orders were processed by employees in each city?,"SELECT employees.City, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.City;","```sql
SELECT e.City, COUNT(o.OrderID) AS TotalOrders
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.City;
```","Both queries correctly join the employees and orders tables on the EmployeeID. They group the results by the city of employees and count the OrderID for orders processed by employees in each city. Thus, they yield the same results.","SELECT employees.City, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.City;",The generated SQL query matches the ground truth query exactly and correctly answers the user's question by counting orders processed by employees in each city.,both
What is the average unit price of products per supplier?,"SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AvgUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;","```sql
SELECT suppliers.SupplierID, suppliers.CompanyName, AVG(products.UnitPrice) AS AverageUnitPrice
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
GROUP BY suppliers.SupplierID, suppliers.CompanyName;
```","Both queries calculate the average unit price of products per supplier. Although they have different SELECT clauses, SupplierID is included in the generated query, which does not affect the correctness of the result.","SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AverageUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;","The generated SQL query correctly calculates the average unit price per supplier, similar to the ground truth query. Both queries use the same logic: joining suppliers and products and grouping by supplier's company name to compute the average unit price. The difference in alias naming does not affect the result.",both
What are the total sales for each month in 2023?,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY month","```sql
SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE YEAR(orders.OrderDate) = 2023 
GROUP BY month 
ORDER BY month;
```","Both queries calculate the total sales for each month in 2023, grouping by month and applying the sum on total sales. The only difference is that the generated query includes an ORDER BY clause which does not alter the results themselves, just the order in which they are presented.","```sql
SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month
```",Both queries calculate total sales per month for 2023. The differences in date formatting and filtering approach do not affect the output.,both
How does employee efficiency vary based on the shipping regions they handle?,"SELECT EmployeeID, ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EmployeeID, ShipRegion ORDER BY EmployeeID, AvgFulfillmentTime ASC;","```sql
SELECT 
    ShipRegion, 
    COUNT(OrderID) AS TotalOrders, 
    AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime, 
    AVG(Freight) AS AverageShippingCost,
    COUNT(OrderID WHERE ShippedDate <= RequiredDate) / COUNT(OrderID) AS OnTimeDeliveryRate
FROM 
    orders
GROUP BY 
    ShipRegion;
```","The generated query focuses on calculating metrics for shipping regions, like total orders, average fulfillment time, average shipping cost, and on-time delivery rate, without considering employee efficiency. The ground truth query evaluates employee efficiency by providing the average fulfillment time grouped by EmployeeID and ShipRegion.","SELECT EmployeeID, ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EmployeeID, ShipRegion ORDER BY AvgFulfillmentTime ASC;","The generated query and the ground truth query only differ in the ORDER BY clause. Both queries calculate the average fulfillment time per employee per shipping region, which addresses the user's question on efficiency. The difference in sorting does not affect the validity of the results.",FT
Which city has the highest number of unique customers?,"SELECT customers.City, COUNT(DISTINCT customers.CustomerID) AS unique_customers FROM customers GROUP BY customers.City ORDER BY unique_customers DESC LIMIT 1;","```sql
SELECT City, COUNT(DISTINCT CustomerID) AS unique_customers
FROM customers
GROUP BY City
ORDER BY unique_customers DESC
LIMIT 1;
```","The generated SQL query and the ground truth SQL query are functionally equivalent. Both queries select the city with the highest number of unique customers by counting distinct CustomerID values, grouping by city, ordering in descending order, and limiting the result to one city.","SELECT customers.City, COUNT(DISTINCT customers.CustomerID) AS unique_customers FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.City ORDER BY unique_customers DESC LIMIT 1",Both queries count distinct customers per city and return the city with the highest count. The JOIN in the generated query does not affect the outcome because it still groups by city and counts unique CustomerID values.,both
What is the average time taken to fulfill orders each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month ORDER BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM 
    orders
GROUP BY 
    Month
```","Both queries calculate the average time to fulfill orders each month, though they use different date formatting functions. The generated query uses MySQL's DATE_FORMAT, while the ground truth query uses PostgreSQL's DATE_TRUNC. The logic and results are equivalent.","SELECT DATE_TRUNC('month', OrderDate) AS Year_Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Year_Month;","The generated SQL query and the ground truth query yield the same results. They both calculate the average time taken to fulfill orders each month by truncating the 'OrderDate' to month and averaging the difference between 'ShippedDate' and 'OrderDate'. The only difference is the alias naming ('Year_Month' vs 'Month') and the lack of 'ORDER BY' in the generated query, which does not affect the aggregation result.",both
How many employees were hired in 2023?,SELECT COUNT(*) AS hires_count FROM employees WHERE employees.HireDate BETWEEN '2023-01-01' AND '2023-12-31',"```sql
SELECT COUNT(*) AS employees_hired_2023 FROM employees WHERE YEAR(HireDate) = 2023
```","Both queries count the number of employees hired in 2023 by filtering HireDate within the year, though using different methods.",SELECT COUNT(*) AS employees_hired_2023 FROM employees WHERE YEAR(employees.HireDate) = 2023,Both queries count employees hired in 2023 by checking the HireDate. The methods differ but yield the same result.,both
Which customers have placed the highest number of orders?,"SELECT c.CustomerID, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY OrderCount DESC;","```sql
SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY CustomerID
ORDER BY NumberOfOrders DESC;
```","Both queries return a list of customers with the count of their orders, ordered by the number of orders in descending order. The main difference is the JOIN, which isn't necessary if 'orders' table already contains 'CustomerID'. Thus, they produce the same result.","SELECT customers.CustomerID, COUNT(orders.OrderID) AS OrderCount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID ORDER BY OrderCount DESC;","Both queries select customer IDs and count their orders, group by customer IDs, and order the results by order count in descending order. Differences in table aliases don't affect the output.",both
Which month experienced the highest number of late shipments?,"SELECT EXTRACT(MONTH FROM ShippedDate) AS Month, COUNT(*) AS LateShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY EXTRACT(MONTH FROM ShippedDate) ORDER BY LateShipments DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS LateShipments
FROM orders
WHERE ShippedDate > RequiredDate
GROUP BY Month
ORDER BY LateShipments DESC
LIMIT 1;
```","The generated query groups by year and month, while the ground truth query groups by month across all years.","SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS OrderMonth, COUNT(OrderID) AS LateShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY OrderMonth ORDER BY LateShipments DESC LIMIT 1;","The generated query groups by month and year, whereas the ground truth groups only by month. This can lead to different results if the data spans multiple years.",None
What is the total revenue generated by each product category?,"SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;","```sql
SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.CategoryID
```","The generated SQL query groups by p.CategoryID directly from the products table, assuming that it represents the category of each product. However, the ground truth query joins the categories table, which is the authoritative source for category information, and groups by c.CategoryID. This might lead to differences if there are discrepancies or additional details in the categories table.","SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID;","The generated query includes a discount factor in the calculation, while the ground truth query does not. The results will differ if there are any discounts applied.",None
How many orders were shipped each month?,"SELECT DATE_TRUNC('month', ShippedDate) AS Month, COUNT(OrderID) AS OrderCount FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month;","```sql
SELECT YEAR(ShippedDate) AS Year, MONTH(ShippedDate) AS Month, COUNT(OrderID) AS TotalOrders
FROM orders
GROUP BY YEAR(ShippedDate), MONTH(ShippedDate)
ORDER BY Year, Month;
```","Both queries count orders grouped by the month of the ShippedDate and produce a result with month-wise order counts. The main difference is in the function used to extract the month, but they yield the same logical outcome.","SELECT DATE_TRUNC('month', ShippedDate) AS Month, COUNT(OrderID) AS OrdersShipped FROM orders GROUP BY Month;","The generated query does not exclude NULL ShippedDate, while the ground truth query does.",Base
What is the total freight cost for each shipping country?,"SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;","```sql
SELECT ShipCountry, SUM(Freight) AS TotalFreightCost
FROM orders
GROUP BY ShipCountry;
```",Both queries perform the same functions: they aggregate the total freight cost for each shipping country using the SUM function and group by the ShipCountry. The syntax in both queries yields the same results.,"SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",Both the generated SQL query and the ground truth query are identical and accurately calculate the total freight cost for each shipping country by grouping records in the 'orders' table by 'ShipCountry' and summing the 'Freight' column.,both
Identify suppliers with orders that have not been shipped yet.,SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.ShippedDate IS NULL GROUP BY suppliers.CompanyName;,"```sql
SELECT DISTINCT s.SupplierID, s.CompanyName
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
WHERE o.ShippedDate IS NULL;
```","Both queries retrieve suppliers with orders that have not been shipped by joining suppliers, products, order details, and orders tables. Although the structure differs slightly (DISTINCT vs. GROUP BY), they produce equivalent results.","SELECT s.SupplierID, s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.ShippedDate IS NULL GROUP BY s.SupplierID, s.CompanyName;","Both queries join the same tables and use the same condition to filter results by unshipped orders. They group by supplier details and effectively answer the user's question, identifying suppliers with unshipped orders.",both
Which products have been ordered more than 100 times?,"SELECT ProductID, COUNT(OrderID) AS OrderCount FROM [Order Details] GROUP BY ProductID HAVING COUNT(OrderID) > 100;","```sql
SELECT 
    p.ProductID,
    p.ProductName,
    SUM(od.Quantity) AS TotalOrdered
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.ProductName
HAVING 
    SUM(od.Quantity) > 100;
```","The generated query counts the total quantity of products ordered, while the ground truth query counts the number of orders for each product. They measure different aspects.",SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity) > 100;,"The generated query correctly finds products ordered more than 100 times, while the ground truth query counts the number of orders per product but omits the order quantity.",None
What is the percentage of orders requiring delivery within one week?,"SELECT COUNT(OrderID) * 100.0 / (SELECT COUNT(*) FROM orders) AS Percentage FROM orders WHERE DATEDIFF(RequiredDate, OrderDate) <= 7;","```sql
SELECT 
    (COUNT(OrderID) * 100.0 / (SELECT COUNT(OrderID) FROM orders)) AS Percentage_One_Week
FROM orders
WHERE DATEDIFF(RequiredDate, OrderDate) <= 7;
```","Both queries calculate the percentage of orders needing delivery within one week, and the logic is equivalent despite slight syntax differences.","SELECT (COUNT(CASE WHEN DATEDIFF('day', orders.OrderDate, orders.RequiredDate) <= 7 THEN 1 END) * 100.0 / COUNT(orders.OrderID)) AS OrdersWithinWeek FROM orders;","Both queries calculate the percentage of orders requiring delivery within one week by comparing the order date and required date, yielding equivalent results.",both
How does sales distribution vary across different regions?,"SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID GROUP BY region.RegionDescription","```sql
SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
FROM orders
JOIN customers ON orders.CustomerID = customers.CustomerID
JOIN region ON customers.Region = region.RegionID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY region.RegionDescription
```","The generated query joins customers with regions, while the ground truth joins orders with regions via employee territories. This may lead to different results if customer regions and employee territories don't align.","SELECT region.RegionID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN shippers ON orders.ShipVia = shippers.ShipperID JOIN region ON shippers.RegionID = region.RegionID GROUP BY region.RegionID","The generated query uses the 'shippers' table to join with 'region', whereas the ground truth query uses 'employees', 'employeeTerritories', and 'territories' to join with 'region'. This likely leads to different regions being calculated in each query.",None
What is the average value of orders placed in the month of January 2023?,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = 1 AND YEAR(orders.OrderDate) = 2023,"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31'
```","Both queries compute the average value of orders for January 2023. The generated query uses a date range, while the ground truth checks for the specific month and year. Both methods are equivalent in this context.",SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31';,"Both queries calculate the average order value for January 2023. The generated query uses BETWEEN to filter dates, while the ground truth uses MONTH and YEAR functions. Both achieve the same result.",both
What is the total sales generated by each employee in the last month?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) GROUP BY e.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE)
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","Both queries calculate total sales per employee for the last month. The generated query includes employee names for additional detail, but the results regarding total sales per EmployeeID are the same.","SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('MONTH', CURRENT_DATE) - INTERVAL '1 MONTH' AND o.OrderDate < DATE_TRUNC('MONTH', CURRENT_DATE) GROUP BY e.EmployeeID;","The generated query uses DATE_TRUNC to filter the last month's dates, but does not accurately match the logic of the ground truth. Specifically, it excludes the first day of the current month, potentially missing sales on that date.",Base
Determine the Customer Retention Rate for the past quarter.,SELECT 100.0 * (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate BETWEEN '2023-07-01' AND '2023-09-30') / (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate < '2023-07-01') AS RetentionRate;,"```sql
SELECT 
    (COUNT(DISTINCT o1.CustomerID) * 1.0 / NULLIF(COUNT(DISTINCT o2.CustomerID), 0)) AS CustomerRetentionRate
FROM 
    orders o1
LEFT JOIN 
    orders o2 ON o1.CustomerID = o2.CustomerID AND o2.OrderDate < DATEADD(quarter, -1, CURRENT_DATE)
WHERE 
    o1.OrderDate BETWEEN DATEADD(quarter, -1, CURRENT_DATE) AND CURRENT_DATE
```",The generated SQL incorrectly calculates retention by comparing current quarter customers to customers before the previous quarter. The ground truth compares the current quarter to the quarter before the current one.,"SELECT (COUNT(DISTINCT CASE WHEN OrderDate >= '2023-07-01' THEN CustomerID END) / NULLIF(COUNT(DISTINCT CASE WHEN OrderDate < '2023-07-01' THEN CustomerID END), 0)) AS RetentionRate FROM orders;","The generated query does not correctly calculate the retention rate for the past quarter. It uses a CASE WHEN for the entire dataset from '2023-07-01' and doesn't filter the end date for the past quarter like the ground truth query does. Additionally, the ground truth multiplies the rate by 100 for percentage output.",None
Calculate the average reorder level across all products.,SELECT AVG(ReorderLevel) FROM products;,"```sql
SELECT AVG(ReorderLevel) AS AverageReorderLevel 
FROM products;
```","Both queries calculate the average reorder level across all products and will yield the same result. The generated query includes an alias for the result, but it doesn't affect the outcome.",SELECT AVG(ReorderLevel) FROM products;,Both queries correctly calculate the average reorder level across all products using the AVG function on the ReorderLevel column from the products table.,both
How many units on order exist for each supplier?,"SELECT SupplierID, SUM(UnitsOnOrder) FROM products GROUP BY SupplierID;","```sql
SELECT SupplierID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder
FROM products
GROUP BY SupplierID;
```","Both queries calculate the sum of 'UnitsOnOrder' for each 'SupplierID' from the 'products' table, grouped by 'SupplierID'.","SELECT SupplierID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY SupplierID;",Both queries calculate the total units on order per supplier using the SupplierID and grouping by it. The difference in the alias 'TotalUnitsOnOrder' does not affect the result.,both
Which supplier provides the most number of different products?,"SELECT SupplierID, COUNT(DISTINCT ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID ORDER BY NumberOfProducts DESC LIMIT 1;","```sql
SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount
FROM products
GROUP BY SupplierID
ORDER BY ProductCount DESC
LIMIT 1;
```",Both queries accurately count distinct products for each supplier and return the supplier with the highest count.,"SELECT s.SupplierID, COUNT(DISTINCT p.ProductID) AS ProductCount FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID ORDER BY ProductCount DESC LIMIT 1;","Both queries aim to find the supplier with the most distinct products, counting distinct ProductID and using a GROUP BY on SupplierID. They order the results in descending order and limit the output to 1, achieving the same result.",both
What is the average discount offered on products that have been discontinued?,SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1;,"```sql
SELECT AVG([Order Details].Discount) AS AverageDiscount
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
WHERE products.Discontinued = 1;
```","The generated SQL query accurately answers the user's question and yields the same results as the ground truth query. Both queries calculate the average discount on discontinued products by joining the 'Order Details' and 'products' tables, and filtering where 'products.Discontinued' equals 1.",SELECT AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1;,"Both queries calculate the average discount for products that have been discontinued. They join the 'products' table with the 'Order Details' table on 'ProductID' and filter where 'Discontinued' equals 1. Although the table aliases differ, the logic and result are the same.",both
Which cities have the highest number of sales from employees?,"SELECT e.City, COUNT(*) AS SalesCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.City ORDER BY SalesCount DESC;","```sql
SELECT e.City, COUNT(o.OrderID) AS NumberOfSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.City
ORDER BY NumberOfSales DESC;
```","Both queries calculate the number of sales per city by counting the number of orders linked to each employee, and then order the results by the count in descending order. The different alias for the count column does not affect the result.","SELECT o.ShipCity, COUNT(DISTINCT o.OrderID) AS NumSales FROM orders o JOIN DISTINCT [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCity ORDER BY NumSales DESC;","The generated query counts distinct orders by ShipCity, not by the employee's city, and uses an incorrect DISTINCT placement in JOIN. Ground truth counts sales by employee's city.",Base
Which products have the highest turnover rates?,"SELECT ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS TurnoverRatio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductID ORDER BY TurnoverRatio DESC;","```sql
SELECT p.ProductID, p.ProductName, 
       SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS TurnoverRate
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TurnoverRate DESC;
```","Both queries calculate the turnover rate by dividing the total sales value by the average units in stock for each product. The difference is in the selection of fields; the generated query also includes ProductName in the SELECT and GROUP BY clauses, which doesn't affect the turnover calculation.","SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY InventoryTurnover DESC;","Both queries calculate inventory turnover as the sum of quantity times unit price divided by average units in stock, group by ProductID, and order by the resulting turnover ratio in descending order. The differences in column aliases and table join syntax don't affect the result.",both
Who are the top 5 customers by revenue?,"SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalRevenue DESC LIMIT 5;","```sql
SELECT c.CustomerID, c.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.CustomerID, c.CompanyName
ORDER BY TotalRevenue DESC
LIMIT 5;
```","The generated query includes CompanyName in the SELECT and GROUP BY clauses, while the ground truth query does not. This could lead to different grouping and results if there are multiple companies associated with a CustomerID.","SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY TotalRevenue DESC FETCH FIRST 5 ROWS ONLY;","Both queries calculate the total revenue per customer by summing the product of UnitPrice, Quantity, and discount factor from the 'Order Details' table. They join the customers, orders, and order details tables correctly, group results by CustomerID, and order by TotalRevenue in descending order, limiting to the top 5. The FETCH FIRST 5 ROWS ONLY in the generated query and the LIMIT 5 in the ground truth query achieve the same outcome.",FT
How many customers placed more than 3 orders in 2023?,SELECT COUNT(*) AS customer_count FROM (SELECT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.CustomerID HAVING COUNT(DISTINCT orders.OrderID) > 3) AS subquery,"```sql
SELECT COUNT(DISTINCT orders.CustomerID) AS customer_count
FROM orders
WHERE YEAR(orders.OrderDate) = 2023
GROUP BY orders.CustomerID
HAVING COUNT(orders.OrderID) > 3
```","Both queries count unique customers with more than three orders in 2023. They filter and group by customer ID and the year 2023, although the date range handling differs slightly, it does not affect the outcome.",SELECT COUNT(DISTINCT orders.CustomerID) AS customers FROM orders WHERE YEAR(orders.OrderDate) = 2023 GROUP BY orders.CustomerID HAVING COUNT(orders.OrderID) > 3,The generated query incorrectly uses COUNT(DISTINCT orders.CustomerID) and doesn't filter results within the subquery structure while having a misplacement of the HAVING clause.,Base
Find the product with the highest current stock level.,SELECT ProductName FROM products ORDER BY UnitsInStock DESC LIMIT 1;,"```sql
SELECT ProductID, ProductName, UnitsInStock
FROM products
ORDER BY UnitsInStock DESC
LIMIT 1;
```","The generated query returns ProductID, ProductName, and UnitsInStock, whereas the ground truth query returns only ProductName.","SELECT ProductID, UnitsInStock FROM products ORDER BY UnitsInStock DESC LIMIT 1;","The generated query returns ProductID and UnitsInStock, while the ground truth returns ProductName.",None
Which category has the highest number of discontinued products?,"SELECT CategoryID, COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1 GROUP BY CategoryID ORDER BY DiscontinuedProducts DESC;","```sql
SELECT CategoryID, COUNT(ProductID) AS DiscontinuedCount
FROM products
WHERE Discontinued = 1
GROUP BY CategoryID
ORDER BY DiscontinuedCount DESC
LIMIT 1;
```","Both queries correctly find the category with the most discontinued products. The main difference is the use of LIMIT 1 in the generated query to ensure only the top result is returned, which aligns with the user's request.","SELECT CategoryID, COUNT(*) AS DiscontinuedCount FROM products WHERE Discontinued = 1 GROUP BY CategoryID ORDER BY DiscontinuedCount DESC LIMIT 1;","Both queries count discontinued products per category and return the category with the highest count. The generated query limits the result to one, matching the highest count identically.",both
What is the total revenue contributed by employees in each region?,"SELECT Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Region;","```sql
SELECT e.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.Region;
```","Both queries calculate the total revenue by summing the product of UnitPrice, Quantity, and the discount multiplier for each region, grouping by the region field. The logic and joins are identical; thus, they yield the same result.","SELECT e.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Region;","Both queries calculate total revenue per region by joining employees, orders, and order details tables, and they group by region. The use of aliases and brackets doesn't change the execution or results.",both
What is the total revenue generated from orders last month?,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Total_Revenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH);,"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) 
AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH);
```","The generated SQL query is functionally equivalent to the ground truth query, calculating the total revenue from orders in the previous month using the same logic and conditions.",SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURDATE() - INTERVAL 1 MONTH);,"Both queries calculate the total revenue for last month's orders using the same logic and conditions. They only differ in the use of CURDATE() vs. CURRENT_DATE, which function identically here.",both
What is the average order fulfillment time for each product category?,"SELECT categories.CategoryName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName","```sql
SELECT categories.CategoryID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_order_fulfillment_time
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN categories ON products.CategoryID = categories.CategoryID
GROUP BY categories.CategoryID
```","The generated query groups by CategoryID, whereas the ground truth query groups by CategoryName. This leads to equivalent results only if CategoryID and CategoryName have a one-to-one correspondence.","SELECT categories.CategoryName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName",Both queries are identical and accurately compute the average order fulfillment time for each product category.,FT
Which shipping method is used the most frequently?,"SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;","```sql
SELECT ShipVia, COUNT(*) AS Frequency
FROM orders
GROUP BY ShipVia
ORDER BY Frequency DESC
LIMIT 1;
```",Both queries calculate the most frequently used shipping method by counting the orders grouped by 'ShipVia'. The usage of COUNT(*) and COUNT(OrderID) will yield the same result as both aggregate the number of rows per group.,"SELECT ShipVia, COUNT(*) AS shipping_count FROM orders GROUP BY ShipVia ORDER BY shipping_count DESC LIMIT 1;","Both queries count the number of occurrences for each shipping method in the 'orders' table and return the shipping method used most frequently. They use COUNT(*) and COUNT(OrderID) interchangeably, which yields the same result as OrderID is expected to be present in every row.",both
What is the monthly inventory turnover ratio?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT 
    EXTRACT(YEAR FROM o.OrderDate) AS Year,
    EXTRACT(MONTH FROM o.OrderDate) AS Month,
    SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM 
    [Order Details] od
JOIN 
    products p ON od.ProductID = p.ProductID
JOIN 
    orders o ON od.OrderID = o.OrderID
GROUP BY 
    EXTRACT(YEAR FROM o.OrderDate),
    EXTRACT(MONTH FROM o.OrderDate);
```","The generated query groups by year and month separately, potentially creating incorrect buckets. Also, it includes a join with the 'orders' table not present in the ground truth.","SELECT EXTRACT(MONTH FROM OrderDate) AS Month, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY EXTRACT(MONTH FROM OrderDate);","The generated query groups by month only, while the ground truth groups by year and month. This difference means they will yield different results.",None
What is the average fulfillment time for orders each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY DATE_TRUNC('month', OrderDate);","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth,
    AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM 
    orders
GROUP BY 
    OrderMonth
```","Both queries calculate the average fulfillment time by computing the difference between ShippedDate and OrderDate, then aggregating by month. The only difference lies in the method of truncating or formatting the date.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillment FROM orders WHERE ShippedDate IS NOT NULL GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","Both queries calculate the average fulfillment time by month. The generated query uses DATE_FORMAT while the ground truth uses DATE_TRUNC, but both function to group by month. The condition on ShippedDate is an optimization that doesn't alter the result.",both
Which orders have the highest discount applied?,"SELECT OrderID, Discount FROM [Order Details] ORDER BY Discount DESC LIMIT 10;","```sql
SELECT OrderID, SUM(Discount) AS TotalDiscount
FROM [Order Details]
GROUP BY OrderID
ORDER BY TotalDiscount DESC
LIMIT 1;
```","The generated query calculates total discount per order and returns the order with the highest total, while the ground truth query simply finds the top 10 orders based on individual discount values.","SELECT OrderID, ProductID, Discount FROM [Order Details] ORDER BY Discount DESC;","The generated query does not include a LIMIT clause, so it retrieves all rows instead of the top orders with the highest discount.",None
Which products have a stock level below their reorder level?,SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel 
FROM products 
WHERE UnitsInStock < ReorderLevel;
```","The generated query selects additional columns (ProductID, UnitsInStock, ReorderLevel) that are not required by the user's question which requests only the ProductName.",SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"Both queries select the ProductName from the products table where the UnitsInStock is less than the ReorderLevel, hence they produce identical results.",FT
Find products with unusually high discounts applied to them.,SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.Discount > 0.25;,"```sql
SELECT p.ProductID, p.ProductName, od.Discount
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.Discount > 0.5; -- Assuming ""unusually high"" means more than 50% discount
```","The generated query uses a discount threshold of 0.5, while the ground truth uses 0.25.","SELECT ProductID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY ProductID HAVING AVG(Discount) > 0.2;","The generated query averages discounts and checks if the average is above 0.2, whereas the ground truth query selects products where any individual discount is above 0.25.",None
Find the supplier that offers the most products at a unit price above $20.,"SELECT suppliers.SupplierID, CompanyName, COUNT(products.ProductID) AS ProductCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitPrice > 20 GROUP BY suppliers.SupplierID, suppliers.CompanyName ORDER BY ProductCount DESC LIMIT 1;","```sql
SELECT suppliers.CompanyName, COUNT(products.ProductID) AS ProductCount
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
WHERE products.UnitPrice > 20
GROUP BY suppliers.SupplierID
ORDER BY ProductCount DESC
LIMIT 1;
```","Both queries correctly count the number of products with a unit price above $20 for each supplier and return the supplier with the highest count. The main difference is the inclusion of SupplierID in the ground truth query's SELECT clause, which does not affect the result.","SELECT SupplierID, COUNT(*) AS ProductCount FROM products WHERE UnitPrice > 20 GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1","The generated query does not include the CompanyName and assumes SupplierID alone is sufficient. It may not yield the exact same output structure as the ground truth query, which includes CompanyName.",Base
What is the overall discount given for each product?,"SELECT p.ProductName, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;","```sql
SELECT 
    products.ProductID,
    products.ProductName,
    SUM([Order Details].Discount * [Order Details].Quantity) AS TotalDiscount
FROM 
    products
JOIN 
    [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY 
    products.ProductID, products.ProductName
```","The generated SQL query calculates the total discount based on the quantity only, whereas the ground truth query multiplies discount with both quantity and unit price, which provides the monetary value of the discount.","SELECT p.ProductName, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;",Both queries perform the same operations and return the same results by joining the 'products' and 'Order Details' tables on 'ProductID' and calculating the total discount for each product.,FT
What is the median fulfillment time for all orders?,"SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DATEDIFF(ShippedDate, OrderDate)) AS MedianFulfillmentTime FROM orders;","```sql
SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS MedianFulfillmentTime
FROM orders;
```","Both queries calculate the median fulfillment time using the same function, PERCENTILE_CONT, and the same date difference calculation. They should yield the same result.","SELECT AVG(fulfillment_times) AS MedianFulfillmentTime FROM (SELECT OrderID, EXTRACT(EPOCH FROM (ShippedDate - OrderDate)) / 86400 AS fulfillment_times FROM orders) AS sub ORDER BY fulfillment_times OFFSET COUNT(*) / 2 LIMIT 1;","The generated SQL query attempts to find the median by using the OFFSET and LIMIT method, but it does not properly calculate the median in SQL. The ground truth query correctly uses PERCENTILE_CONT(0.5) to find the median.",Base
Who are the top three employees in terms of sales?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 3;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 3;
```","The Generated SQL Query includes employee first and last names in the SELECT clause, which might not align with the expected output structure of the Ground Truth Query. Additionally, 'LIMIT 3' is not ANSI SQL standard, suggesting the query's syntax might not be portable across all SQL databases.","SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 3;","Both queries select the EmployeeID and calculate TotalSales by joining the employees, orders, and Order Details tables, grouping by EmployeeID, and ordering by TotalSales in descending order. They limit the results to the top three, thus answering the user's question accurately despite minor naming differences.",FT
What are the total sales generated by country?,"SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ShipCountry;","```sql
SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY ShipCountry;
```","Both queries compute total sales by country using the same logic and aggregation. The tables being joined and the columns used are identical, producing equivalent results.","SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry;","Both queries perform the same join and aggregation, computing total sales by country, just with tables in different order.",both
Which products have the highest sales performance this year?,"SELECT p.ProductID, SUM(od.Quantity) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE YEAR(od.OrderDate) = YEAR(CURDATE()) GROUP BY p.ProductID ORDER BY TotalSales DESC LIMIT 5;","```sql
SELECT p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE YEAR(od.OrderID) = YEAR(CURRENT_DATE)
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSales DESC
```","The generated query uses 'od.OrderID' instead of 'od.OrderDate' for the year comparison, which may not yield the correct current year orders. Additionally, the generated query does not limit the results to the top 5 products.","SELECT ProductID, SUM(Quantity) AS TotalSales FROM [Order Details] WHERE YEAR(OrderID) = YEAR(CURDATE()) GROUP BY ProductID ORDER BY TotalSales DESC;","The generated SQL query filters by YEAR(OrderID), which is likely incorrect, as OrderID is not a date field. It also does not limit the results to only the top 5 products, unlike the ground truth query.",None
Which employees are responsible for the top 10 largest orders?,"SELECT e.EmployeeID, o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, o.OrderID ORDER BY OrderValue DESC LIMIT 10;","```sql
SELECT e.FirstName, e.LastName, o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY o.OrderID, e.EmployeeID
ORDER BY TotalOrderValue DESC
LIMIT 10;
```","The generated SQL query includes employee names and uses them in the GROUP BY clause, which is unnecessary. The ground truth query groups only by employee and order IDs and limits the result set correctly.","SELECT e.EmployeeID, o.OrderID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, o.OrderID ORDER BY SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) DESC LIMIT 10;","The generated query does not correctly use the JOIN on 'Order Details' to calculate the total order value, which is necessary to identify the top 10 largest orders. It lacks the JOIN with the 'Order Details' table.",None
Find products with a discount greater than 10% and quantity ordered over 100 units.,SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0.10 AND od.Quantity > 100;,"```sql
SELECT p.ProductID, p.ProductName, od.Quantity, od.Discount
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.Discount > 0.10 AND od.Quantity > 100;
```","The generated query includes additional columns (ProductID, Quantity, Discount) compared to the ground truth query, which only selects ProductName.","SELECT p.ProductName, od.Discount, od.Quantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0.1 AND od.Quantity > 100;","The generated SQL query selects ProductName, Discount, and Quantity, whereas the ground truth query only selects ProductName. This difference means the results will have different columns, even though the filtering conditions are the same.",None
How many units of each product are currently in stock?,"SELECT ProductID, UnitsInStock FROM products;","```sql
SELECT ProductID, UnitsInStock
FROM products;
```","The generated SQL query retrieves the ProductID and UnitsInStock from the products table, which answers the user's question about how many units of each product are currently in stock. It is identical to the ground truth query in terms of logic and output.","SELECT ProductName, UnitsInStock FROM products WHERE UnitsInStock > 0;","The generated SQL query filters products with UnitsInStock > 0 and retrieves ProductName, whereas the ground truth query retrieves ProductID and includes all products, even those with 0 stock.",Base
What is the total revenue difference between employees with different titles?,"SELECT employees.Title, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Title;","```sql
SELECT 
    e.Title, 
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    e.Title
```","The generated query calculates total revenue per title, not the difference between them.","SELECT e.Title, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Title HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 0","The generated query includes a HAVING clause that filters out titles with zero revenue, which affects the comparison of total revenue differences between titles.",None
Identify orders that were shipped after the required date.,"SELECT OrderID, OrderDate, RequiredDate, ShippedDate FROM orders WHERE ShippedDate > RequiredDate;","```sql
SELECT *
FROM orders
WHERE ShippedDate > RequiredDate;
```","Both queries correctly identify orders shipped after the required date. The Generated SQL Query includes all columns, which doesn't affect the correctness related to the user's question.","SELECT OrderID, OrderDate, RequiredDate FROM orders WHERE ShippedDate > RequiredDate;",The generated query lacks the 'ShippedDate' column which is needed for a complete answer.,Base
How many unique products have been ordered in total?,SELECT COUNT(DISTINCT [Order Details].ProductID) AS UniqueProducts FROM [Order Details];,"```sql
SELECT COUNT(DISTINCT ProductID) AS UniqueProductsOrdered
FROM [Order Details];
```","Both queries count distinct ProductIDs from the Order Details table and produce the same result, differing only in alias naming.",SELECT COUNT(DISTINCT od.ProductID) AS UniqueProducts FROM [Order Details] od;,"Both queries count distinct ProductID from the 'Order Details' table, producing the same result.",both
Determine the total value of discounts applied over all orders.,SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount) AS TotalDiscountValue FROM [Order Details];,"```sql
SELECT SUM(Discount) AS TotalDiscounts
FROM [Order Details];
```","The generated query simply sums the Discount field, whereas the ground truth query calculates the total discount value by multiplying the Quantity, UnitPrice, and Discount, which reflects the actual total discounts applied on all orders.",SELECT SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscountValue FROM [Order Details] od;,"Both queries compute the sum of the product of Quantity, UnitPrice, and Discount from the [Order Details] table to determine the total discount value. The differences in aliasing and syntax are superficial.",FT
Calculate the average number of orders for each month in 2021.,"SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) / 12 AS AverageOrders FROM orders WHERE OrderDate BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY EXTRACT(MONTH FROM OrderDate)","```sql
SELECT 
    EXTRACT(YEAR FROM OrderDate) AS Year,
    EXTRACT(MONTH FROM OrderDate) AS Month,
    COUNT(OrderID) / COUNT(DISTINCT EXTRACT(DAY FROM OrderDate)) AS AverageOrders
FROM 
    orders
WHERE 
    OrderDate BETWEEN '2021-01-01' AND '2021-12-31'
GROUP BY 
    Year, Month
ORDER BY 
    Year, Month;
```","The generated query calculates the average number of orders per day within each month, whereas the ground truth query incorrectly attempts to average by dividing the total by 12, assuming it's the monthly average for the year.","SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) / COUNT(DISTINCT EXTRACT(YEAR FROM OrderDate)) AS AverageOrders FROM orders WHERE OrderDate BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY EXTRACT(MONTH FROM OrderDate);","Both queries calculate the average number of orders per month for 2021. The generated query uses COUNT(DISTINCT EXTRACT(YEAR FROM OrderDate)), which evaluates to 1 for the year 2021, aligning with the division by 12 in the ground truth query.",FT
Which customer received the most orders in the last month?,"SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) AND MONTH(OrderDate) = MONTH(CURRENT_DATE) - 1 GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT CustomerID, COUNT(OrderID) AS OrderCount
FROM orders
WHERE OrderDate >= DATEADD(MONTH, -1, GETDATE())
GROUP BY CustomerID
ORDER BY OrderCount DESC
LIMIT 1;
```","The generated SQL query uses DATEADD and GETDATE(), which may not correctly capture the exact last month if the query runs at different times. The ground truth query specifically targets the previous month using YEAR and MONTH functions, ensuring it calculates orders for the entire last month.","SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;","The generated query uses DATEADD to get the last month relative to the current date, which may not align to the actual calendar month boundary as the ground truth query does. Therefore, they might yield different results.",None
What is the average discount given on products?,SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details];
```","The generated SQL query and the ground truth SQL query are identical and calculate the average discount from the same table, '[Order Details]'.",SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];,Both queries calculate the average discount from the 'Order Details' table.,both
What is the most common shipment method used for orders processed by each employee?,"SELECT employees.EmployeeID, ShipVia, COUNT(orders.OrderID) AS NumShipments FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, ShipVia ORDER BY NumShipments DESC;","```sql
SELECT EmployeeID, ShipVia, COUNT(*) as Shipments
FROM orders
GROUP BY EmployeeID, ShipVia
HAVING Shipments = (
    SELECT MAX(Shipments)
    FROM (
        SELECT ShipVia, COUNT(*) as Shipments
        FROM orders
        WHERE EmployeeID = o.EmployeeID
        GROUP BY ShipVia
    ) as EmployeeShipments
)
ORDER BY EmployeeID;
```","The generated SQL query attempts to select the most common shipment method per employee but will fail with syntax errors and incorrect logic. The employee-specific maximum count comparison in the HAVING clause is incorrect. The ground truth query sorts all shipments by number, not filtering for the most common method per employee.","SELECT e.EmployeeID, o.ShipVia, COUNT(*) AS count FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, o.ShipVia ORDER BY count DESC FETCH FIRST 1 ROW ONLY;","The generated query fetches only one row with the highest count overall, rather than the most common shipment method for each employee. It should determine the most common method by employee.",None
Calculate the revenue lost due to discounts for each product.,"SELECT ProductID, SUM(UnitPrice * Quantity * Discount) AS RevenueLost FROM [Order Details] GROUP BY ProductID ORDER BY RevenueLost DESC;","```sql
SELECT 
    [Order Details].ProductID,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS RevenueLostDueToDiscounts
FROM 
    [Order Details]
GROUP BY 
    [Order Details].ProductID;
```",Both queries calculate the sum of revenue lost due to discounts for each product. The ground truth query includes an ORDER BY clause which does not affect the correctness of the results but orders them by the revenue lost. The generated query lacks this sorting but still correctly answers the user's question by grouping and calculating the sum.,"SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS RevenueLost FROM [Order Details] od GROUP BY od.ProductID;","The generated query does not include an ORDER BY clause, which is present in the ground truth query. While both queries calculate revenue lost due to discounts, the ground truth also sorts the results by RevenueLost in descending order.",Base
What percentage of orders received a discount?,SELECT (COUNT(DISTINCT [Order Details].OrderID) * 1.0 / (SELECT COUNT(DISTINCT OrderID) FROM orders)) * 100 AS percentage_discounted_orders FROM [Order Details] WHERE Discount > 0,"```sql
SELECT (COUNT(DISTINCT orders.OrderID) WHERE [Order Details].Discount > 0) * 100.0 / COUNT(DISTINCT orders.OrderID) AS discount_percentage 
FROM orders 
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
```","The generated query has a syntax error with misplaced WHERE. Additionally, it calculates using only Order Details with Discount > 0 for the numerator, while the denominator counts all orders, potentially affecting accuracy.",SELECT (COUNT(CASE WHEN [Order Details].Discount > 0 THEN 1 END) * 100.0 / COUNT(DISTINCT [Order Details].OrderID)) AS discount_percentage FROM [Order Details];,"The generated query calculates the percentage based on the total number of OrderID entries in Order Details with a discount, but the ground truth query calculates the percentage based on the count of distinct OrderID in orders.",None
What are the top-selling products by each category?,"SELECT CategoryID, P.ProductName, SUM(OD.Quantity) AS TotalSales FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID GROUP BY CategoryID, P.ProductName ORDER BY CategoryID, TotalSales DESC;","```sql
SELECT 
    p.CategoryID,
    p.ProductID,
    p.ProductName,
    SUM(od.Quantity) AS TotalSales
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.CategoryID, p.ProductID, p.ProductName
HAVING 
    TotalSales = (SELECT MAX(TotalSales) 
                  FROM 
                      (SELECT 
                          SUM(od_inner.Quantity) AS TotalSales
                       FROM 
                          products p_inner
                       JOIN 
                          [Order Details] od_inner ON p_inner.ProductID = od_inner.ProductID
                       WHERE 
                          p_inner.CategoryID = p.CategoryID
                       GROUP BY 
                          p_inner.ProductID) AS subquery)
ORDER BY 
    p.CategoryID;
```","The generated query calculates the top-selling products per category but filters them using a subquery in the HAVING clause, which may incorrectly assume one product per category. The ground truth query does not account for filtering to only top-sellers within categories, instead, it just lists all products ordered by total sales within each category.","```sql
SELECT p.CategoryID, p.ProductID, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID, p.ProductID ORDER BY p.CategoryID, TotalQuantity DESC;
```","The generated SQL query uses ProductID for grouping and total quantity calculation, while the ground truth query uses ProductName. This may result in different outputs if multiple products share the same ProductID or if the product names differ within a CategoryID.",None
What is the average unit price of products for each category?,"SELECT p.CategoryID, AVG(p.UnitPrice) AS AveragePrice FROM products p GROUP BY p.CategoryID;","```sql
SELECT products.CategoryID, AVG(products.UnitPrice) AS AverageUnitPrice
FROM products
GROUP BY products.CategoryID;
```","Both queries calculate the average unit price of products grouped by category, using the same logic and fields.","SELECT CategoryID, AVG(UnitPrice) FROM products GROUP BY CategoryID;","Both queries calculate the average unit price for each category by grouping on CategoryID, and the use of aliases or table references doesn't affect the result.",both
Which employee has handled the most orders?,"SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries perform the same operations: they count the number of orders per employee, sort the results in descending order, and limit the output to the top result. The difference in alias names (OrderCount vs NumberOfOrders) does not affect the result.","SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1;",Both queries count the number of orders handled by each employee and return the employee with the highest count. The column alias difference does not affect the outcome.,both
Determine monthly trends in inventory turnover ratios.,"SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') as OrderMonth, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) as InventoryTurnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY OrderMonth ORDER BY OrderMonth;","```sql
SELECT 
    DATE_TRUNC('month', o.OrderDate) AS Month,
    SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM 
    ""Order Details"" od
JOIN 
    products p ON od.ProductID = p.ProductID
JOIN 
    orders o ON od.OrderID = o.OrderID
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries calculate the inventory turnover ratio per month by aggregating sales and average inventory, differing only in date formatting functions and potential minor syntax differences.","SELECT TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYY-MM') AS Month, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYY-MM');","The generated query uses SYSDATE instead of actual order dates from the orders table to determine the month. It doesn't accurately reflect monthly trends using order data, unlike the ground truth query.",Base
Calculate the total freight cost for shipments to each country.,"SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;","```sql
SELECT ShipCountry, SUM(Freight) AS TotalFreight
FROM orders
GROUP BY ShipCountry;
```",Both queries calculate the total freight cost per country with only a difference in the alias for the total freight column.,"```sql
SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;
```","The generated SQL query accurately answers the user's question by calculating the total freight cost for shipments to each country, grouping by ShipCountry and summing the Freight column. The difference in alias naming (TotalFreight vs. TotalFreightCost) does not affect the query's correctness or result.",both
Which products are sold below their reorder level and need to be prioritized for restocking?,"SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 0 ORDER BY UnitsInStock, UnitsOnOrder ASC;","```sql
SELECT p.ProductID, p.ProductName, p.UnitsInStock, p.ReorderLevel
FROM products p
WHERE p.UnitsInStock < p.ReorderLevel;
```","The generated query does not filter out discontinued products and includes additional columns like ProductID, UnitsInStock, and ReorderLevel. It also does not apply the ORDER BY clause on UnitsInStock and UnitsOnOrder.","```sql
SELECT ProductID, ProductName FROM products WHERE UnitsInStock + UnitsOnOrder < ReorderLevel;
```","The generated query includes 'UnitsOnOrder' in the comparison and doesn't check if the products are not discontinued, while the ground truth query excludes discontinued products and doesn't consider 'UnitsOnOrder'.",None
Which product had the highest increase in sales compared to the previous month?,"SELECT products.ProductName, product_sales.current_month_sales - COALESCE(previous_month_sales.previous_month_sales, 0) AS sales_increase FROM (SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS current_month_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE()) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE()) GROUP BY [Order Details].ProductID) AS product_sales LEFT JOIN (SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS previous_month_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE()) - 1 AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE()) GROUP BY [Order Details].ProductID) AS previous_month_sales ON product_sales.ProductID = previous_month_sales.ProductID JOIN products ON product_sales.ProductID = products.ProductID ORDER BY sales_increase DESC LIMIT 1","```sql
SELECT current_month.ProductID, 
       current_month.total_sales - COALESCE(previous_month.total_sales, 0) AS sales_increase
FROM (
    SELECT ProductID, 
           SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
    FROM [Order Details]
    JOIN orders ON [Order Details].OrderID = orders.OrderID
    WHERE orders.OrderDate >= DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0)
      AND orders.OrderDate < DATEADD(month, DATEDIFF(month, 0, GETDATE()) + 1, 0)
    GROUP BY ProductID
) AS current_month
LEFT JOIN (
    SELECT ProductID, 
           SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
    FROM [Order Details]
    JOIN orders ON [Order Details].OrderID = orders.OrderID
    WHERE orders.OrderDate >= DATEADD(month, DATEDIFF(month, 0, GETDATE()) - 1, 0)
      AND orders.OrderDate < DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0)
    GROUP BY ProductID
) AS previous_month ON current_month.ProductID = previous_month.ProductID
ORDER BY sales_increase DESC
LIMIT 1
```","The generated query does not include the products table and thus cannot return the ProductName. Also, it uses dynamic date functions rather than simple MONTH and YEAR checks, which could lead to different behavior depending on the database.","SELECT p.ProductName, (SUM(od.Quantity * od.UnitPrice) - LAG(SUM(od.Quantity * od.UnitPrice), 1) OVER (PARTITION BY DATE_TRUNC('month', o.OrderDate) ORDER BY DATE_TRUNC('month', o.OrderDate))) AS sales_increase FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID JOIN products p ON od.ProductID = p.ProductID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY p.ProductName, DATE_TRUNC('month', o.OrderDate) ORDER BY sales_increase DESC","The generated SQL query compares monthly sales increases over a full year using LAG and PARTITION, while the ground truth query compares only the current month to the previous month using a JOIN.",None
List products that have the highest margin by comparing unit price with discounted price.,"SELECT ProductName, UnitPrice - MIN(od.UnitPrice * (1 - od.Discount)) AS Margin FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY ProductName ORDER BY Margin DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, 
       p.UnitPrice, 
       od.Discount, 
       (p.UnitPrice - (p.UnitPrice * od.Discount)) AS Margin
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
ORDER BY Margin DESC
LIMIT 10;
```","The generated SQL query calculates the margin on each order line, while the ground truth aggregates by minimum discounted price per product and groups by ProductName. The generated query does not achieve the same aggregation.","SELECT p.ProductName, p.ProductID, (p.UnitPrice - ([od.UnitPrice] - ([od.Discount] * [od.UnitPrice]))) AS Margin FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName, p.ProductID, p.UnitPrice, od.UnitPrice, od.Discount ORDER BY Margin DESC LIMIT 1;","The generated query calculates margins for each order detail and groups by multiple fields, which can lead to incorrect margin calculation. The ground truth query calculates the margin using the minimum discounted price, grouping only by ProductName and limiting results based on this calculation.",None
What is the average discount percentage given on orders?,SELECT AVG(Discount * 100) AS AverageDiscountPercentage FROM [Order Details];,"```sql
SELECT AVG(Discount) AS AverageDiscountPercentage
FROM [Order Details];
```","The generated query calculates the average discount as a number between 0 and 1, whereas the ground truth query multiplies the discount by 100 to express it as a percentage.",SELECT AVG(Discount) FROM [Order Details];,"The generated query calculates the average discount as a fraction, while the ground truth query calculates it as a percentage by multiplying by 100.",None
Identify orders with a shipping delay and calculate the average delay days.,"SELECT o.OrderID, DATEDIFF(o.ShippedDate, o.RequiredDate) AS DelayDays FROM orders o WHERE o.ShippedDate > o.RequiredDate;","```sql
SELECT AVG(DATEDIFF(orders.ShippedDate, orders.RequiredDate)) AS AverageDelayDays
FROM orders
WHERE orders.ShippedDate > orders.RequiredDate;
```","The generated query calculates the average delay, while the ground truth query identifies specific orders and their delay days.","SELECT AVG(DATEDIFF(o.ShippedDate, o.RequiredDate)) AS AvgDelayDays FROM orders o WHERE o.ShippedDate > o.RequiredDate;","The generated query calculates the average delay days, while the ground truth query lists each order ID with its delay days. They yield different results: one is an average, the other is a list of delays.",None
What is the total value of all orders placed by customers in the USA?,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Country = 'USA',"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_value 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN customers ON orders.CustomerID = customers.CustomerID 
WHERE customers.Country = 'USA'
```",The generated SQL query is identical to the ground truth query and accurately calculates the total value of all orders placed by customers in the USA.,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales_us FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Country = 'USA',"Both queries perform the same calculation by summing the extended price for USA customers, differing only in the alias for the result.",both
Calculate the reorder frequency for each product.,"SELECT p.ProductID, p.ProductName, COUNT(*) AS ReorderCount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID WHERE od.Quantity >= p.ReorderLevel GROUP BY p.ProductID, p.ProductName ORDER BY ReorderCount DESC;","```sql
SELECT 
    products.ProductID, 
    products.ProductName, 
    COUNT(orders.OrderID) AS ReorderFrequency
FROM 
    products
JOIN 
    [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN 
    orders ON [Order Details].OrderID = orders.OrderID
WHERE 
    products.UnitsInStock < products.ReorderLevel
GROUP BY 
    products.ProductID, 
    products.ProductName;
```","The generated query counts orders where products are below reorder level, while the ground truth counts where order quantity is at or above reorder level.","SELECT products.ProductName, ROUND(COUNT(orders.OrderID) * 1.0 / DATEDIFF(MAX(orders.OrderDate), MIN(orders.OrderDate)), 2) AS ReorderFrequency FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductID, products.ProductName","The generated query calculates reorder frequency based on date differences and order counts, while the ground truth focuses on counting reorders where the quantity meets or exceeds the reorder level, emphasizing different metrics.",None
Which employees are handling the most territories?,"SELECT employees.EmployeeID, COUNT(employeeTerritories.TerritoryID) AS territory_count FROM employeeTerritories JOIN employees ON employeeTerritories.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID ORDER BY territory_count DESC","```sql
SELECT employeeTerritories.EmployeeID, COUNT(employeeTerritories.TerritoryID) AS territory_count
FROM employeeTerritories
GROUP BY employeeTerritories.EmployeeID
ORDER BY territory_count DESC;
```","Both queries count territories per employee and order by the territory count in descending order to identify those handling the most territories. The presence of the JOIN in the ground truth query does not affect the logic, as it retrieves the same relationship between EmployeeID and TerritoryID.","SELECT employees.EmployeeID, COUNT(DISTINCT employeeTerritories.TerritoryID) AS num_territories FROM employees JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID GROUP BY employees.EmployeeID ORDER BY num_territories DESC",Both queries count the number of territories each employee handles and order the result in descending order by territory count.,both
Which products have a reorder level that is less than the average reorder level?,SELECT ProductName FROM products WHERE ReorderLevel < (SELECT AVG(ReorderLevel) FROM products);,"```sql
SELECT ProductID, ProductName, ReorderLevel
FROM products
WHERE ReorderLevel < (SELECT AVG(ReorderLevel) FROM products);
```","The generated query returns ProductID, ProductName, and ReorderLevel, whereas the ground truth query returns only ProductName.","SELECT ProductID, ProductName FROM products WHERE ReorderLevel < (SELECT AVG(ReorderLevel) FROM products);","Both queries accurately identify products with a reorder level less than the average reorder level. The only difference is that the generated query includes 'ProductID' in the SELECT clause, which does not affect the correctness of the answer to the user's question.",FT
Which product has the highest sales quantity in the last month?,"SELECT p.ProductName, SUM(od.Quantity) AS total_quantity FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID JOIN products p ON od.ProductID = p.ProductID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND o.OrderDate < CURDATE() GROUP BY p.ProductName ORDER BY total_quantity DESC LIMIT 1","```sql
SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE orders.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month'
AND orders.OrderDate < DATE_TRUNC('month', CURRENT_DATE)
GROUP BY products.ProductID
ORDER BY total_quantity DESC
LIMIT 1
```","The generated query does not join the products table, thus lacking the ProductName which may be needed. Both queries also use different approaches to handle the date logic, which could yield different results.","SELECT products.ProductID, SUM([Order Details].Quantity) AS product_quantity FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY products.ProductID ORDER BY product_quantity DESC LIMIT 1","The generated query calculates sales for the last month based on MONTH and YEAR functions, whereas the ground truth uses a date range with DATE_SUB. They might not handle date boundaries the same way, especially around month changes.",None
Which product has the highest reorder level?,SELECT ProductName FROM products ORDER BY ReorderLevel DESC LIMIT 1;,"```sql
SELECT ProductName, ReorderLevel 
FROM products 
ORDER BY ReorderLevel DESC 
LIMIT 1;
```","Both queries order the products by ReorderLevel in descending order and limit the output to the top result, successfully identifying the product with the highest reorder level.",SELECT ProductName FROM products WHERE ReorderLevel = (SELECT MAX(ReorderLevel) FROM products);,Both queries return the product with the highest reorder level by using different methods to achieve the same result.,both
What are the top 5 products with the highest discount given?,"SELECT ProductID, Discount FROM [Order Details] ORDER BY Discount DESC LIMIT 5;","```sql
SELECT ProductID, MAX(Discount) AS HighestDiscount
FROM [Order Details]
GROUP BY ProductID
ORDER BY HighestDiscount DESC
LIMIT 5;
```","The generated query finds the maximum discount per product, then limits the results, which can lead to missing other high discounts for different products. The ground truth query directly finds the top 5 instances of highest discounts, regardless of product.","SELECT [Order Details].ProductID, AVG([Order Details].Discount) AS AvgDiscount FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY AvgDiscount DESC LIMIT 5;","The generated query calculates the average discount per product and returns the top 5, while the ground truth query selects the top 5 individual discount records, not averages.",None
What is the average unit price of products by category?,"SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID;","```sql
SELECT products.CategoryID, AVG(products.UnitPrice) AS AverageUnitPrice
FROM products
GROUP BY products.CategoryID;
```",Both queries calculate the average unit price of products grouped by category. The differences in alias naming do not affect the result.,"SELECT p.CategoryID, AVG(p.UnitPrice) AS AvgUnitPrice FROM products p GROUP BY p.CategoryID;","Both queries calculate the average unit price of products grouped by category, and use equivalent SQL constructs.",both
What is the average discount given on orders?,SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details];
```","Both queries calculate the average of the Discount column from the Order Details table, yielding identical results.",SELECT AVG(od.Discount) AS AverageDiscount FROM [Order Details] od;,"Both queries calculate the average of the Discount column from the Order Details table, and the use of table alias 'od' does not affect the result.",both
What's the total value of the current stock for each product?,"SELECT ProductName, UnitsInStock * UnitPrice AS StockValue FROM products;","```sql
SELECT 
    p.ProductID,
    p.ProductName,
    p.UnitPrice,
    p.UnitsInStock,
    (p.UnitPrice * p.UnitsInStock) AS TotalStockValue
FROM 
    products p;
```","Both queries calculate the total stock value per product by multiplying UnitPrice by UnitsInStock and list similar columns, thus yielding the same results.","SELECT p.ProductID, (p.UnitPrice * (p.UnitsInStock - p.UnitsOnOrder)) AS StockValue FROM products p;","The generated query includes 'UnitsOnOrder', affecting the stock calculation, and selects 'ProductID', not 'ProductName'. The ground truth calculates only 'UnitsInStock' times 'UnitPrice' and returns 'ProductName'.",Base
List products that have never been ordered.,SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"```sql
SELECT p.ProductID, p.ProductName 
FROM products p 
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID 
WHERE od.ProductID IS NULL;
```","Both queries correctly identify products that have never been ordered. The first query uses a LEFT JOIN with a NULL check, and the second uses a NOT IN clause with a subquery. Both methods yield the same result set.","SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;",Both queries correctly identify products that have never been ordered by checking for product IDs that do not exist in the 'Order Details' table.,both
Which employees have the highest order fulfillment speed?,"SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EmployeeID ORDER BY AvgFulfillmentTime ASC;","```sql
SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY EmployeeID
ORDER BY AverageFulfillmentTime ASC
LIMIT 1;
```","The generated SQL query limits the result to one employee, while the ground truth does not, potentially changing the context of 'highest' fulfillment speed.","SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EmployeeID ORDER BY AvgFulfillmentTime ASC;","The generated SQL query and the ground truth SQL query are identical, indicating they will yield the same results and accurately answer the user's question.",FT
Which city has the highest number of orders shipped in 2023?,"SELECT orders.ShipCity, COUNT(orders.OrderID) AS total_orders FROM orders WHERE YEAR(orders.ShippedDate) = 2023 GROUP BY orders.ShipCity ORDER BY total_orders DESC LIMIT 1","```sql
SELECT ShipCity, COUNT(OrderID) AS order_count 
FROM orders 
WHERE YEAR(OrderDate) = 2023 
GROUP BY ShipCity 
ORDER BY order_count DESC 
LIMIT 1;
```",The generated query filters by OrderDate instead of ShippedDate as in the ground truth query.,"SELECT orders.ShipCity, COUNT(orders.OrderID) AS number_of_orders FROM orders WHERE Year(orders.ShippedDate) = 2023 GROUP BY orders.ShipCity ORDER BY number_of_orders DESC LIMIT 1;","The generated SQL query accurately answers the user's question by selecting the city with the highest number of orders shipped in 2023. Despite the difference in alias names for the count column ('number_of_orders' vs 'total_orders'), the logic and results of the queries are identical.",FT
Determine the difference in shipment duration for each order (RequiredDate vs ShippedDate).,"SELECT OrderID, DATEDIFF(ShippedDate, RequiredDate) AS ShipmentDuration FROM orders WHERE ShippedDate IS NOT NULL;","```sql
SELECT OrderID, DATEDIFF(ShippedDate, RequiredDate) AS ShipmentDuration
FROM orders;
```","The generated query doesn't filter out orders where ShippedDate is NULL, potentially leading to incorrect differences.","SELECT OrderID, DATEDIFF(RequiredDate, ShippedDate) AS ShipmentDifference FROM orders;","The generated query calculates the difference as RequiredDate minus ShippedDate, while the ground truth calculates it as ShippedDate minus RequiredDate. The sign of the results will be opposite. Additionally, the ground truth query filters out rows where ShippedDate is NULL, which the generated query does not consider.",None
What is the total revenue generated from each supplier's products?,"SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;","```sql
SELECT s.SupplierID, s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY s.SupplierID, s.CompanyName;
```","Both queries calculate the total revenue generated from each supplier's products. The generated query adds the CompanyName to the output for additional detail, but it doesn't affect the revenue calculation.","SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName;","Both queries calculate the total revenue per supplier by multiplying unit price, quantity, and discount factor. They use different identifiers for the supplier but this does not affect the correctness. Both group results by the supplier, ensuring equivalent outputs.",both
Which employee has the highest sales in a given year?,"SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2022 GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE YEAR(o.OrderDate) = ? -- replace '?' with the desired year
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries calculate total sales per employee for a given year, group by employee details, order by total sales descending, and limit to the top result, which effectively identifies the employee with the highest sales.","SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = <YEAR> GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","Both queries calculate total sales per employee and return the employee with the highest sales in a specified year. The generated query uses EXTRACT and a placeholder for the year, while the ground truth query uses YEAR and specifies 2022. The results will match if the placeholder is replaced by 2022.",both
How many unique products are ordered by each customer?,"SELECT o.CustomerID, COUNT(DISTINCT od.ProductID) AS UniqueProductsOrdered FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID;","```sql
SELECT CustomerID, COUNT(DISTINCT ProductID) AS UniqueProductsOrdered
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY CustomerID;
```",Both queries count unique products ordered by each customer using a JOIN between 'orders' and 'Order Details' and GROUP BY CustomerID. They produce the same results despite different table aliasing.,"SELECT orders.CustomerID, COUNT(DISTINCT [Order Details].ProductID) AS UniqueProducts FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.CustomerID;","Both queries count the distinct products ordered by each customer, using the same logic and achieving the same result.",both
Which products have the highest discount on average?,"SELECT products.ProductName, AVG([Order Details].Discount) AS AvgDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY AvgDiscount DESC","```sql
SELECT products.ProductName, AVG([Order Details].Discount) AS AverageDiscount
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY products.ProductName
ORDER BY AverageDiscount DESC;
```",The generated SQL query and the ground truth query are equivalent as they both compute the average discount for each product and order the results in descending order by average discount.,"SELECT products.ProductName, AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY AverageDiscount DESC LIMIT 1;","The generated query limits the result to one product with the highest average discount using 'LIMIT 1', while the ground truth does not impose such a limit.",Base
Calculate the average discount provided by each employee.,"SELECT employees.EmployeeID, AVG([Order Details].Discount) AS AverageDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;","```sql
SELECT e.EmployeeID, 
       e.FirstName, 
       e.LastName, 
       AVG(od.Discount) AS AverageDiscount
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName
```","The generated query and the ground truth query both calculate the average discount per employee. The generated query includes additional columns 'FirstName' and 'LastName' for more detailed output, but this does not affect the overall accuracy of the result regarding average discounts.","SELECT e.EmployeeID, e.LastName, AVG(od.Discount) AS AverageDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.LastName;","Both queries calculate the average discount per employee by joining employees, orders, and order details tables. They group by EmployeeID, and the usage of e.LastName in the generated query does not affect the average discount calculation compared to the ground truth query.",both
Calculate the total sales for each product.,"SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName;
```","Both queries calculate the total sales by summing the product of Quantity and UnitPrice for each product. They group by ProductID and ProductName, which will yield the same results as only grouping by ProductName if ProductName is unique for each ProductID.","SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;","Both queries calculate the total sales for each product by summing the product of quantity and unit price from the 'Order Details' table, grouped by product name.",both
How many orders were shipped later than the required date?,SELECT COUNT(orders.OrderID) FROM orders WHERE orders.ShippedDate > orders.RequiredDate,"```sql
SELECT COUNT(orders.OrderID) AS late_shipped_orders FROM orders WHERE orders.ShippedDate > orders.RequiredDate;
```","The generated SQL query and the ground truth both correctly count the number of orders where the ShippedDate is later than the RequiredDate, using the same logic.","Here's the SQL query to find the number of orders shipped later than the required date:

```sql
SELECT COUNT(OrderID) AS late_orders FROM orders WHERE ShippedDate > RequiredDate
```","Both queries count the number of orders where the ShippedDate is later than the RequiredDate, producing the same result.",both
What is the average shipping cost to each country?,"SELECT ShipCountry, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY ShipCountry;","```sql
SELECT ShipCountry, AVG(Freight) AS AverageShippingCost
FROM orders
GROUP BY ShipCountry;
```","The generated SQL query accurately answers the user's question by selecting the average freight (shipping cost) for each shipping country, and it matches the ground truth query.","SELECT ShipCountry, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipCountry;","Both queries calculate the average shipping cost (Freight) per ShipCountry, just with different alias names for the average field, which does not affect the outcome.",both
What is the average order value for the current year?,"SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN DATE_TRUNC('year', CURRENT_DATE) AND CURRENT_DATE;","```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE)
```","The generated query uses YEAR() function for filtering the current year, but not all databases support this function. The ground truth uses a date range with DATE_TRUNC, which is more portable across different SQL databases and handles exact current year filtering better.",SELECT SUM(UnitPrice * Quantity * (1 - Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE);,"Both queries calculate the average order value for the current year by summing the products of UnitPrice, Quantity, and Discount, divided by the distinct count of OrderID. The difference in filtering current year records does not affect the outcome, as both ways of determining the current year are equivalent.",FT
How many discontinued products are still in stock?,"SELECT ProductID, UnitsInStock FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;","```sql
SELECT COUNT(*) AS DiscontinuedProductsInStock
FROM products
WHERE Discontinued = 1 AND UnitsInStock > 0;
```","Both queries target discontinued products that are still in stock. The generated query counts these products, aligning with the user's request for 'how many' such products there are.",SELECT COUNT(*) FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;,"Both queries check for discontinued products that have units in stock. The generated query counts them, which answers the user's question about 'how many'.",both
List products with no units on order but have sales in the last month.,"SELECT ProductName FROM products WHERE UnitsOnOrder = 0 AND ProductID IN (SELECT DISTINCT od.ProductID FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH));","```sql
SELECT p.ProductID, p.ProductName
FROM products p
INNER JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE p.UnitsOnOrder = 0
AND od.OrderID IN (
    SELECT OrderID
    FROM [Order Details]
    WHERE OrderDate >= DATEADD(month, -1, GETDATE())
)
GROUP BY p.ProductID, p.ProductName;
```","The generated query checks the order date condition within 'Order Details' rather than joining with the 'orders' table to filter based on the 'OrderDate,' missing sales records verification.","SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.UnitsOnOrder = 0 AND od.OrderID IN (SELECT OrderID FROM orders WHERE DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) < OrderDate) GROUP BY p.ProductName;","Both queries aim to fetch products with no units on order and sales in the last month. The Generated SQL joins with Order Details and filters by Orders with dates within the last month, while the Ground Truth filters directly with a subquery. Both achieve the same logical outcome.",FT
What products have been ordered most frequently?,"SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC;","```sql
SELECT OrderDetails.ProductID, SUM(OrderDetails.Quantity) AS TotalQuantity
FROM [Order Details] AS OrderDetails
GROUP BY OrderDetails.ProductID
ORDER BY TotalQuantity DESC;
```","The generated SQL query produces the same result as the ground truth query, as both queries aggregate the total quantity of products ordered and sort them in descending order of total quantity.","SELECT od.ProductID, COUNT(od.ProductID) AS Frequency FROM [Order Details] od GROUP BY od.ProductID ORDER BY Frequency DESC;","The generated query counts the number of orders per product, while the ground truth query sums the quantities ordered for each product. These evaluate frequency differently.",Base
What is the average shipping cost per order in the last year?,"SELECT AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE()","```sql
SELECT AVG(orders.Freight) AS shipping_cost_per_order 
FROM orders 
WHERE orders.OrderDate BETWEEN '2022-10-01' AND '2023-10-01'
```","The generated query uses fixed dates, whereas the ground truth query dynamically calculates the date range using the current date. As a result, they may yield different results depending on when they are executed.",SELECT AVG(orders.Freight) AS shipping_cost_per_order FROM orders WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1;,"The generated SQL query selects orders from the entire previous year by checking the year part of the date, while the ground truth query includes only the past year from today’s date, potentially covering part of two different calendar years depending on the current date.",None
What is the average shipping cost per order over the last month?,"SELECT AVG(Freight) FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month';","```sql
SELECT AVG(Freight) AS AverageShippingCost
FROM orders
WHERE OrderDate >= DATEADD(MONTH, -1, GETDATE());
```","The generated SQL uses GETDATE() and DATEADD which may not correctly capture the start of the last month, while the ground truth uses DATE_TRUNC to accurately calculate the last month.","SELECT AVG(Freight) FROM orders WHERE OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE);","The generated query includes orders from one month ago to today's date, while the ground truth query includes orders from the entire previous month.",None
List the top 5 employees with the highest sales growth over the last year.,"SELECT e.EmployeeID, e.FirstName, e.LastName, (SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) AS SalesGrowth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY SalesGrowth DESC LIMIT 5;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, 
       SUM(CASE WHEN o.OrderDate >= DATEADD(year, -1, GETDATE()) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) AS LastYearSales,
       SUM(CASE WHEN o.OrderDate < DATEADD(year, -1, GETDATE()) AND o.OrderDate >= DATEADD(year, -2, GETDATE()) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) AS PreviousYearSales,
       (SUM(CASE WHEN o.OrderDate >= DATEADD(year, -1, GETDATE()) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - 
        SUM(CASE WHEN o.OrderDate < DATEADD(year, -1, GETDATE()) AND o.OrderDate >= DATEADD(year, -2, GETDATE()) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) AS SalesGrowth
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= DATEADD(year, -2, GETDATE())
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY SalesGrowth DESC
LIMIT 5;
```","The generated SQL uses DATEADD and GETDATE to filter by the last two years based on the current date, whereas the ground truth uses YEAR(CURRENT_DATE) to compare entire calendar years. This difference can result in different results if the queries are run before the year ends.","SELECT E.EmployeeID, (SUM(CASE WHEN YEAR(O.OrderDate) = CURRENT_YEAR - 1 THEN OD.UnitPrice * OD.Quantity * (1 - OD.Discount) ELSE 0 END) - SUM(CASE WHEN YEAR(O.OrderDate) = CURRENT_YEAR - 2 THEN OD.UnitPrice * OD.Quantity * (1 - OD.Discount) ELSE 0 END)) / NULLIF(SUM(CASE WHEN YEAR(O.OrderDate) = CURRENT_YEAR - 2 THEN OD.UnitPrice * OD.Quantity * (1 - OD.Discount) ELSE 0 END), 0) * 100 AS SalesGrowth FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE O.OrderDate >= DATEADD(YEAR, -2, CURRENT_DATE) GROUP BY E.EmployeeID ORDER BY SalesGrowth DESC LIMIT 5;","The generated query calculates sales growth as a percentage increase from two years ago to last year, while the ground truth calculates the absolute difference between this year and last year's sales. They also treat the years differently, with different year references.",None
What is the total inventory value for each category?,"SELECT CategoryID, SUM(UnitPrice * UnitsInStock) AS InventoryValue FROM products GROUP BY CategoryID;","```sql
SELECT p.CategoryID, SUM(p.UnitsInStock * p.UnitPrice) AS TotalInventoryValue
FROM products p
GROUP BY p.CategoryID;
```",Both queries calculate the total inventory value for each category by multiplying UnitPrice and UnitsInStock and grouping by CategoryID. The column alias differs but doesn't affect the result.,"SELECT c.CategoryID, SUM(p.UnitPrice * p.UnitsInStock) AS TotalInventoryValue FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;","Both queries calculate the total inventory value for each category by summing the product of UnitPrice and UnitsInStock, grouped by CategoryID. The JOIN in the generated query is unnecessary but does not affect the result.",both
What are the total sales by supplier and month?,"SELECT SupplierID, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) AS MonthlySales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY SupplierID, Month;","```sql
SELECT p.SupplierID, 
       DATE_TRUNC('month', o.OrderDate) AS SaleMonth,
       SUM(od.Quantity * od.UnitPrice) AS TotalSales
FROM [Order Details] od
JOIN products p ON od.ProductID = p.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY p.SupplierID, SaleMonth
ORDER BY p.SupplierID, SaleMonth;
```","The generated query groups by month using DATE_TRUNC which includes the year, while the ground truth query uses EXTRACT(MONTH) which does not account for the year within grouping. This could lead to different grouping results.","SELECT s.SupplierName, MONTH(o.OrderDate) AS SalesMonth, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierName, MONTH(o.OrderDate);","The generated query groups by SupplierName while the ground truth groups by SupplierID. Additionally, the generated query uses a different method to extract the month and includes the supplier’s name instead of ID.",None
Determine the average discount offered on the products from each supplier.,"SELECT p.SupplierID, AVG(od.Discount) AS AvgDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;","```sql
SELECT suppliers.SupplierID, AVG([Order Details].Discount) AS AverageDiscount
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY suppliers.SupplierID;
```","Both queries calculate the average discount for products from each supplier by joining 'Order Details' and 'products'. They group results by supplier, though table aliases differ.","SELECT suppliers.CompanyName, AVG([Order Details].Discount) AS AvgDiscount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName","Both queries calculate the average discount for each supplier, though the columns used to identify the supplier differ (CompanyName vs. SupplierID). The results will match if CompanyName is not required specifically.",both
What is the average order fulfillment time per month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(day, OrderDate, ShippedDate)) AS AverageFulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month;","```sql
SELECT 
    EXTRACT(YEAR FROM orders.OrderDate) AS Year,
    EXTRACT(MONTH FROM orders.OrderDate) AS Month,
    AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS Average_Fulfillment_Time
FROM 
    orders
GROUP BY 
    Year, Month
ORDER BY 
    Year, Month;
```","The generated SQL query does not filter out rows where ShippedDate is NULL, while the ground truth query does.","SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(day, OrderDate, ShippedDate)) AS AverageFulfillmentTime FROM orders GROUP BY Month;","The generated SQL query does not account for records where ShippedDate is NULL, which can affect the average calculation.",None
Analyze the sales trend for products over the last quarter.,"SELECT EXTRACT(MONTH FROM OrderDate) AS Month, SUM(Quantity * UnitPrice) AS TotalSales FROM [Order Details] WHERE OrderDate >= DATEADD(MONTH, -3, CURRENT_DATE) GROUP BY EXTRACT(MONTH FROM OrderDate);","```sql
SELECT 
    p.ProductID,
    p.ProductName,
    SUM(od.Quantity) AS TotalSales,
    MONTH(o.OrderDate) AS SalesMonth
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
JOIN 
    orders o ON od.OrderID = o.OrderID
WHERE 
    o.OrderDate >= DATEADD(MONTH, -3, GETDATE())
GROUP BY 
    p.ProductID, p.ProductName, MONTH(o.OrderDate)
ORDER BY 
    SalesMonth, TotalSales DESC;
```","The generated query groups by individual products and includes product-specific sales, whereas the ground truth query aggregates total sales across all products by month.","SELECT ProductID, SUM(Quantity) AS TotalQuantity, SUM(Quantity * UnitPrice) AS TotalSales FROM [Order Details] WHERE OrderDate BETWEEN DATEADD(quarter, -1, CURRENT_DATE) AND CURRENT_DATE GROUP BY ProductID ORDER BY TotalSales DESC","The generated query focuses on total sales per product and ranks by total sales, while the ground truth query analyzes sales by month without product breakdown.",None
Calculate the total number of orders for each shipping country.,"SELECT ShipCountry, COUNT(*) AS NumberOfOrders FROM orders GROUP BY ShipCountry;","```sql
SELECT ShipCountry, COUNT(OrderID) AS TotalOrders
FROM orders
GROUP BY ShipCountry;
```","Both queries group by ShipCountry and count the number of orders, which will yield the same result.","SELECT ShipCountry, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipCountry;","Both queries calculate the total number of orders for each shipping country using GROUP BY ShipCountry and an aggregate COUNT function, differing only in column alias names.",both
Identify customers who have placed more than 10 orders.,"SELECT CustomerID, COUNT(OrderID) AS order_count FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 10;","```sql
SELECT CustomerID
FROM orders
GROUP BY CustomerID
HAVING COUNT(OrderID) > 10;
```","Both queries identify customers who have placed more than 10 orders, differing only in the inclusion of the 'order_count' in the SELECT clause of the ground truth query. The condition and logic remain the same, thus yielding the same customers.","```sql
SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID HAVING OrderCount > 10;
```",Both queries count the orders per customer and filter those with more than 10 orders. The alias for the count does not affect the query's correctness.,both
What is the distribution of employee hire dates by year?,"SELECT YEAR(HireDate) AS HireYear, COUNT(EmployeeID) AS HireCount FROM employees GROUP BY YEAR(HireDate);","```sql
SELECT YEAR(HireDate) AS HireYear, COUNT(*) AS EmployeeCount
FROM employees
GROUP BY HireYear
ORDER BY HireYear;
```","Both queries group by the year of hire dates and count the number of employees, differing only in the naming of the count column, which does not affect the result.","SELECT YEAR(HireDate) AS Year, COUNT(*) AS HireCount FROM employees GROUP BY YEAR(HireDate);","Both queries group by the year of the hire date and count the number of employees, effectively answering the user's question about the distribution of hire dates by year. The difference in alias naming does not affect the result.",both
Which products have more units on order than units currently in stock?,SELECT ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;,"```sql
SELECT ProductID, ProductName, UnitsInStock, UnitsOnOrder
FROM products
WHERE UnitsOnOrder > UnitsInStock;
```","Both queries correctly identify products with more units on order than in stock, though the generated query selects additional columns.",SELECT ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;,"Both queries check for products where UnitsOnOrder is greater than UnitsInStock and return the ProductName, thus providing the same results.",both
Identify the most common shipping method used by each employee.,"SELECT e.EmployeeID, e.FirstName, e.LastName, o.ShipVia, COUNT(o.OrderID) as ShipMethodCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, o.ShipVia ORDER BY ShipMethodCount DESC;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, o.ShipVia, COUNT(o.ShipVia) AS MethodCount
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID, o.ShipVia
HAVING MethodCount = (
    SELECT MAX(MethodCount)
    FROM (
        SELECT o.ShipVia, COUNT(o.ShipVia) AS MethodCount
        FROM orders o
        WHERE o.EmployeeID = e.EmployeeID
        GROUP BY o.ShipVia
    ) AS MethodCounts
)
ORDER BY e.EmployeeID;
```","The generated query uses a 'HAVING' clause to filter the most common method per employee, which the ground truth does not do. The ground truth simply aggregates and orders by ShipMethodCount without selecting the most common method explicitly.","```sql
SELECT e.EmployeeID, o.ShipVia, COUNT(o.OrderID) AS ShippingMethodCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, o.ShipVia HAVING ShippingMethodCount = (SELECT MAX(ShippingCounts.ShippingMethodCount) FROM (SELECT ShipVia, COUNT(OrderID) AS ShippingMethodCount FROM orders GROUP BY ShipVia) AS ShippingCounts) 
```","The generated query is attempting to find the most common shipping method by using a HAVING clause with a subquery that checks for maximum ShippingMethodCount across all ship methods, which is incorrect. The ground truth query simply counts and orders by ShipMethodCount, providing a list of counts for each employee without limiting to the most common shipping method.",None
Identify the top 5 best-selling products last quarter.,"SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity_sold FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND CURRENT_DATE GROUP BY products.ProductID ORDER BY total_quantity_sold DESC LIMIT 5","```sql
SELECT products.ProductID, SUM([Order Details].Quantity) AS total_sold
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
JOIN products ON [Order Details].ProductID = products.ProductID
WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30'
GROUP BY products.ProductID
ORDER BY total_sold DESC
LIMIT 5;
```","The queries differ in date range specification. The generated query uses a fixed date range (last quarter), while the ground truth query uses dynamic dates based on the current date. They may not yield the same results if run at different times.","```sql
SELECT products.ProductID, SUM([Order Details].Quantity) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate > DATE_TRUNC('QUARTER', CURRENT_DATE) - INTERVAL '3 MONTH' AND orders.OrderDate < DATE_TRUNC('QUARTER', CURRENT_DATE) GROUP BY products.ProductID ORDER BY total_sales DESC LIMIT 5
```","The generated query filters by ordering date within the last quarter using DATE_TRUNC with 'QUARTER' but lacks precision on starting and ending boundaries. It captures part of the current quarter inadvertently. The ground truth correctly uses a 3-month interval ensuring it captures the full preceding quarter, but its date calculation logic seems incomplete for a strict last quarter boundary.",None
What is the breakdown of total sales by shipment countries?,"SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.ShipCountry","```sql
SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales 
FROM orders 
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID 
GROUP BY orders.ShipCountry
```",Both queries perform the same operations: joining the orders table with the Order Details table and computing the total sales grouped by ShipCountry. The order of table references does not affect the result.,"SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ShipCountry",Both queries aggregate the total sales by shipment countries using `SUM` and `GROUP BY`. 'ShipCountry' and 'orders.ShipCountry' refer to the same column in the result set of the `JOIN`.,both
How many orders were placed by customers in the United States?,SELECT COUNT(o.OrderID) AS USOrders FROM orders o JOIN customers c ON o.CustomerID = c.CustomerID WHERE c.Country = 'USA';,"```sql
SELECT COUNT(*) AS TotalOrders
FROM orders
WHERE CustomerID IN (
    SELECT CustomerID
    FROM customers
    WHERE Country = 'USA'
);
```",Both queries correctly count the number of orders placed by customers in the USA by filtering customers from the USA and counting their orders. The approaches are different but yield the same result.,SELECT COUNT(*) AS NumOrders FROM orders o JOIN customers c ON o.CustomerID = c.CustomerID WHERE c.Country = 'United States';,The generated query checks for 'United States' while the ground truth checks for 'USA'. They may not yield the same results unless the data uses both terms interchangeably.,Base
What is the total sales revenue by country?,"SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipCountry;","```sql
SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY orders.ShipCountry;
```","The generated SQL query correctly calculates the total sales revenue by country by joining the orders and order details tables on OrderID, then grouping by ShipCountry. Both queries are functionally equivalent despite formatting differences.","SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipCountry;",The generated SQL query matches the ground truth query exactly and accurately answers the user's question by calculating total sales revenue by country.,both
What is the total number of orders that have not been shipped?,SELECT COUNT(o.OrderID) AS UnshippedOrders FROM orders o WHERE o.ShippedDate IS NULL;,"```sql
SELECT COUNT(OrderID) 
FROM orders 
WHERE ShippedDate IS NULL;
```","Both queries count the number of orders where the ShippedDate is NULL, providing the total number of unshipped orders.",SELECT COUNT(*) AS UnshippedOrders FROM orders WHERE ShippedDate IS NULL;,"Both queries count the number of orders where the ShippedDate is NULL, thus providing the same result.",both
What is the product with the highest unit price currently in stock?,"SELECT ProductID, ProductName, UnitPrice FROM products WHERE UnitsInStock > 0 ORDER BY UnitPrice DESC LIMIT 1;","```sql
SELECT ProductName, UnitPrice 
FROM products 
WHERE UnitsInStock > 0 
ORDER BY UnitPrice DESC 
LIMIT 1;
```","The generated query does not select 'ProductID', which is included in the ground truth query.","SELECT ProductName, UnitPrice FROM products WHERE UnitsInStock > 0 ORDER BY UnitPrice DESC LIMIT 1;","The generated query does not select ProductID, which might be relevant if additional identification is needed. However, the main logic of finding the product with the highest unit price in stock is correct.",None
Identify the top 3 employees with the fastest average fulfillment time.,"SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL GROUP BY EmployeeID ORDER BY AvgFulfillmentTime ASC LIMIT 3;","```sql
SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY EmployeeID
ORDER BY AverageFulfillmentTime ASC
LIMIT 3;
```","The generated query does not filter out records where ShippedDate is NULL, which could affect the average calculation and result.","SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EmployeeID ORDER BY AvgFulfillmentTime LIMIT 3;","The generated SQL query does not filter out records where ShippedDate is NULL, which could affect the average fulfillment time calculation.",None
What is the percentage of orders delivered on or before the required date each month?,"SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID)) AS OnTimeDeliveryRate FROM orders GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    (COUNT(OrderID WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID)) AS On_time_Delivery_Rate
FROM 
    orders
GROUP BY 
    Month
```","The generated query uses DATE_FORMAT which is not ANSI standard, and it incorrectly places the WHERE clause inside the COUNT function, which is not valid. Instead, it should use a CASE statement like the ground truth query.","SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*)) AS OnTimeDeliveryRate FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');","Both queries calculate the percentage of orders delivered on or before the required date each month. They use different methods to group dates by month, but both achieve the same result.",FT
Which region has the highest average order value?,"SELECT Region, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Region ORDER BY AverageOrderValue DESC LIMIT 1;","```sql
SELECT customers.Region, AVG(OrderDetails.UnitPrice * OrderDetails.Quantity * (1 - OrderDetails.Discount)) AS AverageOrderValue
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] AS OrderDetails ON orders.OrderID = OrderDetails.OrderID
GROUP BY customers.Region
ORDER BY AverageOrderValue DESC
LIMIT 1;
```","Both queries calculate the average order value for each region by joining the same tables and using the same formula. The difference in table aliasing does not affect the result, and both order by highest average to return the top region.","SELECT Region, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue FROM orders INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Region ORDER BY AvgOrderValue DESC LIMIT 1;","The generated query does not join the 'customers' table, which means it may miss mapping 'Region' to 'CustomerID', resulting in potential inaccuracies compared to the ground truth query.",Base
List all products that have never been included in any order.,SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"```sql
SELECT p.ProductID, p.ProductName
FROM products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.OrderID IS NULL;
```",Both queries retrieve products not included in any order by checking for absence of ProductID in [Order Details].,"SELECT p.ProductID, p.ProductName FROM products p WHERE NOT EXISTS (SELECT 1 FROM [Order Details] od WHERE p.ProductID = od.ProductID);",Both queries correctly identify products never included in any order. The methods differ but yield the same results: products with no matching ProductID in 'Order Details'.,both
How does the product performance vary month by month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, ProductID, SUM(Quantity) AS TotalPerformance FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY Month, ProductID;","```sql
SELECT 
    MONTH(OrderDetails.OrderDate) AS Month,
    products.ProductID,
    products.ProductName,
    SUM(OrderDetails.Quantity) AS TotalQuantitySold
FROM 
    products
JOIN 
    [Order Details] AS OrderDetails ON products.ProductID = OrderDetails.ProductID
JOIN 
    orders ON OrderDetails.OrderID = orders.OrderID
GROUP BY 
    MONTH(OrderDetails.OrderDate),
    products.ProductID,
    products.ProductName
ORDER BY 
    Month, 
    products.ProductID;
```","The generated query includes product names and uses MONTH function for grouping, whereas the ground truth query uses DATE_TRUNC and only includes ProductID without joining the products table or using product names.","SELECT DATE_TRUNC('month', OrderDate) AS Month, p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY Month, p.ProductID, p.ProductName ORDER BY Month, p.ProductID;","The generated query includes additional joins with the products table and selects ProductName, which is not present in the ground truth query. The ground truth query focuses only on ProductID and total performance without product details.",None
What is the total sales revenue generated for each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Total_Sales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY Month
ORDER BY Month;
```","Both queries calculate total sales revenue per month using similar aggregation logic. The only difference is the method of date formatting, which doesn't affect the result.","SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_TRUNC('month', orders.OrderDate);","Both queries compute the total sales revenue for each month by summing the revenue from 'Order Details' joined with 'orders', grouped by the truncated month date.",both
What is the most popular product in terms of quantity sold in 2023?,"SELECT products.ProductName, SUM([Order Details].Quantity) AS total_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductName ORDER BY total_sold DESC LIMIT 1","```sql
SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity_sold 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' 
GROUP BY products.ProductID 
ORDER BY total_quantity_sold DESC 
LIMIT 1;
```",The generated query returns ProductID and not ProductName as in the ground truth query. They yield different information though they group by the same criteria and apply the correct filters.,"SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID ORDER BY total_quantity DESC LIMIT 1","The generated SQL query selects ProductID, while the ground truth query selects ProductName. Even though both aim to find the most popular product by quantity, the output will differ due to the fields selected.",None
Which shipping method is most frequently used for orders in 2023?,"SELECT ShipVia, COUNT(OrderID) AS shipping_count FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY ShipVia ORDER BY shipping_count DESC","```sql
SELECT ShipVia, COUNT(OrderID) AS frequency 
FROM orders 
WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31' 
GROUP BY ShipVia 
ORDER BY frequency DESC 
LIMIT 1;
```","The generated SQL query correctly identifies the most frequently used shipping method in 2023 by counting orders and ordering by frequency in descending order, using LIMIT 1 to find the top result.","SELECT orders.ShipVia, COUNT(orders.OrderID) AS order_count FROM orders WHERE YEAR(orders.OrderDate) = 2023 GROUP BY orders.ShipVia ORDER BY order_count DESC LIMIT 1","Both queries count the number of orders per shipping method for 2023 and sort them in descending order to find the most frequent one. Although the date filtering methods differ, they yield the same results.",both
Determine the number of orders processed by each employee by year.,"SELECT employees.EmployeeID, YEAR(orders.OrderDate) AS OrderYear, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, YEAR(orders.OrderDate);","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, YEAR(o.OrderDate) AS OrderYear, COUNT(o.OrderID) AS NumberOfOrders
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID, OrderYear
ORDER BY e.EmployeeID, OrderYear;
```","Both queries correctly calculate the number of orders processed by each employee for each year. They group by employee and year and count the orders, which fulfills the user's request. The extra columns in the generated query do not affect the correctness of the result.","SELECT e.EmployeeID, YEAR(o.OrderDate) AS Year, COUNT(o.OrderID) AS NumberOfOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, YEAR(o.OrderDate);","Both queries calculate the number of orders processed by each employee for each year. They select the employee ID, the year derived from the order date, and count the orders, grouping by employee ID and year.",both
Identify the employee responsible for orders with the highest freight costs.,"SELECT e.EmployeeID, e.FirstName, e.LastName, o.OrderID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.Freight = (SELECT MAX(Freight) FROM orders)","```sql
SELECT e.FirstName, e.LastName, o.EmployeeID, MAX(o.Freight) AS HighestFreight
FROM orders o
JOIN employees e ON o.EmployeeID = e.EmployeeID
GROUP BY o.EmployeeID
ORDER BY HighestFreight DESC
LIMIT 1;
```","The generated query returns the employee who handled the order with the highest aggregated freight cost by grouping, which is incorrect. The ground truth query directly retrieves the employee of the order with the maximum freight value.","SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY TotalFreight DESC LIMIT 1;","The generated query identifies the employee with the highest total freight, whereas the ground truth query identifies the employee responsible for the order with the highest individual freight cost.",None
Which product had the best performance in terms of quantity sold for the month of June 2023?,"SELECT products.ProductID, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = 6 AND YEAR(orders.OrderDate) = 2023 GROUP BY products.ProductID ORDER BY product_performance DESC LIMIT 1","```sql
SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity_sold 
FROM [Order Details] 
JOIN products ON [Order Details].ProductID = products.ProductID 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-06-01' AND '2023-06-30' 
GROUP BY products.ProductID 
ORDER BY total_quantity_sold DESC 
LIMIT 1;
```","Both SQL queries aim to identify the product with the highest quantity sold in June 2023. They each aggregate the quantities by product and order by the total quantity in descending order, limiting the result to the top product. The only difference is in date filtering: the generated query uses a BETWEEN clause, while the ground truth query uses separate MONTH and YEAR functions. However, both correctly filter for June 2023.","SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-06-01' AND '2023-06-30' GROUP BY products.ProductID ORDER BY total_quantity_sold DESC LIMIT 1;","Both queries select the product with the highest quantity sold in June 2023, using similar logic to filter dates and aggregate quantities.",both
What is the average shipping cost per country?,"SELECT ShipCountry, AVG(Freight) AS AverageCost FROM orders GROUP BY ShipCountry;","```sql
SELECT ShipCountry, AVG(Freight) AS AverageShippingCost
FROM orders
GROUP BY ShipCountry;
```","Both queries calculate the average freight cost per shipping country, differing only in the alias name used for the average cost.","SELECT ShipCountry, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipCountry;","The generated SQL query and the ground truth query will yield the same results, calculating the average freight per shipping country. The only difference is the alias used for the AVG column.",both
What is the total number of products shipped in the last month?,"SELECT SUM([Order Details].Quantity) FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.ShippedDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE();","```sql
SELECT SUM([Order Details].Quantity) AS TotalProductsShipped
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE orders.ShippedDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);
```","The generated SQL query checks for dates greater than or equal to one month ago, not from exactly one month ago to the current date like the ground truth query.","SELECT SUM(od.Quantity) AS TotalProductsShipped FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate > DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);","The generated SQL query filters based on OrderDate, whereas the ground truth query filters using ShippedDate. This could lead to different results if there are orders placed but not shipped within the last month.",None
What is the busiest shipping month based on total orders shipped?,"SELECT DATE_TRUNC('month', ShippedDate) AS Month, COUNT(OrderID) AS TotalOrders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month ORDER BY TotalOrders DESC LIMIT 1;","```sql
SELECT EXTRACT(YEAR FROM OrderDate) AS ShippingYear, EXTRACT(MONTH FROM OrderDate) AS ShippingMonth, COUNT(OrderID) AS TotalOrders
FROM orders
WHERE ShippedDate IS NOT NULL
GROUP BY ShippingYear, ShippingMonth
ORDER BY TotalOrders DESC
LIMIT 1;
```","The generated SQL query incorrectly uses OrderDate instead of ShippedDate for grouping, which may yield different results.","SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY Year, Month ORDER BY TotalOrders DESC LIMIT 1;","The generated query calculates the busiest month based on OrderDate, while the ground truth query uses ShippedDate and excludes null values.",None
Which employees have shipped orders late and by how many days on average?,"SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(DATEDIFF(o.ShippedDate, o.RequiredDate)) AS AvgLateDays FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate > o.RequiredDate GROUP BY e.EmployeeID, e.FirstName, e.LastName;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(DATEDIFF(o.ShippedDate, o.RequiredDate)) AS AverageLateDays
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.ShippedDate > o.RequiredDate
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","The generated query and the ground truth query are equivalent. They both calculate the average number of days that employees shipped orders late, based on the condition that ShippedDate is greater than RequiredDate. The only difference is the alias for the average column, which does not affect the result.","SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.RequiredDate)) AS AverageLateDays
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.ShippedDate > o.RequiredDate
GROUP BY e.EmployeeID;","Both queries calculate the average number of days orders are shipped late per employee. The Generated SQL does not include the employee's first and last name, but it still answers the user's question by employee ID, which is sufficient for identifying employees.",both
Find suppliers with a homepage listed in the suppliers table.,SELECT CompanyName FROM suppliers WHERE HomePage IS NOT NULL;,"```sql
SELECT * FROM suppliers WHERE HomePage IS NOT NULL AND HomePage <> '';
```","The generated query returns all columns, while the ground truth query returns only the CompanyName column.",SELECT CompanyName FROM suppliers WHERE HomePage IS NOT NULL AND HomePage != '';,"Both queries are functionally equivalent. The first query checks for non-null and non-empty strings, while the second checks for non-null values. If HomePage is not null, the empty string condition is usually irrelevant within most database contexts.",FT
Which customers have generated the most revenue lifetime?,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC","```sql
SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN customers ON orders.CustomerID = customers.CustomerID 
GROUP BY customers.CustomerID 
ORDER BY customer_lifetime_value DESC;
```","The two SQL queries are functionally the same, both correctly calculate the lifetime revenue for each customer and order the results in descending order.","SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY lifetime_revenue DESC","The generated SQL query and the ground truth query both calculate the total lifetime revenue by customer using the same logic, operations, and ordering. The naming of the resulting column differs, but the output values are the same.",both
What is the most popular shipping destination city?,"SELECT o.ShipCity, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipCity ORDER BY OrderCount DESC LIMIT 1","```sql
SELECT ShipCity, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY ShipCity
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries count orders per city and return the city with the highest order count. The only difference is the use of table aliasing, which does not affect the result.","SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1;","Both queries select the shipping city with the highest order count and apply the same grouping, ordering, and limit operations.",both
Which employee handled the most orders?,"SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries count the number of orders handled by each employee, sort by the highest count, and limit the result to the top employee.","SELECT EmployeeID, COUNT(OrderID) AS OrdersHandled FROM orders GROUP BY EmployeeID ORDER BY OrdersHandled DESC LIMIT 1;","Both queries select the EmployeeID with the highest count of OrderID, grouped by EmployeeID, ordered in descending order, and limited to one result. The difference in alias names does not affect the equivalency of the results.",both
Calculate the total freight cost for orders shipped by each method.,"SELECT o.ShipVia, SUM(o.Freight) AS TotalFreightCost FROM orders o GROUP BY o.ShipVia;","```sql
SELECT ShipVia, SUM(Freight) AS TotalFreight
FROM orders
GROUP BY ShipVia;
```",Both queries calculate the total freight cost for orders grouped by the shipping method (ShipVia) and produce the same results.,"SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;","Both queries calculate the sum of the Freight column for each ShipVia grouping, producing the same result.",both
Which customers have the highest retention rate over the past six months?,"SELECT c.CustomerID, COUNT(DISTINCT o.OrderID) * 100.0 / (SELECT COUNT(DISTINCT o2.OrderID) FROM orders o2 WHERE o2.CustomerID = c.CustomerID AND o2.OrderDate < DATEADD(month, -6, CURRENT_DATE)) AS RetentionRate FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate >= DATEADD(month, -6, CURRENT_DATE) GROUP BY c.CustomerID ORDER BY RetentionRate DESC","```sql
SELECT customers.CustomerID, customers.CompanyName, 
       COUNT(DISTINCT orders.OrderID) AS RetentionCount 
FROM customers 
JOIN orders ON customers.CustomerID = orders.CustomerID 
WHERE orders.OrderDate BETWEEN DATEADD(month, -6, GETDATE()) AND GETDATE() 
GROUP BY customers.CustomerID, customers.CompanyName 
HAVING COUNT(DISTINCT orders.OrderID) > 0 
ORDER BY RetentionCount DESC;
```","The generated query counts orders in the last six months without calculating a retention rate, while the ground truth calculates it as a percentage of prior orders.","SELECT CustomerID, COUNT(OrderID) / COUNT(DISTINCT CASE WHEN OrderDate BETWEEN NOW() - INTERVAL '6 months' AND NOW() THEN OrderID END) AS RetentionRate FROM orders WHERE OrderDate < NOW() GROUP BY CustomerID ORDER BY RetentionRate DESC;","The generated SQL query calculates retention rate by dividing the total number of orders by those within the last six months. The ground truth query calculates retention rate only for orders within the last six months, dividing by the total unique orders prior to that period, multiplied by 100. Thus, the approach and period interpretations differ.",None
How many products have more units on order than in stock?,SELECT COUNT(*) AS NumberOfProducts FROM products WHERE UnitsOnOrder > UnitsInStock;,"```sql
SELECT COUNT(*) AS ProductsWithMoreUnitsOnOrder
FROM products
WHERE UnitsOnOrder > UnitsInStock;
```",Both queries count the products where UnitsOnOrder is greater than UnitsInStock. The difference is only in the alias name.,SELECT COUNT(ProductID) AS NumProducts FROM products WHERE UnitsOnOrder > UnitsInStock;,Both queries count the number of products where UnitsOnOrder is greater than UnitsInStock. The difference in column alias and usage of COUNT(ProductID) versus COUNT(*) does not affect the count result.,both
What is the average freight cost for orders shipped to 'USA'?,SELECT AVG(Freight) FROM orders WHERE ShipCountry = 'USA';,"```sql
SELECT AVG(Freight) AS AverageFreightCost
FROM orders
WHERE ShipCountry = 'USA';
```",Both queries calculate the average freight cost for orders where the ShipCountry is 'USA'. The alias in the generated query does not affect the result.,SELECT AVG(Freight) AS AvgFreight FROM orders WHERE ShipCountry = 'USA';,"Both queries calculate the average freight for orders shipped to 'USA', and they are functionally equivalent even though the generated SQL query uses an alias.",both
What is the total sales revenue generated by each employee?,"SELECT o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID;","```sql
SELECT o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY o.EmployeeID;
```","The generated SQL query accurately answers the user's question and yields the same results as the ground truth query. Both queries calculate the total sales revenue by multiplying unit price, quantity, and applying the discount, then grouping by EmployeeID.","SELECT EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EmployeeID;","Both queries compute the total sales revenue for each employee by joining the 'orders' and '[Order Details]' tables, multiplying unit price, quantity, and applying the discount, then summing and grouping by EmployeeID. The difference in table aliases does not affect the results.",both
What is the total number of products sold this quarter?,"SELECT SUM([Order Details].Quantity) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE);","```sql
SELECT SUM([Order Details].Quantity) AS TotalProductsSold
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE orders.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) 
AND orders.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) + INTERVAL '3 months';
```","The generated query includes a date range that is more precise by checking both the start and end of the quarter, whereas the ground truth query only checks for dates from the start of the current quarter onwards. This difference in filtering can lead to different results if there are future dates in the data.",SELECT SUM(od.Quantity) AS TotalProductsSold FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate BETWEEN '2023-07-01' AND '2023-09-30';,"The generated query filters orders between specific dates, not aligned with the current quarter, whereas the ground truth query dynamically calculates the start of the current quarter using DATE_TRUNC.",None
Which products are ordered more after being marked as 'discontinued'?,SELECT p.ProductName FROM products p WHERE p.Discontinued = 1 AND p.ProductID IN (SELECT od.ProductID FROM [Order Details] od WHERE od.Quantity > 0) ORDER BY p.ProductID;,"```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalOrdered
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE p.Discontinued = 1
GROUP BY p.ProductID, p.ProductName
HAVING SUM(od.Quantity) > 0
ORDER BY TotalOrdered DESC;
```","The generated query calculates the total ordered quantity of discontinued products, whereas the ground truth checks for any orders of such products without calculating total quantities.","SELECT o.ProductID FROM [Order Details] o JOIN products p ON o.ProductID = p.ProductID WHERE p.Discontinued = 1 GROUP BY o.ProductID HAVING SUM(o.Quantity) > (SELECT COALESCE(SUM(Quantity), 0) FROM [Order Details] o2 WHERE o2.ProductID = o.ProductID AND o2.OrderID IN (SELECT OrderID FROM orders WHERE status = 'active'))","The generated SQL query calculates if the total quantity ordered after discontinuation is greater than during active status. The ground truth query checks for products marked as discontinued and ordered in positive quantities, ordered by ProductID. The logic and conditions differ significantly.",None
Which ship cities have the longest average order fulfillment times?,"SELECT ShipCity, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipCity ORDER BY AvgFulfillmentTime DESC;","```sql
SELECT ShipCity, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY ShipCity
ORDER BY AverageFulfillmentTime DESC;
```",Both queries calculate the average order fulfillment time for each ShipCity and order them in descending order.,"SELECT ShipCity, AVG(CAST(ShippedDate AS DATE) - CAST(OrderDate AS DATE)) AS AvgFulfillmentTime FROM orders GROUP BY ShipCity ORDER BY AvgFulfillmentTime DESC;","The generated SQL query uses CAST(... AS DATE) which may not be valid, whereas the ground truth uses DATEDIFF, which correctly calculates the difference in days between two dates.",Base
List all suppliers who have never had a discontinuation in their products.,"SELECT SupplierID, CompanyName FROM suppliers WHERE SupplierID NOT IN (SELECT DISTINCT SupplierID FROM products WHERE Discontinued = 1);","```sql
SELECT s.SupplierID, s.CompanyName
FROM suppliers s
LEFT JOIN products p ON s.SupplierID = p.SupplierID
GROUP BY s.SupplierID, s.CompanyName
HAVING SUM(p.Discontinued) = 0;
```","Both queries correctly identify suppliers who have never had a product marked as discontinued. The generated query uses a LEFT JOIN and HAVING clause to sum the discontinuation flags, ensuring the sum is zero, while the ground truth query uses a subquery to exclude suppliers with any discontinued products. Both yield the same result set.","SELECT s.SupplierID, s.CompanyName FROM suppliers s LEFT JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID, s.CompanyName HAVING COUNT(CASE WHEN p.Discontinued = 1 THEN 1 END) = 0;","Both queries accurately identify suppliers with no discontinued products. The generated query uses a LEFT JOIN and HAVING clause to filter suppliers, while the ground truth query uses a subquery with a NOT IN condition. Both achieve the same result.",both
What is the total discount amount for each customer?,"SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;","```sql
SELECT 
    customers.CustomerID, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount
FROM 
    customers
JOIN 
    orders ON customers.CustomerID = orders.CustomerID
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    customers.CustomerID;
```","Both queries perform a JOIN operation on the same tables using the same logic, and calculate the total discount for each customer, grouping by CustomerID. They are functionally equivalent.","SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;","The generated SQL query and the ground truth SQL query yield the same results as they both calculate the total discount for each customer by joining the customers, orders, and order details tables and summing the discounted amounts.",both
Which customer has made the most purchases?,"SELECT CustomerID, COUNT(OrderID) AS PurchaseCount FROM orders GROUP BY CustomerID ORDER BY PurchaseCount DESC LIMIT 1;","```sql
SELECT CustomerID, COUNT(OrderID) AS PurchaseCount
FROM orders
GROUP BY CustomerID
ORDER BY PurchaseCount DESC
LIMIT 1;
```","Both queries are identical except for formatting and yield the same result, identifying the customer with the most purchases.","SELECT customers.CustomerID, COUNT(orders.OrderID) AS NumberOfPurchases FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID ORDER BY NumberOfPurchases DESC LIMIT 1;","Both queries count the number of orders per customer and return the customer with the highest count. They use different joins or table selections, but achieve the same result.",both
Which supplier's products have the lowest average rating based on discounts given?,"SELECT products.SupplierID, AVG([Order Details].Discount) AS AverageDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.SupplierID ORDER BY AverageDiscount ASC LIMIT 1;","```sql
SELECT suppliers.CompanyName, AVG([Order Details].Discount) AS AverageDiscount
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY suppliers.CompanyName
ORDER BY AverageDiscount ASC
LIMIT 1;
```","The generated SQL query retrieves the supplier's company name, whereas the ground truth query retrieves the supplier's ID. Additionally, neither query directly addresses product ratings.","SELECT s.CompanyName, AVG(od.Discount) AS AverageDiscount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.CompanyName ORDER BY AverageDiscount ASC LIMIT 1;","The generated SQL query calculates the average discount grouped by supplier company name, but the user question asks for average product ratings, not discounts. The ground truth calculates the average discount per supplier, but neither query addresses product ratings.",None
Which employee handled the highest number of orders?,"SELECT EmployeeID, COUNT(OrderID) AS NumOrders FROM orders GROUP BY EmployeeID ORDER BY NumOrders DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries count orders per employee, sort in descending order, and limit to the top result, thus producing identical results.",SELECT employeeId FROM orders GROUP BY employeeId ORDER BY COUNT(orderId) DESC LIMIT 1;,"The generated query selects only the 'employeeId', while the ground truth query also includes the count of orders. The results might be semantically similar in terms of which employee handled the most orders, but they do not yield the same output structure.",Base
Get the top 3 cities with the highest number of suppliers.,"SELECT City, COUNT(SupplierID) AS NumSuppliers FROM suppliers GROUP BY City ORDER BY NumSuppliers DESC LIMIT 3;","```sql
SELECT City, COUNT(*) AS SupplierCount
FROM suppliers
GROUP BY City
ORDER BY SupplierCount DESC
LIMIT 3;
```","Both queries count suppliers per city, order by descending count, and limit to top 3. COUNT(*) and COUNT(SupplierID) give the same result since SupplierID is a non-nullable field and every row is counted.","SELECT s.City, COUNT(s.SupplierID) AS SupplierCount FROM suppliers s GROUP BY s.City ORDER BY SupplierCount DESC LIMIT 3;","Both queries select the city and count the number of suppliers, group the results by city, and order them in descending order by the count. Both use LIMIT 3 to get the top 3 cities. The syntax and aliases differ but yield the same result.",both
What is the retention rate of customers over the past year?,"SELECT (COUNT(DISTINCT CustomerID) WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31') / NULLIF(COUNT(DISTINCT CustomerID) WHERE OrderDate < '2022-01-01', 0) * 100 AS RetentionRate FROM orders;","```sql
SELECT 
    (COUNT(DISTINCT orders.CustomerID) 
     FILTER (WHERE orders.OrderDate BETWEEN DATEADD(year, -1, CURRENT_DATE) AND CURRENT_DATE) 
    )::decimal / 
    (COUNT(DISTINCT orders.CustomerID) 
     FILTER (WHERE orders.OrderDate < DATEADD(year, -1, CURRENT_DATE)))
    AS RetentionRate
FROM orders;
```","The generated query calculates the retention rate based on the current date, whereas the ground truth query uses fixed dates for 2022. Additionally, the calculation and handling of dividing by zero differ.","SELECT (COUNT(DISTINCT orders.CustomerID) FILTER (WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31')) / NULLIF(COUNT(DISTINCT orders.CustomerID) FILTER (WHERE orders.OrderDate < '2022-01-01'), 0) AS retention_rate FROM orders;","The generated query uses FILTER clause  which is specific to some SQL dialects and not standard ANSI SQL. Moreover, neither of the queries multiplies the ratio by 100 to express the retention rate as a percentage, which is present in the ground truth query.",None
In which month did the highest average freight cost occur?,"SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(Freight) AS AvgFreight FROM orders GROUP BY Year, Month ORDER BY AvgFreight DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AverageFreight
FROM orders
GROUP BY Month
ORDER BY AverageFreight DESC
LIMIT 1;
```","The generated query groups by formatted month string, while the ground truth extracts year and month separately, which can lead to different results if orders span multiple years.","SELECT TRUNC(EXTRACT(MONTH FROM OrderDate), 0) AS month, AVG(Freight) AS avg_freight FROM orders GROUP BY month ORDER BY avg_freight DESC LIMIT 1;","The generated query groups only by month across all years, whereas the ground truth query groups by both year and month, potentially considering monthly freight averages within each year separately.",None
Calculate the total revenue for each supplier.,"SELECT products.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID;","```sql
SELECT s.SupplierID, s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY s.SupplierID, s.CompanyName;
```","Both queries calculate the total revenue for each supplier by joining the relevant tables and summing the product of unit price, quantity, and discount. They both group by SupplierID.","```sql
SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY TotalRevenue DESC;
```","Both queries calculate the total revenue for each supplier by summing the product of UnitPrice, Quantity, and Discount from the Order Details table, grouped by SupplierID. They perform similar joins on suppliers, products, and order details, and use equivalent logic to compute TotalRevenue.",both
What is the average order value per employee?,"SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
```","Both queries calculate the average order value per employee using the same logic for aggregation and joins, despite the generated query selecting additional fields (FirstName, LastName) that don't affect the result.","SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID","The generated SQL query and the ground truth query are identical in structure and logic, therefore they yield the same results for the average order value per employee.",both
Calculate the total revenue per country.,"SELECT o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry;","```sql
SELECT c.Country, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.Country;
```",The queries group revenue by different columns: 'Country' in the generated query and 'ShipCountry' in the ground truth query. This will yield different results if customers and shipping countries do not align perfectly.,"SELECT ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY ShipCountry;",Both queries calculate the total revenue per country by joining the same tables on a common column and grouping by ShipCountry. The order of tables in the JOIN and the aliases used do not affect the result.,FT
Which month had the highest total sales and which employee contributed the most to it?,"SELECT SalesMonth, EmployeeID, TotalSales FROM (SELECT MONTH(o.OrderDate) AS SalesMonth, e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY SalesMonth, e.EmployeeID) AS MonthlySales ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT 
    DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month,
    e.FirstName,
    e.LastName,
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    orders o
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
JOIN 
    employees e ON o.EmployeeID = e.EmployeeID
GROUP BY 
    Month, o.EmployeeID
ORDER BY 
    Month, TotalSales DESC
LIMIT 1, 1;
```","The generated query incorrectly formats the date, doesn't aggregate correctly for the highest sales month, and uses an incorrect LIMIT clause. It attempts to fetch the second row instead of the top result.","SELECT YEAR(o.OrderDate) AS OrderYear, MONTH(o.OrderDate) AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, e.EmployeeID, CONCAT(e.FirstName, ' ', e.LastName) AS Employee FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY OrderYear, OrderMonth, e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","The generated SQL query includes year grouping, which could affect which month is identified with the highest sales if the dataset spans multiple years. The ground truth query does not separate by year, potentially yielding different results.",None
What is the total freight cost assigned to each employee?,"SELECT e.FirstName, e.LastName, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName;","```sql
SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM(orders.Freight) AS TotalFreight
FROM employees
LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID
GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName;
```","Both queries calculate the total freight cost per employee by summing the 'Freight' from the 'orders' table, joined with the 'employees' table on 'EmployeeID'. The difference in join type (LEFT JOIN in the generated query and JOIN in the ground truth) does not affect the result since 'Freight' is summed only for matching records. Thus, both queries provide the same result for this question.","SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;","Both queries calculate the total freight cost per employee, but they differ in the details selected. The generated query includes EmployeeID, while the ground truth includes FirstName and LastName. Both will yield the same total freight results grouped by employee.",both
Which regions have the highest average order value?,"SELECT ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipRegion","```sql
SELECT orders.ShipRegion, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY orders.ShipRegion
ORDER BY AverageOrderValue DESC;
```","Both queries calculate the average order value per region in the same manner, sorting is applied in the generated query but it doesn't affect the answer.","SELECT ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS RegionAOV FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipRegion ORDER BY RegionAOV DESC;","The generated SQL query orders the regions by average order value in descending order, which the ground truth query does not.",Base
Which supplier has the highest total sales for discontinued products?,"SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE products.Discontinued = TRUE GROUP BY suppliers.CompanyName ORDER BY total_sales DESC LIMIT 1","```sql
SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE products.Discontinued = 1
GROUP BY suppliers.SupplierID
ORDER BY total_sales DESC
LIMIT 1;
```","Both queries perform the same operations: they calculate the total sales for discontinued products and order the results to find the supplier with the highest sales. Differences in syntax, such as using 1 vs. TRUE for checking discontinuation or SupplierID vs. CompanyName in GROUP BY, do not affect the outcome as both queries will yield the same result: the supplier with the highest total sales.","SELECT suppliers.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE products.Discontinued = 1 GROUP BY suppliers.SupplierID ORDER BY total_sales DESC LIMIT 1;","The generated query selects SupplierID, while the ground truth selects CompanyName. This may yield the same underlying suppliers but displays different identifiers.",Base
Which customers have the highest lifetime value?,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY LifetimeValue DESC;","```sql
SELECT customers.CustomerID, customers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID, customers.CompanyName
ORDER BY LifetimeValue DESC;
```","The generated query includes 'customers.CompanyName' in the select and group by clause, which does not affect the calculation of LifetimeValue. Both queries accurately compute and order customers by highest lifetime value.","SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerLifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY CustomerLifetimeValue DESC LIMIT 10;","The generated query limits the result to 10 customers using 'LIMIT 10', whereas the ground truth query does not have this limit, potentially yielding different results.",Base
What is the average discount given on products in the last month?,"SELECT P.ProductName, AVG(OD.Discount) AS AverageDiscount FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID WHERE MONTH(OD.OrderID) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(OD.OrderID) = YEAR(CURDATE() - INTERVAL 1 MONTH) GROUP BY P.ProductName;","```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details]
WHERE OrderID IN (
    SELECT OrderID
    FROM Orders
    WHERE OrderDate >= DATEADD(month, -1, GETDATE())
);
```","The generated query calculates an average discount for all products without considering the specific product names and assumes the current date retrieval method. The ground truth query groups by products and uses a different date condition, which could lead to different results.","SELECT AVG([Order Details].Discount) AS AvgDiscount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= DATE_TRUNC('month', CURRENT_DATE - interval '1 month') AND orders.OrderDate < DATE_TRUNC('month', CURRENT_DATE);","The generated SQL query does not match the user's question in calculating the average discount for each product. It calculates the overall average discount for the last month, whereas the ground truth query provides individual average discounts by product.",None
Identify customers with the longest time since their last order.,"SELECT o.CustomerID, DATEDIFF(CURRENT_DATE, MAX(o.OrderDate)) AS DaysSinceLastOrder FROM orders o GROUP BY o.CustomerID ORDER BY DaysSinceLastOrder DESC LIMIT 1;","```sql
SELECT c.CustomerID, c.CompanyName, MAX(o.OrderDate) AS LastOrderDate
FROM customers c
LEFT JOIN orders o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerID, c.CompanyName
ORDER BY LastOrderDate ASC
```","The generated query orders customers by their last order date in ascending order but does not calculate the time since the last order. Also, it doesn't identify the customer with the longest time since last order as requested.","SELECT c.CustomerID, DATEDIFF(CURRENT_DATE, MAX(o.OrderDate)) AS DaysSinceLastOrder FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY DaysSinceLastOrder DESC;","The generated SQL query lists all customers ordered by longest time since last order, while the ground truth returns only the single customer with the longest time since last order.",None
What is the total number of products sold in the last quarter?,"SELECT SUM(od.Quantity) AS TotalProductsSold FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATEADD(quarter, -1, CURRENT_DATE);","```sql
SELECT SUM([Order Details].Quantity) AS TotalProductsSold
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE orders.OrderDate >= DATEADD(quarter, -1, GETDATE())
```","The generated SQL query uses GETDATE(), while the ground truth query uses CURRENT_DATE. This may yield different results depending on the date function precision (name differences typically due to SQL dialects). Also, 'quarter' calculation for 'last quarter' may require additional logic to correctly yield the previous full quarter and should be checked based on the DBMS.","SELECT SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od INNER JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate BETWEEN DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '3 months') AND DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 day';",The generated query uses DATE_TRUNC to get the start of the last quarter but incorrectly adjusts the end date. The ground truth uses DATEADD to correctly capture the entire last quarter.,None
How many orders were placed using each shipping method?,"SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY ShipVia;
```","Both queries count the number of orders for each shipping method, differing only in alias names used for the count of orders.","SELECT orders.ShipVia, COUNT(orders.OrderID) AS OrderCount FROM orders GROUP BY orders.ShipVia;","Both queries group the data by the 'ShipVia' column and count the number of 'OrderID' for each shipping method. Although the table aliases differ, the functionality and results are identical.",both
Determine which employee has the most shipments via the highest-cost freight method.,"SELECT o.EmployeeID, COUNT(o.OrderID) AS ShipmentCount FROM orders o WHERE o.Freight = (SELECT MAX(Freight) FROM orders) GROUP BY o.EmployeeID ORDER BY ShipmentCount DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS ShipmentCount
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.ShipVia = (SELECT ShipVia FROM orders ORDER BY Freight DESC LIMIT 1)
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY ShipmentCount DESC
LIMIT 1;
```","The generated query finds the employee with the most shipments using the method with the highest ShipVia, while the ground truth looks for the method with the highest Freight value directly.","SELECT o.EmployeeID, od.ShipVia, COUNT(o.OrderID) AS ShipmentCount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID, od.ShipVia HAVING od.ShipVia = (SELECT ShipVia FROM orders ORDER BY Freight DESC LIMIT 1) ORDER BY ShipmentCount DESC LIMIT 1;","The generated query uses 'ShipVia' to determine the highest-cost freight method, while the ground truth uses 'MAX(Freight)'. They apply different criteria to define the highest-cost method.",None
What is the most sold product in terms of quantity?,"SELECT ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY TotalQuantity DESC LIMIT 1;","```sql
SELECT ProductID, SUM(Quantity) AS TotalQuantity
FROM [Order Details]
GROUP BY ProductID
ORDER BY TotalQuantity DESC
LIMIT 1;
```","The generated query retrieves ProductID, while the ground truth retrieves ProductName, which better answers the user's question.","SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 1;","Both queries select the product name and sum up the quantities from a join between 'products' and 'Order Details', then group by product name and order by total quantity in descending order, limiting the result to one. Slight differences in table aliasing and syntax do not affect the outcome.",FT
What is the product performance ranking for the last month?,"SELECT p.ProductName, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE MONTH(od.OrderDate) = MONTH(CURRENT_DATE) - 1 AND YEAR(od.OrderDate) = YEAR(CURRENT_DATE) GROUP BY p.ProductID, p.ProductName ORDER BY TotalSales DESC;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantity
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE MONTH(od.OrderID) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) 
  AND YEAR(od.OrderID) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH)
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalQuantity DESC;
```","The generated SQL query uses 'od.OrderID' for date filtering instead of 'od.OrderDate', which is likely intended based on typical database naming conventions. This could lead to incorrect filtering, assuming 'OrderID' isn't a date field. Both queries also calculate total quantity, but the intent seems to be filtering by date.","SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantitySold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate BETWEEN DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND CURRENT_DATE - INTERVAL '1 day' GROUP BY p.ProductName ORDER BY TotalQuantitySold DESC;","The generated query uses a date range that captures the last 30 days instead of strictly last month, and it doesn't adjust for year change potentially affecting December to January calculations.",None
What is the total value of the inventory currently in stock?,SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;,"```sql
SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue
FROM products
WHERE Discontinued = 0;
```","The generated query only calculates the total value for products that are not discontinued, while the ground truth query includes all products regardless of their status.",SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;,Both queries are identical and accurately calculate the total value of the inventory in stock by multiplying UnitPrice by UnitsInStock and summing the results.,FT
Identify the orders that had a discount greater than 20%.,"SELECT DISTINCT orders.OrderID, [Order Details].Discount FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE [Order Details].Discount > 0.2;","```sql
SELECT *
FROM [Order Details]
WHERE Discount > 0.20;
```","The generated query selects all columns from [Order Details] with a discount greater than 20%, while the ground truth query selects distinct order IDs and their discounts, joining with the orders table.",SELECT OrderID FROM [Order Details] WHERE Discount > 0.2;,"The generated query only selects OrderID from [Order Details] without considering potential duplicates due to lack of DISTINCT, whereas the ground truth query joins with orders and eliminates duplicates, returning both OrderID and Discount.",None
What is the revenue growth compared to the previous month?,"SELECT ((SUM(CASE WHEN MONTH(od.OrderDate) = MONTH(CURRENT_DATE) THEN od.Quantity * od.UnitPrice ELSE 0 END) - SUM(CASE WHEN MONTH(od.OrderDate) = MONTH(CURRENT_DATE) - 1 THEN od.Quantity * od.UnitPrice ELSE 0 END)) / NULLIF(SUM(CASE WHEN MONTH(od.OrderDate) = MONTH(CURRENT_DATE) - 1 THEN od.Quantity * od.UnitPrice ELSE 0 END), 0)) * 100 AS RevenueGrowth FROM [Order Details] od WHERE YEAR(od.OrderDate) = YEAR(CURRENT_DATE);","```sql
SELECT 
    EXTRACT(YEAR FROM o.OrderDate) AS Year, 
    EXTRACT(MONTH FROM o.OrderDate) AS Month,
    SUM(od.Quantity * od.UnitPrice) AS Revenue,
    LAG(SUM(od.Quantity * od.UnitPrice), 1) OVER (ORDER BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate)) AS Previous_Month_Revenue,
    (SUM(od.Quantity * od.UnitPrice) - LAG(SUM(od.Quantity * od.UnitPrice), 1) OVER (ORDER BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate))) / NULLIF(LAG(SUM(od.Quantity * od.UnitPrice), 1) OVER (ORDER BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate)), 0) * 1.0 AS Revenue_Growth
FROM 
    [Order Details] od
JOIN 
    orders o ON od.OrderID = o.OrderID
GROUP BY 
    EXTRACT(YEAR FROM o.OrderDate), 
    EXTRACT(MONTH FROM o.OrderDate)
ORDER BY 
    Year, Month;
```",The generated query calculates the revenue growth per month using the LAG function and compares each month to its previous month across all years. The ground truth query calculates the revenue growth only for the current month compared to the previous month within the current year.,SELECT ((SUM(CurrentMonthRevenue) - SUM(PreviousMonthRevenue)) / SUM(PreviousMonthRevenue)) * 100 AS RevenueGrowth FROM (SELECT SUM(OD.Quantity * OD.UnitPrice) AS CurrentMonthRevenue FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID WHERE MONTH(OD.OrderDate) = MONTH(CURDATE()) AND YEAR(OD.OrderDate) = YEAR(CURDATE()) UNION ALL SELECT SUM(OD.Quantity * OD.UnitPrice) AS PreviousMonthRevenue FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID WHERE MONTH(OD.OrderDate) = MONTH(CURDATE()) - 1 AND YEAR(OD.OrderDate) = YEAR(CURDATE()) OR (MONTH(OD.OrderDate) = 12 AND MONTH(CURDATE()) = 1 AND YEAR(OD.OrderDate) = YEAR(CURDATE()) - 1)) AS RevenueComparison;,"The generated query does not handle the year transition correctly, as it does not account for December to January transition properly. It should check for both previous month and year change conditions like the ground truth query.",None
Calculate the percentage of customers who made more than one purchase.,SELECT (CAST(COUNT(*) AS FLOAT) / (SELECT COUNT(DISTINCT CustomerID) FROM orders)) * 100 AS ReturningCustomers FROM (SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 1) AS MultipleOrders;,"```sql
SELECT 
    (COUNT(DISTINCT CustomerID) * 100.0) / (SELECT COUNT(DISTINCT CustomerID) FROM orders) AS PercentageMoreThanOnePurchase
FROM 
    orders
GROUP BY 
    CustomerID
HAVING 
    COUNT(OrderID) > 1;
```","Both queries calculate the percentage of customers who made more than one purchase. The generated query counts distinct customers with more than one order and divides by the total distinct customers, similar to the ground truth query.",SELECT COUNT(DISTINCT o.CustomerID) * 100.0 / (SELECT COUNT(*) FROM customers) AS PercentageOfRepeatCustomers FROM (SELECT o.CustomerID FROM orders o GROUP BY o.CustomerID HAVING COUNT(*) > 1) AS subquery;,Both queries calculate the percentage of customers who made more than one purchase. They perform similar operations: counting distinct CustomerIDs with more than one order and dividing by the total customers in the orders table.,both
Which supplier contributed the most to total sales this year?,"SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY suppliers.SupplierID ORDER BY total_sales DESC LIMIT 1","```sql
SELECT products.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
JOIN products ON [Order Details].ProductID = products.ProductID
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY products.SupplierID
ORDER BY total_sales DESC
LIMIT 1
```",The generated query selects SupplierID instead of SupplierName and uses a fixed date range instead of extracting the year.,"SELECT suppliers.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY suppliers.SupplierID ORDER BY total_sales DESC LIMIT 1","The generated query selects SupplierID, while the ground truth query selects CompanyName. This may lead to different results.",None
Which products are responsible for the majority of sales revenue this month?,"SELECT p.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales_revenue FROM [Order Details] JOIN products p ON [Order Details].ProductID = p.ProductID JOIN orders o ON [Order Details].OrderID = o.OrderID WHERE EXTRACT(MONTH FROM o.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) AND EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY p.ProductName ORDER BY sales_revenue DESC","```sql
SELECT products.ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales_revenue
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
JOIN products ON [Order Details].ProductID = products.ProductID
WHERE orders.OrderDate >= DATE_TRUNC('MONTH', CURRENT_DATE)
GROUP BY products.ProductID
ORDER BY total_sales_revenue DESC
```","The generated query uses DATE_TRUNC which may not yield correct month and year comparisons for SQL databases that do not support this function. The ground truth query uses EXTRACT for both month and year, ensuring the correct month and year are compared. The generated query also selects ProductID instead of ProductName.","SELECT products.ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE EXTRACT(YEAR FROM orders.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) AND EXTRACT(MONTH FROM orders.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) GROUP BY products.ProductID ORDER BY sales_revenue DESC","The generated query selects ProductID while the ground truth query selects ProductName, which may yield different identifiers for products.",None
Which month has the highest number of orders?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY Month ORDER BY TotalOrders DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY Month
ORDER BY NumberOfOrders DESC
LIMIT 1;
```","Both queries correctly group orders by month, count them, and return the month with the highest number of orders using a descending order and limit of 1.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY TotalOrders DESC LIMIT 1;","Both queries group by month and count orders, then sort by total orders in descending order, and limit the results to one month. The use of different date formatting functions does not affect the correctness.",both
What is the most frequently ordered product?,"SELECT products.ProductName, COUNT(*) AS OrderFrequency FROM [Order Details] INNER JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY OrderFrequency DESC LIMIT 1;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalOrdered
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalOrdered DESC
LIMIT 1;
```",Both queries correctly determine the most frequently ordered product by aggregating order details and ordering by highest total or frequency.,"SELECT ProductID, COUNT(*) AS Frequency FROM [Order Details] GROUP BY ProductID ORDER BY Frequency DESC LIMIT 1;","The generated query returns only the ProductID, while the ground truth query returns the ProductName. The user might expect the product name, so the queries may not satisfy the requirement equally.",Base
What is the total discount given on all products sold?,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM [Order Details];,"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount
FROM [Order Details]
```",The generated SQL query is identical to the ground truth query and accurately calculates the total discount given on all products sold using the same formula and table.,SELECT SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM [Order Details] od;,"Both queries calculate the same total discount by multiplying UnitPrice, Quantity, and Discount from the Order Details table. The alias used in the generated query does not affect the result.",both
Identify orders that were delivered late compared to the required date.,SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;,"```sql
SELECT 
    o.OrderID, 
    o.OrderDate, 
    o.RequiredDate, 
    o.ShippedDate 
FROM 
    orders o 
WHERE 
    o.ShippedDate > o.RequiredDate;
```","Both queries identify orders that were delivered late by comparing ShippedDate to RequiredDate. The generated query includes additional columns (OrderDate, RequiredDate, ShippedDate) but this doesn't affect identifying late orders.","SELECT OrderID, OrderDate, RequiredDate, ShippedDate FROM orders WHERE ShippedDate > RequiredDate;",Both queries identify orders delivered late by checking if ShippedDate is greater than RequiredDate. The generated query includes additional columns but still answers the question.,both
How many distinct shipping recipients are there each month?,"SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(DISTINCT ShipName) AS DistinctRecipients FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    COUNT(DISTINCT ShipName) AS DistinctShippingRecipients
FROM 
    orders
GROUP BY 
    Month;
```",Both queries correctly group by month and count distinct shipping recipients. They use different date formatting functions but achieve the same result.,"SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(DISTINCT ShipName) AS DistinctRecipients FROM orders GROUP BY Month;",Both queries count the distinct shipping recipients by month. The methods of extracting the month are different but yield the same grouping results.,both
"What is the total number of orders processed per employee, broken down by year?","SELECT e.EmployeeID, YEAR(o.OrderDate) AS Year, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, YEAR(o.OrderDate);","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, YEAR(o.OrderDate) AS OrderYear, COUNT(o.OrderID) AS TotalOrders
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID, OrderYear
ORDER BY e.EmployeeID, OrderYear;
```","Both queries correctly calculate the total number of orders processed per employee, broken down by year. The generated query includes additional columns for `FirstName` and `LastName`, and orders the result, but these do not affect the correctness of the results.","SELECT employees.EmployeeID, COUNT(orders.OrderID) AS TotalOrders, EXTRACT(YEAR FROM orders.OrderDate) AS Year FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, EXTRACT(YEAR FROM orders.OrderDate);","Both queries achieve the same result by selecting the total number of orders per employee broken down by year. They join the employees and orders tables on EmployeeID and group by EmployeeID and year extracted from OrderDate, counting orders in each group.",both
What is the average lead time for each supplier to deliver products?,"SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM products p JOIN orders o ON p.ProductID = o.OrderID GROUP BY p.SupplierID;","```sql
SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.SupplierID;
```","The generated query joins the suppliers table and aggregates by suppliers.SupplierID, which is correct. However, the ground truth query incorrectly attempts to join products.ProductID with orders.OrderID, which is not logically consistent. The generated query better reflects the correct logic using proper joins to link suppliers, products, and orders.","SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID WHERE o.ShippedDate IS NOT NULL GROUP BY p.SupplierID;","The generated query joins 'orders' and 'products' through 'Order Details' and correctly calculates the average lead time for each supplier. The ground truth query incorrectly joins 'products' and 'orders' directly, suggesting a mismatch as 'ProductID' and 'OrderID' are of different attributes, likely yielding incorrect results.",None
What percentage of products are discontinued?,SELECT (COUNT(CASE WHEN Discontinued = 1 THEN 1 END) * 100.0 / COUNT(*)) AS DiscontinuedPercentage FROM products;,"```sql
SELECT (SUM(Discontinued) / COUNT(*) * 100) AS DiscontinuedPercentage
FROM products;
```","Both queries calculate the percentage of products that are discontinued by dividing the number of discontinued products by the total number of products, though they use different methods to count discontinued products.",SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM products)) AS DiscontinuedPercentage FROM products WHERE Discontinued = 1;,"Both queries calculate the percentage of products that are discontinued by dividing the count of discontinued products by the total count of products, then multiplying by 100.",both
Find the top 5 customers based on total order quantities.,"SELECT orders.CustomerID, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.CustomerID ORDER BY total_quantity DESC LIMIT 5;","```sql
SELECT customers.CustomerID, SUM([Order Details].Quantity) AS total_quantity
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
JOIN customers ON orders.CustomerID = customers.CustomerID
GROUP BY customers.CustomerID
ORDER BY total_quantity DESC
LIMIT 5
```",Both queries calculate the total order quantities per customer and return the top 5 customers by total quantity.,"SELECT customers.CustomerID, SUM([Order Details].Quantity) AS total_quantity FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY total_quantity DESC LIMIT 5","Both queries accurately compute the total order quantities per customer and select the top 5 customers, despite using different table references for CustomerID.",both
Which products are the most frequently ordered per month?,"SELECT p.ProductName, COUNT(od.OrderID) AS OrderFrequency, EXTRACT(MONTH FROM o.OrderDate) AS Month FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, EXTRACT(MONTH FROM o.OrderDate) ORDER BY OrderFrequency DESC;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalOrdered
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalOrdered DESC;
```","The generated query provides a total sum of quantities ordered for all time, not broken down per month, missing the monthly breakdown required by the question.","SELECT products.ProductID, products.ProductName, COUNT([Order Details].OrderID) AS OrderFrequency FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID, products.ProductName ORDER BY OrderFrequency DESC;","The generated query does not consider the monthly aggregation of orders. It only counts orders per product overall, not per month.",None
Calculate the on-time delivery rate for each shipping company in Q2 2023.,"SELECT shippers.CompanyName, SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / CAST(COUNT(orders.OrderID) AS DECIMAL) AS on_time_delivery_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY shippers.CompanyName","```sql
SELECT shippers.ShipperID, COUNT(orders.OrderID) AS total_orders,
       COUNT(orders.OrderID WHERE orders.ShippedDate <= orders.RequiredDate) AS on_time_orders,
       (COUNT(orders.OrderID WHERE orders.ShippedDate <= orders.RequiredDate) * 1.0 / COUNT(orders.OrderID)) AS on_time_delivery_rate
FROM orders
JOIN shippers ON orders.ShipVia = shippers.ShipperID
WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30'
GROUP BY shippers.ShipperID
```","The generated SQL query uses COUNT with a WHERE clause inside, which is not standard SQL syntax, and it groups by ShipperID instead of CompanyName. These lead to potential errors and discrepancies in results.","```sql
SELECT shippers.CompanyName, SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY shippers.CompanyName
```","The generated query uses integer division, which may result in truncation if both the numerator and denominator are integers. The ground truth query casts the denominator to a decimal for accurate division.",None
How does the average shipping cost vary by shipper?,"SELECT shippers.CompanyName, AVG(orders.Freight) AS average_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName","```sql
SELECT shippers.ShipperID, shippers.CompanyName, AVG(orders.Freight) AS average_shipping_cost
FROM orders
JOIN shippers ON orders.ShipVia = shippers.ShipperID
GROUP BY shippers.ShipperID, shippers.CompanyName
```","Both queries calculate the average shipping cost by shipper and use the same logic. The inclusion of ShipperID in the generated query does not change the result, as it groups by both CompanyName and ShipperID, which are functionally dependent.","SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",The generated SQL query accurately answers the user's question and yields the same results as the ground truth query. Both queries calculate the average shipping cost by grouping on the CompanyName from the shippers table. The difference in alias names (avg_shipping_cost vs. average_cost) does not affect the result of the query.,both
Determine the customer retention rate for the last year.,SELECT (COUNT(DISTINCT o1.CustomerID) * 1.0 / COUNT(DISTINCT o2.CustomerID)) AS RetentionRate FROM orders o1 LEFT JOIN orders o2 ON o1.CustomerID = o2.CustomerID WHERE o1.OrderDate BETWEEN '2022-01-01' AND '2022-12-31';,"```sql
SELECT 
    (COUNT(DISTINCT o2.CustomerID) * 1.0 / NULLIF(COUNT(DISTINCT o1.CustomerID), 0)) AS CustomerRetentionRate
FROM 
    orders o1 
LEFT JOIN 
    orders o2 ON o1.CustomerID = o2.CustomerID 
WHERE 
    o1.OrderDate < DATEADD(year, -1, GETDATE()) AND 
    o2.OrderDate BETWEEN DATEADD(year, -1, GETDATE()) AND GETDATE();
```","The generated SQL query uses dynamic date logic with GETDATE() and checks o1.OrderDate for orders before last year, while the ground truth query uses fixed date logic and checks for o1.OrderDate within last year. The logic for counting distinct customers is reversed in the WHERE clause conditions.","SELECT (COUNT(DISTINCT o1.CustomerID) * 1.0 / COUNT(DISTINCT o2.CustomerID)) AS RetentionRate FROM orders o1, orders o2 WHERE o1.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' AND o2.OrderDate < '2022-01-01';","The generated query calculates the retention rate based on customers in 2022 and customers before 2022, but it doesn't ensure that customers from 2022 also existed before 2022. The ground truth query compares customers from 2022 to the same customers existing both in 2022 and before 2022.",None
How many products have never been ordered?,SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"```sql
SELECT COUNT(*) AS UnorderedProductCount
FROM products
WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);
```","The generated query counts unordered products, while the ground truth lists product names of unordered products.",SELECT COUNT(*) FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"The generated SQL query counts the products, while the ground truth query lists their names.",None
Identify the correlation between product price and reorder level.,"SELECT ProductID, ProductName, (CAST(UnitPrice AS DOUBLE) / ReorderLevel) AS PriceToReorderRatio FROM products;","```sql
SELECT 
    p.UnitPrice, 
    p.ReorderLevel
FROM 
    products p
WHERE 
    p.Discontinued = 0;
```","The generated query does not calculate or indicate the correlation between product price and reorder level. It only selects UnitPrice and ReorderLevel for non-discontinued products, whereas the ground truth query attempts to create a ratio between UnitPrice and ReorderLevel.","SELECT CORR(UnitPrice, ReorderLevel) FROM products;","The generated query calculates the correlation coefficient, while the ground truth calculates a price to reorder ratio for each product. They address different aspects of the relationship.",None
What is the total revenue for each product considering discounts?,"SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName;
```","Both queries calculate total revenue for each product considering discounts. The difference is that the generated query includes ProductID in the selection and grouping, which does not affect the overall result for total revenue calculations.","SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalRevenue DESC;",Both queries correctly calculate the total revenue per product considering discounts. The order of joining tables and the ordering by TotalRevenue in the generated SQL do not affect the accuracy of the result.,both
Identify products with the highest unit price that have never been ordered.,SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]) ORDER BY UnitPrice DESC LIMIT 1;,"```sql
SELECT ProductID, ProductName, UnitPrice
FROM products
WHERE ProductID NOT IN (SELECT ProductID FROM [Order Details])
ORDER BY UnitPrice DESC
LIMIT 1;
```","The generated query selects ProductID and UnitPrice in the output, whereas the ground truth query only selects ProductName.","SELECT ProductName, UnitPrice FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]) AND Discontinued = 0 ORDER BY UnitPrice DESC;","The generated query includes a condition for 'Discontinued = 0' and does not limit the result to the highest unit price, while the ground truth query does not have the 'Discontinued' condition and limits the results to one product with the highest price.",None
What percentage of orders have been delivered on or before the required date for each month?,"SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS OrderMonth, (CAST(SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) AS DECIMAL) / COUNT(*)) * 100 AS OnTimeDeliveryRate FROM orders GROUP BY OrderMonth;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID)) AS OnTimeDeliveryRate
FROM 
    orders
GROUP BY 
    Month
```","Both queries calculate the percentage of orders delivered on or before the required date for each month by comparing ShippedDate and RequiredDate, then grouping by the formatted OrderDate. The differences in SQL syntax (DATE_FORMAT vs TO_CHAR) are due to the SQL dialect but achieve the same result.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) * 100.0 / COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","The generated query incorrectly divides the total count by the on-time count, which should be the reverse. Also, it uses COUNT without an ELSE condition in the CASE, leading to incorrect results.",Base
What is the distribution of orders among different shipping methods?,"SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY ShipVia;
```",Both queries calculate the distribution of orders by 'ShipVia' using the COUNT function and GROUP BY clause. The result will be the same despite the difference in alias name for the count column.,"SELECT ShipVia, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipVia;","Both queries calculate the distribution of orders across different shipping methods by counting OrderID for each ShipVia, only the alias for the count differs.",both
What is the distribution of orders across different regions?,"SELECT c.Region, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.Region;","```sql
SELECT Region, COUNT(OrderID) AS OrderCount
FROM orders
JOIN customers ON orders.CustomerID = customers.CustomerID
GROUP BY Region;
```",Both queries correctly count orders per region by joining the orders and customers tables on CustomerID and grouping by Region.,"SELECT ShipRegion, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipRegion;","The generated SQL query groups by 'ShipRegion', while the ground truth query groups by 'Region' from the 'customers' table. They may yield different results if 'ShipRegion' and 'Region' do not match.",Base
Determine the total sales generated by discontinued products.,"SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1 GROUP BY p.ProductName;","```sql
SELECT SUM(od.Quantity * od.UnitPrice) AS TotalSales
FROM [Order Details] od
JOIN products p ON od.ProductID = p.ProductID
WHERE p.Discontinued = 1;
```","The generated query does not consider discounts, whereas the ground truth query calculates total sales with discounts included.",SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSalesDiscontinued FROM [Order Details] od INNER JOIN products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 1;,"Both queries calculate the total sales for discontinued products but aggregate results differently. The generated query gives a single sum, while the ground truth breaks it down by product name. Despite this, both achieve the primary goal of summarizing total sales for discontinued products.",FT
Which employees have generated the highest sales in the past year?,"SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY TotalSales DESC LIMIT 5;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC;
```","The generated SQL query does not include a LIMIT clause, which is present in the ground truth query to restrict the results to the top 5 employees.","SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= CURRENT_DATE - INTERVAL 1 YEAR GROUP BY e.EmployeeID ORDER BY TotalSales DESC;","The generated SQL query omits employee names and does not limit the output to the top 5 employees, unlike the ground truth query.",None
Which months have the highest on-time delivery rates?,"SELECT DATE_TRUNC('month', ShippedDate) AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*)) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_TRUNC('month', ShippedDate) ORDER BY OnTimeDeliveryRate DESC LIMIT 3;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
       COUNT(OrderID) AS TotalOrders,
       COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveries,
       (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate
FROM orders
GROUP BY Month
ORDER BY OnTimeDeliveryRate DESC;
```","The generated query calculates on-time delivery rate by month of the order date, while the ground truth query calculates it by the month of the shipped date. This can yield different results depending on the data.","SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(*) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(*) AS OnTimeRate FROM orders GROUP BY Month ORDER BY OnTimeRate DESC;","The generated query uses OrderDate to group by months, whereas the ground truth query groups by the month of ShippedDate. This affects the accuracy of which months have the highest on-time delivery rates.",None
What is the percentage of products that are discontinued?,SELECT (COUNT(CASE WHEN Discontinued = 1 THEN 1 END) * 100.0 / COUNT(*)) AS DiscontinuedPercentage FROM products;,"```sql
SELECT 
    (SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS PercentageDiscontinued
FROM 
    products;
```","Both queries calculate the percentage of discontinued products using similar logic, ensuring the results are equivalent.",SELECT (CAST(COUNT(ProductID) AS DECIMAL) / (SELECT COUNT(*) FROM products)) * 100 AS PercentageDiscontinued FROM products WHERE Discontinued = 1;,Both queries calculate the percentage of discontinued products by dividing the count of discontinued products by the total count of products and then multiplying by 100.,both
How does the quantity ordered vary by product?,"SELECT ProductID, AVG(Quantity) AS AvgQuantity FROM [Order Details] GROUP BY ProductID;","```sql
SELECT 
    [Order Details].ProductID, 
    SUM([Order Details].Quantity) AS TotalQuantityOrdered
FROM 
    [Order Details]
GROUP BY 
    [Order Details].ProductID
ORDER BY 
    TotalQuantityOrdered DESC;
```","The generated query calculates the total quantity ordered by product, while the ground truth query calculates the average quantity ordered by product.","SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC;","The generated query calculates the total quantity ordered per product, while the ground truth query calculates the average quantity ordered per product.",None
What is the average freight cost by shipping method?,"SELECT ShipVia, AVG(Freight) AS AverageFreightCost FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, AVG(Freight) AS AverageFreightCost
FROM orders
GROUP BY ShipVia;
```",The generated SQL query and the ground truth SQL query are identical in logic and will yield the same results. Both queries calculate the average freight cost grouped by shipping method (ShipVia).,"SELECT ShipVia, AVG(Freight) AS AverageFreightCost FROM orders GROUP BY ShipVia;",The generated SQL query and the ground truth query are identical and correctly calculate the average freight cost by shipping method.,both
In which month did we have the highest total sales?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY OrderMonth ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS SalesMonth, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY SalesMonth
ORDER BY TotalSales DESC
LIMIT 1;
```",Both queries calculate total sales per month and return the month with the highest sales by ordering in descending order and limiting the result to one. The table aliases and column references are different but functionally equivalent.,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders JOIN [Order Details] od ON orders.OrderID = od.OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m') ORDER BY TotalSales DESC LIMIT 1;","Both queries calculate total sales per month and order by total sales in descending order, returning the month with the highest sales. Differences in alias naming do not affect the result.",both
Which supplier provides products with the lowest average unit price?,"SELECT s.CompanyName, AVG(p.UnitPrice) AS AvgUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName ORDER BY AvgUnitPrice ASC LIMIT 1;","```sql
SELECT s.CompanyName, AVG(p.UnitPrice) AS AverageUnitPrice
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
GROUP BY s.SupplierID
ORDER BY AverageUnitPrice ASC
LIMIT 1;
```","The generated query correctly joins suppliers and products, calculates the average unit price per supplier, and orders by average price ascending, returning the supplier with the lowest average price.",SELECT suppliers.CompanyName FROM [Order Details] INNER JOIN products ON [Order Details].ProductID = products.ProductID INNER JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY AVG([Order Details].UnitPrice) ASC LIMIT 1;,"The generated query calculates the average unit price from the Order Details table, which is not required. The ground truth query correctly calculates the average from the Products table, aligning with the user's question.",Base
In which month was the average order fulfillment time the shortest?,"SELECT Month, AVG(FulfillmentTime) AS AvgFulfillmentTime FROM (SELECT DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTime, DATE_FORMAT(OrderDate, '%Y-%m') AS Month FROM orders) AS MonthlyFulfillment GROUP BY Month ORDER BY AvgFulfillmentTime ASC LIMIT 1;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
       AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY Month
ORDER BY AverageFulfillmentTime ASC
LIMIT 1;
```","Both queries calculate the average fulfillment time by month and order the results to find the month with the shortest average fulfillment time. The logic is equivalent, although structured differently.","```sql
SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime
FROM orders
GROUP BY Month
ORDER BY AvgFulfillmentTime ASC
LIMIT 1;
```",Both queries calculate the average fulfillment time per month and return the month with the shortest time. They use different methods to extract the month but achieve the same result.,both
What is the average time taken to fulfill an order each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month ORDER BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
    AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM 
    orders
GROUP BY 
    Month
```","The generated query does not filter out records with NULL ShippedDate, which can skew the average. Additionally, the date formatting methods differ, potentially affecting grouping depending on SQL dialect.","SELECT TO_CHAR(o.OrderDate, 'YYYY-MM') AS Month, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS Average_Fulfillment_Time FROM orders o GROUP BY TO_CHAR(o.OrderDate, 'YYYY-MM');","The generated query does not filter out orders with NULL ShippedDate, potentially affecting the average calculation.",None
Identify the top 3 products with the highest sales revenue per unit.,"SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / SUM(od.Quantity) AS SalesRevenuePerUnit FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SalesRevenuePerUnit DESC LIMIT 3;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) / SUM(od.Quantity) AS RevenuePerUnit
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY RevenuePerUnit DESC
LIMIT 3;
```",Both queries calculate the sales revenue per unit and order the results in descending order to find the top 3 products. The difference in selecting ProductID in the generated query does not affect the outcome relevant to the user's question.,"SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / SUM(od.Quantity) AS SalesPerUnit FROM products p INNER JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SalesPerUnit DESC LIMIT 3;",Both queries calculate the sales revenue per unit for each product and order the result to return the top 3 products.,both
How many orders have been placed by each customer?,"SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID;","```sql
SELECT CustomerID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY CustomerID;
```","Both queries count the number of orders placed by each customer using the same logic, only the alias is different.","SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID;",Both queries count the number of orders for each customer and only differ in the alias for the count column.,both
What is the total freight cost for shipped orders last month?,SELECT SUM(Freight) AS TotalFreight FROM orders WHERE MONTH(ShippedDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(ShippedDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH);,"```sql
SELECT SUM(Freight) AS TotalFreightCost
FROM orders
WHERE ShippedDate >= DATE_SUB(CURDATE(), INTERVAL DAY(CURDATE()) + 1 DAY)
AND ShippedDate < DATE_SUB(CURDATE(), INTERVAL DAY(CURDATE()) - DAY(LAST_DAY(CURDATE())) DAY);
```","The generated query incorrectly calculates the date range. It does not correctly identify the entirety of the last month. It uses current date subtraction for the day calculation, leading to incorrect limits. The ground truth query uses MONTH() and YEAR() functions correctly to capture last month.",SELECT SUM(o.Freight) AS TotalFreight FROM orders o WHERE MONTH(o.ShippedDate) = MONTH(CURRENT_DATE - INTERVAL '1 MONTH') AND YEAR(o.ShippedDate) = YEAR(CURRENT_DATE - INTERVAL '1 MONTH') AND o.ShippedDate IS NOT NULL;,"The generated SQL query accurately answers the user's question, as it calculates the total freight cost for orders shipped last month. The only difference is the generated query checks if ShippedDate is not null, which is a reasonable safeguard and does not affect the outcome given that only shipped orders are considered.",FT
How many orders were shipped late every month?,"SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, 
    COUNT(OrderID) AS LateOrders
FROM 
    orders
WHERE 
    ShippedDate > RequiredDate
GROUP BY 
    Month
```","The use of DATE_FORMAT is not ANSI standard SQL, and behavior might differ based on SQL dialect.","SELECT DATE_TRUNC('month', ShippedDate) AS OrderMonth, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY OrderMonth;","Both queries calculate the number of late orders per month by comparing 'ShippedDate' with 'RequiredDate'. The only difference is in the date formatting function used: 'DATE_TRUNC' vs 'DATE_FORMAT', but both effectively group by month.",FT
What is the distribution of orders by shipping country?,"SELECT ShipCountry, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCountry ORDER BY OrderCount DESC;","```sql
SELECT ShipCountry, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY ShipCountry;
```",The generated SQL query correctly counts the number of orders per shipping country. The difference in ordering the result does not affect the distribution outcome.,"SELECT ShipCountry, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipCountry;","Both queries count the orders grouped by shipping country. The only difference is the ordering, which does not affect the distribution results.",both
How many orders were placed each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS TotalOrders
FROM orders
GROUP BY Month
ORDER BY Month;
```","Both queries group by the formatted date and count the orders for each month, providing the same results.","SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, COUNT(orders.OrderID) AS OrderCount FROM orders GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')","Both queries calculate the number of orders placed each month by formatting the OrderDate and counting OrderID, grouping by the formatted date. The difference in the query syntax does not affect the result.",both
Which products have the highest unit price and are currently discontinued?,SELECT ProductName FROM products WHERE Discontinued = 1 ORDER BY UnitPrice DESC LIMIT 5;,"```sql
SELECT ProductID, ProductName, UnitPrice
FROM products
WHERE Discontinued = 1
ORDER BY UnitPrice DESC
LIMIT 1;
```","The generated query only returns one product due to the LIMIT 1, while the ground truth query intends to return the top 5 products with the highest unit price that are discontinued.",SELECT ProductName FROM products WHERE UnitPrice = (SELECT MAX(UnitPrice) FROM products WHERE Discontinued = 1) AND Discontinued = 1;,"The generated query finds products with the single highest unit price among discontinued items, while the ground truth query lists the top 5 highest-priced discontinued products.",None
What percentage of products are currently on order?,SELECT COUNT(DISTINCT ProductID) * 100.0 / (SELECT COUNT(ProductID) FROM products) AS PercentageOnOrder FROM [Order Details] WHERE Quantity > 0;,"```sql
SELECT 
    (SUM(CASE WHEN UnitsOnOrder > 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS PercentageOnOrder
FROM 
    products;
```","The generated query checks 'UnitsOnOrder' in the 'products' table, while the ground truth checks 'Quantity' in the '[Order Details]' table. They reference different concepts of 'on order'.",SELECT (COUNT(ProductID) * 100.0 / (SELECT COUNT(*) FROM products)) AS PercentageOnOrder FROM products WHERE UnitsOnOrder > 0;,"The generated query checks 'UnitsOnOrder' from the 'products' table, while the ground truth checks 'Quantity' from the 'Order Details' table. They refer to different conditions and sources.",None
Which orders have the highest discount applied?,"SELECT OrderID, Discount FROM [Order Details] ORDER BY Discount DESC LIMIT 5","```sql
SELECT OrderID, ProductID, UnitPrice, Quantity, Discount
FROM [Order Details]
ORDER BY Discount DESC
LIMIT 1;
```","The generated query retrieves only one order, while the ground truth query retrieves the top five orders with the highest discounts.","SELECT OrderID, Discount FROM [Order Details] WHERE Discount = (SELECT MAX(Discount) FROM [Order Details])","The generated query returns orders with the maximum discount, while the ground truth returns the top 5 highest discounts. They yield different results.",None
Which supplier has the highest total sales revenue?,"SELECT p.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.SupplierID ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.CompanyName
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries calculate total sales for each supplier and order by total sales to find the supplier with the highest revenue. They differ in field selection and table joins, but the logic and outcome are equivalent.","SELECT s.SupplierID, s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID, s.CompanyName ORDER BY TotalSales DESC LIMIT 1;","The generated query includes the suppliers table to get CompanyName, which is not necessary for identifying the supplier with the highest total sales. The ground truth query focuses on calculating the highest sales revenue by SupplierID directly using the products table.",Base
Which suppliers provide the most products that are currently low in stock?,"SELECT suppliers.SupplierID, suppliers.SupplierName, COUNT(products.ProductID) AS LowStockProducts FROM suppliers INNER JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsInStock < products.ReorderLevel GROUP BY suppliers.SupplierID, suppliers.SupplierName;","```sql
SELECT SupplierID, COUNT(ProductID) AS LowStockCount
FROM products
WHERE UnitsInStock < ReorderLevel
GROUP BY SupplierID
ORDER BY LowStockCount DESC;
```","The generated query does not include the SupplierName and does not use an INNER JOIN to link products with suppliers, which may lead to different results in cases where product data without supplier data exists.","SELECT SupplierID, COUNT(ProductID) AS LowStockProducts FROM products WHERE UnitsInStock < ReorderLevel GROUP BY SupplierID;","The generated query does not include SupplierName, which is present in the ground truth query. Both queries count low stock products, but the ground truth query also joins the suppliers table to include additional supplier information.",None
What is the total number of orders shipped each month?,"SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS ShipMonth, COUNT(OrderID) AS OrderCount FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipMonth;","```sql
SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, COUNT(OrderID) AS TotalOrders
FROM orders
WHERE ShippedDate IS NOT NULL
GROUP BY Month
ORDER BY Month;
```","Both queries calculate the total number of orders shipped each month by formatting the 'ShippedDate' and counting 'OrderID'. They group by the formatted date and filter out orders with NULL 'ShippedDate'. The only difference is in the alias names for the columns and the ordering in the generated query, which does not change the outcome.","SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, COUNT(OrderID) AS TotalOrders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month;",Both queries group orders by month and count the number where ShippedDate is not null. They effectively produce the same result despite different alias names.,both
Find the top three customers by the number of orders placed.,"SELECT CustomerID, COUNT(*) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 3;","```sql
SELECT CustomerID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY CustomerID
ORDER BY OrderCount DESC
LIMIT 3;
```","Both queries correctly calculate the number of orders per customer, order them in descending order, and limit the results to the top three customers.","SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 3;","Both queries count orders per customer, group them by CustomerID, order by the order count in descending order, and limit the results to the top three customers. The use of COUNT(OrderID) versus COUNT(*) does not affect the results as only existing records are counted.",both
Determine the monthly product performance based on sales.,"SELECT products.ProductID, DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductID, DATE_TRUNC('month', orders.OrderDate) ORDER BY TotalQuantity DESC;","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    SUM(od.Quantity) AS TotalSales
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.ProductName
```","The generated query does not group by month, which is crucial for determining monthly product performance. It only aggregates total sales per product without considering the order date.","SELECT DATE_TRUNC('month', od.OrderDate) AS Month, p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY Month, p.ProductName;","The generated query does not join with the 'orders' table, so it doesn't account for the OrderDate accurately. Also, it selects 'ProductName' instead of 'ProductID', which may not ensure unique product records. The ground truth query ensures a comprehensive join with orders and uses ProductID for accurate monthly aggregation and ordering by total quantity.",None
How many orders have not yet been shipped?,SELECT COUNT(OrderID) AS UnshippedOrders FROM orders WHERE ShippedDate IS NULL,"```sql
SELECT COUNT(*) AS UnshippedOrders
FROM orders
WHERE ShippedDate IS NULL;
```","Both queries count orders with a NULL ShippedDate, meaning they both accurately determine the number of unshipped orders. The use of COUNT(*) vs. COUNT(OrderID) doesn't affect the result since ShippedDate is the filter applied.",SELECT COUNT(OrderID) AS NotShippedOrderCount FROM orders WHERE ShippedDate IS NULL;,"Both queries count the number of orders where the ShippedDate is NULL, indicating they have not been shipped. The column aliases differ, but the logic and results are the same.",both
What is the most popular product category based on the number of unique customers?,"SELECT categories.CategoryName, COUNT(DISTINCT orders.CustomerID) AS unique_customers FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY unique_customers DESC LIMIT 1","```sql
SELECT categories.CategoryName, COUNT(DISTINCT orders.CustomerID) AS unique_customers
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN categories ON products.CategoryID = categories.CategoryID
GROUP BY categories.CategoryName
ORDER BY unique_customers DESC
LIMIT 1;
```","Both queries perform the same joins and aggregate the data by category name to count unique customers, then order and limit the results to find the most popular category.","SELECT categories.CategoryName, COUNT(DISTINCT orders.CustomerID) AS unique_customers FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY categories.CategoryName ORDER BY unique_customers DESC LIMIT 1","Both queries calculate the number of unique customers for each product category, order the results in descending order, and limit the result to the most popular category. The order of the JOIN clauses does not affect the result as long as the joins are correctly implemented.",both
What is the average discount given per order?,SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details],"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details]
GROUP BY OrderID
```","The generated query groups by OrderID, calculating a separate average for each order. The ground truth query calculates the overall average discount across all orders.",SELECT AVG(od.Discount) AS AvgDiscount FROM [Order Details] od;,Both queries calculate the average discount from the [Order Details] table and will yield the same result.,FT
How many orders were fulfilled on time each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(*) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    COUNT(OrderID) AS OnTimeFulfilledOrders
FROM 
    orders
WHERE 
    ShippedDate <= RequiredDate
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries count the number of orders fulfilled on time per month. The only difference is the date formatting function, which doesn't affect the accuracy of the results.","SELECT DATE_TRUNC('month', o.OrderDate) AS OrderMonth, COUNT(o.OrderID) AS OnTimeFulfilled FROM orders o WHERE o.ShippedDate <= o.RequiredDate GROUP BY OrderMonth;","Both queries count the number of orders fulfilled on or before the required date per month. They apply the same condition and aggregation, producing equivalent results.",both
Calculate the Product Performance for each product over the last year.,"SELECT p.ProductID, SUM(od.Quantity) AS TotalPerformance FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY p.ProductID;","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    SUM(od.Quantity) AS TotalQuantitySold
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
WHERE 
    od.OrderID IN (
        SELECT OrderID 
        FROM orders 
        WHERE OrderDate >= DATEADD(year, -1, GETDATE())
    )
GROUP BY 
    p.ProductID, 
    p.ProductName
```","The generated query uses a subquery to filter OrderID instead of filtering directly by OrderDate. It also selects ProductName, which is not in the ground truth. Lastly, the date function and syntax differ.","SELECT p.ProductID, SUM(od.Quantity) AS TotalSales FROM products p INNER JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE YEAR(od.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY p.ProductID;","The generated SQL query checks for orders in the previous calendar year, while the ground truth checks for orders in the last 12 months from the current date. The time periods covered by these queries are different.",None
How does the distribution of sales by region compare?,"SELECT employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Sales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Region","```sql
SELECT employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM employees
JOIN orders ON employees.EmployeeID = orders.EmployeeID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY employees.Region;
```",Both queries compute the total sales by region using the same calculation and grouping logic. The difference in the alias for the sum does not affect the result.,"SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS RegionSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion;","The generated query groups sales by ShipRegion from the orders table, while the ground truth groups sales by Region from the employees table, comparing different region dimensions.",Base
Which products have exceeded the reorder level?,SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock > ReorderLevel;
```","The generated query selects products where UnitsInStock is greater than ReorderLevel, which means they're above their reorder level. The ground truth query correctly filters products where UnitsInStock is less than ReorderLevel, indicating they need to be reordered.",SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;,"The generated query considers Discontinued status and uses <= instead of <, which might yield different results compared to the ground truth query.",None
Find the employee with the largest number of orders with discounts.,"SELECT employees.EmployeeID, COUNT(orders.OrderID) AS DiscountedOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE [Order Details].Discount > 0 GROUP BY employees.EmployeeID ORDER BY DiscountedOrders DESC LIMIT 1","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS OrderCount
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE od.Discount > 0
GROUP BY e.EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries aim to find the employee with the highest number of discounted orders by counting order IDs where there's a discount, grouping by employee, and ordering by count to get the top result.","SELECT e.EmployeeID, COUNT(DISTINCT o.OrderID) AS OrdersWithDiscounts FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0 GROUP BY e.EmployeeID ORDER BY OrdersWithDiscounts DESC LIMIT 1;","Both queries correctly find the employee with the largest number of orders that include discounts. They select the employee ID, join the necessary tables, count the distinct order IDs where the discount is greater than zero, group by the employee ID, and order by the count in descending order before limiting the result to one.",both
Which supplier has the shortest average lead time for deliveries?,"SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC LIMIT 1","```sql
SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_lead_time 
FROM orders 
JOIN products ON orders.OrderID = products.ProductID 
GROUP BY products.SupplierID 
ORDER BY average_lead_time ASC 
LIMIT 1
```","The generated query joins orders directly with products using OrderID and ProductID, which are not directly joinable. The ground truth query correctly joins orders with order details, then with products and suppliers. The generated query likely yields inaccurate results.","SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY avg_lead_time ASC LIMIT 1","The generated query selects 'suppliers.CompanyName', while the ground truth selects 'suppliers.SupplierID'. The result sets might differ if 'CompanyName' is not unique.",None
How many orders were placed in each month of the year?,"SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) FROM orders GROUP BY Month ORDER BY Month;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS TotalOrders
FROM orders
GROUP BY Month
ORDER BY Month;
```","The generated SQL includes the year in the grouping, while the ground truth groups by month only, leading to different results if there are orders from multiple years.","SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY Year, Month","The generated query includes year in the grouping, while the ground truth groups only by month and orders results by month.",None
Which customer placed the most orders in 2022?,"SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = 2022 GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT CustomerID, COUNT(OrderID) AS OrderCount
FROM orders
WHERE YEAR(OrderDate) = 2022
GROUP BY CustomerID
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries accurately count orders per customer for the year 2022, group by CustomerID, order by the count in descending order, and limit to one result. They use different functions (YEAR vs EXTRACT) to extract the year, but yield the same results.","SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE Year(OrderDate) = 2022 GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;","Both queries count the number of orders per customer for 2022, group by CustomerID, and return the customer with the most orders. They use different functions to extract the year from OrderDate but achieve the same result.",both
Which city has received the highest number of shipments year-to-date?,"SELECT ShipCity, COUNT(*) AS Shipments FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 1;","```sql
SELECT ShipCity, COUNT(OrderID) AS ShipmentCount
FROM orders
WHERE ShippedDate >= DATE_FORMAT(CURRENT_DATE, '%Y-01-01')
GROUP BY ShipCity
ORDER BY ShipmentCount DESC
LIMIT 1;
```","The generated query uses ShippedDate to filter shipments 'year-to-date', whereas the ground truth query uses OrderDate. They may yield different results if there are discrepancies between order and shipping dates.","SELECT ShipCity, COUNT(OrderID) AS TotalShipments FROM orders WHERE OrderDate >= DATE_TRUNC('year', CURRENT_DATE) GROUP BY ShipCity ORDER BY TotalShipments DESC LIMIT 1;",Both queries count shipments per city for the current year and return the city with the highest count.,FT
Which month had the highest number of orders shipped?,"SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderCount FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY Month
ORDER BY NumberOfOrders DESC
LIMIT 1;
```","The generated query does not include a condition to exclude NULL ShippedDate values, which could result in counting orders with no shipped date. The ground truth query includes this condition.","SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM') ORDER BY TotalOrders DESC LIMIT 1;","The generated query uses OrderDate instead of ShippedDate to count orders, which does not align with the user's question that specifies orders shipped.",None
Identify the peak order day of the week for each month.,"SELECT EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, DAYNAME(o.OrderDate) AS OrderDay, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY OrderMonth, OrderDay ORDER BY OrderMonth, OrderCount DESC;","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month,
    DAYNAME(orders.OrderDate) AS DayOfWeek,
    COUNT(orders.OrderID) AS TotalOrders,
    RANK() OVER (PARTITION BY DATE_FORMAT(orders.OrderDate, '%Y-%m') ORDER BY COUNT(orders.OrderID) DESC) AS Rank
FROM 
    orders
GROUP BY 
    Month, DayOfWeek
HAVING 
    Rank = 1;
```","The generated query uses a RANK() function with a HAVING clause to filter the peak day, which is conceptually correct but incorrectly implemented due to HAVING on a window function. Also, it uses DATE_FORMAT to group by month, which aligns with the month's intent. The ground truth query does not identify the peak day, only orders by month and count, not fulfilling the peak day requirement.","SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS month_of_year, TO_CHAR(OrderDate, 'Dy') AS day_of_week, COUNT(OrderID) AS total_orders FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM'), TO_CHAR(OrderDate, 'Dy') ORDER BY month_of_year, total_orders DESC;","The generated query uses 'TO_CHAR' to extract the month ('YYYY-MM') and week day ('Dy'), which does not ensure that the query identifies the peak day of the week for each month accurately. It sorts by 'month_of_year' and 'total_orders' in sequence but does not retrieve the maximum count for each month. The ground truth query groups by month and day, sorts by month and order count, but also does not ensure it selects only the peak day without additional processing like using a window function or a subquery to filter for the maximum count.",None
How many orders have zero freight cost?,SELECT COUNT(OrderID) AS FreeShippingOrders FROM orders WHERE Freight = 0;,"```sql
SELECT COUNT(OrderID) AS ZeroFreightOrders
FROM orders
WHERE Freight = 0;
```","Both queries count orders with zero freight cost and will yield the same results, only the alias is different.",SELECT COUNT(*) AS ZeroFreightOrders FROM orders WHERE Freight = 0;,"Both queries count the number of orders with a freight cost of zero using the WHERE Freight = 0 condition, resulting in the same output.",both
How many orders were shipped late each month?,"SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(OrderID) AS LateShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(orders.ShippedDate, '%Y-%m') AS order_month,
    COUNT(orders.OrderID) AS late_orders_count
FROM 
    orders
WHERE 
    orders.ShippedDate > orders.RequiredDate
GROUP BY 
    order_month
ORDER BY 
    order_month;
```",Both queries count late orders per month by comparing ShippedDate and RequiredDate and use a similar logic to group and order results by month.,"SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS Month, COUNT(*) AS LateOrders FROM orders WHERE orders.ShippedDate > orders.RequiredDate GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM');",Both queries count the number of orders shipped late per month and group by the formatted OrderDate. The difference in column alias or function in COUNT does not affect the results.,both
Find the products with the highest average order quantity.,"SELECT p.ProductName, AVG(od.Quantity) AS AvgOrderQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY AvgOrderQuantity DESC;","```sql
SELECT p.ProductID, p.ProductName, AVG(od.Quantity) AS AverageOrderQuantity
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY AverageOrderQuantity DESC
LIMIT 1;
```","The generated query limits the output to one product, while the ground truth does not. Ground truth allows for ties.","```sql
SELECT ProductName, AVG(Quantity) AS AvgOrderQuantity
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY products.ProductName
ORDER BY AvgOrderQuantity DESC;
```","Both queries accurately compute the average order quantity per product and order the results in descending order. The differences lie only in aliases and formatting, which do not affect the outcome.",FT
Identify markets (country or region) with the highest average freight cost.,"SELECT COALESCE(ShipRegion, ShipCountry) AS Market, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY Market ORDER BY AvgFreightCost DESC LIMIT 1;","```sql
SELECT ShipCountry, AVG(Freight) AS AverageFreight
FROM orders
GROUP BY ShipCountry
ORDER BY AverageFreight DESC
LIMIT 1;
```","The generated query only considers ShipCountry, while the ground truth combines ShipRegion and ShipCountry for market identification.","SELECT ShipCountry, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipCountry ORDER BY AvgFreight DESC;","The generated query groups only by ShipCountry, while the ground truth groups by either ShipRegion or ShipCountry. Additionally, the ground truth query limits the result to the top market with the highest average freight cost.",None
