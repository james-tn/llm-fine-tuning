User Question,Ground Truth SQL Query,Generated SQL by Base Model,Explanation by Base Model,Generated SQL by FT Model,Explanation by FT Model,Model that got it right
What is the average discount applied to orders each month?,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY month","```sql
SELECT YEAR(orders.OrderDate) AS year, MONTH(orders.OrderDate) AS month, AVG([Order Details].Discount) AS average_discount
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY YEAR(orders.OrderDate), MONTH(orders.OrderDate)
```","The generated query averages the discounts for all years, grouping by year and month, while the ground truth query restricts data to the year 2023 only, grouping by month.","SELECT DATE_TRUNC('month', o.OrderDate) AS Month, AVG(od.Discount) AS AvgDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;","The generated query does not filter for the year 2023 and uses DATE_TRUNC instead of DATE_FORMAT, which may affect the formatting of the result. These differences can lead to different outputs.",None
Which city had the highest number of orders placed?,"SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1","```sql
SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY ShipCity
ORDER BY NumberOfOrders DESC
LIMIT 1;
```","Both queries group orders by ShipCity, count the OrderID, and then order the results by the count in descending order, limiting to the highest result. They produce the same result.","SELECT ShipCity, COUNT(OrderID) AS NumOrders FROM orders GROUP BY ShipCity ORDER BY NumOrders DESC LIMIT 1",Both queries accurately count the number of orders per city and retrieve the city with the highest count. The difference in alias names (NumOrders vs OrderCount) does not affect the result.,both
Who are the top 5 employees in terms of total sales revenue?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 5;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 5;
```","Both queries correctly calculate total sales revenue per employee and limit the results to the top 5, despite differences in selected columns.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 5","Both queries calculate the total sales revenue per employee and order the results by total sales in descending order, limiting the output to the top 5 employees.",both
Which suppliers have products with zero stock available?,"SELECT s.SupplierID, s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.UnitsInStock = 0;","```sql
SELECT s.SupplierID, s.CompanyName
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
WHERE p.UnitsInStock = 0;
```",The generated SQL query correctly identifies suppliers with products that have zero stock available and matches the ground truth query in logic and outcome.,"SELECT SupplierID, CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE UnitsInStock = 0;","Both queries join suppliers and products tables on SupplierID and filter products with UnitsInStock equal to 0, selecting SupplierID and CompanyName.",both
What is the total number of sales per city?,"SELECT ShipCity, COUNT(OrderID) AS TotalSales FROM orders GROUP BY ShipCity;","```sql
SELECT o.ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY o.ShipCity;
```","The generated query calculates the total sales value per city, while the ground truth query calculates the total number of orders per city.","SELECT ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCity;","The generated query calculates total sales value per city, while the ground truth query counts the number of orders per city.",None
Which customers have received the largest discounts?,"SELECT c.CustomerID, MAX(od.Discount) AS MaxDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY MaxDiscount DESC;","```sql
SELECT customers.CustomerID, customers.CompanyName, SUM([Order Details].Discount) AS TotalDiscount
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID, customers.CompanyName
ORDER BY TotalDiscount DESC;
```","The generated query calculates the total discount per customer, whereas the ground truth query finds the maximum discount received by each customer.","SELECT CustomerID, Discount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE Discount = (SELECT MAX(Discount) FROM [Order Details]) ORDER BY CustomerID;",The generated query finds orders with the maximum discount but doesn't group by customer to find max discounts per customer. The ground truth query groups discounts by customer and sorts them by the maximum discount received.,None
Which customers have placed more than ten orders?,SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 10;,"```sql
SELECT CustomerID
FROM orders
GROUP BY CustomerID
HAVING COUNT(OrderID) > 10;
```",The generated SQL query and the ground truth query are equivalent. They both group the orders by CustomerID and filter those groups to include only customers with more than ten orders.,SELECT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 10;,"Both queries group by CustomerID and find those with more than ten orders. The generated query uses an additional join with the 'customers' table, but it does not affect the outcome since only CustomerID is needed.",both
What is the customer lifetime value of each customer?,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID","```sql
SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN customers ON orders.CustomerID = customers.CustomerID 
GROUP BY customers.CustomerID
```","The generated SQL query and the ground truth SQL query are identical in logic and structure, both correctly calculating the customer lifetime value by summing applicable order details grouped by CustomerID.","SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerLifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;","Both queries calculate the customer lifetime value by summing the revenue from order details (unit price multiplied by quantity and adjusted for any discount) and grouping by customer ID. The operations and logic are equivalent, despite differences in table aliases and order of joins.",both
What is the average number of products ordered per order?,"SELECT AVG(OrderQuantity) AS AvgProductsPerOrder FROM (SELECT OrderID, COUNT(ProductID) AS OrderQuantity FROM [Order Details] GROUP BY OrderID) AS OrderCounts;","```sql
SELECT AVG(TotalProducts) AS AverageProductsPerOrder
FROM (
    SELECT orders.OrderID, SUM([Order Details].Quantity) AS TotalProducts
    FROM orders
    JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
    GROUP BY orders.OrderID
) AS OrderSummary;
```",Both queries calculate the average number of products per order by summarizing total products ordered per order and then averaging these totals.,SELECT AVG(od.Quantity) AS AvgProductsPerOrder FROM [Order Details] od;,"The generated query calculates the average quantity per line item, not per order. The ground truth query calculates the average number of distinct products per order.",Base
Identify the top 5 products with the highest sales revenue.,"SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS product_sales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY product_sales DESC LIMIT 5;","```sql
SELECT [Order Details].ProductID, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY [Order Details].ProductID
ORDER BY TotalSales DESC
LIMIT 5;
```","The generated query includes a JOIN with the orders table, which is unnecessary for calculating product sales, unless there's a specific filter or condition in the orders table that affects the results. This might affect performance but not the result, assuming no WHERE condition is applied based on orders data. The results would be the same; however, the query is more complex than needed.","SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 5;","Both queries calculate total sales revenue per product by summing the quantity and unit price after the discount, group by ProductID, order by the revenue in descending order, and limit to the top 5 products.",FT
How many orders were not shipped at all?,SELECT COUNT(*) FROM orders WHERE ShippedDate IS NULL,"```sql
SELECT COUNT(OrderID) AS NotShippedOrders
FROM orders
WHERE ShippedDate IS NULL;
```","Both queries count the number of orders where 'ShippedDate' is NULL, thus they return the same result.",SELECT COUNT(OrderID) FROM orders WHERE ShippedDate IS NULL;,"Both queries count the number of orders with a NULL ShippedDate, effectively answering the same question.",both
Identify orders that were shipped late and the shipping method used.,"SELECT OrderID, ShipVia FROM orders WHERE ShippedDate > RequiredDate;","```sql
SELECT OrderID, ShipVia
FROM orders
WHERE ShippedDate > RequiredDate;
```","The generated SQL query accurately answers the user's question by selecting orders where the ShippedDate is later than the RequiredDate, and includes the OrderID and ShipVia, which identifies the shipping method used.","SELECT OrderID, FreightCarrier FROM orders WHERE ShippedDate > RequiredDate;","The generated query uses 'FreightCarrier' instead of 'ShipVia', which likely refers to the shipping method in the ground truth query.",Base
Which product category generates the most revenue?,"SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY Revenue DESC LIMIT 1;","```sql
SELECT p.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM [Order Details] od
JOIN products p ON od.ProductID = p.ProductID
GROUP BY p.CategoryID
ORDER BY TotalRevenue DESC
LIMIT 1;
```","The generated query groups by CategoryID to find the category with the most revenue, which answers the user's question. The ground truth query groups by ProductID and does not answer the question about categories.","SELECT CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID ORDER BY TotalRevenue DESC LIMIT 1;","The generated query groups by CategoryID, targeting category revenue, while the ground truth query groups by ProductID, targeting product revenue.",None
Which suppliers have delivered discontinued products?,SELECT DISTINCT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE products.Discontinued = 1;,"```sql
SELECT DISTINCT s.CompanyName, s.ContactName, s.Address, s.City, s.Region, s.PostalCode, s.Country, s.Phone
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
WHERE p.Discontinued = 1;
```","The generated query does not ensure products were delivered, as it lacks a JOIN with 'Order Details' to verify delivery.",SELECT DISTINCT s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1;,"The generated query checks for suppliers of discontinued products but doesn't verify if they were actually delivered, as it misses the join with [Order Details].",None
What is the revenue generated from each product?,"SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS Revenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS Revenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName;
```","The generated SQL query and the ground truth SQL query are identical in structure and logic, both correctly calculating the revenue for each product by grouping on ProductID and ProductName and summing the product of Quantity and UnitPrice from the Order Details.","SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName;","The generated SQL query includes the Discount in calculating the TotalRevenue, which the ground truth query does not consider. This leads to different results.",Base
How many products are currently being discontinued?,SELECT COUNT(*) FROM products WHERE Discontinued = 1,"```sql
SELECT COUNT(*) AS DiscontinuedProducts
FROM products
WHERE Discontinued = 1;
```",Both queries count products that are currently being discontinued by using the same condition 'WHERE Discontinued = 1'.,SELECT COUNT(*) FROM products WHERE Discontinued = 1;,"The generated SQL query accurately answers the user's question and yields the same results as the ground truth query. Both queries count the number of products where Discontinued equals 1, which is the correct interpretation of the question.",both
What is the average shipping cost per order for each shipper?,"SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName","```sql
SELECT shippers.ShipperID, AVG(orders.Freight) AS average_shipping_cost
FROM orders
JOIN shippers ON orders.ShipVia = shippers.ShipperID
GROUP BY shippers.ShipperID
```","The generated query groups results by ShipperID, while the ground truth groups by CompanyName. This could yield different results if different shippers have the same CompanyName.","SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",Both queries are identical and will yield the same results.,FT
Which category has the longest list of discontinued products?,"SELECT c.CategoryID, COUNT(p.ProductID) AS DiscontinuedCount FROM products p JOIN categories c ON p.CategoryID = c.CategoryID WHERE p.Discontinued = 1 GROUP BY c.CategoryID ORDER BY DiscontinuedCount DESC LIMIT 1;","```sql
SELECT p.CategoryID, COUNT(*) AS DiscontinuedCount
FROM products p
WHERE p.Discontinued = 1
GROUP BY p.CategoryID
ORDER BY DiscontinuedCount DESC
LIMIT 1;
```",Both queries correctly count the number of discontinued products per category and return the category with the highest count. The join with the categories table in the ground truth query doesn't affect the outcome since CategoryID alone is sufficient for grouping.,"SELECT products.CategoryID, COUNT(*) FROM products WHERE products.Discontinued = 1 GROUP BY products.CategoryID ORDER BY COUNT(*) DESC LIMIT 1;","Both queries aim to find the category with the most discontinued products. They count discontinued products per category and return the category with the highest count. The generated query directly uses the products table, assuming CategoryID is present, while the ground truth query includes an explicit join with the categories table, but this does not affect the result. Hence, both queries effectively return the same result.",both
What is the average unit price of all products?,SELECT AVG(UnitPrice) FROM products,"```sql
SELECT AVG(UnitPrice) AS AverageUnitPrice FROM products;
```","The generated query calculates the average unit price of all products, matching the intent of the ground truth query. Both queries yield the same result.",SELECT AVG(UnitPrice) FROM products;,Both queries calculate the average of the UnitPrice from the products table and will produce the same result.,both
Which customers have placed orders with the highest discounts?,"SELECT o.CustomerID, MAX(od.Discount) AS MaxDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID ORDER BY MaxDiscount DESC;","```sql
SELECT orders.CustomerID, SUM([Order Details].Discount) AS TotalDiscount
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY orders.CustomerID
ORDER BY TotalDiscount DESC;
```","The generated query calculates total discounts per customer, while the ground truth query finds the maximum discount per customer.","SELECT c.CustomerID, od.OrderID, od.UnitPrice, od.Quantity, od.Discount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount = (SELECT MAX(Discount) FROM [Order Details]) ORDER BY od.Discount DESC;","The generated query returns all details for customers with an order at the maximum discount level, but not all customers who have placed orders. The ground truth query returns customers with their respective maximum discount, ordered by discount value.",None
Which products have sales exceeding $5000?,SELECT ProductName FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName HAVING SUM([Order Details].Quantity * [Order Details].UnitPrice) > 5000;,"```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
HAVING TotalSales > 5000;
```","The ground truth query returns only the ProductName, while the generated query returns ProductID and TotalSales as well.",SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID HAVING SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) > 5000;,"The generated query includes a discount in the sales calculation, while the ground truth query does not consider any discounts.",None
Calculate the total discount given on products sold in the last month.,"SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount) AS TotalDiscount FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE());","```sql
SELECT SUM([Order Details].Discount) AS TotalDiscount
FROM [Order Details]
WHERE OrderID IN (
    SELECT OrderID
    FROM Orders
    WHERE OrderDate >= DATEADD(MONTH, -1, GETDATE())
);
```","The generated query calculates the sum of discounts per order without considering the extended price of each product. The ground truth query calculates the total discount value by multiplying the quantity, unit price, and discount rate, which yields a different result.","SELECT SUM(d.UnitPrice * d.Quantity * d.Discount) AS TotalDiscount FROM orders o JOIN [Order Details] d ON o.OrderID = d.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);","The generated query uses an incorrect date range condition. It only filters by dates greater than or equal to one month ago, missing orders placed exactly one month ago. The ground truth query correctly includes orders between one month ago and today.",None
Which company name appears most frequently in the customer database?,"SELECT CompanyName, COUNT(*) AS Frequency FROM customers GROUP BY CompanyName ORDER BY Frequency DESC LIMIT 1;","```sql
SELECT CompanyName, COUNT(*) as Frequency
FROM customers
GROUP BY CompanyName
ORDER BY Frequency DESC
LIMIT 1;
```",Both queries are functionally equivalent; they count occurrences of company names and return the one with the highest frequency.,"SELECT CompanyName, COUNT(*) AS NameCount FROM customers GROUP BY CompanyName ORDER BY NameCount DESC LIMIT 1;","Both queries group by CompanyName, count the occurrences, order by the count in descending order, and limit the results to 1, achieving the same outcome.",both
What are the top 5 cities by number of shipments?,"SELECT ShipCity, COUNT(OrderID) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 5","```sql
SELECT ShipCity, COUNT(OrderID) AS NumberOfShipments
FROM orders
GROUP BY ShipCity
ORDER BY NumberOfShipments DESC
LIMIT 5;
```",Both queries count the number of shipments per city and return the top 5 cities by shipment count. The difference in alias names does not affect the result.,"SELECT ShipCity, COUNT(OrderID) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 5;",Both queries are functionally identical and answer the question by selecting the top 5 cities based on number of shipments.,both
What is the stock-to-sale ratio for each product?,"SELECT ProductName, UnitsInStock * 1.0 / SUM([Order Details].Quantity) AS StockToSaleRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;","```sql
SELECT 
    p.ProductID,
    p.ProductName,
    (p.UnitsInStock / NULLIF(SUM(od.Quantity), 0)) AS StockToSaleRatio
FROM 
    products p
LEFT JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.ProductName;
```","Both queries calculate the stock-to-sale ratio for each product by dividing UnitsInStock by the sum of ordered quantities, although they handle division by zero and product ID inclusion slightly differently.","SELECT p.ProductName, CAST(p.UnitsInStock AS DECIMAL) / NULLIF(SUM(od.Quantity), 0) AS StockToSaleRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName, p.UnitsInStock;","The generated query includes 'p.UnitsInStock' in the GROUP BY clause, which might affect result aggregation, and it uses NULLIF to handle division by zero errors, unlike the ground truth query. These differences can lead to different results.",Base
Identify products with the highest discount offered historically.,"SELECT ProductID, MAX(Discount) AS MaxDiscount FROM [Order Details] GROUP BY ProductID ORDER BY MaxDiscount DESC LIMIT 1;","```sql
SELECT p.ProductID, p.ProductName, MAX(od.Discount) AS HighestDiscount
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY HighestDiscount DESC;
```","The generated query returns all products with their highest discounts, ordered by discount, but does not limit the results to those with the absolute highest discount overall. The ground truth query identifies only the product with the highest single discount.","SELECT p.ProductID, p.ProductName, MAX(od.Discount) AS MaxDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY MaxDiscount DESC LIMIT 5;","The generated query retrieves the top 5 products with the highest discount along with their names, whereas the ground truth query retrieves only the product with the highest discount, without product names, and limits the result to 1.",None
Evaluate the impact of hiring date on the sales performance.,"SELECT employees.EmployeeID, YEAR(employees.HireDate) AS HireYear, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, YEAR(employees.HireDate)","```sql
SELECT 
    e.HireDate,
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    e.HireDate
ORDER BY 
    e.HireDate;
```","The generated query groups by HireDate, resulting in the same date for each employee's sales totals, while the ground truth groups by EmployeeID and HireYear, allowing for performance analysis per employee and year.","SELECT e.EmployeeID, YEAR(e.HireDate) AS HireYear, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS EmployeeSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, YEAR(e.HireDate);","Both queries calculate total sales per employee per hiring year and group by employee and hire year. Despite different naming conventions, they produce the same results.",FT
Determine the average unit price of products supplied by each supplier.,"SELECT s.SupplierID, AVG(p.UnitPrice) AS AvgUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;","```sql
SELECT suppliers.SupplierID, AVG(products.UnitPrice) AS AverageUnitPrice
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
GROUP BY suppliers.SupplierID;
```","Both queries calculate the average unit price of products for each supplier by joining the suppliers and products tables and grouping by SupplierID. The differences are only in the aliasing and naming, which do not affect the result.","SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AvgUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;","The generated query groups by CompanyName, while the ground truth query groups by SupplierID. This can result in different groupings if CompanyName is not unique per SupplierID.",Base
Identify the top 5 suppliers by total sales revenue generated.,"SELECT suppliers.SupplierID, CompanyName, SUM([Order Details].UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID, CompanyName ORDER BY TotalSales DESC LIMIT 5;","```sql
SELECT s.SupplierID, s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY s.SupplierID, s.CompanyName
ORDER BY TotalSales DESC
LIMIT 5;
```","The generated SQL query is functionally equivalent to the ground truth query. Both queries join the same tables and compute the total sales revenue in the same manner, with the same grouping and ordering logic to find the top 5 suppliers.","SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY total_sales DESC LIMIT 5","Both queries aim to find the top 5 suppliers by total sales revenue. They aggregate sales using the same formula and group by supplier name, ordering by total sales. The inclusion of the 'orders' table in the ground truth does not change the aggregation results in this context.",both
How many orders were shipped via each shipping company?,"SELECT shippers.CompanyName, COUNT(orders.OrderID) AS order_count FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName","```sql
SELECT orders.ShipVia, COUNT(orders.OrderID) AS number_of_orders
FROM orders
GROUP BY orders.ShipVia
```","The generated query groups counts by the 'ShipVia' ID from 'orders', while the ground truth query groups by the 'CompanyName' from 'shippers'. The generated query does not join the 'shippers' table, so it misses mapping 'ShipVia' to company names.","SELECT ShipVia, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipVia;","The generated query only counts orders by 'ShipVia' ID, not by shipping company names. The ground truth query joins the 'orders' table with 'shippers' to count orders by company name.",None
Identify the top 5 products with the highest sales performance based on quantity sold.,"SELECT p.ProductID, SUM(od.Quantity) AS TotalQuantitySold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY TotalQuantitySold DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantitySold
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalQuantitySold DESC
LIMIT 5;
```",Both queries accurately identify the top 5 products with the highest sales based on quantity sold. They both sum the quantity from the 'Order Details' table and order by the total quantity in descending order. The inclusion of ProductName in the SELECT statement does not affect the result for the top 5 products by quantity sold.,"SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSold DESC LIMIT 5;",The generated query selects 'ProductName' while the ground truth selects 'ProductID'. Both should select the same column to ensure identical results.,Base
Determine the most common discount rates used.,"SELECT Discount, COUNT(*) AS Count FROM [Order Details] GROUP BY Discount ORDER BY Count DESC;","```sql
SELECT Discount, COUNT(*) AS DiscountCount
FROM [Order Details]
GROUP BY Discount
ORDER BY DiscountCount DESC;
```","Both queries calculate the count of each discount rate from the Order Details table and order the results by the count in descending order, effectively answering the user's question.","SELECT discount, COUNT(*) as frequency FROM [Order Details] GROUP BY discount ORDER BY frequency DESC;","Both queries select the discount and count the occurrences, grouping by discount, and ordering by the count in descending order. Case sensitivity in SQL keywords and aliases has no impact on functionality, so they yield the same results.",both
Which shipping company has the highest average delay in delivery?,"SELECT ShipVia, AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AverageDelay FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipVia ORDER BY AverageDelay DESC LIMIT 1;","```sql
SELECT ShipVia, AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AverageDelay
FROM orders
WHERE ShippedDate IS NOT NULL
GROUP BY ShipVia
ORDER BY AverageDelay DESC
LIMIT 1;
```","The generated query considers all shipped orders, while the ground truth query only considers orders with a shipped date later than the required date.","SELECT ShipVia, AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AverageDelay FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipVia ORDER BY AverageDelay DESC LIMIT 1;",The generated SQL query is identical to the ground truth query and correctly answers the user's question by finding the shipping company with the highest average delay.,FT
Which products have been discontinued but still have stock available?,"SELECT ProductName, UnitsInStock FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;","```sql
SELECT ProductID, ProductName, UnitsInStock
FROM products
WHERE Discontinued = 1 AND UnitsInStock > 0;
```",Both queries select products that are discontinued and still have units in stock. The difference in selected columns (ProductID) does not affect the condition or main intent of the query.,SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;,"The generated SQL query selects only ProductName, while the ground truth query selects both ProductName and UnitsInStock.",Base
Calculate the total freight cost for all orders shipped to the USA.,SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShipCountry = 'USA';,"```sql
SELECT SUM(Freight) AS TotalFreightCost
FROM orders
WHERE ShipCountry = 'USA';
```",Both queries calculate the total freight cost for orders shipped to the USA and yield the same results. The syntax and logic are identical.,SELECT SUM(Freight) AS TotalFreight FROM orders WHERE ShipCountry = 'USA';,"Both queries calculate the sum of the Freight for orders shipped to the USA. The only difference is the alias name, which does not affect the result.",both
Which product has the highest number of units on order?,"SELECT p.ProductID, p.UnitsOnOrder FROM products p ORDER BY p.UnitsOnOrder DESC LIMIT 1;","```sql
SELECT ProductID, UnitsOnOrder 
FROM products 
ORDER BY UnitsOnOrder DESC 
LIMIT 1;
```","Both queries select ProductID and UnitsOnOrder from the 'products' table, sorting by UnitsOnOrder in descending order and limiting the result to one, thus yielding the same result.",SELECT products.ProductName FROM products WHERE products.UnitsOnOrder = (SELECT MAX(products.UnitsOnOrder) FROM products);,"The generated query selects the ProductName, while the ground truth selects ProductID and UnitsOnOrder. They answer different aspects of which product has the most units on order.",Base
Which shipping method is used the most?,"SELECT ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1","```sql
SELECT ShipVia, COUNT(*) AS OrderCount
FROM orders
GROUP BY ShipVia
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries count the orders grouped by ShipVia, sort them in descending order based on the count, and limit the result to one, effectively determining the most used shipping method.","SELECT ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;","Both queries count the occurrences of each shipping method and return the one used the most, ordering by usage count in descending order and selecting the top result.",both
Which products have the highest quantities on order?,"SELECT ProductName, UnitsOnOrder FROM products ORDER BY UnitsOnOrder DESC;","```sql
SELECT p.ProductID, p.ProductName, p.UnitsOnOrder
FROM products p
ORDER BY p.UnitsOnOrder DESC;
```","Both queries select products ordered by UnitsOnOrder in descending order, showing products with the highest quantities on order. ProductID in the generated query does not affect the result.","SELECT ProductID, ProductName, UnitsOnOrder FROM products ORDER BY UnitsOnOrder DESC;","The generated query includes 'ProductID', which is not required according to the ground truth query.",Base
Which products have the highest sales quantity this month?,"SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m') GROUP BY products.ProductID, products.ProductName ORDER BY TotalQuantity DESC;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE MONTH(od.OrderID) = MONTH(CURRENT_DATE) AND YEAR(od.OrderID) = YEAR(CURRENT_DATE)
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSales DESC
LIMIT 10;
```","The generated query uses 'MONTH(od.OrderID)' and 'YEAR(od.OrderID)', which assumes 'OrderID' holds date information, whereas the ground truth uses 'OrderDate'. This might yield different results if 'OrderID' is not a date field.","SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE MONTH([Order Details].OrderID) = MONTH(CURRENT_DATE) AND YEAR([Order Details].OrderID) = YEAR(CURRENT_DATE) GROUP BY products.ProductID, products.ProductName ORDER BY TotalQuantity DESC LIMIT 10;","The generated query uses OrderID to filter dates instead of OrderDate, which may lead to incorrect results.",None
What is the product-wise breakdown of Total Sales for this year?,"SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY od.ProductID ORDER BY ProductSales DESC;","```sql
SELECT 
    [Order Details].ProductID, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE 
    YEAR(orders.OrderDate) = YEAR(CURRENT_DATE)
GROUP BY 
    [Order Details].ProductID;
```","Both queries calculate the total sales by product for the current year, using a similar approach with minor differences in aliases and order by clause. The key operations and filters are equivalent.","SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY od.ProductID;","Both queries calculate the product-wise sum of total sales for the current year and have the same logic. The main difference is in the ordering and alias naming, which do not affect the equivalence of the results.",both
Which region has the highest number of orders?,"SELECT ShipRegion, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipRegion ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT ShipRegion, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY ShipRegion
ORDER BY NumberOfOrders DESC
LIMIT 1;
```","Both queries group by 'ShipRegion', count 'OrderID', order by the count in descending order, and limit the result to one, thus returning the same result.","SELECT ShipRegion, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipRegion ORDER BY NumberOfOrders DESC LIMIT 1;","Both queries calculate the number of orders per region and return the region with the highest count, despite slight differences in alias names for the count.",both
List the suppliers with products that are consistently ordered.,SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName HAVING COUNT(DISTINCT [Order Details].OrderID) > 1;,"```sql
SELECT DISTINCT s.SupplierID, s.CompanyName
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY s.SupplierID, s.CompanyName
HAVING COUNT(od.OrderID) > 0
```","The generated query uses COUNT(od.OrderID) > 0, which allows suppliers with any orders to be included, not just those with consistent orders. The ground truth requires COUNT(DISTINCT [Order Details].OrderID) > 1, ensuring multiple distinct orders for a supplier's products.",SELECT s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName HAVING COUNT(p.ProductID) = COUNT(DISTINCT CASE WHEN p.UnitsOnOrder > 0 THEN p.ProductID END);,The generated query checks if all products from a supplier have some units on order. The ground truth checks for suppliers with products ordered in more than one distinct order.,None
Identify the products that are provided by multiple suppliers.,SELECT P.ProductName FROM products P JOIN (SELECT ProductID FROM products GROUP BY ProductID HAVING COUNT(DISTINCT SupplierID) > 1) AS MultiSupplier ON P.ProductID = MultiSupplier.ProductID;,"```sql
SELECT ProductID, ProductName
FROM products
GROUP BY ProductID, ProductName
HAVING COUNT(DISTINCT SupplierID) > 1;
```",Both queries effectively identify products that have more than one distinct supplier.,SELECT ProductName FROM products GROUP BY ProductName HAVING COUNT(DISTINCT SupplierID) > 1;,"Both queries identify products offered by multiple suppliers by checking the count of distinct suppliers per product. The generated query achieves this using GROUP BY on ProductName directly, which is functionally equivalent to the ground truth's use of a subquery.",both
What are the average sales per order for each employee?,"SELECT E.EmployeeID, AVG(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS AverageSalesPerOrder FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY E.EmployeeID;","```sql
SELECT 
    e.EmployeeID,
    e.FirstName,
    e.LastName,
    AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageSalesPerOrder
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    e.EmployeeID, e.FirstName, e.LastName
```","Both queries calculate the average sales per order for each employee, using the same joins and aggregation logic.","SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN ""[Order Details]"" od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","Both queries calculate the average sales per order for each employee by joining the 'employees', 'orders', and 'Order Details' tables appropriately and applying the same calculation and grouping logic.",both
Determine the total number of customers who have never placed an order.,SELECT COUNT(CustomerID) AS NeverOrdered FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders);,"```sql
SELECT COUNT(*) AS TotalCustomers
FROM customers
WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders);
```","Both queries count customers whose IDs are not present in the orders table, thus yielding the same result.",SELECT COUNT(CustomerID) FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders);,"Both queries count the customers whose IDs do not appear in the orders table, thus answering the user's question accurately.",both
How many orders include a discount greater than 20%?,SELECT COUNT(DISTINCT [Order Details].OrderID) AS HighDiscountOrders FROM [Order Details] WHERE [Order Details].Discount > 0.2;,"```sql
SELECT COUNT(DISTINCT OrderID) AS OrdersWithDiscount
FROM [Order Details]
WHERE Discount > 0.20;
```","Both queries count distinct OrderIDs from the 'Order Details' table where the discount is greater than 20%, yielding the same result.",SELECT COUNT(DISTINCT OrderID) FROM [Order Details] WHERE Discount > 0.2;,Both queries count distinct OrderID from [Order Details] where the Discount is greater than 0.2.,both
Which products have less than 10 units in stock and need reordering?,SELECT ProductName FROM products WHERE UnitsInStock < 10 AND UnitsInStock <= ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock < 10 AND UnitsInStock <= ReorderLevel;
```","The generated query selects additional columns (ProductID, UnitsInStock, ReorderLevel) not present in the ground truth query, which only selects ProductName.","SELECT ProductID, ProductName FROM products WHERE UnitsInStock < 10 AND UnitsInStock <= ReorderLevel;","The generated query selects 'ProductID' in addition to 'ProductName', which is not included in the ground truth query.",None
What is the average shipping cost per order in 2023?,SELECT AVG(orders.Freight) AS avg_shipping_cost_per_order FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31',"```sql
SELECT AVG(orders.Freight) AS shipping_cost_per_order FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
```","The generated SQL query and the ground truth query are functionally equivalent, calculating the average freight for orders in 2023. The difference is only in the alias name.",SELECT AVG(ShippedCost) AS AvgShippingCost FROM orders WHERE YEAR(OrderDate) = 2023;,"Both queries calculate the average shipping cost for orders placed in 2023, using different date filters but covering the same year.",both
Find any correlation between the employees' hire date and their performance in sales.,"SELECT e.EmployeeID, e.HireDate, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.HireDate ORDER BY TotalSales DESC","```sql
SELECT 
    e.HireDate,
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    e.HireDate
ORDER BY 
    e.HireDate;
```","The generated query aggregates by HireDate only, while the ground truth aggregates by EmployeeID and HireDate. This may lead to different results if multiple employees share the same hire date.","SELECT e.EmployeeID, YEAR(e.HireDate) AS HireYear, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, YEAR(e.HireDate);","The generated SQL query groups by the year of hire date, while the ground truth groups by the exact hire date, affecting the granularity of the analysis. Additionally, the ground truth orders results by TotalSales, which the generated query does not.",None
Calculate the average unit price of all products per supplier.,"SELECT s.CompanyName, AVG(p.UnitPrice) AS AvgUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName;","```sql
SELECT suppliers.SupplierID, 
       suppliers.CompanyName, 
       AVG(products.UnitPrice) AS AverageUnitPrice
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
GROUP BY suppliers.SupplierID, suppliers.CompanyName;
```",Both queries calculate the average unit price of products for each supplier by joining the suppliers and products tables and grouping by the supplier's name. The difference in the methods of grouping (SupplierID vs. CompanyName) does not affect the correctness as SupplierID uniquely identifies each supplier.,"SELECT products.SupplierID, AVG(products.UnitPrice) AS AverageUnitPrice FROM products GROUP BY products.SupplierID;","The generated query calculates the average unit price per SupplierID, but does not include the supplier's CompanyName like the ground truth query does.",Base
Find the correlation between employee hire date and total sales.,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, YEAR(CURDATE()) - YEAR(e.HireDate) AS YearsSinceHire FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","```sql
SELECT 
    e.HireDate, 
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    e.HireDate
```","The generated query summarizes sales by hire date without calculating correlation, while the ground truth summarizes by employee and calculates tenure, which can be used for correlation analysis.","SELECT e.EmployeeID, CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, DATEDIFF(CURDATE(), e.HireDate) AS DaysSinceHire FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName;","The generated query calculates DaysSinceHire, while the ground truth query calculates YearsSinceHire and omits the employee name concatenation. They both calculate TotalSales, but the correlation between hire date and total sales is not directly addressed in either query.",None
What percentage of orders were delivered on time this month?,"SELECT COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE);","```sql
SELECT 
    (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0) / COUNT(OrderID) AS On_time_Delivery_Rate
FROM 
    orders
WHERE 
    MONTH(OrderDate) = MONTH(CURRENT_DATE()) AND YEAR(OrderDate) = YEAR(CURRENT_DATE());
```","The generated query filters orders using current month and year comparison, which might omit records if the year condition does not match exactly. The ground truth truncates the date to the start of the month, which is more accurate for monthly filtering.","SELECT COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*) AS OnTimePercentage FROM orders WHERE DATE_TRUNC('month', OrderDate) = DATE_TRUNC('month', CURRENT_DATE);",Both queries calculate the percentage of on-time orders for the current month by comparing ShippedDate with RequiredDate and checking if OrderDate falls within the current month. The use of COUNT and DATE_TRUNC ensures they yield the same result.,FT
Which suppliers are located in 'USA' and how many products do they supply?,"SELECT CompanyName, COUNT(ProductID) FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE Country = 'USA' GROUP BY CompanyName;","```sql
SELECT s.SupplierID, s.CompanyName, COUNT(p.ProductID) AS NumberOfProducts
FROM suppliers s
LEFT JOIN products p ON s.SupplierID = p.SupplierID
WHERE s.Country = 'USA'
GROUP BY s.SupplierID, s.CompanyName;
```","Both queries correctly select suppliers located in the USA and count the products they supply. They group by the supplier's CompanyName and SupplierID (only relevant in the generated query due to its structure), ensuring accurate product counts per supplier.","SELECT SupplierID, COUNT(ProductID) FROM products WHERE Country = 'USA' GROUP BY SupplierID;","The generated SQL query filters the 'Country' from the 'products' table instead of joining and using 'Country' from the 'suppliers' table, which may lead to incorrect filtering if the 'Country' field resides only in 'suppliers'.",Base
Which employee has the most orders shipped on time?,"SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OnTimeOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY employees.EmployeeID ORDER BY OnTimeOrders DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS OnTimeOrders
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.ShippedDate <= o.RequiredDate
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY OnTimeOrders DESC
LIMIT 1;
```",Both queries correctly count the number of on-time orders per employee and return the employee with the most on-time orders. The differences in column selection for first and last name do not affect the correctness of the result.,"SELECT EmployeeID, COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY EmployeeID ORDER BY OnTimeOrders DESC LIMIT 1;","The generated query does not join the employees table, which might not directly map employees to their orders if the orders table doesn't have direct employee information.",Base
Which are the top 5 products by sales revenue?,"SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS ProductSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY ProductSales DESC LIMIT 5;","```sql
SELECT 
    [Order Details].ProductID, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM 
    [Order Details]
JOIN 
    orders ON [Order Details].OrderID = orders.OrderID
GROUP BY 
    [Order Details].ProductID
ORDER BY 
    TotalRevenue DESC
LIMIT 5;
```","Both queries calculate total revenue per product using the same formula, group by ProductID, order the results by revenue in descending order, and limit the results to the top 5. The presence of a JOIN in the generated query does not affect the result as it doesn't alter the calculation in context.","SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 5;","Both queries calculate the total revenue for each product and order them to find the top 5, producing the same results.",both
Calculate the average fulfillment time for shipped orders.,"SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.ShippedDate IS NOT NULL","```sql
SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_fulfillment_time FROM orders WHERE orders.ShippedDate IS NOT NULL
```","The generated and ground truth queries calculate the same average fulfillment time by using DATEDIFF between ShippedDate and OrderDate, and both filter out null ShippedDate entries.","SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL;",Both queries calculate the average fulfillment time for orders that have been shipped using the DATEDIFF function and filter for non-null ShippedDate values. Differences in syntax do not affect the result.,both
What was the most common order month for new customers?,"SELECT EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, COUNT(o.CustomerID) AS NewCustomerCount FROM orders o JOIN customers c ON o.CustomerID = c.CustomerID WHERE o.OrderDate = c.RegisterDate GROUP BY OrderMonth ORDER BY NewCustomerCount DESC LIMIT 1;","```sql
SELECT EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, COUNT(o.OrderID) AS OrderCount
FROM orders o
JOIN customers c ON o.CustomerID = c.CustomerID
WHERE o.OrderDate = (SELECT MIN(OrderDate) FROM orders WHERE CustomerID = c.CustomerID)
GROUP BY OrderMonth
ORDER BY OrderCount DESC
LIMIT 1;
```",The generated query checks for the first order date rather than the registration date to determine new customers.,SELECT EXTRACT(MONTH FROM orders.OrderDate) AS order_month FROM orders GROUP BY order_month ORDER BY COUNT(DISTINCT orders.CustomerID) DESC LIMIT 1;,"The generated query does not check if the order date is the same as the customer's registration date, which is needed to identify new customers.",None
What is the customer lifetime value for customers in the USA?,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Country = 'USA' GROUP BY customers.CustomerID","```sql
SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN customers ON orders.CustomerID = customers.CustomerID 
WHERE customers.Country = 'USA' 
GROUP BY customers.CustomerID
```","The generated SQL query is identical to the ground truth query in terms of logic and structure, and both will yield the same results.","SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Country = 'USA' GROUP BY customers.CustomerID","The generated SQL query and the ground truth SQL query are identical, therefore they yield the same results and accurately answer the user's question about customer lifetime value for customers in the USA.",both
Which product has the highest total sales revenue?,SELECT ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY SUM([Order Details].Quantity * [Order Details].UnitPrice) DESC LIMIT 1;,"```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSalesRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSalesRevenue DESC
LIMIT 1;
```","The generated SQL query returns the ProductID, ProductName, and TotalSalesRevenue, while the ground truth query only returns ProductName. The logic for calculating total sales revenue and ordering is otherwise the same, so the actual product with the highest revenue would be the same across both queries.","SELECT OrderDetails.ProductID, SUM(OrderDetails.UnitPrice * OrderDetails.Quantity * (1 - OrderDetails.Discount)) AS TotalSales FROM OrderDetails GROUP BY OrderDetails.ProductID ORDER BY TotalSales DESC LIMIT 1;","The queries differ in calculating sales revenue, handling discounts, and their result columns. The generated query accounts for discounts but returns ProductID, while the ground truth does not account for discounts and returns ProductName.",None
What percentage of orders have a shipping address in the 'California' region?,SELECT (COUNT(OrderID) FILTER (WHERE ShipRegion = 'California') * 100.0 / COUNT(OrderID)) AS PercentageInCalifornia FROM orders;,"```sql
SELECT 
    (COUNT(OrderID) * 100.0 / (SELECT COUNT(OrderID) FROM orders)) AS PercentageInCalifornia
FROM 
    orders
WHERE 
    ShipRegion = 'California';
```","Both queries calculate the percentage of orders with a shipping address in 'California'. The generated query uses a subquery for the total count, while the ground truth uses the FILTER clause. Both methods yield the same result.",SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM orders) AS Percentage FROM orders WHERE ShipRegion = 'California';,"Both queries calculate the percentage of orders with a shipping address in California by dividing the count of such orders by the total count of orders, then multiplying by 100.",both
Which suppliers provide products that have been ordered more than 100 times?,SELECT SupplierID FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY SupplierID HAVING COUNT(od.ProductID) > 100;,"```sql
SELECT DISTINCT p.SupplierID
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.SupplierID
HAVING SUM(od.Quantity) > 100;
```","The generated query checks suppliers based on the total quantity of products ordered, while the ground truth query checks based on the number of order occurrences for products.",SELECT p.SupplierID FROM products p INNER JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID HAVING SUM(od.Quantity) > 100;,"The generated SQL query uses SUM(od.Quantity) > 100 to check total quantity ordered, whereas the ground truth query uses COUNT(od.ProductID) > 100 to check order count. These may yield different results.",None
Which shipping method had the highest number of delays in the last quarter?,"SELECT ShipVia, COUNT(*) AS Delays FROM orders WHERE ShippedDate > RequiredDate AND TO_CHAR(OrderDate, 'YYYY-Q') = TO_CHAR(DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months', 'YYYY-Q') GROUP BY ShipVia ORDER BY Delays DESC LIMIT 1;","```sql
SELECT ShipVia, COUNT(OrderID) AS DelayCount
FROM orders
WHERE ShippedDate > RequiredDate 
  AND OrderDate >= DATEADD(QUARTER, -1, GETDATE())
GROUP BY ShipVia
ORDER BY DelayCount DESC
LIMIT 1;
```","The generated query uses DATEADD(QUARTER, -1, GETDATE()) to determine the last quarter, which may not correctly align with how quarters are defined in the ground truth query that uses DATE_TRUNC and interval manipulation.","SELECT ShipVia, COUNT(OrderID) AS DelayedOrders FROM orders WHERE ShippedDate > RequiredDate AND QUARTER(OrderDate) = 4 GROUP BY ShipVia ORDER BY DelayedOrders DESC LIMIT 1;","The generated query filters orders from the fourth quarter, while the ground truth query correctly identifies the last quarter based on the current date.",None
Analyze the impact of employee birth month on sales performance.,"SELECT e.EmployeeID, MONTH(e.BirthDate) AS BirthMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, MONTH(e.BirthDate);","```sql
SELECT 
    MONTH(BirthDate) AS BirthMonth, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM 
    employees
JOIN 
    orders ON employees.EmployeeID = orders.EmployeeID
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    BirthMonth
ORDER BY 
    BirthMonth;
```","The generated query groups by birth month and aggregates sales across all employees within each month, whereas the ground truth query groups by both employee and birth month, allowing for analysis of individual employee performance by birth month.","SELECT employees.EmployeeID, MONTH(employees.BirthDate) AS BirthMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, MONTH(employees.BirthDate);",Both queries calculate total sales per employee grouped by birth month and the logic is identical even though aliasing differs.,FT
What is the total freight cost for each shipping country?,"SELECT orders.ShipCountry, SUM(orders.Freight) AS TotalFreight FROM orders GROUP BY orders.ShipCountry","```sql
SELECT ShipCountry, SUM(Freight) AS TotalFreightCost
FROM orders
GROUP BY ShipCountry;
```",Both queries calculate the total freight cost for each shipping country by summing up the Freight column and grouping by ShipCountry. They will yield the same results.,"SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;",Both queries calculate the total freight cost grouped by shipping country using the same logic and will yield the same results.,both
What was the average order value each month?,"SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_TRUNC('month', orders.OrderDate);","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY Month
ORDER BY Month;
```","The generated query uses COUNT(DISTINCT orders.OrderID) for each month, which should be more appropriately computed by dividing the total sales by COUNT(orders.OrderID) without the DISTINCT for each order per month.","SELECT MONTH(OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY MONTH(OrderDate);","The generated query uses MONTH() function which does not handle year and month together, potentially grouping data from different years incorrectly. The ground truth query uses DATE_TRUNC('month', ...) which accounts for month and year, ensuring proper grouping.",None
What is the average shipping cost per order for each shipping method?,"SELECT ShipVia, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, AVG(Freight) AS AverageShippingCost
FROM orders
GROUP BY ShipVia;
```","The generated SQL query calculates the average freight cost grouped by ShipVia, which answers the user's question. The difference in alias naming does not affect the equivalence of the queries.","SELECT ShipVia, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY ShipVia;","Both queries calculate the average shipping cost per order for each shipping method by using AVG on the Freight column and grouping by ShipVia. The only difference is the alias, which does not affect the correctness of the query.",both
Identify the top 5 customers by order count.,"SELECT CustomerID, COUNT(*) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 5;","```sql
SELECT CustomerID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY CustomerID
ORDER BY OrderCount DESC
LIMIT 5;
```","Both queries count the orders for each customer and return the top 5 customers by order count. The use of COUNT(OrderID) and COUNT(*) produces the same result if OrderID is never null, giving identical outcomes.","SELECT customers.CompanyName, COUNT(orders.OrderID) AS order_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CompanyName ORDER BY order_count DESC LIMIT 5",The generated query retrieves CompanyName while the ground truth uses CustomerID. They may yield different outputs if there are multiple customers per CompanyName.,Base
What is the average time taken from order placement to shipment for each employee?,"SELECT employees.EmployeeID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageShippingTime FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;","```sql
SELECT 
    e.EmployeeID,
    e.FirstName,
    e.LastName,
    AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageShippingTime
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
WHERE 
    o.ShippedDate IS NOT NULL
GROUP BY 
    e.EmployeeID, e.FirstName, e.LastName
```","The generated SQL query retrieves the average shipping time for each employee, similar to the ground truth query. Both queries perform the same calculations and their results would be the same, despite minor differences in column selection.","SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",Both queries compute the average time difference between OrderDate and ShippedDate for each EmployeeID and should yield the same result.,both
Which suppliers deliver products to the most diverse set of countries?,"SELECT s.SupplierID, COUNT(DISTINCT o.ShipCountry) AS CountryCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID ORDER BY CountryCount DESC;","```sql
SELECT s.SupplierID, s.CompanyName, COUNT(DISTINCT o.ShipCountry) AS CountryCount
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY s.SupplierID, s.CompanyName
ORDER BY CountryCount DESC;
```","Both queries count distinct countries to which each supplier delivers products. The results will match even though the Generated SQL includes the supplier's company name, as it's irrelevant to the count and order.","SELECT s.CompanyName, COUNT(DISTINCT o.ShipCountry) AS CountryCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID GROUP BY s.CompanyName ORDER BY CountryCount DESC;","The generated query uses s.CompanyName as the grouping column, while the ground truth query uses s.SupplierID. This could lead to discrepancies if multiple suppliers share the same company name.",Base
Which city has the highest number of supplier contacts?,"SELECT City, COUNT(ContactName) AS ContactCount FROM suppliers GROUP BY City ORDER BY ContactCount DESC LIMIT 1;","```sql
SELECT City, COUNT(ContactName) AS NumberOfContacts
FROM suppliers
GROUP BY City
ORDER BY NumberOfContacts DESC
LIMIT 1;
```","Both queries count the number of contacts per city, group by city, order by the count in descending order, and limit the result to the top city.","SELECT City, COUNT(ContactName) AS Contact_Count FROM suppliers GROUP BY City ORDER BY Contact_Count DESC LIMIT 1","Both queries group suppliers by city, count the contacts, sort the result in descending order of contact count, and limit the output to the top city, thus yielding the same result.",both
How many products have a stock higher than their reorder level?,SELECT COUNT(*) FROM products WHERE UnitsInStock > ReorderLevel;,"```sql
SELECT COUNT(*) AS ProductCount
FROM products
WHERE UnitsInStock > ReorderLevel;
```","Both queries count the number of products where UnitsInStock is greater than ReorderLevel. The difference is only in the column alias used in the SELECT statement, which doesn't affect the result.",SELECT COUNT(*) AS ProductsAboveReorder FROM products WHERE UnitsInStock > ReorderLevel;,"Both queries return the same count of products where UnitsInStock is greater than ReorderLevel, even though the generated query provides an alias for the count.",both
How many orders has each employee processed?,"SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;","```sql
SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrdersProcessed
FROM employees
LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID
GROUP BY employees.EmployeeID;
```",Both queries achieve the same result by counting the number of orders each employee has processed using a LEFT JOIN and GROUP BY.,"SELECT EmployeeID, COUNT(OrderID) FROM orders GROUP BY EmployeeID;","The generated query excludes employees with zero orders because it uses an implicit inner join, unlike the ground truth query which uses a LEFT JOIN.",Base
Discover products sold in quantities exceeding 1000 units per month.,SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity) > 1000;,"```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSold
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
HAVING SUM(od.Quantity) > 1000;
```","The generated query includes the ProductID in the SELECT clause, while the ground truth only selects ProductName. Both queries use a similar HAVING clause, but the output format differs.","SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID HAVING SUM(Quantity) > 1000;","The generated query provides ProductID and total quantities, but the ground truth query is expected to return ProductName. They focus on different requirements.",None
Which country had the highest average order value last year?,"SELECT Country, AVG(TotalOrderValue) AS AverageOrderValue FROM (SELECT orders.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalOrderValue, customers.Country FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY orders.OrderID, customers.Country) AS CountryOrderAverages GROUP BY Country ORDER BY AverageOrderValue DESC LIMIT 1;","```sql
SELECT customers.Country, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
JOIN customers ON orders.CustomerID = customers.CustomerID
WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'
GROUP BY customers.Country
ORDER BY AverageOrderValue DESC
LIMIT 1;
```","The queries use different approaches to calculate average order values. The generated query calculates the average directly from order details, while the ground truth aggregates total order values per order before averaging them by country.","SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY orders.ShipCountry ORDER BY avg_order_value DESC LIMIT 1;","The generated query calculates average order value per country by dividing total sales by distinct order count, not per customer order. Meanwhile, the ground truth query calculates based on the average of total order values by customer and country, which may yield different results.",None
What is the total sales revenue for each product?,"SELECT P.ProductName, SUM(OD.Quantity * OD.UnitPrice) AS TotalRevenue FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID GROUP BY P.ProductName;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSalesRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName;
```","Both queries calculate the total sales revenue for each product by joining the 'products' and 'Order Details' tables and summing the product of Quantity and UnitPrice, grouped by ProductName.","SELECT p.ProductName, SUM(od.Quantity * (od.UnitPrice * (1 - od.Discount))) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;","The generated query accounts for discounts in the revenue calculation, while the ground truth query does not.",Base
Which city has the highest number of unique customers?,"SELECT City, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM customers GROUP BY City ORDER BY UniqueCustomers DESC LIMIT 1;","```sql
SELECT City, COUNT(DISTINCT CustomerID) AS UniqueCustomers
FROM customers
GROUP BY City
ORDER BY UniqueCustomers DESC
LIMIT 1;
```","The generated SQL query yields the same result as the ground truth query, fulfilling the user's request to find the city with the highest number of unique customers. Both queries perform the same operations: counting distinct CustomerIDs for each city and ordering the results to get the top city.","SELECT customers.City, COUNT(DISTINCT customers.CustomerID) AS UniqueCustomers FROM customers GROUP BY customers.City ORDER BY UniqueCustomers DESC LIMIT 1;","Both queries correctly find the city with the highest number of unique customers. They use the same logic: COUNT DISTINCT CustomerID, group by City, order by unique count, and limit to 1 result.",both
How many distinct products are ordered in each country?,"SELECT Country, COUNT(DISTINCT [Order Details].ProductID) AS DistinctProducts FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY Country;","```sql
SELECT customers.Country, COUNT(DISTINCT [Order Details].ProductID) AS DistinctProductCount
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.Country;
```",Both queries join the tables in a similar order and count distinct ProductIDs grouped by Country.,"SELECT o.ShipCountry, COUNT(DISTINCT od.ProductID) AS DistinctProductsOrdered FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry;","The generated query groups by ShipCountry from the orders table, while the ground truth groups by Country from the customers table, potentially causing mismatches if these fields differ.",Base
Identify employees who have never handled an order in a specific region.,SELECT employees.EmployeeID FROM employees WHERE NOT EXISTS (SELECT 1 FROM orders WHERE orders.EmployeeID = employees.EmployeeID AND orders.ShipRegion = 'SpecificRegion'),"```sql
SELECT e.EmployeeID, e.FirstName, e.LastName
FROM employees e
WHERE e.EmployeeID NOT IN (
    SELECT DISTINCT o.EmployeeID
    FROM orders o
    WHERE o.ShipRegion = 'specific_region'
)
```","Both queries accurately identify employees who have never handled an order in the specified region using different approaches. The generated query uses a NOT IN clause with a subquery, while the ground truth query uses a NOT EXISTS clause. Both yield the same result.","SELECT e.FirstName, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShipRegion IS NULL OR o.ShipRegion NOT LIKE 'Specific Region' GROUP BY e.FirstName, e.LastName;","The generated query incorrectly includes employees who have handled orders but not in 'Specific Region', while the ground truth query correctly filters out employees who have handled any order in 'SpecificRegion'.",Base
What is the average fulfillment time for orders shipped in the last month?,"SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE ShippedDate BETWEEN DATEADD(MONTH, -1, CURRENT_DATE) AND CURRENT_DATE","```sql
SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM orders
WHERE ShippedDate >= DATEADD(MONTH, -1, CURRENT_DATE);
```","The generated query uses '>= DATEADD(MONTH, -1, CURRENT_DATE)' which doesn't include the current date. The ground truth uses 'BETWEEN ... AND CURRENT_DATE' to include both start and end dates.","SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE ShippedDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE();","The generated SQL query uses the DATE_SUB function, which calculates based on the current date, excluding the margin of including all orders shipped in the actual last month calendar days. The ground truth SQL query uses DATEADD and CURRENT_DATE which might be more appropriate if the month has to be calculated from a specific point within the current month.",None
Which suppliers provide the most products by quantity?,"SELECT s.SupplierID, SUM(od.Quantity) AS TotalQuantity FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY TotalQuantity DESC;","```sql
SELECT SupplierID, COUNT(ProductID) AS ProductCount
FROM products
GROUP BY SupplierID
ORDER BY ProductCount DESC;
```","The generated query counts products per supplier, while the ground truth sums quantities from order details.","SELECT SupplierID, SUM(UnitsInStock) AS TotalQuantity FROM products GROUP BY SupplierID ORDER BY TotalQuantity DESC;","The generated query sums the UnitsInStock from the products table, while the ground truth sums the Quantity from the Order Details table, indicating a focus on ordered quantities instead of stock.",None
What is the sales trend over the last 6 months for each employee?,"SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalSales, EXTRACT(MONTH FROM o.OrderDate) as SalesMonth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -6, CURRENT_DATE) GROUP BY e.EmployeeID, SalesMonth ORDER BY e.EmployeeID, SalesMonth;","```sql
SELECT 
    e.EmployeeID,
    e.FirstName,
    e.LastName,
    DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month,
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
WHERE 
    o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)
GROUP BY 
    e.EmployeeID, Month
ORDER BY 
    e.EmployeeID, Month;
```","Both queries retrieve the total sales for each employee over the last 6 months, grouped by month, and order the results by employee and month. Differences in date functions and formatting do not affect the core functionality.","SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, MONTH(orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS monthly_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY employees.EmployeeID, MONTH(orders.OrderDate)","Both queries calculate sales totals for each employee by month over the last 6 months using joins on employees, orders, and order details tables, and group by employee and month.",both
What is the average discount given on orders?,SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details];
```",The generated SQL query is identical to the ground truth query and correctly computes the average discount from the 'Order Details' table.,SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];,"Both the generated and ground truth queries calculate the average discount from the same 'Order Details' table, yielding identical results.",both
Which product has the most units on order?,"SELECT products.ProductID, products.ProductName, products.UnitsOnOrder FROM products ORDER BY products.UnitsOnOrder DESC LIMIT 1","```sql
SELECT ProductID, UnitsOnOrder 
FROM products 
ORDER BY UnitsOnOrder DESC 
LIMIT 1;
```","The generated query does not select the ProductName, which is included in the ground truth query.",SELECT ProductName FROM products WHERE UnitsOnOrder = (SELECT MAX(UnitsOnOrder) FROM products);,"The generated query only returns the ProductName, while the ground truth query returns ProductID, ProductName, and UnitsOnOrder. The data returned is not the same.",None
Are there any suppliers with discontinued products only?,SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID HAVING COUNT(products.ProductID) = COUNT(CASE WHEN products.Discontinued = 1 THEN 1 END);,"```sql
SELECT s.SupplierID, s.CompanyName
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
GROUP BY s.SupplierID, s.CompanyName
HAVING COUNT(CASE WHEN p.Discontinued = 1 THEN 1 END) = COUNT(*) 
   AND COUNT(*) > 0;
```","Both queries check if all products from a supplier are discontinued, using COUNT and CASE in the HAVING clause to compare total product count with discontinued product count.",SELECT SupplierID FROM products GROUP BY SupplierID HAVING SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END) = COUNT(*) AND COUNT(*) > 0;,"The generated query checks for SupplierIDs with discontinued products only, but does not return company names like the ground truth query.",Base
What is the percentage of orders that were shipped late?,SELECT (COUNT(*) FILTER (WHERE ShippedDate > RequiredDate)::FLOAT / COUNT(*)) * 100 AS LateShipmentPercentage FROM orders;,"```sql
SELECT 
    (COUNT(*) FILTER (WHERE ShippedDate > RequiredDate) * 100.0 / COUNT(*)) AS LateShipmentPercentage
FROM 
    orders;
```","Both queries calculate the percentage of orders shipped late by comparing ShippedDate to RequiredDate, using filter and count to determine the percentage.",SELECT (COUNT(*) FILTER (WHERE ShippedDate > RequiredDate) / COUNT(*))::DECIMAL * 100 AS LatePercentage FROM orders;,"Both queries calculate the percentage of orders shipped late using a similar approach: counting orders where ShippedDate is greater than RequiredDate and dividing by the total count of orders, then multiplying by 100. The difference in data type casting (DECIMAL vs FLOAT) does not affect the logic or result.",both
Find the average shipping time for orders handled by each employee.,"SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NOT NULL GROUP BY e.EmployeeID;","```sql
SELECT 
    e.EmployeeID, 
    e.FirstName, 
    e.LastName, 
    AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageShippingTime
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
WHERE 
    o.ShippedDate IS NOT NULL
GROUP BY 
    e.EmployeeID, e.FirstName, e.LastName
```","Both queries calculate the average shipping time for orders handled by each employee using the same logic and constraints. The generated query includes additional employee name details, but it yields the same average results per employee as the ground truth query.","SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NOT NULL GROUP BY e.EmployeeID;","The generated SQL query is identical to the ground truth query, therefore, it accurately answers the user's question and yields the same results.",both
Which orders have a discount greater than 20% and who manages them?,"SELECT o.OrderID, e.FirstName, e.LastName FROM orders o JOIN employees e ON o.EmployeeID = e.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0.2;","```sql
SELECT o.OrderID, o.CustomerID, o.OrderDate, od.Discount, e.LastName AS ManagerLastName, e.FirstName AS ManagerFirstName
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
JOIN employees e ON o.EmployeeID = e.EmployeeID
WHERE od.Discount > 0.20;
```","Both queries filter orders with a discount greater than 20% and include the manager's first and last names, though the generated query returns additional columns not required by the user question.","SELECT orders.OrderID, employees.FirstName, employees.LastName FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.Discount > 0.20;","The generated query filters the discount on the orders table, which may not contain discount information, while the ground truth filters on [Order Details] table.",Base
Which city received the most shipments?,"SELECT ShipCity, COUNT(OrderID) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 1;","```sql
SELECT ShipCity, COUNT(OrderID) AS ShipmentCount
FROM orders
GROUP BY ShipCity
ORDER BY ShipmentCount DESC
LIMIT 1;
```","Both queries calculate the count of 'OrderID' grouped by 'ShipCity' and order by the count in descending order, limiting the result to the city with the maximum shipments. They produce the same results.","SELECT ShipCity, COUNT(OrderID) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 1;","Both queries are identical and will provide the same result, identifying the city with the most shipments.",both
What is the total number of different products sold to date?,SELECT COUNT(DISTINCT ProductID) AS UniqueProductsSold FROM [Order Details];,"```sql
SELECT COUNT(DISTINCT ProductID) AS TotalDifferentProducts
FROM [Order Details];
```","Both queries count the distinct ProductID in the Order Details table, achieving the same result.",SELECT COUNT(DISTINCT ProductID) AS TotalProductsSold FROM [Order Details];,"Both queries calculate the count of distinct ProductIDs from the [Order Details] table, effectively answering the user's question.",both
Which month had the highest total sales revenue this year?,"SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY Month ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE)
GROUP BY Month
ORDER BY TotalSales DESC
LIMIT 1;
```",Both queries calculate total sales per month for the current year and return the month with the highest total sales. Differences in date formatting functions do not affect the outcome.,"SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY Month ORDER BY TotalSales DESC LIMIT 1;","Both queries aim to find the month with the highest total sales revenue for the current year by grouping sales data by month, summing up the total sales, ordering by total sales in descending order, and limiting the result to the top entry. The difference in how the month is extracted (EXTRACT vs DATE_TRUNC) does not affect the result in this context.",both
Identify the top 5 customers with the highest spending.,"SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSpent FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID ORDER BY TotalSpent DESC LIMIT 5","```sql
SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSpending
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY o.CustomerID
ORDER BY TotalSpending DESC
LIMIT 5;
```","Both queries compute the total spending per customer and order the results in descending order to return the top 5 customers. They use the same logic and operations, but with slight differences in alias naming.","SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSpent FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY TotalSpent DESC LIMIT 5","Both queries calculate the total spending per customer by joining Customers, Orders, and Order Details tables, then order by total spend in descending order and limit the results to the top 5. The difference in table aliases does not affect the outcome.",both
Which city receives the most shipments?,"SELECT ShipCity, COUNT(*) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC;","```sql
SELECT ShipCity, COUNT(OrderID) AS ShipmentCount
FROM orders
GROUP BY ShipCity
ORDER BY ShipmentCount DESC
LIMIT 1;
```","Both queries aim to find the city with the most shipments by counting shipments per city and ordering them in descending order, using similar logic but differing slightly in structure and column names.","SELECT ShipCity, COUNT(*) AS NumShipments FROM orders GROUP BY ShipCity ORDER BY NumShipments DESC LIMIT 1;","Both queries count the shipments grouped by ShipCity and order them in descending order. The generated query includes 'LIMIT 1' to return the top city, matching the user's question about the city with the most shipments.",both
How many products have never been ordered?,SELECT COUNT(products.ProductName) FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].ProductID IS NULL;,"```sql
SELECT COUNT(*) AS ProductsNeverOrdered
FROM products
WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);
```","Both queries effectively count the number of products that do not appear in any order details, meaning they have never been ordered. The generated query uses a WHERE NOT IN clause to find ProductIDs not listed in Order Details, while the ground truth query uses a LEFT JOIN with a NULL check, but both achieve the same result.",SELECT COUNT(products.ProductID) FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].ProductID IS NULL;,"Both queries perform a left join between the products and order details tables and count the number of products with no corresponding order details, effectively answering the question of how many products have never been ordered.",both
Determine the total number of products that are overstocked.,SELECT COUNT(*) AS OverstockedCount FROM products WHERE UnitsInStock > (ReorderLevel + UnitsOnOrder);,"```sql
SELECT COUNT(*) AS TotalOverstockedProducts
FROM products
WHERE UnitsInStock > ReorderLevel;
```","The generated query checks if UnitsInStock exceeds ReorderLevel, while the ground truth checks against ReorderLevel plus UnitsOnOrder.",SELECT COUNT(products.ProductID) AS OverstockedCount FROM products WHERE products.UnitsInStock > (products.ReorderLevel + products.UnitPrice);,"The generated SQL query compares UnitsInStock with ReorderLevel and UnitPrice, while the ground truth compares UnitsInStock with ReorderLevel and UnitsOnOrder.",None
Calculate the total sales for each product.,"SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] GROUP BY ProductID;","```sql
SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM [Order Details]
GROUP BY [Order Details].ProductID;
```","Both queries calculate the total sales for each product by multiplying UnitPrice, Quantity, and applying the Discount, then grouping by ProductID. The syntax differs slightly but yields the same result.","SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] GROUP BY ProductID;","The generated SQL query and the ground truth query are identical, both correctly calculating total sales for each product by grouping by ProductID.",both
Analyze the correlation between unit price and units ordered for the products.,"SELECT p.ProductName, CORR(p.UnitPrice, od.Quantity) AS PriceQuantityCorrelation FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;","```sql
SELECT p.ProductID, p.ProductName, od.UnitPrice, SUM(od.Quantity) AS TotalUnitsOrdered
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName, od.UnitPrice
```",The generated SQL calculates the total units ordered per product but doesn't analyze the correlation between unit price and units ordered like the ground truth query does.,"SELECT p.ProductID, p.ProductName, CORR(od.UnitPrice, od.Quantity) AS PriceQuantityCorrelation FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",The generated SQL query uses 'od.UnitPrice' while the ground truth uses 'p.UnitPrice'. This difference will yield different results if 'od.UnitPrice' varies from 'p.UnitPrice'.,None
Which suppliers have shipped orders on time this year?,SELECT DISTINCT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.ShippedDate) = YEAR(CURRENT_DATE) AND orders.RequiredDate >= orders.ShippedDate;,"```sql
SELECT DISTINCT s.SupplierID, s.CompanyName
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
WHERE o.ShippedDate <= o.RequiredDate AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE);
```","The generated query checks if the ShippedDate is on or before the RequiredDate, while the ground truth checks the opposite condition (RequiredDate >= ShippedDate).",SELECT DISTINCT s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN orders o ON p.ProductID = o.OrderID WHERE YEAR(o.ShippedDate) = YEAR(CURDATE()) AND o.ShippedDate <= o.RequiredDate;,"Both queries effectively join suppliers, products, and orders to identify suppliers who shipped orders on time this year. The main condition ensures orders are shipped by the required date, and both correctly filter orders by the current year. Differences in table aliasing and join method don't affect the result.",FT
What is the average order fulfillment time for each employee?,"SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY EmployeeID;","```sql
SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY EmployeeID;
```",The generated SQL query accurately answers the user's question and yields the same results as the ground truth query. Both queries calculate the average order fulfillment time for each employee by using the same logic and structure.,"SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageFulfillmentTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NOT NULL GROUP BY e.EmployeeID;","Both queries calculate the average difference between ShippedDate and OrderDate for each EmployeeID. The generated query joins employees and orders, but effectively achieves the same result since the grouping is based on EmployeeID, which is a key in both queries.",both
Find out the monthly average units in stock for each product.,"SELECT p.ProductName, EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, AVG(p.UnitsInStock) AS AverageMonthlyStock FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, Year, Month;","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    AVG(p.UnitsInStock) AS AverageUnitsInStock
FROM 
    products p
GROUP BY 
    p.ProductID, 
    p.ProductName
```","The generated query calculates the overall average units in stock for each product, not the monthly average. It doesn't involve any time-based grouping as the ground truth query does.","SELECT ProductID, AVG(UnitsInStock) AS AverageStock FROM products GROUP BY ProductID;","The generated query calculates an average for each product without considering monthly grouping, while the ground truth query computes the monthly average by joining with orders and extracting year and month.",None
How many late shipments were there each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, COUNT(OrderID) AS LateShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY OrderMonth;","```sql
SELECT 
    DATE_FORMAT(orders.ShippedDate, '%Y-%m') AS Month, 
    COUNT(orders.OrderID) AS LateShipments
FROM 
    orders
WHERE 
    orders.ShippedDate > orders.RequiredDate
GROUP BY 
    Month
ORDER BY 
    Month;
```","The generated query groups by 'ShippedDate' month, while the ground truth groups by 'OrderDate' month. This may yield different results.","SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) AS LateShipments FROM orders GROUP BY DATE_TRUNC('month', orders.OrderDate);",Both queries count the number of late shipments per month. The difference in date formatting functions (DATE_TRUNC vs DATE_FORMAT) does not affect the grouping or the logic.,FT
What's the average discount applied to product orders?,SELECT AVG(Discount) FROM [Order Details];,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details];
```","Both queries calculate the average of the 'Discount' column from the 'Order Details' table, thus answering the user's question accurately with the same results.",SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];,"Both queries calculate the average discount from the same table, producing identical results.",both
What is the total freight cost by region over the last year?,"SELECT ShipRegion, SUM(Freight) AS TotalFreight FROM orders WHERE OrderDate >= DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '1 year' GROUP BY ShipRegion;","```sql
SELECT ShipRegion, SUM(Freight) AS TotalFreightCost
FROM orders
WHERE OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE)
GROUP BY ShipRegion;
```","The generated query incorrectly uses DATEADD and does not handle the start of the last year like the ground truth query, which uses DATE_TRUNC and INTERVAL to define the period correctly.","SELECT ShipRegion, SUM(Freight) AS TotalFreight FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY ShipRegion ORDER BY TotalFreight DESC;","The generated query calculates freight from the current date one year back, while the ground truth query evaluates from the last year start date.",None
What is the most common shipping method?,"SELECT ShipVia, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipVia ORDER BY NumberOfOrders DESC LIMIT 1;","```sql
SELECT ShipVia, COUNT(*) AS Count
FROM orders
GROUP BY ShipVia
ORDER BY Count DESC
LIMIT 1;
```","Both queries calculate the most common shipping method by counting the number of orders for each 'ShipVia', sorting them, and selecting the top result. The difference in column aliasing does not affect the outcome.","SELECT ShipVia, COUNT(*) AS TimesUsed FROM orders GROUP BY ShipVia ORDER BY TimesUsed DESC LIMIT 1;",Both queries count the number of orders per shipping method and return the most common one. The differences in column naming (TimesUsed vs NumberOfOrders) don't affect the result.,both
List the orders that were fulfilled late.,SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;,"```sql
SELECT OrderID, CustomerID, OrderDate, RequiredDate, ShippedDate
FROM orders
WHERE ShippedDate > RequiredDate;
```","The generated query returns more columns than the ground truth query, which only selects the OrderID.","SELECT OrderID, OrderDate, ShippedDate FROM orders WHERE ShippedDate > RequiredDate;","The generated SQL query returns additional columns (OrderDate, ShippedDate) compared to the ground truth, which only returns OrderID.",None
What percentage of orders were delivered on time in the last quarter?,SELECT SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE QUARTER(orders.OrderDate) = (QUARTER(CURDATE()) - 1) AND YEAR(orders.OrderDate) = YEAR(CURDATE()),"```sql
SELECT (COUNT(orders.OrderID) FILTER (WHERE orders.ShippedDate <= orders.RequiredDate) * 100.0 / COUNT(orders.OrderID)) AS on_time_delivery_rate
FROM orders
WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30'
```","The generated SQL query uses a fixed date range for the last quarter (July 1 to September 30, 2023), while the ground truth query dynamically calculates the last quarter based on the current date, making it more adaptable.",SELECT (SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) FROM orders WHERE Quarter(OrderDate) = Quarter(CURRENT_DATE) - 1 AND Year(OrderDate) = Year(CURRENT_DATE);,"Both queries calculate the percentage of orders delivered on time using the same logic to check if ShippedDate is less than or equal to RequiredDate. They filter for the last quarter by comparing the quarter and year of OrderDate, despite slight syntactical differences.",FT
What is the total freight cost incurred in each country?,"SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;","```sql
SELECT ShipCountry, SUM(Freight) AS TotalFreightCost
FROM orders
GROUP BY ShipCountry;
```","Both queries calculate the total freight cost per country by grouping orders by ShipCountry and summing the Freight, despite the slight difference in alias names.","SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;","The generated SQL query is identical to the ground truth query, both calculating the total freight per country by grouping on ShipCountry and summing the Freight.",both
What is the total number of unique products ordered?,SELECT COUNT(DISTINCT ProductID) FROM [Order Details];,"```sql
SELECT COUNT(DISTINCT [Order Details].ProductID) AS UniqueProductsOrdered
FROM [Order Details];
```","Both queries count the distinct number of ProductID in the 'Order Details' table, producing the same result.",SELECT COUNT(DISTINCT ProductID) FROM [Order Details];,"Both queries use COUNT(DISTINCT ProductID) to find the total number of unique products, which accurately answers the user's question.",both
What is the distribution of orders shipped per region each month?,"SELECT DATE_TRUNC('month', ShippedDate) AS Month, ShipRegion, COUNT(OrderID) AS OrdersShipped FROM orders GROUP BY Month, ShipRegion;","```sql
SELECT
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    ShipRegion,
    COUNT(OrderID) AS OrdersShipped
FROM
    orders
GROUP BY
    Month, ShipRegion
ORDER BY
    Month, ShipRegion;
```","The generated SQL query groups by OrderDate rather than ShippedDate, which does not correctly reflect orders shipped per region each month.","SELECT EXTRACT(MONTH FROM OrderDate) AS OrderMonth, ShipRegion, COUNT(OrderID) AS OrdersShipped FROM orders GROUP BY OrderMonth, ShipRegion;","The generated query uses OrderDate instead of ShippedDate, which may produce different results.",None
How many orders were placed each month?,"SELECT COUNT(OrderID) AS OrderCount, EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month FROM orders GROUP BY Year, Month;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY Month
ORDER BY Month;
```","The generated query uses DATE_FORMAT and groups by a single field 'Month', which may yield incorrect ordering results since it can group by string format. The ground truth query groups by 'Year' and 'Month' separately, ensuring proper monthly grouping and ordering.","SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, COUNT(orders.OrderID) AS order_count FROM orders GROUP BY month",Both queries calculate the number of orders placed each month by grouping on the year and month derived from OrderDate and counting OrderID.,FT
What is the on-time delivery rate for each shipping method?,"SELECT ShipVia, ROUND(100.0 * SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID), 2) AS OnTimeDeliveryRate FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, 
       COUNT(OrderID) AS TotalOrders,
       COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveries,
       (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate
FROM orders
GROUP BY ShipVia;
```","Both queries calculate the on-time delivery rate for each shipping method by evaluating if the ShippedDate is on or before the RequiredDate and dividing by the total order count. The method of calculation and rounding differs slightly, but the substantive result—on-time delivery rate for each ShipVia—is the same.","SELECT ShipVia, ROUND(100.0 * SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID), 2) AS OnTimeDeliveryRate FROM orders GROUP BY ShipVia;","The generated SQL query is identical to the ground truth SQL query in both logic and structure. Both queries calculate the on-time delivery rate for each shipping method by determining the percentage of orders shipped on or before the required date, grouped by the shipping method.",both
Which category of products has generated the most revenue?,"SELECT CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY CategoryID ORDER BY TotalRevenue DESC;","```sql
SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.CategoryID
ORDER BY TotalRevenue DESC
LIMIT 1;
```","Both queries calculate the revenue for each category by joining 'products' and 'Order Details', summing the product of 'Quantity' and 'UnitPrice', and ordering by total revenue. The generated query uses 'LIMIT 1' to return the highest revenue, aligning with the user question about the category with the most revenue.","SELECT c.CategoryName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN categories c ON p.CategoryID = c.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryName ORDER BY TotalRevenue DESC LIMIT 1;","The generated query includes a discount factor in the revenue calculation and also adds LIMIT 1 for the top result, while the ground truth does not factor in discounts and does not limit the results.",Base
What are the total sales for each product over the last year?,"SELECT products.ProductName, SUM([Order Details].Quantity * (1 - [Order Details].Discount) * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.OrderID IN (
    SELECT OrderID
    FROM orders
    WHERE OrderDate >= DATEADD(YEAR, -1, GETDATE())
)
GROUP BY p.ProductID, p.ProductName
```","The generated query filters sales from the last year, while the ground truth query does not include any date condition and includes discounts.","SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)) GROUP BY products.ProductName;","The generated query filters by order date within the last year, which is missing in the ground truth. Both should apply this filter to calculate total sales over the last year.",None
Which orders had the highest freight costs?,"SELECT o.OrderID, o.Freight FROM orders o ORDER BY o.Freight DESC;","```sql
SELECT OrderID, Freight
FROM orders
ORDER BY Freight DESC
LIMIT 1;
```","The generated query only retrieves the top order with the highest freight cost due to the LIMIT 1 clause, while the ground truth retrieves all orders sorted by freight cost.","SELECT OrderID, Freight FROM orders ORDER BY Freight DESC LIMIT 1;","The generated SQL query returns only one order with the highest freight cost, whereas the ground truth query lists all orders sorted by freight in descending order.",None
Which employee made the highest sales in July 2023?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-07-31' GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
JOIN employees ON orders.EmployeeID = employees.EmployeeID
WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-07-31'
GROUP BY employees.EmployeeID
ORDER BY total_sales DESC
LIMIT 1;
```","The generated SQL query is logically equivalent to the ground truth query and produces the same result, as they both calculate total sales for each employee in July 2023 and return the employee with the highest sales.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-07-31' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1",Both queries calculate the total sales made by each employee in July 2023 and return the employee with the highest total sales. The difference in naming the sum as 'employee_sales' or 'total_sales' does not affect the correctness or output.,both
Identify products due for reorder based on their reorder level and current stock.,"SELECT ProductID, ProductName FROM products WHERE UnitsInStock <= ReorderLevel;","```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;
```","The generated query includes additional filtering with 'Discontinued = 0', and returns more columns than the ground truth query.",SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;,"The generated query only selects 'ProductName', whereas the ground truth query selects both 'ProductID' and 'ProductName'. This could lead to different results in terms of the output columns.",None
Which shipping company has the highest average cost per shipment?,"SELECT ShipVia, AVG(Freight) AS AverageCost FROM orders GROUP BY ShipVia ORDER BY AverageCost DESC LIMIT 1","```sql
SELECT ShipVia, AVG(Freight) AS AverageShippingCost
FROM orders
GROUP BY ShipVia
ORDER BY AverageShippingCost DESC
LIMIT 1;
```",Both the generated SQL query and the ground truth SQL query calculate the average freight cost per shipping company using the same logic and return the company with the highest average freight cost.,"SELECT ShipVia, AVG(Freight) AS AverageCost FROM orders GROUP BY ShipVia ORDER BY AverageCost DESC LIMIT 1;",Both generated and ground truth queries are identical and accurately answer the user's question by selecting the shipping company with the highest average cost per shipment using the same logic and ordering.,both
What is the percentage of total sales contributed by each supplier?,"SELECT suppliers.SupplierID, (SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID)) * 100 AS supplier_sales_percentage FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID;","```sql
SELECT suppliers.SupplierID, 
       suppliers.CompanyName, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales,
       (SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) FROM [Order Details])) * 100) AS percentage_contribution
FROM [Order Details] 
JOIN products ON [Order Details].ProductID = products.ProductID 
JOIN suppliers ON products.SupplierID = suppliers.SupplierID 
GROUP BY suppliers.SupplierID, suppliers.CompanyName;
```","Both queries calculate the percentage contribution of each supplier to total sales using similar logic and structure. The main difference is that the Generated SQL Query includes the `CompanyName` and an additional `total_sales` column, but they both compute the `percentage_contribution` correctly.","SELECT p.SupplierID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) * 100.0 / (SELECT SUM(od1.Quantity * od1.UnitPrice * (1 - od1.Discount)) FROM [Order Details] od1) AS SupplierSalesPercentage FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;","Both queries compute the percentage of total sales contributed by each supplier using similar logic: multiplying order detail quantities by unit price and discount, summing for each supplier, and dividing by the total sales. The main difference lies in join methods and table alias usage, but both will yield the same results.",both
What is the retention rate for January 2023?,"SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' THEN orders.CustomerID END) * 1.0) / (NULLIF(COUNT(DISTINCT CASE WHEN orders.OrderDate < '2023-01-01' THEN orders.CustomerID END), 0)) AS RetentionRate FROM orders;","```sql
SELECT 
    (COUNT(DISTINCT orders.CustomerID) 
     FILTER (WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31'))::float / 
    (COUNT(DISTINCT orders.CustomerID) 
     FILTER (WHERE orders.OrderDate < '2023-01-01')) AS RetentionRate
FROM orders;
```","The generated SQL query calculates retention by dividing customers in January by those before January, not retained from previous months.",SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' THEN orders.CustomerID END) * 1.0 / COUNT(DISTINCT CASE WHEN orders.OrderDate < '2023-01-01' THEN orders.CustomerID END)) AS retention_rate FROM orders;,"Both queries calculate the retention rate by comparing distinct customers in January 2023 with those before January 2023. The ground truth query uses NULLIF to prevent division by zero, but this doesn't affect the logic.",FT
What is the lifetime value of each customer?,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID","```sql
SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerLifetimeValue
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.CustomerID;
```","Both SQL queries calculate the lifetime value for each customer by summing the total sales amount, considering unit price, quantity, and discount, and group the results by CustomerID. The differences are only in formatting and aliasing, but they achieve the same result.","SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID",Both queries calculate the lifetime value of each customer by summing up the order details with discounts applied and join the same tables using the same logic.,both
Identify suppliers whose lead time is reducing over the last six months.,"SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN CURRENT_DATE - INTERVAL '6 MONTH' AND CURRENT_DATE GROUP BY suppliers.SupplierID HAVING AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) < (SELECT AVG(DATEDIFF(o2.ShippedDate, o2.OrderDate)) FROM orders o2 JOIN [Order Details] od2 ON o2.OrderID = od2.OrderID JOIN products p2 ON od2.ProductID = p2.ProductID WHERE p2.SupplierID = suppliers.SupplierID AND o2.OrderDate BETWEEN CURRENT_DATE - INTERVAL '1 YEAR' AND CURRENT_DATE - INTERVAL '6 MONTH');","```sql
SELECT s.SupplierID, s.CompanyName
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN orders o ON p.ProductID = o.ProductID
WHERE DATEDIFF(o.ShippedDate, o.OrderDate) IS NOT NULL
AND o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)
GROUP BY s.SupplierID, MONTH(o.OrderDate)
HAVING AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) < 
    (SELECT AVG(DATEDIFF(o2.ShippedDate, o2.OrderDate))
     FROM products p2
     JOIN orders o2 ON p2.ProductID = o2.ProductID
     WHERE o2.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)
     AND MONTH(o2.OrderDate) < MONTH(o.OrderDate))
ORDER BY s.SupplierID;
```","The generated query calculates the lead time per month and checks if the average lead time of the current month is less than the previous month, whereas the ground truth query compares the last 6 months' average lead time with the prior 6 months for each supplier.",SELECT SupplierID FROM products GROUP BY SupplierID HAVING MAX(LeadTime) < MIN(LeadTime);,"The generated query checks if the maximum lead time is less than the minimum for each supplier, which doesn't evaluate a reduction over months. The ground truth compares average lead times over two distinct six-month periods, identifying suppliers with reduced lead times.",None
Who are the top 5 employees generating the most sales this year?,"SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName ORDER BY sales DESC LIMIT 5","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN employees ON orders.EmployeeID = employees.EmployeeID 
WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) 
GROUP BY employees.EmployeeID 
ORDER BY employee_sales DESC 
LIMIT 5
```","The generated query does not include the employees' FirstName and LastName, which are included in the ground truth query.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 5","The generated query uses YEAR(CURDATE()) which dynamically calculates the current year, whereas the ground truth query explicitly uses the year 2023. This could lead to different results if the current year is not 2023.",None
Which orders have a fulfillment time greater than 30 days?,"SELECT o.OrderID FROM orders o WHERE DATEDIFF(o.ShippedDate, o.OrderDate) > 30;","```sql
SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTime
FROM orders
WHERE DATEDIFF(ShippedDate, OrderDate) > 30;
```","Both queries filter orders where the fulfillment time exceeds 30 days. The generated query also includes the FulfillmentTime in the output, but it does not change the correctness of the answer.","SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTime FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) > 30;",Both queries accurately identify orders with a fulfillment time greater than 30 days by using DATEDIFF to calculate the difference between ShippedDate and OrderDate. The generated query provides additional information (FulfillmentTime) but still answers the user's question.,both
Which employee managed the most orders last month?,"SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE() - INTERVAL 1 MONTH, '%Y-%m') GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders
FROM orders
WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month'
  AND OrderDate < DATE_TRUNC('month', CURRENT_DATE)
GROUP BY EmployeeID
ORDER BY NumberOfOrders DESC
LIMIT 1;
```","Both queries determine the count of orders grouped by EmployeeID for the previous month and order the result to find the employee with the most orders. Despite syntactic differences, they accomplish the same logic.","SELECT employee_id, COUNT(order_id) AS order_count FROM orders WHERE EXTRACT(MONTH FROM order_date) = EXTRACT(MONTH FROM CURRENT_DATE - INTERVAL '1 MONTH') AND EXTRACT(YEAR FROM order_date) = EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '1 MONTH') GROUP BY employee_id ORDER BY order_count DESC LIMIT 1;",Both queries calculate the number of orders managed by each employee in the previous month and return the employee with the highest count. They differ syntactically but achieve the same result.,both
Which products are most frequently ordered with a discount?,"SELECT ProductID, COUNT(OrderID) AS TimesOrdered FROM [Order Details] WHERE Discount > 0 GROUP BY ProductID ORDER BY TimesOrdered DESC;","```sql
SELECT [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalQuantity
FROM [Order Details]
WHERE [Order Details].Discount > 0
GROUP BY [Order Details].ProductID
ORDER BY TotalQuantity DESC;
```","The generated query counts total quantities of discounted products, while the ground truth counts distinct orders containing discounted products.","SELECT od.ProductID, COUNT(od.OrderID) AS Frequency FROM [Order Details] od WHERE od.Discount > 0 GROUP BY od.ProductID ORDER BY Frequency DESC;","Both queries select ProductID from the table 'Order Details', count orders with a discount, and order the results by frequency in descending order. The column aliases and names differ but do not affect the result set.",FT
What is the most shipped product in terms of quantity?,"SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 1;","```sql
SELECT 
    products.ProductName, 
    SUM([Order Details].Quantity) AS TotalQuantity
FROM 
    products
JOIN 
    [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN 
    orders ON [Order Details].OrderID = orders.OrderID
GROUP BY 
    products.ProductName
ORDER BY 
    TotalQuantity DESC
LIMIT 1;
```","Both queries correctly calculate the total quantity of each product shipped and return the product with the highest total. The difference lies only in additional JOIN with 'orders' in the generated query, which does not affect the result since it is not used in calculations.","SELECT od.ProductID, SUM(od.Quantity) AS TotalShippedQuantity FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalShippedQuantity DESC LIMIT 1;","The generated query selects ProductID, whereas the ground truth query selects ProductName. They might not yield the same output as ProductID doesn't provide the product's name.",Base
"Which product had the most orders, and how many were ordered?","SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 1;","```sql
SELECT 
    OrderDetails.ProductID, 
    COUNT(OrderDetails.OrderID) AS TotalOrders
FROM 
    [Order Details] AS OrderDetails
GROUP BY 
    OrderDetails.ProductID
ORDER BY 
    TotalOrders DESC
LIMIT 1;
```","The generated query counts the number of orders per product, while the ground truth query sums the quantities ordered per product. The questions require summing quantities, so the generated query doesn't match the ground truth.","SELECT ProductID, SUM(Quantity) AS TotalOrdered FROM [Order Details] GROUP BY ProductID ORDER BY TotalOrdered DESC LIMIT 1;","Both queries calculate the total quantity ordered for each product, group by ProductID, and order by the total in descending order, retrieving the top result.",FT
Which products have been discontinued?,SELECT ProductName FROM products WHERE Discontinued = 1;,"```sql
SELECT ProductID, ProductName
FROM products
WHERE Discontinued = 1;
```","Both queries select products from the 'products' table where the 'Discontinued' column equals 1. The generated query includes 'ProductID', which doesn't affect the answer to the user's question about which products are discontinued.",SELECT ProductName FROM products WHERE Discontinued = 1;,Both queries are identical and correctly retrieve the names of discontinued products from the 'products' table where the 'Discontinued' field is 1.,both
Which employee has handled the highest number of orders?,"SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries calculate the count of orders handled by each employee, order them in descending order, and return the employee with the highest count. The difference in alias naming ('OrderCount' vs 'TotalOrders') does not affect the result.","SELECT EmployeeID, COUNT(*) AS TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1;","Both queries group by EmployeeID and count the orders per employee, ordering them to find the employee with the highest number of orders. COUNT(*) and COUNT(OrderID) function identically in this context, so they yield the same result.",both
What is the total freight cost per shipping method this month?,"SELECT o.ShipVia, SUM(o.Freight) AS TotalFreightCost FROM orders o WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) GROUP BY o.ShipVia;","```sql
SELECT ShipVia, SUM(Freight) AS TotalFreight
FROM orders
WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE) AND YEAR(OrderDate) = YEAR(CURRENT_DATE)
GROUP BY ShipVia
```","Both queries calculate the total freight cost per shipping method for the current month, using slightly different methods to filter the dates.","SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders WHERE DATE_FORMAT(OrderDate, 'YYYY-MM') = DATE_FORMAT(CURDATE(), 'YYYY-MM') GROUP BY ShipVia;","The generated SQL query uses DATE_FORMAT() which is for MySQL and assumes a 'YYYY-MM' format, while the ground truth uses DATE_TRUNC('month', CURRENT_DATE), which is ANSI SQL compliant and accurately filters for the current month.",Base
What is the total revenue for each product category?,"SELECT p.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.CategoryID;","```sql
SELECT ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY ProductID
```","The generated query groups by ProductID, not CategoryID, and doesn't join with the products table to access CategoryID.","SELECT c.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN categories c ON p.CategoryID = c.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryID;","Both queries calculate the total revenue for each product category by summing the product of UnitPrice, Quantity, and the discount adjustment. They group by the CategoryID, though one uses the categories table which is not strictly necessary in the context.",FT
Determine the total quantity of products on order for each supplier.,"SELECT s.SupplierName, SUM(p.UnitsOnOrder) FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.UnitsOnOrder > 0 GROUP BY s.SupplierName;","```sql
SELECT SupplierID, SUM(UnitsOnOrder) AS TotalQuantityOnOrder
FROM products
GROUP BY SupplierID;
```","The generated query groups by SupplierID and does not filter for positive UnitsOnOrder, while the ground truth query groups by SupplierName and filters for p.UnitsOnOrder > 0.","SELECT suppliers.ContactName, SUM(products.UnitsOnOrder) FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.ContactName;","The generated query does not filter for UnitsOnOrder > 0, and groups by ContactName instead of SupplierName.",None
Which orders had the highest total discount applied?,"SELECT OrderID, SUM(Discount * UnitPrice * Quantity) AS TotalDiscount FROM [Order Details] GROUP BY OrderID ORDER BY TotalDiscount DESC LIMIT 1;","```sql
SELECT OrderID, SUM(Discount) AS TotalDiscount
FROM [Order Details]
GROUP BY OrderID
ORDER BY TotalDiscount DESC
LIMIT 1;
```","The generated SQL query only sums the Discount column, while the ground truth query multiplies Discount by UnitPrice and Quantity, which reflects the actual discount value on the total price.","SELECT OrderID, SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details] GROUP BY OrderID ORDER BY TotalDiscount DESC LIMIT 1",The generated query correctly computes the total discount per order and orders them in descending order to find the one with the highest discount. The factor multiplication order does not affect the final result.,FT
Which products need to be reordered based on current levels?,SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;
```","The generated query filters out discontinued products, while the ground truth query does not include this condition. Also, the generated query includes additional columns in the SELECT clause that are not present in the ground truth.",SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;,Both queries select the products that need to be reordered by checking if the UnitsInStock are less than or equal to the ReorderLevel. The queries are identical.,FT
Which employee handles the most valuable products by unit price?,"SELECT e.FirstName, e.LastName FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID ORDER BY od.UnitPrice DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, 
       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY TotalSales DESC
LIMIT 1;
```","The generated query calculates total sales for each employee and orders the result by total sales. The ground truth query orders employees by the highest unit price of products they handle, which directly answers the question.","SELECT e.EmployeeID, SUM(od.Quantity * od.UnitPrice) AS ProductValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.UnitPrice = (SELECT MAX(UnitPrice) FROM [Order Details]) GROUP BY e.EmployeeID ORDER BY ProductValue DESC LIMIT 1;","The generated query calculates product value for the most expensive product and sums across employees, while the ground truth query simply finds the employee dealing with the highest unit price product.",None
Which product generated the most revenue this quarter?,"SELECT ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductRevenue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE QUARTER(o.OrderDate) = QUARTER(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY ProductID ORDER BY ProductRevenue DESC LIMIT 1;","```sql
SELECT 
    od.ProductID,
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM 
    [Order Details] od
JOIN 
    orders o ON od.OrderID = o.OrderID
WHERE 
    o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) 
    AND o.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) + INTERVAL '3 months'
GROUP BY 
    od.ProductID
ORDER BY 
    TotalRevenue DESC
LIMIT 1;
```","Both queries calculate revenue for the current quarter, group by ProductID, and return the product with the highest revenue. The methods to determine the current quarter differ but achieve the same outcome.","SELECT ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od WHERE QUARTER(od.OrderID) = QUARTER(CURDATE()) AND YEAR(od.OrderID) = YEAR(CURDATE()) GROUP BY ProductID ORDER BY TotalRevenue DESC LIMIT 1;",The generated query incorrectly uses OrderID instead of OrderDate to determine the current quarter and year.,Base
Which shipping company handled the most orders in USD value in Q2 2023?,"SELECT shippers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_shipping_value FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY shippers.CompanyName ORDER BY total_shipping_value DESC;","```sql
SELECT shippers.CompanyName, SUM(orders.Freight) AS total_shipping_cost
FROM orders
JOIN shippers ON orders.ShipVia = shippers.ShipperID
WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30'
GROUP BY shippers.CompanyName
ORDER BY total_shipping_cost DESC
LIMIT 1
```","The generated query calculates the sum of freight charges per shipper, while the ground truth query calculates the total value of orders (UnitPrice * Quantity * (1 - Discount)) shipped by each company. The focus of the user's question is on the order value, not freight charges.","SELECT shippers.CompanyName, SUM(orders.Freight + [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN shippers ON orders.ShipVia = shippers.ShipVia WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY shippers.CompanyName ORDER BY total_value DESC LIMIT 1","The generated SQL query includes the freight value in the total calculation, whereas the ground truth query does not. This results in a different total value.",None
What is the average age of employees at the time of hire?,"SELECT AVG((CAST(JULIANDAY(employees.HireDate) - JULIANDAY(employees.BirthDate)) / 365.25 AS DECIMAL(5, 2))) AS AverageAgeAtHire FROM employees","```sql
SELECT AVG(TIMESTAMPDIFF(YEAR, BirthDate, HireDate)) AS AverageAgeAtHire
FROM employees;
```","The generated SQL uses TIMESTAMPDIFF to calculate age, while the ground truth uses JULIANDAY and accounts for leap years with 365.25 days per year. The results may slightly differ due to this calculation method.",SELECT AVG(YEAR(hire_date) - YEAR(birth_date)) AS average_age_at_hire FROM employees,"The generated SQL query approximates the age using integer years, while the ground truth query calculates the age more precisely by considering fractional years using the JULIANDAY function.",None
What is the total number of units sold by each employee?,"SELECT e.EmployeeID, SUM(od.Quantity) AS TotalUnits FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","```sql
SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].Quantity) AS TotalUnitsSold
FROM employees
JOIN orders ON employees.EmployeeID = orders.EmployeeID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY employees.EmployeeID;
```","The generated query lists employee names which are not in the ground truth, potentially altering grouping if duplicate names occur.","SELECT employees.EmployeeID, SUM([Order Details].Quantity) AS TotalUnitsSold FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;","Both queries accurately calculate the total number of units sold by each employee by joining the employees, orders, and [Order Details] tables and grouping by EmployeeID. The column aliases and table aliases may differ, but the logical operations and results are equivalent.",FT
What is the total number of units in stock for each product category?,"SELECT CategoryID, SUM(UnitsInStock) AS TotalUnitsInStock FROM products GROUP BY CategoryID;","```sql
SELECT p.CategoryID, SUM(p.UnitsInStock) AS TotalUnitsInStock
FROM products p
GROUP BY p.CategoryID;
```",Both queries calculate the total units in stock for each product category by grouping the products by CategoryID and summing the UnitsInStock. The generated query uses an alias for the 'products' table but yields the same result.,"SELECT CategoryID, SUM(UnitsInStock) AS TotalUnitsInStock FROM products GROUP BY CategoryID;",Both queries are identical and correctly calculate the total number of units in stock for each product category using SUM and GROUP BY on CategoryID.,both
What is the total number of products sold to each country?,"SELECT orders.ShipCountry, SUM([Order Details].Quantity) AS TotalProductsSold FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipCountry;","```sql
SELECT o.ShipCountry, SUM(od.Quantity) AS TotalProductsSold
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY o.ShipCountry;
```","Both queries calculate the total number of products sold for each country by joining the 'orders' and 'Order Details' tables on 'OrderID', and grouping by 'ShipCountry'. The syntax and table aliasing differ slightly, but the logic and output remain the same.","SELECT orders.ShipCountry, SUM([Order Details].Quantity) AS TotalSold FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.ShipCountry;",Both queries produce the same result by joining the 'orders' and 'Order Details' tables on 'OrderID' and grouping by 'ShipCountry' to sum the 'Quantity'.,both
List the top 5 products by sales revenue.,"SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS SalesRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY SalesRevenue DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalRevenue DESC
LIMIT 5;
```","Both queries calculate the top 5 products by sales revenue by joining the 'products' and 'Order Details' tables, summing the product of quantity and unit price, and ordering by the total revenue. The difference in column selection and aliases does not affect the result.","SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalRevenue DESC LIMIT 5;","Both queries perform the same operations: they join the 'products' and 'Order Details' tables, calculate total revenue per product, group by product name, order by sales revenue in descending order, and limit the result to the top 5 products. The syntax differs slightly, but the logic and operations are equivalent.",both
What is the total freight cost by shipping method?,"SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, SUM(Freight) AS TotalFreightCost
FROM orders
GROUP BY ShipVia;
```","Both queries calculate the total freight cost grouped by shipping method, differing only in the alias for the sum, which does not impact the result.","SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;",Both queries calculate the total freight cost by shipping method and are identical.,both
What is the total sales value for each product?,"SELECT products.ProductID, ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID, ProductName ORDER BY TotalSales DESC;","```sql
SELECT products.ProductID, products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY products.ProductID, products.ProductName
```","Both queries calculate the total sales value for each product by joining the 'products' and 'Order Details' tables and summing the sales values grouped by product ID and name. The only difference is the presence of the ORDER BY clause in the ground truth, which does not affect the calculation of total sales for each product.","SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;",Both queries calculate the total sales value for each product using the SUM of Quantity * UnitPrice * (1 - Discount) and group the results by the product. The difference in ordering or selection of columns does not affect the correctness of the total sales calculation.,both
Which employee's orders have the highest average discount applied?,"SELECT E.EmployeeID, AVG(OD.Discount) AS AverageDiscount FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY E.EmployeeID ORDER BY AverageDiscount DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.Discount) AS AverageDiscount
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY AverageDiscount DESC
LIMIT 1;
```","Both queries find the employee whose orders have the highest average discount. The difference is that the generated query includes the employee's first and last names, but this does not affect the result of identifying the employee with the highest average discount.","SELECT e.EmployeeID, AVG(od.Discount) AS AverageDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AverageDiscount DESC LIMIT 1;","Both queries generate the same result as they connect the same tables and fields, aggregate by employee, calculate average discount, and sort to get the top employee.",both
Calculate the average discount applied to orders in the last 3 months.,"SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)","```sql
SELECT AVG([Order Details].Discount) AS average_discount 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate >= DATEADD(MONTH, -3, GETDATE())
```","The generated query is using GETDATE() and DATEADD(), which are SQL Server functions, while the ground truth uses CURDATE() and DATE_SUB(), which are MySQL functions. These differences might affect the result depending on the SQL dialect being used.","SELECT AVG(d.Discount) AS AverageDiscount FROM [Order Details] d WHERE d.OrderID IN (SELECT o.OrderID FROM orders o WHERE o.OrderDate >= DATEADD(month, -3, CURRENT_DATE));","Both queries calculate the average discount for orders placed in the last 3 months by referencing OrderDate and filtering based on that criteria using the current date. They differ only in their approach to joining tables: one uses a subquery, while the other uses an explicit join, but the end result is the same.",FT
Which supplier has the most units in stock across all their products?,SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID ORDER BY SUM(products.UnitsInStock) DESC LIMIT 1;,"```sql
SELECT suppliers.CompanyName, SUM(products.UnitsInStock) AS TotalUnitsInStock
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
GROUP BY suppliers.CompanyName
ORDER BY TotalUnitsInStock DESC
LIMIT 1;
```","Both queries join the suppliers and products tables, group by supplier, and order by the sum of UnitsInStock to find the supplier with the most units. The difference in GROUP BY fields does not affect the outcome.","SELECT SupplierID, SUM(UnitsInStock) AS TotalUnitsInStock FROM products GROUP BY SupplierID ORDER BY TotalUnitsInStock DESC LIMIT 1;","The generated SQL query returns SupplierID, while the ground truth query returns CompanyName.",Base
What is the inventory turnover ratio for February 2023?,SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28',"```sql
SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio 
FROM [Order Details] 
JOIN products ON [Order Details].ProductID = products.ProductID 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28'
```","The generated SQL query matches the ground truth query in logic and should produce the same result. Both queries calculate the inventory turnover ratio for February 2023 using the same joins, filters, and calculations.",SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate BETWEEN '2023-02-01' AND '2023-02-28',"Both queries calculate the inventory turnover ratio by dividing the total sales value for February 2023 by the average units in stock. The logic and joins are consistent, and the time frame is correctly specified.",both
What are the total sales for each product in the current month?,"SELECT P.ProductName, SUM(OD.Quantity * OD.UnitPrice) AS TotalSales FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID WHERE DATE_FORMAT(CURDATE(), '%Y-%m') = DATE_FORMAT(CURRENT_DATE(), '%Y-%m') GROUP BY P.ProductName;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE DATE_TRUNC('month', CURRENT_DATE) = DATE_TRUNC('month', od.OrderID)
GROUP BY p.ProductID, p.ProductName;
```","The generated SQL query compares month from CURRENT_DATE with month from od.OrderID, which is likely incorrect for OrderID containing date info. It should compare with OrderDate or relevant date column in Order Details table, similar to the ground truth using current month filtering.","SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE EXTRACT(MONTH FROM current_date) = EXTRACT(MONTH FROM [Order Details].OrderID) GROUP BY products.ProductID;","The generated query uses EXTRACT to match months on the current date, while the ground truth uses DATE_FORMAT for year and month. The column used to filter dates in the generated query appears incorrect ('OrderID' instead of a date column), leading to potential inaccuracies.",None
Which products have the highest inventory turnover ratio?,"SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY turnover_ratio DESC","```sql
SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
GROUP BY products.ProductID
ORDER BY inventory_turnover_ratio DESC
```","The generated SQL query uses products.ProductID for both SELECT and GROUP BY, while the ground truth query uses products.ProductName. This may produce different results if ProductIDs are not unique to ProductNames or if names convey more meaningful information.",SELECT ProductName FROM products ORDER BY (UnitPrice * UnitsOnOrder) / UnitsInStock DESC;,"The generated query only considers the order products, whereas the ground truth query calculates the turnover ratio using actual sold quantities and inventory for each product, providing a more accurate measure.",None
Which shipping company handled the most deliveries in 2023?,"SELECT shippers.CompanyName, COUNT(orders.OrderID) AS num_deliveries FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY shippers.CompanyName ORDER BY num_deliveries DESC LIMIT 1","```sql
SELECT shippers.CompanyName, COUNT(orders.OrderID) AS delivery_count 
FROM orders 
JOIN shippers ON orders.ShipVia = shippers.ShipperID 
WHERE YEAR(orders.ShippedDate) = 2023 
GROUP BY shippers.CompanyName 
ORDER BY delivery_count DESC 
LIMIT 1;
```","The generated query filters based on ShippedDate in 2023, while the ground truth query uses OrderDate for filtering. This could lead to different results if orders were placed in 2023 but shipped in another year or vice versa.","SELECT ShipVia, COUNT(OrderID) AS TotalDeliveries FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY ShipVia ORDER BY TotalDeliveries DESC LIMIT 1;","The generated query does not join the shippers table, so it lacks the company name, while the ground truth query provides the company name of the shipping company with the most deliveries.",None
Determine the busiest month for orders.,"SELECT EXTRACT(MONTH FROM OrderDate) AS OrderMonth, COUNT(OrderID) AS MonthlyOrders FROM orders GROUP BY OrderMonth ORDER BY MonthlyOrders DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS TotalOrders
FROM orders
GROUP BY Month
ORDER BY TotalOrders DESC
LIMIT 1;
```","The generated query groups by year and month using DATE_FORMAT, potentially splitting orders across years, whereas the ground truth query groups strictly by the month number, aggregating all years together.","SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EXTRACT(MONTH FROM OrderDate) ORDER BY OrderCount DESC LIMIT 1;","Both queries group orders by month and count them, ordering by the count in descending order, and limit to the top result, fulfilling the user's request.",FT
Which cities do the top three suppliers operate from?,SELECT suppliers.City FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.City ORDER BY COUNT(DISTINCT products.SupplierID) DESC LIMIT 3;,"```sql
SELECT City
FROM suppliers
WHERE SupplierID IN (
    SELECT SupplierID
    FROM orders
    JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
    GROUP BY products.SupplierID
    ORDER BY SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) DESC
    LIMIT 3
);
```","The generated query calculates the top suppliers based on sales, whereas the ground truth query counts distinct suppliers per city. The methods differ, leading to potentially different cities being identified.",SELECT s.City FROM suppliers s ORDER BY (SELECT SUM(od.Quantity) FROM [Order Details] od WHERE od.SupplierID = s.SupplierID) DESC LIMIT 3;,"The generated query orders by total quantity of products supplied, but the ground truth orders by the number of distinct suppliers from each city. Different sorting criteria may yield different results.",None
What is the longest time taken to fulfill an order?,"SELECT MAX(DATEDIFF(ShippedDate, OrderDate)) AS LongestFulfillmentTime FROM orders;","```sql
SELECT MAX(DATEDIFF(ShippedDate, OrderDate)) AS LongestFulfillmentTime
FROM orders;
```",The generated SQL query is identical to the ground truth query and will yield the same result for the longest time taken to fulfill an order.,"SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTime FROM orders ORDER BY FulfillmentTime DESC LIMIT 1;","Both queries determine the longest time taken to fulfill an order by calculating the difference between ShippedDate and OrderDate. The generated query selects the order with the longest fulfillment time, while the ground truth query gets the maximum difference directly. Both effectively give the longest fulfillment time, thus addressing the user's question.",both
What is the total freight cost incurred for orders handled by each employee?,"SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(o.Freight) AS TotalFreight
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","The generated query and the ground truth query both calculate the total freight cost for each employee. The generated query also includes employee first and last names, but this does not affect the calculation of TotalFreight, so it yields the same results in terms of data accuracy.","SELECT o.EmployeeID, SUM(o.Freight) AS TotalFreight FROM orders o GROUP BY o.EmployeeID;","Both queries calculate the total freight cost by employee, grouping by EmployeeID. They assume all employees in 'orders' exist in 'employees', which makes the join unnecessary for the user's question.",both
What is the average monthly sales growth for each product?,"SELECT p.ProductName, AVG(CASE WHEN LAG(SUM(od.Quantity), 1) OVER (PARTITION BY p.ProductID ORDER BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate)) = 0 THEN NULL ELSE (SUM(od.Quantity) - LAG(SUM(od.Quantity), 1) OVER (PARTITION BY p.ProductID ORDER BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate))) / LAG(SUM(od.Quantity), 1) OVER (PARTITION BY p.ProductID ORDER BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate)) END) AS AvgSalesGrowth FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, p.ProductName, EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate);","```sql
SELECT 
    p.ProductID,
    p.ProductName,
    AVG(monthly_sales_growth) AS AverageMonthlySalesGrowth
FROM (
    SELECT 
        ProductID,
        EXTRACT(YEAR FROM o.OrderDate) AS sales_year,
        EXTRACT(MONTH FROM o.OrderDate) AS sales_month,
        SUM(od.Quantity) AS total_sales,
        LAG(SUM(od.Quantity)) OVER (PARTITION BY od.ProductID ORDER BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate)) AS previous_month_sales,
        ((SUM(od.Quantity) - LAG(SUM(od.Quantity)) OVER (PARTITION BY od.ProductID ORDER BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate))) / NULLIF(LAG(SUM(od.Quantity)) OVER (PARTITION BY od.ProductID ORDER BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate)), 0)) * 100) AS monthly_sales_growth
    FROM 
        [Order Details] od
    JOIN 
        Orders o ON od.OrderID = o.OrderID
    GROUP BY 
        ProductID, sales_year, sales_month
) AS monthly_growth
JOIN products p ON p.ProductID = monthly_growth.ProductID
GROUP BY 
    p.ProductID, p.ProductName
```","The generated query calculates average monthly sales growth correctly using a derived table for intermediate calculations, but it omits monthly granularity in the final grouping. The ground truth query includes grouping by year and month to ensure LAG function works correctly, which the generated query lacks.","SELECT p.ProductName, AVG(m.MonthlySalesGrowth) AS AvgSalesGrowth FROM Product p JOIN ( SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, EXTRACT(YEAR FROM o.OrderDate) AS Year, od.ProductID, SUM(od.Quantity) AS TotalSales, LAG(SUM(od.Quantity), 1) OVER (PARTITION BY od.ProductID ORDER BY EXTRACT(YEAR, MONTH FROM o.OrderDate)) AS PreviousMonthSales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY od.ProductID, Year, Month ) m ON p.ProductID = m.ProductID WHERE m.PreviousMonthSales IS NOT NULL GROUP BY p.ProductName;","The generated query calculates average sales growth using absolute differences, while the ground truth calculates growth percentage and handles division by zero.",None
How does the sales quantity of each product compare month over month?,"SELECT ProductName, EXTRACT(MONTH FROM OrderDate) AS Month, SUM([Order Details].Quantity) AS MonthlyQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ProductName, EXTRACT(MONTH FROM OrderDate) ORDER BY ProductName, EXTRACT(MONTH FROM OrderDate);","```sql
SELECT 
    p.ProductID,
    p.ProductName,
    DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month,
    SUM(od.Quantity) AS TotalSales
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
JOIN 
    orders o ON od.OrderID = o.OrderID
GROUP BY 
    p.ProductID, Month
ORDER BY 
    p.ProductID, Month;
```","The generated query groups by year-month, while the ground truth query only extracts and groups by month ignoring the year, potentially leading to incorrect aggregations across different years.","SELECT P.ProductName, EXTRACT(MONTH FROM O.OrderDate) AS Month, SUM(OD.Quantity) AS QuantitySold FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID JOIN orders O ON OD.OrderID = O.OrderID GROUP BY P.ProductID, P.ProductName, Month;",Both queries extract sales quantities by product name and month. The differences in column aliases and ORDER BY clause do not affect the core result of comparing monthly sales per product.,FT
What is the total discount given for each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    Month
ORDER BY 
    Month;
```","The generated query and ground truth query calculate the same total discount per month, differing only in the presence of the ORDER BY clause, which does not affect the calculation.","SELECT EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Discount * od.UnitPrice * od.Quantity) AS TotalDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Year, Month;","Both queries calculate the total discount by extracting the year and month from the OrderDate and multiplying UnitPrice, Quantity, and Discount, then summing this value grouped by the extracted year and month. They use different methods to format the date, but both achieve the same grouping and calculations.",both
What is the average discount applied per order this year?,SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE),"```sql
SELECT AVG([Order Details].Discount) AS average_discount_per_order
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
```",Both queries calculate the average discount for orders in the year 2023 using different date conditions but yielding the same year-specific outcome.,SELECT AVG(Discount) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE);,"The generated query and ground truth query produce the same result as they both calculate the average discount from the 'Order Details' joined with 'orders' for the current year. The differences are in naming the output column, which does not affect the computed value.",both
What is the average lead time for each supplier over the past year?,"SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN orders o ON p.ProductID IN (SELECT od.ProductID FROM [Order Details] od WHERE od.OrderID = o.OrderID) WHERE o.OrderDate BETWEEN CURDATE() - INTERVAL 1 YEAR AND CURDATE() GROUP BY s.SupplierID;","```sql
SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
GROUP BY suppliers.SupplierID;
```","Both queries aim to calculate the average lead time per supplier over the past year. They both join the suppliers, products, and orders tables and calculate the date difference between the order date and shipped date, grouping results by supplier. While there are differences in syntax and explicit use of joins, both effectively answer the question.","SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= CURDATE() - INTERVAL 1 YEAR GROUP BY s.SupplierID;",Both queries calculate the average lead time per supplier over the past year. The differences in subquery structures do not affect the outcome as they both correctly join the necessary tables and filter orders within the last year.,both
Which employee has the most orders completed in a given month?,"SELECT orders.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM orders WHERE MONTH(orders.OrderDate) = 6 AND YEAR(orders.OrderDate) = 2023 GROUP BY orders.EmployeeID ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS OrderCount
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE EXTRACT(YEAR FROM o.OrderDate) = 2023 AND EXTRACT(MONTH FROM o.OrderDate) = 9
GROUP BY e.EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```","The generated query extracts orders for September 2023 while the ground truth query is for June 2023. Additionally, the generated query includes employee names, while the ground truth does not.","SELECT e.EmployeeID, COUNT(o.OrderID) AS TotalOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE MONTH(o.OrderDate) = ? AND YEAR(o.OrderDate) = ? GROUP BY e.EmployeeID ORDER BY TotalOrders DESC LIMIT 1;","Both queries aim to find the employee with the most orders completed in a specified month and year, using a COUNT and GROUP BY, and order results by the count in descending order, with a limit of 1.",FT
Find the maximum reorder level for products from each supplier.,"SELECT SupplierID, MAX(ReorderLevel) AS MaxReorderLevel FROM products GROUP BY SupplierID;","```sql
SELECT SupplierID, MAX(ReorderLevel) AS MaxReorderLevel
FROM products
GROUP BY SupplierID;
```","Both queries are identical in structure and logic, producing the same results. They find the maximum reorder level for products from each supplier by grouping by SupplierID.","SELECT s.SupplierID, MAX(p.ReorderLevel) AS MaxReorderLevel FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;","Both queries will yield the same results as they aggregate the maximum reorder level for products grouped by supplier. The generated query explicitly joins the suppliers table, but as long as SupplierID exists and is relevant in the products table, the results match.",both
Which shipping company was used the most in the previous quarter?,"SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders WHERE QUARTER(OrderDate) = QUARTER(CURDATE()) - 1 AND YEAR(OrderDate) = YEAR(CURDATE()) OR (QUARTER(CURDATE()) = 1 AND YEAR(OrderDate) = YEAR(CURDATE()) - 1) GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;","```sql
SELECT ShipVia, COUNT(OrderID) AS OrderCount
FROM orders
WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 quarter'
  AND OrderDate < DATE_TRUNC('quarter', CURRENT_DATE)
GROUP BY ShipVia
ORDER BY OrderCount DESC
LIMIT 1;
```",The generated query uses DATE_TRUNC and does not correctly handle the year transition between Q1 and Q4 like the ground truth query does.,"SELECT shippers.CompanyName, COUNT(orders.OrderID) AS order_count FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 QUARTER) GROUP BY shippers.CompanyName ORDER BY order_count DESC LIMIT 1","The generated query does not accurately filter orders from the previous quarter. It uses DATE_SUB with 1 QUARTER, which might not correctly correspond to the previous quarter as defined in the ground truth query. The ground truth query specifically calculates the quarter and year, considering year transitions, ensuring it accurately targets the previous quarter.",None
Which employee handled the most on-time deliveries in the last year?,"SELECT EmployeeID, COUNT(OrderID) AS OnTimeDeliveries FROM orders WHERE ShippedDate <= RequiredDate AND YEAR(OrderDate) = YEAR(CURDATE()) - 1 GROUP BY EmployeeID ORDER BY OnTimeDeliveries DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OnTimeDeliveries
FROM orders
WHERE ShippedDate <= RequiredDate AND OrderDate >= DATEADD(YEAR, -1, GETDATE())
GROUP BY EmployeeID
ORDER BY OnTimeDeliveries DESC
LIMIT 1;
```","The generated query calculates the last year from the current date using DATEADD and GETDATE(), which may not align with the calendar year specified in the ground truth query. The ground truth query explicitly filters data from the previous calendar year using YEAR(OrderDate) = YEAR(CURDATE()) - 1.","SELECT o.EmployeeID, COUNT(o.OrderID) AS OnTimeDeliveries FROM orders o WHERE o.ShippedDate <= o.RequiredDate AND o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY o.EmployeeID ORDER BY OnTimeDeliveries DESC LIMIT 1;","The generated query checks for orders from the last 365 days, while the ground truth query checks for the entire previous calendar year.",None
How many employees were hired before 2000?,SELECT COUNT(*) FROM employees WHERE HireDate < '2000-01-01';,"```sql
SELECT COUNT(*) 
FROM employees 
WHERE HireDate < '2000-01-01';
```",Both queries accurately count the number of employees hired before the year 2000 and are functionally identical.,SELECT COUNT(*) FROM employees WHERE hire_date < '2000-01-01';,Both queries count employees with hire dates before 2000. The only difference is the column name capitalization.,both
Which employees have a higher average order value than their direct manager?,"SELECT a.EmployeeID FROM employees a JOIN orders b ON a.EmployeeID = b.EmployeeID JOIN [Order Details] c ON b.OrderID = c.OrderID JOIN employees d ON a.ReportsTo = d.EmployeeID GROUP BY a.EmployeeID, d.EmployeeID HAVING AVG(c.UnitPrice * c.Quantity * (1 - c.Discount)) > (SELECT AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.EmployeeID = d.EmployeeID);","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
HAVING AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) >
  (SELECT AVG(od2.UnitPrice * od2.Quantity * (1 - od2.Discount))
   FROM employees m
   JOIN orders o2 ON m.EmployeeID = o2.EmployeeID
   JOIN [Order Details] od2 ON o2.OrderID = od2.OrderID
   WHERE m.EmployeeID = e.ReportsTo)
```",Both queries calculate the average order value for employees and compare it to that of their managers. The logic and joins to determine the employee-manager relationship and to calculate average order values are correctly implemented in both queries.,"SELECT e1.EmployeeID, (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT e1orders.OrderID)) AS EmployeeAOV, (SELECT (SUM(od2.UnitPrice * od2.Quantity * (1 - od2.Discount)) / COUNT(DISTINCT e2orders.OrderID)) FROM employees e2 JOIN orders e2orders ON e2.EmployeeID = e2orders.EmployeeID JOIN [Order Details] od2 ON e2orders.OrderID = od2.OrderID WHERE e2.ReportsTo = e1.ReportsTo AND e2.EmployeeID = e1.ReportsTo) AS ManagerAOV FROM employees e1 JOIN orders e1orders ON e1.EmployeeID = e1orders.EmployeeID JOIN [Order Details] od ON e1orders.OrderID = od.OrderID GROUP BY e1.EmployeeID HAVING (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT e1orders.OrderID)) > (SELECT (SUM(od2.UnitPrice * od2.Quantity * (1 - od2.Discount)) / COUNT(DISTINCT e2orders.OrderID)) FROM employees e2 JOIN orders e2orders ON e2.EmployeeID = e2orders.EmployeeID JOIN [Order Details] od2 ON e2orders.OrderID = od2.OrderID WHERE e2.ReportsTo = e1.ReportsTo AND e2.EmployeeID = e1.ReportsTo);",Both queries correctly identify employees whose average order value is greater than their direct manager's average order value. They calculate the average order value for employees and their direct managers using similar logic and comparing these values.,both
What is the average units in stock per product category?,"SELECT CategoryID, AVG(UnitsInStock) AS AvgUnitsInStock FROM products GROUP BY CategoryID;","```sql
SELECT products.CategoryID, AVG(products.UnitsInStock) AS AverageUnitsInStock
FROM products
GROUP BY products.CategoryID;
```","Both queries calculate the average units in stock per product category, grouping by CategoryID. The difference is only in alias naming and inclusion of table names.","SELECT c.CategoryID, AVG(p.UnitsInStock) AS AverageUnitsInStock FROM Product p JOIN Category c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;","The generated query assumes the existence of a 'Category' table and joins it with 'Product', while the ground truth query directly groups by 'CategoryID' from the 'products' table without a join.",Base
Which shipping methods are most frequently used?,"SELECT o.ShipVia, COUNT(o.OrderID) AS UseCount FROM orders o GROUP BY o.ShipVia ORDER BY UseCount DESC;","```sql
SELECT ShipVia, COUNT(*) AS Frequency
FROM orders
GROUP BY ShipVia
ORDER BY Frequency DESC;
```","Both queries compute the frequency of each shipping method used by grouping on the 'ShipVia' column and sorting in descending order, which correctly answers the user's question.","SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC;","Both queries group the 'orders' table by 'ShipVia' and count the occurrences of 'OrderID', ordering the results by the count in descending order. The queries yield the same results, despite minor differences in alias naming.",both
Find the supplier with the largest revenue from sales.,"SELECT products.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID ORDER BY TotalRevenue DESC LIMIT 1;","```sql
SELECT s.SupplierID, s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY s.SupplierID, s.CompanyName
ORDER BY TotalRevenue DESC
LIMIT 1;
```","The generated SQL query includes a join with 'suppliers' and 'orders' tables, which may not be necessary. It also selects 'CompanyName', which isn't specified in the ground truth query.","SELECT products.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.SupplierID ORDER BY TotalRevenue DESC LIMIT 1;","Both queries perform the same operations: they join 'products' with '[Order Details]' tables, group by 'SupplierID', calculate 'TotalRevenue', and return the top supplier. The join order does not affect the result.",FT
Determine the products that have not been sold at all.,"SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;","```sql
SELECT p.ProductID, p.ProductName
FROM products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.ProductID IS NULL;
```",The generated SQL query is identical to the ground truth query and correctly identifies products that have not been sold by checking for NULL values in the [Order Details] table.,SELECT p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL;,Both queries use a LEFT JOIN to find products with no sales by checking for NULL in the joined table. The difference in selected columns does not affect the logic or result for identifying unsold products.,both
What is the percentage of orders delivered on time each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 100.0 * COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month,
    COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID) AS On_time_Delivery_Rate
FROM 
    orders
GROUP BY 
    Month
```","Both queries calculate the on-time delivery rate by comparing ShippedDate with RequiredDate for each month. They use the same logic and aggregate functions, and they group by the formatted OrderDate.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*)) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","Both queries calculate the monthly percentage of orders delivered on time by comparing ShippedDate and RequiredDate. They use COUNT to determine the number of on-time deliveries and the total number of orders, then compute the percentage. The difference in column used in COUNT (OrderID vs *) does not affect the result.",both
What is the total number of units on order for each product category?,"SELECT CategoryID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY CategoryID;","```sql
SELECT p.CategoryID, SUM(p.UnitsOnOrder) AS TotalUnitsOnOrder
FROM products p
GROUP BY p.CategoryID;
```","Both queries calculate the total units on order for each product category by summing the 'UnitsOnOrder' grouped by 'CategoryID'. They achieve the same result, differing only in alias usage.","SELECT CategoryID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY CategoryID;",The generated SQL query is identical to the ground truth query and correctly calculates the total number of units on order for each product category.,both
What is the total freight cost for each shipping method?,"SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia","```sql
SELECT ShipVia, SUM(Freight) AS TotalFreight
FROM orders
GROUP BY ShipVia;
```",Both queries calculate the total freight cost for each shipping method by grouping on 'ShipVia' and summing 'Freight'. The slight difference in alias naming does not affect the result.,"SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",Both queries calculate the total freight cost for each shipping method using the same logic and structure.,both
What is the average discount provided across all products?,SELECT AVG(Discount) FROM [Order Details];,"```sql
SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];
```","Both queries calculate the average discount from the 'Order Details' table, yielding the same result. The generated query includes an alias which does not affect the outcome.",SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];,Both queries calculate the average discount across all products from the 'Order Details' table. The column alias in the generated query does not affect the result.,both
Which suppliers have not been used in any orders?,SELECT s.SupplierID FROM suppliers s LEFT JOIN products p ON s.SupplierID = p.SupplierID LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL;,"```sql
SELECT s.SupplierID, s.CompanyName
FROM suppliers s
LEFT JOIN products p ON s.SupplierID = p.SupplierID
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.OrderID IS NULL;
```",Both queries perform left joins to identify suppliers linked to products that do not appear in any orders. They essentially yield the same result set.,SELECT suppliers.CompanyName FROM suppliers LEFT JOIN products ON suppliers.SupplierID = products.SupplierID LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].OrderID IS NULL GROUP BY suppliers.CompanyName;,"The generated query selects 'suppliers.CompanyName' and groups by it, while the ground truth selects 's.SupplierID'. The ground truth is focused on SupplierID, while the generated query includes CompanyName, which might cause a mismatch in results.",Base
Calculate the total sales revenue per supplier for the last fiscal year.,"SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SupplierRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY suppliers.CompanyName ORDER BY SupplierRevenue DESC;","```sql
SELECT s.SupplierID, s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) 
GROUP BY s.SupplierID, s.CompanyName
```","The generated SQL uses a date range for the last year from the current date, but the ground truth query uses the last fiscal year based on a year check, which is more accurate for fiscal year calculation.","SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY suppliers.CompanyName;","The generated SQL query and the ground truth query both calculate the total sales revenue per supplier for the last fiscal year. The main difference is the alias used for the total sales column and the order by clause, but these do not affect the accuracy of the results for this specific question.",FT
What are the top five customers based on order volume?,"SELECT CustomerID, COUNT(OrderID) AS OrderVolume FROM orders GROUP BY CustomerID ORDER BY OrderVolume DESC LIMIT 5;","```sql
SELECT CustomerID, COUNT(OrderID) AS OrderVolume
FROM orders
GROUP BY CustomerID
ORDER BY OrderVolume DESC
LIMIT 5;
```","The generated SQL query and the ground truth query are functionally equivalent, producing the same results for finding the top five customers based on order volume.","SELECT c.CustomerID, COUNT(o.OrderID) AS OrderVolume FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY OrderVolume DESC LIMIT 5;",Both queries correctly aggregate and sort the order volumes for each customer and limit the results to the top five customers.,both
What are the top 5 cities with the most supplier companies?,"SELECT City, COUNT(DISTINCT SupplierID) AS SupplierCount FROM suppliers GROUP BY City ORDER BY SupplierCount DESC LIMIT 5;","```sql
SELECT City, COUNT(*) AS SupplierCount
FROM suppliers
GROUP BY City
ORDER BY SupplierCount DESC
LIMIT 5;
```","The generated query counts all rows per city, while the ground truth counts distinct suppliers by SupplierID.","SELECT suppliers.City, COUNT(suppliers.SupplierID) AS Supplier_Count FROM suppliers GROUP BY suppliers.City ORDER BY Supplier_Count DESC LIMIT 5;","Both queries accurately count suppliers per city and order the results to find the top 5 cities, handling duplicates the same way without specifying DISTINCT on non-duplicate columns.",FT
What is the most common region suppliers are from?,"SELECT Region, COUNT(*) FROM suppliers GROUP BY Region ORDER BY COUNT(*) DESC;","```sql
SELECT Region, COUNT(*) AS SupplierCount
FROM suppliers
GROUP BY Region
ORDER BY SupplierCount DESC
LIMIT 1;
```","Both queries intend to find the most common region suppliers are from by counting suppliers per region and ordering them by the count in descending order. The generated query uses LIMIT 1 to select the top region, which directly answers the user's question.","SELECT SupplierRegion, COUNT(*) AS RegionCount FROM suppliers GROUP BY SupplierRegion ORDER BY RegionCount DESC;","The column names used for grouping and selecting are different: 'SupplierRegion' vs 'Region'. Assuming the schema uses the 'Region' column, the generated query might not be accurate.",Base
Find employees who have worked for more than 10 years and their number of orders handled.,"SELECT e.EmployeeID, COUNT(o.OrderID) FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE YEAR(CURRENT_DATE) - YEAR(e.HireDate) > 10 GROUP BY e.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS NumberOfOrders
FROM employees e
LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE DATEDIFF(CURRENT_DATE, e.HireDate) > 3650
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```",Both queries determine employees who have worked more than 10 years and count their orders. Differences in how the date is calculated do not affect the final result. The generated query includes additional employee details.,"```sql
SELECT e.EmployeeID, COUNT(o.OrderID) as NumberOfOrders FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE e.HireDate <= DATE_SUB(CURDATE(), INTERVAL 10 YEAR) GROUP BY e.EmployeeID;
```","The generated query includes employees with zero orders due to the LEFT JOIN, which the ground truth query omits by using an INNER JOIN.",Base
What is the total freight cost by country?,"SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;","```sql
SELECT ShipCountry, SUM(Freight) AS TotalFreight
FROM orders
GROUP BY ShipCountry;
```","The generated SQL query and the ground truth query are functionally equivalent, both calculating the total freight cost grouped by country. The only difference is the alias for the SUM(Freight) column, which does not affect the outcome.","SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry ORDER BY TotalFreight DESC;","Both queries calculate the total freight by country. The generated query orders the results by total freight cost, but this does not affect the accuracy of the answer.",both
Determine the top 5 customers by lifetime value.,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY LifetimeValue DESC LIMIT 5;","```sql
SELECT c.CustomerID, c.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.CustomerID, c.CompanyName
ORDER BY LifetimeValue DESC
LIMIT 5;
```","The generated query includes 'CompanyName' in the SELECT and GROUP BY clauses, which could affect the results if customers are not uniquely identified by 'CustomerID' alone. The ground truth query does not include 'CompanyName', suggesting it may not be necessary for the given task.","SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerLifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY CustomerLifetimeValue DESC LIMIT 5;",Both queries calculate the lifetime value by summing up the discounted total of order details for each customer and list the top 5 customers by this value. The structural differences do not affect the result.,FT
Identify the regions with the highest order volumes.,"SELECT ShipRegion, COUNT(OrderID) AS OrderVolume FROM orders GROUP BY ShipRegion ORDER BY OrderVolume DESC;","```sql
SELECT ShipRegion, COUNT(OrderID) AS OrderVolume
FROM orders
GROUP BY ShipRegion
ORDER BY OrderVolume DESC;
```",The generated SQL query accurately answers the user's question and matches the ground truth query's logic. Both queries list regions by order volume in descending order.,"SELECT ShipRegion, COUNT(OrderID) AS OrderVolume FROM orders GROUP BY ShipRegion ORDER BY OrderVolume DESC LIMIT 3;","The generated query limits the results to the top 3 regions, but the ground truth query includes all regions.",Base
Which employee generated the highest sales in Q2 2023?,"SELECT employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN employees ON orders.EmployeeID = employees.EmployeeID 
WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' 
GROUP BY employees.EmployeeID 
ORDER BY total_sales DESC 
LIMIT 1
```","The generated SQL query selects EmployeeID, while the ground truth query selects FirstName and LastName, resulting in different output structures.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1","Both queries correctly calculate the highest sales by an employee in Q2 2023 by joining the same tables and using the same logic. The difference is in the columns selected, but the core requirement of identifying the employee with the highest sales is met.",FT
How many orders were placed and not yet shipped?,SELECT COUNT(OrderID) AS UnshippedOrders FROM orders WHERE ShippedDate IS NULL;,"```sql
SELECT COUNT(OrderID) AS UnshippedOrders
FROM orders
WHERE ShippedDate IS NULL;
```","Both queries accurately count orders that have not been shipped, as they both check for ShippedDate being NULL.",SELECT COUNT(Customers.CustomerID) AS UnshippedOrders FROM orders JOIN Customers ON orders.CustomerID = Customers.CustomerID WHERE ShippedDate IS NULL,Both queries correctly count the number of unshipped orders by checking for NULL in the ShippedDate column. The difference in the join and counting fields does not affect the outcome.,both
What is the total freight cost incurred for each shipping country?,"SELECT o.ShipCountry, SUM(o.Freight) AS TotalFreight FROM orders o GROUP BY o.ShipCountry;","```sql
SELECT ShipCountry, SUM(Freight) AS TotalFreightCost
FROM orders
GROUP BY ShipCountry;
```",Both queries calculate the total freight cost for each shipping country by summing the Freight column and grouping by ShipCountry from the orders table.,"SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;","Both queries select the ShipCountry and the total freight using SUM(Freight). They group by ShipCountry, so they yield the same result.",both
Which products are below their reorder level?,SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel 
FROM products 
WHERE UnitsInStock < ReorderLevel;
```","The generated query returns more columns (ProductID, UnitsInStock, ReorderLevel) than the ground truth query, which only returns ProductName.","SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",Both queries identify products where UnitsInStock is less than ReorderLevel. The extra ProductID column in the generated query does not affect the condition or main result concerning which products are below their reorder level.,FT
Which employees have not recorded any sales this year?,SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND YEAR(o.OrderDate) = YEAR(CURDATE()) WHERE o.OrderID IS NULL;,"```sql
SELECT e.EmployeeID, e.FirstName, e.LastName
FROM employees e
LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE)
LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE od.OrderID IS NULL;
```","The generated SQL query includes an extra join with 'Order Details' and checks for 'od.OrderID IS NULL', which is unnecessary for identifying employees with no sales.","SELECT employees.EmployeeID, employees.FirstName, employees.LastName FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID AND YEAR(orders.OrderDate) = YEAR(CURDATE()) WHERE orders.OrderID IS NULL;","The generated query includes additional columns (FirstName, LastName) that are not present in the ground truth query. This may lead to different results if only EmployeeID is needed.",None
Which products are below their reorder level and need to be restocked?,SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock < ReorderLevel;
```","The generated SQL query returns additional columns (ProductID, UnitsInStock, ReorderLevel) compared to the ground truth query, which only returns ProductName. This leads to different results.",SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;,"The generated query uses '<=' which includes products with UnitsInStock equal to ReorderLevel, while the ground truth uses '<' for strictly below.",None
Which employee handled the most orders that were shipped late?,"SELECT employees.EmployeeID, COUNT(orders.OrderID) AS LateOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE ShippedDate > RequiredDate GROUP BY employees.EmployeeID ORDER BY LateOrders DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS LateOrders
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.ShippedDate > o.RequiredDate
GROUP BY e.EmployeeID
ORDER BY LateOrders DESC
LIMIT 1;
```","Both queries correctly join the employees and orders tables, filter for late shipments, group by employee, and order by the count of late orders to find the employee who handled the most late shipments. The inclusion of employee names in the generated query does not affect the result.","SELECT EmployeeID, COUNT(OrderID) AS LateOrderCount FROM orders WHERE ShippedDate > RequiredDate GROUP BY EmployeeID ORDER BY LateOrderCount DESC LIMIT 1;","Both queries correctly count orders where ShippedDate is later than RequiredDate, group by EmployeeID, and return the employee with the most late orders. The join in the ground truth query does not affect the result.",both
List all products that have never been ordered.,SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"```sql
SELECT p.ProductID, p.ProductName 
FROM products p 
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID 
WHERE od.ProductID IS NULL;
```","Both queries correctly identify products that have never been ordered. The first query uses a LEFT JOIN with a NULL check, while the second query uses a NOT IN clause with a subquery. Both yield the same result.",SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,Both queries are identical and correctly select products that have never been ordered by checking ProductID against the Order Details table.,both
What is the percentage of orders delivered on or before the required date each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 100.0 * COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    COUNT(OrderID) AS TotalOrders,
    COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveries,
    (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate
FROM 
    orders
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries calculate the percentage of orders delivered on or before the required date each month. The generated query includes additional columns (TotalOrders and OnTimeDeliveries) and an explicit ORDER BY clause, but these do not affect the correctness of OnTimeDeliveryRate calculation.","SELECT DATE_TRUNC('month', OrderDate) AS Month, (SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",The generated query uses DATE_TRUNC and considers 'month' but doesn't specify the correct format like the ground truth which uses DATE_FORMAT with '%Y-%m'. This difference might affect monthly grouping.,Base
Which city has the highest average shipping cost?,"SELECT ShipCity, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipCity ORDER BY AvgShippingCost DESC LIMIT 1;","```sql
SELECT ShipCity, AVG(Freight) AS AverageShippingCost
FROM orders
GROUP BY ShipCity
ORDER BY AverageShippingCost DESC
LIMIT 1;
```",Both queries accurately calculate the average shipping cost for each city and return the city with the highest average.,"SELECT ShipCity, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipCity ORDER BY AvgShippingCost DESC LIMIT 1;","The generated SQL query is identical to the ground truth query, and both correctly calculate the city with the highest average shipping cost.",both
Determine which products have had discounts applied most frequently.,"SELECT p.ProductName, COUNT(od.Discount) AS DiscountCount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.Discount > 0 GROUP BY p.ProductName ORDER BY DiscountCount DESC;","```sql
SELECT ProductID, COUNT(*) AS DiscountCount
FROM [Order Details]
WHERE Discount > 0
GROUP BY ProductID
ORDER BY DiscountCount DESC;
```","The generated query returns ProductID, while the ground truth returns ProductName. To fully match, the generated query should join with products table and select ProductName.","SELECT ProductID, COUNT(*) AS DiscountCount FROM [Order Details] WHERE Discount > 0 GROUP BY ProductID ORDER BY DiscountCount DESC",The generated query lists ProductID while the ground truth lists ProductName. The results are different identifiers for products.,None
Identify the countries with the most unique suppliers.,"SELECT Country, COUNT(DISTINCT SupplierID) AS UniqueSuppliers FROM suppliers GROUP BY Country ORDER BY UniqueSuppliers DESC;","```sql
SELECT Country, COUNT(DISTINCT SupplierID) AS UniqueSuppliers
FROM suppliers
GROUP BY Country
ORDER BY UniqueSuppliers DESC;
```","The generated SQL query accurately answers the user's question and yields the same results as the ground truth query. Both queries select the country and count distinct suppliers, group by country, and order the results by the number of unique suppliers in descending order.","SELECT Country, COUNT(DISTINCT SupplierID) AS UniqueSuppliers FROM suppliers GROUP BY Country ORDER BY UniqueSuppliers DESC;","Both the generated SQL query and the ground truth query are identical and correctly answer the user's question by selecting countries and counting the number of unique suppliers for each country, ordering them in descending order.",both
Which employees are linked to the most orders?,"SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY EmployeeID
ORDER BY OrderCount DESC;
```","The generated query lists all employees ordered by the number of orders, but it does not limit the results to the employee with the most orders like the ground truth query does.","SELECT e.EmployeeID, COUNT(o.OrderID) AS NumberOfOrders FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;","Both queries are functionally equivalent as they both count orders per employee and return the employee with the most orders. Any employee not linked to orders will not be considered as the result is filtered by the highest count, making a JOIN unnecessary.",FT
Which city has the highest number of orders placed in 2023?,"SELECT orders.ShipCity, COUNT(orders.OrderID) AS num_orders FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY orders.ShipCity ORDER BY num_orders DESC LIMIT 1","```sql
SELECT ShipCity, COUNT(OrderID) AS number_of_orders
FROM orders
WHERE YEAR(OrderDate) = 2023
GROUP BY ShipCity
ORDER BY number_of_orders DESC
LIMIT 1;
```","Both queries effectively filter orders from the year 2023 and group by ShipCity to count orders, then sort in descending order and limit the result to one city with the highest number of orders. The methods of filtering the date slightly differ but achieve the same outcome.","SELECT ShipCity, COUNT(OrderID) AS total_orders FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY ShipCity ORDER BY total_orders DESC LIMIT 1;",Both queries count the orders per city for the year 2023 and return the city with the highest count. The use of YEAR(OrderDate) and BETWEEN ensures they capture all orders in 2023.,both
How many products have zero units in stock?,SELECT COUNT(ProductID) AS NumberOfProductsWithZeroStock FROM products WHERE UnitsInStock = 0;,"```sql
SELECT COUNT(*) AS ZeroUnitsInStock
FROM products
WHERE UnitsInStock = 0;
```","Both queries count the number of products with zero units in stock, using the same condition and table. The choice of column in COUNT does not affect the result.",SELECT COUNT(*) FROM products WHERE UnitsInStock = 0;,Both queries count the number of products with zero units in stock.,both
Analyze the correlation between employee job title and sales performance.,"SELECT employees.Title, AVG(TotalSales) AS AverageSales FROM (SELECT employees.Title, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, employees.Title) AS EmployeeSales GROUP BY employees.Title;","```sql
SELECT e.Title, 
       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.Title
ORDER BY TotalSales DESC;
```","The generated query calculates total sales per job title, while the ground truth query calculates the average sales per job title, thus they answer different aspects of the correlation.","SELECT employees.Title, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.Title ORDER BY total_sales DESC","The generated query calculates total sales for each job title, while the ground truth query computes the average sales per job title.",None
What is the average order fulfillment time for each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM 
    orders
GROUP BY 
    Month
```","Both queries calculate the average order fulfillment time per month by formatting the OrderDate to '%Y-%m' and using the AVG and DATEDIFF functions. They group results by the formatted month, providing the same output despite differences in alias names.","SELECT EXTRACT(YEAR FROM orders.OrderDate) AS Year, EXTRACT(MONTH FROM orders.OrderDate) AS Month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Year, Month;","Both queries calculate the average order fulfillment time per month using similar logic. The generated query separates year and month, while the ground truth combines them, but the result is effectively the same.",both
Identify orders with a shipping delay greater than 7 days.,SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate + INTERVAL '7' DAY;,"```sql
SELECT *
FROM orders
WHERE DATEDIFF(ShippedDate, OrderDate) > 7;
```","The generated query checks for orders shipped more than 7 days after the order date, while the ground truth query checks for orders shipped more than 7 days after the required date.","SELECT OrderID, DATEDIFF(ShippedDate, RequiredDate) AS ShippingDelay FROM orders WHERE DATEDIFF(ShippedDate, RequiredDate) > 7;","The generated query calculates the delay as (ShippedDate - RequiredDate) and checks if it's greater than 7. The ground truth checks if ShippedDate is more than 7 days after RequiredDate, not just a simple difference.",None
How many products are currently at or above their reorder level?,SELECT COUNT(*) AS AtOrAboveReOrder FROM products WHERE UnitsInStock >= ReorderLevel;,"```sql
SELECT COUNT(*) AS ProductsAtOrAboveReorderLevel
FROM products
WHERE UnitsInStock >= ReorderLevel;
```",Both queries count the number of products where UnitsInStock is greater than or equal to ReorderLevel. They will yield the same result.,SELECT COUNT(*) AS products_at_or_above_reorder FROM products WHERE UnitsInStock >= ReorderLevel;,"Both queries count products with UnitsInStock greater than or equal to ReorderLevel, differing only in alias naming.",both
What is the current inventory turnover ratio?,SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID;,"```sql
SELECT 
    SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID;
```","The generated SQL query and the ground truth query are effectively the same, only differing in formatting but producing identical results.",SELECT (SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock)) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID,Both queries perform the same operations: they calculate the inventory turnover ratio by summing the total sales from Order Details and dividing by the average units in stock from Products. The order of JOIN conditions is different but does not affect the result.,both
What is the correlation between employee sales and years of service?,"SELECT employees.EmployeeID, (YEAR(CURDATE()) - YEAR(employees.HireDate)) AS years_of_service, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales, DATEDIFF(YEAR, employees.HireDate, GETDATE()) AS years_of_service
FROM employees
JOIN orders ON employees.EmployeeID = orders.EmployeeID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY employees.EmployeeID, employees.HireDate
```","Both queries calculate 'employee_sales' and 'years_of_service' for each employee. Differences in function usage (DATEDIFF vs. manual year subtraction) are equivalent in result, and the joins/groupings are effectively the same.","SELECT e.EmployeeID, (DATEDIFF(CURRENT_DATE, e.HireDate)/365.25) AS years_of_service, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS employee_sales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID","Both queries calculate employee sales and years of service, grouping by EmployeeID and producing the required output to analyze correlation.",both
Which city has received the highest number of shipments?,"SELECT ShipCity, COUNT(OrderID) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 1;","```sql
SELECT ShipCity, COUNT(OrderID) AS ShipmentCount
FROM orders
GROUP BY ShipCity
ORDER BY ShipmentCount DESC
LIMIT 1;
```",Both queries count the number of shipments per city and return the city with the highest count. The difference is only in the alias used for the count.,"SELECT ShipCity, COUNT(OrderID) AS TotalShipments FROM orders GROUP BY ShipCity ORDER BY TotalShipments DESC LIMIT 1;","Both queries count the number of orders per city, sort them in descending order, and limit the result to the top city, which correctly identifies the city with the highest number of shipments.",both
Calculate the percentage of orders shipped on time.,SELECT (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID)) AS OnTimePercentage FROM orders;,"```sql
SELECT 
    (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID)) AS OnTimeShippingPercentage
FROM 
    orders;
```",Both queries calculate the percentage of orders shipped on time by comparing ShippedDate with RequiredDate and using the same calculation formula.,SELECT (COUNT(CASE WHEN o.ShippedDate <= o.RequiredDate THEN 1 END) * 100.0 / COUNT(o)) AS OnTimeDeliveryRate FROM orders o;,Both queries calculate the percentage of orders shipped on time by using a CASE expression to count conditions where ShippedDate is less than or equal to RequiredDate. The results are equivalent since they compute the same logical condition and divide by the total count of orders.,both
List all orders with their shipment region and corresponding total order value.,"SELECT o.OrderID, o.ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID, o.ShipRegion;","```sql
SELECT o.OrderID, o.ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY o.OrderID, o.ShipRegion;
```","Both queries perform the same operations: they join 'orders' and 'Order Details' on 'OrderID', calculate the total order value, and group by 'OrderID' and 'ShipRegion'. The difference in naming the alias of the calculated column does not affect the result.","SELECT Region, o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Region, o.OrderID;","The generated query uses 'Region', while the ground truth uses 'ShipRegion'. If these fields are equivalent, they would yield the same results; otherwise, they are different.",Base
Find the employee with the highest average order value.,"SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AvgOrderValue DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, AVG od.UnitPrice * od.Quantity * (1 - od.Discount) AS AverageOrderValue
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
ORDER BY AverageOrderValue DESC
LIMIT 1;
```","Both queries calculate the average order value per employee and return the employee with the highest value. The difference is that the generated query also selects the employee's first and last names, which does not affect the result regarding the highest average order value.","SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AvgOrderValue DESC LIMIT 1","The generated SQL query accurately answers the user's question and yields the same results as the ground truth query. Both queries select the employee with the highest average order value by grouping orders, calculating the average, and ordering the results in descending order, limiting to one result.",both
What is the average age of employees who have made a sale in the last year?,"SELECT AVG(DATEDIFF(CURRENT_DATE, e.BirthDate) / 365) AS AverageAge FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);","```sql
SELECT AVG(YEAR(CURDATE()) - YEAR(BirthDate)) AS AverageAge
FROM employees
WHERE EmployeeID IN (
    SELECT DISTINCT EmployeeID
    FROM orders
    WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
);
```",Both queries calculate the average age of employees who made a sale in the last year by focusing on the OrderDate and filtering employees accordingly. The differences in age calculation methods do not affect the overall logic of the query.,"SELECT employees.EmployeeID, ROUND(AVG(YEAR(CURRENT_DATE) - YEAR(employees.BirthDate)), 2) AS AverageAge FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY employees.EmployeeID;",The generated query calculates the average age for each employee and requires group aggregation. The ground truth query correctly calculates the average age for all employees together who made a sale in the last year.,Base
What is the sum of all discounts given on 'Order Details'?,SELECT SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscounts FROM [Order Details] od;,"```sql
SELECT SUM(Discount) AS TotalDiscounts
FROM [Order Details];
```","The generated SQL query calculates the sum of discounts directly, while the ground truth query calculates the discount as a product of Discount, Quantity, and UnitPrice.",SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount) AS TotalDiscounts FROM [Order Details];,"Both queries calculate the sum of discounts by multiplying Quantity, UnitPrice, and Discount for each order detail and summing the results.",FT
How many orders were shipped late last month?,"SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate AND DATE_TRUNC('month', ShippedDate) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month');","```sql
SELECT COUNT(OrderID) AS LateOrders
FROM orders
WHERE ShippedDate > RequiredDate
AND OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month'
AND OrderDate < DATE_TRUNC('month', CURRENT_DATE);
```","The generated query filters based on OrderDate, not ShippedDate, for last month's timeframe.",SELECT COUNT(orders.OrderID) FROM orders WHERE YEAR(ShippedDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) AND MONTH(ShippedDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND ShippedDate > RequiredDate;,Both queries count orders shipped late in the last month by comparing ShippedDate to RequiredDate and matching the year and month of ShippedDate with last month.,FT
How many customers were retained from Q1 to Q2 in 2023?,SELECT COUNT(DISTINCT o.CustomerID) AS retained_customers FROM orders o WHERE o.CustomerID IN (SELECT CustomerID FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-03-31') AND o.OrderDate BETWEEN '2023-04-01' AND '2023-06-30',"```sql
SELECT 
    (SELECT COUNT(DISTINCT orders.CustomerID) 
     FROM orders 
     WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30') AS retained_customers 
    / 
    (SELECT COUNT(DISTINCT orders.CustomerID) 
     FROM orders 
     WHERE orders.OrderDate < '2023-04-01') AS total_customers 
FROM dual;
```","The generated query calculates a ratio of customers who ordered in Q2 to those who ordered before Q2, instead of checking if they ordered in both Q1 and Q2.",SELECT COUNT(DISTINCT orders1.CustomerID) AS retained_customers FROM orders orders1 WHERE orders1.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' AND EXISTS (SELECT 1 FROM orders orders2 WHERE orders2.CustomerID = orders1.CustomerID AND orders2.OrderDate BETWEEN '2023-04-01' AND '2023-06-30'),Both queries count distinct customers with orders in Q1 who also placed orders in Q2 of 2023. Methods differ but results are equivalent.,FT
What is the total number of units sold by supplier?,"SELECT suppliers.CompanyName, SUM([Order Details].Quantity) AS total_units_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY total_units_sold DESC","```sql
SELECT products.SupplierID, SUM([Order Details].Quantity) AS total_units_sold
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
GROUP BY products.SupplierID
```","The generated query groups by SupplierID, not CompanyName, and does not order the results. The ground truth query includes supplier names and orders by total units sold.","SELECT p.SupplierID, SUM(od.Quantity) AS TotalUnitsSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;","The generated query returns SupplierID, while the ground truth query returns CompanyName. Both queries calculate total units sold per supplier, but they differ in the specific output field related to the supplier.",None
Which customers are from a specific country and have placed orders?,"SELECT customers.CustomerID, customers.CompanyName FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE customers.Country = 'Specific Country';","```sql
SELECT DISTINCT c.CustomerID, c.CompanyName, c.ContactName, c.ContactTitle, c.Address, c.City, c.Region, c.PostalCode, c.Country, c.Phone, c.Fax
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
WHERE c.Country = 'specific_country';
```","Both queries join the 'customers' and 'orders' tables to filter customers from a specified country who have placed orders. The main difference is in the selected columns, but both correctly fulfill the user's request to identify such customers.",SELECT DISTINCT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE c.Country = 'your_specific_country';,"Both queries accurately identify customers from a specific country who have placed orders, filtering by customer ID. The differences in selected columns do not affect the core functionality of the queries.",both
Which supplier has the longest average lead time?,"SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID, suppliers.CompanyName ORDER BY AvgLeadTime DESC LIMIT 1;","```sql
SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.CompanyName
ORDER BY AverageLeadTime DESC
LIMIT 1;
```","Both queries will yield the same result as they calculate the average lead time per supplier and return the one with the longest lead time. The only difference is the grouping by SupplierID in the ground truth query, which doesn't affect the outcome when CompanyName is also used for grouping.","SELECT s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID, s.CompanyName ORDER BY AvgLeadTime DESC LIMIT 1;","Both queries perform the same operations by joining the relevant tables, calculating the average lead time, and ordering the results to find the supplier with the longest average lead time. The differences in table aliases do not affect the correctness or results.",both
What are the top 5 products by sales volume?,"SELECT p.ProductName, SUM(od.Quantity) AS SalesVolume FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY SalesVolume DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSales DESC
LIMIT 5;
```",Both queries calculate the total sales volume per product and return the top 5 products sorted by sales volume in descending order. The differences in column selection do not affect the final output for the user's question.,"SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY total_quantity DESC LIMIT 5;","Both queries calculate the total quantity sold for each product, order the results by this total in descending order, and limit the output to the top 5 products. The syntax and aliases differ slightly but do not affect the result.",both
Which products are currently at or below their reorder level?,SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock <= ReorderLevel;
```","The generated SQL query includes additional columns (ProductID, UnitsInStock, ReorderLevel) which are not present in the ground truth query that only selects ProductName.","SELECT ProductID, ProductName FROM products WHERE UnitsInStock <= ReorderLevel;","Both queries return products whose UnitsInStock are less than or equal to their ReorderLevel. The difference is that the generated query also includes ProductID, which does not affect the answer related to the user's question.",FT
How many orders have a discount applied?,SELECT COUNT(DISTINCT o.OrderID) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0;,"```sql
SELECT COUNT(DISTINCT OrderID) AS OrdersWithDiscount
FROM [Order Details]
WHERE Discount > 0;
```",Both queries count distinct orders from the 'Order Details' table where a discount is applied. The JOIN in the ground truth is unnecessary since 'OrderID' is already referenced correctly in 'Order Details'.,SELECT COUNT(DISTINCT OrderID) AS DiscountedOrders FROM [Order Details] WHERE Discount > 0;,Both queries count distinct OrderIDs from the [Order Details] table where the discount is greater than zero. The JOIN in the Ground Truth SQL doesn't affect the count since Discount > 0 condition is evaluated in [Order Details] table.,both
Which suppliers have the shortest average lead time for deliveries?,"SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC","```sql
SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time
FROM orders 
JOIN products ON orders.OrderID = products.ProductID 
GROUP BY products.SupplierID 
ORDER BY avg_lead_time ASC;
```",The generated query incorrectly joins orders and products on OrderID and ProductID. It misses the necessary join with suppliers and Order Details tables to correctly identify SupplierID.,"SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID ORDER BY avg_lead_time ASC","The generated query selects SupplierID from products, not directly from suppliers. It may yield the same results if every SupplierID in products is valid and aligned with suppliers but lacks the explicit join with the suppliers table.",None
What is the monthly growth rate in sales for each employee?,"SELECT e.EmployeeID, YEAR(o.OrderDate) AS Year, MONTH(o.OrderDate) AS Month, (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) - LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) OVER (PARTITION BY e.EmployeeID ORDER BY YEAR(o.OrderDate), MONTH(o.OrderDate))) / LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) OVER (PARTITION BY e.EmployeeID ORDER BY YEAR(o.OrderDate), MONTH(o.OrderDate)) AS MonthlyGrowth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, YEAR(o.OrderDate), MONTH(o.OrderDate);","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName,
       (SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) -
        SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 2 MONTH) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) /
       NULLIF(SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 2 MONTH) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END), 0) AS MonthlyGrowthRate
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 2 MONTH)
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","The generated query calculates growth for the last two months only, without the use of window functions for each month. The ground truth query computes growth for multiple months and uses window functions for calculating the growth rate.","SELECT e.FirstName, e.LastName, EXTRACT(MONTH FROM o.OrderDate) AS Month, (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) - LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) OVER (PARTITION BY e.EmployeeID ORDER BY EXTRACT(MONTH FROM o.OrderDate))) / NULLIF(LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) OVER (PARTITION BY e.EmployeeID ORDER BY EXTRACT(MONTH FROM o.OrderDate)), 0) AS MonthlyGrowth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName, EXTRACT(MONTH FROM o.OrderDate);","The generated query does not include the YEAR component in the partitioning and ordering, which can lead to incorrect monthly growth calculations if orders span multiple years.",None
What is the monthly trend of new customers acquired?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(DISTINCT CustomerID) AS NewCustomers FROM orders GROUP BY Month ORDER BY Month;","```sql
SELECT 
    DATE_FORMAT(CREATED_AT, '%Y-%m') AS Month, 
    COUNT(CustomerID) AS NewCustomers 
FROM 
    customers 
GROUP BY 
    Month 
ORDER BY 
    Month;
```","The generated query counts new customers from the 'customers' table, using 'CREATED_AT', whereas the ground truth query counts distinct customers from the 'orders' table, using 'OrderDate'. These are different datasets and may yield different counts.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(DISTINCT CustomerID) AS NewCustomers FROM orders GROUP BY Month;","Both queries calculate the monthly count of distinct new customers by grouping by month, though they use different date functions. The generated query lacks the ORDER BY clause, but it still groups the results by month.",FT
What is the total quantity of products ordered by each customer?,"SELECT c.CustomerID, SUM(od.Quantity) AS TotalQuantity FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;","```sql
SELECT customers.CustomerID, SUM([Order Details].Quantity) AS TotalQuantity
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID;
```","Both queries correctly calculate the total quantity of products ordered by each customer using JOINs to connect customers, orders, and order details, and SUM to aggregate the quantities. The aliases used are different, but the logic is identical.","SELECT CustomerID, SUM([Order Details].Quantity) AS TotalQuantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY CustomerID;","The generated query does not include a join with the 'customers' table, so it may miss customers with no orders, while the ground truth query includes all customers even if they didn't order any products.",Base
What is the total sales value in the last quarter?,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-12-31',"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-12-31'
```",Both the generated SQL query and the ground truth query are identical and effectively calculate the total sales in the last quarter by using the same formula and date range conditions.,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30',"The date range in the generated query is from Q3 (July to September), while the ground truth query uses Q4 (October to December).",Base
What is the monthly customer retention rate for 2023?,"SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(DISTINCT o1.CustomerID) * 1.0 / NULLIF((SELECT COUNT(DISTINCT o2.CustomerID) FROM orders o2 WHERE o2.OrderDate < '2023-01-01'), 0) AS RetentionRate FROM orders o1 WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY EXTRACT(MONTH FROM OrderDate);","```sql
SELECT 
    EXTRACT(MONTH FROM o.OrderDate) AS Month, 
    COUNT(DISTINCT o.CustomerID) AS ReturningCustomers, 
    (COUNT(DISTINCT o.CustomerID) WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') * 100.0 / NULLIF(COUNT(DISTINCT o.CustomerID) WHERE o.OrderDate < '2023-01-01', 0) AS RetentionRate
FROM 
    orders o
WHERE 
    o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY 
    Month
ORDER BY 
    Month;
```","The generated SQL attempts to calculate the retention rate for each month, but the subquery to get previous customers before 2023 is not correctly structured. It uses WHERE clauses improperly for calculations within COUNT, whereas the ground truth explicitly calculates all distinct customers before 2023 separately.","SELECT EXTRACT(MONTH FROM o.OrderDate) AS month, COUNT(DISTINCT o.CustomerID) / NULLIF((SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM o.OrderDate) - 1 AND EXTRACT(YEAR FROM OrderDate) = 2023), 0) AS retention_rate FROM orders o WHERE YEAR(o.OrderDate) = 2023 GROUP BY month","The generated SQL query calculates retention by month, comparing each month's distinct customers to the previous month. The ground truth compares the year to before 2023, not month by month.",None
What is the average discount applied to orders per supplier?,"SELECT suppliers.SupplierID, suppliers.SupplierName, AVG([Order Details].Discount) AS AverageDiscount FROM suppliers INNER JOIN products ON suppliers.SupplierID = products.SupplierID INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID, suppliers.SupplierName;","```sql
SELECT p.SupplierID, AVG(od.Discount) AS AverageDiscount
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.SupplierID;
```","The generated query omits the SupplierName and does not join the suppliers table, which could lead to incorrect or incomplete results.","SELECT suppliers.CompanyName, AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName",Both queries compute the average discount per supplier using similar joins and grouping. Differences in selected columns do not affect the correctness in terms of the user's question.,FT
What is the total revenue generated from each product?,"SELECT ProductName, SUM(Quantity * UnitPrice * (1 - Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName;
```","The generated SQL query does not consider the Discount in the revenue calculation, whereas the ground truth query does.","SELECT p.ProductName, SUM(od.Quantity * (od.UnitPrice * (1 - od.Discount))) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;","Both queries calculate the total revenue per product by summarizing the product of quantity, unit price, and discount and grouping by product name. The structure and calculations are equivalent.",FT
Which supplier has the most diverse product range?,"SELECT SupplierID, COUNT(DISTINCT CategoryID) AS ProductRange FROM products GROUP BY SupplierID ORDER BY ProductRange DESC LIMIT 1;","```sql
SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount
FROM products
GROUP BY SupplierID
ORDER BY ProductCount DESC
LIMIT 1;
```","The generated query counts distinct ProductIDs, while the ground truth counts distinct CategoryIDs to determine product range diversity.","SELECT suppliers.SupplierID, suppliers.CompanyName, COUNT(DISTINCT products.CategoryID) AS NumberOfCategories FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID, suppliers.CompanyName ORDER BY NumberOfCategories DESC LIMIT 1;","Both queries aim to find the supplier with the most diverse product range by counting distinct categories per supplier and displaying the one with the highest count. The generated query includes the supplier's company name, but this does not affect the correctness of the result related to the user's question.",FT
Get the supplier details for products with the lowest units in stock.,"SELECT p.ProductName, s.SupplierID FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.UnitsInStock = (SELECT MIN(UnitsInStock) FROM products);","```sql
SELECT p.ProductID, p.ProductName, p.UnitsInStock, s.SupplierID, s.SupplierName
FROM products p
JOIN suppliers s ON p.SupplierID = s.SupplierID
WHERE p.UnitsInStock = (SELECT MIN(UnitsInStock) FROM products);
```","Both queries retrieve supplier details for products with the minimum units in stock. The difference is only in the columns selected, but the core logic is the same.","SELECT SupplierID, CompanyName FROM products INNER JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE UnitsInStock = (SELECT MIN(UnitsInStock) FROM products);","The generated query retrieves SupplierID and CompanyName, while the ground truth retrieves ProductName and SupplierID. The queries have different select columns.",Base
What is the distribution of employees across different cities?,"SELECT City, COUNT(EmployeeID) AS EmployeeCount FROM employees GROUP BY City;","```sql
SELECT City, COUNT(*) AS EmployeeCount
FROM employees
GROUP BY City;
```",Both queries count employees per city and will yield the same results assuming every employee has a unique ID.,"SELECT City, COUNT(EmployeeID) AS EmployeeCount FROM employees GROUP BY City;","The generated query and the ground truth query are identical, both correctly aggregating employee counts by city.",both
How many orders are shipped using more than one shipping method?,"SELECT COUNT(*) FROM (SELECT OrderID, COUNT(DISTINCT ShipVia) AS MethodCount FROM orders GROUP BY OrderID HAVING MethodCount > 1) AS MultiMethodOrders;","```sql
SELECT COUNT(DISTINCT OrderID) 
FROM orders 
GROUP BY OrderID 
HAVING COUNT(DISTINCT ShipVia) > 1;
```",Both queries count the number of orders that use more than one shipping method by grouping by OrderID and checking if the count of distinct ShipVia values is greater than one.,SELECT COUNT(*) AS MultiMethodOrders FROM orders GROUP BY OrderID HAVING COUNT(DISTINCT ShipVia) > 1;,"Both queries count the number of orders where more than one shipping method is used. The generated SQL uses a direct COUNT on the result set after grouping, while the ground truth uses a subquery, but both yield the same result.",both
What is the total revenue attributed to each supplier?,"SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID;","```sql
SELECT s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY s.CompanyName;
```",The generated query groups by 'CompanyName' while the ground truth query groups by 'SupplierID'. This can lead to differences if there are suppliers with the same 'CompanyName'.,"SELECT s.SupplierID, s.CompanyName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID, s.CompanyName;","The generated query does not account for discounts, whereas the ground truth query does.",None
Which month had the highest average order value?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_TRUNC('month', OrderDate) ORDER BY AvgOrderValue DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth,
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY OrderMonth
ORDER BY AverageOrderValue DESC
LIMIT 1;
```","The generated query formats the date using DATE_FORMAT with '%Y-%m', which might not be compatible with all SQL dialects, altering the grouping precision compared to DATE_TRUNC('month'). They use different methods to extract the month, which could affect the accuracy of results depending on the SQL database used.","SELECT EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY EXTRACT(MONTH FROM o.OrderDate) ORDER BY AvgOrderValue DESC LIMIT 1;","Both queries calculate the average order value per month and order by highest average. The use of EXTRACT(MONTH FROM o.OrderDate) and DATE_TRUNC('month', OrderDate) are functionally the same for grouping purposes. Hence, they yield the same result.",FT
What is the inventory turnover ratio for each product category last quarter?,"SELECT c.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(p.UnitsInStock) AS turnover_ratio FROM [Order Details] JOIN products p ON [Order Details].ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID WHERE [Order Details].OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY c.CategoryName","```sql
SELECT categories.CategoryID, 
       SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio 
FROM [Order Details] 
JOIN products ON [Order Details].ProductID = products.ProductID 
JOIN categories ON products.CategoryID = categories.CategoryID 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30' 
GROUP BY categories.CategoryID
```","The generated query uses different date criteria ('2023-07-01' to '2023-09-30') compared to the ground truth query ('2023-01-01' to '2023-03-31'), and it uses CategoryID instead of CategoryName in the SELECT clause, which might lead to different grouping and output.","SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice / NULLIF((SELECT SUM(o_details.Quantity * p.UnitPrice) / NULLIF(AVG(od.UnitPrice), 0) FROM [Order Details] o_details JOIN products p ON o_details.ProductID = p.ProductID)) AS inventory_turnover_ratio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate BETWEEN (CURRENT_DATE - INTERVAL '3 MONTH') AND CURRENT_DATE GROUP BY c.CategoryID;",The generated query does not calculate the turnover ratio correctly and uses an incorrect date range. It also lacks a join to the categories table and misinterprets the inventory calculation.,None
List all products and their respective stock and order quantities.,"SELECT ProductName, UnitsInStock, UnitsOnOrder FROM products;","```sql
SELECT ProductID, ProductName, UnitsInStock, UnitsOnOrder
FROM products;
```","The generated query includes 'ProductID' which is not requested by the user question, but both queries effectively extract the product name, stock, and order quantities.","SELECT ProductName, UnitsInStock, UnitsOnOrder FROM products;",Both queries select the same columns from the 'products' table and will produce the same result set.,FT
Which supplier has delivered the highest total number of product units?,"SELECT s.SupplierID, SUM(od.Quantity) AS TotalUnits FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY TotalUnits DESC LIMIT 1;","```sql
SELECT suppliers.CompanyName, SUM([Order Details].Quantity) AS TotalUnitsDelivered
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY suppliers.CompanyName
ORDER BY TotalUnitsDelivered DESC
LIMIT 1;
```","The generated query selects 'CompanyName', while the ground truth selects 'SupplierID'. This can lead to different output if 'CompanyName' is not unique for each 'SupplierID'.","SELECT suppliers.CompanyName, SUM([Order Details].Quantity) AS TotalUnits FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY TotalUnits DESC LIMIT 1;","Both queries correctly calculate the total units delivered by each supplier and return the supplier with the highest total. The only difference is the use of 'CompanyName' vs. 'SupplierID', but both are valid as identification fields and should yield the same result.",FT
Which shipper has the highest on-time delivery rate in 2023?,"SELECT shippers.CompanyName, (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / CAST(COUNT(orders.OrderID) AS FLOAT) * 100) AS on_time_delivery_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY shippers.CompanyName ORDER BY on_time_delivery_rate DESC LIMIT 1;","```sql
SELECT shippers.CompanyName, COUNT(orders.OrderID) AS total_orders,
       COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) AS on_time_deliveries,
       COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 1.0 / COUNT(orders.OrderID) AS on_time_delivery_rate
FROM orders
JOIN shippers ON orders.ShipVia = shippers.ShipperID
WHERE YEAR(orders.OrderDate) = 2023
GROUP BY shippers.ShipperID
ORDER BY on_time_delivery_rate DESC
LIMIT 1;
```","Both queries calculate the on-time delivery rate for shippers in 2023 and select the shipper with the highest rate. They differ slightly in date filtering and division method, but these do not affect the final result.","SELECT shippers.CompanyName, (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 1.0 / COUNT(orders.OrderID)) * 100 AS on_time_delivery_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY shippers.CompanyName ORDER BY on_time_delivery_rate DESC LIMIT 1",Both queries calculate the on-time delivery rate for each shipper by dividing the number of on-time shipped orders by the total number of orders in 2023 and return the shipper with the highest rate. The arithmetic methods differ but the functional logic is equivalent.,both
Which products should be considered for discontinuation based on sales?,SELECT ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName HAVING SUM([Order Details].Quantity) < MIN(ReorderLevel);,"```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
HAVING SUM(od.Quantity) < p.ReorderLevel
AND p.Discontinued = 0;
```","The generated query checks if TotalSales is less than ReorderLevel and filters non-discontinued products, while the ground truth compares TotalSales with the minimum ReorderLevel without considering the 'Discontinued' status.","SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName HAVING SUM(od.Quantity) < 50;","The generated query checks for products with total sales quantity under 50, whereas the ground truth query identifies products with total sales quantity below their reorder level.",None
Determine the month with the highest total product sales value.,"SELECT EXTRACT(MONTH FROM o.OrderDate) AS SalesMonth, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY SalesMonth ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
    SUM(od.Quantity * od.UnitPrice) AS TotalSalesValue
FROM 
    [Order Details] od
JOIN 
    orders o ON od.OrderID = o.OrderID
GROUP BY 
    Month
ORDER BY 
    TotalSalesValue DESC
LIMIT 1;
```","The generated SQL query groups by both year and month using DATE_FORMAT, while the ground truth groups by only month. They might yield different top months if the highest sales occur in different years.","SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY EXTRACT(MONTH FROM o.OrderDate) ORDER BY TotalSales DESC LIMIT 1;","The generated SQL query includes a discount in the calculation of TotalSales, while the ground truth query does not account for discounts. This could yield different results.",None
What are the top 5 cities with the highest number of orders?,"SELECT ShipCity, COUNT(OrderID) AS order_count FROM orders GROUP BY ShipCity ORDER BY order_count DESC LIMIT 5","```sql
SELECT ShipCity, COUNT(OrderID) AS order_count 
FROM orders 
GROUP BY ShipCity 
ORDER BY order_count DESC 
LIMIT 5;
```","Both queries select ShipCity and count OrderID, group by ShipCity, order by the count in descending order, and limit the result to 5, thus yielding the same results.","SELECT ShipCity, COUNT(OrderID) AS NumOrders FROM orders GROUP BY ShipCity ORDER BY NumOrders DESC LIMIT 5;","Both queries count the number of orders per city, order them in descending order, and limit the results to the top 5 cities. The differing aliases do not affect the outcome.",both
Which product generated the highest sales revenue in March 2023?,"SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY products.ProductName ORDER BY sales_revenue DESC LIMIT 1","```sql
SELECT products.ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS revenue
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
JOIN products ON [Order Details].ProductID = products.ProductID
WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31'
GROUP BY products.ProductID
ORDER BY revenue DESC
LIMIT 1
```","The generated SQL query selects ProductID instead of ProductName, which does not match the specific output required by the user's question.","SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY products.ProductName ORDER BY total_sales DESC LIMIT 1","Both queries calculate the highest sales revenue for products in March 2023, with only a difference in the alias name used for the aggregated total sales column.",FT
What is the average order fulfillment time each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY DATE_TRUNC('month', OrderDate);","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM 
    orders
GROUP BY 
    Month;
```",The generated SQL query uses DATE_FORMAT which is not ANSI standard and is specific to MySQL. The ground truth query uses DATE_TRUNC which is the ANSI standard for truncating dates.,"SELECT EXTRACT(YEAR FROM OrderDate) AS OrderYear, EXTRACT(MONTH FROM OrderDate) AS OrderMonth, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY OrderYear, OrderMonth;","Both queries calculate the average order fulfillment time per month. The generated query extracts year and month separately, while the ground truth truncates to the month level. Both approaches yield the same results as they group by month.",FT
What is the percentage of orders delivered before the required date for the last three months?,"SELECT 100 * COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN orders.OrderID END) / COUNT(orders.OrderID) AS on_time_rate FROM orders WHERE orders.OrderDate BETWEEN DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' AND CURRENT_DATE","```sql
SELECT (COUNT(OrderID) FILTER (WHERE ShippedDate < RequiredDate) * 100.0 / COUNT(OrderID)) AS percentage_delivered_before_required
FROM orders
WHERE OrderDate >= DATEADD(MONTH, -3, GETDATE())
```","The generated query filters orders from the last three months using GETDATE() and DATEADD, which is different from the ground truth that uses DATE_TRUNC to start from the beginning of the month. It also incorrectly checks for ShippedDate < RequiredDate instead of ShippedDate <= RequiredDate.",SELECT (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID)) AS punctual_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30',"The generated query uses fixed dates ('2023-07-01' to '2023-09-30') for the last three months, while the ground truth query calculates the date range dynamically from the current date. They might yield different results depending on the current date.",None
Which products have the highest reorder level?,SELECT ProductName FROM products WHERE ReorderLevel = (SELECT MAX(ReorderLevel) FROM products);,"```sql
SELECT ProductName, ReorderLevel
FROM products
ORDER BY ReorderLevel DESC;
```","The generated query lists all products ordered by reorder level in descending order, but does not filter to only include products with the highest reorder level like the ground truth query does.","SELECT ProductName, ReorderLevel FROM products ORDER BY ReorderLevel DESC LIMIT 1","The generated query retrieves only one product due to the LIMIT 1 clause, while the ground truth query correctly retrieves all products with the highest reorder level.",None
Which supplier contributed the most to our total sales?,"SELECT suppliers.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS supplier_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY supplier_sales DESC LIMIT 1","```sql
SELECT products.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
JOIN products ON [Order Details].ProductID = products.ProductID
GROUP BY products.SupplierID
ORDER BY total_sales DESC
LIMIT 1;
```",Both queries calculate total sales per supplier and then sort in descending order to find the supplier with the highest sales. They use different joins and aliases but achieve similar outcomes.,"SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY total_sales DESC LIMIT 1","The generated SQL query returns the supplier's company name, while the ground truth query returns the supplier's ID. This could result in different outputs if the names are not unique, although they both calculate the sales the same way.",Base
What is the average discount for each order?,"SELECT OrderID, AVG(Discount) AS AverageDiscount FROM [Order Details] GROUP BY OrderID;","```sql
SELECT OrderID, AVG(Discount) AS AverageDiscount
FROM [Order Details]
GROUP BY OrderID;
```","The generated SQL query correctly calculates the average discount for each order by grouping the data by OrderID, which matches the ground truth query.","SELECT OrderID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY OrderID;","Both queries calculate the average discount for each order by grouping results based on OrderID. The column alias differs, but it does not affect the correctness of the query.",both
How often are products reordered compared to their reorder level?,"SELECT ProductName, (UnitsOnOrder - ReorderLevel) AS ReorderDifference FROM products WHERE (UnitsOnOrder - ReorderLevel) > 0;","```sql
SELECT 
    p.ProductID,
    p.ProductName,
    p.ReorderLevel,
    p.UnitsOnOrder,
    CASE 
        WHEN p.UnitsOnOrder < p.ReorderLevel THEN 'Reorder Needed'
        ELSE 'No Reorder Needed'
    END AS ReorderStatus
FROM 
    products p
WHERE 
    p.Discontinued = 0;
```","The generated query identifies if a reorder is needed based on a comparison, while the ground truth calculates the difference and filters positive values, focusing only on positive reorder differences.","SELECT ProductName, ReorderLevel, (UnitsInStock < ReorderLevel) AS NeedsReorder FROM products;","The generated query checks if current stock is below the reorder level, while the ground truth checks orders minus reorder level.",None
How many orders are shipped to each city?,"SELECT ShipCity, COUNT(*) AS OrderCount FROM orders GROUP BY ShipCity;","```sql
SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY ShipCity;
```",Both queries calculate the number of orders shipped to each city by grouping on ShipCity and counting orders. COUNT(OrderID) and COUNT(*) yield the same result if OrderID is never NULL.,"SELECT ShipCity, COUNT(*) AS NumberOfOrders FROM orders GROUP BY ShipCity;","Both queries group the orders by ShipCity and count the number of orders, resulting in the same dataset despite different alias names.",both
How many orders were shipped late in each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY DATE_TRUNC('month', OrderDate);","```sql
SELECT 
    DATE_FORMAT(orders.ShippedDate, '%Y-%m') AS Month,
    COUNT(orders.OrderID) AS LateOrdersCount
FROM 
    orders
WHERE 
    orders.ShippedDate > orders.RequiredDate
GROUP BY 
    Month
ORDER BY 
    Month;
```","The generated query groups by the shipping month, while the ground truth query groups by the order month.","SELECT DATE_TRUNC('month', o.OrderDate) AS Month, COUNT(o.OrderID) AS LateOrders FROM orders o WHERE o.ShippedDate > o.RequiredDate GROUP BY DATE_TRUNC('month', o.OrderDate);",Both queries group by month and count the orders where ShippedDate is later than RequiredDate. They produce the same results.,FT
Which shipping method is used most frequently?,"SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT ShipVia, COUNT(OrderID) AS Frequency
FROM orders
GROUP BY ShipVia
ORDER BY Frequency DESC
LIMIT 1;
```","Both queries are functionally equivalent. They group by 'ShipVia', count the occurrences of 'OrderID', and order by this count in descending order to find the most frequently used shipping method.","SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;","Both queries aim to determine the most frequently used shipping method by counting the number of orders for each 'ShipVia' and sorting the result in descending order by the count, limiting the result to the top entry.",both
Find the reorder levels for products nearing zero stock.,"SELECT products.ProductName, products.ReorderLevel FROM products WHERE products.UnitsInStock < products.ReorderLevel","```sql
SELECT products.ProductID, products.ReorderLevel, products.UnitsInStock 
FROM products 
WHERE products.UnitsInStock <= products.ReorderLevel;
```","The generated query checks 'UnitsInStock <= ReorderLevel', while the ground truth checks 'UnitsInStock < ReorderLevel'. Additionally, the generated query selects 'ProductID' and 'UnitsInStock', while the ground truth selects 'ProductName'.","SELECT ProductName, ReorderLevel FROM products WHERE UnitsInStock <= ReorderLevel;","The generated query includes products with stock equal to the reorder level, while the ground truth query only includes those with stock less than the reorder level.",None
Which employee territories are underperforming in terms of sales?,"SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS territory_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryID, territories.TerritoryDescription ORDER BY territory_sales","```sql
SELECT employeeTerritories.TerritoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
FROM employeeTerritories
JOIN employees ON employeeTerritories.EmployeeID = employees.EmployeeID
JOIN orders ON employees.EmployeeID = orders.EmployeeID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY employeeTerritories.TerritoryID
HAVING total_sales < (SELECT AVG(total_sales) FROM (
    SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
    FROM employeeTerritories
    JOIN employees ON employeeTerritories.EmployeeID = employees.EmployeeID
    JOIN orders ON employees.EmployeeID = orders.EmployeeID
    JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
    GROUP BY employeeTerritories.TerritoryID
) AS avg_sales);
```","The generated query identifies underperforming territories using a HAVING clause with an average sales comparison, while the ground truth query only calculates and orders total sales without identifying underperforming territories.","SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY territories.TerritoryDescription HAVING SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) < (SELECT AVG(total_sales_subquery) FROM (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales_subquery FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY territories.TerritoryDescription) AS subquery);","The generated query is missing a join between employeeTerritories and territories, which is necessary to properly link employees to specific territories. Additionally, it attempts to determine underperformance by comparing to an average, but without linking correctly, the results may differ from the ground truth query which orders all territories by total sales.",None
Identify the employee with the most orders shipped late.,"SELECT e.EmployeeID, COUNT(o.OrderID) AS LateOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.RequiredDate < o.ShippedDate GROUP BY e.EmployeeID ORDER BY LateOrders DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS LateOrders
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.ShippedDate > o.RequiredDate
GROUP BY e.EmployeeID
ORDER BY LateOrders DESC
LIMIT 1;
```","Both queries correctly identify the employee with the most orders shipped late using a similar approach—joining employees with orders, filtering by orders shipped after the required date, grouping by employee ID, and ordering by count of late orders in descending order.","SELECT EmployeeID, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY EmployeeID ORDER BY LateOrders DESC LIMIT 1;","Both queries count orders where the ShippedDate is after the RequiredDate for each EmployeeID, and then select the employee with the highest count of such orders.",both
Which products have not been ordered at all?,SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"```sql
SELECT p.ProductID, p.ProductName 
FROM products p 
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID 
WHERE od.OrderID IS NULL;
```","Both queries correctly identify products that have not been ordered. The generated query uses a LEFT JOIN to determine products with no matching order details, while the ground truth query uses a NOT IN subquery. Both approaches yield the same results.",SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT od.ProductID FROM [Order Details] od);,"Both queries filter products whose IDs are not present in the 'Order Details' table, providing the same result.",both
Which city has the lowest on-time delivery rate?,"SELECT ShipCity, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0) / COUNT(*) AS OnTimeDeliveryRate FROM orders GROUP BY ShipCity ORDER BY OnTimeDeliveryRate ASC LIMIT 1;","```sql
SELECT ShipCity, 
       COUNT(OrderID) AS TotalOrders,
       COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveries,
       COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate
FROM orders
GROUP BY ShipCity
ORDER BY OnTimeDeliveryRate ASC
LIMIT 1;
```","Both queries calculate the on-time delivery rate for each city and return the city with the lowest rate. They have different syntax for counting orders, but they achieve the same result.","SELECT ShipCity, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipCity ORDER BY OnTimeRate ASC LIMIT 1;","Both queries calculate the on-time delivery rate by city using similar logic. They group by 'ShipCity', compute the rate of on-time deliveries, and select the city with the lowest rate. The SQL structure of counting on-time deliveries as a proportion of total deliveries is consistent between both queries, ensuring equivalent results.",both
Find employees living in the same city as their manager.,"SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e JOIN employees m ON e.ReportsTo = m.EmployeeID WHERE e.City = m.City;","```sql
SELECT e1.FirstName, e1.LastName, e1.City, e2.FirstName AS ManagerFirstName, e2.LastName AS ManagerLastName
FROM employees e1
JOIN employees e2 ON e1.ReportsTo = e2.EmployeeID
WHERE e1.City = e2.City;
```","Both queries correctly identify employees who live in the same city as their managers by joining the employees table on the ReportsTo and EmployeeID fields, and filtering where the cities match. The difference is in the columns selected, but both queries address the user's question.","SELECT e.EmployeeID, e.FirstName, e.LastName, e.City FROM employees e JOIN employees m ON e.ReportsTo = m.EmployeeID WHERE e.City = m.City;","Both queries achieve the same goal of identifying employees living in the same city as their manager. The generated query includes an additional column, 'City', but it doesn't affect the correctness of the result related to the user question.",both
Find the difference in sales between the current and previous year for each employee.,"SELECT e.EmployeeID, (SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) AS SalesDifference FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","```sql
SELECT 
    e.EmployeeID,
    e.FirstName,
    e.LastName,
    COALESCE(current_year_sales.sales, 0) - COALESCE(previous_year_sales.sales, 0) AS sales_difference
FROM 
    employees e
LEFT JOIN (
    SELECT 
        o.EmployeeID,
        SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS sales
    FROM 
        orders o
    JOIN 
        [Order Details] od ON o.OrderID = od.OrderID
    WHERE 
        YEAR(o.OrderDate) = YEAR(CURRENT_DATE) 
    GROUP BY 
        o.EmployeeID
) current_year_sales ON e.EmployeeID = current_year_sales.EmployeeID
LEFT JOIN (
    SELECT 
        o.EmployeeID,
        SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS sales
    FROM 
        orders o
    JOIN 
        [Order Details] od ON o.OrderID = od.OrderID
    WHERE 
        YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 
    GROUP BY 
        o.EmployeeID
) previous_year_sales ON e.EmployeeID = previous_year_sales.EmployeeID;
```","Both queries calculate the difference in sales between the current and previous year for each employee. The generated query uses two subqueries for current and previous year sales and subtracts them, while the ground truth query calculates both within a single aggregated query. Despite the structural differences, they yield the same result.","SELECT Year, EmployeeID, SalesAmount - LAG(SalesAmount) OVER (PARTITION BY EmployeeID ORDER BY Year) AS SalesChange FROM (SELECT YEAR(o.OrderDate) AS Year, o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS SalesAmount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY YEAR(o.OrderDate), o.EmployeeID) AS AnnualSales;","The generated query calculates the difference in sales between consecutive years for each employee using LAG(), while the ground truth query specifically compares the current year to the previous year, aggregating sales for only these two years.",Base
Which specific products need to be reordered immediately?,SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel 
FROM products 
WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;
```","The generated query selects additional columns (ProductID, UnitsInStock, ReorderLevel) not requested in the ground truth query.",SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;,Both queries are identical in logic and will yield the same results.,FT
What are the top three countries by total sales?,"SELECT o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CountrySales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry ORDER BY CountrySales DESC LIMIT 3","```sql
SELECT ShipCountry, SUM(OrderDetails.UnitPrice * OrderDetails.Quantity * (1 - OrderDetails.Discount)) AS TotalSales
FROM orders
JOIN [Order Details] AS OrderDetails ON orders.OrderID = OrderDetails.OrderID
GROUP BY ShipCountry
ORDER BY TotalSales DESC
LIMIT 3;
```","Both queries calculate total sales per country and return the top three, using identical logic for calculation and aggregation.","SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.ShipCountry ORDER BY total_sales DESC LIMIT 3","Both queries calculate the total sales per country by summing the product of UnitPrice, Quantity, and the discount adjustment. They group by ShipCountry and order results by total sales in descending order, ensuring the top three countries are selected using LIMIT 3.",both
Identify the suppliers with late shipments on orders.,SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.RequiredDate < orders.ShippedDate GROUP BY suppliers.CompanyName;,"```sql
SELECT DISTINCT s.SupplierID, s.CompanyName
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
WHERE o.ShippedDate > o.RequiredDate;
```","Both queries correctly identify suppliers with late shipments by comparing ShippedDate and RequiredDate, and they extract and group by the relevant supplier information.",SELECT DISTINCT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.RequiredDate < orders.ShippedDate;,"Both queries identify suppliers with late shipments by checking if 'RequiredDate' is less than 'ShippedDate'. The difference lies in using DISTINCT in the generated query and GROUP BY in the ground truth query, which both yield the same distinct results.",both
What is the average shipping cost per order by shipping company?,"SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName","```sql
SELECT shippers.ShipperID, AVG(orders.Freight) AS average_shipping_cost
FROM orders
JOIN shippers ON orders.ShipVia = shippers.ShipperID
GROUP BY shippers.ShipperID
```","The generated query groups by ShipperID, while the ground truth groups by CompanyName, which could yield different results if there are shipper records with the same ShipperID and different CompanyNames.","SELECT ShipVia, AVG(Freight) AS average_shipping_cost FROM orders GROUP BY ShipVia;","The generated query groups by ShipVia, which is an ID, while the ground truth query groups by the actual shipping company name by joining with the ShipVia ID.",None
List suppliers located in the same city.,"SELECT DISTINCT s1.CompanyName, s2.CompanyName FROM suppliers s1 JOIN suppliers s2 ON s1.City = s2.City AND s1.SupplierID < s2.SupplierID;","```sql
SELECT s1.CompanyName AS Supplier1, s2.CompanyName AS Supplier2, s1.City
FROM suppliers s1
JOIN suppliers s2 ON s1.City = s2.City AND s1.SupplierID <> s2.SupplierID
ORDER BY s1.City, Supplier1, Supplier2;
```","Both queries correctly list pairs of suppliers located in the same city. Although the queries use different comparison operators for SupplierID and the generated query includes an ORDER BY clause and the city name, the outcome - listing distinct pairs of suppliers sharing a city - remains accurate.","SELECT SupplierID, City FROM suppliers GROUP BY City, SupplierID HAVING COUNT(*) > 1;","The generated query lists SupplierID and City for suppliers with duplicate cities, but it doesn't pair suppliers from the same city. The ground truth query finds pairs of companies in the same city.",Base
How many customers have been retained from 2022 to 2023?,SELECT COUNT(DISTINCT retained.CustomerID) FROM (SELECT CustomerID FROM orders WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31') AS previous INNER JOIN (SELECT CustomerID FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31') AS current ON previous.CustomerID = current.CustomerID,"```sql
SELECT COUNT(DISTINCT orders.CustomerID) 
FROM orders 
WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' 
AND orders.CustomerID IN (SELECT DISTINCT orders.CustomerID FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31');
```","Both queries count the distinct CustomerIDs who made orders in both 2022 and 2023. The approaches differ, but they yield the same result.",SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2023-12-31') - (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2022-01-01') AS retained_customers,"The generated SQL query calculates the difference between the number of unique customers from 2022 to 2023 and before 2022, which does not address retention. The ground truth query finds customers who placed orders in both 2022 and 2023, correctly addressing retention.",Base
Which customer placed the most orders in the last year?,"SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT CustomerID, COUNT(OrderID) AS OrderCount
FROM orders
WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
GROUP BY CustomerID
ORDER BY OrderCount DESC
LIMIT 1;
```","The generated query uses a dynamic date range based on the current date, while the ground truth query uses a fixed date range of 2022. This can lead to different results depending on the current date.","SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1 GROUP BY CustomerID ORDER BY TotalOrders DESC LIMIT 1;","Both queries aim to find the customer with the most orders in the previous year. The generated query uses YEAR(OrderDate) to filter, while the ground truth uses a BETWEEN clause; both effectively target last year's orders. They perform the same aggregation and limit the result to the top customer.",FT
Which region has the most orders?,"SELECT ShipRegion, COUNT(OrderID) AS NumOrders FROM orders GROUP BY ShipRegion ORDER BY NumOrders DESC LIMIT 1;","```sql
SELECT ShipRegion, COUNT(*) AS TotalOrders
FROM orders
GROUP BY ShipRegion
ORDER BY TotalOrders DESC
LIMIT 1;
```","Both queries count the orders per 'ShipRegion' and return the region with the most orders, using 'COUNT(*)' and 'COUNT(OrderID)' interchangeably, which don't affect the result in this context.","SELECT ShipRegion, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipRegion ORDER BY TotalOrders DESC LIMIT 1;","Both queries perform the same aggregation and ordering to identify the region with the most orders, differing only in alias naming which doesn't affect the result.",both
How many orders were shipped more than a week after the order date?,"SELECT COUNT(o.OrderID) AS DelayedOrders FROM orders o WHERE DATEDIFF(o.ShippedDate, o.OrderDate) > 7;","```sql
SELECT COUNT(*) AS OrdersShippedLate
FROM orders
WHERE ShippedDate > OrderDate + INTERVAL '7 days';
```","Both queries count orders where the shipped date is more than 7 days after the order date, using different syntax but achieving the same result.","SELECT COUNT(*) FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) > 7;","Both queries count the number of orders where the difference between ShippedDate and OrderDate is greater than 7, so they yield the same results.",both
Which employee has the highest sales in the last month?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE)
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 1;
```","The Generated SQL Query selects FirstName and LastName, while the Ground Truth SQL Query selects EmployeeID. This could lead to different results depending on the database schema.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","The functions DATE_SUB and DATEADD are different. DATE_SUB is used in MySQL, while DATEADD is not a valid MySQL syntax and is generally used in SQL Server. Also, DATE_SUB should use INTERVAL 1 MONTH to accurately capture the last month's sales.",None
Find the total number of products in each category.,"SELECT CategoryID, COUNT(ProductID) AS TotalProducts FROM products GROUP BY CategoryID;","```sql
SELECT CategoryID, COUNT(ProductID) AS TotalProducts
FROM products
GROUP BY CategoryID;
```",The generated SQL query accurately answers the user's question and yields the same results as the ground truth query. Both queries count the number of products per category by grouping on 'CategoryID'.,"SELECT CategoryID, COUNT(*) FROM products GROUP BY CategoryID;",Both queries count the number of products per category using GROUP BY CategoryID. COUNT(*) and COUNT(ProductID) will yield the same result because neither excludes nulls in this context.,both
What is the inventory turnover ratio for each product in 2023?,"SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID","```sql
SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY products.ProductID
```",The generated SQL query is identical to the ground truth query and both correctly calculate the inventory turnover ratio for each product in 2023 by dividing the total sales value by the average units in stock.,"SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderID IN (SELECT DISTINCT OrderID FROM orders WHERE YEAR(OrderDate) = 2023) GROUP BY p.ProductName;","The generated query groups by ProductName while the ground truth groups by ProductID. This may yield different results if different products have similar names. Additionally, the generated query filters using YEAR(OrderDate) while the ground truth uses a specific date range, which are equivalent in logic but different in implementation.",Base
How many products have stock levels below their reorder level?,SELECT COUNT(products.ProductID) AS low_stock_products FROM products WHERE products.UnitsInStock < products.ReorderLevel;,"```sql
SELECT COUNT(*) AS product_count 
FROM products 
WHERE UnitsInStock < ReorderLevel;
```","Both queries count the number of products where UnitsInStock is less than ReorderLevel, yielding the same results.",SELECT COUNT(*) FROM products WHERE UnitsInStock < ReorderLevel;,Both queries count the number of products with stock levels below their reorder levels and will yield the same result.,both
What is the total value of unshipped orders?,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS UnshippedValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE ShippedDate IS NULL;,"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalValueUnshipped
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE orders.ShippedDate IS NULL;
```","Both queries calculate the total value of unshipped orders by summing the product of unit price, quantity, and discount from orders where the ShippedDate is null. The difference in alias names does not affect the result.",SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.ShippedDate IS NULL;,"Both queries calculate the total value of unshipped orders by multiplying UnitPrice, Quantity, and applying any Discount, filtering where ShippedDate is NULL.",both
Which customers received shipments to multiple countries?,SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID HAVING COUNT(DISTINCT o.ShipCountry) > 1;,"```sql
SELECT CustomerID
FROM orders
GROUP BY CustomerID
HAVING COUNT(DISTINCT ShipCountry) > 1;
```",Both queries accurately count distinct shipping countries per customer by grouping on CustomerID and applying the same HAVING clause.,SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID HAVING COUNT(DISTINCT o.ShipCountry) > 1;,Both queries are identical and correctly answer the question by checking customers who have shipments to more than one distinct country.,both
Which suppliers provide the most products?,"SELECT s.SupplierName, COUNT(*) AS ProductCount FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierName ORDER BY ProductCount DESC","```sql
SELECT SupplierID, COUNT(ProductID) AS ProductCount
FROM products
GROUP BY SupplierID
ORDER BY ProductCount DESC;
```","The generated query groups by SupplierID, not SupplierName, and does not join the suppliers table, so it lacks supplier names.","SELECT suppliers.CompanyName, COUNT(products.ProductID) AS Product_Count FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY Product_Count DESC","Both queries join the 'suppliers' and 'products' tables and count the number of products per supplier. They group by supplier name and order the results by the product count in descending order, producing the same result.",FT
Which products have the highest unit prices in each category?,"SELECT p.CategoryID, p.ProductName, p.UnitPrice FROM products p JOIN (SELECT CategoryID, MAX(UnitPrice) AS MaxPrice FROM products GROUP BY CategoryID) pm ON p.CategoryID = pm.CategoryID AND p.UnitPrice = pm.MaxPrice;","```sql
SELECT p.CategoryID, p.ProductName, p.UnitPrice
FROM products p
WHERE p.UnitPrice = (
    SELECT MAX(p2.UnitPrice)
    FROM products p2
    WHERE p2.CategoryID = p.CategoryID
)
ORDER BY p.CategoryID;
```",Both queries find products with the highest unit prices for each category by comparing unit prices to the maximum unit price within each category. They use different methods (correlated subquery vs. join) but produce the same result.,"SELECT CategoryID, ProductName, UnitPrice FROM products WHERE (CategoryID, UnitPrice) IN (SELECT CategoryID, MAX(UnitPrice) FROM products GROUP BY CategoryID);",Both queries accurately identify products with the highest unit prices in each category using subqueries to find the maximum price per category.,both
What is the distribution of employee salaries?,"SELECT Salary, COUNT(EmployeeID) AS EmployeeCount FROM employees GROUP BY Salary;","```sql
SELECT Salary, COUNT(*) AS NumberOfEmployees
FROM employees
GROUP BY Salary
ORDER BY Salary;
```","Both queries group by salary to find the distribution, counting employees for each salary. COUNT(*) and COUNT(EmployeeID) are equivalent when EmployeeID is a primary key.","SELECT Salary, COUNT(*) AS Count FROM employees GROUP BY Salary ORDER BY Count DESC;",Both queries accurately provide the distribution of salaries by counting employees for each salary amount.,both
What is the average discount given on each product?,"SELECT p.ProductName, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    AVG(od.Discount) AS AverageDiscount
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.ProductName;
```",Both queries calculate the average discount per product by joining the products and order details tables and grouping by product details. Including ProductID in the generated query's GROUP BY clause does not affect the result as ProductName is unique per ProductID.,"SELECT P.ProductName, AVG(OD.Discount) AS AvgDiscount FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID GROUP BY P.ProductName;","The generated SQL query and the ground truth SQL query are functionally equivalent, differing only in alias capitalization and the alias name for the average discount column.",both
What is the average discount given on all orders?,SELECT AVG(Discount) FROM [Order Details];,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details];
```","Both queries calculate the average discount from the 'Order Details' table, so they yield the same result.",SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];,"Both queries calculate the average discount from the 'Order Details' table, yielding the same result.",both
Calculate the inventory turnover ratio for all products.,"SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;","```sql
SELECT 
    products.ProductID,
    SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio
FROM 
    products
JOIN 
    [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY 
    products.ProductID;
```","The two queries differ in the fields being grouped and returned. The generated query groups and returns by ProductID, while the ground truth query groups and returns by ProductName. This can lead to different results if multiple products have the same name or ID.","SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(NULLIF(p.UnitsInStock, 0)), 0) AS InventoryTurnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;","The generated query uses NULLIF on UnitsInStock which will only consider non-zero stock, while the ground truth calculates an average over all values.",None
What is the total sales revenue generated by each employee?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","The generated SQL query includes additional fields (FirstName, LastName), but the aggregation on EmployeeID remains consistent with the ground truth query, resulting in the same total sales calculation per employee.","SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName;","Both queries compute the total sales revenue per employee, though the generated query includes additional employee name fields in the result, which does not affect the calculation.",both
How many discontinued products are still listed?,SELECT COUNT(*) FROM products WHERE Discontinued = 1;,"```sql
SELECT COUNT(*) AS DiscontinuedProductsCount
FROM products
WHERE Discontinued = 1;
```",Both queries count the number of discontinued products where the 'Discontinued' column equals 1.,SELECT COUNT(*) FROM products WHERE Discontinued = 1;,Both queries count entries where products are discontinued and were marked as '1'. They yield the same results.,both
Which region has the highest number of orders in 2023?,"SELECT region.RegionDescription, COUNT(orders.OrderID) AS order_count FROM orders JOIN territories ON orders.ShipRegion = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY region.RegionDescription ORDER BY order_count DESC LIMIT 1","```sql
SELECT orders.ShipRegion, COUNT(orders.OrderID) AS order_count
FROM orders
WHERE YEAR(orders.OrderDate) = 2023
GROUP BY orders.ShipRegion
ORDER BY order_count DESC
LIMIT 1;
```","The generated query directly groups by ShipRegion, assuming it represents the region name. The ground truth query uses joins to map ShipRegion to RegionDescription. They will yield different results if ShipRegion is not directly the region name.","SELECT ShipRegion, COUNT(*) AS OrderCount FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY ShipRegion ORDER BY OrderCount DESC LIMIT 1;","The generated query uses ShipRegion directly from the orders table, while the ground truth query joins additional tables to get RegionDescription for the region name. This can yield different results if ShipRegion doesn't directly map to region descriptions.",None
What is the average shipping cost per order for each customer country?,"SELECT customers.Country, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.Country","```sql
SELECT customers.Country, AVG(orders.Freight) AS avg_shipping_cost_per_order
FROM orders
JOIN customers ON orders.CustomerID = customers.CustomerID
GROUP BY customers.Country
```",Both queries compute the average shipping cost per order for each customer country by joining the orders and customers tables and grouping by country. The difference in alias naming does not affect the result.,"SELECT o.ShipCountry, AVG(o.Freight) AS AverageShippingCost FROM orders o GROUP BY o.ShipCountry;","The generated query uses ShipCountry from the orders table, assuming that the shipping country corresponds to the customer's country. The ground truth query joins the orders with customers to directly obtain the customer's country, which ensures the average is calculated per customer country regardless of shipping details.",Base
What is the average discount applied to products in each order?,"SELECT OrderID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY OrderID;","```sql
SELECT OrderID, AVG(Discount) AS AverageDiscount
FROM [Order Details]
GROUP BY OrderID;
```","Both queries calculate the average discount per order by grouping on OrderID. The only difference is the alias for the average discount, which doesn't affect the outcome.","SELECT OrderID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY OrderID;",The generated SQL query is identical to the ground truth query and both correctly calculate the average discount per order by grouping results by OrderID.,both
What are the details of orders where a discount was applied?,SELECT * FROM [Order Details] WHERE Discount > 0;,"```sql
SELECT *
FROM [Order Details]
WHERE Discount > 0;
```","Both queries filter the 'Order Details' table for records where the Discount is greater than 0, yielding identical results.",SELECT * FROM [Order Details] WHERE Discount > 0;,"Both the generated SQL query and the ground truth SQL query are identical and correctly select all order details where a discount was applied, as both use the condition 'Discount > 0'.",both
Which products are most frequently ordered?,"SELECT ProductID, COUNT(ProductID) AS Frequency FROM [Order Details] GROUP BY ProductID ORDER BY Frequency DESC;","```sql
SELECT ProductID, COUNT(*) AS OrderCount
FROM [Order Details]
GROUP BY ProductID
ORDER BY OrderCount DESC;
```",Both queries count the number of orders per product and order the results in descending order by the count. They achieve the same outcome using different syntax.,"SELECT ProductID, COUNT(*) AS OrderFrequency FROM [Order Details] GROUP BY ProductID ORDER BY OrderFrequency DESC;","Both queries count the occurrences of ProductID in the [Order Details] table, group by ProductID, and order the results in descending order of frequency. They will yield the same results, although the column aliases differ.",both
What is the total discount offered across all orders this month?,"SELECT SUM(od.Discount) AS TotalDiscount FROM [Order Details] od WHERE DATE_TRUNC('month', CURRENT_DATE) = DATE_TRUNC('month', OrderDate);","```sql
SELECT SUM(Discount) AS TotalDiscount
FROM [Order Details]
WHERE MONTH(OrderID) = MONTH(CURRENT_DATE) AND YEAR(OrderID) = YEAR(CURRENT_DATE);
```","The generated query uses 'OrderID' to filter by the current month and year, while it should use 'OrderDate'. The ground truth query correctly uses 'OrderDate' for this purpose.",SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) AND MONTH(orders.OrderDate) = MONTH(CURDATE());,"The generated query calculates the total discount amount by multiplying UnitPrice, Quantity, and Discount, whereas the ground truth query sums only the Discount field. Additionally, the ground truth query does not join with the orders table and has a different method for checking the current month.",None
Which products had the highest discount applied last month?,"SELECT p.ProductName, od.Discount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate >= DATEADD(month, -1, CURRENT_DATE) AND od.OrderDate < CURRENT_DATE ORDER BY od.Discount DESC","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Discount) AS TotalDiscount
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.OrderID IN (SELECT OrderID FROM [Order Details] WHERE CAST(OrderDate AS DATE) >= DATEADD(MONTH, -1, GETDATE()) AND CAST(OrderDate AS DATE) < GETDATE())
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalDiscount DESC;
```","The generated query sums the discounts and returns the total discount per product, while the ground truth query sorts individual discounts to find the highest one. They do not yield the same results.","SELECT od.ProductName, od.Discount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE) AND od.Discount = (SELECT MAX(Discount) FROM [Order Details] od2 WHERE od2.OrderID IN (SELECT OrderID FROM orders o2 WHERE o2.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND o2.OrderDate < DATE_TRUNC('month', CURRENT_DATE)))","The generated query calculates the highest discount over all orders from last month and retrieves any order details with that value, but it lacks the JOIN with the products table, which means it does not correctly select the product names associated with these discounts. Also, it assumes all discounts at the max value rather than ordering them.",None
Calculate the customer retention rate for January 2022.,SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2022-01-01' AND '2022-01-31' THEN orders.CustomerID END) * 1.0 / COUNT(DISTINCT CASE WHEN orders.OrderDate < '2022-01-01' THEN orders.CustomerID END)) AS RetentionRate FROM orders;,"```sql
SELECT 
    (COUNT(DISTINCT o1.CustomerID) * 1.0 / NULLIF(COUNT(DISTINCT o2.CustomerID), 0)) AS Customer_Retention_Rate
FROM 
    orders o1
LEFT JOIN 
    orders o2 ON o1.CustomerID = o2.CustomerID AND o2.OrderDate < '2022-01-01'
WHERE 
    o1.OrderDate BETWEEN '2022-01-01' AND '2022-01-31'
```","The generated query checks retention using LEFT JOIN which might include more customers than the ground truth query, affecting results.",SELECT (COUNT(DISTINCT CASE WHEN o.OrderDate BETWEEN '2022-01-01' AND '2022-01-31' THEN o.CustomerID END) * 100.0 / COUNT(DISTINCT CASE WHEN o.OrderDate < '2022-01-01' THEN o.CustomerID END)) AS RetentionRate FROM orders o;,"Both queries calculate the retention rate by comparing distinct customer IDs who made orders in January 2022 against those who made orders before January 2022. The difference in multiplication by 100.0 instead of 1.0 just represents the rate as a percentage, which does not change the underlying logic.",FT
What percentage of customers are repeat buyers in 2023?,"SELECT (COUNT(DISTINCT o2023.CustomerID) * 1.0 / NULLIF(COUNT(DISTINCT oBefore2023.CustomerID), 0)) AS repeat_customer_rate FROM orders o2023 JOIN orders oBefore2023 ON o2023.CustomerID = oBefore2023.CustomerID WHERE o2023.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND oBefore2023.OrderDate < '2023-01-01'","```sql
SELECT 
    (COUNT(DISTINCT orders.CustomerID) WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') * 100.0 / 
    (COUNT(DISTINCT orders.CustomerID) WHERE orders.OrderDate < '2023-01-01') AS repeat_buyer_percentage 
FROM 
    orders
```","The generated query incorrectly uses two separate COUNT operations for repeat buyers and customers before 2023, without checking if they are the same customers. The ground truth query correctly joins orders to ensure the customers are repeat buyers, occurring in both 2023 and before 2023.",SELECT (COUNT(DISTINCT orders.CustomerID) FILTER (WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') * 1.0 / COUNT(DISTINCT orders.CustomerID) FILTER (WHERE orders.OrderDate < '2023-01-01')) AS repeat_customer_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31',"The generated query checks for distinct customers in 2023 and compares it to customers before 2023, but not those who purchased in both periods. The ground truth query correctly filters customers who made purchases in both periods.",None
How much revenue has each customer generated over their lifetime?,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID","```sql
SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN customers ON orders.CustomerID = customers.CustomerID 
GROUP BY customers.CustomerID
```","The generated SQL query accurately matches the ground truth SQL query in terms of logic and calculations. Both queries calculate the lifetime revenue for each customer by summing the product of UnitPrice, Quantity, and the discount factor, grouped by CustomerID. The structure and the joins in both queries are identical, leading to identical results.","SELECT orders.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.CustomerID","The generated SQL query may not include all customers because it only references the 'orders' table for CustomerID, whereas the ground truth query joins the 'customers' table ensuring all customers are considered.",Base
What is the total quantity sold for each product this month?,"SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE DATE_TRUNC('month', CURRENT_DATE) = DATE_TRUNC('month', od.OrderDate) GROUP BY p.ProductName;","```sql
SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalQuantitySold
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
WHERE MONTH(CURRENT_DATE) = MONTH(order_date) AND YEAR(CURRENT_DATE) = YEAR(order_date)
GROUP BY products.ProductID, products.ProductName;
```",Both queries correctly calculate the total quantity sold for each product this month. The slight differences in the SQL syntax and formatting do not impact the accuracy of the result.,"SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) GROUP BY p.ProductName;","Both queries join the products and order details tables, calculate the total quantity for each product for orders placed in the current month, and group by product name. The order of tables in the JOIN clause does not affect the outcome, and both queries use equivalent conditions to filter the current month's sales data.",both
Which city received the most shipments?,"SELECT ShipCity, COUNT(*) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 1","```sql
SELECT ShipCity, COUNT(OrderID) AS ShipmentCount
FROM orders
GROUP BY ShipCity
ORDER BY ShipmentCount DESC
LIMIT 1;
```","Both queries count the orders grouped by ShipCity, ordering by the count in descending order, and limit the result to the top city. The minor difference in counting columns does not affect the outcome.","SELECT ShipCity, COUNT(OrderID) AS ShipmentCount FROM orders GROUP BY ShipCity ORDER BY ShipmentCount DESC LIMIT 1;","Both queries count the number of orders grouped by ShipCity and sort the results in descending order to find the city with the most shipments. They differ only in select column naming and COUNT parameter, which does not affect the result.",both
Identify suppliers who supply discontinued products.,SELECT SupplierID FROM products WHERE Discontinued = 1;,"```sql
SELECT DISTINCT SupplierID
FROM products
WHERE Discontinued = 1;
```","Both queries retrieve the SupplierID from the products table where the Discontinued field is set to 1. The DISTINCT keyword in the generated query ensures unique SupplierIDs, which is an implicit behavior in the ground truth query because it does not specify duplicates.",SELECT DISTINCT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.Discontinued = 1;,"The generated query selects CompanyName from the suppliers table, while the ground truth only selects SupplierID from the products table. The generated query provides additional, relevant information not present in the ground truth.",Base
Which employee had the most sales in the last quarter?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(QUARTER, -1, CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '3 month')
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY TotalSales DESC
LIMIT 1;
```","The generated query calculates the start of the last quarter differently, using DATE_TRUNC with a fixed 3-month offset, while the ground truth uses DATEADD to capture the exact start of the last quarter.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1","The generated query uses specific dates '2023-07-01' and '2023-09-30', while the ground truth query dynamically calculates the last quarter from the current date, which might be different depending on the current date.",None
Which products have orders that significantly exceed their reorder levels?,SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID HAVING SUM(od.Quantity) > p.ReorderLevel;,"```sql
SELECT p.ProductID, p.ProductName, p.UnitsInStock, p.ReorderLevel, SUM(od.Quantity) AS TotalOrdered
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName, p.UnitsInStock, p.ReorderLevel
HAVING SUM(od.Quantity) > p.ReorderLevel
```",Both queries aim to find products with a total order quantity exceeding their reorder level. They differ in output columns but effectively address the user's question.,SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity) > MAX(p.ReorderLevel);,"The generated query uses MAX(p.ReorderLevel) instead of directly comparing to p.ReorderLevel, potentially altering results when products have varying reorder levels in multiple records.",Base
Analyze the products with higher sales than the average monthly performance.,"SELECT ProductID FROM (SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID) AS ProductPerformance WHERE TotalQuantity > (SELECT AVG(TotalQuantity) FROM (SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID) AS AvgPerformance);","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
HAVING SUM(od.Quantity) > (
    SELECT AVG(MonthlySales) 
    FROM (
        SELECT SUM(od2.Quantity) AS MonthlySales
        FROM products p2
        JOIN [Order Details] od2 ON p2.ProductID = od2.ProductID
        GROUP BY p2.ProductID
    ) AS MonthlyPerformance
)
```",The generated query calculates total sales by summing quantities for products and compares it against a wrongly computed average as monthly performance aggregates by ProductID instead of month and ProductID.,"SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity * od.UnitPrice) > (SELECT AVG(monthly_performance) FROM (SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od1.Quantity * od1.UnitPrice) AS monthly_performance FROM [Order Details] od1 JOIN orders o ON od1.OrderID = o.OrderID GROUP BY Month) AS monthly_sales)","The generated query calculates the total sales value per product, while the ground truth query uses total quantity. Also, generated query compares against average monthly performance, and the ground query compares against average quantity.",None
Identify the most common shipping recipient names.,"SELECT ShipName, COUNT(*) AS Frequency FROM orders GROUP BY ShipName ORDER BY Frequency DESC LIMIT 5;","```sql
SELECT ShipName, COUNT(*) as Count
FROM orders
GROUP BY ShipName
ORDER BY Count DESC;
```","The generated SQL query lacks a LIMIT clause, so it returns all records instead of just the top 5 most common shipping recipient names.","SELECT ShipName, COUNT(*) AS Frequency FROM orders GROUP BY ShipName ORDER BY Frequency DESC;","The generated query lacks a LIMIT clause, so it will return all results instead of just the top 5 most common names like the ground truth query.",None
Find the top 3 cities with the most suppliers.,"SELECT City, COUNT(*) AS SupplierCount FROM suppliers GROUP BY City ORDER BY SupplierCount DESC LIMIT 3;","```sql
SELECT City, COUNT(*) AS SupplierCount
FROM suppliers
GROUP BY City
ORDER BY SupplierCount DESC
LIMIT 3;
```","Both queries are functionally equivalent, grouping suppliers by City, counting them, and ordering by the count in descending order, with a limit of 3 results. The syntax is the same and will yield the same results.","SELECT City, COUNT(*) AS NumberOfSuppliers FROM suppliers GROUP BY City ORDER BY NumberOfSuppliers DESC LIMIT 3;","Both queries count the number of suppliers per city, order the results by the count in descending order, and limit the output to the top 3 cities. The differences in alias names do not affect the results.",both
Which customers have placed the most orders?,"SELECT o.CustomerID, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.CustomerID ORDER BY OrderCount DESC;","```sql
SELECT customers.CustomerID, customers.CompanyName, COUNT(orders.OrderID) AS OrderCount
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
GROUP BY customers.CustomerID, customers.CompanyName
ORDER BY OrderCount DESC;
```","Both queries correctly identify customers with the most orders by counting OrderID. The generated query includes additional customer information (CompanyName), but it does not affect the core result of identifying customers with the most orders.","SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY CustomerID ORDER BY TotalOrders DESC;","Both queries select CustomerID and count the orders associated with each customer, grouping by CustomerID and ordering by the count in descending order. They yield the same results.",both
What is the current stock level for each product?,"SELECT ProductID, UnitsInStock FROM products;","```sql
SELECT ProductID, ProductName, UnitsInStock 
FROM products;
```","Both queries provide the current stock level for each product by selecting the relevant 'UnitsInStock' column. The generated query also includes 'ProductName', which does not affect the comparison as it still answers the user's question.","SELECT ProductID, ProductName, UnitsInStock FROM products WHERE Discontinued = 0;","The generated query includes a condition to exclude discontinued products and selects an additional column (ProductName), which alters the dataset compared to the ground truth.",Base
Calculate the overall product performance score using a composite measure of sales and inventory levels.,"SELECT p.ProductID, p.ProductName, (SUM(od.Quantity) * (1 - p.Discontinued)) / (p.UnitsInStock + 1) AS ProductPerformanceScore FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID;","```sql
SELECT 
    p.ProductID, 
    p.ProductName,
    SUM(od.Quantity) AS TotalSales,
    p.UnitsInStock,
    (SUM(od.Quantity) / NULLIF(p.UnitsInStock, 0)) AS PerformanceScore
FROM 
    products p
LEFT JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.ProductName, p.UnitsInStock
```","The generated query calculates the PerformanceScore as TotalSales divided by UnitsInStock, whereas the ground truth considers a different formula, including the Discontinued flag and adding 1 to UnitsInStock.","SELECT p.ProductName, (SUM(od.Quantity * od.UnitPrice) / p.UnitsInStock) AS ProductPerformance FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName HAVING p.UnitsInStock > 0 ORDER BY ProductPerformance DESC;","The generated query calculates a performance score using SUM(od.Quantity * od.UnitPrice) and checks p.UnitsInStock > 0, focusing on sales value per stock. The ground truth uses SUM(od.Quantity), considers discontinued status, and adjusts for stock with +1, resulting in different performance metrics.",None
Which products have reached their reorder level as of the current date?,SELECT products.ProductName FROM products WHERE products.UnitsInStock <= products.ReorderLevel,"```sql
SELECT products.ProductID, products.ProductName, products.UnitsInStock, products.ReorderLevel
FROM products
WHERE products.UnitsInStock <= products.ReorderLevel;
```","The generated SQL query includes 'ProductID' and 'UnitsInStock' in the SELECT clause, which the ground truth query does not.",SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;,"The generated SQL query checks if products are not discontinued, which is not part of the ground truth query.",None
What is the total discount given for each product?,"SELECT ProductID, SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details] GROUP BY ProductID;","```sql
SELECT 
    [Order Details].ProductID,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount
FROM 
    [Order Details]
GROUP BY 
    [Order Details].ProductID;
```","The generated SQL query and the ground truth query perform the same calculation by grouping by ProductID and summing up the total discount based on UnitPrice, Quantity, and Discount columns.","SELECT ProductName, SUM(Discount * Quantity * UnitPrice) AS TotalDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;","The generated query groups by ProductName while the ground truth query groups by ProductID. This can lead to different results if the same ProductID has different names. Moreover, the generated query requires a join with the products table, which may impact the outcome if there are products without corresponding order details.",Base
How many products are currently discontinued?,SELECT COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1;,"```sql
SELECT COUNT(*) AS DiscontinuedProductsCount 
FROM products 
WHERE Discontinued = 1;
```","Both queries count the number of discontinued products where 'Discontinued = 1', yielding the same result.",SELECT COUNT(*) FROM products WHERE Discontinued = 1;,Both queries count the number of products that are discontinued by checking if the Discontinued field is equal to 1.,both
Calculate the lifetime value of each customer.,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;","```sql
SELECT customers.CustomerID, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CustomerLifetimeValue
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID;
```","Both queries calculate the lifetime value of each customer using the same logic and structure, yielding identical results.","SELECT customers.CustomerID, SUM(orders.Total) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID;","The generated query calculates lifetime value based on the total from orders, whereas the ground truth query calculates it using detailed line items considering unit price, quantity, and discount.",Base
What is the average discount given by each employee on their orders?,"SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.Discount) AS AverageDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName;","```sql
SELECT employees.EmployeeID, 
       employees.FirstName, 
       employees.LastName, 
       AVG([Order Details].Discount) AS AverageDiscount
FROM employees
JOIN orders ON employees.EmployeeID = orders.EmployeeID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName;
```",Both queries select employee details and calculate the average discount per employee by joining the same tables and grouping by employee details. The structure and logic are equivalent.,"SELECT e.FirstName, e.LastName, AVG(od.Discount) AS AverageDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName;",The generated query and the ground truth query will yield the same results despite a slight difference in selected columns. Both group by employee details and calculate the average discount.,both
Identify the top-performing products based on sales.,"SELECT ProductName, SUM(Quantity) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 0 GROUP BY ProductName ORDER BY TotalSales DESC LIMIT 10;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSales DESC;
```",The generated query does not filter out discontinued products and does not limit results to the top 10.,"SELECT products.ProductName, SUM([Order Details].Quantity * ([Order Details].UnitPrice * (1 - [Order Details].Discount))) AS sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY sales DESC LIMIT 10","The generated query calculates sales based on price and discount, while the ground truth query sums quantities and filters out discontinued products.",None
What is the variance in shipping costs for each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, VARIANCE(Freight) AS FreightVariance FROM orders GROUP BY OrderMonth;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
    VARIANCE(Freight) AS ShippingCostVariance
FROM 
    orders
GROUP BY 
    Month;
```","Both queries calculate the variance of shipping costs (Freight) for each month, grouping by the formatted date, and using the VARIANCE function. The column alias differences do not affect the result.","SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, VARIANCE(Freight) AS FreightVariance FROM orders GROUP BY Year, Month;","Both queries calculate the variance of shipping costs (Freight) for each month. The generated SQL query extracts Year and Month separately, while the ground truth query formats the date to '%Y-%m'. Despite the difference in formatting, they group by month-year and provide the same results.",both
What is the total freight cost for each shipping country?,"SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry","```sql
SELECT ShipCountry, SUM(Freight) AS TotalFreightCost
FROM orders
GROUP BY ShipCountry;
```",Both queries calculate the total freight cost for each shipping country by summing the Freight column and grouping by ShipCountry. The difference in alias naming does not affect the result.,"SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;",Both queries are identical and correctly compute the total freight cost for each shipping country by grouping the records based on ShipCountry and summing the Freight values.,both
What is the month-by-month growth in total sales?,"SELECT DATE_FORMAT(O.OrderDate, '%Y-%m') AS Month, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY Month ORDER BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    SUM(OrderDetails.UnitPrice * OrderDetails.Quantity * (1 - OrderDetails.Discount)) AS TotalSales,
    LAG(SUM(OrderDetails.UnitPrice * OrderDetails.Quantity * (1 - OrderDetails.Discount))) OVER (ORDER BY DATE_FORMAT(OrderDate, '%Y-%m')) AS PreviousMonthSales,
    SUM(OrderDetails.UnitPrice * OrderDetails.Quantity * (1 - OrderDetails.Discount)) - LAG(SUM(OrderDetails.UnitPrice * OrderDetails.Quantity * (1 - OrderDetails.Discount))) OVER (ORDER BY DATE_FORMAT(OrderDate, '%Y-%m')) AS Growth
FROM 
    orders 
JOIN 
    [Order Details] AS OrderDetails ON orders.OrderID = OrderDetails.OrderID
GROUP BY 
    Month
ORDER BY 
    Month;
```","The generated SQL computes month-by-month growth by calculating the difference in sales between consecutive months using the LAG function, while the ground truth SQL only calculates total sales per month without considering growth.","SELECT MONTH(o.OrderDate) AS month, YEAR(o.OrderDate) AS year, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS total_sales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY YEAR(o.OrderDate), MONTH(o.OrderDate);","Both queries compute the total sales by month and year, despite different formats for grouping. The generated query separately groups by year and month, while the ground truth uses combined year-month formatting. They yield the same results.",FT
What is the total freight cost for shipped orders?,SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShippedDate IS NOT NULL;,"```sql
SELECT SUM(Freight) AS TotalFreightCost
FROM orders
WHERE ShippedDate IS NOT NULL;
```","The generated SQL query accurately answers the user's question by calculating the total freight cost for orders that have been shipped, ensuring ShippedDate is not null.",SELECT SUM(Freight) AS TotalFreight FROM orders WHERE ShippedDate IS NOT NULL;,"Both queries calculate the sum of freight costs for orders that have a non-null shipped date, thus they return the same result.",both
How much revenue is generated from orders with more than 10 units?,SELECT SUM(UnitPrice * Quantity) AS Revenue FROM [Order Details] WHERE Quantity > 10;,"```sql
SELECT SUM(od.Quantity * od.UnitPrice) AS TotalRevenue
FROM [Order Details] od
WHERE od.Quantity > 10;
```","Both queries calculate the total revenue from orders with more than 10 units, and they yield the same result.",SELECT SUM(UnitPrice * Quantity) FROM [Order Details] WHERE Quantity > 10;,"Both queries calculate the sum of revenue for orders with more than 10 units, differing only in optional alias usage, which doesn't affect the result.",both
How many orders were shipped on time each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) FROM orders WHERE ShippedDate <= RequiredDate GROUP BY DATE_TRUNC('month', OrderDate);","```sql
SELECT 
    DATE_FORMAT(orders.ShippedDate, '%Y-%m') AS Month,
    COUNT(orders.OrderID) AS OnTimeOrders
FROM 
    orders
WHERE 
    orders.ShippedDate <= orders.RequiredDate
GROUP BY 
    DATE_FORMAT(orders.ShippedDate, '%Y-%m')
ORDER BY 
    Month;
```","The generated query groups by ShippedDate's month, while the ground truth query groups by OrderDate's month. This can yield different results if ShippedDate and OrderDate are in different months.","SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, COUNT(orders.OrderID) AS onTimeOrders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')","Both queries count the number of on-time orders per month by comparing ShippedDate with RequiredDate and grouping by the month of OrderDate, though they format the date differently.",FT
What is the variance in shipping costs across different regions?,"SELECT ShipRegion, VAR_SAMP(Freight) AS FreightVariance FROM orders GROUP BY ShipRegion;","```sql
SELECT ShipRegion, VARIANCE(Freight) AS ShippingCostVariance
FROM orders
GROUP BY ShipRegion;
```",The generated SQL query uses VARIANCE which might not be standard SQL; the ground truth query uses VAR_SAMP which is ANSI SQL for sample variance.,"SELECT ShipRegion, VARIANCE(Freight) AS FreightVariance FROM orders GROUP BY ShipRegion;",Both queries calculate the variance of freight (shipping costs) grouped by ShipRegion using aggregate functions for variance.,FT
What percentage of orders have a shipping cost greater than $100?,SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM orders) AS Percentage FROM orders WHERE Freight > 100;,"```sql
SELECT (COUNT(OrderID) * 100.0 / (SELECT COUNT(OrderID) FROM orders)) AS PercentageGreaterThan100
FROM orders
WHERE Freight > 100;
```",Both queries calculate the percentage of orders with a Freight cost greater than $100 by dividing the count of such orders by the total order count and multiplying by 100.,SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM orders)) AS percentage_over_100 FROM orders WHERE Freight > 100,"Both queries calculate the percentage of orders with a shipping cost greater than $100, using similar logic and conditions, even though they use slightly different alias names.",both
What is the most common order quantity?,"SELECT od.Quantity, COUNT(od.Quantity) AS Frequency FROM [Order Details] od GROUP BY od.Quantity ORDER BY Frequency DESC LIMIT 1;","```sql
SELECT Quantity
FROM [Order Details]
GROUP BY Quantity
ORDER BY COUNT(*) DESC
LIMIT 1;
```",Both queries correctly determine the most common order quantity by grouping on Quantity and ordering by the count in descending order. They will yield the same results even though they differ in naming.,"SELECT OrderDetails.Quantity, COUNT(OrderDetails.Quantity) AS QuantityCount FROM OrderDetails GROUP BY OrderDetails.Quantity ORDER BY QuantityCount DESC LIMIT 1","Both queries are selecting the order quantity with the highest frequency, using COUNT, GROUP BY, and ORDER BY, followed by LIMIT 1. Table aliases and naming conventions differ, but they yield the same result.",both
What are the top-selling products based on total sales in the last month?,"SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE) - 1 AND YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY od.ProductID, p.ProductName ORDER BY TotalSales DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.OrderID IN (
    SELECT OrderID
    FROM [Orders]
    WHERE OrderDate >= DATEADD(MONTH, -1, GETDATE())
)
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSales DESC
LIMIT 10;
```","The generated query calculates total sales based on quantity, while the ground truth calculates it based on quantity * unit price. Additionally, the top limit in the generated query is 10, whereas in the ground truth it is 5.","SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IN (SELECT o.OrderID FROM orders o WHERE o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)) GROUP BY p.ProductID, p.ProductName ORDER BY TotalSales DESC;","The generated query uses a different date condition and includes a discount in sales calculation, which might yield different results compared to the ground truth query.",None
Find the product with the most significant percentage sales growth month-over-month.,"SELECT p.ProductID, ((SUM(CASE WHEN EXTRACT(MONTH FROM od.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) THEN od.Quantity ELSE 0 END) - SUM(CASE WHEN EXTRACT(MONTH FROM od.OrderDate) = EXTRACT(MONTH FROM DATE_ADD('month', -1, CURRENT_DATE)) THEN od.Quantity ELSE 0 END)) / NULLIF(SUM(CASE WHEN EXTRACT(MONTH FROM od.OrderDate) = EXTRACT(MONTH FROM DATE_ADD('month', -1, CURRENT_DATE)) THEN od.Quantity ELSE 0 END), 0)) * 100 AS SalesGrowth FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY SalesGrowth DESC LIMIT 1;","```sql
WITH MonthlySales AS (
    SELECT 
        p.ProductID,
        p.ProductName,
        DATE_FORMAT(o.OrderDate, '%Y-%m') AS SaleMonth,
        SUM(od.Quantity) AS TotalSales
    FROM 
        products p
    JOIN 
        [Order Details] od ON p.ProductID = od.ProductID
    JOIN 
        orders o ON od.OrderID = o.OrderID
    GROUP BY 
        p.ProductID, SaleMonth
),
SalesGrowth AS (
    SELECT 
        a.ProductID,
        a.ProductName,
        a.SaleMonth,
        a.TotalSales,
        COALESCE((a.TotalSales - b.TotalSales) / NULLIF(b.TotalSales, 0), 0) AS SalesGrowth
    FROM 
        MonthlySales a
    LEFT JOIN 
        MonthlySales b ON a.ProductID = b.ProductID AND DATE_FORMAT(DATE_ADD(b.SaleMonth, INTERVAL 1 MONTH), '%Y-%m') = a.SaleMonth
)
SELECT 
    ProductID,
    ProductName,
    MAX(SalesGrowth) AS MaxSalesGrowth
FROM 
    SalesGrowth
GROUP BY 
    ProductID, ProductName
ORDER BY 
    MaxSalesGrowth DESC
LIMIT 1;
```","The generated SQL calculates sales growth for each product over all months and finds the maximum, while the ground truth query calculates sales growth specifically for the current month compared to the previous month and selects the top product based on that specific growth.","SELECT p.ProductName, (SUM(CASE WHEN EXTRACT(MONTH FROM o.OrderDate) = 10 THEN od.Quantity ELSE 0 END) - SUM(CASE WHEN EXTRACT(MONTH FROM o.OrderDate) = 9 THEN od.Quantity ELSE 0 END)) / NULLIF(SUM(CASE WHEN EXTRACT(MONTH FROM o.OrderDate) = 9 THEN od.Quantity ELSE 0 END), 0) AS Growth FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate BETWEEN '2023-09-01' AND '2023-10-31' GROUP BY p.ProductID, p.ProductName ORDER BY Growth DESC LIMIT 1;","The generated query uses hardcoded months, focusing only on September and October 2023. The ground truth query dynamically calculates month-over-month growth relative to the current date, allowing for flexibility in the time period analyzed.",None
What is the average number of orders processed per employee each month?,"SELECT employees.EmployeeID, COUNT(orders.OrderID) / COUNT(DISTINCT EXTRACT(YEAR_MONTH FROM orders.OrderDate)) AS AvgOrdersPerMonth FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;","```sql
SELECT 
    e.EmployeeID, 
    e.FirstName, 
    e.LastName, 
    COUNT(o.OrderID) / COUNT(DISTINCT DATE_TRUNC('month', o.OrderDate)) AS AverageOrdersPerMonth
FROM 
    employees e
LEFT JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
GROUP BY 
    e.EmployeeID, e.FirstName, e.LastName
```",Both queries calculate the average number of orders per employee each month. The difference in date handling (DATE_TRUNC vs. EXTRACT) does not affect the outcome as both extract the month for counting distinct months.,"SELECT employees.EmployeeID, EXTRACT(YEAR FROM orders.OrderDate) AS Year, EXTRACT(MONTH FROM orders.OrderDate) AS Month, COUNT(orders.OrderID) / COUNT(DISTINCT EXTRACT(MONTH FROM orders.OrderDate)) AS AvgMonthlyOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, Year, Month;","The generated query calculates the average orders per employee by dividing the count of orders by distinct month numbers, which inaccurately affects the result. It groups by Year and Month, leading to orders being counted multiple times. The ground truth query calculates average monthly orders by dividing the total orders by distinct Year-Month combinations for each employee, yielding the correct average.",Base
What is the average fulfillment time for orders in Q1 2023?,"SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'","```sql
SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time 
FROM orders 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'
```","Both queries compute the average fulfillment time for orders placed between January 1, 2023, and March 31, 2023, using the DATEDIFF function on OrderDate and ShippedDate. The difference is only in the alias used for the result, which does not affect the output.","SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'",The generated SQL query is identical to the ground truth query and accurately computes the average fulfillment time for orders in Q1 2023.,both
Which products are most frequently ordered together?,"SELECT od1.ProductID, od2.ProductID, COUNT(*) AS OrderedTogetherCount FROM [Order Details] od1 JOIN [Order Details] od2 ON od1.OrderID = od2.OrderID AND od1.ProductID < od2.ProductID GROUP BY od1.ProductID, od2.ProductID ORDER BY OrderedTogetherCount DESC;","```sql
SELECT od1.ProductID, od2.ProductID, COUNT(*) AS Frequency
FROM [Order Details] od1
JOIN [Order Details] od2 ON od1.OrderID = od2.OrderID AND od1.ProductID < od2.ProductID
GROUP BY od1.ProductID, od2.ProductID
ORDER BY Frequency DESC;
```","Both queries have the same logic and structure, differing only in the alias used for the count column. They will yield the same results.","SELECT o1.ProductID, o2.ProductID, COUNT(*) AS TogetherCount FROM [Order Details] o1 JOIN [Order Details] o2 ON o1.OrderID = o2.OrderID AND o1.ProductID < o2.ProductID GROUP BY o1.ProductID, o2.ProductID ORDER BY TogetherCount DESC LIMIT 1;","The generated query has a LIMIT 1, returning only the single most frequently ordered pair, while the ground truth query returns all pairs ordered together.",Base
Find the average order quantity per product.,"SELECT p.ProductName, AVG(od.Quantity) AS AverageQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;","```sql
SELECT 
    p.ProductID, 
    AVG(od.Quantity) AS AverageOrderQuantity
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID;
```","Both queries calculate the average order quantity per product. The primary difference is that one query returns 'ProductID' while the other returns 'ProductName', but this does not affect the calculation of the average.","SELECT p.ProductName, AVG(od.Quantity) AS AverageQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;","Both queries are identical and will yield the same results, accurately answering the user's question.",both
Which recipient received the highest number of shipments?,"SELECT ShipName, COUNT(OrderID) AS NumShipments FROM orders GROUP BY ShipName ORDER BY NumShipments DESC LIMIT 1;","```sql
SELECT ShipName, COUNT(OrderID) AS ShipmentCount
FROM orders
GROUP BY ShipName
ORDER BY ShipmentCount DESC
LIMIT 1;
```","Both queries group by ShipName, count the number of OrderID, order the results by the count in descending order, and limit the result to one. They effectively achieve the same result despite the different alias for the count.","SELECT orders.ShipName, COUNT(*) AS shipment_count FROM orders GROUP BY orders.ShipName ORDER BY shipment_count DESC LIMIT 1","Both queries correctly group by ShipName, count the orders for each ShipName, and return the ShipName with the highest count.",both
What is the distribution of order quantities for each employee over the last three months?,"SELECT e.FirstName, e.LastName, od.Quantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY e.FirstName, e.LastName, od.Quantity ORDER BY od.Quantity;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.Quantity) AS TotalOrderQuantity
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= DATEADD(MONTH, -3, CURRENT_DATE)
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY e.EmployeeID;
```","The generated query aggregates the total order quantity per employee, whereas the ground truth query shows the distribution of each quantity per employee without aggregation.","SELECT e.EmployeeID, SUM(od.Quantity) AS TotalQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' GROUP BY e.EmployeeID;","The generated query calculates the total quantity per employee, while the ground truth lists individual order quantities for each employee without aggregation. The generated query uses EmployeeID, while the ground truth outputs employee names and orders by quantity.",None
Which products have an inventory turnover ratio below the average?,"SELECT ProductName FROM (SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS TurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName) AS Turnover WHERE TurnoverRatio < (SELECT AVG(TurnoverRatio) FROM (SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS TurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID) AS AvgTurnover);","```sql
SELECT p.ProductID, p.ProductName
FROM products p
JOIN (
    SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p2.UnitsInStock) AS InventoryTurnoverRatio
    FROM products p2
    JOIN [Order Details] od ON p2.ProductID = od.ProductID
    GROUP BY p2.ProductID
) it ON it.InventoryTurnoverRatio < (
    SELECT AVG(SUM(od.Quantity * od.UnitPrice) / AVG(p2.UnitsInStock))
    FROM products p2
    JOIN [Order Details] od ON p2.ProductID = od.ProductID
    GROUP BY p2.ProductID
)
```","The generated query incorrectly aggregates sums and averages, leading to a flawed comparison. It compares each product's turnover ratio to a single overall average, not an average of turnover ratios.","SELECT ProductName FROM products WHERE (ProductSales / NULLIF(QuantityPerUnit, 0)) < (SELECT AVG(ProductSales / NULLIF(QuantityPerUnit, 0)) FROM products);","The generated query calculates turnover based on 'ProductSales / QuantityPerUnit', which is incorrect. The ground truth calculates turnover using order details and stock data, a more accurate approach for inventory turnover.",None
How many active products have stock quantities between their reorder level and maximum?,SELECT COUNT(ProductID) FROM products WHERE UnitsInStock > ReorderLevel AND Discontinued = 0;,"```sql
SELECT COUNT(*)
FROM products
WHERE Discontinued = 0 AND UnitsInStock > ReorderLevel;
```","The generated query does not check if UnitsInStock is less than Maximum, which is required to satisfy the condition of being between ReorderLevel and Maximum.",SELECT COUNT(*) FROM products WHERE UnitsInStock > ReorderLevel AND Discontinued = 0;,"The generated query does not check if UnitsInStock is less than or equal to MaximumLevel, which is necessary to determine if quantities are between reorder level and maximum.",None
Identify the top 5 customers by total revenue.,"SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalRevenue DESC LIMIT 5;","```sql
SELECT c.CustomerID, c.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.CustomerID, c.CompanyName
ORDER BY TotalRevenue DESC
LIMIT 5;
```",Both queries correctly calculate the total revenue for each customer and sort them to find the top 5. The extra 'CompanyName' in the generated query does not affect the overall correctness regarding the output results for the customer's total revenue.,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY total_revenue DESC LIMIT 5","Both queries accurately calculate the total revenue per customer by joining the necessary tables and aggregating the data. They group by the CustomerID and order by the total revenue in descending order, then limit the results to the top 5. The differences in table aliases and column names do not affect the outcome.",both
What is the most popular product by quantity ordered?,SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY SUM(od.Quantity) DESC LIMIT 1;,"```sql
SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalQuantityOrdered
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY products.ProductName
ORDER BY TotalQuantityOrdered DESC
LIMIT 1;
```","Both queries are designed to find the product with the highest total quantity ordered, using a JOIN on the same tables and ordering by the sum of quantities in descending order, and limiting the result to one.","SELECT ProductName, SUM([Order Details].Quantity) AS TotalOrdered FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY TotalOrdered DESC LIMIT 1;","Both queries sum the product quantities and order by the total in descending order, then limit the result to the top product.",both
Who are the top 5 customers by lifetime value?,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC LIMIT 5","```sql
SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN customers ON orders.CustomerID = customers.CustomerID 
GROUP BY customers.CustomerID 
ORDER BY customer_lifetime_value DESC 
LIMIT 5
```","The generated SQL query and the ground truth query are functionally equivalent and would yield the same result. Both queries calculate the customer lifetime value by summing the products of UnitPrice, Quantity, and (1 - Discount) for each customer, group by CustomerID, order the results by lifetime value in descending order, and limit the output to the top 5 customers.","SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC LIMIT 5","The generated SQL query and the ground truth SQL query are identical and will yield the same results, accurately answering the user's question about the top 5 customers by lifetime value.",both
Identify the products with the most stock variability (highest fluctuation).,"SELECT ProductName, MAX(UnitsInStock) - MIN(UnitsInStock) AS StockVariance FROM products GROUP BY ProductName ORDER BY StockVariance DESC;","```sql
SELECT p.ProductID, p.ProductName, 
       (MAX(p.UnitsInStock) - MIN(p.UnitsInStock)) AS StockFluctuation
FROM products p
GROUP BY p.ProductID, p.ProductName
ORDER BY StockFluctuation DESC;
```",Both queries calculate the stock fluctuation for each product and order the results by this value in descending order. The presence of 'ProductID' in the generated query does not affect the outcome given same grouping.,"SELECT ProductName, MAX(UnitsInStock) - MIN(UnitsInStock) AS StockVariance FROM products GROUP BY ProductName ORDER BY StockVariance DESC;","Both queries are identical and correctly calculate stock variability by using the difference between the maximum and minimum units in stock for each product, then ordering by the resulting variance.",both
Which employees have earned a salary above the average?,SELECT employees.EmployeeID FROM employees WHERE Salary > (SELECT AVG(Salary) FROM employees);,"```sql
SELECT *
FROM employees
WHERE Salary > (SELECT AVG(Salary) FROM employees);
```","Both queries effectively retrieve employees with a salary above the average. The generated query selects all columns, while the ground truth selects only EmployeeID, but both satisfy the user's question.","SELECT e.FirstName, e.LastName FROM employees e WHERE e.Salary > (SELECT AVG(Salary) FROM employees);","Both queries correctly identify employees with salaries above the average. Despite selecting different fields, they use the same logic.",both
Which employees have more than five years of employment?,"SELECT EmployeeID FROM employees WHERE DATEDIFF(CURRENT_DATE, HireDate) / 365 > 5;","```sql
SELECT EmployeeID, FirstName, LastName, HireDate
FROM employees
WHERE DATEDIFF(CURDATE(), HireDate) > 1825;
```","The generated query uses 1825 days, assuming each year has 365 days without accounting for leap years. The ground truth query calculates the difference in years, including the impact of leap years.","SELECT employeeID, (DATEDIFF(CURRENT_DATE, HireDate) / 365) AS years_of_service FROM employees WHERE (DATEDIFF(CURRENT_DATE, HireDate) / 365) > 5;","The generated query includes an additional column 'years_of_service' which is not present in the ground truth query. Both queries will yield the same employee IDs, but the generated query has extra output.",None
What are the top three regions with the highest on-time delivery rate?,"SELECT ShipRegion, 100.0 * COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipRegion ORDER BY OnTimeDeliveryRate DESC LIMIT 3;","```sql
SELECT ShipRegion, 
       COUNT(OrderID) AS TotalOrders,
       SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) AS OnTimeDeliveries,
       (SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate
FROM orders
GROUP BY ShipRegion
ORDER BY OnTimeDeliveryRate DESC
LIMIT 3;
```","Both queries calculate the on-time delivery rate per region and return the top three regions with the highest rate. The mathematical operation is equivalent, though slightly formatted differently.","SELECT ShipRegion, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS on_time_delivery_rate FROM orders GROUP BY ShipRegion ORDER BY on_time_delivery_rate DESC LIMIT 3;",Both queries calculate the on-time delivery rate by dividing the count of on-time deliveries by the total number of orders for each region and then order the results to find the top three. The difference in multiplying by 1.0 or 100.0 affects only the scale of the output but not the comparative order of results.,both
Which products have the highest orders on discount?,"SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice * od.Discount) AS DiscountedRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0 GROUP BY p.ProductID, p.ProductName ORDER BY DiscountedRevenue DESC;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantity, SUM(od.Quantity * od.Discount) AS TotalDiscount
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.Discount > 0
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalDiscount DESC;
```","The generated query orders by total discount quantity, whereas the ground truth orders by discounted revenue.","SELECT ProductID, SUM(Quantity) * (1 - Discount) AS DiscountedSales FROM [Order Details] WHERE Discount > 0 GROUP BY ProductID ORDER BY DiscountedSales DESC;","The generated query calculates sales without including UnitPrice and does not return ProductName, leading to different results.",None
What are the top 5 products with the highest revenue?,"SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 5;","```sql
SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM [Order Details]
GROUP BY [Order Details].ProductID
ORDER BY TotalRevenue DESC
LIMIT 5
```",The LIMIT clause is not ANSI standard SQL. It should use FETCH FIRST 5 ROWS ONLY or similar functionality.,"SELECT p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalRevenue DESC LIMIT 5;",The generated query selects ProductName while the ground truth selects ProductID. This can lead to different results as ProductName is not used in grouping or sorting in the ground truth query.,None
What is the average inventory level for each supplier?,"SELECT SupplierID, AVG(UnitsInStock) AS AvgInventory FROM products GROUP BY SupplierID;","```sql
SELECT 
    p.SupplierID, 
    AVG(p.UnitsInStock) AS AverageInventoryLevel
FROM 
    products p
GROUP BY 
    p.SupplierID;
```",Both queries calculate the average inventory level for each supplier by grouping on SupplierID and averaging the UnitsInStock.,"SELECT s.CompanyName, AVG(p.UnitsInStock) AS AverageInventory FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName;","Both queries calculate the average inventory level per supplier by averaging the 'UnitsInStock' for each supplier and will yield the same result, assuming 'CompanyName' corresponds uniquely to 'SupplierID'.",both
What are the top 3 regions with the highest order volumes?,"SELECT territories.TerritoryDescription, COUNT(orders.OrderID) AS order_count FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryDescription ORDER BY order_count DESC LIMIT 3","```sql
SELECT o.ShipRegion, COUNT(o.OrderID) AS order_volume
FROM orders o
GROUP BY o.ShipRegion
ORDER BY order_volume DESC
LIMIT 3;
```","The generated query uses 'ShipRegion' to determine order volumes, while the ground truth query calculates order volumes by 'TerritoryDescription'. They use different columns for grouping, leading to potentially different results.","SELECT ShipRegion, COUNT(OrderID) AS OrderVolume FROM orders GROUP BY ShipRegion ORDER BY OrderVolume DESC LIMIT 3;","The generated query uses 'ShipRegion' from the orders table, while the ground truth query calculates order volumes based on 'TerritoryDescription' involving multiple joins. They are aggregating data from different sources.",None
What is the average discount applied to each product?,"SELECT p.ProductName, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    AVG(od.Discount) AS AverageDiscount
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.ProductName;
```","Both queries calculate the average discount per product. The generated query includes ProductID in the SELECT and GROUP BY clauses, but it does not affect the calculation of the average discount per product.","SELECT products.ProductName, AVG([Order Details].Discount) AS AvgDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;","Both queries calculate the average discount for each product, grouped by product identifier, which yields the same result even though one groups by ProductName and the other by ProductID.",both
How many sales were made by employees hired in the last year?,"SELECT e.EmployeeID, COUNT(o.OrderID) AS RecentSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE e.HireDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY e.EmployeeID;","```sql
SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE e.HireDate >= DATEADD(YEAR, -1, GETDATE());
```","The generated query calculates total sales amount, while the ground truth query counts the number of orders (sales) made by recently hired employees.","SELECT e.EmployeeID, COUNT(o.OrderID) AS RecentSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE e.HireDate >= DATEADD(year, -1, CURRENT_DATE) GROUP BY e.EmployeeID;","Both queries accurately count the number of sales made by employees hired in the last year, only differing in date manipulation functions.",FT
How many units of each product are on order?,"SELECT ProductID, UnitsOnOrder FROM products;","```sql
SELECT ProductID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder
FROM products
GROUP BY ProductID;
```","The generated query correctly sums UnitsOnOrder for each ProductID, matching the user's request. The ground truth query simply lists UnitsOnOrder without aggregation, so it doesn't answer the user's question.","SELECT ProductName, UnitsOnOrder FROM products WHERE UnitsOnOrder > 0;","The generated query includes a WHERE clause filtering rows with UnitsOnOrder greater than 0, which the ground truth query does not. Additionally, the generated query selects ProductName, while the ground truth query selects ProductID.",None
Which orders were shipped after the required date?,SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;,"```sql
SELECT *
FROM orders
WHERE ShippedDate > RequiredDate;
```","The generated SQL query selects all columns, while the ground truth query selects only the OrderID column.",SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;,The generated SQL query and the ground truth query are identical and both correctly find orders shipped after the required date by comparing ShippedDate and RequiredDate fields.,FT
Which product has the highest sales revenue?,"SELECT products.ProductID, products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID, products.ProductName ORDER BY TotalRevenue DESC LIMIT 1;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSalesRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSalesRevenue DESC
LIMIT 1;
```","The generated query does not account for possible discounts, unlike the ground truth query, leading to potentially different results.","SELECT od.ProductID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 1;","The generated query does not include 'ProductName' and does not join with the 'products' table, which means it lacks context needed to determine if the product is correctly identified by name.",None
What is the most frequently ordered product?,"SELECT ProductName, COUNT([Order Details].OrderID) AS OrderCount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName ORDER BY OrderCount DESC FETCH FIRST 1 ROW ONLY;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalOrdered
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalOrdered DESC
LIMIT 1;
```","The generated query calculates the most ordered product based on the total quantity ordered ('SUM(od.Quantity)'), while the ground truth query determines it based on the number of orders ('COUNT([Order Details].OrderID)'). These are different metrics and may yield different results.","SELECT od.ProductID, COUNT(*) AS OrderCount FROM [Order Details] od GROUP BY od.ProductID ORDER BY OrderCount DESC LIMIT 1;","The generated query returns ProductID while the ground truth query returns ProductName, which better answers the user's question.",None
What is the total discount provided by each employee?,"SELECT e.EmployeeID, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","```sql
SELECT employees.EmployeeID, 
       employees.FirstName, 
       employees.LastName, 
       SUM([Order Details].Discount * [Order Details].UnitPrice * [Order Details].Quantity) AS TotalDiscount
FROM employees
JOIN orders ON employees.EmployeeID = orders.EmployeeID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName;
```","Both queries calculate the total discount per employee by joining employees, orders, and order details tables. The main difference is the inclusion of employee names in the generated query, but this does not affect the total discount calculation.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;","Both queries calculate the total discount for each employee by summing the product of discount, quantity, and unit price from the Order Details table, joined through orders, and grouped by EmployeeID.",both
What is the average shipping cost per order for the last month?,"SELECT AVG(Freight) FROM orders WHERE OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE);","```sql
SELECT AVG(Freight) AS Average_Shipping_Cost 
FROM orders 
WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' 
AND OrderDate < DATE_TRUNC('month', CURRENT_DATE);
```",The generated query filters orders from the entire previous month only. The ground truth query retrieves orders from a date exactly one month ago up to the current date.,"SELECT AVG(Freight) AS avg_shipping_cost FROM orders WHERE OrderDate >= DATE_TRUNC('month', NOW()) - INTERVAL '1 month' AND OrderDate < DATE_TRUNC('month', NOW())","The generated query incorrectly includes the entire current month's data by using DATE_TRUNC('month', NOW()) for both the start and end boundaries. The ground truth query uses DATEADD(MONTH, -1, CURRENT_DATE) to correctly capture the last month's data.",None
What is the total sales revenue for each category?,"SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName;","```sql
SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSalesRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.CategoryID;
```","The generated query groups by CategoryID instead of CategoryName, which means it may not provide a human-readable category title.","SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID;","The generated query groups by CategoryID without joining the categories table, so it lacks the category names and may not correctly compute totals if CategoryID is not directly available in the result set.",None
Which customers placed orders in January that were shipped by a specific shipping method?,SELECT DISTINCT customers.CompanyName FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE EXTRACT(MONTH FROM orders.OrderDate) = 1 AND orders.ShipVia = 1;,"```sql
SELECT DISTINCT customers.CustomerID, customers.CompanyName, customers.ContactName
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' 
AND orders.ShipVia = specific_shipping_method;
```",The generated query selects CustomerID and ContactName which are not in the ground truth. The specific_shipping_method placeholder is not equivalent to the number 1 in the ground truth query.,SELECT DISTINCT customers.CustomerID FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE MONTH(orders.OrderDate) = 1 AND orders.ShipVia = specific_shipping_method;,"The generated query uses 'CustomerID' while the ground truth query uses 'CompanyName'. Also, the generated query uses 'specific_shipping_method', whereas the ground truth uses a fixed value '1'.",None
Calculate the total potential revenue for products in stock.,SELECT SUM(products.UnitPrice * products.UnitsInStock) AS TotalPotentialRevenue FROM products WHERE products.Discontinued = 0;,"```sql
SELECT SUM(products.UnitsInStock * products.UnitPrice) AS TotalPotentialRevenue
FROM products
WHERE products.Discontinued = 0;
```",The generated SQL query accurately answers the user's question and yields the same results as the ground truth query. Both queries calculate the total potential revenue for products in stock by multiplying 'UnitPrice' by 'UnitsInStock' and summing the result for products that are not discontinued.,SELECT SUM(UnitPrice * UnitsInStock) AS PotentialRevenue FROM products;,"The generated query does not exclude discontinued products, while the ground truth query does.",Base
How many returning customers were there in 2023?,SELECT COUNT(DISTINCT o1.CustomerID) AS returning_customers FROM orders o1 WHERE o1.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND o1.CustomerID IN (SELECT DISTINCT o2.CustomerID FROM orders o2 WHERE o2.OrderDate < '2023-01-01'),"```sql
SELECT COUNT(DISTINCT orders.CustomerID) AS returning_customers
FROM orders
WHERE orders.CustomerID IN (
    SELECT DISTINCT CustomerID
    FROM orders
    WHERE OrderDate < '2023-01-01'
) AND OrderDate BETWEEN '2023-01-01' AND '2023-12-31';
```","Both queries count distinct customers who made purchases before 2023 and in 2023, yielding the same results.",SELECT COUNT(DISTINCT orders.CustomerID) AS returning_customers FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND orders.CustomerID IN (SELECT o.CustomerID FROM orders o WHERE o.OrderDate < '2023-01-01'),Both queries count distinct CustomerIDs who made a purchase before 2023 and again during 2023.,both
Which employee has generated the highest total sales?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 1;
```","The generated query selects employee names, while the ground truth query selects EmployeeID. The grouping and ordering logic are the same.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1","The generated SQL query accurately answers the user's question and is functionally equivalent to the ground truth query. Both queries select the employee with the highest total sales by computing the sum of the sales values and ordering the results in descending order, limiting the result to the top record.",FT
Calculate the Customer Lifetime Value for each customer.,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID","```sql
SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN customers ON orders.CustomerID = customers.CustomerID 
GROUP BY customers.CustomerID
```",The generated SQL query calculates Customer Lifetime Value per customer correctly and matches the ground truth SQL in logic and expected result.,"SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerLifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;","Both queries calculate the Customer Lifetime Value by summing the total revenue from order details for each customer, grouped by CustomerID. The structure of the queries is different, but they achieve the same result.",both
What is the average lead time for each supplier's deliveries?,"SELECT s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.CompanyName;","```sql
SELECT 
    suppliers.SupplierID, 
    suppliers.CompanyName, 
    AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime
FROM 
    suppliers
JOIN 
    products ON suppliers.SupplierID = products.SupplierID
JOIN 
    [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN 
    orders ON [Order Details].OrderID = orders.OrderID
GROUP BY 
    suppliers.SupplierID, suppliers.CompanyName;
```","Both queries calculate the average lead time for each supplier using the difference between the shipped and order dates. They join the same tables and use essentially the same logic, only differing in grouping by SupplierID and name compared to just name, which does not affect the correctness for calculating average lead time per supplier.","SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN orders ON products.ProductID = [Order Details].ProductID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY suppliers.CompanyName;","Both queries perform the same joins, aggregate the same data, and calculate the average lead time per supplier, resulting in equivalent outcomes.",both
What is the total discount given per month in 2023?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE YEAR(OrderDate) = 2023 GROUP BY Month;","```sql
SELECT 
    YEAR(orders.OrderDate) AS Year, 
    MONTH(orders.OrderDate) AS Month, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS Total_Discount
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE 
    YEAR(orders.OrderDate) = 2023
GROUP BY 
    YEAR(orders.OrderDate), MONTH(orders.OrderDate)
ORDER BY 
    Year, Month;
```",Both queries calculate the total discount per month for the year 2023 by joining the 'orders' and 'Order Details' tables and grouping the results by month.,"SELECT EXTRACT(MONTH FROM orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY EXTRACT(MONTH FROM orders.OrderDate);",Both queries calculate the total discount per month for the year 2023 by joining the 'orders' and '[Order Details]' tables and grouping by month. They use different methods for date extraction but achieve the same result.,both
What is the product with the highest inventory turnover ratio?,"SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) DESC LIMIT 1;","```sql
SELECT p.ProductID, p.ProductName, 
       SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY InventoryTurnoverRatio DESC
LIMIT 1;
```","The generated query does not handle division by zero with NULLIF, which can lead to incorrect results if AVG(p.UnitsInStock) is zero. Both queries aim to find the product with the highest inventory turnover ratio, but the ground truth query ensures safe division using NULLIF.","SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) DESC LIMIT 1;",Both queries are identical and calculate the inventory turnover ratio in the same way.,FT
How many units of each product are on order?,"SELECT ProductID, ProductName, UnitsOnOrder FROM products WHERE UnitsOnOrder > 0;","```sql
SELECT products.ProductID, products.ProductName, products.UnitsOnOrder
FROM products;
```","The generated query gets all products without filtering, whereas the ground truth only includes products with UnitsOnOrder greater than 0.","SELECT ProductID, ProductName, UnitsOnOrder FROM products WHERE UnitsOnOrder > 0;","The generated SQL query is identical to the ground truth query, both selecting ProductID, ProductName, and UnitsOnOrder from products where UnitsOnOrder is greater than zero.",FT
How many orders were fulfilled on time this month?,SELECT COUNT(orders.OrderID) AS on_time_orders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND MONTH(orders.ShippedDate) = MONTH(CURRENT_DATE) AND YEAR(orders.ShippedDate) = YEAR(CURRENT_DATE),"```sql
SELECT COUNT(OrderID) AS on_time_orders 
FROM orders 
WHERE ShippedDate <= RequiredDate 
AND MONTH(OrderDate) = MONTH(CURRENT_DATE()) 
AND YEAR(OrderDate) = YEAR(CURRENT_DATE());
```","The generated query filters orders by the OrderDate, while the ground truth query filters by the ShippedDate, which more accurately tracks fulfillment.",SELECT COUNT(*) FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND YEAR(orders.ShippedDate) = YEAR(CURRENT_DATE) AND MONTH(orders.ShippedDate) = MONTH(CURRENT_DATE);,Both queries count orders whose ShippedDate is on or before RequiredDate for the current month and year. They yield the same results despite using different COUNT syntax.,FT
What is the trend in the number of orders over time?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY Month ORDER BY Month;","```sql
SELECT DATE_TRUNC('month', OrderDate) AS OrderMonth, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY OrderMonth
ORDER BY OrderMonth;
```",Both queries retrieve the number of orders per month and order the results by month. The differences in alias names do not affect the outcome.,"SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS NumOrders FROM orders GROUP BY Month ORDER BY Month;","Both queries group orders by month and count the number of orders, providing the same trend analysis.",both
Find products with a sales decline over the past three months.,"SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IN (SELECT OrderID FROM orders WHERE OrderDate BETWEEN DATEADD(MONTH, -3, CURRENT_DATE) AND CURRENT_DATE) GROUP BY p.ProductID, p.ProductName HAVING SUM(CASE WHEN OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) THEN od.Quantity ELSE 0 END) < SUM(CASE WHEN OrderDate < DATEADD(MONTH, -1, CURRENT_DATE) THEN od.Quantity ELSE 0 END) ORDER BY SUM(od.Quantity) DESC;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.OrderID IN (
    SELECT OrderID
    FROM Orders
    WHERE OrderDate >= DATEADD(MONTH, -3, GETDATE())
)
GROUP BY p.ProductID, p.ProductName
HAVING SUM(od.Quantity) < (
    SELECT SUM(od2.Quantity)
    FROM [Order Details] od2
    WHERE od2.ProductID = p.ProductID
    AND od2.OrderID IN (
        SELECT OrderID
        FROM Orders
        WHERE OrderDate < DATEADD(MONTH, -3, GETDATE())
    )
)
```","The generated query compares total sales in the last three months with earlier sales, not distinguishing between recent months for decline identification like the ground truth query does.","SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE DATE_SUB(CURDATE(), INTERVAL 3 MONTH) > (SELECT MAX(od2.OrderID) FROM [Order Details] od2 WHERE od2.ProductID = p.ProductID) AND od.OrderID BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE() GROUP BY p.ProductID, p.ProductName HAVING SUM(CASE WHEN od.OrderID BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE()) < SUM(CASE WHEN od.OrderID < DATE_SUB(CURDATE(), INTERVAL 1 MONTH));","The generated query uses OrderID for date comparisons, which does not ensure accurate date filtering. Also, it incorrectly uses SUM(CASE) without defining ELSE statement for sales decline logic. The ground truth query correctly uses OrderDate and calculates quantities for accurate comparison.",None
What is the average time taken to fulfill orders each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month ORDER BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM 
    orders
GROUP BY 
    Month
ORDER BY 
    Month;
```","The DATE_FORMAT function is not ANSI SQL and might not work with all databases. DATE_TRUNC('month', ...) is more standard for grouping by month.","SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Year, Month;","Both queries correctly calculate the average time taken to fulfill orders per month, but use different methods for grouping. The generated query extracts year and month separately, while the ground truth truncates to month. Both yield the same logical result.",FT
What percentage of orders were placed by returning customers?,"SELECT COUNT(DISTINCT o.CustomerID) * 100.0 / (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR)) AS ReturningCustomerPercentage FROM orders o WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) AND o.CustomerID IN (SELECT CustomerID FROM orders WHERE OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR));","```sql
SELECT 
    (COUNT(DISTINCT o.CustomerID) FILTER (WHERE o.CustomerID IN (SELECT CustomerID FROM orders WHERE OrderDate < 'start_date')) * 100.0 / COUNT(DISTINCT o.CustomerID)) AS ReturningCustomerPercentage
FROM 
    orders o;
```",The generated query does not account for a specific time frame and incorrectly assumes 'start_date' is predefined. The ground truth checks orders within the current year and only considers returning customers from the previous year.,SELECT COUNT(DISTINCT o1.CustomerID) * 100.0 / (SELECT COUNT(DISTINCT o2.CustomerID) FROM orders o2) AS returning_percentage FROM orders o1 WHERE o1.CustomerID IN (SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 1);,"The generated query calculates the percentage of customers who placed more than one order overall, whereas the ground truth query calculates the percentage of returning customers based on orders from the current year compared to those who ordered in the previous year.",None
How much revenue did each region generate?,"SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Revenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion;","```sql
SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY ShipRegion;
```","Both queries calculate total revenue per region using the same logic and aggregation, despite minor differences in alias naming.","SELECT c.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Region;","The generated SQL query calculates revenue based on the 'Region' field from the 'customers' table, whereas the ground truth query calculates it using the 'ShipRegion' from the 'orders' table. If 'Region' and 'ShipRegion' are not equivalent, the results will differ.",Base
Which employee has the highest total sales so far this year?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE)
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 1;
```","The generated query selects FirstName and LastName, while the ground truth selects EmployeeID. This could lead to a mismatch if employees share the same name.","SELECT e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","The generated query selects employee first and last names, whereas the ground truth query selects the EmployeeID. The result format is different, although the logic for calculating total sales is the same.",None
What are the top 3 employees by sales amount?,"SELECT EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SalesAmount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EmployeeID ORDER BY SalesAmount DESC LIMIT 3","```sql
SELECT orders.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY orders.EmployeeID
ORDER BY TotalSales DESC
LIMIT 3;
```","The generated SQL uses 'LIMIT 3', which is not standardized across all SQL dialects and may not be supported. Additionally, there may be ambiguities regarding column aliases depending on the SQL engine.","SELECT e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 3;","The generated query selects FirstName and LastName, while the ground truth only uses EmployeeID. Both calculate total sales correctly, but the columns in the SELECT clause differ.",None
Which employee had the highest sales last month?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1' month) 
  AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE)
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries calculate total sales for each employee from orders in the previous month and return the employee with the highest total. The date filtering methods are equivalent, capturing the same date range.","SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE EXTRACT(month FROM orders.OrderDate) = EXTRACT(month FROM CURRENT_DATE - INTERVAL '1 month') AND EXTRACT(year FROM orders.OrderDate) = EXTRACT(year FROM CURRENT_DATE - INTERVAL '1 month') GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","Both queries calculate total sales for each employee last month and return the employee with the highest sales. The difference in syntax, such as EXTRACT vs. MONTH/YEAR, does not affect the result.",both
What is the shipping cost per order for each shipping method?,"SELECT ShipVia, AVG(Freight) AS avg_shipping_cost FROM orders GROUP BY ShipVia","```sql
SELECT ShipVia, AVG(Freight) AS shipping_cost_per_order
FROM orders
GROUP BY ShipVia
```",Both queries calculate the average freight cost per shipping method and group the results by ShipVia. The difference is only in the alias used for the average cost.,"SELECT ShipVia, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY ShipVia;","Both queries group the table by the 'ShipVia' column and calculate the average 'Freight', which represents the shipping cost per order for each shipping method.",both
What are the products with below-average sales but above-average stock levels?,SELECT ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName HAVING SUM(Quantity) < (SELECT AVG(total_quantity) FROM (SELECT SUM(Quantity) AS total_quantity FROM [Order Details] GROUP BY ProductID) AS subquery) AND AVG(products.UnitsInStock) > (SELECT AVG(UnitsInStock) FROM products),"```sql
WITH Sales AS (
    SELECT 
        p.ProductID, 
        SUM(od.Quantity) AS TotalSales
    FROM 
        products p
    LEFT JOIN 
        [Order Details] od ON p.ProductID = od.ProductID
    GROUP BY 
        p.ProductID
),
AverageSales AS (
    SELECT 
        AVG(TotalSales) AS AvgSales
    FROM 
        Sales
),
StockLevels AS (
    SELECT 
        ProductID, 
        UnitsInStock
    FROM 
        products
)
SELECT 
    s.ProductID
FROM 
    Sales s
JOIN 
    AverageSales avg ON s.TotalSales < avg.AvgSales
JOIN 
    StockLevels sl ON s.ProductID = sl.ProductID
WHERE 
    sl.UnitsInStock > (SELECT AVG(UnitsInStock) FROM products);
```","The generated query calculates average sales correctly but does not filter or return the product names. Additionally, it manages stock levels differently and assumes 'UnitsInStock' average across the entire table, missing the per-product check in the ground truth query.",SELECT ProductName FROM products WHERE UnitsInStock > (SELECT AVG(UnitsInStock) FROM products) AND UnitsOnOrder < (SELECT AVG(UnitsOnOrder) FROM products);,"The generated query checks for products with below-average units on order and above-average units in stock, whereas the ground truth query checks for below-average sales (SUM of Quantity) and above-average units in stock.",None
Which product had the highest sales volume last quarter?,"SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE QUARTER(o.OrderDate) = QUARTER(CURDATE() - INTERVAL 3 MONTH) AND YEAR(o.OrderDate) = YEAR(CURDATE() - INTERVAL 3 MONTH) GROUP BY od.ProductID ORDER BY TotalQuantity DESC LIMIT 1;","```sql
SELECT [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalVolume
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE orders.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months'
AND orders.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE)
GROUP BY [Order Details].ProductID
ORDER BY TotalVolume DESC
LIMIT 1;
```","The generated query uses DATE_TRUNC and INTERVAL for date filtering, while the ground truth uses QUARTER and CURDATE to check the specific quarter and year. This could lead to different filtering results depending on how the system interprets quarters and dates at the time of execution.","SELECT od.ProductID, SUM(od.Quantity) AS product_sales_volume FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATEADD(month, -3, CURRENT_DATE) GROUP BY od.ProductID ORDER BY product_sales_volume DESC LIMIT 1;","The generated SQL query uses a rolling 3-month period, while the ground truth query checks for the specific last quarter. This can yield different results if the current date is not aligned with a quarterly boundary.",None
What are the total sales for each shipping country?,"SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry;","```sql
SELECT orders.ShipCountry, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY orders.ShipCountry;
```","Both queries calculate the total sales for each shipping country by joining the orders and [Order Details] tables and summing the product of UnitPrice, Quantity, and discount adjustment. The minor difference in syntax does not affect the logic or the result.","SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry","Both queries correctly calculate the total sales for each shipping country by joining the orders and order details tables, and the syntax difference in alias naming does not affect the result.",both
What is the rate of orders with a fulfillment time under 5 days?,"SELECT (CAST(COUNT(CASE WHEN DATEDIFF(ShippedDate, OrderDate) < 5 THEN OrderID END) AS FLOAT) / COUNT(OrderID)) * 100 AS QuickFulfillmentRate FROM orders;","```sql
SELECT 
    COUNT(OrderID) * 1.0 / (SELECT COUNT(OrderID) FROM orders) AS Fulfillment_Rate
FROM 
    orders
WHERE 
    DATEDIFF(ShippedDate, OrderDate) < 5;
```","Both queries calculate the rate of orders with a fulfillment time under 5 days by dividing the count of such orders by the total count of orders, yielding the same result.","SELECT COUNT(OrderID) * 100.0 / (SELECT COUNT(OrderID) FROM orders) AS FastFulfillmentRate FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) < 5;",Both queries calculate the percentage of orders with a fulfillment time under 5 days by dividing the count of such orders by the total count of orders.,both
Who are the top 5 sales employees based on total sales?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 5;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY TotalSales DESC
LIMIT 5;
```","Both queries correctly calculate the total sales per employee and order them in descending order to identify the top 5 employees. The inclusion of first and last names in the generated query does not affect the ranking of the employees based on total sales, so it yields the same results.","SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 5;",The keyword LIMIT is not valid in standard SQL; it should be replaced with FETCH FIRST 5 ROWS ONLY for ANSI compliance.,Base
What is the average age of employees?,"SELECT AVG(TIMESTAMPDIFF(YEAR, BirthDate, CURDATE())) AS AvgAge FROM employees;","```sql
SELECT AVG(YEAR(CURDATE()) - YEAR(BirthDate)) AS AverageAge FROM employees;
```","Both queries aim to calculate the average age of employees using the difference between the current date and the BirthDate. They effectively yield the same result, though through slightly different methods.","SELECT AVG(TIMESTAMPDIFF(YEAR, BirthDate, CURDATE())) AS AvgAge FROM employees;",Both queries are identical and accurately calculate the average age of employees.,both
How many orders have been shipped late?,SELECT COUNT(*) FROM orders WHERE orders.ShippedDate > orders.RequiredDate;,"```sql
SELECT COUNT(*) AS LateOrdersCount
FROM orders
WHERE ShippedDate > RequiredDate;
```","Both queries count the number of orders where the ShippedDate is later than the RequiredDate, fulfilling the user's request to find orders shipped late.",SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate;,Both queries count the number of orders where the ShippedDate is later than the RequiredDate. The column referenced in the COUNT function does not affect the result.,both
Which products have the highest average monthly sales growth?,"SELECT ProductID, (SUM([Order Details].Quantity) / COUNT(DISTINCT EXTRACT(YEAR_MONTH FROM order_date))) AS AvgMonthlySalesGrowth FROM [Order Details] GROUP BY ProductID ORDER BY AvgMonthlySalesGrowth DESC;","```sql
SELECT p.ProductID, p.ProductName, AVG(monthly_sales.sales) AS avg_monthly_sales
FROM (
    SELECT od.ProductID, 
           DATEPART(YEAR, o.OrderDate) AS sales_year,
           DATEPART(MONTH, o.OrderDate) AS sales_month,
           SUM(od.Quantity) AS sales
    FROM [Order Details] od
    JOIN orders o ON od.OrderID = o.OrderID
    GROUP BY od.ProductID, DATEPART(YEAR, o.OrderDate), DATEPART(MONTH, o.OrderDate)
) AS monthly_sales
JOIN products p ON monthly_sales.ProductID = p.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY avg_monthly_sales DESC;
```","The generated query calculates average monthly sales per product, but it does not specifically compute sales growth. The ground truth query calculates average monthly sales growth by dividing total quantity by the number of distinct months, which better addresses the user's question about sales growth.","SELECT p.ProductID, p.ProductName, AVG((od.Quantity - LAG(od.Quantity) OVER (PARTITION BY od.ProductID ORDER BY od.OrderDate)) / LAG(od.Quantity) OVER (PARTITION BY od.ProductID ORDER BY od.OrderDate) * 100) AS AvgMonthlyGrowth FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY AvgMonthlyGrowth DESC;","The generated query calculates the average monthly growth based on differences with previous months using LAG, while the ground truth computes average sales per month without considering month-to-month changes directly.",None
Identify the month with the highest sales volume.,"SELECT EXTRACT(YEAR FROM orders.order_date) AS Year, EXTRACT(MONTH FROM orders.order_date) AS Month, SUM([Order Details].Quantity) AS TotalSalesVolume FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Year, Month ORDER BY TotalSalesVolume DESC LIMIT 1;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS SaleMonth,
    SUM(Quantity) AS TotalSales
FROM 
    [Order Details]
JOIN 
    Orders ON [Order Details].OrderID = Orders.OrderID
GROUP BY 
    SaleMonth
ORDER BY 
    TotalSales DESC
LIMIT 1;
```","Both queries aim to find the month with the highest sales volume by summing the quantity of items sold, using correct sorting and limiting techniques.","SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month ORDER BY MonthlySales DESC LIMIT 1;","The generated query calculates monthly sales by revenue, not volume, while the ground truth query calculates it by total sales volume (sum of quantity).",Base
Which employees have not processed any orders?,SELECT employees.EmployeeID FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderID IS NULL;,"```sql
SELECT EmployeeID, FirstName, LastName
FROM employees
WHERE EmployeeID NOT IN (SELECT DISTINCT EmployeeID FROM orders);
```","The generated query incorrectly assumes all EmployeeIDs are in the orders table, while the ground truth correctly identifies employees with no orders using a LEFT JOIN and checking for NULL OrderID.","SELECT e.FirstName, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL;",The generated query selects first and last names while the ground truth query selects employee IDs.,None
How many orders have been delivered on time?,SELECT COUNT(OrderID) FROM orders WHERE ShippedDate <= RequiredDate;,"```sql
SELECT COUNT(OrderID) AS OnTimeDeliveries
FROM orders
WHERE ShippedDate <= RequiredDate;
```","Both queries count the number of orders where the ShippedDate is on or before the RequiredDate, indicating on-time deliveries. The difference is only in the alias used for the count.",SELECT COUNT(OrderID) FROM orders WHERE ShippedDate <= RequiredDate;,"Both queries use the same logic to count orders where ShippedDate is less than or equal to RequiredDate, thus yielding the same result.",both
Find products with the highest unit price and lowest quantity in stock.,"SELECT ProductID, ProductName FROM products WHERE UnitsInStock = (SELECT MIN(UnitsInStock) FROM products) ORDER BY UnitPrice DESC LIMIT 1;","```sql
SELECT ProductID, ProductName, UnitPrice, UnitsInStock
FROM products
ORDER BY UnitPrice DESC, UnitsInStock ASC
LIMIT 1;
```","The generated query returns the product with the highest price first, prioritizing the price over stock, while the ground truth query finds the product with the lowest stock first and then orders by price.",SELECT ProductName FROM products WHERE UnitsInStock = (SELECT MIN(UnitsInStock) FROM products) ORDER BY UnitPrice DESC LIMIT 1;,"The generated query and ground truth query would yield different results because the generated query selects only 'ProductName', whereas the ground truth query selects both 'ProductID' and 'ProductName'. This leads to different outputs when executed.",None
How many unique customers placed orders each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    COUNT(DISTINCT CustomerID) AS UniqueCustomers
FROM 
    orders
GROUP BY 
    Month
ORDER BY 
    Month;
```",Both queries calculate the number of unique customers per month by grouping by month and counting distinct CustomerIDs. DATE_FORMAT and DATE_TRUNC are different functions but serve the same purpose in this context.,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders GROUP BY Month;","Both queries count distinct customers per month, though they use different date functions (DATE_FORMAT vs. DATE_TRUNC), they achieve the same result.",both
What percentage of orders are completed without any discount?,"SELECT COUNT(DISTINCT OrderID) * 1.0 / NULLIF((SELECT COUNT(DISTINCT OrderID) FROM [Order Details]), 0) AS NoDiscountRate FROM [Order Details] WHERE Discount = 0;","```sql
SELECT 
    (COUNT(*) FILTER (WHERE Discount = 0) * 100.0 / COUNT(*)) AS PercentageWithoutDiscount
FROM 
    ""[Order Details]"";
```","The generated query calculates the percentage of line items with no discount, not the percentage of orders with no discount.",SELECT (COUNT(OrderID) - COUNT(CASE WHEN Discount > 0 THEN OrderID END)) * 100.0 / COUNT(OrderID) AS NoDiscountPercentage FROM [Order Details];,"The generated query calculates the percentage of line items without discount, not orders. The ground truth considers distinct orders without discount.",None
Which supplier has the shortest average lead time?,"SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC LIMIT 1","```sql
SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_lead_time 
FROM orders 
JOIN products ON orders.OrderID = products.ProductID 
GROUP BY products.SupplierID 
ORDER BY average_lead_time ASC 
LIMIT 1;
```","The generated query joins orders and products directly on OrderID, which is incorrect. It should join through 'Order Details' to match orders with products correctly. The generated query might result in an invalid or empty result or incorrect mappings.","SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN orders ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY AvgLeadTime ASC LIMIT 1;","The generated query uses suppliers.CompanyName in the SELECT clause, while the ground truth uses suppliers.SupplierID. This could lead to different results if multiple suppliers have the same company name. Additionally, the joins are in different orders but should not affect the result if the database schema ensures consistency.",None
Identify suppliers with more than five discontinued products.,SELECT s.SupplierID FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.Discontinued = 1 GROUP BY s.SupplierID HAVING COUNT(p.ProductID) > 5;,"```sql
SELECT SupplierID
FROM products
WHERE Discontinued = 1
GROUP BY SupplierID
HAVING COUNT(ProductID) > 5;
```",Both queries identify suppliers with more than five discontinued products. They yield the same results as the JOIN is unnecessary if SupplierID is directly available in the 'products' table.,"SELECT suppliers.CompanyName, COUNT(*) AS DiscontinuedCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.Discontinued = 1 GROUP BY suppliers.SupplierID HAVING COUNT(*) > 5;","The generated query selects CompanyName, while the ground truth query selects SupplierID. Both queries group suppliers by their ID and count discontinued products correctly, but they don't yield identical results as the selected columns differ.",Base
Identify cities with the highest average order fulfillment time.,"SELECT ShipCity, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipCity ORDER BY AvgFulfillmentTime DESC;","```sql
SELECT ShipCity, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY ShipCity
ORDER BY AverageFulfillmentTime DESC;
```","The generated SQL query and the ground truth query are functionally equivalent. Both queries calculate the average order fulfillment time for each city and order the results in descending order of the average time. The only difference is the alias name used for the average, which does not affect the result.","SELECT ShipCity, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipCity ORDER BY AvgFulfillmentTime DESC;",The generated SQL query is identical to the ground truth query and accurately answers the user's question.,both
What is the average freight cost for orders shipped in December?,SELECT AVG(Freight) AS AverageFreightCost FROM orders WHERE EXTRACT(MONTH FROM ShippedDate) = 12,"```sql
SELECT AVG(Freight) AS AverageFreightCost
FROM orders
WHERE MONTH(OrderDate) = 12;
```","The generated query filters by OrderDate instead of ShippedDate, which may lead to different results as they are not necessarily the same date.",SELECT AVG(Freight) AS AverageFreight FROM orders WHERE EXTRACT(MONTH FROM ShippedDate) = 12;,"Both queries calculate the average freight for orders shipped in December. The only difference is the alias name, which does not affect the result.",FT
What is the total revenue generated from orders in the last month?,"SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE);","```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Total_Sales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE orders.OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') 
AND orders.OrderDate < DATE_TRUNC('month', CURRENT_DATE);
```","Both queries calculate the total revenue from last month's orders by summing the product of UnitPrice, Quantity, and the discount factor from the Order Details table, joined with the Orders table. They use the same date range to filter the orders.",SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LastMonthRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH);,The generated SQL query incorrectly identifies the previous month using a function that may not account for the specific logic of date truncation. The ground truth SQL query uses a date range to ensure accuracy by defining the start and end of the last month.,Base
What is the inventory turnover ratio for the electronics category in 2023?,SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID JOIN orders o ON od.OrderID = o.OrderID WHERE c.CategoryName = 'Electronics' AND YEAR(o.OrderDate) = 2023,"```sql
SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio 
FROM [Order Details] 
JOIN products ON [Order Details].ProductID = products.ProductID 
JOIN categories ON products.CategoryID = categories.CategoryID 
WHERE categories.CategoryName = 'Electronics' AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
```","The generated query does not join the 'orders' table, which is needed to filter 'OrderDate' for the year 2023.",SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS electronics_turnover_ratio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.CategoryID = (SELECT DISTINCT CategoryID FROM products WHERE CategoryName = 'Electronics') AND od.OrderID IN (SELECT DISTINCT OrderID FROM orders WHERE YEAR(OrderDate) = 2023),"The generated query does not correctly join categories to ensure we are filtering by 'Electronics' but relies on a subquery which may not ensure the correct category. It also does not handle orders as a separate join, leading to an indirect filtering of order dates. The ground truth query uses explicit joins for categories and orders, ensuring only the electronics category and correct date range are considered.",None
What are the top 5 countries in terms of supplier presence?,"SELECT Country, COUNT(DISTINCT SupplierID) AS SupplierCount FROM suppliers GROUP BY Country ORDER BY SupplierCount DESC LIMIT 5;","```sql
SELECT Country, COUNT(SupplierID) AS SupplierCount
FROM suppliers
GROUP BY Country
ORDER BY SupplierCount DESC
LIMIT 5;
```","Both queries count SupplierID per country and list the top 5 countries, assuming SupplierID is unique per entry, making the queries functionally equivalent.","SELECT Country, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY Country ORDER BY SupplierCount DESC LIMIT 5;","Both queries will yield the same result as SupplierID is unique in the context of counting suppliers, making DISTINCT redundant.",both
Which categories have the highest number of discontinued products?,"SELECT CategoryID, COUNT(*) AS DiscontinuedCount FROM products WHERE Discontinued = 1 GROUP BY CategoryID ORDER BY DiscontinuedCount DESC;","```sql
SELECT CategoryID, COUNT(ProductID) AS DiscontinuedCount
FROM products
WHERE Discontinued = 1
GROUP BY CategoryID
ORDER BY DiscontinuedCount DESC;
```","Both queries count the discontinued products per category and order by the count in descending order. The use of COUNT(ProductID) vs COUNT(*) does not affect the result, assuming ProductID is never NULL.","SELECT c.CategoryID, c.CategoryName, COUNT(*) AS DiscontinuedCount FROM categories c JOIN products p ON c.CategoryID = p.CategoryID WHERE p.Discontinued = 1 GROUP BY c.CategoryID, c.CategoryName ORDER BY DiscontinuedCount DESC LIMIT 1;","The generated query includes category names and limits the result to one category, whereas the ground truth query lists all categories with discontinued products, missing names.",Base
Which product has generated the highest revenue?,"SELECT ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] GROUP BY ProductID ORDER BY TotalRevenue DESC LIMIT 1;","```sql
SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM [Order Details] od
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY od.ProductID
ORDER BY TotalRevenue DESC
LIMIT 1;
```",Both queries calculate total revenue per product using the same formula and return the product with the highest total revenue. The difference in syntax does not affect the final result as the join to the orders table is unnecessary.,"SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 1;",'LIMIT 1' is not ANSI SQL standard; the correct ANSI standard should use 'FETCH FIRST 1 ROWS ONLY'.,Base
Which product generated the highest revenue last quarter?,"SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE QUARTER(o.OrderDate) = QUARTER(CURRENT_DATE) - 1 AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY od.ProductID ORDER BY Revenue DESC LIMIT 1","```sql
SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= DATEADD(QUARTER, -1, GETDATE()) AND o.OrderDate < GETDATE()
GROUP BY od.ProductID
ORDER BY TotalRevenue DESC
LIMIT 1;
```","The generated query uses DATEADD to calculate the last quarter from the current date, which might not correspond to the last complete quarter. The ground truth query calculates the previous quarter based on the current quarter and year, which is more accurate.","SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductRevenue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE QUARTER(o.OrderDate) = QUARTER(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER)) AND YEAR(o.OrderDate) = YEAR(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER)) GROUP BY od.ProductID ORDER BY ProductRevenue DESC LIMIT 1;","The generated query uses `DATE_SUB(CURDATE(), INTERVAL 1 QUARTER)` which might not align with `QUARTER(CURRENT_DATE) - 1` for correct quarter calculation.",None
Which product categories generate the most revenue?,"SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS Revenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID ORDER BY Revenue DESC;","```sql
SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) AS Revenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.CategoryID
ORDER BY Revenue DESC;
```","The generated SQL query does not account for the discount on order details. The ground truth query includes a discount factor (1 - od.Discount) in the revenue calculation, which the generated query is missing.","SELECT c.CategoryName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryName ORDER BY TotalRevenue DESC;","The generated query selects CategoryName, while the ground truth query groups by CategoryID which could lead to different results if multiple CategoryIDs have the same CategoryName.",None
What is the monthly sales performance for each product?,"SELECT ProductName, SUM([Order Details].Quantity) AS MonthlySales, EXTRACT(MONTH FROM OrderDate) AS Month FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ProductName, Month ORDER BY ProductName, Month;","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    SUM(od.Quantity) AS TotalSales 
FROM 
    products p 
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID 
GROUP BY 
    p.ProductID, 
    p.ProductName 
ORDER BY 
    p.ProductID;
```","The generated SQL does not include a date component to group sales by month, which is present in the ground truth query using EXTRACT(MONTH FROM OrderDate). Also, the generated SQL does not join with the 'orders' table to access 'OrderDate'.","SELECT p.ProductName, EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS MonthlySalesPerformance FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, Year, Month;","The generated query calculates monthly sales performance using total sales value, while the ground truth query sums quantity only.",None
How does the sales quantity for a product change each month?,"SELECT P.ProductID, EXTRACT(MONTH FROM O.OrderDate) AS Month, SUM(OD.Quantity) AS MonthlyQuantity FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID JOIN orders O ON OD.OrderID = O.OrderID GROUP BY P.ProductID, EXTRACT(MONTH FROM O.OrderDate);","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    EXTRACT(YEAR FROM o.OrderDate) AS Year, 
    EXTRACT(MONTH FROM o.OrderDate) AS Month, 
    SUM(od.Quantity) AS SalesQuantity
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
JOIN 
    orders o ON od.OrderID = o.OrderID
GROUP BY 
    p.ProductID, 
    p.ProductName, 
    Year, 
    Month
ORDER BY 
    p.ProductID, 
    Year, 
    Month;
```","The generated query includes product name and extracts the year, while the ground truth query does not. The results can differ because the generated query groups by both year and month, which leads to different aggregation as compared to grouping solely by month.","SELECT p.ProductName, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS MonthlySales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, EXTRACT(MONTH FROM o.OrderDate);","The generated query groups by ProductName, while the ground truth query groups by ProductID. This could result in different groupings and potentially different outputs if multiple products have the same name.",None
Identify trends in product sales over the last year using monthly data.,"SELECT EXTRACT(MONTH FROM OrderDate) AS Month, ProductID, SUM(Quantity) AS TotalSold FROM [Order Details] WHERE OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY EXTRACT(MONTH FROM OrderDate), ProductID ORDER BY Month;","```sql
SELECT 
    DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month,
    p.ProductID,
    p.ProductName,
    SUM(od.Quantity) AS TotalSales
FROM 
    [Order Details] od
JOIN 
    orders o ON od.OrderID = o.OrderID
JOIN 
    products p ON od.ProductID = p.ProductID
WHERE 
    o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)
GROUP BY 
    Month, p.ProductID, p.ProductName
ORDER BY 
    Month, TotalSales DESC;
```","The generated query uses DATE_FORMAT to extract the month and includes ProductName, while the ground truth uses EXTRACT and does not include ProductName or sort by TotalSales.","SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS Month, products.ProductName, SUM([Order Details].Quantity) AS TotalSold FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM'), products.ProductName;","The generated query groups by month and product name using TO_CHAR to format the month, while the ground truth query extracts the month and groups by ProductID. Additionally, the generated query involves more joins to include product names, whereas the ground truth query operates on a single table. These differences may lead to dissimilar results if product names are not unique or if data is structured differently.",None
What is the growth rate of sales for each employee over the past year?,"SELECT e.EmployeeID, (SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) / NULLIF(SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END), 0) AS GrowthRate FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","```sql
SELECT e.EmployeeID, 
       e.FirstName, 
       e.LastName, 
       (SUM(CASE WHEN o.OrderDate >= DATEADD(month, -12, CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) -
       SUM(CASE WHEN o.OrderDate < DATEADD(month, -12, CURRENT_DATE) AND o.OrderDate >= DATEADD(month, -24, CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) / 
       NULLIF(SUM(CASE WHEN o.OrderDate < DATEADD(month, -12, CURRENT_DATE) AND o.OrderDate >= DATEADD(month, -24, CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END), 0) AS GrowthRate
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","The generated query uses the past 12 months for calculating growth rate, while the ground truth query uses the current and previous calendar year.","SELECT employees.EmployeeID, (SUM(CASE WHEN orders.OrderDate BETWEEN '2022-10-01' AND '2023-09-30' THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END) - SUM(CASE WHEN orders.OrderDate BETWEEN '2021-10-01' AND '2022-09-30' THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END)) / NULLIF(SUM(CASE WHEN orders.OrderDate BETWEEN '2021-10-01' AND '2022-09-30' THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END), 0) AS SalesGrowthRate FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;","The generated query uses a fixed date range, while the ground truth query dynamically uses the current date to calculate the sales for the current and previous year. This could yield different results depending on the current date.",None
Identify the orders shipped with discount greater than 10%.,SELECT OrderID FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE [Order Details].Discount > 0.10;,"```sql
SELECT * 
FROM orders 
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID 
WHERE [Order Details].Discount > 0.10;
```","The generated query returns all columns with a discount greater than 10%, whereas the ground truth query returns only the OrderID.",SELECT OrderID FROM [Order Details] WHERE Discount > 0.1;,"The generated query does not join with the orders table, which may be necessary to accurately identify shipped orders.",None
What is the monthly trend of order values for the top 3 customers by sales?,"SELECT customers.CustomerID, DATE_TRUNC('month', orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID, month ORDER BY order_value DESC LIMIT 3","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS order_month,
    customers.CustomerID,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
FROM 
    orders 
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID 
JOIN 
    customers ON orders.CustomerID = customers.CustomerID 
GROUP BY 
    order_month, customers.CustomerID 
ORDER BY 
    total_sales DESC 
LIMIT 3
```","The generated query limits to the top 3 results based on total_sales, but does not ensure these are the top 3 customers by sales over all time before showing the monthly trend.","SELECT c.CustomerID, EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlyOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE c.CustomerID IN (SELECT CustomerID FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY CustomerID ORDER BY SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) DESC LIMIT 3) GROUP BY c.CustomerID, Year, Month;","The generated query selects top 3 customers by sales first and then calculates the monthly trend, while the ground truth attempts to order the monthly values and limit results, potentially mixing the intended logic.",None
What is the total quantity ordered for discontinued products?,"SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1 GROUP BY p.ProductName;","```sql
SELECT SUM(od.Quantity) AS TotalQuantityOrdered
FROM [Order Details] od
JOIN products p ON od.ProductID = p.ProductID
WHERE p.Discontinued = 1;
```","Both queries calculate the total quantity ordered for discontinued products. The generated query sums the quantity directly, whereas the ground truth groups by product name and then sums the quantity. However, when aggregated over all products, they yield the same total result.",SELECT SUM(od.Quantity) FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 1;,"The generated query sums the total quantity for all discontinued products, but the ground truth query groups quantities by product name, giving a sum per product.",Base
How many distinct customers made a purchase in Q1 2023 versus Q2 2023?,"SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31') AS Q1_customers, (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30') AS Q2_customers","```sql
SELECT 
    COUNT(DISTINCT CustomerID) AS distinct_customers,
    'Q1 2023' AS quarter
FROM 
    orders
WHERE 
    OrderDate BETWEEN '2023-01-01' AND '2023-03-31'
UNION ALL
SELECT 
    COUNT(DISTINCT CustomerID) AS distinct_customers,
    'Q2 2023' AS quarter
FROM 
    orders
WHERE 
    OrderDate BETWEEN '2023-04-01' AND '2023-06-30';
```","Both queries accurately count the number of distinct customers for Q1 and Q2 of 2023 using similar conditions. The generated query uses UNION ALL to combine results for each quarter, while the ground truth query uses subqueries for each quarter. They both achieve the same outcome.",SELECT COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30' THEN orders.CustomerID END) AS customers_q1_q2 FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30' GROUP BY customers_q1_q2,"The generated query counts distinct customers for Q1 and Q2 combined, while the ground truth query separately counts distinct customers for Q1 and Q2.",Base
What is the average shipping time for orders shipped to each region?,"SELECT ShipRegion, AVG(DATE_PART('day', ShippedDate - OrderDate)) AS AvgShipTime FROM orders GROUP BY ShipRegion;","```sql
SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime
FROM orders
GROUP BY ShipRegion;
```","Both queries calculate the average shipping time by subtracting OrderDate from ShippedDate and grouping by ShipRegion. The difference is in the function used to calculate date difference, but they yield the same result.","SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipRegion;","Both queries calculate the average shipping time by taking the difference between ShippedDate and OrderDate, grouped by ShipRegion. They use slightly different functions for date difference, but the logic and results are the same.",both
What is the total discount given on all orders each month?,"SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS Total_Discount
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries calculate the total discount by multiplying the unit price, quantity, and discount for 'Order Details' rows, grouped by month derived from 'OrderDate'. The queries differ only in aliases and format but yield the same result.","SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_FORMAT(o.OrderDate, '%Y-%m');",Both queries correctly calculate the total discount given on all orders each month. The grouping method is different but equivalent.,both
What are the top five cities with the highest sales revenue?,"SELECT ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CitySales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCity ORDER BY CitySales DESC LIMIT 5;","```sql
SELECT ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY ShipCity
ORDER BY TotalSales DESC
LIMIT 5;
```","The generated SQL uses 'LIMIT 5', which is not standard in SQL ANSI but specific to databases like MySQL. SQL ANSI requires 'FETCH FIRST 5 ROWS ONLY' or similar constructs depending on the DBMS.","SELECT ShipCity, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCity ORDER BY TotalSales DESC LIMIT 5;",Both queries calculate the total sales for each city and sort the results to provide the top five cities with the highest sales revenue. The difference in alias naming does not affect the outcome.,FT
What is the average discount offered on products?,SELECT AVG(Discount) FROM [Order Details];,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details];
```","Both queries calculate the average discount from the 'Order Details' table, producing the same result.",SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];,"Both queries calculate the average discount from the 'Order Details' table, only differing in assigning an alias in the generated query.",both
What is the total number of products that are out of stock?,SELECT COUNT(*) FROM products WHERE UnitsInStock = 0,"```sql
SELECT COUNT(*) AS out_of_stock_count FROM products WHERE UnitsInStock = 0;
```","Both queries count the number of products with 'UnitsInStock' equal to 0, returning the same result.",SELECT COUNT(ProductID) FROM products WHERE UnitsInStock = 0;,"Both queries count the number of products where UnitsInStock equals 0, resulting in the same total count.",both
Which customer generated the most revenue last year?,"SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= '2022-01-01' AND o.OrderDate <= '2022-12-31' GROUP BY c.CustomerID ORDER BY TotalRevenue DESC LIMIT 1;","```sql
SELECT c.CustomerID, c.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'
GROUP BY c.CustomerID, c.CompanyName
ORDER BY TotalRevenue DESC
LIMIT 1;
```",Both queries calculate total revenue per customer for the specified year and return the customer with the highest revenue. The inclusion of CompanyName in the Generated SQL Query does not affect the correctness for identifying the customer ID with the most revenue.,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE YEAR(orders.OrderDate) = 2022 GROUP BY customers.CustomerID ORDER BY total_revenue DESC LIMIT 1","Both queries calculate total revenue per customer for the year 2022, grouping and ordering by revenue to find the top customer. While they differ in date filtering (YEAR function vs. date range), they effectively retrieve the same result.",both
How many distinct products have been sold?,SELECT COUNT(DISTINCT ProductID) FROM [Order Details];,"```sql
SELECT COUNT(DISTINCT ProductID) AS DistinctProductsSold
FROM [Order Details];
```",Both queries calculate the count of distinct products sold using the COUNT(DISTINCT ProductID) function from the Order Details table. The alias in the generated query does not affect the functionality or the result.,SELECT COUNT(DISTINCT ProductID) AS DistinctProducts FROM [Order Details];,"Both queries count distinct ProductIDs from the 'Order Details' table, effectively answering the user's question correctly.",both
What is the average time taken to fulfill orders per month?,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(DATE_DIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY month","```sql
SELECT YEAR(OrderDate) AS order_year, MONTH(OrderDate) AS order_month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS average_fulfillment_time
FROM orders
GROUP BY YEAR(OrderDate), MONTH(OrderDate)
```",Both queries calculate the average fulfillment time per month. They format the date grouping differently but result in the same aggregation.,"SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month;","Both queries calculate the average time to fulfill orders per month by computing the date difference between the shipped and order dates, grouped by month. They use different functions for date formatting but achieve the same logical grouping.",both
What is the total order quantity for each product?,"SELECT products.ProductID, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID;","```sql
SELECT [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalOrderQuantity
FROM [Order Details]
GROUP BY [Order Details].ProductID;
```","Both queries calculate the total order quantity for each ProductID using a SUM and GROUP BY clause. The JOIN in the ground truth is not necessary for calculating the total order quantity solely by ProductID, which is already present in [Order Details]. Both queries will yield the same result regarding total order quantities for each product.","SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;","The generated query groups by ProductName, while the ground truth query groups by ProductID, leading to potentially different results.",Base
What is the total sales for each product?,"SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] GROUP BY [Order Details].ProductID;","```sql
SELECT 
    od.ProductID, 
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    [Order Details] od
GROUP BY 
    od.ProductID;
```","Both queries calculate total sales by multiplying UnitPrice, Quantity, and the discount adjustment for each ProductID, then summing these values, grouped by ProductID.","SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;","The generated query does not consider discounts, while the ground truth query includes a discount in the total sales calculation. Additionally, the generated query groups by ProductName instead of ProductID.",Base
Which product generates the highest revenue?,"SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalRevenue FROM [Order Details] GROUP BY ProductID ORDER BY TotalRevenue DESC LIMIT 1","```sql
SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY [Order Details].ProductID
ORDER BY TotalRevenue DESC
LIMIT 1;
```","Both queries calculate the revenue for each product by multiplying unit price, quantity, and applying the discount. They group by ProductID and order by total revenue in descending order, selecting the top result.","SELECT OD.ProductID, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalRevenue FROM ""Order Details"" OD GROUP BY OD.ProductID ORDER BY TotalRevenue DESC LIMIT 1;","Both queries calculate the total revenue per product and select the product with the highest revenue. The differences in syntax (e.g., 'Order Details' vs [Order Details]) do not affect the logic or the result.",both
What is the average fulfillment time for orders in 2023?,"SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'","```sql
SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time 
FROM orders 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
```",Both queries calculate the average difference in days between 'ShippedDate' and 'OrderDate' for orders in 2023. The column alias difference does not affect the result.,"SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'","The generated SQL query matches the ground truth query exactly, both in logic and filtering criteria, ensuring they yield the same results.",both
Which category of products generated the most sales in 2023?,"SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY categories.CategoryName ORDER BY sales DESC LIMIT 1;","```sql
SELECT categories.CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN categories ON products.CategoryID = categories.CategoryID
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY categories.CategoryID
ORDER BY total_sales DESC
LIMIT 1
```","The generated query selects CategoryID instead of CategoryName. It uses a date range for 2023, which is equivalent to checking the year, so that part is correct. However, the output should match the user question by providing the category name, not the ID.","SELECT products.CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.CategoryID ORDER BY total_sales DESC LIMIT 1","The generated query selects CategoryID instead of CategoryName, which does not answer the user's question about the product category name. Additionally, the ground truth query filters the year using YEAR() function, while the generated query uses a date range. Both methods can work if dates are bounded correctly, but the discrepancy in selecting the category identifier affects the result.",None
What is the trend of total sales revenue over the past year?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY DATE_FORMAT(OrderDate, '%Y-%m') DESC;","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Total_Sales
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE 
    orders.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries calculate the total sales revenue per month for orders within the last year, using similar computations on join conditions and aggregate functions, albeit with slight ordering differences.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","The generated SQL query does not order the results in descending order by month, unlike the ground truth query.",Base
Identify the products with the largest discrepancies between units on order and units in stock.,"SELECT ProductID, ProductName, UnitsOnOrder - UnitsInStock AS Discrepancy FROM products ORDER BY Discrepancy DESC;","```sql
SELECT ProductID, ProductName, UnitsInStock, UnitsOnOrder, (UnitsOnOrder - UnitsInStock) AS Discrepancy
FROM products
WHERE Discontinued = 0
ORDER BY Discrepancy DESC;
```","Both queries calculate the discrepancy between UnitsOnOrder and UnitsInStock and order the results by Discrepancy in descending order. The generated query additionally filters out discontinued products, which can be seen as a refinement that doesn't contradict the user's request. Hence, they yield effectively the same result focusing on active products.","SELECT ProductName, (UnitsOnOrder - UnitsInStock) AS Discrepancy FROM products ORDER BY Discrepancy DESC;",The generated query excludes ProductID which is included in the ground truth query. This could lead to different results if ProductID is a necessary identifier.,Base
Which suppliers have the lowest average lead time for delivery?,"SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY avg_lead_time ASC","```sql
SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_lead_time
FROM orders
JOIN products ON orders.OrderID = products.ProductID
GROUP BY products.SupplierID
ORDER BY average_lead_time ASC
LIMIT 1;
```",The generated query joins orders with products incorrectly and misses joining with suppliers to get supplier names. It also incorrectly limits the result to one supplier without selecting the correct column.,"SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY avg_lead_time ASC LIMIT 5","The generated SQL query includes 'LIMIT 5', which restricts the results to only 5 suppliers. This does not fully answer the user's question for all suppliers with the lowest average lead time.",None
What is the growth rate in customer orders year over year?,"SELECT EXTRACT(YEAR FROM o.OrderDate) AS Year, COUNT(o.OrderID) AS OrderCount, COUNT(o.OrderID) - LAG(COUNT(o.OrderID)) OVER (ORDER BY EXTRACT(YEAR FROM o.OrderDate)) AS OrderGrowth FROM orders o GROUP BY EXTRACT(YEAR FROM o.OrderDate);","```sql
SELECT 
    YEAR(OrderDate) AS OrderYear,
    COUNT(OrderID) AS TotalOrders,
    LAG(COUNT(OrderID)) OVER (ORDER BY YEAR(OrderDate)) AS PreviousYearOrders,
    (COUNT(OrderID) - LAG(COUNT(OrderID)) OVER (ORDER BY YEAR(OrderDate))) / LAG(COUNT(OrderID)) OVER (ORDER BY YEAR(OrderDate)) * 100 AS GrowthRate
FROM 
    orders
GROUP BY 
    YEAR(OrderDate)
ORDER BY 
    OrderYear;
```","The generated SQL query calculates the growth rate as a percentage, while the ground truth query calculates the absolute order growth without converting it into a percentage.","SELECT YEAR(OrderDate) AS Year, (COUNT(*) - LAG(COUNT(*)) OVER (ORDER BY YEAR(OrderDate))) / LAG(COUNT(*), 1) OVER (ORDER BY YEAR(OrderDate)) AS GrowthRate FROM orders GROUP BY YEAR(OrderDate);","The generated query attempts to calculate the growth rate directly, but it incorrectly structures the calculation by not including an ORDER clause in LAG and not using COUNT aggregation with LAG over the entire query.",None
What is the total sales generated by employees hired in the last five years?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE employees.HireDate >= DATE_SUB(CURRENT_DATE, INTERVAL 5 YEAR) GROUP BY employees.EmployeeID;","```sql
SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE e.HireDate >= DATEADD(YEAR, -5, GETDATE())
GROUP BY e.EmployeeID;
```","The generated SQL query uses DATEADD and GETDATE functions, which are specific to certain SQL dialects (e.g., SQL Server). The ground truth query uses DATE_SUB and CURRENT_DATE, compatible with other SQL systems like MySQL. They may not yield the same results depending on the SQL database being used.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE employees.HireDate >= DATE_SUB(CURDATE(), INTERVAL 5 YEAR) GROUP BY employees.EmployeeID","Both queries calculate the total sales by employees hired in the last five years, joining the same tables and using the same conditions and calculations. The differences in function names (CURDATE vs CURRENT_DATE) do not affect the output.",FT
What is the total quantity ordered for products with discontinued status?,SELECT SUM(Quantity) FROM [Order Details] INNER JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1;,"```sql
SELECT SUM([Order Details].Quantity) AS TotalQuantityOrdered
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
WHERE products.Discontinued = 1;
```",The generated SQL query and the ground truth query both calculate the total quantity ordered for products that have been discontinued. They use the same JOIN operation and WHERE clause.,SELECT SUM([Order Details].Quantity) FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1;,"Both queries perform an inner join between the 'Order Details' and 'products' tables, filtering for products with Discontinued status set to 1, and calculate the sum of the 'Quantity' from the 'Order Details' table. The syntax difference does not affect the outcome.",both
What is the average order fulfillment time for the last 6 months?,"SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time FROM orders WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)","```sql
SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time 
FROM orders 
WHERE orders.OrderDate >= DATEADD(MONTH, -6, GETDATE())
```","The generated query uses DATEADD and GETDATE() functions, which are T-SQL functions. The ground truth uses DATE_SUB and CURDATE(), which are MySQL functions. They address similar logic but are not identical due to database-specific syntax.","SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '6 month'","The generated query uses DATE_TRUNC which sets the date to the start of the current month, then subtracts 6 months. The ground truth query simply subtracts 6 months from the current date. They may yield different results if the current date is not the first of the month.",None
List orders with a required date earlier than the order date.,SELECT OrderID FROM orders WHERE RequiredDate < OrderDate;,"```sql
SELECT *
FROM orders
WHERE RequiredDate < OrderDate;
```","The generated query selects all columns, whereas the ground truth only selects the OrderID column.",SELECT OrderID FROM orders WHERE RequiredDate < OrderDate;,"The generated SQL query selects OrderIDs from the orders table where the RequiredDate is earlier than the OrderDate, which matches the user's requirement and the ground truth query.",FT
What is the total number of orders shipped by each shipping method per employee?,"SELECT employees.EmployeeID, ShipVia, COUNT(orders.OrderID) AS ShippedOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, ShipVia;","```sql
SELECT o.ShipVia, e.EmployeeID, COUNT(o.OrderID) AS TotalOrders
FROM orders o
JOIN employees e ON o.EmployeeID = e.EmployeeID
WHERE o.ShippedDate IS NOT NULL
GROUP BY o.ShipVia, e.EmployeeID;
```","Both queries calculate the total number of orders shipped by each shipping method per employee. The generated query filters orders that have been shipped and groups by ShipVia and EmployeeID, which aligns with the intent of the user's question and the ground truth query.","SELECT e.EmployeeID, o.ShipVia, COUNT(o.OrderID) AS OrdersShipped FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, o.ShipVia;","Both queries group orders by employee and shipping method, counting the total orders. They produce the same results.",both
Which products have received the highest total discount amounts?,"SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Discount * [Order Details].Quantity) AS Total_Discount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY Total_Discount DESC LIMIT 1","```sql
SELECT products.ProductName, SUM([Order Details].Discount * [Order Details].Quantity) AS TotalDiscount
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY products.ProductName
ORDER BY TotalDiscount DESC;
```","The generated query calculates discounts only based on Quantity and Discount, while the ground truth query considers UnitPrice as well. Additionally, the ground truth query limits the results to the top product.","SELECT ProductID, SUM(discount * UnitPrice * Quantity) AS TotalDiscount FROM [Order Details] GROUP BY ProductID ORDER BY TotalDiscount DESC LIMIT 1;","The generated query only selects ProductID without joining with the products table to obtain the ProductName. Therefore, it doesn't fulfill the user's request for product names with the highest discount amounts.",None
What is the difference in total revenue between 2021 and 2022?,SELECT (SUM(CASE WHEN YEAR(OrderDate) = 2022 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - SUM(CASE WHEN YEAR(OrderDate) = 2021 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) AS RevenueDifference FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID;,"```sql
SELECT 
    EXTRACT(YEAR FROM o.OrderDate) AS Year,
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM 
    orders o
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
WHERE 
    EXTRACT(YEAR FROM o.OrderDate) IN (2021, 2022)
GROUP BY 
    Year
HAVING 
    COUNT(DISTINCT o.OrderID) > 0
ORDER BY 
    Year;
```","The generated query calculates total revenue separately for 2021 and 2022, while the ground truth query calculates the difference between these two revenues directly.",SELECT (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31') - (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate BETWEEN '2021-01-01' AND '2021-12-31') AS revenue_difference,Both queries calculate the revenue for 2021 and 2022 and find the difference. The approaches are different but yield the same result.,FT
Which customers have placed more than 10 orders?,SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 10;,"```sql
SELECT CustomerID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY CustomerID
HAVING COUNT(OrderID) > 10;
```","The generated SQL query includes the additional column 'OrderCount' that is not specified in the ground truth query. While both queries will return the same customers, the result format differs since the generated query includes the order count.","SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 10;","Both queries correctly identify customers with more than 10 orders. The generated query includes the additional column OrderCount, but it does not affect the result related to customer identification.",FT
Identify employees who report to a specific manager.,"SELECT employees.EmployeeID, employees.FirstName, employees.LastName FROM employees WHERE employees.ReportsTo = ?;","```sql
SELECT * FROM employees WHERE ReportsTo = [ManagerID];
```",The generated query fails to specify the columns of interest and uses a placeholder ([ManagerID]) incorrectly without a proper binding mechanism.,"SELECT e.EmployeeID, e.FirstName, e.LastName, e.ReportsTo FROM employees e WHERE e.ReportsTo = ?;","Both queries correctly identify employees who report to a specific manager. The only difference is that the generated query includes the ReportsTo column in the output, which does not affect the result regarding the identification of employees.",FT
Which products have the highest inventory turnover ratio?,"SELECT products.ProductID, (SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0)) AS InventoryTurnoverRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID ORDER BY InventoryTurnoverRatio DESC;","```sql
SELECT p.ProductID, p.ProductName, 
       SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY InventoryTurnoverRatio DESC
LIMIT 10;
```","The generated SQL includes 'ProductName' in the SELECT and GROUP BY clause, which is not present in the ground truth query. This could lead to different result sets if 'ProductName' affects the grouping.","SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID ORDER BY InventoryTurnoverRatio DESC;","The generated query may cause a division by zero error, unlike the ground truth query which uses NULLIF to prevent it.",None
What is the average discount applied per unit across all orders?,SELECT AVG(od.Discount) AS AverageDiscount FROM [Order Details] od;,"```sql
SELECT AVG(Discount) AS AverageDiscountPerUnit 
FROM [Order Details];
```","Both queries calculate the average discount correctly from the same table, yielding the same result.",SELECT AVG(UnitPrice * Discount) AS AverageDiscountValue FROM [Order Details];,"The generated query calculates the average discount value by multiplying UnitPrice with Discount, while the ground truth query calculates the average of the Discount column alone.",Base
How many products have more units on order than in stock?,SELECT COUNT(*) FROM products WHERE UnitsOnOrder > UnitsInStock;,"```sql
SELECT COUNT(*) AS ProductsWithMoreUnitsOnOrder 
FROM products 
WHERE UnitsOnOrder > UnitsInStock;
```",Both queries count the number of products where UnitsOnOrder is greater than UnitsInStock and will yield the same result.,SELECT COUNT(*) FROM products WHERE UnitsOnOrder > UnitsInStock;,"Both queries count the number of products where UnitsOnOrder is greater than UnitsInStock, yielding the same results.",both
What is the average discount given per order item?,SELECT AVG([Order Details].Discount) AS avg_discount_given FROM [Order Details],"```sql
SELECT AVG([Order Details].Discount) AS average_discount_per_item FROM [Order Details]
```","Both queries calculate the average discount from the 'Order Details' table, yielding the same result.",SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details];,Both queries calculate the average discount from the 'Order Details' table. The differences in alias naming do not affect the outcome.,both
Which city has the highest average shipping cost per order?,"SELECT ShipCity, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipCity ORDER BY AverageFreight DESC LIMIT 1;","```sql
SELECT ShipCity, AVG(Freight) AS AverageShippingCost 
FROM orders 
GROUP BY ShipCity 
ORDER BY AverageShippingCost DESC 
LIMIT 1;
```",Both queries correctly select the city with the highest average freight per order by grouping by ShipCity and ordering by the average in descending order with a limit of one.,"SELECT ShipCity, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY ShipCity ORDER BY AverageShippingCost DESC LIMIT 1;",Both queries calculate the average freight per city and return the city with the highest average. The differences in column alias names do not affect the result.,both
What proportion of customers are from a specific demographic type?,"SELECT customerDemographics.CustomerDesc, COUNT(customers.CustomerID) AS customer_count, COUNT(customers.CustomerID) * 1.0 / (SELECT COUNT(*) FROM customers) AS proportion FROM customerCustomerDemo JOIN customers ON customerCustomerDemo.CustomerID = customers.CustomerID JOIN customerDemographics ON customerCustomerDemo.CustomerTypeID = customerDemographics.CustomerTypeID GROUP BY customerDemographics.CustomerDesc","```sql
SELECT customerDemographics.CustomerTypeID, 
       COUNT(DISTINCT customers.CustomerID) * 1.0 / (SELECT COUNT(DISTINCT CustomerID) FROM customers) AS proportion
FROM customers
JOIN customerCustomerDemo ON customers.CustomerID = customerCustomerDemo.CustomerID
JOIN customerDemographics ON customerCustomerDemo.CustomerTypeID = customerDemographics.CustomerTypeID
GROUP BY customerDemographics.CustomerTypeID;
```","The generated query uses 'customerDemographics.CustomerTypeID' for grouping, while the ground truth query uses 'customerDemographics.CustomerDesc'. Additionally, it computes the total distinct 'CustomerID' rather than all customers.","SELECT customers.CustomerTypeID, COUNT(DISTINCT orders.OrderID) * 1.0 / (SELECT COUNT(*) FROM orders) AS Proportion FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE customers.CustomerTypeID = 'INSERT_TYPE_HERE' GROUP BY customers.CustomerTypeID;","The generated query calculates the proportion of orders from a specific customer type, while the ground truth query calculates the proportion of customers from a demographic type.",None
What is the correlation between employee sales and order fulfillment time?,"SELECT employees.EmployeeID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID ORDER BY employee_sales DESC;","```sql
SELECT 
    AVG(employee_sales.employee_sales) AS avg_employee_sales,
    AVG(order_fulfillment.order_fulfillment_time) AS avg_order_fulfillment_time
FROM 
    (SELECT 
        employees.EmployeeID, 
        SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales 
     FROM 
        [Order Details] 
     JOIN 
        orders ON [Order Details].OrderID = orders.OrderID 
     JOIN 
        employees ON orders.EmployeeID = employees.EmployeeID 
     GROUP BY 
        employees.EmployeeID) AS employee_sales,
    (SELECT 
        AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time 
     FROM 
        orders) AS order_fulfillment;
```","The generated SQL query calculates average values across all employees, not the correlation between employee sales and order fulfillment time. The ground truth query groups by employees to find individual correlations, which the generated query does not do.","SELECT employees.EmployeeID, employees.FirstName, employees.LastName, (SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID)) AS AvgEmployeeSales, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgFulfillmentTime FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName","The generated query calculates average employee sales and average fulfillment time per employee, while the ground truth query computes total sales per employee. Neither query calculates the correlation between these values.",None
Name suppliers who have never been involved in any orders.,SELECT suppliers.CompanyName FROM suppliers WHERE suppliers.SupplierID NOT IN (SELECT DISTINCT products.SupplierID FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID);,"```sql
SELECT CompanyName
FROM suppliers
WHERE SupplierID NOT IN (SELECT DISTINCT SupplierID FROM products WHERE ProductID IN (SELECT ProductID FROM [Order Details]));
```","Both queries aim to select supplier names whose IDs are not associated with any orders via the products table, effectively checking for suppliers with no products in any order.",SELECT CompanyName FROM suppliers WHERE SupplierID NOT IN (SELECT DISTINCT SupplierID FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID);,Both queries accurately find suppliers who have never been involved in any orders by checking SupplierID in suppliers against those in orders via products. They yield the same results.,both
What are the top 5 products by units sold?,"SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalSold DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalUnitsSold
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalUnitsSold DESC
LIMIT 5;
```","Both queries calculate the total units sold for each product and return the top 5 products, though one includes ProductID and the other does not. The results are equivalent in context of the question asked.","SELECT ProductID, SUM(Quantity) AS TotalUnitsSold FROM [Order Details] GROUP BY ProductID ORDER BY TotalUnitsSold DESC LIMIT 5","The generated query selects ProductID without joining the products table to retrieve the ProductName, which differs from the ground truth query that returns ProductName.",Base
How many orders require shipping but have not yet been shipped per employee?,"SELECT employees.EmployeeID, COUNT(orders.OrderID) AS UnshippedOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate IS NULL AND orders.RequiredDate IS NOT NULL GROUP BY employees.EmployeeID;","```sql
SELECT employees.EmployeeID, 
       employees.FirstName, 
       employees.LastName, 
       COUNT(orders.OrderID) AS UnshippedOrders
FROM employees
JOIN orders ON employees.EmployeeID = orders.EmployeeID
WHERE orders.RequiredDate < CURRENT_DATE AND orders.ShippedDate IS NULL
GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName;
```","The generated query restricts orders to those required before the current date, while the ground truth query includes all orders with a required date and no shipped date. This results in potentially different counts.","SELECT employees.EmployeeID, COUNT(orders.OrderID) AS PendingOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate IS NULL AND orders.RequiredDate IS NOT NULL GROUP BY employees.EmployeeID;","Both queries count orders requiring shipping but not yet shipped per employee. They differ only in the alias for the count column, which does not affect the query result.",FT
Which product categories are generating the most revenue?,"SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS revenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY revenue DESC","```sql
SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN categories ON products.CategoryID = categories.CategoryID
GROUP BY categories.CategoryName
ORDER BY total_revenue DESC;
```","Both queries calculate total revenue per category by joining 'Order Details', 'products', and 'categories'. The generated query and ground truth differ slightly with an additional join to 'orders' in the ground truth, which is unnecessary for revenue calculation by category, hence they produce the same results in this context.","SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryID ORDER BY TotalRevenue DESC;","The generated query does not include the 'categories' table to associate CategoryID with CategoryName. It only groups by CategoryID, not CategoryName. This might result in incorrect or incomplete category information.",Base
Identify products that have never been ordered.,SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"```sql
SELECT p.ProductID, p.ProductName
FROM products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.ProductID IS NULL;
```","Both queries effectively identify products that have never been ordered by checking for the absence of the ProductID in order details. The first uses a LEFT JOIN with a NULL check, while the second uses a NOT IN clause with a subquery. Both yield the same results.",SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,The generated SQL query is identical to the ground truth query and correctly identifies products that have never been ordered by selecting product names from the products table where the ProductID does not appear in the Order Details table.,both
Which month had the highest total sales revenue in 2023?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(OrderDate) = 2023 GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY total_sales DESC LIMIT 1","```sql
SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE YEAR(orders.OrderDate) = 2023
GROUP BY month
ORDER BY total_sales DESC
LIMIT 1;
```","Both queries calculate the total sales per month for 2023, group by month, and order by total sales to find the highest. The minor difference in grouping syntax does not affect the result.","SELECT EXTRACT(MONTH FROM o.OrderDate) AS order_month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS total_sales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY order_month ORDER BY total_sales DESC LIMIT 1;","The generated query aggregates monthly using EXTRACT(MONTH, OrderDate), while the ground truth uses DATE_FORMAT to include both year and month, preventing month overlap from different years.",Base
Which products have a high sales volume due to specific employees?,"SELECT [Order Details].ProductID, employees.EmployeeID, SUM([Order Details].Quantity) AS TotalQuantity FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY [Order Details].ProductID, employees.EmployeeID HAVING SUM([Order Details].Quantity) > 1000;","```sql
SELECT 
    od.ProductID, 
    SUM(od.Quantity) AS TotalQuantity
FROM 
    [Order Details] od
JOIN 
    orders o ON od.OrderID = o.OrderID
JOIN 
    employees e ON o.EmployeeID = e.EmployeeID
GROUP BY 
    od.ProductID, e.EmployeeID
HAVING 
    SUM(od.Quantity) > (SELECT AVG(TotalQuantity) 
                         FROM (SELECT SUM(od.Quantity) AS TotalQuantity
                               FROM [Order Details] od
                               JOIN orders o ON od.OrderID = o.OrderID
                               GROUP BY od.ProductID) AS AvgSales);
```","The generated query compares total quantities against an average, while the ground truth uses a fixed threshold of 1000.","SELECT eo.EmployeeID, od.ProductID, SUM(od.Quantity) AS total_quantity FROM [Order Details] od JOIN employees eo ON od.EmployeeID = eo.EmployeeID GROUP BY eo.EmployeeID, od.ProductID HAVING SUM(od.Quantity) = (SELECT MAX(sub_od.total_quantity) FROM [Order Details] sub_od WHERE sub_od.EmployeeID = eo.EmployeeID) ORDER BY eo.EmployeeID, total_quantity DESC;","The generated query identifies products with the maximum sales quantity per employee, not necessarily high sales volume. The ground truth query filters products with total sales over 1000 by each employee.",None
Which employees have sales in more than three different countries?,"SELECT e.EmployeeID, COUNT(DISTINCT o.ShipCountry) AS Countries FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID HAVING Countries > 3;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID
HAVING COUNT(DISTINCT o.ShipCountry) > 3;
```","The generated SQL Query selects EmployeeID, FirstName, and LastName, whereas the ground truth SQL Query only selects EmployeeID and the count of distinct countries without including names. The result sets differ in structure.","SELECT employees.EmployeeID, COUNT(DISTINCT orders.ShipCountry) AS country_count FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID HAVING country_count > 3","Both queries accurately count the number of distinct countries where each employee has sales and filter employees with sales in more than three countries, despite using different aliases and column names.",FT
Which region experiences the most delays in shipments?,"SELECT ShipRegion, COUNT(OrderID) AS DelayedShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipRegion ORDER BY DelayedShipments DESC LIMIT 1;","```sql
SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AverageDelay
FROM orders
WHERE ShippedDate > RequiredDate
GROUP BY ShipRegion
ORDER BY AverageDelay DESC
LIMIT 1;
```","The generated query calculates the average delay, while the ground truth query counts the number of delayed shipments, which better answers the user's question about the region with the most delays.","SELECT Region, COUNT(OrderID) AS DelayedShipments FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.ShippedDate > o.RequiredDate GROUP BY Region ORDER BY DelayedShipments DESC LIMIT 1;","Both queries aim to find the region with the most shipment delays by comparing the ShippedDate and RequiredDate. The key difference is the use of 'Region' in the generated query and 'ShipRegion' in the ground truth. Assuming 'Region' in the customers table corresponds to 'ShipRegion' in the orders table, both queries would yield the same result.",FT
Which category of products has the highest number of units sold?,"SELECT CategoryID, SUM([Order Details].Quantity) AS TotalSold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID ORDER BY TotalSold DESC LIMIT 1;","```sql
SELECT p.CategoryID, SUM(od.Quantity) AS TotalUnitsSold
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.CategoryID
ORDER BY TotalUnitsSold DESC
LIMIT 1;
```","Both queries select the category with the highest total quantity sold by joining products with order details, grouping by category, and sorting the total in descending order to fetch the top result.","SELECT c.CategoryID, SUM(od.Quantity) AS TotalUnitsSold FROM products p JOIN categories c ON p.CategoryID = c.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryID ORDER BY TotalUnitsSold DESC LIMIT 1;","The generated query includes an unnecessary join with the 'categories' table and references 'c.CategoryID', while the ground truth query does not. The ground truth query directly groups by 'CategoryID' from the 'products' table.",Base
Identify products below their reorder levels.,SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock < ReorderLevel;
```","The generated query includes additional columns (ProductID, UnitsInStock, ReorderLevel) that are not in the ground truth query, which only selects ProductName.",SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,The generated SQL query and the ground truth SQL query are identical and accurately represent the user's request to identify products below their reorder levels.,FT
Which product category has the highest average unit price?,"SELECT categories.CategoryName, AVG(products.UnitPrice) AS avg_unit_price FROM products JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY avg_unit_price DESC LIMIT 1","```sql
SELECT categories.CategoryID, 
       categories.CategoryName, 
       AVG(products.UnitPrice) AS average_unit_price 
FROM products 
JOIN categories ON products.CategoryID = categories.CategoryID 
GROUP BY categories.CategoryID, categories.CategoryName 
ORDER BY average_unit_price DESC 
LIMIT 1;
```","Both queries calculate the average unit price for each product category and return the category with the highest average price. They both use a JOIN between the 'products' and 'categories' tables, group by category, and order by average unit price in descending order, limiting the results to 1.","SELECT CategoryID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY CategoryID ORDER BY AvgUnitPrice DESC LIMIT 1;","The generated query returns CategoryID, whereas the ground truth query returns CategoryName, which may yield different results if the CategoryID is not uniquely mapped.",Base
What percentage of products are currently discontinued?,SELECT COUNT(CASE WHEN products.Discontinued = 1 THEN 1 END) * 100.0 / COUNT(products.ProductID) AS discontinued_percentage FROM products,"```sql
SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM products)) AS discontinued_percentage
FROM products
WHERE Discontinued = 1
```",Both queries calculate the percentage of discontinued products by dividing the count of discontinued products by the total product count. The logic is equivalent in both queries.,SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM products)) AS Percentage FROM products WHERE Discontinued = 1;,Both queries calculate the percentage of products that are discontinued by dividing the count of discontinued products by the total count of products. The calculation logic and final results are the same.,both
Which customer has placed the highest number of orders?,"SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID ORDER BY NumberOfOrders DESC LIMIT 1;","```sql
SELECT CustomerID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY CustomerID
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries correctly identify the customer with the highest number of orders by counting OrderID per CustomerID, sorting in descending order, and limiting the results to 1.","SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;","Both queries count the number of orders per customer, order them in descending order by the count, and limit the result to the top customer. The aliases for the count column differ, but this does not affect the result.",both
What is the total sales generated by each employee in 2023?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN employees ON orders.EmployeeID = employees.EmployeeID 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' 
GROUP BY employees.EmployeeID
```",The generated SQL query is logically equivalent to the ground truth query and will yield the same results.,"SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName","Both queries calculate the total sales for each employee in 2023 using the same logic and conditions. The difference in the queries is the inclusion of employee names in the generated SQL, which does not affect the correctness of the total sales calculation.",both
Identify the employees who have a higher salary than the average salary.,"SELECT EmployeeID, CONCAT(FirstName, ' ', LastName) AS EmployeeName FROM employees WHERE Salary > (SELECT AVG(Salary) FROM employees);","```sql
SELECT *
FROM employees
WHERE Salary > (SELECT AVG(Salary) FROM employees);
```","The generated query selects all columns, not specifically EmployeeID and EmployeeName as in the ground truth query.","SELECT EmployeeID, FirstName, LastName FROM employees WHERE Salary > (SELECT AVG(Salary) FROM employees);","Both queries correctly identify employees with a salary higher than the average. The result columns differ, but the main condition is the same.",FT
What is the total number of orders handled by each employee?,"SELECT EmployeeID, COUNT(*) AS OrdersHandled FROM orders GROUP BY EmployeeID ORDER BY OrdersHandled DESC;","```sql
SELECT EmployeeID, COUNT(OrderID) AS TotalOrders
FROM orders
GROUP BY EmployeeID;
```",Both queries calculate the total number of orders for each employee using a COUNT function and GROUP BY EmployeeID. The differences in column alias and order of results do not affect the accuracy in answering the question.,"SELECT employees.EmployeeID, COUNT(orders.OrderID) AS TotalOrders FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;","Both queries aim to count the number of orders each employee handled. The generated query uses a LEFT JOIN to include employees with zero orders, whereas the ground truth query simply groups by EmployeeID. The results align if counted employees have made orders.",both
What are the names and unit prices of all products that are currently in stock?,"SELECT ProductName, UnitPrice FROM products WHERE UnitsInStock > 0;","```sql
SELECT ProductName, UnitPrice 
FROM products 
WHERE UnitsInStock > 0;
```","The generated SQL query correctly selects the ProductName and UnitPrice from the 'products' table where UnitsInStock is greater than 0, which accurately answers the user's question.","SELECT ProductName, UnitPrice FROM products WHERE UnitsInStock > 0;","Both queries select ProductName and UnitPrice from products where UnitsInStock is greater than 0, which answers the user's question about products in stock.",both
What is the on-time delivery rate per month?,"SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS Month, COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 1.0 / COUNT(orders.OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM')","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    COUNT(OrderID) AS TotalOrders,
    COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveries,
    (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate
FROM 
    orders
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries calculate the on-time delivery rate per month by dividing the count of on-time deliveries by the total orders for each month. The Generated SQL additionally includes the count of total orders and on-time deliveries, but the essential rate calculation matches the Ground Truth.","SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS OrderMonth, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*)) AS OnTimeDeliveryRate FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');","Both queries calculate the on-time delivery rate per month by comparing ShippedDate and RequiredDate, grouped by month derived from OrderDate. Differences in identifiers and multiplication for percentages do not affect the logic or outcome.",both
Which suppliers have the slowest lead times in the last year?,"SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS avg_lead_time FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY s.SupplierID ORDER BY avg_lead_time DESC","```sql
SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time
FROM orders
JOIN products ON orders.OrderID = products.ProductID
WHERE orders.OrderDate >= DATE_SUB(NOW(), INTERVAL 1 YEAR)
GROUP BY products.SupplierID
ORDER BY supplier_lead_time DESC
```","The generated query joins orders and products directly on OrderID and ProductID, which seems incorrect. It also uses DATE_SUB with NOW() for a dynamic date range, while the ground truth uses a fixed date range and the correct join through Order Details and suppliers.","SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2022-11-01' AND '2023-10-31' GROUP BY products.SupplierID ORDER BY avg_lead_time DESC","The generated query uses an incorrect date range (Nov 2022 to Oct 2023) while the ground truth query uses the calendar year 2022, leading to different results.",None
What was the average time taken to fulfill orders each month?,"SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Year, Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM 
    orders
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries calculate the average time taken to fulfill orders each month. The generated query uses DATE_FORMAT to group by month and year, while the ground truth separates them using EXTRACT. Both achieve the same result.","SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY month;","Both queries calculate the average time taken to fulfill orders each month by computing the difference between 'OrderDate' and 'ShippedDate', then averaging these differences. They group the results by year and month, just using different date formatting methods.",both
Calculate the total revenue generated by each product.,"SELECT ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
```","Both queries calculate the total revenue for each product by summing the product of quantity and unit price from the joined 'products' and 'Order Details' tables, grouped by product. The inclusion of 'ProductID' in the GROUP BY clause and SELECT statement does not affect the calculation of total revenue.","SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;","The generated query includes a discount calculation, so it calculates the discounted revenue, while the ground truth query calculates the total revenue without discounts.",Base
What is the customer retention rate for Q2 2023?,SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30')::FLOAT / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-04-01') AS retention_rate,"```sql
SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-04-01') AS customer_retention_rate
```",The generated query uses integer division which could lead to inaccurate results if not handled correctly. The ground truth uses a typecast to float for accurate results.,"To calculate the customer retention rate for Q2 2023, we need to use the formula: (Number of customers in Q2 2023 who also ordered in Q1 2023) / (Number of customers in Q1 2023). Here's the SQL query that can help calculate this: ``` SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30') * 1.0 / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-04-01') AS customer_retention_rate ```","Both queries calculate the percentage of Q2 2023 customers out of Q1 2023 customers, rather than the retention rate of those who ordered in both quarters.",None
Which products have never been ordered?,"SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL;","```sql
SELECT p.ProductID, p.ProductName
FROM products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.ProductID IS NULL;
```","Both queries use a LEFT JOIN between products and [Order Details] and filter for null values in the joined table to find products with no orders. The difference in the WHERE clause does not impact the result because when there is no match, both od.ProductID and od.OrderID would be NULL.",SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"Both queries aim to find products without any associated orders. The generated query uses a subquery with 'NOT IN', while the ground truth query uses a LEFT JOIN with a NULL check. Both yield the same result.",both
Identify customers with orders shipped within 7 days of the order date.,"SELECT c.CustomerID, o.OrderID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE DATEDIFF(o.ShippedDate, o.OrderDate) <= 7;","```sql
SELECT DISTINCT c.CustomerID, c.CompanyName, c.ContactName, c.ContactTitle, c.Address, c.City, c.Region, c.PostalCode, c.Country, c.Phone, c.Fax
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
WHERE DATEDIFF(o.ShippedDate, o.OrderDate) <= 7;
```","Both queries identify customers who have orders shipped within 7 days of the order date. The difference lies in the output fields: the generated query includes more customer details, while the ground truth query returns only CustomerID and OrderID. However, the core condition and logic align with the user's question.","SELECT DISTINCT o.CustomerID FROM orders o WHERE DATEDIFF(o.ShippedDate, o.OrderDate) <= 7;","The generated SQL query only provides distinct CustomerIDs, whereas the ground truth SQL also includes OrderIDs for customers with orders shipped within 7 days.",Base
What are the top 3 shipping addresses based on frequency of deliveries?,"SELECT ShipAddress, COUNT(*) AS DeliveryCount FROM orders GROUP BY ShipAddress ORDER BY DeliveryCount DESC LIMIT 3;","```sql
SELECT ShipAddress, COUNT(OrderID) AS DeliveryCount
FROM orders
GROUP BY ShipAddress
ORDER BY DeliveryCount DESC
LIMIT 3;
```","Both queries count deliveries per ShipAddress, group by ShipAddress, and order by delivery count, limiting to the top 3 results. The use of COUNT(OrderID) or COUNT(*) does not affect the result in terms of counting the frequency of ShipAddress.","SELECT ShipAddress, COUNT(OrderID) AS Frequency FROM orders GROUP BY ShipAddress ORDER BY Frequency DESC LIMIT 3;",Both queries count the number of deliveries to each shipping address and order the results to get the top 3 most frequent addresses. They use different aliases for the count but achieve the same outcome.,both
How many products from each supplier are on order?,"SELECT p.SupplierID, COUNT(*) AS ProductsOnOrder FROM products p WHERE p.UnitsOnOrder > 0 GROUP BY p.SupplierID;","```sql
SELECT SupplierID, COUNT(ProductID) AS ProductsOnOrder
FROM products
WHERE UnitsOnOrder > 0
GROUP BY SupplierID;
```","Both queries count the number of products on order, grouped by SupplierID, and have the same logic despite slight differences in syntax.","SELECT suppliers.CompanyName, COUNT(products.ProductID) AS products_on_order FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE products.UnitsOnOrder > 0 GROUP BY suppliers.SupplierID","Both queries aim to count the number of products on order per supplier. The generated query provides supplier names, while the ground truth includes SupplierID. Both correctly filter for products with UnitsOnOrder > 0 and group by SupplierID, resulting in equivalent output for the purpose of the user question.",both
Identify the top 5 best-selling products based on order quantity.,"SELECT ProductID, ProductName, SUM(Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductID, ProductName ORDER BY TotalQuantity DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantity
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalQuantity DESC
LIMIT 5;
```","Both queries calculate the total quantity sold for each product by joining the 'products' table with the 'Order Details' table and order the results by the total quantity in descending order, finally limiting the results to the top 5 products.","SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 5;","Both queries calculate the total quantity sold for each product and order the results in descending order to find the top 5 products. They differ in grouping, but this doesn't affect the result as the join condition and aggregation columns ensure consistency.",both
Identify the least sold product and the number of units sold.,"SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY TotalSold ASC LIMIT 1;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS UnitsSold
FROM products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY UnitsSold ASC
LIMIT 1;
```","The generated query considers products with no sales using LEFT JOIN, while the ground truth uses an INNER JOIN, which only considers products that were sold. Therefore, they may yield different results.","SELECT ProductID, SUM(Quantity) AS TotalSold FROM [Order Details] GROUP BY ProductID ORDER BY TotalSold ASC LIMIT 1;","The generated query only selects ProductID, not the actual product name, which doesn't fully address the user's question as the ground truth query does.",None
Which employee generated the most sales revenue in 2023?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN employees ON orders.EmployeeID = employees.EmployeeID 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' 
GROUP BY employees.EmployeeID 
ORDER BY total_sales DESC 
LIMIT 1;
```",Both queries calculate the total sales revenue per employee for the year 2023 and return the employee with the highest sales. The difference in alias names does not affect the result.,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",Both queries correctly calculate the total sales revenue by employee for the year 2023 and return the employee with the highest sales. The difference in date filtering functions does not affect the results.,both
Determine the average discount given to products per month.,"SELECT MONTH(OrderDate) AS Month, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY MONTH(OrderDate);","```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details]
GROUP BY EXTRACT(YEAR FROM OrderDate), EXTRACT(MONTH FROM OrderDate);
```","The generated query groups by both year and month, which may lead to averages calculated per month per year. The ground truth query groups by month only, which aligns with calculating the average discount for all records of each month disregarding the year.","SELECT EXTRACT(YEAR FROM orders.OrderDate) AS Year, EXTRACT(MONTH FROM orders.OrderDate) AS Month, AVG([Order Details].Discount) AS AvgDiscount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY Year, Month;","The generated query includes extracting the year and groups by both year and month, while the ground truth groups only by month, disregarding the year. This would lead to different grouping and averaging results if the dataset spans multiple years.",None
What is the total value of current inventory for each supplier?,"SELECT SupplierID, SUM(UnitsInStock * UnitPrice) AS InventoryValue FROM products GROUP BY SupplierID;","```sql
SELECT p.SupplierID, SUM(p.UnitPrice * p.UnitsInStock) AS TotalInventoryValue
FROM products p
WHERE p.Discontinued = 0
GROUP BY p.SupplierID;
```","The generated query includes a WHERE clause to exclude discontinued products, which affects the result. The ground truth query considers all products regardless of their discontinued status.","SELECT s.SupplierName, SUM(p.UnitsInStock * p.UnitPrice) AS TotalInventoryValue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierName;","Both queries calculate the total inventory value per supplier by multiplying 'UnitsInStock' by 'UnitPrice' and grouping the results by supplier. The generated query provides supplier names instead of IDs, which gives more information, but fundamentally addresses the user's question.",FT
List all customers who placed orders in the first quarter of 2023.,SELECT DISTINCT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31';,"```sql
SELECT DISTINCT c.CustomerID, c.CompanyName, c.ContactName, c.ContactTitle, c.Address, c.City, c.Region, c.PostalCode, c.Country, c.Phone, c.Fax
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-03-31';
```",The generated query selects additional customer details while the ground truth query selects only CustomerID.,SELECT DISTINCT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31';,"The generated SQL query is identical to the ground truth SQL query, meaning it accurately answers the user's question by listing all customers who placed orders in the first quarter of 2023.",FT
What is the average freight cost of all orders?,SELECT AVG(o.Freight) AS AvgFreightCost FROM orders o;,"```sql
SELECT AVG(Freight) AS AverageFreightCost FROM orders;
```",Both queries calculate the average freight cost from the 'orders' table and will yield the same result.,SELECT AVG(Freight) AS AverageFreight FROM orders;,"Both queries calculate the average freight from the 'orders' table using the AVG function, thus answering the user's question accurately.",both
What is the total freight cost for orders handled by each employee?,"SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID","```sql
SELECT 
    e.EmployeeID, 
    e.FirstName, 
    e.LastName, 
    SUM(o.Freight) AS TotalFreightCost
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
GROUP BY 
    e.EmployeeID, e.FirstName, e.LastName
```","Both queries group by EmployeeID and calculate the total freight cost for orders handled by each employee, yielding equivalent results.","SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;","Both queries join the 'employees' and 'orders' tables on EmployeeID and calculate the total freight for each employee. The syntax and aliases differ, but the functionality and results are identical.",both
Determine the monthly trend of quantities sold for each product.,"SELECT DATE_TRUNC('month', OrderDate) AS Month, p.ProductName, SUM(od.Quantity) AS MonthlyQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY DATE_TRUNC('month', OrderDate), p.ProductName;","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, 
    SUM(od.Quantity) AS TotalQuantitySold
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
JOIN 
    orders o ON od.OrderID = o.OrderID
GROUP BY 
    p.ProductID, Month
ORDER BY 
    Month, p.ProductID;
```","The generated SQL query uses DATE_FORMAT which is specific to MySQL, while the ground truth uses DATE_TRUNC, which is not equivalent. Additionally, the generated query includes 'p.ProductID' in the SELECT clause and ORDER BY clause, which the ground truth does not have. This could lead to different groupings or ordering unless the SQL dialect can handle such groupings correctly.","SELECT p.ProductID, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS MonthlyTrend FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, Month HAVING SUM(od.Quantity) > 0;","The generated query extracts the month but groups by ProductID and Month, while the ground truth groups by the truncated month and ProductName. The generated query also includes a HAVING clause to exclude zero quantities and doesn't output ProductName.",None
How many units of each product were sold monthly?,"SELECT products.ProductID, DATE_TRUNC('month', orders.OrderDate) AS order_month, SUM([Order Details].Quantity) AS units_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductID, order_month","```sql
SELECT products.ProductID, SUM([Order Details].Quantity) AS total_units_sold, MONTH(orders.OrderDate) AS month, YEAR(orders.OrderDate) AS year
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY products.ProductID, YEAR(orders.OrderDate), MONTH(orders.OrderDate)
ORDER BY year, month, products.ProductID;
```","Both queries calculate the total units sold for each product per month and group by product and month. The difference in syntax (using YEAR/MONTH vs. DATE_TRUNC) does not affect the result, making the logic equivalent.","SELECT EXTRACT(MONTH FROM orders.OrderDate) AS OrderMonth, products.ProductID, SUM([Order Details].Quantity) AS TotalSold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY EXTRACT(MONTH FROM orders.OrderDate), products.ProductID","Both queries calculate the total quantity sold for each product monthly. The first query groups by month extracted from the order date, while the second query uses DATE_TRUNC to achieve a similar grouping. Both yield the same result despite minor differences in syntax.",both
What is the total potential revenue from products not yet ordered?,SELECT SUM(UnitPrice * UnitsInStock) AS PotentialRevenue FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"```sql
SELECT SUM(UnitPrice * UnitsInStock) AS TotalPotentialRevenue
FROM products
WHERE UnitsOnOrder = 0;
```","The generated query checks for products with no units currently on order, while the ground truth checks for products that have never been ordered based on the 'Order Details' table.",SELECT SUM(UnitPrice * UnitsInStock) AS PotentialRevenue FROM products WHERE UnitsOnOrder = 0;,"The generated query checks for products with zero units on order, whereas the ground truth checks for products that have not been ordered at all.",None
Determine the top 3 countries by total supplier revenue.,"SELECT suppliers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CountryRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.Country ORDER BY CountryRevenue DESC LIMIT 3;","```sql
SELECT suppliers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.Country
ORDER BY TotalRevenue DESC
LIMIT 3;
```","Both queries calculate the total revenue for each country and order them in descending order, limiting the result to the top 3 countries. The slight difference in alias names for the revenue column does not affect the outcome.","SELECT Country, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.Country ORDER BY TotalRevenue DESC LIMIT 3;","Both queries calculate the total revenue for each country by joining the suppliers, products, and order details tables. They sum the product of unit price, quantity, and discount for each order detail, grouped by country, and order the results in descending order to return the top 3 countries by revenue.",both
Which employee has generated the highest sales revenue?,"SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 1;
```",Both queries calculate total sales for each employee and return the employee with the highest total sales. Differences in SELECT clause (name concatenation) do not affect the outcome.,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1","Both queries calculate total sales per employee using the same formula and return the employee with the highest sales revenue. The main difference is that the ground truth query includes the employee's name, which does not affect the core result of finding the highest sales, therefore the generated query still answers the user's question accurately.",both
What is the average order fulfillment time in days for each month?,"SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Year, Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
    AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM 
    orders
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries calculate the average order fulfillment time per month, using DATEDIFF on ShippedDate and OrderDate, and group results by month. The date formatting differs, but the results are functionally equivalent.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",Both queries calculate the average order fulfillment time in days for each month. The only difference is in how the month is extracted and represented. The results will be the same as both group by year and month effectively.,both
How does the on-time delivery rate vary by region?,"SELECT ShipRegion, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID)) * 100 AS on_time_delivery_rate FROM orders GROUP BY ShipRegion;","```sql
SELECT ShipRegion, 
       COUNT(OrderID) AS TotalOrders, 
       COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveries,
       COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate
FROM orders
GROUP BY ShipRegion;
```","Both queries calculate the on-time delivery rate by region using the same logic. The difference is that the generated SQL includes additional counts of total orders and on-time deliveries, but these do not affect the correctness of the on-time delivery rate calculation.","SELECT ShipRegion, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS on_time_delivery_rate FROM orders GROUP BY ShipRegion ORDER BY on_time_delivery_rate DESC;","Both queries calculate the on-time delivery rate by region and return the same results. They differ only in the order of applying multiplication by 100, which does not affect the outcome.",both
How does the average order value change per region?,"SELECT c.Region, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Region","```sql
SELECT c.Region, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.Region;
```",Both queries calculate the average order value per region by grouping on the column 'Region' from the customers table and using the same formula for AverageOrderValue. The results will be identical.,"SELECT Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Region;","The generated SQL query calculates the average order value by dividing the total sales by the number of unique orders per region, whereas the ground truth query calculates the average order amount per order without considering the distinct orders. Additionally, the ground truth includes a join with the customers table to get the region.",Base
What is the total number of orders shipped on time by each employee?,"SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OnTimeOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY employees.EmployeeID","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS TotalOnTimeOrders
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.ShippedDate <= o.RequiredDate
GROUP BY e.EmployeeID;
```","Both queries correctly count the on-time orders for each employee by joining employees with orders, filtering by ShippedDate <= RequiredDate, and grouping by EmployeeID.","SELECT e.EmployeeID, COUNT(o.OrderID) AS OnTimeOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate <= o.RequiredDate GROUP BY e.EmployeeID","Both queries select EmployeeID and count orders where the ShippedDate is on or before the RequiredDate, grouped by EmployeeID. They are functionally equivalent.",both
How much total revenue did each product category generate in 2023?,"SELECT c.CategoryName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS total_revenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = 2023 GROUP BY c.CategoryName","```sql
SELECT categories.CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN categories ON products.CategoryID = categories.CategoryID
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY categories.CategoryID
```","The generated SQL groups by CategoryID, whereas the ground truth groups by CategoryName. This could result in different outputs if categories have distinct names for the same ID or vice versa. The revenue calculation otherwise matches.","SELECT categories.CategoryID, categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY categories.CategoryID, categories.CategoryName","Both queries calculate the total revenue for each product category in 2023. The generated SQL uses a date range for 2023, while the ground truth query uses the YEAR function, but both approaches yield the same result. The group by columns in the generated query include CategoryID and CategoryName, which is more detailed but still correct.",FT
Find the top 5 products with the highest sales revenue.,"SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS SalesRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SalesRevenue DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS SalesRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY SalesRevenue DESC
LIMIT 5;
```",Both queries correctly calculate the top 5 products by sales revenue; the difference in columns does not affect the result.,"SELECT p.ProductID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY TotalRevenue DESC LIMIT 5;","The generated query selects ProductID while the ground truth selects ProductName, causing different outputs though they compute the same revenue.",Base
Which supplier provides the maximum number of products?,"SELECT suppliers.CompanyName, COUNT(products.ProductID) AS TotalProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY TotalProducts DESC LIMIT 1","```sql
SELECT s.SupplierID, s.CompanyName, COUNT(p.ProductID) AS ProductCount
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
GROUP BY s.SupplierID, s.CompanyName
ORDER BY ProductCount DESC
LIMIT 1;
```","Both queries correctly identify the supplier with the maximum number of products by joining suppliers and products tables, grouping by supplier, and ordering by product count in descending order. Despite minor differences in column names and aliases, the query results are the same.","SELECT suppliers.CompanyName, COUNT(products.ProductID) AS ProductCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY ProductCount DESC LIMIT 1;","Both queries perform the same operations: they join the suppliers and products tables, group by supplier, count the products, and return the supplier with the maximum number of products. The only difference is the alias used for the count, which does not affect the result.",both
Which month has the highest on-time delivery rate?,"SELECT EXTRACT(MONTH FROM OrderDate) AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID)) AS OnTimeRate FROM orders GROUP BY Month ORDER BY OnTimeRate DESC LIMIT 1;","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth,
    COUNT(orders.OrderID) AS TotalOrders,
    COUNT(orders.OrderID) FILTER (WHERE orders.ShippedDate <= orders.RequiredDate) AS OnTimeDeliveries,
    (COUNT(orders.OrderID) FILTER (WHERE orders.ShippedDate <= orders.RequiredDate) * 1.0 / COUNT(orders.OrderID)) AS OnTimeDeliveryRate
FROM 
    orders
GROUP BY 
    OrderMonth
ORDER BY 
    OnTimeDeliveryRate DESC
LIMIT 1;
```","The generated query and the ground truth query calculate on-time delivery rates by month differently. The generated query uses DATE_FORMAT to extract the year-month, whereas the ground truth query extracts only the month. The queries may produce different results if there is data spanning multiple years.","SELECT EXTRACT(MONTH FROM orders.OrderDate) AS month, (SUM(orders.ShippedDate <= orders.RequiredDate) * 100.0 / COUNT(orders.OrderID)) AS on_time_delivery_rate FROM orders GROUP BY EXTRACT(MONTH FROM orders.OrderDate) ORDER BY on_time_delivery_rate DESC LIMIT 1;","Both queries calculate the on-time delivery rate for each month, then order the results to find the month with the highest rate. They differ slightly in implementation but will yield the same result.",FT
Calculate the total sales and total discount for each product.,"SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales, SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details] GROUP BY ProductID;","```sql
SELECT 
    [Order Details].ProductID,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount
FROM 
    [Order Details]
JOIN 
    orders ON [Order Details].OrderID = orders.OrderID
GROUP BY 
    [Order Details].ProductID;
```",Both queries calculate the total sales and total discount for each product by summing the adjusted price and discount amounts. The additional JOIN in the generated query does not alter the final results as it is not used in calculations or filters.,"SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales, SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;","The generated query groups by ProductName and joins with products table, while the ground truth query groups by ProductID without joining, leading to different results.",Base
Find the average unit price of products supplied by each supplier.,"SELECT SupplierID, AVG(UnitPrice) AS AverageUnitPrice FROM products GROUP BY SupplierID;","```sql
SELECT SupplierID, AVG(UnitPrice) AS AverageUnitPrice
FROM products
GROUP BY SupplierID;
```",Both the generated SQL query and the ground truth query are identical and accurately answer the user's question by calculating the average unit price of products supplied by each supplier.,"SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AverageUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;","The generated query groups by suppliers.CompanyName, while the ground truth groups by SupplierID. If CompanyName and SupplierID have a one-to-one correspondence, they may yield similar results. However, the generated query includes supplier names, which may not match the ground truth output format that only includes SupplierID.",Base
Which region has the highest total sales?,"SELECT Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Region ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT e.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.Region
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries calculate total sales per region using the same formula and constraints. The differences in spacing and aliases do not affect the outcome, as they produce the same result by grouping by region and ordering by total sales with a limit to return the highest.","SELECT Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Region ORDER BY TotalSales DESC LIMIT 1;",The generated SQL query and the ground truth query are identical and will yield the same results.,both
Which shipping method tends to have the fastest fulfillment time?,"SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia ORDER BY AvgFulfillmentTime ASC LIMIT 1;","```sql
SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY ShipVia
ORDER BY AverageFulfillmentTime ASC
LIMIT 1;
```","The generated SQL query and the ground truth SQL query are functionally identical. Both compute the average fulfillment time for each shipping method and order the results to find the fastest, returning the top result.","SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia ORDER BY AvgFulfillmentTime ASC LIMIT 1;","The generated SQL query and the ground truth SQL query are identical and will yield the same results, accurately answering the user's question.",both
What is the total sales revenue generated monthly?,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY month","```sql
SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
GROUP BY month 
ORDER BY month;
```","The generated SQL query accurately answers the user's question by calculating the monthly total sales revenue. The difference is the presence of an ORDER BY clause in the generated query, which sorts the results by month, but this does not affect the accuracy of the answer.","SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY month;","Both queries perform the same calculations to get monthly total sales revenue, differing only in table join order and alias names, which doesn't affect the result.",both
Identify suppliers whose products have the lowest average inventory.,"SELECT SupplierID, AVG(UnitsInStock) AS AverageInventory FROM products GROUP BY SupplierID ORDER BY AverageInventory ASC LIMIT 1;","```sql
SELECT p.SupplierID, AVG(p.UnitsInStock) AS AverageInventory
FROM products p
GROUP BY p.SupplierID
ORDER BY AverageInventory ASC
LIMIT 1;
```","Both queries correctly identify the supplier with the lowest average inventory of products by grouping on SupplierID and using AVG on UnitsInStock, then ordering by the result and limiting to one.","SELECT ProductID, SupplierID, ProductName, UnitsInStock FROM products WHERE UnitsInStock = (SELECT MIN(UnitsInStock) FROM products);","The generated query finds products with the lowest stock, not suppliers with the lowest average inventory across all their products.",Base
Which city has the largest number of employees based on their address?,"SELECT City, COUNT(EmployeeID) AS EmployeeCount FROM employees GROUP BY City ORDER BY EmployeeCount DESC LIMIT 1;","```sql
SELECT City, COUNT(*) AS EmployeeCount
FROM employees
GROUP BY City
ORDER BY EmployeeCount DESC
LIMIT 1;
```","Both queries group employees by City and count the number of employees, ordering by the count in descending order and limiting the result to the top city.","SELECT City, COUNT(EmployeeID) AS NumEmployees FROM employees GROUP BY City ORDER BY NumEmployees DESC LIMIT 1;",Both queries count employees by city and return the city with the most employees. Column aliases differ but do not affect the result.,both
Which orders include products that are currently out of stock?,SELECT DISTINCT OrderID FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.UnitsInStock = 0;,"```sql
SELECT DISTINCT od.OrderID
FROM [Order Details] od
JOIN products p ON od.ProductID = p.ProductID
WHERE p.UnitsInStock = 0;
```","Both queries select distinct OrderIDs from the [Order Details] table, joining with the products table where UnitsInStock is 0. The structure and logic are the same, ensuring identical results.",SELECT o.OrderID FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID WHERE p.UnitsInStock = 0;,"Both queries retrieve OrderIDs of orders that have products with 0 units in stock. They join Order Details with products to check the stock status, ensuring the correct orders are selected.",both
How many orders were shipped with each shipping method?,"SELECT ShipVia, COUNT(*) AS OrdersShipped FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY ShipVia;
```",Both queries count the number of orders for each shipping method by grouping on the 'ShipVia' column. They are functionally equivalent despite slight differences in alias naming and COUNT argument.,"SELECT ShipVia, COUNT(OrderID) AS OrdersCount FROM orders GROUP BY ShipVia;",Both queries count the number of orders (OrderID or *) grouped by the shipping method (ShipVia). They are functionally equivalent and will yield the same results.,both
Which orders were delivered on time in 2023?,SELECT orders.OrderID FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31',"```sql
SELECT * FROM orders WHERE ShippedDate <= RequiredDate AND YEAR(OrderDate) = 2023
```","Both queries select orders where the ShippedDate is on or before the RequiredDate and filter for orders in 2023, either by checking the year or using a date range.",SELECT OrderID FROM orders WHERE ShippedDate <= RequiredDate AND YEAR(OrderDate) = 2023;,Both queries filter orders where ShippedDate is on or before RequiredDate and are placed in 2023. The difference in representing the 2023 year criteria does not affect the outcome.,both
How many orders were placed by each customer in the last year?,"SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= DATEADD(year, -1, CURRENT_DATE) GROUP BY CustomerID;","```sql
SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders
FROM orders
WHERE OrderDate >= DATEADD(year, -1, GETDATE())
GROUP BY CustomerID;
```","The generated query uses GETDATE(), which is SQL Server specific, whereas CURRENT_DATE is standard SQL. The result may vary slightly if not adjusted for the correct function per SQL dialect.","SELECT o.CustomerID, COUNT(o.OrderID) AS NUM_ORDERS FROM orders o WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY o.CustomerID;","The generated SQL uses DATE_SUB, which is not ANSI standard, while the ground truth uses DATEADD, which is closer to the standard. Additionally, DATEADD may behave differently in some databases compared to DATE_SUB.",None
What is the average unit price for products from each supplier?,"SELECT s.SupplierID, AVG(p.UnitPrice) AS AverageUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;","```sql
SELECT SupplierID, AVG(UnitPrice) AS AverageUnitPrice
FROM products
GROUP BY SupplierID;
```","Both queries calculate the average unit price of products grouped by SupplierID. The 'JOIN' in the ground truth query connects 'suppliers' with 'products', but since only 'SupplierID' and 'UnitPrice' from 'products' are used, the final result is unaffected.","SELECT SupplierID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY SupplierID;","The generated query assumes 'SupplierID' is directly in the 'products' table, while the ground truth query joins 'suppliers' and 'products' to ensure all suppliers are considered. The generated query may not account for suppliers without products.",Base
How many units of each product have been ordered so far?,"SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalOrdered FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalUnitsOrdered
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName;
```","Both queries calculate the total units ordered for each product. The generated query includes ProductID in the SELECT and GROUP BY clauses, but this does not affect the result compared to the ground truth query.","SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalOrdered FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",Both the generated and ground truth queries are identical and correctly calculate the total quantity ordered for each product.,both
What is the current stock level of each product?,"SELECT ProductName, UnitsInStock FROM products;","```sql
SELECT ProductID, ProductName, UnitsInStock
FROM products;
```",Both queries return the stock levels for each product with ProductName and UnitsInStock. The additional ProductID in the generated query does not affect the correctness with respect to the user's question.,"SELECT ProductName, UnitsInStock FROM products;","Both queries select the same columns and table, yielding the current stock levels of each product.",both
Identify products that need to be reordered based on their reorder level.,SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock <= ReorderLevel;
```","Both queries identify products that need to be reordered by checking if UnitsInStock is less than or equal to ReorderLevel. The difference is the columns selected, but both satisfy the user's question.",SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;,"The generated SQL query and the ground truth query are identical, both accurately identify products that need to be reordered based on their reorder level.",both
Which customer placed the most orders?,"SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT CustomerID, COUNT(OrderID) AS TotalOrders
FROM orders
GROUP BY CustomerID
ORDER BY TotalOrders DESC
LIMIT 1;
```",Both queries count orders per customer and return the customer with the highest count. The difference in alias names ('TotalOrders' vs 'OrderCount') does not affect the output.,"SELECT o.CustomerID, COUNT(o.OrderID) as TotalOrders FROM orders o GROUP BY o.CustomerID ORDER BY TotalOrders DESC LIMIT 1;","Both queries group orders by CustomerID, count the orders, and return the customer ID with the most orders using DESC ordering and LIMIT 1.",both
List all products that are currently out of stock.,SELECT ProductName FROM products WHERE UnitsInStock = 0;,"```sql
SELECT ProductID, ProductName
FROM products
WHERE UnitsInStock = 0;
```","Both queries filter the products where 'UnitsInStock' equals 0, listing the product names, with the generated query providing additional ProductID which does not affect the answer's validity.",SELECT ProductName FROM products WHERE UnitsInStock = 0;,"Both queries select products with UnitsInStock equal to 0, which indicates products that are currently out of stock.",both
What is the average order fulfillment time by region?,"SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipRegion;","```sql
SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY ShipRegion;
```","The generated SQL query accurately answers the user's question. Both queries calculate the average order fulfillment time by region using the same logic and have the same group by clause. The only difference is the alias name, which does not affect the query outcome.","SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY ShipRegion","Both queries calculate the average order fulfillment time by region using the DATEDIFF function and group by ShipRegion. The differences are only in the alias names, which do not affect the query's correctness.",both
Which city has the highest number of returning customers?,"SELECT customers.City, COUNT(DISTINCT orders.CustomerID) AS returning_customers FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.CustomerID IN (SELECT o.CustomerID FROM orders o WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') AND orders.OrderDate < '2023-01-01' GROUP BY customers.City ORDER BY returning_customers DESC LIMIT 1","```sql
SELECT City, COUNT(DISTINCT CustomerID) AS ReturningCustomers
FROM orders
WHERE CustomerID IN (
    SELECT CustomerID
    FROM orders
    GROUP BY CustomerID
    HAVING COUNT(OrderID) > 1
)
GROUP BY City
ORDER BY ReturningCustomers DESC
LIMIT 1;
```",The generated query counts returning customers but doesn't consider the date range specified in the ground truth query and uses a simpler condition for defining returning customers.,"SELECT customers.City, COUNT(DISTINCT orders.CustomerID) AS returning_customers FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.CustomerID IN (SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(*) > 1) GROUP BY customers.City ORDER BY returning_customers DESC LIMIT 1","The generated query checks for customers with more than one order, while the ground truth query filters based on specific order dates and requires previous orders before 2023.",None
What is the average number of days late for orders shipped past the required date?,"SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgDaysLate FROM orders WHERE ShippedDate > RequiredDate;","```sql
SELECT AVG(DATEDIFF(orders.ShippedDate, orders.RequiredDate)) AS AverageDaysLate
FROM orders
WHERE orders.ShippedDate > orders.RequiredDate;
```",Both queries calculate the average number of days late for orders shipped after the required date using similar logic and conditions.,"SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgDaysLate FROM orders WHERE ShippedDate > RequiredDate;",Both queries are identical and correctly calculate the average days late for orders shipped past the required date.,both
Which employee has generated the highest sales revenue this year?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE())
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries calculate the total sales for each employee for the current year, order by sales descending, and limit to the top result. The generated query includes the first and last name, which does not affect the result.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1","Both queries calculate total sales revenue per employee for the current year and return the employee with the highest sales, using equivalent logic and SQL functions.",both
List all orders where the freight cost exceeded $100.,SELECT * FROM orders WHERE Freight > 100;,"```sql
SELECT *
FROM orders
WHERE Freight > 100;
```","Both queries are identical in logic and syntax, so they will yield the same results.",SELECT * FROM orders WHERE Freight > 100;,Both queries accurately select orders where the Freight cost is greater than $100 and will produce the same result.,both
Which month had the highest number of late deliveries?,"SELECT DATE_TRUNC('month', ShippedDate) AS Month, COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) AS LateDeliveries FROM orders GROUP BY Month ORDER BY LateDeliveries DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(orders.RequiredDate, '%Y-%m') AS Month,
       COUNT(orders.OrderID) AS LateDeliveries
FROM orders
WHERE orders.ShippedDate > orders.RequiredDate
GROUP BY Month
ORDER BY LateDeliveries DESC
LIMIT 1;
```","Both queries calculate late deliveries per month and return the month with the highest count of late deliveries, despite using different SQL functions for date formatting.","SELECT DATE_FORMAT(RequiredDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) AS LateDeliveries FROM orders GROUP BY Month ORDER BY LateDeliveries DESC LIMIT 1;","The generated query groups by RequiredDate, while the ground truth groups by ShippedDate. This can lead to different months being evaluated.",Base
Which supplier has the highest total revenue from product sales?,"SELECT s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.CompanyName ORDER BY TotalRevenue DESC LIMIT 1;","```sql
SELECT s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY s.CompanyName
ORDER BY TotalRevenue DESC
LIMIT 1;
```","Both queries are identical in logic and syntax, and they will produce the same result. The differences are purely in formatting.","SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY total_revenue DESC LIMIT 1","Both queries compute the total revenue for each supplier by summing the product of UnitPrice, Quantity, and the discount factor. They join the tables correctly and group by supplier name, ordering the results by total revenue in descending order, and limiting the result to the top supplier.",both
Identify the top 3 employees by total sales in 2023.,"SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName ORDER BY total_sales DESC LIMIT 3","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN employees ON orders.EmployeeID = employees.EmployeeID 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' 
GROUP BY employees.EmployeeID 
ORDER BY total_sales DESC 
LIMIT 3
```","Both queries correctly calculate total sales per employee and select the top 3 employees. The only difference is that the ground truth query includes additional columns (FirstName, LastName), which are not needed to answer the user's question.","SELECT o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2023 GROUP BY o.EmployeeID ORDER BY TotalSales DESC LIMIT 3;","Both queries calculate the top 3 employees by total sales for the year 2023. They aggregate sales data from the 'Order Details' table joined with 'orders', filtering by the 2023 date range. They group by EmployeeID and order by total sales in descending order, applying a limit of 3. The discrepancy in employee details selection and date filtering method does not affect the correctness of the results for the given question.",both
Which shipper was used the most last year?,"SELECT o.ShipVia, COUNT(o.OrderID) AS ShipCount FROM orders o WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY o.ShipVia ORDER BY ShipCount DESC LIMIT 1;","```sql
SELECT ShipVia, COUNT(OrderID) AS OrderCount
FROM orders
WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1
GROUP BY ShipVia
ORDER BY OrderCount DESC
LIMIT 1;
```","The generated query checks for orders specifically in the previous calendar year, whereas the ground truth query considers the last 12 months from the current date. These result in different date ranges.","SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1 GROUP BY ShipVia ORDER BY OrderCount DESC LIMIT 1;","The generated query filters orders from the last calendar year, while the ground truth query filters orders from the last 365 days. This can result in different datasets, especially at the start of a year.",None
Who are the top five customers by total ordered quantity?,"SELECT customers.CustomerID, SUM([Order Details].Quantity) AS TotalQuantity FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY TotalQuantity DESC LIMIT 5;","```sql
SELECT customers.CustomerID, customers.CompanyName, SUM([Order Details].Quantity) AS TotalOrderedQuantity
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID, customers.CompanyName
ORDER BY TotalOrderedQuantity DESC
LIMIT 5;
```","Both queries calculate the top five customers by total ordered quantity, differing only in whether they include the CompanyName in the SELECT clause.","SELECT o.CustomerID, SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID ORDER BY TotalQuantity DESC LIMIT 5;","The generated query omits the 'customers' table, which may exclude customers with no orders. The ground truth query ensures all customers are considered by including the 'customers' table in the JOIN.",Base
Compare shipping costs across different shipping companies.,"SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM shippers JOIN orders ON shippers.ShipperID = orders.ShipVia GROUP BY shippers.CompanyName","```sql
SELECT shippers.CompanyName, AVG(orders.Freight) AS average_shipping_cost
FROM orders
JOIN shippers ON orders.ShipVia = shippers.ShipperID
GROUP BY shippers.CompanyName;
```",Both queries calculate the average shipping cost per company by joining the 'shippers' and 'orders' tables on 'ShipperID' and 'ShipVia' and grouping by 'CompanyName'.,"SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",The generated SQL query and the ground truth query are equivalent. Both join the orders and shippers tables on the same condition and compute the average freight cost grouped by the company name.,both
How many units of discontinued products are still in stock?,SELECT SUM(UnitsInStock) FROM products WHERE Discontinued = 1;,"```sql
SELECT SUM(UnitsInStock) AS TotalUnitsInStock
FROM products
WHERE Discontinued = 1;
```",Both queries calculate the sum of units in stock for discontinued products and will yield the same result.,SELECT SUM(UnitInStock) FROM products WHERE Discontinued = 1;,There is a mismatch in the column name: 'UnitInStock' vs 'UnitsInStock'.,Base
Find the most recent order details for a specific customer.,"SELECT customers.CustomerID, orders.OrderID, orders.OrderDate FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE customers.CustomerID = 'specific_customer_id' ORDER BY orders.OrderDate DESC LIMIT 1;","```sql
SELECT od.OrderID, od.ProductID, od.UnitPrice, od.Quantity, od.Discount
FROM [Order Details] od
JOIN orders o ON od.OrderID = o.OrderID
WHERE o.CustomerID = 'specific_customer_id'
ORDER BY o.OrderDate DESC
LIMIT 1;
```","The generated query retrieves details from the 'Order Details' table, whereas the ground truth fetches basic order information. They aim to retrieve different data.","SELECT CustomerID, OrderID, OrderDate FROM orders WHERE CustomerID = 'specific_customer' ORDER BY OrderDate DESC LIMIT 1;","The generated query lacks a join with the customers table, assumes the CustomerID is 'specific_customer', and might not match IDs exactly.",None
Find the product with the largest discrepancy between units in stock and on order.,SELECT ProductName FROM products ORDER BY ABS(UnitsInStock - UnitsOnOrder) DESC LIMIT 1;,"```sql
SELECT ProductID, 
       (UnitsInStock - UnitsOnOrder) AS Discrepancy
FROM products
ORDER BY Discrepancy DESC
LIMIT 1;
```","The generated query selects ProductID and uses regular subtraction, whereas the ground truth query selects ProductName and uses ABS to find the absolute discrepancy.",SELECT ProductName FROM products ORDER BY ABS(UnitsInStock - UnitsOnOrder) DESC LIMIT 1;,Both queries are identical and accurately find the product with the largest discrepancy between units in stock and units on order by ordering the results based on the absolute difference and selecting the top one.,FT
What are the monthly shipping costs across different shipping methods?,"SELECT EXTRACT(YEAR FROM orders.OrderDate) AS year, EXTRACT(MONTH FROM orders.OrderDate) AS month, orders.ShipVia, AVG(orders.Freight) AS avg_shipping_cost FROM orders GROUP BY year, month, orders.ShipVia","```sql
SELECT orders.ShipVia, SUM(orders.Freight) AS total_shipping_cost
FROM orders
GROUP BY orders.ShipVia
```","The generated query calculates total shipping cost per shipping method, while the ground truth calculates average shipping cost by year, month, and shipping method.","SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, ShipVia, SUM(Freight) AS TotalShippingCosts FROM orders GROUP BY Month, ShipVia;","The generated SQL query calculates the total shipping costs using SUM, while the ground truth query calculates the average shipping costs using AVG. The intended result is different in terms of aggregation.",None
Identify the customers with the highest order frequency in the last year.,"SELECT CustomerID, COUNT(OrderID) AS OrderFrequency FROM orders WHERE OrderDate > CURRENT_DATE - INTERVAL '1 year' GROUP BY CustomerID ORDER BY OrderFrequency DESC LIMIT 10;","```sql
SELECT customers.CustomerID, customers.CompanyName, COUNT(orders.OrderID) AS OrderFrequency
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
WHERE orders.OrderDate >= DATEADD(YEAR, -1, GETDATE())
GROUP BY customers.CustomerID, customers.CompanyName
ORDER BY OrderFrequency DESC
```","The generated query includes customer names, which is not required, and lacks a LIMIT clause to restrict results, unlike the ground truth query.","SELECT customers.CompanyName, COUNT(orders.OrderID) AS order_frequency FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) OR YEAR(orders.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY customers.CompanyName ORDER BY order_frequency DESC LIMIT 10","The generated query incorrectly includes orders from the year before last. It also retrieves the CompanyName instead of CustomerID, potentially altering the result if multiple customers share the same name. Furthermore, it uses YEAR(orders.OrderDate) = YEAR(CURDATE()) - 1, which retrieves the entire previous year rather than the last 365 days.",None
What is the total revenue contribution from each supplier?,"SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;","```sql
SELECT s.SupplierID, s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY s.SupplierID, s.CompanyName;
```","Both queries will produce the same total revenue per supplier. The generated query includes the supplier's company name, which does not affect the revenue calculation since the grouping is based on SupplierID.","SELECT SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID;","The generated query does not join with the suppliers table, which might affect the correctness if Suppliers are not fully represented in the products table.",Base
Determine the average reorder level for each category.,"SELECT c.CategoryName, AVG(p.ReorderLevel) AS AverageReorderLevel FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryName;","```sql
SELECT CategoryID, AVG(ReorderLevel) AS AverageReorderLevel
FROM products
GROUP BY CategoryID;
```","The generated query groups by CategoryID without joining the categories table, which means it only provides the CategoryID, not the CategoryName as in the ground truth query.","SELECT CategoryID, AVG(ReorderLevel) AS AverageReorderLevel FROM products GROUP BY CategoryID;","The generated query groups by CategoryID and does not join with categories to retrieve CategoryName, while the ground truth retrieves and groups by CategoryName.",None
What is the product performance metric for the last six months?,"SELECT p.ProductID, SUM(od.Quantity) AS PerformanceMetric FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= DATEADD(month, -6, CURRENT_DATE) GROUP BY p.ProductID;","```sql
SELECT p.ProductID, SUM(od.Quantity) AS ProductPerformance
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.OrderID IN (
    SELECT DISTINCT OrderID
    FROM [Order Details]
    WHERE OrderDate >= DATEADD(MONTH, -6, GETDATE())
)
GROUP BY p.ProductID
```","The generated query uses GETDATE(), likely for SQL Server, while the ground truth uses CURRENT_DATE, which is standard ANSI SQL. Additionally, the generated query uses a subquery with DISTINCT, which is unnecessary and might affect performance.","SELECT p.ProductName, SUM(od.Quantity) AS TotalPerformance FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY p.ProductID, p.ProductName;","The generated query uses DATE_SUB, which is correct for calculating the last six months, but it includes 'ProductName' in the SELECT clause, which might yield different results if products have the same 'ProductID' but different 'ProductName'. Additionally, it does not match the 'ProductID' focus of the ground truth query. The 'Ground Truth' query focuses solely on 'ProductID' for aggregation, potentially yielding different grouping results.",None
What is the trend of average order value over the past year?,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS average_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE() GROUP BY month ORDER BY month","```sql
SELECT DATE_TRUNC('month', orders.OrderDate) AS order_month, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate >= DATEADD(year, -1, GETDATE()) 
GROUP BY order_month 
ORDER BY order_month;
```","The generated SQL query uses COUNT(DISTINCT orders.OrderID), which averages based on the number of distinct orders per month, whereas the ground truth query uses the same logic. However, the date range functions differ, with the generated query using DATEADD and the ground truth using DATE_SUB.","SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID)) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY Month;","The generated SQL query uses EXTRACT(MONTH FROM o.OrderDate) which aggregates by month only, losing year information. The ground truth query uses DATE_FORMAT to retain year and month, which is necessary for the past year's trend analysis.",None
Determine the total number of orders for each product.,"SELECT products.ProductName, COUNT(DISTINCT [Order Details].OrderID) AS TotalOrders FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName","```sql
SELECT products.ProductID, COUNT(orders.OrderID) AS TotalOrders
FROM products
LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
LEFT JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY products.ProductID;
```","The generated query uses a LEFT JOIN on the orders table, which can include NULL orders, and it groups by ProductID, not ProductName, without using DISTINCT on OrderID.","SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalOrders FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName WITH ROLLUP;","The generated query uses SUM on the Quantity column to count orders, while the ground truth uses COUNT on distinct OrderID. The generated query also includes WITH ROLLUP, adding a total subtotal which is not in the ground truth.",None
Which shipping company has the highest average freight cost?,"SELECT ShipVia, AVG(Freight) AS avg_freight FROM orders GROUP BY ShipVia ORDER BY avg_freight DESC LIMIT 1;","```sql
SELECT ShipVia, AVG(Freight) AS AverageFreight
FROM orders
GROUP BY ShipVia
ORDER BY AverageFreight DESC
LIMIT 1;
```","Both queries calculate the average freight for each shipping company, order by the average in descending order, and return the top result. They yield the same outcome by different column alias names.","SELECT ShipVia, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipVia ORDER BY AverageFreight DESC LIMIT 1;",Both queries perform the same operations: they calculate the average freight cost per shipping company and return the one with the highest average. The difference in alias naming does not affect the outcome.,both
Determine the employee with the most orders shipped before the required date.,"SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) as EarlyShipments FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate < o.RequiredDate GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY EarlyShipments DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
WHERE ShippedDate < RequiredDate
GROUP BY EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```",The generated query misses joining employees to retrieve employee names and details.,"SELECT EmployeeID, COUNT(OrderID) AS EarlyOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY EmployeeID ORDER BY EarlyOrders DESC LIMIT 1;","The generated query does not include employee details such as first name and last name, and it uses <= instead of < for date comparison.",None
Calculate the average discount given per order.,SELECT AVG(od.Discount) AS AvgDiscount FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID;,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details]
```",Both queries calculate the average of the 'Discount' column from the 'Order Details' table. The JOIN in the ground truth query does not affect the 'Discount' aggregation if there is a one-to-one correspondence between 'Order Details' and 'orders'.,SELECT AVG(d.UnitPrice * d.Quantity * d.Discount) AS AverageDiscount FROM [Order Details] d;,"The generated query calculates the average monetary value of discounts per order detail line, while the ground truth averages the discount rate across order details, not considering the price or quantity.",Base
How many unique products have been ordered in the last year?,SELECT COUNT(DISTINCT ProductID) FROM [Order Details] o JOIN orders ON o.OrderID = orders.OrderID WHERE EXTRACT(YEAR FROM orders.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1;,"```sql
SELECT COUNT(DISTINCT ProductID) AS UniqueProductsOrdered
FROM [Order Details]
WHERE OrderID IN (
    SELECT OrderID
    FROM Orders
    WHERE OrderDate >= DATEADD(YEAR, -1, GETDATE())
);
```","The generated query counts orders within the last 365 days, while the ground truth query counts products from the previous calendar year.","SELECT COUNT(DISTINCT ProductID) FROM ([Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID) WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);","The generated query counts unique products ordered in the previous 365 days, while the ground truth query counts unique products ordered in the last calendar year.",None
What is the total freight cost for orders shipped in the last quarter?,"SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShippedDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months';","```sql
SELECT SUM(Freight) AS TotalFreightCost
FROM orders
WHERE ShippedDate >= DATEADD(QUARTER, -1, GETDATE()) AND ShippedDate < GETDATE();
```","The generated query uses DATEADD and GETDATE for a rolling last quarter period, while the ground truth query calculates for the specific last quarter based on current date's quarter start.",SELECT SUM(Freight) FROM orders WHERE EXTRACT(QUARTER FROM ShippedDate) = EXTRACT(QUARTER FROM CURRENT_DATE) - 1 AND EXTRACT(YEAR FROM ShippedDate) = EXTRACT(YEAR FROM CURRENT_DATE);,"The generated query may not consider orders in the previous year's last quarter if the current date is in the first quarter, whereas the ground truth query correctly adjusts for this by using DATE_TRUNC.",None
List products with the highest total sales value.,"SELECT ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY ProductName ORDER BY TotalSales DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSalesValue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSalesValue DESC;
```","The generated query does not include a LIMIT clause, so it does not restrict the results to the top products with the highest sales value like the ground truth query.","SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalSales DESC;","The generated query does not limit the results, while the ground truth query limits the output to the top 5 products.",None
How many orders were shipped after the required date?,SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;,"```sql
SELECT COUNT(*) AS OrdersShippedAfterRequired
FROM orders
WHERE ShippedDate > RequiredDate;
```",Both queries count the number of orders where the ShippedDate is after the RequiredDate. The difference is only in the alias used for the count result in the generated query.,SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;,"Both queries count the number of orders where the ShippedDate is later than the RequiredDate, thus they provide the same result.",both
What is the monthly trend in sales quantity for each product?,"SELECT ProductID, EXTRACT(MONTH FROM OrderDate) AS Month, SUM(Quantity) AS MonthlySales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ProductID, Month;","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    DATE_FORMAT(o.OrderDate, '%Y-%m') AS SaleMonth, 
    SUM(od.Quantity) AS TotalQuantity
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
JOIN 
    orders o ON od.OrderID = o.OrderID
GROUP BY 
    p.ProductID, 
    SaleMonth
ORDER BY 
    p.ProductID, 
    SaleMonth;
```","The generated query joins with 'products' to include 'ProductName' and uses 'DATE_FORMAT' to extract the month, while the ground truth query does not include 'ProductName' and uses 'EXTRACT(MONTH FROM OrderDate)' instead of 'DATE_FORMAT'. Additionally, the generated query extracts month and year, not just month.","SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, p.ProductName, SUM(od.Quantity) AS TotalSold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY DATE_FORMAT(o.OrderDate, '%Y-%m'), p.ProductName;","The generated SQL includes product names along with dates formatted as 'YYYY-MM', while the ground truth uses product IDs and extracts only the month from OrderDate. They will not yield identical results.",None
What is the average supplier lead time for each supplier?,"SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID, suppliers.CompanyName;","```sql
SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
JOIN products ON [Order Details].ProductID = products.ProductID
GROUP BY products.SupplierID;
```","Both queries calculate the average lead time for each supplier by joining the orders, order details, and products tables. The generated query returns SupplierID instead of CompanyName, but it still answers the user's question by providing the average lead time per supplier.","SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN orders ON products.ProductID = [Order Details].ProductID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY suppliers.SupplierID","Both queries calculate the average lead time for each supplier by joining the suppliers, products, orders, and order details tables and grouping by suppliers. Differences in join order and alias names do not affect the final result.",both
How many unique customers placed orders with discounts greater than 20%?,SELECT COUNT(DISTINCT orders.CustomerID) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE [Order Details].Discount > 0.2,"```sql
SELECT COUNT(DISTINCT orders.CustomerID) AS unique_customers
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE [Order Details].Discount > 0.20
```",Both queries count unique CustomerIDs from orders with a discount greater than 20% and use the same table joins and conditions.,SELECT COUNT(DISTINCT orders.CustomerID) FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE [Order Details].Discount > 0.2,Both queries join the same tables on the same condition and filter for discounts greater than 20%. The order of joins does not affect the result.,both
Which products have the highest units on order but are still in stock?,SELECT ProductName FROM products WHERE UnitsOnOrder > 0 AND UnitsInStock > 0 ORDER BY UnitsOnOrder DESC;,"```sql
SELECT ProductID, ProductName, UnitsOnOrder, UnitsInStock
FROM products
WHERE UnitsOnOrder > 0 AND UnitsInStock > 0
ORDER BY UnitsOnOrder DESC;
```","The generated SQL query includes additional columns (ProductID, UnitsOnOrder, UnitsInStock) in the SELECT clause not present in the ground truth query. This leads to different result sets.",SELECT ProductName FROM products WHERE UnitsOnOrder > 0 AND UnitsInStock > 0 ORDER BY UnitsOnOrder DESC;,"Both queries filter products with UnitsOnOrder > 0 and UnitsInStock > 0, and order them by UnitsOnOrder in descending order, which correctly answers the user's question.",FT
List the employee sales on each day of a specific month.,"SELECT e.EmployeeID, o.OrderDate, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS DailySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = %s AND YEAR(o.OrderDate) = %s GROUP BY e.EmployeeID, o.OrderDate;","```sql
SELECT 
    employees.EmployeeID, 
    employees.FirstName, 
    employees.LastName, 
    orders.OrderDate, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM 
    employees
JOIN 
    orders ON employees.EmployeeID = orders.EmployeeID
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE 
    orders.OrderDate >= 'YYYY-MM-01' AND orders.OrderDate < 'YYYY-MM-01' + INTERVAL 1 MONTH
GROUP BY 
    employees.EmployeeID, 
    orders.OrderDate
ORDER BY 
    orders.OrderDate, 
    employees.LastName;
```","Both queries effectively filter and group data to list the employee sales on each day of a specific month. The generated query uses date comparisons with INTERVAL to determine the month, while the ground truth uses MONTH and YEAR functions. Both approaches achieve the same outcome.","SELECT e.FirstName, e.LastName, o.OrderDate, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS employee_sales "" ""FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN 'specific month' AND (LAST_DAY('specific month')) GROUP BY e.EmployeeID, e.FirstName, e.LastName, o.OrderDate","The generated query uses a BETWEEN clause with 'specific month' and 'LAST_DAY', which is incorrect. It should extract the month and year from OrderDate like the ground truth query does.",Base
Identify products whose sales volume exceeds 100 units in the past month.,"SELECT products.ProductName FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderDate >= DATEADD(month, -1, CURRENT_DATE) GROUP BY products.ProductName HAVING SUM([Order Details].Quantity) > 100;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.OrderID IN (
    SELECT OrderID
    FROM [Order Details]
    WHERE OrderDate >= DATEADD(month, -1, GETDATE())
)
GROUP BY p.ProductID, p.ProductName
HAVING SUM(od.Quantity) > 100;
```","The generated query uses GETDATE() instead of CURRENT_DATE, and the subquery structure is unnecessary and inefficient. It also selects ProductID, which the ground truth does not.","SELECT od.ProductID FROM [Order Details] od WHERE od.Quantity > 100 AND od.OrderDate >= DATEADD(month, -1, CURRENT_DATE);",The generated query does not group by ProductID and sum the quantities. It checks individual order quantity instead of total sales volume over the past month.,None
Calculate the total revenue for each shipping country.,"SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry;","```sql
SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY ShipCountry;
```",The generated SQL query accurately answers the user's question and matches the ground truth query by calculating total revenue for each shipping country using the same logic and structure.,"SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry;",Both queries calculate the total revenue per shipping country using the same formula and grouping logic. They are logically equivalent.,both
What is the average lead time for each supplier in delivering their products?,"SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID;","```sql
SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.CompanyName;
```",The generated query groups by suppliers.CompanyName while the ground truth query groups by SupplierID. These groupings may lead to different results if supplier IDs are not unique for each company name.,"SELECT SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM products JOIN orders ON products.ProductID = orders.OrderID GROUP BY SupplierID;","The generated SQL query incorrectly joins 'products' with 'orders' using 'ProductID' and 'OrderID', which are not directly related. It bypasses 'Order Details', leading to incorrect supplier lead times. The ground truth correctly uses 'suppliers', connects 'products' via 'Order Details', and then links to 'orders', ensuring accurate average lead time per supplier.",None
Which employee was hired most recently?,"SELECT FirstName, LastName, HireDate FROM employees ORDER BY HireDate DESC LIMIT 1;","```sql
SELECT * FROM employees
ORDER BY HireDate DESC
LIMIT 1;
```","Both queries order employees by HireDate in descending order and limit the result to the most recently hired employee, thus yielding the same result.","SELECT EmployeeID, FirstName, LastName, HireDate FROM employees ORDER BY HireDate DESC LIMIT 1;",The generated query includes 'EmployeeID' which is not requested in the ground truth query or the user question.,Base
Determine the total quantity sold for each supplier.,"SELECT p.SupplierID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;","```sql
SELECT p.SupplierID, SUM(od.Quantity) AS TotalQuantitySold
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.SupplierID;
```","Both queries join the 'Order Details' and 'products' tables on ProductID, summing quantities grouped by SupplierID.","SELECT p.SupplierID, SUM(od.Quantity) AS TotalQuantitySold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;","Both queries join 'products' and 'Order Details' tables on 'ProductID', group by 'SupplierID', and calculate the sum of 'Quantity'. The join order doesn't affect the result.",both
Identify employees who have processed orders only within a specific country.,SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(DISTINCT o.ShipCountry) = 1 AND MAX(o.ShipCountry) = 'Specific Country';,"```sql
SELECT e.EmployeeID, e.FirstName, e.LastName
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID, e.FirstName, e.LastName
HAVING COUNT(DISTINCT o.ShipCountry) = 1;
```",The generated query does not ensure the orders are processed within a specific country; it just checks if there is only one unique ship country. The ground truth query specifies checking against a 'Specific Country'.,"SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName HAVING COUNT(DISTINCT o.ShipCountry) = 1;","The generated query checks if employees processed orders in only one country, but it doesn't verify if the country is the specific one. The ground truth query ensures the country is the specified one.",None
Calculate the total sales revenue for each supplier for the last quarter.,"SELECT SupplierID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE QUARTER(OrderDate) = QUARTER(CURDATE()) - 1 GROUP BY SupplierID;","```sql
SELECT p.SupplierID, SUM(od.Quantity * od.UnitPrice) AS TotalSalesRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
WHERE o.OrderDate >= DATEADD(quarter, -1, GETDATE())
GROUP BY p.SupplierID
```",The generated query uses GETDATE() to determine the last quarter instead of calculating the quarter using QUARTER() and CURDATE(). This may not accurately capture the intended 'last quarter' period.,"SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS total_sales_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE [Order Details].OrderID IN (SELECT orders.OrderID FROM orders WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30') GROUP BY suppliers.SupplierID, suppliers.CompanyName","The generated query includes a discount calculation, while the ground truth query does not. Additionally, the date range for the last quarter is hardcoded in the generated query, whereas the ground truth dynamically calculates the previous quarter using QUARTER and CURDATE functions.",None
What is the average shipping cost for each shipping company?,"SELECT ShipVia, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, AVG(Freight) AS AverageShippingCost
FROM orders
GROUP BY ShipVia;
```","The generated SQL query calculates the average freight cost for each shipping company by grouping on 'ShipVia' and using AVG on 'Freight', which matches the ground truth query.","SELECT ShipVia, AVG(Freight) FROM orders GROUP BY ShipVia;","Both queries calculate the average freight cost for each shipping company, grouping by ShipVia. The alias in the ground truth does not affect the result.",both
What is the average hiring duration of employees in correlation to their sales?,"SELECT AVG(DATEDIFF(CURDATE(), e.HireDate)) AS AvgHireDuration, AVG(sales.TotalSales) AS AvgSales FROM employees e JOIN (SELECT o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID) sales ON e.EmployeeID = sales.EmployeeID;","```sql
SELECT 
    AVG(DATEDIFF(NOW(), HireDate)) AS AverageHiringDuration, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales 
FROM 
    employees 
LEFT JOIN 
    orders ON employees.EmployeeID = orders.EmployeeID 
LEFT JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID 
GROUP BY 
    employees.EmployeeID
```","The generated query does not calculate the average sales. Instead, it sums the total sales without averaging. The ground truth query calculates average sales per employee, which is aligned with computing an average correlation.","SELECT AVG(DATEDIFF(e.HireDate, e.StartDate)) AS AvgHireDuration, AVG(o.Total) AS AvgTotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID","The generated query calculates the average hire duration based on the difference between HireDate and StartDate, whereas the ground truth query uses the current date and HireDate. Additionally, the sales calculation differs: the generated query uses average Total from orders, while the ground truth sums up specific sales details with discounts.",None
What percentage of products were shipped via each shipping method?,"SELECT ShipVia, COUNT(orders.OrderID) * 100.0 / (SELECT COUNT(*) FROM orders) AS shipping_method_percentage FROM orders GROUP BY ShipVia","```sql
SELECT 
    ShipVia, 
    COUNT(orders.OrderID) * 100.0 / (SELECT COUNT(*) FROM orders) AS percentage_shipped
FROM 
    orders
GROUP BY 
    ShipVia
```",Both queries calculate the percentage of products shipped via each shipping method by grouping by ShipVia and dividing the count by the total number of orders. The results will be the same.,"SELECT ShipVia, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM orders) AS Percentage FROM orders GROUP BY ShipVia;","Both queries calculate the percentage of orders shipped via each shipping method by dividing the count of orders per ShipVia by the total count of orders, then multiplying by 100. The difference is only in alias naming.",both
What is the total discount value given for each order?,"SELECT od.OrderID, SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscount FROM [Order Details] od GROUP BY od.OrderID;","```sql
SELECT OrderID, SUM(Discount) AS TotalDiscount
FROM [Order Details]
GROUP BY OrderID;
```","The generated query sums only the 'Discount' column, while the ground truth multiplies 'Quantity', 'UnitPrice', and 'Discount' to calculate the total discount value for each order.","SELECT OrderID, SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details] GROUP BY OrderID;","Both queries calculate the total discount per order by summing the product of UnitPrice, Quantity, and Discount, grouped by OrderID. The syntax and aliases differ slightly, but the logic and outcome are identical.",FT
What is the correlation between unit price and quantity ordered for each product?,"SELECT ProductID, CORR(UnitPrice, Quantity) AS PriceQuantityCorrelation FROM [Order Details] GROUP BY ProductID;","```sql
SELECT 
    products.ProductID,
    products.ProductName,
    products.UnitPrice,
    SUM([Order Details].Quantity) AS TotalQuantityOrdered,
    CORR(products.UnitPrice, [Order Details].Quantity) AS Correlation
FROM 
    products
JOIN 
    [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY 
    products.ProductID, products.ProductName, products.UnitPrice;
```","The generated query computes correlation per product including grouping by ProductName and UnitPrice, while the ground truth query calculates correlation per ProductID without considering these additional fields. They would yield different results due to these grouping differences.","SELECT ProductID, CORR(UnitPrice, Quantity) AS PriceQuantityCorrelation FROM [Order Details] GROUP BY ProductID;",The generated SQL query accurately replicates the ground truth SQL query and correctly addresses the user's question by computing the correlation between UnitPrice and Quantity for each ProductID.,FT
What is the most common ship region for orders?,"SELECT orders.ShipRegion, COUNT(orders.OrderID) AS RegionCount FROM orders GROUP BY orders.ShipRegion ORDER BY RegionCount DESC LIMIT 1;","```sql
SELECT ShipRegion, COUNT(*) AS OrderCount
FROM orders
GROUP BY ShipRegion
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries count orders per ShipRegion, order by the count in descending order, and limit the results to one, thus answering the user's question correctly.","SELECT ShipRegion, COUNT(OrderID) AS NumOrders FROM orders GROUP BY ShipRegion ORDER BY NumOrders DESC LIMIT 1;",Both queries calculate the number of orders per ShipRegion and sort them in descending order to find the most common. The results will be the same.,both
What is the inventory turnover ratio for each product category in June 2023?,"SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE DATE_FORMAT(orders.OrderDate, '%Y-%m') = '2023-06' GROUP BY categories.CategoryName","```sql
SELECT categories.CategoryID, 
       SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio 
FROM [Order Details] 
JOIN products ON [Order Details].ProductID = products.ProductID 
JOIN categories ON products.CategoryID = categories.CategoryID 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-06-01' AND '2023-06-30' 
GROUP BY categories.CategoryID
```","The generated query uses CategoryID for grouping and output, while the ground truth uses CategoryName. This may affect the results if CategoryID to CategoryName mapping is not one-to-one.","SELECT products.CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderDate BETWEEN '2023-06-01' AND '2023-06-30' GROUP BY products.CategoryID",The generated query uses products.CategoryID instead of categories.CategoryName and does not join with the categories table. It also does not use the DATE_FORMAT function to filter by the month of June 2023.,None
"Are there any orders with zero freight costs, and if so, how many?",SELECT COUNT(OrderID) FROM orders WHERE Freight = 0;,"```sql
SELECT COUNT(*) AS ZeroFreightOrders
FROM orders
WHERE Freight = 0;
```","Both queries count the number of orders where the Freight cost is zero, using COUNT(*), and COUNT(OrderID) respectively, which yield the same result.",SELECT COUNT(*) AS ZeroFreightOrders FROM orders WHERE Freight = 0;,Both queries count orders with zero freight costs. COUNT(*) and COUNT(OrderID) give the same result as both determine the number of rows meeting the condition.,both
Which employee has the highest sales in the western region?,"SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID WHERE territories.RegionID = (SELECT RegionID FROM region WHERE RegionDescription = 'Western') GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1","```sql
SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
JOIN employees ON orders.EmployeeID = employees.EmployeeID
JOIN territories ON employees.EmployeeID = employeeTerritories.EmployeeID
JOIN region ON territories.RegionID = region.RegionID
WHERE region.RegionDescription = 'Western'
GROUP BY employees.EmployeeID
ORDER BY total_sales DESC
LIMIT 1;
```",The generated query lacks the JOIN with employeeTerritories and specifies the wrong JOIN condition for territories. It may fail without these elements.,"SELECT employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.ShipRegion = 'Western Region' GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName ORDER BY total_sales DESC LIMIT 1","The generated query uses the ShipRegion from orders, assuming it's labeled 'Western Region.' The ground truth query uses a join to find the RegionID related to 'Western' from the region table, which ensures a more precise match. The two methods may not identify the same region records, leading to potentially different results.",None
Find the trend of order fulfillment time over the last year.,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM 
    orders
WHERE 
    OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries calculate the average order fulfillment time per month for the last year. They use the same logic and functions, with only minor differences in alias naming and function choice (CURDATE vs CURRENT_DATE) but yield the same results.","SELECT MONTH(o.OrderDate) AS OrderMonth, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgFulfillmentTime FROM orders o WHERE o.OrderDate >= DATEADD(year, -1, CURRENT_DATE) GROUP BY OrderMonth;","The generated query groups by month only, while the ground truth query groups by year and month, potentially aggregating data differently. Additionally, the generated query lacks an ORDER BY clause, which could affect result ordering.",Base
Find the top 5 customers by lifetime value.,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY LifetimeValue DESC LIMIT 5;","```sql
SELECT 
    c.CustomerID, 
    c.CompanyName, 
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue
FROM 
    customers c
JOIN 
    orders o ON c.CustomerID = o.CustomerID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    c.CustomerID, c.CompanyName
ORDER BY 
    LifetimeValue DESC
LIMIT 5;
```","Both queries calculate the lifetime value by summing up the order total for each customer and then order the results in descending order, limiting the output to the top 5 customers. The only difference is the Generated SQL includes 'CompanyName' in the select and group by clauses, which does not alter the intended result.","SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC LIMIT 5","Both queries calculate the lifetime value by summing the product of unit price, quantity, and discount for each customer, and then order the results to find the top 5 customers. The differences in query structure do not affect the outcome.",both
Which month had the highest number of orders?,"SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EXTRACT(MONTH FROM OrderDate) ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT DATE_TRUNC('month', OrderDate) AS OrderMonth, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY OrderMonth
ORDER BY NumberOfOrders DESC
LIMIT 1;
```","The generated query groups by entire months (e.g., January 2022) while the ground truth groups by any January across all years.","SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) AS NumOrders FROM orders GROUP BY Month ORDER BY NumOrders DESC LIMIT 1;","Both queries extract the month from OrderDate, group by month, count the orders, and return the month with the highest number of orders, which means they yield the same results.",FT
What percentage of customers are returning customers within the last month?,SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN CURRENT_DATE - INTERVAL '1 month' AND CURRENT_DATE THEN orders.CustomerID END) / COUNT(DISTINCT orders.CustomerID)) * 100 AS RetentionRate FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate < CURRENT_DATE - INTERVAL '1 month';,"```sql
SELECT 
    (COUNT(DISTINCT o1.CustomerID) * 100.0) / COUNT(DISTINCT o2.CustomerID) AS ReturningCustomerPercentage
FROM 
    orders o1
JOIN 
    orders o2 ON o1.CustomerID = o2.CustomerID
WHERE 
    o1.OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) 
    AND o1.OrderDate < CURRENT_DATE
    AND o2.OrderDate < DATEADD(MONTH, -1, CURRENT_DATE);
```","The generated query excludes customers who only made orders in the current month, while the ground truth includes them in the total count for calculation. Additionally, the generated query uses non-ANSI DATEADD and CURRENT_DATE instead of ANSI INTERVAL and current_date.","SELECT (COUNT(DISTINCT o1.CustomerID) FILTER (WHERE o1.OrderDate BETWEEN '2023-09-01' AND '2023-09-30') * 100.0 / NULLIF((SELECT COUNT(DISTINCT o2.CustomerID) FROM orders o2 WHERE o2.OrderDate < '2023-09-01'), 0)) AS ReturningCustomerRate FROM orders o1 WHERE o1.OrderDate BETWEEN '2023-09-01' AND '2023-09-30';","The generated query calculates the percentage of customers in the last month who also ordered in the previous months, but it does not correctly account for the customers who ordered before the last month. The ground truth query compares distinct customers over the last month to total distinct customers, which ensures the right retention rate calculation.",None
What is the total number of orders placed per month?,"SELECT TO_CHAR(o.OrderDate, 'YYYY-MM') AS Month, COUNT(o.OrderID) AS NumberOfOrders FROM orders o GROUP BY TO_CHAR(o.OrderDate, 'YYYY-MM');","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, COUNT(OrderID) AS TotalOrders
FROM orders
GROUP BY OrderMonth
```",Both queries calculate the total number of orders per month by formatting the 'OrderDate' and using COUNT on 'OrderID'. The functions DATE_FORMAT and TO_CHAR are equivalent for this purpose.,"SELECT EXTRACT(YEAR FROM OrderDate) AS year, EXTRACT(MONTH FROM OrderDate) AS month, COUNT(OrderID) AS total_orders FROM orders GROUP BY year, month;","Both queries group orders by year and month and count the total number of orders, yielding the same result.",both
What is the frequency distribution of order quantities?,"SELECT Quantity, COUNT(*) AS Frequency FROM [Order Details] GROUP BY Quantity ORDER BY Frequency DESC;","```sql
SELECT Quantity, COUNT(*) AS Frequency
FROM [Order Details]
GROUP BY Quantity
ORDER BY Quantity;
```","The generated query sorts the results by Quantity, while the ground truth query sorts by Frequency in descending order. The outputs will differ in order.","SELECT Quantity, COUNT(*) AS Frequency FROM [Order Details] GROUP BY Quantity;","Both queries provide the frequency distribution of order quantities, with the only difference being the order of results, which doesn't affect the accuracy of the answer to the user's question.",FT
What is the most common shipping method used?,"SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT ShipVia, COUNT(*) AS MethodCount
FROM orders
GROUP BY ShipVia
ORDER BY MethodCount DESC
LIMIT 1;
```","Both queries correctly count the occurrences of each ShipVia value and return the most common one, despite using different column aliases.","SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC;","The generated query does not limit the result to one row, whereas the ground truth query uses LIMIT 1 to return only the most common shipping method.",Base
What is the average shipping cost per order each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY Month;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AverageShippingCost
FROM orders
GROUP BY Month
```","Both queries calculate the average shipping cost per order each month. The difference in date formatting functions (DATE_FORMAT vs DATE_TRUNC) is due to SQL dialect differences, but they serve the same purpose of truncating the date to the month level.","SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, AVG(orders.Freight) AS AvgShippingCost FROM orders GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m');","Both queries calculate the average shipping cost per order each month, using different methods to extract the month from OrderDate.",both
Identify the product with the highest inventory turnover ratio.,"SELECT p.ProductID, (SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0)) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY InventoryTurnoverRatio DESC LIMIT 1;","```sql
SELECT p.ProductID, p.ProductName, 
       SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY InventoryTurnoverRatio DESC
LIMIT 1;
```","The generated query includes ProductName in the SELECT and GROUP BY clauses, which isn't present in the ground truth query. This results in different outputs since ProductName can cause a different aggregation behavior. Additionally, the ground truth query handles division by zero with NULLIF, which is missing in the generated query.","SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) DESC LIMIT 1;","The generated query selects ProductName, while the ground truth query uses ProductID. Both calculate the turnover ratio similarly, but without matching columns, the results differ.",None
What is the trend of total sales revenue over the quarters?,"SELECT DATE_TRUNC('quarter', o.OrderDate) AS Quarter, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Quarter ORDER BY Quarter;","```sql
SELECT 
    DATE_FORMAT(ORDER_DATE, '%Y-Q%q') AS Quarter, 
    SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS Total_Sales
FROM 
    orders O
JOIN 
    [Order Details] OD ON O.OrderID = OD.OrderID
GROUP BY 
    Quarter
ORDER BY 
    Quarter;
```","The generated SQL query formats the quarter as 'YYYY-Qq', which may not align with how quarters are typically aggregated; ground truth uses DATE_TRUNC with 'quarter' for date aggregation.","SELECT DATE_TRUNC('quarter', o.OrderDate) AS Quarter, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Quarter ORDER BY Quarter;",Both queries are identical and correctly calculate the total sales revenue per quarter.,FT
Compute the total inventory value grouped by supplier.,"SELECT SupplierID, SUM(UnitPrice * UnitsInStock) as InventoryValue FROM products GROUP BY SupplierID;","```sql
SELECT p.SupplierID, SUM(p.UnitPrice * p.UnitsInStock) AS TotalInventoryValue
FROM products p
GROUP BY p.SupplierID;
```",Both queries calculate the total inventory value grouped by SupplierID using the same logic and fields.,"SELECT SupplierID, SUM(UnitPrice * UnitsInStock) AS InventoryValue FROM products GROUP BY SupplierID;","The generated SQL query and the ground truth SQL query are effectively the same, as both calculate the total inventory value grouped by SupplierID using the same logic.",both
Identify customers who have never received a discount.,SELECT CustomerID FROM customers WHERE NOT EXISTS (SELECT 1 FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE customers.CustomerID = o.CustomerID AND od.Discount > 0);,"```sql
SELECT DISTINCT c.CustomerID, c.CompanyName
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE od.Discount = 0;
```","The generated query only filters orders with a discount of 0, but it doesn't check if the customer never received any discount across all orders. The ground truth query ensures the customer does not have any order with a discount greater than 0.",SELECT CustomerID FROM orders GROUP BY CustomerID HAVING SUM(CASE WHEN Discount > 0 THEN 1 ELSE 0 END) = 0;,"Both queries effectively identify customers who have never received a discount. The generated query checks customers in the 'orders' table directly, ensuring no discounts applied, while the ground truth query cross-references with the 'Order Details' for any discounts. Both approaches yield the same result.",FT
"What are the top 5 products by sales revenue, and which suppliers provide them?","SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue, p.SupplierID FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY od.ProductID, p.SupplierID ORDER BY TotalRevenue DESC LIMIT 5;","```sql
SELECT 
    p.ProductName, 
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue, 
    s.CompanyName 
FROM 
    products p 
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID 
JOIN 
    suppliers s ON p.SupplierID = s.SupplierID 
GROUP BY 
    p.ProductName, s.CompanyName 
ORDER BY 
    TotalRevenue DESC 
LIMIT 5;
```","The generated query provides product names and supplier names, while the ground truth query provides product and supplier IDs. The expected output format differs between the two queries.","SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue, suppliers.CompanyName FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY products.ProductName, suppliers.CompanyName ORDER BY TotalRevenue DESC LIMIT 5;","The generated query retrieves product names and supplier names, while the ground truth query retrieves product IDs and supplier IDs. Additionally, the generated query limits by product names, whereas the ground truth groups by ProductID and SupplierID.",None
Which customer generated the highest revenue in the last year?,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY customers.CustomerID ORDER BY TotalRevenue DESC LIMIT 1;","```sql
SELECT c.CustomerID, c.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= DATEADD(year, -1, GETDATE())
GROUP BY c.CustomerID, c.CompanyName
ORDER BY TotalRevenue DESC
LIMIT 1;
```","The generated query uses GETDATE() and DATEADD to cover the last 365 days, while the ground truth query uses YEAR(CURRENT_DATE) - 1 to specify the entire previous year.","SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2022-10-01' AND '2023-09-30' GROUP BY customers.CustomerID ORDER BY total_revenue DESC LIMIT 1","The date range in the generated query does not strictly represent 'last year' based on the current date, which is what the ground truth query attempts to do by calculating using YEAR(CURRENT_DATE) - 1.",None
What is the average customer rating per order (assuming ratings are stored)?,"SELECT OrderID, AVG(Rating) AS AvgRating FROM RatingsTable GROUP BY OrderID","```sql
SELECT AVG(CustomerRating) AS AverageCustomerRating
FROM orders
JOIN CustomerRatings ON orders.OrderID = CustomerRatings.OrderID
GROUP BY orders.OrderID;
```","Both queries calculate the average rating for each order. The 'Generated SQL Query' uses JOIN and assumes different table names, but achieves the same goal with GROUP BY orders.OrderID.","```sql
SELECT AVG(o.CustomerRating) AS avg_rating FROM orders o WHERE o.CustomerRating IS NOT NULL;
```","The generated query calculates the average rating across all orders, while the ground truth query calculates the average rating per individual order.",Base
What percentage of products are currently discontinued?,SELECT (COUNT(CASE WHEN Discontinued = 1 THEN ProductID END) * 1.0 / COUNT(ProductID) * 100) AS PercentageDiscontinued FROM products;,"```sql
SELECT 
    (SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS DiscontinuedPercentage
FROM 
    products;
```","Both queries calculate the percentage of discontinued products, dividing the count of discontinued products by the total number of products and multiplying by 100.",SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM products WHERE Discontinued = 0)) AS discontinued_percentage FROM products WHERE Discontinued = 1,"The generated SQL query divides the count of discontinued products by the count of non-discontinued products, while the ground truth divides by the total number of products.",Base
What percentage of orders were delivered on time in June 2023?,SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-06-01' AND '2023-06-30',"```sql
SELECT (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID)) AS on_time_delivery_rate 
FROM orders 
WHERE orders.OrderDate BETWEEN '2023-06-01' AND '2023-06-30'
```","Both queries produce the same results by calculating the percentage of on-time deliveries for orders placed in June 2023. They differ only in whitespace, not in logic or output.",SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE MONTH(orders.OrderDate) = 6 AND YEAR(orders.OrderDate) = 2023,Both queries calculate the percentage of on-time deliveries for June 2023. They use different methods to filter dates but yield the same result.,both
What is the most common discount given on products?,"SELECT [Order Details].Discount, COUNT(*) AS count FROM [Order Details] GROUP BY [Order Details].Discount ORDER BY count DESC LIMIT 1","```sql
SELECT Discount, COUNT(*) AS discount_count
FROM [Order Details]
GROUP BY Discount
ORDER BY discount_count DESC
LIMIT 1;
```","Both queries calculate the most common discount by counting occurrences of each discount value, grouping by the discount, and ordering in descending order to pick the highest count. The SQL logic is equivalent.","SELECT orders.Discount, COUNT(*) AS Frequency FROM [Order Details] orders GROUP BY orders.Discount ORDER BY Frequency DESC LIMIT 1;","Both queries select the discount and count the frequency of each discount, ordering by the highest frequency with a limit of 1 to find the most common discount. They will yield the same results.",both
"Which customers have placed orders totaling more than $10,000?","SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSpent FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID HAVING TotalSpent > 10000;","```sql
SELECT c.CustomerID, c.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSpent
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.CustomerID, c.CompanyName
HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 10000;
```","Both queries correctly calculate and filter customers who have placed orders totaling more than $10,000, considering the SUM of UnitPrice multiplied by Quantity and Discount.","SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 10000;","The generated query does not use the 'customers' table, which is essential to identify which customers placed orders totaling more than $10,000. Therefore, it only checks totals based on the orders without confirming customer identity.",Base
How does the shipping cost vary by region?,"SELECT ShipRegion, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipRegion;","```sql
SELECT ShipRegion, AVG(Freight) AS AverageShippingCost
FROM orders
GROUP BY ShipRegion;
```","The generated SQL query correctly calculates the average shipping cost by region in the 'orders' table, which matches the purpose of the ground truth query.","SELECT ShipRegion, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipRegion;","The generated SQL query and the ground truth query are identical, so they both accurately answer the user's question about how shipping cost varies by region.",both
Which product has the highest sales volume this quarter?,"SELECT products.ProductID, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE QUARTER(orders.OrderDate) = QUARTER(CURDATE()) AND YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY products.ProductID ORDER BY sales_volume DESC LIMIT 1","```sql
SELECT products.ProductID, SUM([Order Details].Quantity) AS sales_volume 
FROM [Order Details] 
JOIN products ON [Order Details].ProductID = products.ProductID 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) 
GROUP BY products.ProductID 
ORDER BY sales_volume DESC 
LIMIT 1
```","Both queries calculate the sales volume by summing the quantity from the current quarter and order them in descending order, limiting to the top product. The date functions used ('DATE_TRUNC' vs 'QUARTER' and 'YEAR') are functionally equivalent in this context.",SELECT products.ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE QUARTER(orders.OrderDate) = QUARTER(CURDATE()) AND YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY products.ProductName ORDER BY SUM([Order Details].Quantity) DESC LIMIT 1,"The generated query selects ProductName, while the ground truth query selects ProductID. Both queries use the same logic to determine the highest sales volume, but they produce different outputs, one being the product name and the other being the product ID.",Base
What is the total discount amount applied by each employee?,"SELECT employees.EmployeeID, SUM([Order Details].Discount * [Order Details].UnitPrice * [Order Details].Quantity) AS TotalDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID","```sql
SELECT employees.EmployeeID, 
       employees.FirstName, 
       employees.LastName, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount
FROM employees
JOIN orders ON employees.EmployeeID = orders.EmployeeID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName;
```","Both queries calculate the total discount amount applied by each employee using the product of UnitPrice, Quantity, and Discount. The generated query includes employee names in the output, but this does not affect the discount calculation result.","SELECT e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName;","The generated query includes first and last names in the SELECT clause and GROUP BY clause. The ground truth query groups only by EmployeeID and does not select first or last names. Both queries calculate the total discount the same way, but the inclusion of additional columns affects grouping, which may yield different results.",Base
Calculate the sales growth percentage for each employee from the previous month.,"SELECT e.EmployeeID, ((SUM(CASE WHEN MONTH(o.OrderDate) = 6 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END) - SUM(CASE WHEN MONTH(o.OrderDate) = 5 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END)) / NULLIF(SUM(CASE WHEN MONTH(o.OrderDate) = 5 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END), 0)) * 100 AS GrowthPercentage FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] ON o.OrderID = [Order Details].OrderID GROUP BY e.EmployeeID;","```sql
SELECT 
    e.EmployeeID, 
    e.FirstName, 
    e.LastName, 
    COALESCE(SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) END), 0) AS LastMonthSales,
    COALESCE(SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) END), 0) AS CurrentMonthSales,
    CASE 
        WHEN COALESCE(SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) END), 0) = 0 
        THEN NULL
        ELSE (COALESCE(SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) END), 0) - 
              COALESCE(SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) END), 0)) / 
              COALESCE(SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) END), 0) * 1.0 * 100 
    END AS SalesGrowthPercentage
FROM 
    employees e 
LEFT JOIN 
    orders o ON e.EmployeeID = o.EmployeeID 
LEFT JOIN 
    [Order Details] od ON o.OrderID = od.OrderID 
GROUP BY 
    e.EmployeeID, e.FirstName, e.LastName;
```","The generated query uses dynamic current month calculations, while the ground truth query explicitly uses months 5 and 6. Additionally, the generated query uses COALESCE and LEFT JOIN while the ground truth uses JOIN and NULLIF.","SELECT e.EmployeeID, ((SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) / NULLIF(SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END), 0)) * 100 AS SalesGrowth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","The generated query uses CURRENT_DATE to dynamically calculate the current and previous month, while the ground truth query uses static months (June and May). This results in different calculations depending on when the query is executed.",None
What is the total sales revenue generated by each supplier?,"SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID, suppliers.CompanyName;","```sql
SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.CompanyName;
```","Both queries calculate the total sales revenue by joining suppliers, products, and order details, and grouping by company name. The ground truth query also includes SupplierID in the SELECT and GROUP BY clauses, which does not affect the total sales calculation per supplier.","SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;","The generated query does not include the 'CompanyName' in the SELECT and GROUP BY clauses, which is present in the ground truth query. This affects the structure of the output since both SupplierID and CompanyName are requested.",Base
How do discount rates impact the average order value?,"SELECT AVG(([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) AS avg_order_value, [Order Details].Discount FROM [Order Details] GROUP BY [Order Details].Discount","```sql
SELECT AVG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) AS avg_order_value, 
       [Order Details].Discount
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY [Order Details].Discount
```","The generated query incorrectly uses SUM inside AVG, which alters the result. It calculates the average of totals rather than individual contributions per order detail.","SELECT avg(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS avg_order_value_no_discount, COUNT(DISTINCT o.OrderID) AS number_of_orders FROM [Order Details] od INNER JOIN orders o ON od.OrderID = o.OrderID WHERE od.Discount = 0","The generated SQL query calculates the average order value with no discount applied and only for orders with a discount rate of 0, while the ground truth query calculates the average order value grouped by each discount rate, allowing for an analysis of different rates on order value.",None
"What is the maximum, minimum, and average shipping cost for orders shipped within Europe?","SELECT MAX(Freight) AS MaxCost, MIN(Freight) AS MinCost, AVG(Freight) AS AvgCost FROM orders WHERE ShipCountry IN ('France', 'Germany', 'Italy');","```sql
SELECT 
    MAX(Freight) AS MaxShippingCost,
    MIN(Freight) AS MinShippingCost,
    AVG(Freight) AS AvgShippingCost
FROM 
    orders
WHERE 
    ShipRegion IN ('France', 'Germany', 'Italy', 'Spain', 'United Kingdom', 'Netherlands', 'Belgium', 'Sweden', 'Austria', 'Denmark', 'Finland', 'Norway', 'Ireland', 'Portugal', 'Greece', 'Poland', 'Czech Republic', 'Hungary', 'Romania', 'Slovakia', 'Croatia', 'Slovenia', 'Lithuania', 'Latvia', 'Estonia', 'Cyprus', 'Malta');
```","The generated query uses 'ShipRegion' while the ground truth query uses 'ShipCountry'. They may refer to different columns. Also, the list of countries in the generated query is more extensive.","SELECT MAX(Freight) AS MaxFreight, MIN(Freight) AS MinFreight, AVG(Freight) AS AvgFreight FROM orders WHERE ShipCountry IN ('France', 'Germany', 'UK', 'Sweden', 'Italy', 'Spain');","The generated query considers additional countries (UK, Sweden, and Spain) which leads to different results compared to the ground truth query that includes only France, Germany, and Italy.",None
List the top 5 products with the highest inventory levels.,SELECT ProductName FROM products ORDER BY UnitsInStock DESC LIMIT 5;,"```sql
SELECT ProductID, ProductName, UnitsInStock
FROM products
ORDER BY UnitsInStock DESC
LIMIT 5;
```","The generated SQL query correctly lists the top 5 products with the highest inventory levels, including ProductID and UnitsInStock, which aligns with the user question's intent.",SELECT ProductName FROM products ORDER BY UnitsInStock DESC LIMIT 5;,"Both queries select ProductName from the products table, order by UnitsInStock in descending order, and limit the result to the top 5, making them functionally equivalent.",both
Identify employees with a salary above the average and who have generated above-average sales.,"WITH AvgSalary AS (SELECT AVG(Salary) AS AvgSal FROM employees), AvgSales AS (SELECT AVG(TotalSales) AS AvgEmpSales FROM (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID) Sub) SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e JOIN AvgSalary a ON e.Salary > a.AvgSal JOIN (SELECT e2.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS EmpSales FROM employees e2 JOIN orders o2 ON e2.EmployeeID = o2.EmployeeID JOIN [Order Details] od ON o2.OrderID = od.OrderID GROUP BY e2.EmployeeID) s ON e.EmployeeID = s.EmployeeID JOIN AvgSales av ON s.EmpSales > av.AvgEmpSales;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, e.Salary
FROM employees e
JOIN (
    SELECT EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
    FROM orders o
    JOIN [Order Details] od ON o.OrderID = od.OrderID
    GROUP BY o.EmployeeID
) sales ON e.EmployeeID = sales.EmployeeID
WHERE e.Salary > (SELECT AVG(Salary) FROM employees)
AND sales.TotalSales > (SELECT AVG(TotalSales) FROM (
    SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
    FROM orders o
    JOIN [Order Details] od ON o.OrderID = od.OrderID
    GROUP BY o.EmployeeID
) AS salesAvg);
```","Both queries correctly identify employees with salaries and total sales above the average. They calculate average salary and sales, and filter accordingly.","SELECT e.FirstName, e.LastName FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName HAVING e.RowState = 'Modified' ORDER BY e.EmployeeID;","The generated SQL query does not address the user's requirement. It lacks the necessary calculations to compare employee salaries and sales figures against their respective averages. Instead, it mistakenly filters on e.RowState = 'Modified', and orders results by EmployeeID without proper aggregations or conditions.",Base
How many different customers placed orders in January 2022?,SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate BETWEEN '2022-01-01' AND '2022-01-31';,"```sql
SELECT COUNT(DISTINCT CustomerID) 
FROM orders 
WHERE OrderDate BETWEEN '2022-01-01' AND '2022-01-31';
```",The generated SQL query and the ground truth query are identical in logic. Both count the distinct CustomerID for orders placed within January 2022.,SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-01-31',Both queries select the distinct count of CustomerID from the orders table where OrderDate is within the specified range. The difference in SQL syntax does not affect the result.,both
Find products with below-average unit prices.,SELECT ProductName FROM products WHERE UnitPrice < (SELECT AVG(UnitPrice) FROM products);,"```sql
SELECT ProductID, ProductName, UnitPrice
FROM products
WHERE UnitPrice < (SELECT AVG(UnitPrice) FROM products);
```","The generated query returns ProductID, ProductName, and UnitPrice, while the ground truth query returns only ProductName.",SELECT ProductName FROM products WHERE UnitPrice < (SELECT AVG(UnitPrice) FROM products);,Both queries find products with unit prices below the average by comparing each product's UnitPrice to the average UnitPrice calculated from the products table.,FT
Determine the most frequently ordered product.,"SELECT ProductID, COUNT(ProductID) AS OrderFrequency FROM [Order Details] GROUP BY ProductID ORDER BY OrderFrequency DESC LIMIT 1;","```sql
SELECT ProductID, SUM(Quantity) AS TotalQuantity
FROM [Order Details]
GROUP BY ProductID
ORDER BY TotalQuantity DESC
LIMIT 1;
```","The generated query calculates based on total quantity ordered, while the ground truth query counts the frequency of orders for each product.","SELECT ProductID, COUNT(*) AS OrderCount FROM [Order Details] GROUP BY ProductID ORDER BY OrderCount DESC LIMIT 1;","Both queries count the occurrences of each ProductID in the [Order Details] table and order by the count in descending order, limiting the result to one, determining the most frequently ordered product.",FT
Identify the products with the highest discount rate.,"SELECT od.ProductID, MAX(od.Discount) AS MaxDiscount FROM [Order Details] od GROUP BY od.ProductID ORDER BY MaxDiscount DESC","```sql
SELECT p.ProductID, p.ProductName, od.Discount
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
ORDER BY od.Discount DESC
LIMIT 1;
```","The generated SQL query retrieves only one product with the highest individual discount, whereas the ground truth query finds the highest discount for each product and orders them to identify the product with the highest maximum discount rate.","SELECT ProductID, MAX(Discount) AS MaxDiscount FROM [Order Details] GROUP BY ProductID ORDER BY MaxDiscount DESC LIMIT 1;","The generated SQL query returns only the top product with the highest discount due to LIMIT 1, while the ground truth query returns all products sorted by discount.",None
What is the total value of products currently in stock?,SELECT SUM(UnitPrice * UnitsInStock) AS TotalStockValue FROM products;,"```sql
SELECT SUM(UnitPrice * UnitsInStock) AS TotalValueInStock
FROM products
WHERE Discontinued = 0;
```","The generated query includes a condition to exclude discontinued products (Discontinued = 0), while the ground truth query does not apply this condition.",SELECT SUM(products.UnitPrice * products.UnitsInStock) AS TotalStockValue FROM products WHERE products.Discontinued = 0;,"The generated query filters out discontinued products, whereas the ground truth query does not apply this filter, potentially resulting in different totals.",None
What is the average fulfillment time for orders shipped by each method?,"SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY ShipVia;
```",The generated SQL query is identical to the ground truth query and accurately answers the user's question.,"SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia;","The queries use different aliases for the average fulfillment time, but they both compute the same result, which is the average number of days between the OrderDate and ShippedDate for each shipping method (ShipVia).",both
Find the distribution of employee sales across different regions.,"SELECT e.EmployeeID, o.ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, o.ShipRegion;","```sql
SELECT e.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.Region;
```","The generated query groups by e.Region, while the ground truth query groups by EmployeeID and ShipRegion, indicating a focus on employee-specific sales distribution in regions.","SELECT employees.EmployeeID, employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, employees.Region","The generated query uses 'Region' from the 'employees' table, whereas the ground truth query uses 'ShipRegion' from the 'orders' table for regional distribution.",None
Compare the sales performance of all products per quarter.,"SELECT p.ProductName, DATE_TRUNC('quarter', o.OrderDate) AS Quarter, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID GROUP BY p.ProductName, Quarter;","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    SUM(od.Quantity) AS TotalSales, 
    DATEPART(YEAR, o.OrderDate) AS SalesYear, 
    DATEPART(QUARTER, o.OrderDate) AS SalesQuarter
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
JOIN 
    orders o ON od.OrderID = o.OrderID
GROUP BY 
    p.ProductID, 
    p.ProductName, 
    DATEPART(YEAR, o.OrderDate), 
    DATEPART(QUARTER, o.OrderDate)
ORDER BY 
    SalesYear, 
    SalesQuarter, 
    TotalSales DESC;
```","The generated SQL query includes ProductID, Year, and orders the results, while the ground truth does not include Year or ordering. The ground truth uses DATE_TRUNC for quarters which differs from DATEPART's approach.","SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity, EXTRACT(QUARTER FROM orders.OrderDate) AS quarter FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductName, quarter ORDER BY quarter;","Both queries group sales data by product and quarter, summing the quantity sold. Differences in syntax (EXTRACT vs. DATE_TRUNC) do not affect the result, as both effectively achieve the same quarter extraction.",FT
Find orders that were shipped after the required date and provide their details.,SELECT * FROM orders WHERE ShippedDate > RequiredDate;,"```sql
SELECT *
FROM orders
WHERE ShippedDate > RequiredDate;
```","The generated SQL query correctly finds orders where the ShippedDate is later than the RequiredDate, which matches the ground truth query.",SELECT * FROM orders WHERE ShippedDate > RequiredDate;,"Both queries filter orders where the ShippedDate is greater than the RequiredDate, thus they yield the same results.",both
What is the average order fulfillment time for each shipping method?,"SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS average_fulfillment_time FROM orders GROUP BY ShipVia;","```sql
SELECT orders.ShipVia, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_order_fulfillment_time
FROM orders
GROUP BY orders.ShipVia
```",Both queries calculate the average fulfillment time for each shipping method by grouping on the ShipVia column. They apply the same DATEDIFF function and aggregation.,"SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia;","Both queries calculate the average fulfillment time by grouping orders by ShipVia. The differences are only in the alias naming, which doesn't affect the result.",both
What is the total sales revenue for the current year?,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE),"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE())
```",The generated SQL query and the ground truth query are effectively equivalent because CURDATE() and CURRENT_DATE both return the current date in SQL and the rest of the query logic is the same.,SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()),"Both queries calculate total sales revenue for the current year by joining 'orders' and 'Order Details', then summing the product of UnitPrice, Quantity, and Discount for matching rows where the year of OrderDate matches the current year. Functions CURDATE() and CURRENT_DATE are equivalent.",both
How many customers have ordered more than 10 times?,SELECT COUNT(*) FROM (SELECT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 10) AS subquery;,"```sql
SELECT COUNT(DISTINCT CustomerID) AS CustomerCount
FROM orders
GROUP BY CustomerID
HAVING COUNT(OrderID) > 10;
```","Both queries count distinct customers who have more than 10 orders. The generated query directly groups by CustomerID in the orders table, while the ground truth query performs a similar aggregation through a subquery. Both yield the same result.",SELECT COUNT(DISTINCT CustomerID) FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 10;,Both queries count the number of distinct customers with more than 10 orders by grouping OrderID per CustomerID and applying the HAVING clause.,both
What is the total sales revenue generated by each product?,"SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSalesRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName;
```","Both queries calculate the total sales revenue for each product by summing the product of quantity and unit price, and group the results by product. Differences in syntax do not affect the result alignment.","SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;","The generated SQL query includes a discount factor in the revenue calculation, while the ground truth query does not. Therefore, they yield different results.",Base
What is the total sales value generated by each employee in the last month?,"SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND o.OrderDate < CURDATE() GROUP BY e.EmployeeID, e.FirstName, e.LastName;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= DATEADD(MONTH, -1, GETDATE())
GROUP BY e.EmployeeID, e.FirstName, e.LastName
```","The generated query includes sales from dates one month before the current date to now, not specifically the previous calendar month. It uses DATEADD, which might not behave the same as DATE_SUB and CURDATE() used in the ground truth.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) GROUP BY employees.EmployeeID;","The generated query uses DATEADD and CURRENT_DATE, which may not align with DATE_SUB and CURDATE used in the ground truth query for date calculations. Also, the ground truth query includes employee names in the GROUP BY clause.",None
Calculate the average order size in terms of total items.,"SELECT AVG(TotalItems) AS AverageOrderSize FROM (SELECT OrderID, SUM(Quantity) AS TotalItems FROM [Order Details] GROUP BY OrderID) AS OrderSizes;","```sql
SELECT AVG(total_items) AS average_order_size
FROM (
    SELECT OrderID, SUM(Quantity) AS total_items
    FROM [Order Details]
    GROUP BY OrderID
) AS order_totals;
```",Both queries calculate the average number of items per order by aggregating the Quantity from the Order Details table grouped by OrderID and then taking the average of the summed quantities. The difference in naming ('total_items' vs. 'TotalItems') does not affect the outcome.,SELECT AVG([Order Details].Quantity) AS AverageOrderSize FROM [Order Details];,"The generated query calculates the average quantity per order detail row, while the ground truth query calculates the average total items per order, grouping by OrderID.",Base
Find employees whose most common shipment destination is outside their country of residence.,"SELECT e.FirstName, e.LastName, most_common.ShipCountry FROM (SELECT o.EmployeeID, o.ShipCountry, COUNT(*) as cnt, RANK() OVER (PARTITION BY o.EmployeeID ORDER BY COUNT(*) DESC) as rnk FROM orders o GROUP BY o.EmployeeID, o.ShipCountry) as most_common JOIN employees e ON e.EmployeeID = most_common.EmployeeID WHERE most_common.rnk = 1 AND most_common.ShipCountry <> e.Country;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, e.Country, 
       COUNT(o.ShipCountry) AS DestinationCount
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID, e.FirstName, e.LastName, e.Country
HAVING o.ShipCountry <> e.Country
ORDER BY DestinationCount DESC;
```","The generated query incorrectly uses HAVING to filter by unmatched countries, ignoring the need to find the most common destination first.",SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(DISTINCT CASE WHEN o.ShipCountry != e.Country THEN o.ShipCountry END) > 0 AND COUNT(DISTINCT o.ShipCountry) = 1;,"The generated query checks if there exists a shipment outside the employee's country, but it doesn't specifically find the most common shipment destination. The ground truth query correctly ranks destinations by count and checks if the top one is outside the employee's residence country.",None
What is the total freight cost per region?,"SELECT ShipRegion, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipRegion;","```sql
SELECT ShipRegion, SUM(Freight) AS TotalFreightCost
FROM orders
GROUP BY ShipRegion;
```","The generated SQL query accurately answers the user's question by grouping the orders by 'ShipRegion' and calculating the total 'Freight' cost for each region, which is identical to the ground truth query.","SELECT ShipRegion, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipRegion;","Both queries calculate the total freight cost per region using SUM(Freight) and grouping by ShipRegion. The difference is only in the alias name, which does not affect the result.",both
Identify employees with no sales in the last month.,"SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE) WHERE o.OrderID IS NULL;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName
FROM employees e
LEFT JOIN (
    SELECT o.EmployeeID
    FROM orders o
    JOIN [Order Details] od ON o.OrderID = od.OrderID
    WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)
    GROUP BY o.EmployeeID
) sales ON e.EmployeeID = sales.EmployeeID
WHERE sales.EmployeeID IS NULL;
```","The generated query checks sales within the last 30 days using DATE_SUB, while the ground truth query checks sales within the exact previous month using DATE_TRUNC.",SELECT employees.EmployeeID FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID AND MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) LEFT JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE [Order Details].OrderID IS NULL OR orders.OrderID IS NULL;,"The generated SQL query incorrectly identifies employees with no sales by checking both 'Order Details' and 'orders' tables. It assumes a missing entry in 'Order Details' implies no sales, which isn't required. The ground truth query correctly checks only for missing 'orders' entries in the last month.",None
How much freight cost did we incur last month?,"SELECT SUM(o.Freight) AS TotalFreightLastMonth FROM orders o WHERE o.OrderDate >= DATEADD(MONTH, DATEDIFF(MONTH, 0, CURRENT_DATE) - 1, 0) AND o.OrderDate < DATEADD(MONTH, DATEDIFF(MONTH, 0, CURRENT_DATE), 0);","```sql
SELECT SUM(Freight) AS TotalFreightCost
FROM orders
WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') 
  AND OrderDate < DATE_TRUNC('month', CURRENT_DATE);
```","Both queries calculate the total freight cost incurred during the previous month using different date functions, but they achieve the same result.","SELECT SUM(Freight) AS TotalFreight FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND OrderDate < DATE_TRUNC('month', CURRENT_DATE);","Both queries calculate the total freight cost for the previous month using different methods to determine the date range, but they are logically equivalent and yield the same result.",both
Find the average shipping time for orders.,"SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM orders WHERE ShippedDate IS NOT NULL","```sql
SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime
FROM orders
WHERE ShippedDate IS NOT NULL;
```","Both queries calculate the average shipping time for orders by subtracting OrderDate from ShippedDate, excluding records with NULL ShippedDate. The differences in alias names do not affect the result.","SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders WHERE ShippedDate IS NOT NULL;",Both queries calculate the average shipping time using the DATEDIFF function and filter out orders where the ShippedDate is NULL. The minor difference in column alias (AverageShippingTime vs. AvgShippingTime) does not affect the result.,both
Which suppliers provide products that are currently reordered the most?,"SELECT SupplierID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products WHERE UnitsOnOrder > 0 GROUP BY SupplierID ORDER BY TotalUnitsOnOrder DESC;","```sql
SELECT p.SupplierID, SUM(p.ReorderLevel) AS TotalReordered
FROM products p
WHERE p.ReorderLevel > 0
GROUP BY p.SupplierID
ORDER BY TotalReordered DESC;
```","The generated SQL query uses 'ReorderLevel' to determine the most reordered products, while the ground truth query uses 'UnitsOnOrder'. The user's intent is likely aligned with 'UnitsOnOrder' to identify products currently being reordered the most.","SELECT suppliers.CompanyName, SUM(products.UnitsOnOrder) AS TotalUnitsOnOrder FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsOnOrder > 0 GROUP BY suppliers.CompanyName ORDER BY TotalUnitsOnOrder DESC LIMIT 1;","The generated query includes 'suppliers.CompanyName' and uses a JOIN with suppliers, whereas the ground truth query does not join with suppliers or select specific company names.",None
Determine the product with the lowest unit price that is not discontinued.,"SELECT ProductName, UnitPrice FROM products WHERE Discontinued = 0 ORDER BY UnitPrice ASC LIMIT 1;","```sql
SELECT ProductID, ProductName, UnitPrice
FROM products
WHERE Discontinued = 0
ORDER BY UnitPrice ASC
LIMIT 1;
```","The generated query includes 'ProductID', which is not requested by the user's question. The ground truth query only selects 'ProductName' and 'UnitPrice'.",SELECT ProductName FROM products WHERE Discontinued = 0 ORDER BY UnitPrice ASC LIMIT 1;,"The generated query only selects ProductName, while the ground truth selects both ProductName and UnitPrice.",None
Which categories have the highest total sales?,"SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID ORDER BY TotalSales DESC;","```sql
SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.CategoryID
ORDER BY TotalSales DESC;
```","Both the generated and ground truth queries calculate total sales per category by joining the products and Order Details tables, grouping by CategoryID, and ordering by total sales in descending order.","SELECT c.CategoryName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryName ORDER BY TotalSales DESC;","The generated query includes discounts and selects CategoryName, whereas the ground truth query ignores discounts and groups by CategoryID.",Base
Which product has the highest total sales?,"SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS ProductSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY ProductSales DESC LIMIT 1;","```sql
SELECT 
    [Order Details].ProductID, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM 
    [Order Details]
JOIN 
    orders ON [Order Details].OrderID = orders.OrderID
GROUP BY 
    [Order Details].ProductID
ORDER BY 
    TotalSales DESC
LIMIT 1;
```",Both queries calculate total sales per product and return the product with the highest total sales. The JOIN operation in the generated query does not affect the output as it maintains the same grouping and calculations.,"SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalSales DESC LIMIT 1;","Both queries correctly calculate the total sales for each product and identify the product with the highest total sales. They use the same logic for calculation, grouping, and ordering, despite variable naming differences.",both
What is the total number of orders shipped last month?,SELECT COUNT(orders.OrderID) AS Shipped_Orders FROM orders WHERE MONTH(orders.ShippedDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.ShippedDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH);,"```sql
SELECT COUNT(*) AS TotalOrders
FROM orders
WHERE ShippedDate >= DATEADD(MONTH, -1, GETDATE()) 
  AND ShippedDate < GETDATE()
```","The generated query checks for orders in a rolling 30-day window, whereas the ground truth query specifically targets the previous calendar month.",SELECT COUNT(orders.OrderID) FROM orders WHERE YEAR(orders.ShippedDate) = YEAR(CURDATE() - INTERVAL 1 MONTH) AND MONTH(orders.ShippedDate) = MONTH(CURDATE() - INTERVAL 1 MONTH);,Both queries count the number of orders shipped last month using the YEAR and MONTH functions on ShippedDate compared to the current date minus one month. They yield the same result.,FT
Which supplier is used the least for orders based on total sales?,"SELECT suppliers.SupplierID, CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID, CompanyName ORDER BY TotalSales ASC LIMIT 1;","```sql
SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.SupplierID
ORDER BY TotalSales ASC
LIMIT 1;
```","Both queries calculate the total sales per supplier and find the supplier with the least total sales. The only difference is that the ground truth query includes SupplierID in the SELECT statement, but this does not affect the correctness of the query.","SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY total_sales ASC LIMIT 1;","Both queries calculate the total sales per supplier and order by the least total sales to find the least used supplier, satisfying the user's question.",both
What is the average discount given on orders for each supplier?,"SELECT suppliers.CompanyName, AVG([Order Details].Discount) AS AvgDiscount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName;","```sql
SELECT suppliers.SupplierID, AVG([Order Details].Discount) AS AverageDiscount
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.SupplierID;
```","The generated query groups by SupplierID, while the ground truth query groups by CompanyName. This can lead to differences if SupplierID and CompanyName are not unique pairings. Additionally, the generated query includes an unnecessary join with the orders table.","SELECT s.CompanyName, AVG(od.Discount) AS AverageDiscount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.CompanyName;","Both queries correctly join the suppliers, products, and order details tables to calculate the average discount for each supplier.",FT
Find the total sales revenue for each supplier.,"SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;","```sql
SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.CompanyName;
```","The generated query groups by suppliers.CompanyName, while the ground truth query groups by SupplierID. This could lead to incorrect aggregation if company names are not unique.","SELECT s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.CompanyName;","Both queries calculate the total sales revenue for each supplier. The difference is only in the grouping column: 'CompanyName' vs 'SupplierID'. Assuming 'CompanyName' uniquely identifies each 'SupplierID', the results will be the same.",FT
Calculate total sales per month.,"SELECT EXTRACT(MONTH FROM orders.OrderDate) AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EXTRACT(MONTH FROM orders.OrderDate);","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    Month
ORDER BY 
    Month;
```","The generated query groups by year and month, while the ground truth query groups by month only.","SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Year, Month;","The generated query groups sales by both year and month, whereas the ground truth query groups by month only. Hence, the results differ in granularity.",None
How many customers are there in each region?,"SELECT c.Region, COUNT(c.CustomerID) AS CustomerCount FROM customers c GROUP BY c.Region;","```sql
SELECT Region, COUNT(CustomerID) AS CustomerCount
FROM customers
GROUP BY Region;
```","Both queries group the customers by region and count the customers in each region, and will produce the same result.","SELECT Region, COUNT(CustomerID) FROM customers GROUP BY Region;",Both queries select regions and count customers by grouping them by region. They will produce the same result.,both
What is the average discount given on orders per month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Discount) AS AvgDiscount FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month,
    AVG([Order Details].Discount) AS Average_Discount
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    Month
```","Both queries calculate the average discount per month using a join between 'orders' and 'Order Details', group by the formatted date, and compute the average discount, resulting in equivalent outputs.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG([Order Details].Discount) AS AvgDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","Both queries calculate the average discount per month from the 'Order Details' table, joining with the 'orders' table on 'OrderID'. They group results by month derived from 'OrderDate' and compute the average discount similarly.",both
Which supplier has the highest number of unique products?,"SELECT s.CompanyName, COUNT(DISTINCT p.ProductID) AS UniqueProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY UniqueProducts DESC LIMIT 1;","```sql
SELECT s.SupplierID, s.CompanyName, COUNT(DISTINCT p.ProductID) AS UniqueProductCount
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
GROUP BY s.SupplierID, s.CompanyName
ORDER BY UniqueProductCount DESC
LIMIT 1;
```","Both queries correctly find the supplier with the highest number of unique products using a join between suppliers and products, group by supplier, and order by the count in descending order. The inclusion of CompanyName in the GROUP BY and SELECT clauses in the generated query does not affect the result.","SELECT SupplierID, COUNT(DISTINCT ProductID) AS UniqueProducts FROM products GROUP BY SupplierID ORDER BY UniqueProducts DESC LIMIT 1;","The generated query does not select the company name from the suppliers table, which is required to fully answer the user's question.",Base
Which employee handles the most orders shipped late?,"SELECT EmployeeID, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY EmployeeID ORDER BY LateOrders DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS LateOrders
FROM orders
WHERE ShippedDate > RequiredDate
GROUP BY EmployeeID
ORDER BY LateOrders DESC
LIMIT 1;
```",The generated SQL query accurately answers the user's question. Both queries select the EmployeeID handling the most late orders using the same logic and yield the same results.,"SELECT EmployeeID, COUNT(OrderID) as LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY EmployeeID ORDER BY LateOrders DESC LIMIT 1;","The generated SQL query and the ground truth SQL query are identical, meaning they will produce the same results.",both
Which country has the highest number of orders?,"SELECT ShipCountry, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipCountry ORDER BY TotalOrders DESC LIMIT 1","```sql
SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY ShipCountry
ORDER BY NumberOfOrders DESC
LIMIT 1;
```","Both queries count the number of orders per country, sort the counts in descending order, and limit the result to the top entry, thus answering the question correctly.","SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCountry ORDER BY NumberOfOrders DESC LIMIT 1;","Both queries count the number of orders per country, sort by the count in descending order, and limit the result to the top entry. The difference in alias names does not affect the outcome.",both
What are the top 5 cities where suppliers are located?,"SELECT suppliers.City, COUNT(*) AS SupplierCount FROM suppliers GROUP BY suppliers.City ORDER BY SupplierCount DESC LIMIT 5;","```sql
SELECT City, COUNT(*) AS SupplierCount
FROM suppliers
GROUP BY City
ORDER BY SupplierCount DESC
LIMIT 5;
```","Both queries correctly count suppliers by city, order by count in descending order, and limit the results to the top 5 cities.","SELECT City, COUNT(*) AS NumberOfSuppliers FROM suppliers GROUP BY City ORDER BY NumberOfSuppliers DESC LIMIT 5;","Both queries select the City and count the number of suppliers per city. They group by the City, order by the count in descending order, and limit the results to the top 5. The queries are functionally equivalent.",both
Identify products with the highest average discount.,"SELECT products.ProductID, AVG([Order Details].Discount) AS AverageDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID ORDER BY AverageDiscount DESC LIMIT 1;","```sql
SELECT p.ProductID, p.ProductName, AVG(od.Discount) AS AverageDiscount
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY AverageDiscount DESC
LIMIT 1;
```","Both queries correctly calculate the highest average discount by joining products with order details, grouping by ProductID, and ordering by average discount in descending order. They include the same key elements needed to answer the user's question.","SELECT ProductName, AVG([Order Details].Discount) AS AvgDiscount FROM products p JOIN [Order Details] ON p.ProductID = [Order Details].ProductID GROUP BY p.ProductName ORDER BY AvgDiscount DESC;","The generated query lists all products by average discount, while the ground truth query finds the single product with the highest average discount using LIMIT 1.",Base
Analyze the correlation between product price and the number of orders received.,"SELECT P.ProductName, P.UnitPrice, COUNT(OD.OrderID) AS OrderCount FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID GROUP BY P.ProductID, P.ProductName, P.UnitPrice ORDER BY OrderCount DESC;","```sql
SELECT p.UnitPrice, SUM(od.Quantity) AS TotalOrders
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.UnitPrice
```","The generated query calculates total orders by summing quantities, while the ground truth counts distinct orders per product. Additionally, the generated query does not include product details like ProductName or the same grouping and ordering as the ground truth.","SELECT p.ProductID, p.ProductName, p.UnitPrice, COUNT(od.OrderID) AS OrderCount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName, p.UnitPrice ORDER BY OrderCount DESC;","Both queries select ProductName, UnitPrice, and OrderCount by joining products and [Order Details] tables, grouped by ProductID, ProductName, and UnitPrice, and ordered by OrderCount. The differences in aliasing and order of columns in SELECT do not affect the results.",FT
Which employees handled the most customer orders?,"SELECT o.EmployeeID, COUNT(o.OrderID) AS OrdersHandled FROM orders o GROUP BY o.EmployeeID ORDER BY OrdersHandled DESC;","```sql
SELECT EmployeeID, COUNT(OrderID) AS TotalOrders
FROM orders
GROUP BY EmployeeID
ORDER BY TotalOrders DESC;
```","Both queries calculate the count of orders handled by each employee, group by EmployeeID, and order the results in descending order of the count. They are functionally equivalent.","SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC;",Both queries calculate the number of orders each employee handled and order the results in descending order by count. The aliases and column names differ but the logic is the same.,both
Which products are on order but currently discontinued?,"SELECT ProductID, ProductName FROM products WHERE Discontinued = 1 AND UnitsOnOrder > 0;","```sql
SELECT p.ProductID, p.ProductName
FROM products p
WHERE p.Discontinued = 1 AND p.UnitsOnOrder > 0;
```",Both queries retrieve the ProductID and ProductName from the products table where the products are discontinued and have units on order.,"SELECT ProductID, ProductName FROM products WHERE Discontinued = 1 AND UnitsOnOrder > 0;","Both the generated query and the ground truth query are identical, selecting products that are discontinued and have units on order.",both
How many unique products does each supplier offer?,"SELECT p.SupplierID, COUNT(DISTINCT p.ProductID) AS UniqueProducts FROM products p GROUP BY p.SupplierID;","```sql
SELECT suppliers.SupplierID, COUNT(DISTINCT products.ProductID) AS UniqueProducts
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
GROUP BY suppliers.SupplierID;
```","Both queries count the distinct products for each supplier and group by SupplierID, resulting in the same outcome.","SELECT s.SupplierID, COUNT(DISTINCT p.ProductID) AS UniqueProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;","Both queries count unique products per supplier by grouping on SupplierID, yielding the same result.",both
What is the on-time delivery rate each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month ORDER BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    COUNT(OrderID) AS TotalOrders,
    COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveries,
    (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate
FROM 
    orders
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries calculate the on-time delivery rate each month. They use different methods to format the date and include extra columns, but the essential operation of dividing on-time deliveries by total orders is present in both.","SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Year, Month;","Both queries calculate the on-time delivery rate by counting on-time shipped orders over total orders for each month. The main difference is the formatting; the generated query extracts year and month separately, while the ground truth truncates the date to the month. However, both result in the same logical grouping by month.",both
Which suppliers are located in the same city?,"SELECT City, STRING_AGG(DISTINCT SupplierID, ', ') AS SupplierIDs FROM suppliers GROUP BY City HAVING COUNT(DISTINCT SupplierID) > 1;","```sql
SELECT s1.CompanyName AS Supplier1, s2.CompanyName AS Supplier2, s1.City
FROM suppliers s1
JOIN suppliers s2 ON s1.SupplierID <> s2.SupplierID AND s1.City = s2.City
ORDER BY s1.City, Supplier1, Supplier2;
```","The generated query lists pairs of suppliers in the same city, while the ground truth groups suppliers by city and lists unique suppliers in cities with more than one supplier.","SELECT s1.CompanyName, s2.CompanyName, s1.City FROM suppliers s1 JOIN suppliers s2 ON s1.City = s2.City AND s1.SupplierID < s2.SupplierID;","The generated query matches suppliers by city with different SupplierIDs, listing pairs. The ground truth gives cities with more than one unique supplier.",None
Which employees are responsible for the majority of orders in a specific territory?,"SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.ShipRegion = 'SpecificTerritory' GROUP BY employees.EmployeeID ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS NumberOfOrders
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE e.Region = 'specific_territory'  -- replace 'specific_territory' with the actual territory name
GROUP BY e.EmployeeID
HAVING COUNT(o.OrderID) > (SELECT COUNT(OrderID) / 2 FROM orders o2 WHERE o2.EmployeeID IS NOT NULL AND o2.ShipRegion = 'specific_territory')
ORDER BY NumberOfOrders DESC;
```",The generated query uses a HAVING clause to filter employees with more than half of the orders in the territory. The ground truth finds the employee with the maximum orders in the territory.,"SELECT employees.EmployeeID, COUNT(orders.OrderID) AS NumberOfOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;","The generated query does not filter orders by a specific territory, while the ground truth query does. Thus, they may produce different results.",None
Which supplier has the most delayed shipments?,"SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.RequiredDate)) AS AvgDelay FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.ShippedDate > orders.RequiredDate GROUP BY suppliers.SupplierID ORDER BY AvgDelay DESC LIMIT 1;","```sql
SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageDelay
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE orders.ShippedDate > orders.OrderDate
GROUP BY suppliers.CompanyName
ORDER BY AverageDelay DESC
LIMIT 1;
```","The generated query calculates delay based on OrderDate, whereas the ground truth uses RequiredDate. Therefore, the results will differ in assessing shipment delays.","SELECT products.SupplierID, DATEDIFF(orders.RequiredDate, orders.ShippedDate) AS Delay FROM products JOIN orders ON products.ProductID = orders.OrderID WHERE orders.ShippedDate > orders.RequiredDate ORDER BY Delay DESC LIMIT 1;","The generated query calculates delay by ProductID and limits results to a single entry, while the ground truth query calculates average delay per supplier and returns the supplier with the highest delay.",None
How many unique products has each employee sold?,"SELECT E.EmployeeID, COUNT(DISTINCT OD.ProductID) AS UniqueProducts FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY E.EmployeeID;","```sql
SELECT e.EmployeeID, COUNT(DISTINCT od.ProductID) AS UniqueProductsSold
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID;
```","Both queries count the distinct products each employee has sold by joining the employees, orders, and order details tables, and grouping by EmployeeID. The differences in aliases and naming have no impact on the result.","SELECT employees.EmployeeID, COUNT(DISTINCT [Order Details].ProductID) AS UniqueProducts FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;","Both queries perform the same joins and count distinct products for each employee. The table aliases differ, but the logic and output remain equivalent.",both
What is the total discount given on all orders?,SELECT SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details];,"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount
FROM [Order Details];
```","Both queries calculate the total discount by summing up the product of UnitPrice, Quantity, and Discount from the 'Order Details' table. The generated SQL query explicitly includes the table name for each column, but this does not affect the result.",SELECT SUM(Discount * Quantity * UnitPrice) AS TotalDiscount FROM [Order Details];,"Both queries calculate the total discount by multiplying UnitPrice, Quantity, and Discount, and then summing these values. The order of multiplication does not affect the result, thus they yield the same outcome.",both
What are the top 5 countries generating the most revenue from orders?,"SELECT customers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.Country ORDER BY total_revenue DESC LIMIT 5","```sql
SELECT customers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
JOIN customers ON orders.CustomerID = customers.CustomerID
GROUP BY customers.Country
ORDER BY total_revenue DESC
LIMIT 5
```","The generated SQL query uses LIMIT, which is not ANSI SQL. The correct clause in ANSI SQL is FETCH FIRST 5 ROWS ONLY.","SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry ORDER BY total_revenue DESC LIMIT 5","The generated query groups by ShipCountry, while the ground truth query groups by customers.Country, which could yield different results if ShipCountry and Country differ.",None
How many orders were shipped by each shipping method?,"SELECT ShipVia, COUNT(OrderID) AS NumOrders FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY ShipVia;
```",The generated SQL query and the ground truth query both count the number of orders grouped by the shipping method (`ShipVia`). The difference in alias name does not affect the result.,"SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia;",Both queries count the number of orders (OrderID) grouped by shipping method (ShipVia). The column alias differs but doesn't affect the result.,both
What is the effect of discount on product sales?,"SELECT Discount, SUM(Quantity) AS TotalSales FROM [Order Details] GROUP BY Discount ORDER BY Discount DESC;","```sql
SELECT 
    p.ProductID, 
    p.ProductName, 
    SUM(od.Quantity) AS TotalSold, 
    SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue, 
    AVG(od.Discount) AS AverageDiscount
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.ProductName
ORDER BY 
    TotalRevenue DESC;
```","The generated query calculates total sales and revenue per product with an average discount, while the ground truth query focuses on total sales aggregated by discount without considering product details.","SELECT od.ProductID, AVG(od.Quantity * (1 - od.Discount)) / AVG(od.Quantity) AS DiscountEffect FROM [Order Details] od GROUP BY od.ProductID;","The generated query calculates the average effect of discount on sales for each product, while the ground truth query sums the total sales grouped by discount level. They address different aspects of the question.",None
Which shipping method has the best on-time delivery rate?,"SELECT ShipVia, 100.0 * COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipVia ORDER BY OnTimeRate DESC LIMIT 1;","```sql
SELECT ShipVia, 
       COUNT(OrderID) AS TotalOrders,
       COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveries,
       (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID)) AS OnTimeDeliveryRate
FROM orders
GROUP BY ShipVia
ORDER BY OnTimeDeliveryRate DESC
LIMIT 1;
```",Both queries calculate the on-time delivery rate for each shipping method based on the condition that ShippedDate is less than or equal to RequiredDate. They then order by this rate in descending order and return the top result.,"SELECT ShipVia, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipVia ORDER BY OnTimeRate DESC LIMIT 1;",Both queries calculate the on-time delivery rate in the same way by using a COUNT with a CASE statement and dividing by the total count of orders. The logic and final result will be the same.,both
Which region has the highest total sales?,"SELECT Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Region ORDER BY TotalSales DESC;","```sql
SELECT customers.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.Region
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries calculate total sales per region and order by total sales in descending order. The generated query uses LIMIT 1 to return only the top region, which answers the user's question directly.","SELECT ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipRegion ORDER BY TotalSales DESC LIMIT 1;","The generated query sums sales by ShipRegion from the 'orders' table, while the ground truth sums by Region from the 'customers' table. The queries group by different columns, which affects the outcome.",Base
What is the correlation between order value and shipping delay?,"SELECT CORR(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) OVER (PARTITION BY orders.OrderID), DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS OrderValueShippingDelayCorrelation FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID;","```sql
SELECT 
    AVG(orders.ShippedDate - orders.OrderDate) AS Average_Shipping_Delay,
    AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Average_Order_Value
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    orders.OrderID;
```",The generated query calculates average order value and average shipping delay per order but does not compute correlation. The ground truth query calculates the correlation directly using the CORR function on order value and shipping delay.,"SELECT CORR(TotalValue, ShippingDelay) FROM (SELECT o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalValue, DATEDIFF(o.ShippedDate, o.RequiredDate) AS ShippingDelay FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID) AS OrderStats;","The generated query calculates shipping delay based on RequiredDate, while the ground truth uses OrderDate. This difference could yield different correlation results.",None
Which city received the highest number of shipments?,"SELECT ShipCity, COUNT(OrderID) FROM orders GROUP BY ShipCity ORDER BY COUNT(OrderID) DESC LIMIT 1;","```sql
SELECT ShipCity, COUNT(OrderID) AS ShipmentCount
FROM orders
GROUP BY ShipCity
ORDER BY ShipmentCount DESC
LIMIT 1;
```","Both queries correctly identify the city with the highest number of shipments by counting OrderID and ordering by the count in descending order, limiting the result to 1.","SELECT ShipCity, COUNT(OrderID) AS TotalShipments FROM orders GROUP BY ShipCity ORDER BY TotalShipments DESC LIMIT 1;","Both queries group by ShipCity, count the OrderID, order the results in descending order by the count, and limit to the top result, thus providing the same answer.",both
List employees who have been hired in the last 5 years.,"SELECT EmployeeID, FirstName, LastName FROM employees WHERE HireDate >= DATE_SUB(CURDATE(), INTERVAL 5 YEAR);","```sql
SELECT * FROM employees WHERE HireDate >= DATEADD(YEAR, -5, GETDATE());
```","The generated SQL query uses functions `DATEADD` and `GETDATE()`, which are specific to SQL Server, whereas the ground truth SQL query uses `DATE_SUB` and `CURDATE()`, which are specific to MySQL. Additionally, the generated query retrieves all columns, while the ground truth query selects specific columns: EmployeeID, FirstName, LastName.","SELECT FirstName, LastName FROM employees WHERE HireDate >= DATE_SUB(CURDATE(), INTERVAL 5 YEAR);","The generated query does not include 'EmployeeID' in the SELECT clause, which is present in the ground truth query. Depending on the requirement for EmployeeID, this may lead to different expectations of the result set.",None
Which products are often paired together in orders?,"SELECT od1.ProductID, od2.ProductID, COUNT(*) AS PairCount FROM [Order Details] od1 JOIN [Order Details] od2 ON od1.OrderID = od2.OrderID AND od1.ProductID < od2.ProductID GROUP BY od1.ProductID, od2.ProductID ORDER BY PairCount DESC LIMIT 5;","```sql
SELECT od1.ProductID AS Product1, od2.ProductID AS Product2, COUNT(*) AS PairCount
FROM [Order Details] od1
JOIN [Order Details] od2 ON od1.OrderID = od2.OrderID AND od1.ProductID <> od2.ProductID
GROUP BY od1.ProductID, od2.ProductID
ORDER BY PairCount DESC;
```","The generated query includes all pairs with different products for each order, but the ground truth query uses '<' instead of '<>', ensuring each pair is counted in one direction only. Additionally, the ground truth query limits the results to 5 pairs.","SELECT ot1.ProductID, ot2.ProductID, COUNT(*) AS PairCount FROM [Order Details] ot1 JOIN [Order Details] ot2 ON ot1.OrderID = ot2.OrderID AND ot1.ProductID < ot2.ProductID GROUP BY ot1.ProductID, ot2.ProductID ORDER BY PairCount DESC;","The generated query retrieves all product pairs ordered together sorted by count, while the ground truth query limits the results to the top 5 pairs.",None
Identify employees who have been with the company for over 10 years.,"SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e WHERE DATEDIFF(CURRENT_DATE, e.HireDate) > 3650;","```sql
SELECT EmployeeID, FirstName, LastName, HireDate
FROM employees
WHERE HireDate <= DATE_SUB(CURDATE(), INTERVAL 10 YEAR);
```","Both queries identify employees who have been with the company for over 10 years. The generated query uses 'DATE_SUB' to calculate the date 10 years ago, while the ground truth query uses 'DATEDIFF' to check if the difference in days is more than 3650. Both methods are correct and yield the same results.","SELECT e.FirstName, e.LastName, YEAR(CURDATE()) - YEAR(e.HireDate) AS YearsWithCompany FROM employees e WHERE YEAR(CURDATE()) - YEAR(e.HireDate) > 10;","The generated query calculates years based on year difference, which can be inaccurate if the employee has not reached their full anniversary year. The ground truth query accurately checks if the total days exceed 3650 days (10 years), ensuring precise calculation.",Base
Which city has the highest number of shipments?,"SELECT ShipCity, COUNT(OrderID) AS ShipmentCount FROM orders GROUP BY ShipCity ORDER BY ShipmentCount DESC LIMIT 1;","```sql
SELECT ShipCity, COUNT(OrderID) AS NumberOfShipments
FROM orders
GROUP BY ShipCity
ORDER BY NumberOfShipments DESC
LIMIT 1;
```","Both queries aggregate shipments by city, order by descending count, and limit to one result, achieving the same outcome.","SELECT ShipCity, COUNT(OrderID) AS TotalShipments FROM orders GROUP BY ShipCity ORDER BY TotalShipments DESC LIMIT 1;","Both queries count the number of orders per city and order the results by the count in descending order, then limit the output to the city with the highest count. The difference in alias names does not affect the result.",both
What is the highest discount given to a single product?,"SELECT ProductName, [Order Details].Discount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount = (SELECT MAX(Discount) FROM [Order Details]) LIMIT 1;","```sql
SELECT MAX(Discount) AS HighestDiscount
FROM [Order Details];
```","The generated query returns only the max discount value, while the ground truth showcases the product receiving that discount.",SELECT MAX(Discount) AS MaxDiscount FROM [Order Details];,The generated query finds the maximum discount but does not identify which product received it. The ground truth query includes the product name with the highest discount.,None
How many orders did each employee process last quarter?,"SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND CURRENT_DATE GROUP BY e.EmployeeID;","```sql
SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount
FROM employees
JOIN orders ON employees.EmployeeID = orders.EmployeeID
WHERE orders.OrderDate >= DATEADD(quarter, -1, GETDATE())
GROUP BY employees.EmployeeID
```","The generated SQL query uses DATEADD(quarter, -1, GETDATE()), which includes the last three months from today, whereas the ground truth query uses a fixed date range with DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) to calculate the last quarter. The behavior might differ based on the current date.","SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATEADD(MONTH, -3, GETDATE()) GROUP BY e.EmployeeID, e.FirstName, e.LastName;","The generated query uses a dynamic current date to calculate the last 3 months, which may not correspond to the last quarter. Additionally, it includes first and last names in the SELECT and GROUP BY clauses, which are unnecessary for counting the number of orders processed by each employee.",None
How many orders are pending shipment as of today?,SELECT COUNT(OrderID) AS PendingOrders FROM orders WHERE ShippedDate IS NULL;,"```sql
SELECT COUNT(OrderID) AS PendingOrders
FROM orders
WHERE ShippedDate IS NULL AND OrderDate <= CURRENT_DATE;
```","Both queries correctly count orders that are pending shipment by checking for ShippedDate IS NULL. The generated query has an additional condition OrderDate <= CURRENT_DATE, but it still effectively returns the same result since it logically follows pending orders should have been ordered by today.",SELECT COUNT(*) FROM orders WHERE ShippedDate IS NULL;,"Both queries count rows in the 'orders' table where 'ShippedDate' is NULL, which indicates pending shipment orders. They yield the same result.",both
Determine the impact of discontinued products on total inventory.,SELECT SUM(UnitsInStock) FROM products WHERE Discontinued = 1;,"```sql
SELECT 
    SUM(UnitsInStock) AS TotalInventory,
    SUM(CASE WHEN Discontinued = 1 THEN UnitsInStock ELSE 0 END) AS DiscontinuedInventory,
    SUM(CASE WHEN Discontinued = 0 THEN UnitsInStock ELSE 0 END) AS ActiveInventory
FROM 
    products
```","The generated query calculates total, discontinued, and active inventory, whereas the ground truth query only calculates inventory for discontinued products.",SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalInventoryValue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE products.Discontinued = 1;,"The generated query calculates the total sales value of discontinued products using order details, whereas the ground truth query calculates the sum of units in stock for discontinued products. They address different aspects of inventory impact.",None
Calculate the total order quantity for each product over the past year.,"SELECT ProductID, SUM(Quantity) AS AnnualOrderQuantity FROM [Order Details] WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY ProductID;","```sql
SELECT 
    products.ProductID,
    products.ProductName,
    SUM([Order Details].Quantity) AS TotalOrderQuantity
FROM 
    products
JOIN 
    [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN 
    orders ON [Order Details].OrderID = orders.OrderID
WHERE 
    orders.OrderDate >= DATEADD(year, -1, GETDATE())
GROUP BY 
    products.ProductID, products.ProductName
```","The generated query calculates the total order quantity for the past 365 days, while the ground truth query calculates it for the entire previous calendar year. Additionally, the generated query joins with the products table and includes ProductName in the output, which the ground truth does not.","SELECT p.ProductID, SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID WHERE o.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY p.ProductID;","The generated query evaluates orders from the past year to the current date, while the ground truth query specifically aggregates data for the previous calendar year only.",None
How many different shipping methods have been used to ship orders?,SELECT COUNT(DISTINCT ShipVia) AS ShippingMethods FROM orders;,"```sql
SELECT COUNT(DISTINCT ShipVia) AS DifferentShippingMethods
FROM orders;
```","Both queries correctly count the distinct shipping methods in the 'orders' table. The difference is only in the alias name, which does not affect the query's result.",SELECT COUNT(DISTINCT ShipVia) FROM orders;,"The generated query and the ground truth query both count the distinct shipping methods used to ship orders, providing the same result.",both
What is the monthly growth rate of returning customers over the last year?,"SELECT ((COUNT(DISTINCT CASE WHEN YEAR(o1.OrderDate) = 2022 THEN o1.CustomerID END) - COUNT(DISTINCT CASE WHEN YEAR(o2.OrderDate) = 2021 THEN o2.CustomerID END)) / NULLIF(COUNT(DISTINCT CASE WHEN YEAR(o2.OrderDate) = 2021 THEN o2.CustomerID END), 0)) * 100 AS monthly_growth FROM orders o1, orders o2 WHERE o1.CustomerID = o2.CustomerID AND YEAR(o1.OrderDate) = 2022 AND YEAR(o2.OrderDate) = 2021;","```sql
SELECT (COUNT(DISTINCT orders.CustomerID) 
    WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31') / 
   (COUNT(DISTINCT orders.CustomerID) 
    WHERE orders.OrderDate < '2022-01-01') AS customer_retention_rate_last_year
FROM orders
```","The generated query does not calculate the monthly growth rate of returning customers. It attempts to calculate a ratio of total distinct customers for 2022 to those before 2022, without addressing monthly changes or specifically returning customers.","SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, COUNT(DISTINCT CASE WHEN returning = TRUE THEN o.CustomerID END) AS ReturningCustomers, COUNT(DISTINCT o.CustomerID) AS TotalCustomers, (COUNT(DISTINCT CASE WHEN returning = TRUE THEN o.CustomerID END)::DECIMAL / NULLIF(COUNT(DISTINCT o.CustomerID), 0)) * 100 AS MonthlyGrowth FROM (SELECT o1.OrderID, o1.CustomerID, o1.OrderDate, o1.OrderID IN (SELECT o2.OrderID FROM orders o2 WHERE EXTRACT(YEAR FROM o2.OrderDate) = EXTRACT(YEAR FROM o1.OrderDate) - 1) AS returning FROM orders o1 WHERE o1.OrderDate BETWEEN CURRENT_DATE - INTERVAL '1 year' AND CURRENT_DATE) o GROUP BY Month;","The generated query calculates the monthly growth rate for returning customers, but it doesn't compare consecutive years as the ground truth query does. It groups by month within the past year, while the ground truth looks at year-over-year growth.",None
Find out the average discount given for each customer.,"SELECT customers.CustomerID, AVG([Order Details].Discount) AS AverageDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;","```sql
SELECT customers.CustomerID, AVG([Order Details].Discount) AS AverageDiscount
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID;
```","Both queries are identical in structure and logic, so they will yield the same results. They both calculate the average discount for each customer by joining customers, orders, and order details.","SELECT CustomerID, AVG(Discount) AS AverageDiscount FROM [Order Details] GROUP BY CustomerID;","The generated SQL query does not join the tables 'customers', 'orders', and '[Order Details]'. It assumes all necessary data is available directly in '[Order Details]', which may not yield the same results as the ground truth query that correctly joins these tables to ensure all relevant discounts are included per customer.",Base
Find the total sales for each employee in a specific region.,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.ShipRegion = ? GROUP BY employees.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE e.Region = 'SPECIFIC_REGION'  -- Replace SPECIFIC_REGION with the desired region
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","The generated query filters by the employee's region, while the ground truth query filters by the order's ship region.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.ShipRegion = ? GROUP BY employees.EmployeeID;",The generated SQL query is identical to the ground truth query and correctly calculates total sales per employee in a specific region.,FT
Which supplier supplies the most number of different products?,"SELECT s.SupplierID, s.CompanyName, COUNT(DISTINCT p.ProductID) AS NumberOfProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY NumberOfProducts DESC LIMIT 1;","```sql
SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount
FROM products
GROUP BY SupplierID
ORDER BY ProductCount DESC
LIMIT 1;
```",Both queries aim to find the supplier with the most different products by counting distinct ProductIDs per SupplierID and ordering by this count in descending order.,"SELECT suppliers.CompanyName, COUNT(DISTINCT products.ProductID) AS UniqueProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY UniqueProducts DESC LIMIT 1;",Both queries correctly calculate the number of distinct products each supplier provides and return the supplier with the highest count. They differ in aliasing and selected fields but yield the same result.,both
Find the employee with the longest tenure at the company.,"SELECT FirstName, LastName, DATEDIFF(NOW(), HireDate) AS Tenure FROM employees ORDER BY Tenure DESC LIMIT 1;","```sql
SELECT FirstName, LastName, DATEDIFF(CURRENT_DATE, HireDate) AS Tenure
FROM employees
ORDER BY Tenure DESC
LIMIT 1;
```","Both queries calculate tenure by finding the difference between the current date and the hire date, then sort by tenure in descending order, and limit the result to one record. The choice between CURRENT_DATE and NOW() does not affect the outcome in this context.","SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS FullName, DATEDIFF(CURDATE(), employees.HireDate) AS Tenure FROM employees ORDER BY Tenure DESC LIMIT 1;","Both queries calculate the tenure of employees by finding the difference between the current date and the hire date, then order the results by tenure in descending order and limit the output to the first result, which represents the longest tenure. The difference in fields (EmployeeID, FullName vs. FirstName, LastName) does not affect the result regarding tenure determination.",both
What is the total freight cost by region?,"SELECT o.ShipRegion, SUM(o.Freight) AS TotalFreight FROM orders o GROUP BY o.ShipRegion;","```sql
SELECT customers.Region, SUM(orders.Freight) AS TotalFreightCost
FROM orders
JOIN customers ON orders.CustomerID = customers.CustomerID
GROUP BY customers.Region;
```","The generated query groups by customers.Region, while the ground truth groups by orders.ShipRegion.","SELECT ShipRegion, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipRegion;",Both queries calculate the total freight cost by region by summing the 'Freight' column and grouping by 'ShipRegion'. The use of aliases does not affect the result.,FT
What is the average unit price of products supplied by each supplier?,"SELECT SupplierID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY SupplierID;","```sql
SELECT SupplierID, AVG(UnitPrice) AS AverageUnitPrice
FROM products
GROUP BY SupplierID;
```",Both queries calculate the average unit price of products grouped by SupplierID.,"SELECT suppliers.SupplierID, AVG(products.UnitPrice) AS AvgPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID;",Both queries calculate the average unit price of products per supplier by grouping products based on SupplierID. The additional join in the generated SQL query is not necessary but doesn't change the outcome as it uses the same SupplierID for grouping.,both
Which suppliers have received the most customer orders?,"SELECT s.CompanyName, COUNT(DISTINCT o.OrderID) AS NumberOfOrders FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.CompanyName ORDER BY NumberOfOrders DESC;","```sql
SELECT suppliers.CompanyName, COUNT(orders.OrderID) AS TotalOrders
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.CompanyName
ORDER BY TotalOrders DESC;
```","The generated query does not use COUNT(DISTINCT), which would ensure unique orders per supplier. It may overcount if there are multiple products per order.","SELECT suppliers.CompanyName, COUNT(DISTINCT orders.OrderID) AS order_count FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName ORDER BY order_count DESC","Both queries count distinct OrderIDs per supplier to identify which suppliers received the most customer orders. The structure and joins align, resulting in the same outcome.",FT
What is the total number of units on order for each product category?,"SELECT categories.CategoryID, SUM(products.UnitsOnOrder) FROM products JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID;","```sql
SELECT p.CategoryID, SUM(p.UnitsOnOrder) AS TotalUnitsOnOrder
FROM products p
GROUP BY p.CategoryID;
```",Both queries calculate the total number of units on order for each product category. The generated query assumes the same structure and directly groups by CategoryID similar to the ground truth query.,"SELECT PC.CategoryName, SUM(P.UnitsOnOrder) AS TotalUnitsOnOrder FROM products P JOIN [Product Categories] PC ON P.CategoryID = PC.CategoryID WHERE P.UnitsOnOrder > 0 GROUP BY PC.CategoryName;","The generated query groups by CategoryName, while the ground truth groups by CategoryID. Additionally, the generated query has a condition UnitsOnOrder > 0, which is absent in the ground truth query.",Base
What is the total quantity ordered for each product supplied by a supplier?,"SELECT p.ProductName, s.CompanyName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY p.ProductName, s.CompanyName;","```sql
SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalQuantityOrdered
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY products.ProductID, products.ProductName
HAVING products.SupplierID = <SupplierID>;
```","The generated query filters results based on a specific SupplierID, but the user question asks for total quantity ordered for each product supplied by all suppliers. The ground truth query correctly provides this information by grouping products and suppliers.","SELECT p.SupplierID, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;","The generated query groups by SupplierID and does not consider individual products, while the ground truth query groups by ProductName and Supplier's CompanyName.",None
Find the customer with the highest single order value.,"SELECT o.CustomerID, od.OrderID, (od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID ORDER BY OrderValue DESC LIMIT 1;","```sql
SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue
FROM orders AS o
JOIN [Order Details] AS od ON o.OrderID = od.OrderID
GROUP BY o.CustomerID, o.OrderID
ORDER BY OrderValue DESC
LIMIT 1;
```","The generated query groups by the CustomerID and OrderID, and sums the order value, which is incorrect. The ground truth query calculates order value per order line without grouping, correctly identifying the highest single order.","SELECT o.CustomerID, od.OrderID, (od.UnitPrice * od.Quantity * (1 - od.Discount)) AS SingleOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID ORDER BY SingleOrderValue DESC LIMIT 1;","Both queries calculate the order value and return the customer with the highest order value. The columns and sorting logic are equivalent, ensuring they produce the same results.",FT
What is the monthly product performance for each product?,"SELECT products.ProductName, EXTRACT(MONTH FROM orders.OrderDate) AS Month, SUM([Order Details].Quantity) AS MonthlyPerformance FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductName, EXTRACT(MONTH FROM orders.OrderDate);","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS MonthlyPerformance
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
```",The generated query does not include monthly grouping and lacks the use of the order date to define monthly performance.,"SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, od.ProductID, SUM(od.Quantity) AS MonthlyPerformance FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month, od.ProductID;","The generated query does not include product names, whereas the ground truth query does. The outputs will differ as the generated query uses ProductID while the ground truth uses ProductName.",None
How many unique products are ordered each month?,"SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(DISTINCT ProductID) AS UniqueProducts FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY TO_CHAR(OrderDate, 'YYYY-MM')","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(DISTINCT ProductID) AS UniqueProducts
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY Month
```","Both queries calculate the count of unique products ordered each month by extracting the year and month from the OrderDate, counting distinct ProductID, and grouping by month. The difference in date formatting (DATE_FORMAT vs. TO_CHAR) does not affect the result.","SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS Month, COUNT(DISTINCT [Order Details].ProductID) AS UniqueProducts FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM');","Both queries count distinct ProductIDs grouped by formatted OrderDate, differing only in table order and alias usage.",both
How many orders have a shipping cost above $50?,SELECT COUNT(*) AS high_freight_orders FROM orders WHERE Freight > 50,"```sql
SELECT COUNT(OrderID) AS orders_above_50_shipping FROM orders WHERE Freight > 50;
```",Both queries count orders with a shipping cost (Freight) above $50 and produce the same result.,SELECT COUNT(OrderID) AS OrdersAbove50 FROM orders WHERE Freight > 50;,Both queries count the number of orders where shipping cost (Freight) is above $50. The column names and COUNT function differ but do not affect the result.,both
Is there a trend in shipping delays over the past year?,"SELECT DATE_TRUNC('month', OrderDate) AS month, (COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) * 1.0 / COUNT(*)) * 100 AS delay_rate FROM orders WHERE OrderDate >= DATE_ADD(CURRENT_DATE, INTERVAL -1 YEAR) GROUP BY DATE_TRUNC('month', OrderDate);","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
    AVG(DATEDIFF(ShippedDate, RequiredDate)) AS Average_Delay
FROM 
    orders
WHERE 
    ShippedDate IS NOT NULL AND 
    OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
GROUP BY 
    Month
ORDER BY 
    Month;
```","The generated SQL calculates the average delay in days, while the ground truth calculates the delay rate as a percentage of late orders. They provide different insights into the trend in shipping delays.","SELECT MONTH(OrderDate) AS Month, COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) AS DelayedOrders FROM orders WHERE OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY MONTH(OrderDate);","The generated query counts the number of delayed orders per month, whereas the ground truth query calculates the delay rate as a percentage of total orders per month.",None
What is the average order fulfillment time over the past year?,"SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE OrderDate >= CURRENT_DATE - INTERVAL '1 year';","```sql
SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageOrderFulfillmentTime
FROM orders
WHERE OrderDate >= DATEADD(YEAR, -1, GETDATE());
```","The generated SQL query uses GETDATE() and DATEADD, which are non-ANSI SQL functions and may not work in databases that require ANSI SQL standard. It also does not handle the edge cases regarding time zones and exact date evaluation. The ground truth query uses ANSI-compliant functions CURRENT_DATE and INTERVAL, which are more portable and ensure compatibility.","SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE);","Both queries calculate the average fulfillment time by finding the difference between the ShippedDate and OrderDate for orders placed in the last year, using different but equivalent methods to determine the date range.",FT
What is the total quantity sold for each product category?,"SELECT categories.CategoryName, SUM([Order Details].Quantity) AS total_quantity_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName","```sql
SELECT categories.CategoryID, SUM([Order Details].Quantity) AS total_quantity_sold
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN categories ON products.CategoryID = categories.CategoryID
GROUP BY categories.CategoryID
```","Both queries calculate the total quantity sold per product category. The difference is in the column used for grouping and output, with one using CategoryID and the other using CategoryName. Assuming CategoryID and CategoryName uniquely map to each other, they yield the same results.","SELECT CategoryID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY CategoryID;",The generated query groups by CategoryID while the ground truth query groups by CategoryName. This might lead to different results if there are discrepancies in how categories are referenced or named.,Base
"Find the average salary of employees who have generated over $50,000 in sales.",SELECT AVG(e.Salary) AS AvgSalary FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 50000;,"```sql
SELECT AVG(e.Salary) AS AverageSalary
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID
HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 50000;
```","The generated SQL query and the ground truth query are functionally identical, yielding the same results. Both calculate the average salary for employees who have generated more than $50,000 in sales using the same logic and table joins.",SELECT AVG(e.Salary) FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 50000;,"Both queries calculate the average salary of employees whose total sales exceed $50,000, using the same logic and structure. The slight difference in the SELECT statement naming (e.Salary vs. e.Salary AS AvgSalary) does not affect the outcome.",both
Which customers have placed orders more than five times?,"SELECT customers.CustomerID, COUNT(orders.OrderID) AS OrderCount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 5","```sql
SELECT customers.CustomerID, customers.CompanyName, COUNT(orders.OrderID) AS OrderCount
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
GROUP BY customers.CustomerID, customers.CompanyName
HAVING COUNT(orders.OrderID) > 5;
```","Both queries identify customers who have placed more than five orders by grouping on CustomerID and counting orders. The inclusion of CompanyName in the Generated SQL query does not affect the correctness of identifying CustomerIDs, and thus yields the same result as the Ground Truth SQL Query.","SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 5;","Both queries determine which customers have placed orders more than five times. The generated query assumes all CustomerIDs in orders exist in customers, which matches the ground truth if this assumption holds true.",both
Rank customers by the number of orders they have placed.,"SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID ORDER BY NumberOfOrders DESC;","```sql
SELECT c.CustomerID, c.CompanyName, COUNT(o.OrderID) AS OrderCount
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerID, c.CompanyName
ORDER BY OrderCount DESC;
```","Both queries rank customers by the number of orders placed. The generated query includes the CompanyName field, but it does not alter the ranking outcome.","SELECT c.CustomerID, COUNT(o.OrderID) AS OrderCount FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY OrderCount DESC;","Both queries yield the same results by counting orders per customer and ranking by that count. The LEFT JOIN in the generated query includes customers with zero orders, which might slightly vary from the ground truth if such customers are present. However, with non-zero orders, they are functionally the same.",both
Calculate the average time between order and shipment.,"SELECT AVG(DATE_PART('day', o.ShippedDate - o.OrderDate)) AS AvgShippingTime FROM orders o WHERE o.ShippedDate IS NOT NULL;","```sql
SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageTimeBetweenOrderAndShipment
FROM orders
WHERE ShippedDate IS NOT NULL;
```","Both queries calculate the average time between OrderDate and ShippedDate where ShippedDate is not null, using different functions but achieving the same outcome.","SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders WHERE ShippedDate IS NOT NULL;","Both queries calculate the average number of days between the OrderDate and ShippedDate, excluding rows with NULL ShippedDate.",both
What percentage of orders were delivered on time each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, ROUND(100.0 * SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID), 2) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID)) AS On_time_Delivery_Rate
FROM
    orders
GROUP BY
    Month
```","Both queries calculate the percentage of orders delivered on time each month. They use similar logic with COUNT and CASE statements and group by month, yielding the same results.","SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month ORDER BY Month;","Both queries calculate the percentage of on-time deliveries per month using similar logic, differing only in date formatting functions and minor syntax.",both
What is the Total Sales revenue for the last month?,SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) AND MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH),"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE orders.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND orders.OrderDate < DATE_TRUNC('month', CURRENT_DATE);
```","Both queries calculate the Total Sales for the last month by filtering orders from the previous calendar month and summing up the revenue based on unit price, quantity, and discount. They use different methods to filter the date range, but achieve the same result.","SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(month, -1, CURRENT_DATE) AND o.OrderDate < CURRENT_DATE","The generated query uses a date range from the current date minus one month up to the current date, which might not cover the entire last calendar month. The ground truth query explicitly ensures it calculates the total for the last calendar month by using YEAR and MONTH functions.",Base
What is the distribution of orders across different shipping companies?,"SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia ORDER BY OrderCount DESC;","```sql
SELECT ShipVia, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY ShipVia
```","The generated query provides the same distribution of orders across different shipping companies, just without the descending order arrangement of the results.","SELECT ShipVia, COUNT(OrderID) FROM orders GROUP BY ShipVia;","The generated query does not order the results, whereas the ground truth query orders by OrderCount in descending order.",Base
How many orders did each employee handle last year?,"SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName);","```sql
SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) - 1
GROUP BY e.EmployeeID;
```","Both queries count the number of orders handled by each employee in the previous year, though the ground truth query includes employee names in the output, which does not affect the count of orders.","SELECT employees.EmployeeID, COUNT(orders.OrderID) AS TotalOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY employees.EmployeeID;","Both queries correctly count the number of orders handled by each employee last year, despite different column selections for output.",both
What day of the week do most shipments occur?,"SELECT TO_CHAR(ShippedDate, 'Day') AS Weekday, COUNT(OrderID) AS OrderCount FROM orders GROUP BY TO_CHAR(ShippedDate, 'Day') ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT DAYOFWEEK(ShippedDate) AS DayOfWeek, COUNT(OrderID) AS ShipmentCount
FROM orders
GROUP BY DayOfWeek
ORDER BY ShipmentCount DESC
LIMIT 1;
```","The functions DAYOFWEEK and TO_CHAR('Day') may return different representations of the day. DAYOFWEEK returns a numeric value, while TO_CHAR('Day') returns the full day name. This could affect the groupings and result.","SELECT TO_CHAR(OrderDate, 'Day') AS Weekday, COUNT(OrderID) AS Orders FROM orders GROUP BY TO_CHAR(OrderDate, 'Day') ORDER BY Orders DESC LIMIT 1;",The generated SQL query uses the OrderDate to evaluate the day of week of shipments instead of using ShippedDate as in the ground truth query. This will provide different results as they are distinct fields.,None
What is the total sales generated by each employee for the current month?,"SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName;","```sql
SELECT 
    e.EmployeeID, 
    e.FirstName, 
    e.LastName, 
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
WHERE 
    MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND 
    YEAR(o.OrderDate) = YEAR(CURRENT_DATE)
GROUP BY 
    e.EmployeeID, 
    e.FirstName, 
    e.LastName;
```","Both queries calculate the total sales for each employee for the current month, by summing the product of UnitPrice, Quantity, and Discount across orders. The only difference is in the format of the employee's name (separate fields vs. concatenated), which doesn't affect the total results.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSalesThisMonth FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID;","Both queries calculate the total sales generated by each employee for the current month. They include the same filtering and aggregation logic. The difference is that the Ground Truth query also includes the employee's full name in the output, but this does not affect the correctness of the total sales calculation per employee.",both
Find the total sales by supplier in a specific month.,"SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE DATE_FORMAT(orders.OrderDate, '%Y-%m') = 'specific month' GROUP BY suppliers.CompanyName","```sql
SELECT s.SupplierID, s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
WHERE MONTH(o.OrderDate) = specific_month AND YEAR(o.OrderDate) = specific_year
GROUP BY s.SupplierID, s.CompanyName;
```","The generated query uses MONTH() and YEAR() functions, which could potentially miss cases like different years with the same month. The ground truth query uses DATE_FORMAT() to match the entire 'year-month', which ensures the correct scope for specific months.","SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS supplier_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-10-31' GROUP BY suppliers.CompanyName","The generated SQL query uses a specific date range for October 2023, while the ground truth query uses DATE_FORMAT to filter by a generic 'specific month'. The criteria for filtering the month are different.",None
How does the average employee salary compare between different regions?,"SELECT Region, AVG(Salary) AS AvgSalary FROM employees GROUP BY Region;","```sql
SELECT Region, AVG(Salary) AS AverageSalary
FROM employees
GROUP BY Region;
```","Both queries calculate the average salary for employees grouped by region, providing equivalent results.","SELECT employees.Region, AVG(employees.Salary) AS avg_salary FROM employees GROUP BY employees.Region",Both queries compute the average salary per region using the same logic and structure.,both
What is the total quantity of products ordered in the last year?,"SELECT SUM(od.Quantity) AS TotalQuantityOrdered FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);","```sql
SELECT SUM([Order Details].Quantity) AS TotalQuantityOrdered
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);
```","The SQL functions used are MySQL specific (DATE_SUB, CURDATE()) and not ANSI SQL standard.","SELECT SUM(od.Quantity) AS TotalQuantityOrdered FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE);","The generated SQL query uses DATEADD(YEAR, -1, CURRENT_DATE) which might not be ANSI-standard, whereas the ground truth query uses DATE_SUB(CURDATE(), INTERVAL 1 YEAR) which is also not ANSI-standard. Their behavior might differ depending on the SQL dialect. Both should ideally use syntax like CURRENT_DATE - INTERVAL 1 YEAR which is more compatible across different databases.",None
How many orders were shipped on or before the required date each month?,"SELECT TO_CHAR(ShippedDate, 'YYYY-MM') AS Month, COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY TO_CHAR(ShippedDate, 'YYYY-MM');","```sql
SELECT 
    DATE_FORMAT(orders.RequiredDate, '%Y-%m') AS Month,
    COUNT(orders.OrderID) AS OrdersShippedOnTime
FROM 
    orders
WHERE 
    orders.ShippedDate <= orders.RequiredDate
GROUP BY 
    Month
```",Both queries group orders by month and count orders where ShippedDate is on or before RequiredDate. They might use different date formatting functions but achieve the same grouping.,"SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS Month, COUNT(orders.OrderID) AS OnTimeOrders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM');",The generated query groups by OrderDate while the ground truth query groups by ShippedDate. This will yield different monthly counts.,Base
List the top 5 products by revenue.,"SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 5;","```sql
SELECT 
    [Order Details].ProductID, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM 
    [Order Details]
JOIN 
    orders ON [Order Details].OrderID = orders.OrderID
GROUP BY 
    [Order Details].ProductID
ORDER BY 
    TotalRevenue DESC
LIMIT 5;
```","Both queries calculate the total revenue for each product by summing the revenue from each order detail. They both group by ProductID and order the results by the total revenue in descending order, limiting the output to the top 5 products. The join with the orders table in the generated query is unnecessary but does not affect the result.","SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalRevenue DESC LIMIT 5;","The generated query groups by ProductName, whereas the ground truth query groups by ProductID. The columns selected are different, so they may yield different results depending on data configuration.",Base
What is the current total inventory value?,SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;,"```sql
SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;
```",Both queries calculate the total inventory value by summing up the product of UnitPrice and UnitsInStock from the products table.,SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;,Both queries are identical and correctly calculate the total inventory value by multiplying UnitPrice by UnitsInStock and summing the results in the products table.,both
What is the distribution of employee salaries by region?,"SELECT employees.Region, AVG(employees.Salary) AS AvgSalary FROM employees GROUP BY employees.Region;","```sql
SELECT Region, AVG(Salary) AS AverageSalary
FROM employees
GROUP BY Region;
```","Both queries calculate the average salary for each region using the employees table and group the salaries by region. Therefore, they produce the same result.","SELECT employees.Region, AVG(employees.Salary) AS AverageSalary FROM employees GROUP BY employees.Region;","Both queries calculate the average salary by region, which accurately answers the user's question about the distribution of employee salaries by region. The difference is only in the alias for the average salary column.",both
Find all employees who ship to more than three different countries.,SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(DISTINCT o.ShipCountry) > 3;,"```sql
SELECT e.EmployeeID, e.FirstName, e.LastName
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID
HAVING COUNT(DISTINCT o.ShipCountry) > 3;
```","Both queries effectively find employees who ship to more than three different countries by grouping orders by EmployeeID and using COUNT(DISTINCT o.ShipCountry) > 3 in the HAVING clause. The generated query additionally selects employee FirstName and LastName, but this does not affect the core logic regarding the count of countries.","SELECT EmployeeID, COUNT(DISTINCT ShipCountry) AS CountryCount FROM orders GROUP BY EmployeeID HAVING CountryCount > 3;","Both queries return employees who have shipped to more than three different countries. The main difference is the Generated Query doesn't use a join with the employees table, but it still achieves the same result by only using the orders table and grouping by EmployeeID.",both
Which employee has the highest total sales?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries calculate the total sales per employee and return the employee with the highest total sales. They differ in selecting additional columns (FirstName, LastName) in the generated query, but the core logic and the final result align.","SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;","Both queries compute the total sales for each employee and retrieve the employee with the highest total sales. The difference is that the generated query includes the employee's full name in the output, which does not affect the correctness regarding the user's question.",both
Which country has the highest number of customers?,"SELECT Country, COUNT(*) AS NumCustomers FROM customers GROUP BY Country ORDER BY NumCustomers DESC LIMIT 1;","```sql
SELECT Country, COUNT(CustomerID) AS CustomerCount
FROM customers
GROUP BY Country
ORDER BY CustomerCount DESC
LIMIT 1;
```","Both queries count customers per country and return the country with the highest count, using a similar logic for counting and ordering.","SELECT Country, COUNT(CustomerID) AS CustomerCount FROM customers GROUP BY Country ORDER BY CustomerCount DESC LIMIT 1","Both queries group by 'Country' and count customers, ordering by the count in descending order and limiting to one result. They will yield the same result.",both
What is the revenue contribution of each supplier?,"SELECT SupplierID, SUM(od.Quantity * od.UnitPrice) AS SupplierRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY SupplierID;","```sql
SELECT p.SupplierID, SUM(od.Quantity * od.UnitPrice) AS RevenueContribution
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.SupplierID
```","Both queries calculate the total revenue contribution per supplier by summing the product of quantity and unit price from the order details, grouping the results by SupplierID. The difference in naming of the alias does not affect the logic or the result of the query.","SELECT products.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SupplierRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.SupplierID;","The generated SQL query includes a discount factor, while the ground truth query does not apply any discounts. This will result in different revenue calculations.",Base
What has been the month-over-month growth in the number of orders?,"SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(*) AS OrderCount FROM orders GROUP BY Year, Month ORDER BY Year, Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    COUNT(OrderID) AS NumberOfOrders,
    COUNT(OrderID) - LAG(COUNT(OrderID)) OVER (ORDER BY DATE_FORMAT(OrderDate, '%Y-%m')) AS MonthOverMonthGrowth
FROM 
    orders
GROUP BY 
    Month
ORDER BY 
    Month;
```","The generated SQL calculates month-over-month growth using the LAG function, while the ground truth SQL only calculates order counts by month and year.","SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, EXTRACT(YEAR FROM o.OrderDate) AS Year, COUNT(o.OrderID) AS TotalOrders FROM orders o GROUP BY Year, Month;","The generated query provides a count of orders per month and year but does not calculate month-over-month growth, which requires comparing consecutive months.",None
What is the total freight cost incurred in the past quarter?,"SELECT SUM(Freight) FROM orders WHERE OrderDate BETWEEN DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' AND DATE_TRUNC('quarter', CURRENT_DATE);","```sql
SELECT SUM(Freight) AS TotalFreightCost
FROM orders
WHERE OrderDate >= DATEADD(quarter, -1, GETDATE())
```",The generated query uses GETDATE() and DATEADD which are SQL Server functions and may not align with the logic of calculating the past quarter as in the ground truth query with CURRENT_DATE and DATE_TRUNC for PostgreSQL.,"SELECT SUM(Freight) AS total_freight FROM orders WHERE OrderDate >= DATEADD(MONTH, -3, CURRENT_DATE);","The generated query uses DATEADD with CURRENT_DATE to calculate 3 months ago, but this doesn't necessarily match the start of the past quarter as used in the ground truth query.",None
How many products are currently out of stock?,SELECT COUNT(products.ProductID) AS out_of_stock_products FROM products WHERE products.UnitsInStock = 0,"```sql
SELECT COUNT(*) AS out_of_stock_count FROM products WHERE UnitsInStock = 0;
```","Both queries count the number of products where UnitsInStock is 0, yielding the same result.",SELECT COUNT(ProductID) AS OutOfStockProducts FROM products WHERE UnitsInStock = 0;,"Both queries count the number of products with UnitsInStock equal to 0, achieving the same result.",both
What is the most common customer region?,"SELECT Region, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY Region ORDER BY NumberOfCustomers DESC LIMIT 1;","```sql
SELECT Region, COUNT(*) AS CustomerCount
FROM customers
GROUP BY Region
ORDER BY CustomerCount DESC
LIMIT 1;
```",Both queries count customers per region and return the region with the highest customer count.,"SELECT Region, COUNT(*) AS NumRegions FROM customers GROUP BY Region ORDER BY NumRegions DESC LIMIT 1;","Both queries count the entries in the 'Region' column, group by 'Region', and order by the count in descending order, ensuring the most common region is returned. The difference in counting '*' or 'CustomerID' does not affect accuracy as both are non-null.",both
What are the top 5 products in terms of revenue generated?,"SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY Revenue DESC LIMIT 5;","```sql
SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Revenue
FROM [Order Details]
GROUP BY [Order Details].ProductID
ORDER BY Revenue DESC
LIMIT 5;
```",The 'LIMIT 5' clause in the generated SQL query is not compatible with SQL ANSI standards. It should be replaced with 'FETCH FIRST 5 ROWS ONLY' for compliance.,"SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS Revenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY Revenue DESC LIMIT 5;",The generated query returns product names while the ground truth query returns product IDs.,None
Find the highest freight charges for each country.,"SELECT ShipCountry, MAX(Freight) AS MaxFreight FROM orders GROUP BY ShipCountry;","```sql
SELECT Country, MAX(Freight) AS HighestFreight
FROM orders
GROUP BY Country;
```","The Generated SQL Query groups by 'Country', while the Ground Truth Query groups by 'ShipCountry'. If the column names differ, they may yield different results.","SELECT ShipCountry, MAX(Freight) AS MaxFreight FROM orders GROUP BY ShipCountry;",Both queries are identical and correctly answer the user's question by selecting the maximum freight for each shipping country from the 'orders' table.,FT
What is the most common city among customers with the highest lifetime value?,SELECT customers.City FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.City ORDER BY SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) DESC LIMIT 1,"```sql
SELECT customers.City, COUNT(customers.CustomerID) AS city_count
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID
ORDER BY SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) DESC
LIMIT 1;
```","The generated query groups by CustomerID instead of City to find the highest lifetime value, affecting the final ranking of cities.",SELECT c.City FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.City ORDER BY SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) DESC LIMIT 1;,"Both queries aim to find the most common city based on total lifetime value of customers. They join the same tables, group by city, and order by the sum of order values in descending order, limiting the result to one city.",FT
Which supplier provides the most expensive products on average?,"SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AvgPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID ORDER BY AvgPrice DESC LIMIT 1;","```sql
SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AveragePrice
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
GROUP BY suppliers.CompanyName
ORDER BY AveragePrice DESC
LIMIT 1;
```",Both queries correctly calculate the average product price per supplier and select the highest one.,"SELECT SupplierID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY SupplierID ORDER BY AveragePrice DESC LIMIT 1;","The generated query returns SupplierID, while the ground truth query returns CompanyName. Also, the ground truth query includes a join with the suppliers table to get the company names.",Base
How many orders were shipped late (after the required date)?,SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;,"```sql
SELECT COUNT(*) AS LateOrders
FROM orders
WHERE ShippedDate > RequiredDate;
```","Both queries count the number of orders shipped after the required date, using different column names in the count function, which does not affect the result.",SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate,"Both queries count orders with a ShippedDate later than the RequiredDate, despite the difference in alias usage.",both
What is the fastest average shipping method based on fulfillment time?,"SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia ORDER BY AvgFulfillmentTime ASC LIMIT 1;","```sql
SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY ShipVia
ORDER BY AverageFulfillmentTime ASC
LIMIT 1;
```",Both queries calculate the average fulfillment time for each shipping method and return the method with the fastest average. The queries are functionally equivalent.,"SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia ORDER BY AvgFulfillmentTime ASC;","The generated query sorts the average fulfillment times but does not limit the results to the fastest method, unlike the ground truth query which selects only the fastest method by using LIMIT 1.",Base
What is the most common shipping method for orders with late deliveries?,"SELECT ShipVia, COUNT(OrderID) AS LateCount FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipVia ORDER BY LateCount DESC LIMIT 1;","```sql
SELECT ShipVia, COUNT(*) AS LateDeliveryCount
FROM orders
WHERE ShippedDate > RequiredDate
GROUP BY ShipVia
ORDER BY LateDeliveryCount DESC
LIMIT 1;
```","Both queries retrieve the most common shipping method for orders with late deliveries by counting orders where ShippedDate is greater than RequiredDate, and ordering by the count in descending order, limiting the result to one.","SELECT ShipVia, COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipVia ORDER BY LateOrders DESC LIMIT 1;","Both queries count the number of late orders per shipping method, grouping by ShipVia and ordering by the count. They yield the same result.",both
What is the total number of discontinued products?,SELECT COUNT(ProductID) AS DiscontinuedProducts FROM products WHERE Discontinued = TRUE;,"```sql
SELECT COUNT(*) AS TotalDiscontinuedProducts 
FROM products 
WHERE Discontinued = 1;
```","Both queries count the number of discontinued products, assuming Discontinued is a boolean column with TRUE equivalent to 1.",SELECT COUNT(*) AS TotalDiscontinued FROM products WHERE Discontinued = 1;,"Both queries count the number of products where the 'Discontinued' field is true/1, which should yield the same result.",both
What is the average discount provided on products in order history?,SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details];
```","Both queries are identical and calculate the average discount from the same table, yielding the same results.",SELECT AVG(Discount) FROM [Order Details];,"Both queries calculate the average discount from the 'Order Details' table, so they yield the same results despite the difference in column alias.",both
List the most frequently ordered products.,"SELECT od.ProductID, p.ProductName, COUNT(od.OrderID) AS OrderCount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY od.ProductID, p.ProductName ORDER BY OrderCount DESC LIMIT 5;","```sql
SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalOrdered
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY products.ProductName
ORDER BY TotalOrdered DESC;
```","The generated SQL query calculates the total quantity ordered for each product, while the ground truth query calculates the number of orders each product appears in. These are different metrics.","SELECT p.ProductName, COUNT(od.OrderID) AS OrderCount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY OrderCount DESC LIMIT 1;","The generated query returns only the most frequently ordered product, limiting the results to 1. The ground truth query returns the top 5 products, offering a broader view.",None
What are the top selling products and which employees are associated with these sales?,"SELECT [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalQuantity, employees.EmployeeID FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY [Order Details].ProductID, employees.EmployeeID ORDER BY TotalQuantity DESC LIMIT 5;","```sql
SELECT p.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, e.EmployeeID, e.FirstName, e.LastName
FROM [Order Details] od
JOIN orders o ON od.OrderID = o.OrderID
JOIN employees e ON o.EmployeeID = e.EmployeeID
JOIN products p ON od.ProductID = p.ProductID
GROUP BY p.ProductID, e.EmployeeID
ORDER BY TotalSales DESC;
```","The generated query calculates total sales value, while the ground truth query calculates total quantity sold, and it limits the results to the top 5. The generated query does not apply this limit.","SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSold, e.FirstName, e.LastName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID JOIN employees e ON o.EmployeeID = e.EmployeeID GROUP BY p.ProductID, e.EmployeeID, e.FirstName, e.LastName ORDER BY TotalSold DESC;","The generated query includes product names and details for each employee which aligns with the user query for top-selling products and associated employees. However, it does not limit results like the ground truth query which constrains the results to the top 5 products.",None
What is the total freight cost incurred each month?,"SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, SUM(Freight) AS TotalFreight FROM orders GROUP BY Year, Month;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Freight) AS TotalFreightCost
FROM orders
GROUP BY Month
ORDER BY Month;
```","Both queries compute the sum of freight costs for each month. The 'Generated SQL Query' uses DATE_FORMAT to group by year and month, whereas the 'Ground Truth SQL Query' uses EXTRACT for year and month separately. Both result in the same monthly grouping and totals.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Freight) AS TotalFreight FROM orders GROUP BY Month;","The generated query formats the date to 'YYYY-MM' and groups by that, while the ground truth query separately extracts and groups by year and month. This could lead to different groupings and results, especially across different years.",Base
How many orders have a shipping delay longer than 5 days?,"SELECT COUNT(OrderID) AS LongDelays FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) > 5;","```sql
SELECT COUNT(*) 
FROM orders 
WHERE DATEDIFF(ShippedDate, OrderDate) > 5;
```","Both queries count the number of orders with a shipping delay longer than 5 days using the DATEDIFF function. The difference is only in the use of COUNT(*) versus COUNT(OrderID), which yields the same result when counting rows.","SELECT COUNT(*) AS DelayedOrders FROM orders WHERE DATEDIFF(ShippedDate, RequiredDate) > 5;","The generated query compares ShippedDate with RequiredDate, while the ground truth compares ShippedDate with OrderDate. These may represent different points in the ordering process, thus yielding different results.",Base
What is the on-time delivery rate for each shipping method?,"SELECT ShipVia, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, 
       COUNT(OrderID) AS TotalOrders,
       COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) AS OnTimeDeliveries,
       COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate
FROM orders
GROUP BY ShipVia;
```","Both queries calculate the on-time delivery rate for each shipping method. The generated query uses SQL's FILTER clause for aggregation, while the ground truth query uses a CASE statement; however, they produce equivalent results.","SELECT ShipVia, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipVia;","Both queries calculate the on-time delivery rate by dividing the number of on-time shipments by the total number of orders for each shipping method. The difference in scaling (multiplying by 1.0 vs. 100.0) does not affect the accuracy of the on-time rate calculation, only the representation as a percentage versus decimal.",both
What are the total units ordered for products with stock less than 10?,"SELECT p.ProductID, SUM(od.Quantity) AS TotalUnitsOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.UnitsInStock < 10 GROUP BY p.ProductID;","```sql
SELECT SUM(order_details.Quantity) AS TotalUnitsOrdered
FROM [Order Details] AS order_details
JOIN products AS p ON order_details.ProductID = p.ProductID
WHERE p.UnitsInStock < 10;
```","The generated SQL query produces the total units ordered as a single sum, whereas the ground truth query provides this information grouped by each product with stock less than 10.",SELECT SUM([Order Details].Quantity) FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE products.UnitsInStock < 10;,"The generated query calculates the total units ordered for all products with stock less than 10, not distinguishing between products. The ground truth query groups by ProductID, providing totals for each individual product.",None
Identify the top 3 cities with the highest total revenue.,"SELECT ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCity ORDER BY TotalRevenue DESC LIMIT 3;","```sql
SELECT City, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY City
ORDER BY TotalRevenue DESC
LIMIT 3;
```","The generated query groups and orders by 'City' from the 'customers' table, while the ground truth query groups and orders by 'ShipCity' from the 'orders' table. These may not yield the same results.","SELECT ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCity ORDER BY TotalRevenue DESC LIMIT 3;","The generated SQL query is identical to the ground truth SQL query. Both calculate total revenue per city using the same formula, group results by ShipCity, and order by TotalRevenue in descending order, limiting the output to the top 3 cities.",FT
How many orders were shipped after the required date?,SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;,"```sql
SELECT COUNT(*) AS OrdersShippedLate
FROM orders
WHERE ShippedDate > RequiredDate;
```","Both queries count the number of orders where the ShippedDate is later than the RequiredDate, thus yielding the same results.",SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;,Both the generated and ground truth SQL queries are the same and correctly count the number of orders where the ShippedDate is after the RequiredDate.,both
Identify the earliest and latest order dates for each customer.,"SELECT CustomerID, MIN(OrderDate) AS FirstOrder, MAX(OrderDate) AS LastOrder FROM orders GROUP BY CustomerID;","```sql
SELECT CustomerID, MIN(OrderDate) AS EarliestOrderDate, MAX(OrderDate) AS LatestOrderDate
FROM orders
GROUP BY CustomerID;
```","The generated query and the ground truth query have identical logic and will yield the same results, only the alias for the date columns differ.","SELECT c.CustomerID, MIN(o.OrderDate) AS EarliestOrder, MAX(o.OrderDate) AS LatestOrder FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID;","Both queries return the earliest and latest order dates for each customer by grouping orders by CustomerID. The table joins do not affect the result since the needed data is present in the 'orders' table, and both queries use the same aggregation functions.",both
What is the most ordered product category this year?,"SELECT categories.CategoryID, categories.CategoryName, SUM([Order Details].Quantity) AS TotalOrdered FROM categories INNER JOIN products ON categories.CategoryID = products.CategoryID INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY categories.CategoryID, categories.CategoryName ORDER BY TotalOrdered DESC;","```sql
SELECT p.CategoryID, SUM(od.Quantity) AS TotalOrdered
FROM [Order Details] od
JOIN products p ON od.ProductID = p.ProductID
WHERE YEAR(od.OrderID) = YEAR(CURRENT_DATE)
GROUP BY p.CategoryID
ORDER BY TotalOrdered DESC
LIMIT 1;
```","The generated query filters by the current year using YEAR(od.OrderID), assuming OrderID is a date, which is incorrect. The ground truth query does not filter by year and includes CategoryName, which is missing from the generated query.",SELECT categories.CategoryName FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID WHERE YEAR([Order Details].OrderDate) = YEAR(CURDATE()) GROUP BY categories.CategoryName ORDER BY SUM([Order Details].Quantity) DESC LIMIT 1;,"The generated SQL query restricts results to the current year, while the ground truth query does not filter by date. Additionally, the ground truth does not limit to the top category, but the generated query does.",None
Assess the impact of discounts on product performance.,"SELECT products.ProductID, SUM([Order Details].Quantity * (1 - [Order Details].Discount)) / SUM([Order Details].Quantity) AS DiscountEffect FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantitySold,
       SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS SalesAfterDiscount
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalQuantitySold DESC;
```","The generated query focuses on total quantity sold and sales after discounts, while the ground truth query calculates the effect of discounts by finding the weighted average discount per product.","SELECT p.ProductName, SUM(od.Quantity * (1 - od.Discount)) / SUM(od.Quantity) AS DiscountEffect ON p.ProductID = od.ProductID GROUP BY p.ProductName;",The generated query uses p.ProductName and an incorrect ON statement. It omits the join clause and mislabels the discount calculation formula. The ground truth query joins products with Order Details on ProductID and correctly calculates DiscountEffect.,None
Find the products with the highest and lowest Unit Prices and their associated stock levels.,"SELECT ProductName, UnitsInStock FROM products WHERE UnitPrice = (SELECT MAX(UnitPrice) FROM products) UNION SELECT ProductName, UnitsInStock FROM products WHERE UnitPrice = (SELECT MIN(UnitPrice) FROM products);","```sql
SELECT ProductName, UnitPrice, UnitsInStock
FROM products
WHERE UnitPrice = (SELECT MAX(UnitPrice) FROM products)
   OR UnitPrice = (SELECT MIN(UnitPrice) FROM products);
```","The generated query and the ground truth query both return the products with the highest and lowest Unit Prices and their associated stock levels. Although they use different approaches, they yield the same result.","SELECT ProductName, UnitPrice, UnitsInStock FROM products WHERE UnitPrice = (SELECT MAX(UnitPrice) FROM products) OR UnitPrice = (SELECT MIN(UnitPrice) FROM products);","The generated query includes UnitPrice in the SELECT clause, which the ground truth query does not. However, products with the highest and lowest prices are still selected correctly.",Base
Which countries have the highest number of orders in the last year?,"SELECT ShipCountry, COUNT(*) AS OrderCount FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY ShipCountry ORDER BY OrderCount DESC;","```sql
SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders
FROM orders
WHERE OrderDate >= CURDATE() - INTERVAL 1 YEAR
GROUP BY ShipCountry
ORDER BY NumberOfOrders DESC;
```","The generated query counts orders from the last 365 days, while the ground truth query counts orders from the complete previous calendar year.","SELECT ShipCountry, COUNT(*) AS NumberOfOrders FROM orders WHERE OrderDate > CURRENT_DATE - INTERVAL '1 year' GROUP BY ShipCountry ORDER BY NumberOfOrders DESC;","The generated query considers the last 365 days, whereas the ground truth query considers the entire last calendar year.",None
What is the customer retention rate for the last quarter?,SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-12-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-10-01') AS customer_retention_rate,"```sql
SELECT 
    (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30') / 
    (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-07-01') AS customer_retention_rate
```","The date range in the generated SQL query is for Q3 (2023-07-01 to 2023-09-30), while the ground truth query uses Q4 (2023-10-01 to 2023-12-31). The queries calculate the retention rate for different quarters.","SELECT (COUNT(DISTINCT orders1.CustomerID) / NULLIF(COUNT(DISTINCT orders2.CustomerID), 0)) * 100 AS retention_rate FROM orders orders1 JOIN orders orders2 ON orders1.CustomerID = orders2.CustomerID WHERE orders1.OrderDate BETWEEN '2023-07-01' AND '2023-09-30' AND orders2.OrderDate < '2023-07-01'","The generated SQL query examines retention from before July 2023 to Q3 (July - September 2023), while the ground truth checks retention from before October 2023 to Q4 (October - December 2023). They measure different quarters.",None
Which region has the most sales by employees?,"SELECT o.ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS RegionSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN employees e ON o.EmployeeID = e.EmployeeID GROUP BY o.ShipRegion ORDER BY RegionSales DESC LIMIT 1;","```sql
SELECT employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM employees
JOIN orders ON employees.EmployeeID = orders.EmployeeID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY employees.Region
ORDER BY TotalSales DESC
LIMIT 1;
```","The generated query groups by 'employees.Region', while the ground truth query groups by 'orders.ShipRegion'. This mismatch means the queries may yield different results, as they focus on different fields for determining regional sales.","SELECT employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.Region ORDER BY TotalSales DESC LIMIT 1","The Generated SQL Query uses 'employees.Region', while the Ground Truth SQL Query uses 'o.ShipRegion'. These may refer to different columns in the database. Thus, it may not yield the same results.",None
What is the total freight cost for all orders shipped to Germany?,SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShipCountry = 'Germany';,"```sql
SELECT SUM(Freight) AS TotalFreightCost
FROM orders
WHERE ShipCountry = 'Germany';
```",The generated SQL query accurately answers the user's question and produces the same result as the ground truth query. Both queries calculate the total freight cost for orders shipped to Germany.,SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShipCountry = 'Germany';,"Both queries calculate the sum of the Freight column for orders shipped to Germany, thus answering the user's question accurately.",both
What is the average order fulfillment time (in days) per month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM orders
GROUP BY Month
```","Both queries compute the average fulfillment time per month using DATEDIFF to get the days between 'ShippedDate' and 'OrderDate'. They group results by month derived from 'OrderDate'. Despite different aliases and how they handle the 'GROUP BY' clause, both yield the same result.","SELECT DATE_TRUNC('month', orders.OrderDate) AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_fulfillment_time FROM orders GROUP BY month;",Both queries calculate the average order fulfillment time per month using similar logic. The difference in functions (DATE_TRUNC vs. DATE_FORMAT) does not affect the result as both extract the month from the order date effectively for grouping.,both
Which regions have the highest average order quantities?,"SELECT ShipRegion, AVG([Order Details].Quantity) AS AvgQuantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion ORDER BY AvgQuantity DESC;","```sql
SELECT customers.Region, AVG([Order Details].Quantity) AS AverageOrderQuantity
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.Region
ORDER BY AverageOrderQuantity DESC;
```","The generated query uses customers.Region while the ground truth query uses ShipRegion, leading to potentially different regions and results.","SELECT ShipRegion, AVG([Order Details].Quantity) AS AvgQuantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion ORDER BY AvgQuantity DESC;",The generated SQL query is identical to the ground truth query and accurately answers the user's question regarding regions with the highest average order quantities.,FT
Which customers have had all their orders delivered on time?,SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) = COUNT(*) FILTER (WHERE ShippedDate <= RequiredDate);,"```sql
SELECT CustomerID
FROM orders
GROUP BY CustomerID
HAVING COUNT(OrderID) = COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END);
```","Both queries use the same logic to compare the total count of orders with the count of orders shipped on or before the required date, ensuring all orders are delivered on time. The COUNT with CASE and COUNT with FILTER approaches yield the same outcome.",SELECT CustomerID FROM orders WHERE OrderDate = RequiredDate GROUP BY CustomerID HAVING COUNT(*) = (SELECT COUNT(*) FROM orders WHERE CustomerID = orders.CustomerID);,"The generated query checks for orders with exact matching dates, not if the shipped date is on or before the required date, as the ground truth does.",Base
Determine if any product category consistently exceeds its reorder levels.,"SELECT CategoryID, COUNT(*) AS ExceedCount FROM products WHERE UnitsInStock > ReorderLevel GROUP BY CategoryID HAVING COUNT(*) > 0;","```sql
SELECT p.CategoryID, 
       SUM(p.UnitsInStock) AS TotalUnitsInStock, 
       SUM(p.ReorderLevel) AS TotalReorderLevel
FROM products p
GROUP BY p.CategoryID
HAVING SUM(p.UnitsInStock) > SUM(p.ReorderLevel);
```","The generated query checks if the total units in stock per category exceed the total reorder levels, while the ground truth checks if there is any record in each category where units in stock exceed reorder level.","SELECT CategoryID, COUNT(*) AS BelowReOrder FROM products WHERE UnitsInStock <= ReorderLevel GROUP BY CategoryID;","The generated query counts products below or equal to their reorder levels, whereas the ground truth counts products exceeding their reorder levels. They measure opposite conditions.",None
Which product generated the highest total sales revenue?,"SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM [Order Details] od
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY od.ProductID
ORDER BY TotalSales DESC
LIMIT 1;
```","The generated query includes a join with the orders table, which is unnecessary for calculating total sales revenue by product. The ground truth query correctly calculates this using only the Order Details table.","SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] GROUP BY ProductID ORDER BY TotalSales DESC LIMIT 1;","Both queries calculate total sales revenue by multiplying UnitPrice, Quantity, and applying Discount. They group by ProductID, order by TotalSales in descending order, and limit to one result. The difference is merely in the naming convention with brackets, which doesn't affect the outcome.",FT
What is the highest freight cost recorded in the database?,SELECT MAX(Freight) FROM orders;,"```sql
SELECT MAX(Freight) AS HighestFreightCost FROM orders;
```","Both queries calculate the maximum freight cost from the 'orders' table, providing the same result.",SELECT MAX(Freight) AS MaxFreight FROM orders;,Both queries are functionally the same; they correctly identify the maximum freight cost from the 'orders' table.,both
What is the total discount given on all orders?,SELECT SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM [Order Details] od;,"```sql
SELECT SUM(Discount) AS TotalDiscount
FROM [Order Details];
```","The generated SQL query sums only the 'Discount' column, whereas the ground truth query correctly calculates the discount based on the product of UnitPrice, Quantity, and Discount.",SELECT SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscount FROM [Order Details] od;,The generated SQL query and the ground truth SQL query produce the same results as they both calculate the total discount using the formula UnitPrice * Quantity * Discount from the Order Details table.,FT
Which region has the lowest on-time delivery rate this quarter?,"SELECT ShipRegion, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY ShipRegion ORDER BY OnTimeRate ASC LIMIT 1;","```sql
SELECT ShipRegion, 
       COUNT(OrderID) AS TotalOrders,
       SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) AS OnTimeDeliveries,
       (SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 1.0 / COUNT(OrderID)) AS OnTimeDeliveryRate
FROM orders
WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) 
      AND OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) + INTERVAL '3 months'
GROUP BY ShipRegion
ORDER BY OnTimeDeliveryRate ASC
LIMIT 1;
```",Both queries compute the on-time delivery rate by comparing ShippedDate and RequiredDate and filter orders within the current quarter. They then order by the on-time rate in ascending order and limit results to the region with the lowest rate.,"SELECT ShipRegion, COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate)::decimal / COUNT(OrderID) * 100 AS on_time_delivery_rate FROM orders WHERE EXTRACT(QUARTER FROM OrderDate) = EXTRACT(QUARTER FROM CURRENT_DATE) AND EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY ShipRegion ORDER BY on_time_delivery_rate ASC LIMIT 1;",Both queries calculate the on-time delivery rate for each region in the current quarter and return the region with the lowest rate. They differ in approach but yield the same result.,both
Which customers have placed the most orders with a discount?,"SELECT o.CustomerID, COUNT(DISTINCT o.OrderID) AS DiscountedOrders FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0 GROUP BY o.CustomerID ORDER BY DiscountedOrders DESC;","```sql
SELECT CustomerID, COUNT(OrderID) AS TotalOrders, SUM(Discount) AS TotalDiscount
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE [Order Details].Discount > 0
GROUP BY CustomerID
ORDER BY TotalOrders DESC;
```","The generated query counts all OrderIDs, whereas the ground truth counts distinct OrderIDs. The semantics differ as the former might inflate counts due to non-distinct entries.","SELECT o.CustomerID, COUNT(o.OrderID) AS order_count FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE od.Discount > 0 GROUP BY o.CustomerID ORDER BY order_count DESC","The generated query counts all occurrences of OrderID with a discount, potentially counting duplicate orders. The ground truth query uses COUNT(DISTINCT o.OrderID) to ensure each order is counted only once.",None
Calculate the total sales grouped by country and month.,"SELECT ShipCountry, TO_CHAR(OrderDate, 'YYYY-MM') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry, TO_CHAR(OrderDate, 'YYYY-MM')","```sql
SELECT 
    orders.ShipCountry,
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth,
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    orders.ShipCountry, OrderMonth
```","Both queries group sales by country and monthly period, and calculate total sales in the same manner, despite using different date formatting functions depending on SQL dialect.","SELECT MONTH(orders.OrderDate) AS order_month, orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY YEAR(orders.OrderDate), MONTH(orders.OrderDate), orders.ShipCountry","The generated query groups by YEAR and MONTH separately, while the ground truth query groups by the concatenated year-month format. They may produce different grouping results.",Base
Which customers have placed orders with a shipping cost exceeding $100?,"SELECT DISTINCT customers.CustomerID, CompanyName FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.Freight > 100;","```sql
SELECT DISTINCT customers.CustomerID, customers.CompanyName, customers.ContactName, customers.ContactTitle, customers.Address, customers.City, customers.Region, customers.PostalCode, customers.Country, customers.Phone, customers.Fax
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
WHERE orders.Freight > 100;
```",The generated SQL query includes more columns in the SELECT clause but it still retrieves the same customers who have placed orders with a shipping cost exceeding $100 as required by the user question.,SELECT CustomerID FROM orders WHERE Freight > 100;,"The generated query only returns CustomerID, while the ground truth query returns distinct CustomerID and CompanyName by joining with the customers table.",Base
"Calculate the total revenue generated from orders, including discounts.",SELECT SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od;,"```sql
SELECT SUM(OD.Quantity * OD.UnitPrice * (1 - OD.Discount)) AS TotalRevenue
FROM [Order Details] OD;
```","The generated SQL query is functionally identical to the ground truth query. Both calculate the total revenue by summing up the product of Quantity, UnitPrice, and the discounted rate from the 'Order Details' table.",SELECT SUM(od.Quantity * (od.UnitPrice * (1 - od.Discount))) AS TotalRevenue FROM [Order Details] od;,"Both queries calculate the total revenue by multiplying the quantity, unit price, and the discount factor, then summing the result. The operations yield the same result.",both
Which product has the highest total sales in terms of revenue?,"SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductSales FROM [Order Details] od GROUP BY od.ProductID ORDER BY ProductSales DESC LIMIT 1","```sql
SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY [Order Details].ProductID
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries calculate the total sales per product by summing the revenue for each line item in the 'Order Details' table and then order the products by this revenue in descending order, returning the product with the highest sales. The join on 'orders' is unnecessary but does not affect the results, as the 'OrderID' is not used in the calculations.","SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalSales DESC LIMIT 1;",Both queries calculate total sales per product and return the product with the highest total sales by ordering in descending order and limiting to one result. The minor difference in aliases does not affect the result.,both
List all discontinued products and their stock levels.,"SELECT ProductName, UnitsInStock FROM products WHERE Discontinued = 1;","```sql
SELECT ProductName, UnitsInStock 
FROM products 
WHERE Discontinued = 1;
```",The generated query and the ground truth query are identical in terms of logic and will deliver the same results: both select ProductName and UnitsInStock from the products table where Discontinued equals 1.,"SELECT ProductName, UnitsInStock FROM products WHERE Discontinued = 1;","Both queries select the same columns and apply the same condition on the 'Discontinued' status, hence they yield the same results.",both
Which five products contribute the most to the total sales of each employee?,"SELECT e.EmployeeID, od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, od.ProductID ORDER BY e.EmployeeID, ProductSales DESC;","```sql
SELECT e.EmployeeID, od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, od.ProductID
ORDER BY e.EmployeeID, TotalSales DESC
LIMIT 5
```","The generated SQL query uses LIMIT 5 incorrectly, which applies to the whole result, not per employee. It does not actually filter the top five products for each employee, unlike the ground truth which lacks a mechanism for such filtering.","SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS FullName, [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS ProductSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, [Order Details].ProductID ORDER BY employees.EmployeeID, ProductSales DESC LIMIT 5","The generated query limits the results to only five rows in total, not five products per employee. It lacks a partitioning by employee to properly restrict the top five products for each employee.",None
How many unique products were sold in the last year?,"SELECT COUNT(DISTINCT ProductID) FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR));","```sql
SELECT COUNT(DISTINCT ProductID) AS UniqueProductsSold
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE orders.OrderDate >= DATEADD(YEAR, -1, GETDATE());
```","The generated query uses DATEADD and GETDATE(), which are SQL Server functions, while the ground truth uses DATE_SUB and CURDATE(), which are MySQL functions. This can yield different results based on the current date logic and the SQL dialect.",SELECT COUNT(DISTINCT od.ProductID) FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) - 1;,"The generated query checks for the exact last year by comparing the year, while the ground truth query considers orders within the last 365 days.",None
Which shipping company has the highest on-time delivery rate?,"SELECT shippers.CompanyName, CAST(COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) AS FLOAT) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName ORDER BY on_time_delivery_rate DESC","```sql
SELECT shippers.CompanyName, 
       COUNT(orders.OrderID) AS total_orders,
       SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) AS on_time_deliveries,
       (SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID)) AS on_time_delivery_rate
FROM orders
JOIN shippers ON orders.ShipVia = shippers.ShipperID
GROUP BY shippers.CompanyName
ORDER BY on_time_delivery_rate DESC
LIMIT 1;
```","Both queries calculate the on-time delivery rate per shipping company and return the company with the highest rate. The generated query limits the result to one, which answers the user's question.","SELECT ShipVia, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) * 100) AS OnTimeDeliveryRate FROM orders GROUP BY ShipVia ORDER BY OnTimeDeliveryRate DESC LIMIT 1;","The generated query does not join with the shippers table; thus, it doesn't return the shipping company's name, which is required to answer the question.",Base
How many orders were delivered on time each month?,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, COUNT(*) AS OnTimeOrders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    COUNT(OrderID) AS OnTimeDeliveries
FROM 
    orders
WHERE 
    ShippedDate <= RequiredDate
GROUP BY 
    Month
ORDER BY 
    Month;
```",Both queries group orders by month and count orders where ShippedDate is on or before RequiredDate. They will yield the same results.,"SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY Month;","Both queries count the number of on-time orders for each month, grouping by the formatted month and considering orders where the ShippedDate is less than or equal to the RequiredDate.",both
Find the product with the highest discount applied in the last month.,"SELECT products.ProductName, [Order Details].Discount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) ORDER BY [Order Details].Discount DESC LIMIT 1;","```sql
SELECT TOP 1 p.ProductName, MAX(od.Discount) AS HighestDiscount
FROM [Order Details] od
JOIN products p ON od.ProductID = p.ProductID
WHERE od.OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= DATEADD(MONTH, -1, GETDATE()))
GROUP BY p.ProductName
ORDER BY HighestDiscount DESC;
```","The generated query uses GETDATE() and DATEADD for filtering, while the ground truth uses CURDATE() and DATE_SUB. SQL Server's GETDATE() and MySQL's CURDATE() have different implications, and the function logic (e.g., ordering) differs. Also, MAX() is misplaced in the generated query.","SELECT p.ProductName, od.Discount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate >= DATE_TRUNC('month', NOW()) - INTERVAL '1 month' AND od.OrderDate < DATE_TRUNC('month', NOW()) AND od.Discount = (SELECT MAX(Discount) FROM [Order Details] WHERE OrderDate >= DATE_TRUNC('month', NOW()) - INTERVAL '1 month' AND OrderDate < DATE_TRUNC('month', NOW())) LIMIT 1;","The generated query uses a subquery to find the max discount and only retrieves a product matching that exact discount, while the ground truth query orders by discount and selects the highest directly. Differences in date handling might also lead to different results under certain conditions.",None
Find the top three suppliers with the fastest delivery times.,"SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName ORDER BY AverageLeadTime ASC LIMIT 3;","```sql
SELECT s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageDeliveryTime
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY s.SupplierID, s.CompanyName
ORDER BY AverageDeliveryTime ASC
LIMIT 3;
```",Both queries calculate the average delivery time for each supplier using the same joins and ordering. The slight differences in alias naming do not affect the result.,"SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_delivery_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY avg_delivery_time ASC LIMIT 3","Both queries calculate the average delivery time for suppliers and return the top three suppliers with the shortest average delivery times. The operations and joins are effectively equivalent, achieving the same result.",both
Which countries have suppliers who also have fax numbers listed?,SELECT DISTINCT Country FROM suppliers WHERE Fax IS NOT NULL;,"```sql
SELECT DISTINCT Country
FROM suppliers
WHERE Fax IS NOT NULL AND Fax <> '';
```","The generated query specifically checks for non-empty strings using Fax <> '', whereas the ground truth query does not. This may lead to different results if there are Fax entries that are spaces or empty strings.",SELECT DISTINCT Country FROM suppliers WHERE Fax IS NOT NULL;,"Both queries intend to list unique countries from the suppliers table where the Fax field is not null, hence they produce the same result.",FT
Which city has the most suppliers located in it?,"SELECT s.City, COUNT(s.SupplierID) AS SupplierCount FROM suppliers s GROUP BY s.City ORDER BY SupplierCount DESC LIMIT 1;","```sql
SELECT City, COUNT(SupplierID) AS SupplierCount
FROM suppliers
GROUP BY City
ORDER BY SupplierCount DESC
LIMIT 1;
```","Both queries effectively count suppliers per city, group by city, order by the count in descending order, and limit the result to one, thus answering the user's question.","SELECT City, COUNT(SupplierID) AS NumSuppliers FROM suppliers GROUP BY City ORDER BY NumSuppliers DESC LIMIT 1;","Both queries count the number of suppliers per city and order the results in descending order, limiting the result to the top city. Thus, they yield the same results.",both
Which orders took longer than the required date to be shipped?,SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;,"```sql
SELECT OrderID, OrderDate, RequiredDate, ShippedDate
FROM orders
WHERE ShippedDate > RequiredDate;
```","Both queries identify orders where the ShippedDate is later than the RequiredDate, fulfilling the user's request.",SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;,The generated SQL query and the ground truth SQL query are identical and correctly retrieve orders where the ShippedDate is later than the RequiredDate.,both
Which orders had the largest discount applied?,"SELECT od.OrderID, od.Discount FROM [Order Details] od WHERE od.Discount = (SELECT MAX(Discount) FROM [Order Details]) ORDER BY od.OrderID;","```sql
SELECT OrderID, SUM(Discount) AS TotalDiscount
FROM [Order Details]
GROUP BY OrderID
ORDER BY TotalDiscount DESC
LIMIT 1;
```","The generated query calculates the total discount per order and selects the order with the largest total discount. The ground truth query selects orders with the maximum single discount value, which may not correspond to the largest total discount.","SELECT OrderID, Discount FROM [Order Details] WHERE Discount = (SELECT MAX(Discount) FROM [Order Details]);","Both queries select the OrderID and Discount for orders with the maximum discount from the [Order Details] table. The only difference is that the ground truth query includes an ORDER BY clause, which doesn't affect the accuracy of the result set for the user's question.",FT
Determine the customer satisfaction score based on average order frequency.,"SELECT customers.CustomerID, COUNT(orders.OrderID)/DATEDIFF(MAX(orders.OrderDate), MIN(orders.OrderDate)) AS OrderFrequency FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID ORDER BY OrderFrequency DESC;","```sql
SELECT customers.CustomerID,
       AVG(order_count) AS AverageOrderFrequency,
       CASE 
           WHEN AVG(order_count) > 5 THEN 'High'
           WHEN AVG(order_count) BETWEEN 3 AND 5 THEN 'Medium'
           ELSE 'Low'
       END AS CustomerSatisfactionScore
FROM (
    SELECT CustomerID, COUNT(OrderID) AS order_count
    FROM orders
    GROUP BY CustomerID
) AS order_frequency
JOIN customers ON order_frequency.CustomerID = customers.CustomerID
GROUP BY customers.CustomerID;
```","The generated query calculates an average order count to determine satisfaction, while the ground truth query computes order frequency over time. They assess satisfaction differently.","SELECT c.CustomerID, COUNT(o.OrderID) / DATEDIFF(CURDATE(), MIN(o.OrderDate)) AS AverageOrderFrequency FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID;","The generated query uses CURDATE() which calculates the difference from the current date, while the ground truth uses MAX(OrderDate) for the date difference, affecting the average order frequency calculation.",None
How many orders did each employee handle in the last quarter?,"SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' AND o.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY e.EmployeeID, e.FirstName, e.LastName;","```sql
SELECT e.EmployeeID, COUNT(o.OrderID) AS NumberOfOrders
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 month'
  AND o.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE)
GROUP BY e.EmployeeID;
```","The generated SQL query does not include employee first and last names, whereas the ground truth query includes them in the SELECT clause and GROUP BY clause. This leads to different outputs.","SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY e.EmployeeID;","The generated query uses the current date minus 3 months to filter orders, while the ground truth query filters orders from the start of the last quarter. These date calculations will yield different results.",None
Which suppliers have provided products that are no longer in stock?,SELECT DISTINCT SupplierID FROM products WHERE UnitsInStock = 0;,"```sql
SELECT DISTINCT suppliers.SupplierID, suppliers.SupplierName
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
WHERE products.UnitsInStock = 0;
```","The generated query retrieves supplier names, while the ground truth only retrieves supplier IDs. The two queries would yield different columns in the result set.",SELECT suppliers.CompanyName FROM suppliers INNER JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsInStock = 0;,"The generated query returns 'CompanyName' while the ground truth returns 'SupplierID'. Additionally, the generated query joins with the 'suppliers' table, which may include duplicate company names if a supplier has multiple products with zero stock.",None
Which region generates the most revenue?,"SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Revenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion ORDER BY Revenue DESC LIMIT 1","```sql
SELECT customers.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.Region
ORDER BY TotalRevenue DESC
LIMIT 1;
```","The generated query uses 'customers.Region', while the ground truth query uses 'ShipRegion'. These may represent different regions in the database schema.","SELECT Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Region ORDER BY TotalRevenue DESC LIMIT 1;","The Generated SQL Query uses 'Region' from the 'customers' table, while the Ground Truth SQL Query uses 'ShipRegion' from the 'orders' table. This might result in different revenue results if 'Region' and 'ShipRegion' have different values.",None
Find the order with the maximum freight cost.,"SELECT OrderID, Freight FROM orders ORDER BY Freight DESC LIMIT 1;","```sql
SELECT *
FROM orders
WHERE Freight = (SELECT MAX(Freight) FROM orders);
```","Both queries correctly find the order with the maximum freight cost. The generated query uses a subquery to filter orders with the maximum freight, while the ground truth query sorts the orders by freight and limits the result to one.","SELECT OrderID, Freight FROM orders ORDER BY Freight DESC LIMIT 1;",Both queries are identical and correctly retrieve the order with the maximum freight cost by sorting in descending order and limiting the result to one.,both
Find the top 5 products based on total quantity sold.,"SELECT ProductName, SUM([Order Details].Quantity) AS TotalQuantitySold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY TotalQuantitySold DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantitySold
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalQuantitySold DESC
LIMIT 5;
```","Both queries calculate the sum of quantities for each product, group by ProductName, and order by total quantity sold in descending order, then limit the result to the top 5 products.","SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSold DESC LIMIT 5;",Both queries accurately calculate the total quantity sold for each product and return the top 5 products in descending order. The differences in aliases and naming do not affect the outcome.,both
What is the current stock status of products by category?,"SELECT p.CategoryID, p.ProductID, p.ProductName, p.UnitsInStock FROM products p ORDER BY p.CategoryID;","```sql
SELECT 
    p.CategoryID,
    SUM(p.UnitsInStock) AS TotalUnitsInStock,
    SUM(p.UnitsOnOrder) AS TotalUnitsOnOrder,
    SUM(p.ReorderLevel) AS TotalReorderLevel,
    COUNT(p.ProductID) AS TotalProducts
FROM 
    products p
GROUP BY 
    p.CategoryID;
```","The generated query aggregates stock data by category, while the ground truth query lists products with their stock status ordered by category without aggregation.","SELECT CategoryID, SUM(UnitsInStock) FROM products GROUP BY CategoryID;","The generated SQL query gives the total units in stock per category, while the ground truth query lists the stock details for each product in each category.",None
Identify orders with more than five products that received a discount.,SELECT OrderID FROM [Order Details] WHERE Discount > 0 GROUP BY OrderID HAVING COUNT(ProductID) > 5;,"```sql
SELECT o.OrderID, COUNT(od.ProductID) AS ProductCount
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE od.Discount > 0
GROUP BY o.OrderID
HAVING COUNT(od.ProductID) > 5;
```",Both queries identify orders with more than five products that received a discount by grouping on the OrderID and applying the same conditions on Discount and product count.,SELECT o.OrderID FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0 GROUP BY o.OrderID HAVING COUNT(od.ProductID) > 5;,Both queries correctly identify orders with more than five products that received a discount. They group by OrderID and check for Discount > 0 and COUNT(ProductID) > 5.,both
What is the distribution of order quantities?,"SELECT Quantity, COUNT(*) AS Frequency FROM [Order Details] GROUP BY Quantity ORDER BY Frequency DESC;","```sql
SELECT Quantity, COUNT(*) AS OrderCount
FROM [Order Details]
GROUP BY Quantity
ORDER BY Quantity;
```","The generated query orders by Quantity ascending, while the ground truth orders by Frequency descending.","SELECT od.Quantity, COUNT(*) AS Frequency FROM [Order Details] od GROUP BY od.Quantity ORDER BY Frequency DESC;","Both queries return the same result. They group the data by Quantity and count the frequency of each quantity, ordering by Frequency in descending order. The alias 'od' in the generated query does not affect the outcome.",FT
Find the average freight cost for orders shipped to each country.,"SELECT ShipCountry, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipCountry;","```sql
SELECT ShipCountry, AVG(Freight) AS AverageFreightCost
FROM orders
GROUP BY ShipCountry;
```",Both queries calculate the average freight cost for each country by grouping on 'ShipCountry' and using 'AVG(Freight)'.,"SELECT ShipCountry, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipCountry;","Both queries calculate the average freight cost grouped by ShipCountry, yielding the same results. The only difference is the alias name, which doesn't affect the result.",both
Which region has the lowest average order value?,"SELECT o.ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipRegion ORDER BY AvgOrderValue ASC LIMIT 1;","```sql
SELECT ShipRegion, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY ShipRegion
ORDER BY AverageOrderValue ASC
LIMIT 1;
```",Both queries calculate the average order value per region and return the region with the lowest average. The differences in aliasing do not affect the functionality.,"SELECT ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipRegion ORDER BY AvgOrderValue ASC LIMIT 1;",Both queries calculate the average order value by region using the same formula and order the results to find the region with the lowest value. The differences in column aliasing do not affect the output.,both
Which products need to be reordered based on their reorder level?,SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock <= ReorderLevel;
```","The generated query does not check if a product is discontinued, which is a condition in the ground truth query.",SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;,Both queries check for products with UnitsInStock less than or equal to ReorderLevel and not discontinued. They yield the same results.,FT
List the customers who have never received a discount on their orders.,SELECT DISTINCT CustomerID FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE Discount > 0);,"```sql
SELECT DISTINCT c.CustomerID, c.CompanyName, c.ContactName, c.ContactTitle, c.Address, c.City, c.Region, c.PostalCode, c.Country, c.Phone, c.Fax
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE od.Discount = 0;
```","The generated query selects customers who have received at least one order with no discount, but it does not exclude those who also had orders with discounts. The ground truth query correctly selects customers who have never had any discounts.",SELECT DISTINCT customers.CustomerID FROM customers LEFT JOIN orders ON customers.CustomerID = orders.CustomerID LEFT JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE [Order Details].Discount = 0 OR [Order Details].Discount IS NULL;,"The generated query incorrectly includes customers with a zero discount rather than excluding only those who received any discount. It results in customers who have orders with zero discount, contrary to identifying those who never received any discount.",None
Determine the month with the highest number of orders shipped.,"SELECT MONTH(ShippedDate) AS ShipMonth, COUNT(OrderID) AS OrderCount FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipMonth ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS OrderMonth, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY OrderMonth
ORDER BY NumberOfOrders DESC
LIMIT 1;
```","The generated query groups by year and month (YYYY-MM) format, while the ground truth query groups only by month, ignoring the year.","SELECT EXTRACT(YEAR FROM ShippedDate) AS Year, EXTRACT(MONTH FROM ShippedDate) AS Month, COUNT(OrderID) AS OrdersShipped FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Year, Month ORDER BY OrdersShipped DESC LIMIT 1;","The generated query considers both year and month, leading to potentially multiple rows if the same month occurs in different years. The ground truth aggregates solely by month, disregarding years.",None
What is the average discount given per order each month?,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG([Order Details].Discount) AS average_discount FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY month;","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month,
    AVG([Order Details].Discount) AS Average_Discount
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    MONTH(orders.OrderDate), YEAR(orders.OrderDate)
ORDER BY 
    Month;
```",Both queries calculate the average discount per order each month using similar logic. They format the OrderDate to get the month and group by this formatted month. Differences in SQL string formatting and the order of clauses do not affect the output.,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, AVG(Discount) AS AverageDiscount FROM [Order Details] o JOIN orders ON o.OrderID = orders.OrderID GROUP BY OrderMonth;",Both queries join the same tables and calculate the average discount per month using the same logic.,both
What is the total number of products ordered each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Quantity) AS TotalProducts FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth, 
       SUM([Order Details].Quantity) AS TotalProductsOrdered
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY OrderMonth
ORDER BY OrderMonth;
```","Both queries calculate the total number of products ordered each month, grouping by formatted order date to month, and summing quantities. The column aliases and order clauses differ but don't affect the core logic.","SELECT TO_CHAR(orders.OrderDate, 'Month') AS order_month, SUM([Order Details].Quantity) AS total_products_ordered FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY TO_CHAR(orders.OrderDate, 'Month');","The generated query groups by month name, potentially combining data from different years, while the ground truth groups by year-month, preserving yearly distinctions.",Base
What is the average freight cost for shipped orders?,SELECT AVG(Freight) AS AvgFreight FROM orders WHERE ShippedDate IS NOT NULL;,"```sql
SELECT AVG(Freight) AS AverageFreightCost
FROM orders
WHERE ShippedDate IS NOT NULL;
```","Both queries calculate the average freight cost for orders that have a non-null ShippedDate, therefore they yield the same result.",SELECT AVG(Freight) AS AverageFreight FROM orders WHERE ShippedDate IS NOT NULL;,"Both queries calculate the average freight of orders with a non-null ShippedDate, yielding the same results. The alias difference does not affect the output.",both
Which product has the highest sales volume this month?,SELECT p.ProductID FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE EXTRACT(MONTH FROM CURRENT_DATE) = EXTRACT(MONTH FROM CURRENT_DATE) GROUP BY p.ProductID ORDER BY SUM(od.Quantity) DESC LIMIT 1;,"```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE MONTH(CURRENT_DATE) = MONTH(od.OrderID) AND YEAR(CURRENT_DATE) = YEAR(od.OrderID)
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSales DESC
LIMIT 1;
```",The Ground Truth Query is incomplete and incorrect because it extracts the month from the same date twice and does not reference od.OrderDate to filter orders from this month. The Generated SQL is more accurate as it correctly filters and groups sales for the current month.,SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE EXTRACT(YEAR_MONTH FROM od.OrderDate) = EXTRACT(YEAR_MONTH FROM CURDATE()) GROUP BY p.ProductName ORDER BY SUM(od.Quantity) DESC LIMIT 1;,"The generated query extracts year and month together (YEAR_MONTH) to limit the scope to this month and year, while the ground truth query only considers the month. The generated query retrieves ProductName, whereas the ground truth query retrieves ProductID. Furthermore, the ground truth query incorrectly compares the same date functions rather than separating them into logical conditions.",None
What is the total discount given for each product?,"SELECT od.ProductID, SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscountGiven FROM [Order Details] od GROUP BY od.ProductID;","```sql
SELECT OrderDetails.ProductID, SUM(OrderDetails.Quantity * OrderDetails.UnitPrice * OrderDetails.Discount) AS TotalDiscount
FROM [Order Details] AS OrderDetails
GROUP BY OrderDetails.ProductID;
```","Both queries calculate the total discount given for each product by multiplying Quantity, UnitPrice, and Discount, then grouping by ProductID. The logic and result are the same.","SELECT p.ProductID, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID;","Both queries calculate the total discount per product by multiplying Quantity, UnitPrice, and Discount, then summing the results and grouping by ProductID.",both
What is the total quantity of products sold by each employee?,"SELECT e.EmployeeID, SUM(od.Quantity) AS TotalQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.Quantity) AS TotalQuantity
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName
```","Both queries calculate the total quantity of products sold by each employee. The generated query includes additional columns in the SELECT and GROUP BY clauses, which doesn't affect the total aggregate calculation.","SELECT e.EmployeeID, SUM(od.Quantity) AS TotalQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",The generated SQL query is identical to the ground truth query and correctly calculates the total quantity of products sold by each employee.,both
Which products have a unit price greater than $50?,SELECT ProductName FROM products WHERE UnitPrice > 50;,"```sql
SELECT ProductID, ProductName, UnitPrice 
FROM products 
WHERE UnitPrice > 50;
```","The generated query selects ProductID, which is not included in the ground truth query.",SELECT ProductName FROM products WHERE UnitPrice > 50;,Both the generated query and the ground truth query are identical and will return products with a unit price greater than $50.,FT
Identify the product with the lowest performance in terms of sales in October 2023.,"SELECT products.ProductName, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-10-31' GROUP BY products.ProductName ORDER BY product_performance ASC LIMIT 1;","```sql
SELECT products.ProductID, SUM([Order Details].Quantity) AS product_performance 
FROM [Order Details] 
JOIN products ON [Order Details].ProductID = products.ProductID 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-10-31' 
GROUP BY products.ProductID 
ORDER BY product_performance ASC 
LIMIT 1
```",The generated query returns ProductID while the ground truth query returns ProductName.,SELECT p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID LEFT JOIN orders o ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-10-01' AND '2023-10-31' GROUP BY p.ProductName HAVING SUM(od.Quantity) = (SELECT MIN(total_sales) FROM (SELECT SUM(od2.Quantity) AS total_sales FROM [Order Details] od2 JOIN orders o2 ON o2.OrderID = od2.OrderID WHERE o2.OrderDate BETWEEN '2023-10-01' AND '2023-10-31' GROUP BY od2.ProductID) AS sales) LIMIT 1;,"Both queries correctly identify the product with the lowest sales in October 2023. The methods differ slightly, but they produce the same result by grouping products and finding the one with minimal summed quantity sold.",FT
Which city had the highest number of orders shipped to?,"SELECT orders.ShipCity, COUNT(orders.OrderID) AS NumOrders FROM orders GROUP BY orders.ShipCity ORDER BY NumOrders DESC LIMIT 1;","```sql
SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY ShipCity
ORDER BY NumberOfOrders DESC
LIMIT 1;
```","Both queries select the city with the highest number of orders by counting OrderID grouped by ShipCity, ordering the results in descending order, and limiting to the top result.","SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1;","Both queries aim to find the city with the highest number of orders by selecting the ShipCity and counting OrderID, then ordering by the count in descending order and limiting the result to 1. They use different alias names but will yield the same result.",both
How many customers placed more than five orders last year?,SELECT COUNT(customers.CustomerID) AS customer_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 5;,"```sql
SELECT COUNT(DISTINCT orders.CustomerID) AS customer_count 
FROM orders 
WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' 
GROUP BY orders.CustomerID 
HAVING COUNT(orders.OrderID) > 5;
```","The generated query uses a hardcoded date range for the previous year, while the ground truth uses a dynamic method to calculate the last year. The results could differ if the current year changes.","SELECT COUNT(*) FROM (SELECT customers.CustomerID, COUNT(orders.OrderID) AS order_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY customers.CustomerID) t WHERE order_count > 5;","Both queries count the number of customers who placed more than five orders last year by grouping orders by CustomerID and filtering based on the order count. The only difference is the use of a subquery in the generated query, but the results are equivalent.",FT
What is the total quantity of products sold per category?,"SELECT products.CategoryID, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.CategoryID","```sql
SELECT products.CategoryID, SUM([Order Details].Quantity) AS TotalQuantitySold
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
GROUP BY products.CategoryID;
```","The generated SQL query accurately answers the user's question and yields the same results as both queries perform a join between 'products' and 'Order Details' tables, summing up the quantity of 'Order Details' per 'CategoryID' and grouping by 'CategoryID'.","SELECT p.CategoryID, SUM(od.Quantity) AS TotalQuantitySold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID;","Both queries perform the same join between 'products' and 'Order Details' tables, group by 'CategoryID', and sum the 'Quantity', which answers the user's question accurately.",both
How many orders include products from multiple suppliers?,"SELECT COUNT(*) FROM (SELECT OrderID, COUNT(DISTINCT SupplierID) AS SupplierCount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY OrderID) AS OrderSupplierCount WHERE SupplierCount > 1;","```sql
SELECT COUNT(DISTINCT o.OrderID) 
FROM orders o 
JOIN [Order Details] od ON o.OrderID = od.OrderID 
JOIN products p ON od.ProductID = p.ProductID 
GROUP BY o.OrderID 
HAVING COUNT(DISTINCT p.SupplierID) > 1;
```",Both queries calculate the count of orders containing products from multiple suppliers. They group by OrderID and check for more than one distinct SupplierID.,SELECT o.OrderID FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID HAVING COUNT(DISTINCT od.SupplierID) > 1;,"The generated query does not join the 'products' table to obtain the SupplierID, while the ground truth query does. Therefore, the generated query will not accurately reflect orders with products from multiple suppliers.",Base
What is the percentage of returning customers in Q1 2023?,SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-01-01') AS retention_rate,"```sql
SELECT 
    (COUNT(DISTINCT orders.CustomerID) 
     WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31') / 
    (COUNT(DISTINCT orders.CustomerID) 
     WHERE orders.OrderDate < '2023-01-01') * 100 AS customer_retention_rate
FROM orders;
```",The generated query contains syntax errors due to misplaced WHERE clauses and does not correctly calculate the percentage of returning customers.,"SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' THEN orders.CustomerID END) * 1.0 / NULLIF(COUNT(DISTINCT CASE WHEN orders.OrderDate < '2023-01-01' THEN orders.CustomerID END), 0)) AS returning_customers_proportion FROM orders","The generated SQL query calculates the proportion of customers in Q1 2023 who also made purchases before 2023, while the ground truth query calculates the total customers in Q1 2023 divided by all customers before 2023. The logic for calculating returning customers is not the same.",None
How many products have a reorder level higher than current stock?,SELECT COUNT(ProductID) AS ProductCount FROM products WHERE ReorderLevel > UnitsInStock;,"```sql
SELECT COUNT(*)
FROM products
WHERE ReorderLevel > UnitsInStock;
```",Both queries count the number of products where the reorder level is higher than the current stock. The COUNT(*) and COUNT(ProductID) will give the same result as there are no NULLs assumed in ProductID.,"SELECT ProductID, ProductName FROM products WHERE ReorderLevel > UnitsInStock;","The generated query lists products with reorder level higher than current stock, but the ground truth query counts them.",Base
Find the total number of orders shipped by each method.,"SELECT ShipVia, COUNT(OrderID) AS TotalShippedOrders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipVia;","```sql
SELECT ShipVia, COUNT(OrderID) AS TotalOrders
FROM orders
GROUP BY ShipVia;
```","The generated query counts all orders by 'ShipVia', regardless of shipping status, while the ground truth query only counts orders that have a 'ShippedDate', indicating they were shipped.","SELECT ShipVia, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipVia;","The generated SQL query does not filter out orders where ShippedDate is NULL, therefore counting all orders regardless of shipping status.",None
Which products were never ordered?,SELECT ProductID FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"```sql
SELECT ProductID 
FROM Products 
WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);
```","Both queries select ProductID from Products where ProductID is not in the list of ProductIDs found in Order Details, thus producing the same result.",SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"The generated query selects ProductName, while the ground truth query selects ProductID. The results will differ in terms of columns returned.",Base
Which city had the highest number of orders shipped to it in the last year?,"SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE OrderDate >= (CURRENT_DATE - INTERVAL '1 year') GROUP BY ShipCity ORDER BY NumberOfOrders DESC FETCH FIRST 1 ROW ONLY;","```sql
SELECT ShipCity, COUNT(OrderID) AS OrderCount
FROM orders
WHERE ShippedDate >= DATEADD(year, -1, GETDATE())
GROUP BY ShipCity
ORDER BY OrderCount DESC
LIMIT 1;
```","The Generated SQL Query uses ShippedDate, whereas the Ground Truth SQL Query uses OrderDate. This difference may affect the result if there are discrepancies between when orders are placed and when they are shipped.","SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1;","Both queries count orders per city in the last year and return the city with the highest count, although they use different syntax for the same concepts like date manipulation and limiting results.",FT
What is the average discount applied for each product?,"SELECT ProductID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY ProductID;","```sql
SELECT 
    [Order Details].ProductID, 
    AVG([Order Details].Discount) AS AverageDiscount
FROM 
    [Order Details]
GROUP BY 
    [Order Details].ProductID
```","Both queries compute the average discount per product, using the ProductID to group the results. The minor differences in alias names do not affect the output.","SELECT ProductName, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY ProductName;","The generated query groups by ProductName, which is not present in the ground truth query that groups by ProductID. Additionally, 'products' table inclusion assumes 'ProductName' for each 'ProductID', implying they are the same, which might not be the case.",Base
Find the average discount per customer.,"SELECT customers.CustomerID, AVG([Order Details].Discount) AS AverageDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID","```sql
SELECT customers.CustomerID, AVG([Order Details].Discount) AS AverageDiscount
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID;
```",The generated SQL query and the ground truth SQL query are functionally equivalent and will yield the same results. They both calculate the average discount per customer by joining the same tables and grouping by CustomerID.,"SELECT c.CustomerID, AVG(od.Discount) AS AverageDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;","Both queries calculate the average discount per customer using the same joins and aggregate function, yielding equivalent results.",both
Determine the total sales generated for each product category.,"SELECT CategoryID, SUM([Order Details].UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY CategoryID;","```sql
SELECT products.CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY products.CategoryID;
```",Both queries calculate the total sales per product category using the same formula and join logic. The presence of the additional 'orders' join in the generated query does not affect the grouped result on CategoryID.,"SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;","The generated query does not account for discounts in the total sales calculation, unlike the ground truth query which includes a discount.",Base
How have shipping times changed over the years?,"SELECT YEAR(OrderDate) AS Year, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders GROUP BY Year ORDER BY Year;","```sql
SELECT YEAR(OrderDate) AS Year, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime
FROM orders
GROUP BY YEAR(OrderDate)
ORDER BY Year;
```","The generated query and the ground truth query produce the same results. The difference in syntax with respect to grouping does not affect the outcome, as both queries effectively group by the year of the 'OrderDate' and calculate the average shipping time.","SELECT EXTRACT(YEAR FROM orders.OrderDate) AS OrderYear, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageShippingTime FROM orders GROUP BY OrderYear ORDER BY OrderYear","Both queries calculate the average shipping time per year by extracting the year from OrderDate and computing the difference between ShippedDate and OrderDate, then averaging those values. The only difference is in the function used for extracting the year, which doesn't affect the result.",both
"Which city has the highest number of orders, and who handles them?","SELECT orders.ShipCity, orders.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM orders GROUP BY orders.ShipCity, orders.EmployeeID ORDER BY OrderCount DESC LIMIT 1","```sql
SELECT o.ShipCity, e.FirstName, e.LastName, COUNT(o.OrderID) AS NumberOfOrders
FROM orders o
JOIN employees e ON o.EmployeeID = e.EmployeeID
GROUP BY o.ShipCity, e.EmployeeID
ORDER BY NumberOfOrders DESC
LIMIT 1;
```","The generated query includes employee names by joining with the employees table, while the ground truth query only includes EmployeeID. This difference may yield different results if employees have different orders per city.","SELECT ShipCity, COUNT(OrderID) AS NumOrders, CONCAT(FirstName, ' ', LastName) AS EmployeeName FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY ShipCity ORDER BY NumOrders DESC LIMIT 1;","The generated query returns city, employee name, and their combined order count, while the ground truth query returns the city, employee ID, and order count for each pair, potentially giving different results.",None
Which product category generated the most revenue in 2023?,"SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY categories.CategoryName ORDER BY total_revenue DESC LIMIT 1","```sql
SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS revenue
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN categories ON products.CategoryID = categories.CategoryID
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY categories.CategoryName
ORDER BY revenue DESC
LIMIT 1;
```","The generated SQL query accurately answers the user's question by selecting the category with the highest revenue in 2023, just like the ground truth query. Both have identical logic and output, only differing in alias naming.","SELECT products.CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS category_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.CategoryID ORDER BY category_revenue DESC LIMIT 1;","The generated query returns CategoryID instead of CategoryName, which does not fully answer the user's question about the category name.",Base
Identify products with decreasing sales trends over months.,"SELECT ProductName FROM (SELECT ProductName, DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Quantity) AS QuantitySold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ProductName, Month) sub WHERE QuantitySold < LAG(QuantitySold) OVER (PARTITION BY ProductName ORDER BY Month);","```sql
SELECT p.ProductID, p.ProductName, 
       SUM(ord.Quantity) AS TotalSales, 
       DATE_FORMAT(o.OrderDate, '%Y-%m') AS SaleMonth
FROM products p
JOIN [Order Details] ord ON p.ProductID = ord.ProductID
JOIN orders o ON ord.OrderID = o.OrderID
GROUP BY p.ProductID, SaleMonth
ORDER BY p.ProductID, SaleMonth;
```",The generated query does not check for decreasing trends; it only aggregates sales by month. The ground truth uses LAG to compare monthly sales and find decreasing trends.,"SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName HAVING SUM(CASE WHEN EXTRACT(MONTH FROM od.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) THEN od.Quantity ELSE 0 END) < SUM(CASE WHEN EXTRACT(MONTH FROM od.OrderDate) = MONTH(CURRENT_DATE) THEN od.Quantity ELSE 0 END)","The generated query compares the sales of the current month with the previous month only, while the ground truth query examines sales trends over time using LAG to identify any decreasing trend for each product.",None
What is the average order size in terms of quantity?,SELECT AVG([Order Details].Quantity) AS AvgOrderSize FROM [Order Details];,"```sql
SELECT AVG([Order Details].Quantity) AS AverageOrderSize
FROM [Order Details]
```","Both queries calculate the average quantity from the [Order Details] table, so they yield the same results.",SELECT AVG(Quantity) FROM [Order Details],"Both queries calculate the average of the 'Quantity' column from the '[Order Details]' table, thus they yield the same result.",both
Calculate the total revenue generated by each customer.,"SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;","```sql
SELECT customers.CustomerID, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID;
```","Both queries perform the same operations: calculating the total revenue per customer by joining the tables 'customers', 'orders', and '[Order Details]', and aggregating the results using SUM with identical calculations.","SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;","Both queries are identical and correctly calculate the total revenue for each customer by summing the product of unit price, quantity, and discount for each order detail, grouped by customer ID.",both
What is the total quantity of products sold each month?,"SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate);","```sql
SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].Quantity) AS TotalQuantity
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY Month;
```","The generated query groups by month without considering the year, which could lead to incorrect results if there's data spanning multiple years. The ground truth query groups by both year and month.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].Quantity) AS TotalQuantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","The generated query groups by year and month as a string without considering the year separately, whereas the ground truth query groups by both year and month, ensuring unique months are accounted for across different years.",None
List all products that have stock levels below their reorder level.,SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock < ReorderLevel;
```","Both queries correctly identify products with stock levels below their reorder level, although the generated query returns additional columns.",SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,The generated SQL query is identical to the ground truth query and correctly selects products with stock levels below their reorder level.,both
What is the average order quantity for each product?,"SELECT ProductID, AVG(Quantity) AS AverageQuantity FROM [Order Details] GROUP BY ProductID","```sql
SELECT ProductID, AVG(Quantity) AS AverageOrderQuantity
FROM [Order Details]
GROUP BY ProductID;
```","Both queries calculate the average quantity for each product and group the results by ProductID, which accurately answers the user's question.","SELECT productID, AVG(quantity) AS AverageOrderQuantity FROM ""[Order Details]"" GROUP BY productID;","Both queries calculate the average order quantity for each product using the same logic and operations, differing only in alias naming.",both
Which employees have the highest number of orders processed?,"SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC;","```sql
SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY EmployeeID
ORDER BY NumberOfOrders DESC
```",The generated SQL query and the ground truth query are logically equivalent and will yield the same results. Both queries count the number of orders processed by each employee and order the results in descending order based on the count.,"SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC;","Both queries group by EmployeeID and order the employees by the count of OrderID in descending order, thus they yield the same results.",both
List employees who have handled orders with total discounts over 10%.,"SELECT employees.EmployeeID, SUM([Order Details].Discount) AS TotalDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID HAVING TotalDiscount > 0.1;","```sql
SELECT DISTINCT e.EmployeeID, e.FirstName, e.LastName
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE od.Discount > 0.10;
```","The generated query lists employees who handled any orders with a single discount over 10%, whereas the ground truth checks if the total discount across all orders exceeds 10%.",SELECT DISTINCT employees.EmployeeID FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID HAVING SUM([Order Details].Discount * [Order Details].UnitPrice * [Order Details].Quantity) > (SUM([Order Details].UnitPrice * [Order Details].Quantity) / 10);,"The generated query calculates the discount in terms of monetary value relative to the total price, while the ground truth query calculates discounts as a percentage. They evaluate different conditions and will yield different results.",None
What is the total number of products sold by each employee?,"SELECT employees.EmployeeID, SUM([Order Details].Quantity) AS TotalProducts FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.Quantity) AS TotalProductsSold
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName
```","Both queries accurately compute the total number of products sold by each employee. The generated query includes employee names in the GROUP BY clause, which is an additional detail, but it doesn’t affect the computation of product totals.","SELECT e.EmployeeID, SUM(od.Quantity) AS TotalProductsSold FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN ""Order Details"" od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","Both queries join the same tables on the same keys, aggregate the quantity sold per employee, and group by the EmployeeID. The difference in syntax, like alias usage and quoting of identifiers, does not change the outcome.",both
List the top 3 products in terms of units sold.,"SELECT p.ProductName, SUM(od.Quantity) AS UnitsSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY UnitsSold DESC LIMIT 3;","```sql
SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalUnitsSold
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY products.ProductName
ORDER BY TotalUnitsSold DESC
LIMIT 3;
```","The generated SQL query uses LIMIT, which is not part of the SQL ANSI standard. To use a standard approach, you'd need to use a different technique, like a subquery with row numbering.","SELECT products.ProductName, SUM([Order Details].Quantity) AS total_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY total_sold DESC LIMIT 3;","Both queries select the product names and sum the quantities from the Order Details table. They join the products and Order Details tables on ProductID, group by product names, and order the results by total units sold in descending order, limiting the results to the top 3 products.",FT
What is the average discount given per product?,"SELECT ProductName, AVG(Discount) AS AvgDiscount FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID GROUP BY ProductName;","```sql
SELECT 
    [Order Details].ProductID,
    AVG([Order Details].Discount) AS AverageDiscount
FROM 
    [Order Details]
GROUP BY 
    [Order Details].ProductID;
```","The generated query groups by ProductID and returns it, not the ProductName. It does not join the 'products' table to provide product names like the ground truth query.","SELECT products.ProductID, AVG([Order Details].Discount) AS AverageDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;","The generated query selects ProductID and the ground truth query selects ProductName, leading to potentially different results and not matching the requested output details.",None
What is the total revenue generated by each customer over their lifetime?,"SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;","```sql
SELECT 
    customers.CustomerID, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM 
    customers
JOIN 
    orders ON customers.CustomerID = orders.CustomerID
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    customers.CustomerID
```","Both queries calculate the total lifetime revenue for each customer by joining customers with orders and order details, then summing the product of unit price, quantity, and discount. The SQL syntax and aliases differ, but the logic and results are the same.","SELECT CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY CustomerID;",The generated query may miss customers with no orders as it does not join with the customers table directly. The ground truth query ensures all customers are considered.,Base
Identify the products that have been discontinued.,SELECT ProductName FROM products WHERE Discontinued = 1;,"```sql
SELECT ProductID, ProductName
FROM products
WHERE Discontinued = 1;
```","The generated query includes 'ProductID' in the SELECT clause, while the ground truth query only selects 'ProductName'.",SELECT ProductName FROM products WHERE Discontinued = 1;,Both queries are identical and correctly retrieve products that have been discontinued by checking if the Discontinued column is 1.,FT
Which products need to be reordered?,SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock < ReorderLevel;
```",The generated query uses '<' instead of '<=' which means it will miss products where UnitsInStock is exactly equal to ReorderLevel.,SELECT p.ProductName FROM products p WHERE p.UnitsInStock <= p.ReorderLevel;,"The generated SQL query and the ground truth query both select the ProductName from the products table where UnitsInStock is less than or equal to ReorderLevel, which addresses the user's question accurately. The use of table alias 'p' in the generated query does not alter the result.",FT
Identify the cities with the highest number of suppliers.,"SELECT City, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY City ORDER BY SupplierCount DESC;","```sql
SELECT City, COUNT(*) AS SupplierCount
FROM suppliers
GROUP BY City
ORDER BY SupplierCount DESC;
```",Both queries calculate the number of suppliers per city and order the results in descending order of suppliers count. The difference in counting method (COUNT(*) vs COUNT(SupplierID)) does not impact the result as both capture the number of rows per city.,"SELECT City, COUNT(*) AS NumberOfSuppliers FROM suppliers GROUP BY City ORDER BY NumberOfSuppliers DESC;","Both queries group by City and count the number of suppliers, ordering by the count in descending order. They yield the same results as COUNT(*) and COUNT(SupplierID) are equivalent here.",both
Determine the average unit price of products sold in the last quarter.,"SELECT AVG([Order Details].UnitPrice) AS AvgUnitPrice FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE());","```sql
SELECT AVG([Order Details].UnitPrice) AS AverageUnitPrice
FROM [Order Details]
JOIN products ON [Order Details].ProductID = products.ProductID
WHERE [Order Details].OrderID IN (
    SELECT OrderID
    FROM orders
    WHERE OrderDate >= DATEADD(quarter, -1, GETDATE())
)
```","The generated query uses DATEADD for calculating the last quarter, which may not cover exactly the last three months like the ground truth version with DATE_SUB. The approaches to date calculation differ, affecting accuracy.","SELECT AVG(Price) FROM (SELECT ProductID, CAST(MAX(OrderDate) AS DATE) AS OrderQuarter FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY ProductID) AS RecentProducts JOIN order_details ON RecentProducts.ProductID = order_details.ProductID;","The generated query averages prices of products by selecting recent products based on their maximum order date in the last three months, which might not include all orders. The ground truth query averages unit prices for orders directly from the last quarter.",None
List products with a reorder level higher than units in stock.,SELECT ProductName FROM products WHERE ReorderLevel > UnitsInStock;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE ReorderLevel > UnitsInStock;
```","The generated query selects additional columns (ProductID, UnitsInStock, ReorderLevel) not required by the ground truth query, which only selects ProductName.","SELECT ProductName, UnitsInStock, ReorderLevel FROM products WHERE ReorderLevel > UnitsInStock;","The generated query includes additional columns 'UnitsInStock' and 'ReorderLevel', while the ground truth query only selects 'ProductName'.",None
How much freight cost has been incurred by each employee's orders?,"SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(o.Freight) AS TotalFreightCost
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","Both queries correctly calculate the total freight cost for each employee's orders, but the generated query includes additional columns (FirstName, LastName) which do not affect the result of the aggregation.","SELECT employee_id, SUM(Freight) AS total_freight FROM orders GROUP BY employee_id;","Both queries calculate the total freight cost incurred by each employee's orders by summing the Freight column and grouping by employee ID. They will yield the same results assuming the EmployeeID is the FK in orders, making the JOIN unnecessary for the result.",both
How many orders were processed by employees in each city?,"SELECT employees.City, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.City;","```sql
SELECT e.City, COUNT(o.OrderID) AS OrdersProcessed
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.City;
```","Both queries calculate the number of orders processed by employees, grouped by city. The column aliases differ, but the logic and results are the same.","SELECT employees.City, COUNT(orders.OrderID) AS NumberOfOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.City;","The generated SQL query and the ground truth query produce the same result, differing only in the alias name used for the count.",both
What is the average unit price of products per supplier?,"SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AvgUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;","```sql
SELECT suppliers.SupplierID, suppliers.CompanyName, AVG(products.UnitPrice) AS AverageUnitPrice
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
GROUP BY suppliers.SupplierID, suppliers.CompanyName;
```","Both queries calculate the average unit price of products per supplier, joining suppliers with products and grouping by the supplier. The inclusion of SupplierID does not affect the outcome.","SELECT SupplierID, AVG(UnitPrice) AS AverageUnitPrice FROM products GROUP BY SupplierID;","The generated query returns SupplierID, while the ground truth query returns CompanyName. This may lead to different interpretations unless SupplierID is uniquely tied to each CompanyName, which isn't specified here.",Base
What are the total sales for each month in 2023?,"SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY month","```sql
SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' 
GROUP BY month 
ORDER BY month;
```","Both queries calculate total sales for each month in 2023 and should yield the same results. The generated query uses BETWEEN for date filtering, while the ground truth uses YEAR, but they are functionally equivalent for the year 2023.","SELECT EXTRACT(MONTH FROM orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE EXTRACT(YEAR FROM orders.OrderDate) = 2023 GROUP BY EXTRACT(MONTH FROM orders.OrderDate);","Both queries calculate the total sales per month for 2023 by joining 'orders' and 'Order Details' tables and summing up the product of UnitPrice, Quantity, and the discount factor. The difference is in the method of extracting the month; however, the results will be grouped by month in both cases.",both
How does employee efficiency vary based on the shipping regions they handle?,"SELECT EmployeeID, ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EmployeeID, ShipRegion ORDER BY EmployeeID, AvgFulfillmentTime ASC;","```sql
SELECT 
    ShipRegion,
    COUNT(OrderID) AS TotalOrders,
    AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime,
    COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate
FROM 
    orders
GROUP BY 
    ShipRegion
ORDER BY 
    ShipRegion;
```","The generated query analyzes efficiency by region, not by employee as the user question implies, missing the EmployeeID grouping.","SELECT employees.EmployeeID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_processing_time, orders.ShipRegion FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, orders.ShipRegion ORDER BY avg_processing_time;","Both queries calculate the average processing time (or fulfillment time) of orders based on the EmployeeID and ShipRegion, which answers the user's question about employee efficiency by shipping region. Although the column names and grouping order differ slightly, the intended result and logic are equivalent.",FT
Which city has the highest number of unique customers?,"SELECT customers.City, COUNT(DISTINCT customers.CustomerID) AS unique_customers FROM customers GROUP BY customers.City ORDER BY unique_customers DESC LIMIT 1;","```sql
SELECT City, COUNT(DISTINCT CustomerID) AS unique_customers 
FROM customers 
GROUP BY City 
ORDER BY unique_customers DESC 
LIMIT 1;
```","Both queries group by City and order by the count of distinct CustomerID, returning the city with the most unique customers.","SELECT City, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM customers GROUP BY City ORDER BY UniqueCustomers DESC LIMIT 1;","Both queries select the city with the highest number of unique customers by counting distinct CustomerID, grouping by city, and ordering by the count in descending order, finally limiting the result to one row. They achieve the same result as required by the user's question.",both
What is the average time taken to fulfill orders each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month ORDER BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM 
    orders
GROUP BY 
    Month
```","Both queries calculate the monthly average fulfillment time by finding the difference between the order and shipped dates. The formatting functions differ, but both group by month and compute the same average.","SELECT EXTRACT(YEAR FROM orders.OrderDate) AS Year, EXTRACT(MONTH FROM orders.OrderDate) AS Month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Year, Month;","The generated query uses EXTRACT for grouping, resulting in separate Year and Month columns, while the ground truth query uses DATE_TRUNC to group by month, including year, in a single column. This might yield different grouping and results.",Base
How many employees were hired in 2023?,SELECT COUNT(*) AS hires_count FROM employees WHERE employees.HireDate BETWEEN '2023-01-01' AND '2023-12-31',"```sql
SELECT COUNT(*) AS employees_hired_2023 FROM employees WHERE YEAR(HireDate) = 2023
```","Both queries count employees hired in the year 2023 and will return the same result, even though they use different methods to filter the HireDate.",SELECT COUNT(*) FROM employees WHERE YEAR(HireDate) = 2023;,"Both queries count employees hired in 2023 and should yield the same results. The first query uses the YEAR function, while the second specifies a date range. Both are functionally equivalent for this task.",both
Which customers have placed the highest number of orders?,"SELECT c.CustomerID, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY OrderCount DESC;","```sql
SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY CustomerID
ORDER BY NumberOfOrders DESC;
```",Both queries achieve the same result by counting the number of orders per CustomerID and ordering them in descending order.,"SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY CustomerID ORDER BY TotalOrders DESC LIMIT 10;",Both queries calculate the count of orders per customer and order the results by this count in descending order. The generated query and ground truth query yield the same result assuming the 'orders' table has a 'CustomerID' field directly linking the orders to customers.,both
Which month experienced the highest number of late shipments?,"SELECT EXTRACT(MONTH FROM ShippedDate) AS Month, COUNT(*) AS LateShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY EXTRACT(MONTH FROM ShippedDate) ORDER BY LateShipments DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS LateShipments
FROM orders
WHERE ShippedDate > RequiredDate
GROUP BY Month
ORDER BY LateShipments DESC
LIMIT 1;
```","The generated SQL groups by year and month together, while the ground truth query groups only by month.","SELECT strftime('%Y-%m', orders.OrderDate) AS Month, COUNT(CASE WHEN orders.ShippedDate > orders.RequiredDate THEN 1 END) AS LateShipments FROM orders GROUP BY strftime('%Y-%m', orders.OrderDate) ORDER BY LateShipments DESC LIMIT 1;","The generated query groups by the order date's month, while the ground truth query groups by the month of the shipped date. This makes them yield different results.",None
What is the total revenue generated by each product category?,"SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;","```sql
SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.CategoryID;
```","The generated query uses 'p.CategoryID' for grouping, assuming all CategoryIDs are in the 'products' table. The ground truth uses 'c.CategoryID', indicating a join with the 'categories' table is necessary to ensure accurate category information.","SELECT products.CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.CategoryID;","The generated SQL query accounts for discounts in calculating revenue, while the ground truth query does not include discounts.",None
How many orders were shipped each month?,"SELECT DATE_TRUNC('month', ShippedDate) AS Month, COUNT(OrderID) AS OrderCount FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, 
    COUNT(OrderID) AS TotalOrdersShipped 
FROM 
    orders 
GROUP BY 
    Month 
ORDER BY 
    Month;
```","The generated query doesn't handle NULL values in ShippedDate, while the ground truth excludes them with a WHERE clause.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrdersShipped FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month ORDER BY Month;","The generated query groups by the formatted OrderDate, while the ground truth query groups by the truncated ShippedDate. They may yield different results if OrderDate and ShippedDate differ.",None
What is the total freight cost for each shipping country?,"SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;","```sql
SELECT ShipCountry, SUM(Freight) AS TotalFreight
FROM orders
GROUP BY ShipCountry;
```",Both queries calculate the total freight cost by shipping country. The difference in alias naming does not affect the results.,"SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",Both queries are identical and correctly calculate the total freight cost for each shipping country using the SUM function and GROUP BY clause.,both
Identify suppliers with orders that have not been shipped yet.,SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.ShippedDate IS NULL GROUP BY suppliers.CompanyName;,"```sql
SELECT DISTINCT s.SupplierID, s.CompanyName, s.ContactName, s.ContactTitle
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
WHERE o.ShippedDate IS NULL;
```",Both queries identify suppliers with orders that have not been shipped. The generated query selects additional supplier details but yields the same suppliers as the ground truth query.,SELECT DISTINCT s.SupplierName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.ShippedDate IS NULL;,Both queries identify suppliers with unshipped orders by checking for NULL in ShippedDate. They effectively join the necessary tables and select distinct supplier names.,both
Which products have been ordered more than 100 times?,"SELECT ProductID, COUNT(OrderID) AS OrderCount FROM [Order Details] GROUP BY ProductID HAVING COUNT(OrderID) > 100;","```sql
SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalOrdered
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY products.ProductID, products.ProductName
HAVING SUM([Order Details].Quantity) > 100;
```","The generated query and the ground truth query are computing different metrics. The generated query sums quantities, while the ground truth counts distinct orders.","SELECT p.ProductName FROM products p JOIN ""Order Details"" od ON p.ProductID = od.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity) > 100;","The generated query checks for products with a total quantity ordered over 100, while the ground truth query checks for products ordered in more than 100 distinct orders. The conditions are different.",None
What is the percentage of orders requiring delivery within one week?,"SELECT COUNT(OrderID) * 100.0 / (SELECT COUNT(*) FROM orders) AS Percentage FROM orders WHERE DATEDIFF(RequiredDate, OrderDate) <= 7;","```sql
SELECT 
    COUNT(OrderID) * 100.0 / (SELECT COUNT(OrderID) FROM orders) AS Percentage_Orders_One_Week
FROM 
    orders
WHERE 
    DATEDIFF(RequiredDate, OrderDate) <= 7;
```","Both queries calculate the percentage of orders requiring delivery within one week using similar logic, despite minor differences in syntax.","SELECT COUNT(order_id) FILTER (WHERE DATEDIFF(DAY, order_date, required_date) <= 7) * 100.0 / COUNT(order_id) AS one_week_percentage FROM orders","Both queries calculate the percentage of orders requiring delivery within one week. They employ slightly different syntax, but they achieve the same result by filtering orders based on the date difference and dividing by the total number of orders.",both
How does sales distribution vary across different regions?,"SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID GROUP BY region.RegionDescription","```sql
SELECT orders.ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY orders.ShipRegion
```","The generated query groups by 'orders.ShipRegion' while the ground truth query uses 'region.RegionDescription'. The ground truth query involves more complex joins to map territories and regions, which can affect the sales distribution analysis across various regions.","SELECT o.ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Sales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipRegion;","The generated SQL query groups sales by ShipRegion, while the ground truth query groups sales by RegionDescription, which involves additional joins with employees, employeeTerritories, territories, and region tables to determine the region description. This could yield different results if ShipRegion is not equivalent to RegionDescription.",None
What is the average value of orders placed in the month of January 2023?,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = 1 AND YEAR(orders.OrderDate) = 2023,"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31'
```","Both queries calculate the average order value for January 2023. The generated query uses a date range, while the ground truth query uses the MONTH and YEAR functions. Both approaches are equivalent.",SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS average_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31',Both queries calculate the average value of orders in January 2023 by summing the products and dividing by the count of distinct orders. The date filtering in both queries correctly targets January 2023.,both
What is the total sales generated by each employee in the last month?,"SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) GROUP BY e.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= DATEADD(month, -1, CURRENT_DATE)
GROUP BY e.EmployeeID, e.FirstName, e.LastName
```","Both queries calculate total sales for each employee in the last month, using the same logic for sales calculation and filtering by the last month. The generated query includes employee names in the output but results would be the same.","SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE) GROUP BY e.EmployeeID;","The generated query uses DATE_TRUNC to define the date range for the last month, which may not cover the entire previous month if executed on the first day of a new month. The ground truth query correctly uses DATEADD to include all orders from the previous month.",Base
Determine the Customer Retention Rate for the past quarter.,SELECT 100.0 * (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate BETWEEN '2023-07-01' AND '2023-09-30') / (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate < '2023-07-01') AS RetentionRate;,"```sql
SELECT 
    (COUNT(DISTINCT o2.CustomerID) * 1.0 / NULLIF(COUNT(DISTINCT o1.CustomerID), 0)) AS CustomerRetentionRate
FROM 
    orders o1
LEFT JOIN 
    orders o2 ON o1.CustomerID = o2.CustomerID
WHERE 
    o1.OrderDate < DATEADD(quarter, -1, GETDATE()) 
    AND o2.OrderDate BETWEEN DATEADD(quarter, -1, GETDATE()) AND GETDATE()
```","The generated SQL query calculates the retention rate based on dynamic dates using GETDATE() and DATEADD. It assumes continuous quarters and may not align with specific quarterly ranges like the ground truth, which uses fixed dates. The logic to define quarters is not identical.","SELECT (COUNT(DISTINCT CASE WHEN o.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE() THEN o.CustomerID END) / COUNT(DISTINCT CASE WHEN o.OrderDate < DATE_SUB(CURDATE(), INTERVAL 3 MONTH) THEN o.CustomerID END)) AS Retention FROM orders o WHERE o.OrderDate BETWEEN '2023-07-01' AND '2023-09-30';","The generated query incorrectly calculates the retention rate by using the same period for calculating distinct customers in both parts of the ratio. Furthermore, the logic of counting customers before the last quarter is missing.",None
Calculate the average reorder level across all products.,SELECT AVG(ReorderLevel) FROM products;,"```sql
SELECT AVG(ReorderLevel) AS AverageReorderLevel FROM products;
```",Both queries calculate the average reorder level from the products table. The difference in the queries is cosmetic due to the addition of an alias in the generated query.,SELECT AVG(products.ReorderLevel) AS AverageReorderLevel FROM products,Both queries calculate the average reorder level across all products using the AVG() function on the ReorderLevel column from the products table.,both
How many units on order exist for each supplier?,"SELECT SupplierID, SUM(UnitsOnOrder) FROM products GROUP BY SupplierID;","```sql
SELECT SupplierID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder
FROM products
GROUP BY SupplierID;
```",Both queries calculate the sum of 'UnitsOnOrder' for each 'SupplierID' and will yield the same results despite a difference in alias usage.,"SELECT SupplierID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY SupplierID;","Both queries group by SupplierID and sum the UnitsOnOrder column, so they yield the same results.",both
Which supplier provides the most number of different products?,"SELECT SupplierID, COUNT(DISTINCT ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID ORDER BY NumberOfProducts DESC LIMIT 1;","```sql
SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount
FROM products
GROUP BY SupplierID
ORDER BY ProductCount DESC
LIMIT 1;
```","Both queries select SupplierID and count distinct products grouped by SupplierID, ordered in descending order, and limit the result to the top one, achieving the same outcome.","SELECT suppliers.CompanyName, COUNT(DISTINCT products.ProductID) AS NumberOfProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY NumberOfProducts DESC LIMIT 1;","The generated query selects CompanyName while ground truth selects SupplierID, potentially yielding different results if duplicates exist.",Base
What is the average discount offered on products that have been discontinued?,SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1;,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details] od
JOIN products p ON od.ProductID = p.ProductID
WHERE p.Discontinued = 1;
```",Both queries calculate the average discount for discontinued products using the same logic and produce identical results.,SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1;,"Both queries are identical and accurately calculate the average discount for discontinued products by joining the Order Details and products tables, and filtering where products.Discontinued equals 1.",both
Which cities have the highest number of sales from employees?,"SELECT e.City, COUNT(*) AS SalesCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.City ORDER BY SalesCount DESC;","```sql
SELECT o.ShipCity, COUNT(o.OrderID) AS NumberOfSales
FROM orders o
JOIN employees e ON o.EmployeeID = e.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY o.ShipCity
ORDER BY NumberOfSales DESC;
```",The generated query groups by 'ShipCity' while the ground truth groups by 'City' from the 'employees' table. This affects the interpretation of which city attribute is being analyzed.,"SELECT ShipCity, COUNT(OrderID) AS total_sales FROM orders GROUP BY ShipCity ORDER BY total_sales DESC;","The generated query groups by ShipCity from the orders table without involving employees, while the ground truth query counts sales linked to employees' cities.",None
Which products have the highest turnover rates?,"SELECT ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS TurnoverRatio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductID ORDER BY TurnoverRatio DESC;","```sql
SELECT p.ProductID, p.ProductName, 
       SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS TurnoverRate
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TurnoverRate DESC;
```","Both queries calculate the turnover rate by dividing total sales by average stock, grouping by ProductID and ordering by turnover rate. The generated query includes ProductName, but this does not affect the core result.","SELECT ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) / NULLIF(AVG(CAST(p.UnitsInStock AS FLOAT)), 0) AS TurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY ProductName ORDER BY TurnoverRatio DESC;","The generated query uses the discount in calculating turnover, which is not in the ground truth query. The ground truth uses ProductID, not ProductName, and does not handle divide by zero using NULLIF.",Base
Who are the top 5 customers by revenue?,"SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalRevenue DESC LIMIT 5;","```sql
SELECT c.CustomerID, c.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.CustomerID, c.CompanyName
ORDER BY TotalRevenue DESC
LIMIT 5;
```","The generated query includes 'CompanyName' in the SELECT clause and GROUP BY expression, while the ground truth query does not. This could lead to differences in results if 'CompanyName' is not unique per CustomerID.","SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY CustomerID ORDER BY TotalRevenue DESC LIMIT 5;","The generated query does not join the 'customers' table, potentially missing customers without orders and leading to different results.",None
How many customers placed more than 3 orders in 2023?,SELECT COUNT(*) AS customer_count FROM (SELECT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.CustomerID HAVING COUNT(DISTINCT orders.OrderID) > 3) AS subquery,"```sql
SELECT COUNT(DISTINCT orders.CustomerID) AS customer_count
FROM orders
WHERE YEAR(orders.OrderDate) = 2023
GROUP BY orders.CustomerID
HAVING COUNT(orders.OrderID) > 3;
```",Both queries count distinct customers with more than 3 orders in 2023. The date filter in the ground truth is equivalent to the YEAR filter in the generated query.,SELECT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 3,The generated query lists customer IDs but does not count them. The ground truth counts the number of customers who meet the criteria.,Base
Find the product with the highest current stock level.,SELECT ProductName FROM products ORDER BY UnitsInStock DESC LIMIT 1;,"```sql
SELECT ProductID, ProductName, UnitsInStock 
FROM products 
ORDER BY UnitsInStock DESC 
LIMIT 1;
```","The generated SQL query returns ProductID, ProductName, and UnitsInStock, while the ground truth SQL query only returns ProductName.",SELECT ProductName FROM products WHERE UnitsInStock = (SELECT MAX(UnitsInStock) FROM products);,"Both queries return the product(s) with the highest stock level. The generated query finds those with max stock, while the ground truth orders by stock and limits to the top product.",FT
Which category has the highest number of discontinued products?,"SELECT CategoryID, COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1 GROUP BY CategoryID ORDER BY DiscontinuedProducts DESC;","```sql
SELECT CategoryID, COUNT(*) AS DiscontinuedCount
FROM products
WHERE Discontinued = 1
GROUP BY CategoryID
ORDER BY DiscontinuedCount DESC
LIMIT 1;
```","The generated query uses LIMIT 1 to find the category with the highest number of discontinued products, while the ground truth query does not use LIMIT 1, so they may not yield the same result if there are ties.",SELECT CategoryID FROM products WHERE Discontinued = 1 GROUP BY CategoryID ORDER BY COUNT(ProductName) DESC LIMIT 1;,"The generated query limits the results to only one category, complying with the user's question, while the ground truth lists all categories sorted by discontinued products count.",None
What is the total revenue contributed by employees in each region?,"SELECT Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Region;","```sql
SELECT e.Region, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.Region;
```","Both queries calculate the total revenue for each region by summing the product of quantity, unit price, and discount from the 'Order Details', grouped by region. The structure of the joins and calculations are the same, differing only in formatting and aliasing.","SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY ShipRegion","The Generated SQL groups by ShipRegion, but the User Question specifies grouping by Employee Region. The Ground Truth SQL correctly groups by Region from the employees table, ensuring the correct TotalRevenue for each employee region.",Base
What is the total revenue generated from orders last month?,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Total_Revenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH);,"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE MONTH(orders.OrderDate) = MONTH(CURDATE() - INTERVAL 1 MONTH)
AND YEAR(orders.OrderDate) = YEAR(CURDATE() - INTERVAL 1 MONTH);
```","The generated SQL query and the ground truth query yield the same result. Both queries correctly calculate the total revenue for orders from the previous month by joining the 'orders' and 'Order Details' tables and applying the same filters and aggregation. The only difference is the use of CURDATE() vs. CURRENT_DATE, which functionally are equivalent.",SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) AND MONTH(OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH);,"Both queries calculate the total revenue from last month's orders by joining the 'Order Details' and 'orders' tables, and applying the same date filter and revenue calculation formula.",both
What is the average order fulfillment time for each product category?,"SELECT categories.CategoryName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName","```sql
SELECT categories.CategoryID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_order_fulfillment_time
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN categories ON products.CategoryID = categories.CategoryID
GROUP BY categories.CategoryID
```","The generated query groups by CategoryID, while the ground truth query groups by CategoryName. Results could differ if CategoryID is not the same as CategoryName, so the queries may not yield the same results.","SELECT c.CategoryName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageFulfillmentTime FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryName;",Both queries calculate the average order fulfillment time by subtracting OrderDate from ShippedDate and group results by CategoryName. They join the same tables using equivalent logic.,FT
Which shipping method is used the most frequently?,"SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;","```sql
SELECT ShipVia, COUNT(*) AS Frequency
FROM orders
GROUP BY ShipVia
ORDER BY Frequency DESC
LIMIT 1;
```",Both queries count the number of orders for each shipping method and return the one used most frequently. Using COUNT(*) or COUNT(OrderID) has the same effect since OrderID is non-null in this context.,"SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",Both queries are identical and correctly determine the most frequently used shipping method by counting and ordering the usage of each shipping method.,both
What is the monthly inventory turnover ratio?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT 
    MONTH(o.OrderDate) AS Month,
    SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM 
    [Order Details] od
JOIN 
    products p ON od.ProductID = p.ProductID
JOIN 
    orders o ON od.OrderID = o.OrderID
GROUP BY 
    MONTH(o.OrderDate);
```","The generated query groups by the month without considering the year, whereas the ground truth groups by both year and month.","SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY Month;","The generated query uses DATE_TRUNC which might not match DATE_FORMAT in the ground truth. Also, the generated query groups by Month derived from DATE_TRUNC, potentially causing differences in month representation versus DATE_FORMAT.",None
What is the average fulfillment time for orders each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY DATE_TRUNC('month', OrderDate);","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM 
    orders
GROUP BY 
    Month
```",Both queries calculate the average fulfillment time per month by grouping orders using the month derived from OrderDate and computing the average difference between ShippedDate and OrderDate.,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","Both queries calculate the average fulfillment time for orders each month, using different functions for date truncation or formatting.",both
Which orders have the highest discount applied?,"SELECT OrderID, Discount FROM [Order Details] ORDER BY Discount DESC LIMIT 10;","```sql
SELECT OrderID, SUM(Discount) AS TotalDiscount
FROM [Order Details]
GROUP BY OrderID
ORDER BY TotalDiscount DESC
LIMIT 1;
```","The generated query finds the order with the highest total discount by summing discounts for each order, while the ground truth lists orders with the highest individual discounts.","SELECT OrderID, Discount FROM [Order Details] ORDER BY Discount DESC LIMIT 5;","The generated query returns only 5 records, whereas the ground truth query returns 10, potentially changing the results.",None
Which products have a stock level below their reorder level?,SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel 
FROM products 
WHERE UnitsInStock < ReorderLevel;
```","The generated query includes additional columns (ProductID, UnitsInStock, ReorderLevel) that are not present in the ground truth query.",SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,The generated SQL query and the ground truth SQL query are identical and accurately address the user's question by selecting products where UnitsInStock is less than ReorderLevel.,FT
Find products with unusually high discounts applied to them.,SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.Discount > 0.25;,"```sql
SELECT p.ProductID, p.ProductName, od.Discount
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.Discount > (SELECT AVG(Discount) FROM [Order Details]) + 2 * (SELECT STDDEV(Discount) FROM [Order Details]);
```","The generated query uses a dynamic threshold based on average and standard deviation, while the ground truth query uses a fixed threshold of 0.25.","SELECT ProductID, Discount FROM [Order Details] WHERE Discount > 0.25;","The generated query returns ProductID and Discount, but does not provide ProductName like the ground truth query.",None
Find the supplier that offers the most products at a unit price above $20.,"SELECT suppliers.SupplierID, CompanyName, COUNT(products.ProductID) AS ProductCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitPrice > 20 GROUP BY suppliers.SupplierID, suppliers.CompanyName ORDER BY ProductCount DESC LIMIT 1;","```sql
SELECT suppliers.CompanyName, COUNT(products.ProductID) AS ProductCount
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
WHERE products.UnitPrice > 20
GROUP BY suppliers.SupplierID
ORDER BY ProductCount DESC
LIMIT 1;
```","Both queries group by SupplierID and filter products with UnitPrice > 20, counting products per supplier and returning the supplier with the most such products. The inclusion of CompanyName in the ground truth's GROUP BY clause doesn't impact the result due to its functional dependency on SupplierID.",SELECT s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.UnitPrice > 20 GROUP BY s.SupplierID ORDER BY COUNT(p.ProductID) DESC LIMIT 1;,"Both queries correctly identify the supplier offering the most products with a unit price above $20. They group by SupplierID and sort by the count of products in descending order, limiting the result to the top supplier.",both
What is the overall discount given for each product?,"SELECT p.ProductName, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;","```sql
SELECT 
    p.ProductID,
    p.ProductName,
    SUM(od.Discount * od.Quantity) AS TotalDiscount
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.ProductName;
```","The generated query sums only the Discount multiplied by Quantity, whereas the ground truth includes UnitPrice in the calculation, affecting the overall discount computation.","SELECT ProductID, SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details] GROUP BY ProductID;","The generated query uses ProductID while the ground truth uses ProductName, affecting the result's interpretability.",None
What is the median fulfillment time for all orders?,"SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DATEDIFF(ShippedDate, OrderDate)) AS MedianFulfillmentTime FROM orders;","```sql
SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DATEDIFF(ShippedDate, OrderDate)) AS MedianFulfillmentTime
FROM orders;
```",The generated SQL query and the ground truth SQL query are identical and accurately compute the median fulfillment time for all orders using the PERCENTILE_CONT function.,"SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DATEDIFF(ShippedDate, OrderDate)) AS MedianFulfillmentTime FROM orders;","The generated SQL query is identical to the ground truth query, both calculating the median fulfillment time correctly using PERCENTILE_CONT on the date difference between ShippedDate and OrderDate from the orders table.",both
Who are the top three employees in terms of sales?,"SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 3;","```sql
SELECT 
    e.EmployeeID, 
    e.FirstName, 
    e.LastName, 
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    e.EmployeeID
ORDER BY 
    TotalSales DESC
LIMIT 3;
```","Both queries calculate total sales per employee and return the top three employees. They differ in column selection, but the essential logic is the same.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 3","The generated SQL query and the ground truth SQL query are effectively identical, both accurately addressing the user's question by calculating TotalSales for each employee and selecting the top three based on descending sales. The logic and structure are the same, ensuring they yield the same result.",both
What are the total sales generated by country?,"SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ShipCountry;","```sql
SELECT 
    ShipCountry, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    ShipCountry;
```","Both queries join 'orders' and '[Order Details]' on 'OrderID' and group the result by 'ShipCountry', accurately calculating total sales with the same formula.","SELECT ShipCountry, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCountry;","Both queries calculate the total sales by country, using a join between orders and order details, and grouping by ShipCountry. They consider discounts and use equivalent logic.",both
Which products have the highest sales performance this year?,"SELECT p.ProductID, SUM(od.Quantity) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE YEAR(od.OrderDate) = YEAR(CURDATE()) GROUP BY p.ProductID ORDER BY TotalSales DESC LIMIT 5;","```sql
SELECT p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE YEAR(od.OrderDate) = YEAR(CURDATE())
GROUP BY p.ProductID
ORDER BY TotalSales DESC;
```","The generated query does not limit the result to the top 5 products, unlike the ground truth query.","SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY products.ProductName ORDER BY sales_performance DESC;","The queries calculate sales performance differently. The generated query computes total sales in monetary value, taking price and discount into account, while the ground truth calculates total units sold, ignoring price and discount.",None
Which employees are responsible for the top 10 largest orders?,"SELECT e.EmployeeID, o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, o.OrderID ORDER BY OrderValue DESC LIMIT 10;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, o.OrderID, o.Freight
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
ORDER BY o.Freight DESC
LIMIT 10;
```","The generated query orders by Freight, while the ground truth orders by calculated OrderValue. They may not yield the same top 10 largest orders.","SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS FullName, orders.OrderID FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN (SELECT OrderID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS OrderValue FROM [Order Details] GROUP BY OrderID) AS order_values ON orders.OrderID = order_values.OrderID ORDER BY order_values.OrderValue DESC LIMIT 10;",Both queries aim to retrieve employee information associated with the top 10 largest orders based on the total order value. They calculate the same order values and correctly order and limit the results to the top 10.,FT
Find products with a discount greater than 10% and quantity ordered over 100 units.,SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0.10 AND od.Quantity > 100;,"```sql
SELECT p.ProductID, p.ProductName, od.Discount, od.Quantity
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.Discount > 0.10 AND od.Quantity > 100;
```","The generated query selects additional columns (ProductID, Discount, Quantity) while the ground truth query selects only ProductName.",SELECT ProductID FROM [Order Details] WHERE Discount > 0.1 AND Quantity > 100;,"The generated query selects ProductID, while the ground truth query selects ProductName using a join with the products table.",None
How many units of each product are currently in stock?,"SELECT ProductID, UnitsInStock FROM products;","```sql
SELECT ProductID, UnitsInStock FROM products;
```","Both queries retrieve the same columns, ProductID and UnitsInStock, from the products table, effectively answering the user's question about current stock levels.","SELECT ProductID, ProductName, UnitsInStock FROM products WHERE UnitsInStock < ReorderLevel;","The generated query filters products based on 'UnitsInStock < ReorderLevel', which is not part of counting the units of each product. The user's question requires only the number of units in stock for each product without filtering.",Base
What is the total revenue difference between employees with different titles?,"SELECT employees.Title, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Title;","```sql
SELECT e.Title, 
       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.Title
HAVING COUNT(o.OrderID) > 0;
```",Both queries calculate total revenue by employee title and group by title. The 'HAVING' clause in the generated query is redundant but does not affect the result.,"SELECT employees.Title, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Title;","The generated SQL query and the ground truth SQL query compute the same aggregation of total revenue grouped by employee title, differing only in the alias for the aggregated value. Both queries accurately answer the user's question regarding the total revenue difference based on employee titles.",both
Identify orders that were shipped after the required date.,"SELECT OrderID, OrderDate, RequiredDate, ShippedDate FROM orders WHERE ShippedDate > RequiredDate;","```sql
SELECT *
FROM orders
WHERE ShippedDate > RequiredDate;
```","The generated query and the ground truth query have different SELECT clauses, which can yield different column outputs.",SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;,"Both queries correctly identify orders shipped after the required date by checking if ShippedDate > RequiredDate, although the generated query selects fewer columns.",FT
How many unique products have been ordered in total?,SELECT COUNT(DISTINCT [Order Details].ProductID) AS UniqueProducts FROM [Order Details];,"```sql
SELECT COUNT(DISTINCT ProductID) AS UniqueProductsOrdered
FROM [Order Details];
```","Both queries count distinct ProductID values from the 'Order Details' table and return the total number of unique products ordered. The queries use different aliases, but this does not affect the result.",SELECT COUNT(DISTINCT ProductID) AS UniqueProductsOrdered FROM [Order Details];,"Both queries count the distinct ProductID values in the 'Order Details' table, providing the same result.",both
Determine the total value of discounts applied over all orders.,SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount) AS TotalDiscountValue FROM [Order Details];,"```sql
SELECT SUM(Discount) AS TotalDiscounts
FROM [Order Details];
```","The generated query sums the Discount field directly, whereas the ground truth query calculates the total monetary discount value by multiplying Quantity, UnitPrice, and Discount, which accounts for the actual discount applied to orders.",SELECT SUM(Discount * UnitPrice * Quantity) AS TotalDiscountValue FROM [Order Details];,Both queries calculate the same total discount value using the same formula across the [Order Details] table.,FT
Calculate the average number of orders for each month in 2021.,"SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) / 12 AS AverageOrders FROM orders WHERE OrderDate BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY EXTRACT(MONTH FROM OrderDate)","```sql
SELECT 
    EXTRACT(MONTH FROM OrderDate) AS Month, 
    COUNT(OrderID) / COUNT(DISTINCT EXTRACT(YEAR FROM OrderDate)) AS AverageOrders
FROM 
    orders
WHERE 
    OrderDate BETWEEN '2021-01-01' AND '2021-12-31'
GROUP BY 
    EXTRACT(MONTH FROM OrderDate)
ORDER BY 
    Month;
```","Both queries calculate the average number of orders per month in 2021. They divide the order count by 12, accounting for the 12 months in the year. The difference in logic (COUNT DISTINCT YEAR vs. hardcoded division by 12) yields the same result for 2021.","SELECT MONTH(OrderDate) AS OrderMonth, COUNT(OrderID) / 12.0 AS AverageOrders FROM orders WHERE YEAR(OrderDate) = 2021 GROUP BY OrderMonth;","The generated query divides the total number of orders per month by 12, which gives an incorrect average. It assumes averaging over the entire year, not per month.",Base
Which customer received the most orders in the last month?,"SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) AND MONTH(OrderDate) = MONTH(CURRENT_DATE) - 1 GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT CustomerID, COUNT(OrderID) AS OrderCount
FROM orders
WHERE OrderDate >= DATEADD(month, -1, GETDATE())
GROUP BY CustomerID
ORDER BY OrderCount DESC
LIMIT 1
```","The generated query compares orders from the exact last 30 days, while the ground truth query targets orders strictly from the previous month based on the current month and year.","SELECT orders.CustomerID, COUNT(orders.OrderID) AS total_orders FROM orders WHERE orders.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND orders.OrderDate < DATE_TRUNC('month', CURRENT_DATE) GROUP BY orders.CustomerID ORDER BY total_orders DESC LIMIT 1","The generated query may not handle year boundaries correctly compared to the ground truth query, which checks if the month is exactly last month of the current year.",None
What is the average discount given on products?,SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];,"```sql
SELECT AVG(Discount) AS Average_Discount
FROM [Order Details];
```","Both queries calculate the average discount from the 'Order Details' table, so they yield the same results.",SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details];,"Both queries calculate the average discount on products from the same table and column, yielding the same results.",both
What is the most common shipment method used for orders processed by each employee?,"SELECT employees.EmployeeID, ShipVia, COUNT(orders.OrderID) AS NumShipments FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, ShipVia ORDER BY NumShipments DESC;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, o.ShipVia, COUNT(o.ShipVia) AS ShipmentCount
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID, o.ShipVia
HAVING COUNT(o.ShipVia) = (
    SELECT MAX(ShipmentCount)
    FROM (
        SELECT COUNT(ShipVia) AS ShipmentCount
        FROM orders
        WHERE EmployeeID = e.EmployeeID
        GROUP BY ShipVia
    ) AS subquery
)
ORDER BY e.EmployeeID;
```","The generated query attempts to find the method with the maximum shipments per employee, but the subquery logic is incorrect. It does not correctly limit the results to just the most common shipment method. The ground truth query does not filter to the most common method and incorrectly orders by total shipments without restating per employee.","SELECT employees.EmployeeID, employees.FirstName, employees.LastName, orders.ShipVia, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, orders.ShipVia ORDER BY employees.EmployeeID, OrderCount DESC;",The generated query lists all shipment methods for each employee with counts and orders them by EmployeeID and OrderCount. It does not ensure the result shows only the most common shipment method per employee.,None
Calculate the revenue lost due to discounts for each product.,"SELECT ProductID, SUM(UnitPrice * Quantity * Discount) AS RevenueLost FROM [Order Details] GROUP BY ProductID ORDER BY RevenueLost DESC;","```sql
SELECT 
    [Order Details].ProductID, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS RevenueLostDueToDiscounts
FROM 
    [Order Details]
GROUP BY 
    [Order Details].ProductID;
```","Both queries calculate the revenue lost due to discounts for each product correctly, using the same logic for computation. The only difference is the ordering, which does not affect the correctness of the result aggregation.","SELECT ProductID, SUM(Discount * Quantity * UnitPrice) AS RevenueLost FROM [Order Details] GROUP BY ProductID","Both queries calculate the same metric: the revenue lost due to discounts for each product, by multiplying UnitPrice, Quantity, and Discount. The difference is in the ordering, which does not affect the calculation of RevenueLost itself.",both
What percentage of orders received a discount?,SELECT (COUNT(DISTINCT [Order Details].OrderID) * 1.0 / (SELECT COUNT(DISTINCT OrderID) FROM orders)) * 100 AS percentage_discounted_orders FROM [Order Details] WHERE Discount > 0,"```sql
SELECT (COUNT(DISTINCT orders.OrderID WHERE [Order Details].Discount > 0) / COUNT(DISTINCT orders.OrderID)) * 100 AS discount_percentage
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID;
```","The generated query incorrectly uses a WHERE clause inside COUNT, which is not syntactically correct. The logic needs adjustment to filter discounts before counting.",SELECT (COUNT(*) FILTER(WHERE od.Discount > 0) * 100.0 / COUNT(*)) AS DiscountedOrdersPercentage FROM [Order Details] od;,"Both queries calculate the percentage of orders with a discount. The generated query uses COUNT with a FILTER, while the ground truth uses DISTINCT COUNT. Both approaches should yield the same results given the assumptions about the data distribution.",FT
What are the top-selling products by each category?,"SELECT CategoryID, P.ProductName, SUM(OD.Quantity) AS TotalSales FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID GROUP BY CategoryID, P.ProductName ORDER BY CategoryID, TotalSales DESC;","```sql
SELECT p.CategoryID, p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSold
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.CategoryID, p.ProductID, p.ProductName
HAVING SUM(od.Quantity) = (
    SELECT MAX(TotalSold)
    FROM (
        SELECT SUM(od2.Quantity) AS TotalSold
        FROM products p2
        JOIN [Order Details] od2 ON p2.ProductID = od2.ProductID
        WHERE p2.CategoryID = p.CategoryID
        GROUP BY p2.ProductID
    ) AS subquery
)
ORDER BY p.CategoryID;
```","The generated query finds the top-selling product within each category by filtering on the maximum sales, whereas the ground truth simply returns all products ordered by total sales without selecting the top-selling product per category.","SELECT CategoryID, ProductName FROM products p JOIN (SELECT ProductID, SUM(Quantity) AS TotalSold FROM [Order Details] GROUP BY ProductID) os ON p.ProductID = os.ProductID WHERE TotalSold = (SELECT MAX(Total) FROM (SELECT SUM(Quantity) AS Total FROM [Order Details] WHERE CategoryID = p.CategoryID GROUP BY ProductID) t) ORDER BY CategoryID;","The generated query attempts to find the top-selling product per category but fails because it uses incorrect logic to find the maximum sales per category. It incorrectly compares totals across the entire dataset without a proper grouping by category and does not yield top products per category. The ground truth query, however, correctly calculates total sales per product within each category, orders by those sales within each category, which could then be limited to the top product per category if necessary.",None
What is the average unit price of products for each category?,"SELECT p.CategoryID, AVG(p.UnitPrice) AS AveragePrice FROM products p GROUP BY p.CategoryID;","```sql
SELECT products.CategoryID, AVG(products.UnitPrice) AS AverageUnitPrice
FROM products
GROUP BY products.CategoryID;
```","Both queries calculate the average unit price for each category from the products table. They group by CategoryID and use the AVG function on UnitPrice, yielding the same results.","SELECT c.CategoryID, AVG(p.UnitPrice) AS AveragePrice FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;","Both queries calculate the average unit price of products for each category, grouped by the same CategoryID, and should yield the same results.",both
Which employee has handled the most orders?,"SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries compute the number of orders handled by each employee, order them by order count in descending order, and limit to the top result, thus yielding the same result.","SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1;","Both queries perform the same operations: they count orders per EmployeeID, sort by the count in descending order, and return the top result.",both
Determine monthly trends in inventory turnover ratios.,"SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') as OrderMonth, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) as InventoryTurnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY OrderMonth ORDER BY OrderMonth;","```sql
SELECT 
    DATE_TRUNC('month', o.OrderDate) AS Month,
    SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
JOIN 
    orders o ON od.OrderID = o.OrderID
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries calculate the inventory turnover ratio by month, using the same logic: aggregating the sum of sales over the average inventory. The difference in date formatting functions (DATE_TRUNC vs DATE_FORMAT) doesn't affect the accuracy of the result, as both group by month.","SELECT EXTRACT(MONTH FROM OrderDate) AS Month, (SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock)) AS InventoryTurnover FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY EXTRACT(MONTH FROM OrderDate);","The generated query groups by month without concatenating the year, which might mix data from different years. Additionally, it lacks a join on orders to access OrderDate accurately.",Base
Calculate the total freight cost for shipments to each country.,"SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;","```sql
SELECT ShipCountry, SUM(Freight) AS TotalFreightCost
FROM orders
GROUP BY ShipCountry;
```",Both queries calculate the total freight cost for shipments to each country by grouping the results by ShipCountry and summing the Freight.,"SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry ORDER BY TotalFreight DESC;",Both queries calculate the total freight cost for shipments to each country using the SUM function on the Freight column grouped by ShipCountry. The generated query includes an ORDER BY clause which does not affect the correctness of the result regarding the total freight calculation.,both
Which products are sold below their reorder level and need to be prioritized for restocking?,"SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 0 ORDER BY UnitsInStock, UnitsOnOrder ASC;","```sql
SELECT p.ProductID, p.ProductName, p.UnitsInStock, p.ReorderLevel
FROM products p
WHERE p.UnitsInStock < p.ReorderLevel;
```",The generated query does not filter out discontinued products and does not order the results.,SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;,The generated query does not account for discontinued products and doesn't sort the results as the ground truth query does.,None
Which product had the highest increase in sales compared to the previous month?,"SELECT products.ProductName, product_sales.current_month_sales - COALESCE(previous_month_sales.previous_month_sales, 0) AS sales_increase FROM (SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS current_month_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE()) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE()) GROUP BY [Order Details].ProductID) AS product_sales LEFT JOIN (SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS previous_month_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE()) - 1 AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE()) GROUP BY [Order Details].ProductID) AS previous_month_sales ON product_sales.ProductID = previous_month_sales.ProductID JOIN products ON product_sales.ProductID = products.ProductID ORDER BY sales_increase DESC LIMIT 1","```sql
SELECT current_month.ProductID, 
       (SUM(current_month.Quantity) - COALESCE(SUM(previous_month.Quantity), 0)) AS sales_increase
FROM (SELECT ProductID, SUM(Quantity) AS Quantity 
      FROM [Order Details] 
      JOIN orders ON [Order Details].OrderID = orders.OrderID 
      WHERE orders.OrderDate BETWEEN DATE_TRUNC('month', CURRENT_DATE) 
      AND LAST_DAY(CURRENT_DATE) 
      GROUP BY ProductID) AS current_month
LEFT JOIN (SELECT ProductID, SUM(Quantity) AS Quantity 
           FROM [Order Details] 
           JOIN orders ON [Order Details].OrderID = orders.OrderID 
           WHERE orders.OrderDate BETWEEN DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') 
           AND LAST_DAY(CURRENT_DATE - INTERVAL '1 month') 
           GROUP BY ProductID) AS previous_month
ON current_month.ProductID = previous_month.ProductID
ORDER BY sales_increase DESC
LIMIT 1;
```","The generated query calculates sales increase based on quantity, whereas the ground truth uses total sales value including discounts.","SELECT p.ProductID, p.ProductName FROM (SELECT ProductID, (TotalSales - PreviousMonthSales) AS Increase FROM (SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales, LAG(SUM(od.Quantity * od.UnitPrice)) OVER (PARTITION BY p.ProductID ORDER BY YEAR(o.OrderDate), MONTH(o.OrderDate)) AS PreviousMonthSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, p.ProductName) AS MonthlySales) AS SalesDifference ORDER BY Increase DESC LIMIT 1;","The generated SQL query calculates the monthly increase for every product and uses the LAG function to compare the sales of consecutive months, including data for the entire history. However, the ground truth SQL query focuses only on the current and previous months, using COALESCE to handle potential nulls for previous month data and handling discounts in the calculations. These differences could potentially result in different outputs, especially if there are null values or different discount applications.",None
List products that have the highest margin by comparing unit price with discounted price.,"SELECT ProductName, UnitPrice - MIN(od.UnitPrice * (1 - od.Discount)) AS Margin FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY ProductName ORDER BY Margin DESC LIMIT 5;","```sql
SELECT p.ProductID, p.ProductName, 
       (od.UnitPrice - (od.UnitPrice * od.Discount)) AS Margin
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.Discount > 0
ORDER BY Margin DESC;
```","The generated query lists products with any discount and their margins without aggregation. The ground truth calculates the minimal discounted price for each product, finds their margins, and limits the output to the top 5.","SELECT p.ProductID, p.ProductName FROM products p ORDER BY (p.UnitPrice - (p.UnitPrice * (p.Discount))) DESC LIMIT 5;","The generated query computes margin solely based on products table, assuming only one discount. The ground truth computes margin using 'Order Details', accounting for variations in discounts, and aggregates them.",None
What is the average discount percentage given on orders?,SELECT AVG(Discount * 100) AS AverageDiscountPercentage FROM [Order Details];,"```sql
SELECT AVG(Discount) * 100 AS AverageDiscountPercentage
FROM [Order Details];
```",Both queries calculate the average discount percentage correctly by multiplying the average discount by 100.,SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];,"The generated query calculates the average discount as a decimal, while the ground truth query calculates it as a percentage by multiplying by 100.",Base
Identify orders with a shipping delay and calculate the average delay days.,"SELECT o.OrderID, DATEDIFF(o.ShippedDate, o.RequiredDate) AS DelayDays FROM orders o WHERE o.ShippedDate > o.RequiredDate;","```sql
SELECT 
    AVG(DATEDIFF(orders.ShippedDate, orders.RequiredDate)) AS AverageDelayDays
FROM 
    orders
WHERE 
    orders.ShippedDate > orders.RequiredDate;
```","The generated query calculates the average delay days, while the ground truth query lists each order with a specific delay day. They serve different purposes.","SELECT OrderID, DATEDIFF(ShippedDate, RequiredDate) AS Delay FROM orders WHERE ShippedDate > RequiredDate;","Both queries calculate the delay in shipping days for orders where the shipped date is later than the required date, producing equivalent results.",FT
What is the total value of all orders placed by customers in the USA?,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Country = 'USA',"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_order_value 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN customers ON orders.CustomerID = customers.CustomerID 
WHERE customers.Country = 'USA'
```","The generated SQL query and the ground truth query are functionally equivalent. Both calculate the total order value for customers in the USA by joining the 'Order Details', 'orders', and 'customers' tables, and applying the appropriate filters and calculations.",SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_value FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE customers.Country = 'USA',"Both queries join the customers, orders, and Order Details tables correctly and filter by customers from the USA. They compute the total value of orders by summing the product of UnitPrice, Quantity, and the discount adjustment. The order of joins does not affect the outcome, so results are equivalent.",both
Calculate the reorder frequency for each product.,"SELECT p.ProductID, p.ProductName, COUNT(*) AS ReorderCount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID WHERE od.Quantity >= p.ReorderLevel GROUP BY p.ProductID, p.ProductName ORDER BY ReorderCount DESC;","```sql
SELECT 
    p.ProductID,
    p.ProductName,
    COUNT(o.OrderID) AS ReorderFrequency
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
JOIN 
    orders o ON od.OrderID = o.OrderID
WHERE 
    p.UnitsOnOrder > p.ReorderLevel
GROUP BY 
    p.ProductID, p.ProductName
```","The generated query counts orders only when UnitsOnOrder > ReorderLevel, while the ground truth uses Quantity >= ReorderLevel.","SELECT ProductID, COUNT(ProductID) AS ReorderCount FROM products WHERE UnitsInStock <= ReorderLevel GROUP BY ProductID;","The generated query calculates reorder frequency based on stock levels, whereas the ground truth query calculates reorder frequency based on orders meeting reorder level, and includes product names.",None
Which employees are handling the most territories?,"SELECT employees.EmployeeID, COUNT(employeeTerritories.TerritoryID) AS territory_count FROM employeeTerritories JOIN employees ON employeeTerritories.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID ORDER BY territory_count DESC","```sql
SELECT EmployeeID, COUNT(TerritoryID) AS territory_count 
FROM employeeTerritories 
GROUP BY EmployeeID 
ORDER BY territory_count DESC;
```","Both queries count territories per employee and order by the count in descending order, yielding the same result.","SELECT employees.EmployeeID, COUNT(employeeTerritories.TerritoryID) AS TerritoriesCount FROM employees JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID GROUP BY employees.EmployeeID ORDER BY TerritoriesCount DESC","Both queries join employees and employeeTerritories tables, count the number of territories per employee, group by EmployeeID, and order by the count in descending order. They yield the same results.",both
Which products have a reorder level that is less than the average reorder level?,SELECT ProductName FROM products WHERE ReorderLevel < (SELECT AVG(ReorderLevel) FROM products);,"```sql
SELECT ProductID, ProductName, ReorderLevel
FROM products
WHERE ReorderLevel < (SELECT AVG(ReorderLevel) FROM products);
```","The generated query selects ProductID, ProductName, and ReorderLevel, while the ground truth query selects only ProductName. The results differ in terms of returned columns, affecting practical output equivalency.",SELECT ProductName FROM products WHERE ReorderLevel < (SELECT AVG(ReorderLevel) FROM products);,Both queries are identical and correctly select products with a reorder level less than the average reorder level.,FT
Which product has the highest sales quantity in the last month?,"SELECT p.ProductName, SUM(od.Quantity) AS total_quantity FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID JOIN products p ON od.ProductID = p.ProductID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND o.OrderDate < CURDATE() GROUP BY p.ProductName ORDER BY total_quantity DESC LIMIT 1","```sql
SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate >= DATEADD(month, -1, GETDATE()) 
GROUP BY products.ProductID 
ORDER BY total_quantity DESC 
LIMIT 1
```",The generated query uses products.ProductID in SELECT and GROUP BY but doesn't join the 'products' table; it also allows future dates with GETDATE(). The ground truth query uses p.ProductName and applies CURDATE() to limit the date range correctly.,"SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) GROUP BY od.ProductID ORDER BY TotalQuantity DESC LIMIT 1","The generated query selects ProductID instead of ProductName, and does not ensure the one-month range by missing the end date condition found in the ground truth query.",None
Which product has the highest reorder level?,SELECT ProductName FROM products ORDER BY ReorderLevel DESC LIMIT 1;,"```sql
SELECT ProductName, ReorderLevel
FROM products
ORDER BY ReorderLevel DESC
LIMIT 1;
```",Both queries fetch the product with the highest ReorderLevel by ordering in descending order and limiting the result to one record. The primary goal of determining the product with the highest reorder level is achieved in both queries.,SELECT ProductName FROM products ORDER BY ReorderLevel DESC LIMIT 1;,Both queries are identical and will return the product with the highest reorder level.,both
What are the top 5 products with the highest discount given?,"SELECT ProductID, Discount FROM [Order Details] ORDER BY Discount DESC LIMIT 5;","```sql
SELECT ProductID, MAX(Discount) AS HighestDiscount
FROM [Order Details]
GROUP BY ProductID
ORDER BY HighestDiscount DESC
LIMIT 5;
```","The generated query uses MAX to find the highest discount per ProductID, then orders these maximum values. The ground truth uses the raw discount values and orders them directly, yielding different results if a product appears multiple times with different discounts.","SELECT ProductID, MAX(Discount) AS HighestDiscount FROM [Order Details] GROUP BY ProductID ORDER BY HighestDiscount DESC LIMIT 5;","The generated SQL query groups by ProductID and finds the maximum discount per product, then orders by these maximum values. The ground truth query orders all discounts directly and limits the results to the top 5, without grouping.",None
What is the average unit price of products by category?,"SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID;","```sql
SELECT CategoryID, AVG(UnitPrice) AS AverageUnitPrice
FROM products
GROUP BY CategoryID;
```","Both queries calculate the average unit price of products by category, grouping by CategoryID. The difference is only in the alias name, which doesn't affect the result.","SELECT products.CategoryID, AVG(products.UnitPrice) AS AveragePrice FROM products GROUP BY products.CategoryID;","Both queries calculate the average unit price of products grouped by CategoryID, using the same aggregation function and group by clause, yielding the same results.",both
What is the average discount given on orders?,SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];,"```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details];
```",Both queries are identical and accurately find the average discount from the 'Order Details' table.,SELECT AVG(UnitPrice * Quantity * Discount) AS AverageDiscount FROM [Order Details];,"The generated SQL calculates the average of the actual discount amount on orders, while the ground truth calculates the average discount rate applied.",Base
What's the total value of the current stock for each product?,"SELECT ProductName, UnitsInStock * UnitPrice AS StockValue FROM products;","```sql
SELECT 
    p.ProductID,
    p.ProductName,
    (p.UnitPrice * p.UnitsInStock) AS TotalStockValue
FROM 
    products p;
```","Both queries calculate the total stock value by multiplying UnitPrice and UnitsInStock for each product and list the products, matching the user's request.","SELECT ProductName, UnitsInStock * UnitPrice AS StockValue FROM products;",Both queries calculate the stock value for each product by multiplying UnitsInStock by UnitPrice. They are equivalent and yield the same results.,both
List products that have never been ordered.,SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"```sql
SELECT p.ProductID, p.ProductName
FROM products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.ProductID IS NULL;
```","Both queries effectively find all products that have not been ordered. The generated query uses a LEFT JOIN with a NULL check, while the ground truth query uses a NOT IN subquery, but both achieve the same outcome.",SELECT p.ProductName FROM products p WHERE p.ProductID NOT IN (SELECT DISTINCT od.ProductID FROM [Order Details] od);,Both queries correctly identify products never ordered by checking for ProductIDs not present in [Order Details]. Differences in aliasing do not affect functionality.,both
Which employees have the highest order fulfillment speed?,"SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EmployeeID ORDER BY AvgFulfillmentTime ASC;","```sql
SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY EmployeeID
ORDER BY AverageFulfillmentTime ASC
LIMIT 1;
```","The generated query uses LIMIT 1 to find the employee with the single fastest average order fulfillment time, while the ground truth query lists all employees sorted by fulfillment time.","SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS FullName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgFulfillmentSpeed FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY AvgFulfillmentSpeed ASC LIMIT 5","The generated query and the ground truth query have a different SELECT list. The generated query includes employee names and uses CONCAT for full names, while the ground truth does not. Additionally, the generated query limits results using LIMIT 5, which is not present in the ground truth query. Both queries aim to find employees with the fastest average fulfillment time, but they differ in output structure and potentially in output content due to the LIMIT clause.",None
Which city has the highest number of orders shipped in 2023?,"SELECT orders.ShipCity, COUNT(orders.OrderID) AS total_orders FROM orders WHERE YEAR(orders.ShippedDate) = 2023 GROUP BY orders.ShipCity ORDER BY total_orders DESC LIMIT 1","```sql
SELECT ShipCity, COUNT(OrderID) AS number_of_orders
FROM orders
WHERE YEAR(ShippedDate) = 2023
GROUP BY ShipCity
ORDER BY number_of_orders DESC
LIMIT 1
```","Both queries count the number of orders per city for the year 2023 and return the city with the highest count, correctly utilizing aggregation, filtering, and sorting.","SELECT ShipCity, COUNT(*) AS NumberOfOrders FROM orders WHERE YEAR(ShippedDate) = 2023 GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 1;",Both queries correctly count the orders shipped in each city during 2023 and return the city with the highest number. The use of COUNT(*) and COUNT(OrderID) yields the same result in this context.,both
Determine the difference in shipment duration for each order (RequiredDate vs ShippedDate).,"SELECT OrderID, DATEDIFF(ShippedDate, RequiredDate) AS ShipmentDuration FROM orders WHERE ShippedDate IS NOT NULL;","```sql
SELECT OrderID, DATEDIFF(RequiredDate, ShippedDate) AS ShipmentDurationDifference
FROM orders;
```","The generated query calculates the difference as RequiredDate - ShippedDate, while the ground truth calculates it as ShippedDate - RequiredDate. Additionally, the ground truth query filters out rows with NULL ShippedDate values.","SELECT OrderID, DATEDIFF(ShippedDate, RequiredDate) AS ShipmentDuration FROM orders WHERE ShippedDate IS NOT NULL;","The generated SQL query is identical to the ground truth query, and both correctly calculate the shipment duration only for orders where the ShippedDate is not null.",FT
What is the total revenue generated from each supplier's products?,"SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;","```sql
SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.CompanyName;
```","The generated SQL groups by CompanyName, while the ground truth groups by SupplierID, potentially leading to different results.","SELECT SupplierID, SUM(UnitPrice * (1 - Discount) * Quantity) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID;","Both queries calculate the total revenue for each supplier. The generated query directly joins 'products' and 'Order Details' to sum the revenue, while the ground truth query also explicitly joins 'suppliers'. Since 'SupplierID' is grouped and calculated identically in both queries, the results should be the same.",FT
Which employee has the highest sales in a given year?,"SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2022 GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE YEAR(o.OrderDate) = {given_year}
GROUP BY e.EmployeeID
ORDER BY TotalSales DESC
LIMIT 1;
```","The generated query uses a dynamic placeholder {given_year} instead of a specific year like 2022 in the ground truth query. However, grouping is inconsistent; the generated query omits grouping by FirstName and LastName.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE YEAR(orders.OrderDate) = 2021 GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1","The generated SQL query filters sales for the year 2021, while the ground truth SQL query filters for the year 2022. This discrepancy means they do not yield the same result.",None
How many unique products are ordered by each customer?,"SELECT o.CustomerID, COUNT(DISTINCT od.ProductID) AS UniqueProductsOrdered FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID;","```sql
SELECT CustomerID, COUNT(DISTINCT ProductID) AS UniqueProductsOrdered
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY CustomerID;
```","Both queries accurately count the number of unique products ordered by each customer, using a JOIN between the 'orders' and 'Order Details' tables, and GROUP BY CustomerID. The difference in aliasing and syntax does not affect the outcome.","SELECT c.CustomerID, COUNT(DISTINCT od.ProductID) AS UniqueProductCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;","Both queries calculate the number of unique products ordered per customer using joins between customers, orders, and order details tables, and group by customer ID. Although the aliases differ, the logic and result are equivalent.",both
Which products have the highest discount on average?,"SELECT products.ProductName, AVG([Order Details].Discount) AS AvgDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY AvgDiscount DESC","```sql
SELECT products.ProductName, AVG([Order Details].Discount) AS AverageDiscount
FROM products
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY products.ProductName
ORDER BY AverageDiscount DESC;
```","The generated SQL query and the ground truth query both compute the average discount for each product and order the results in descending order of the average discount. They produce the same results, only differing in alias naming.","SELECT p.ProductName, AVG(od.Discount) AS AvgDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY AvgDiscount DESC;","Both queries perform the same operations: they join the 'products' and 'Order Details' tables on 'ProductID', group by 'ProductName', calculate the average discount for each product, and order the results by the average discount in descending order. The structural differences do not affect the result.",both
Calculate the average discount provided by each employee.,"SELECT employees.EmployeeID, AVG([Order Details].Discount) AS AverageDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.Discount) AS AverageDiscount
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","Both queries calculate the average discount for each employee, grouping by EmployeeID. The generated query includes additional columns (FirstName, LastName) which do not affect the correctness of the average calculation.","SELECT e.EmployeeID, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID","Both queries join the employees, orders, and order details tables and calculate the average discount grouped by EmployeeID. The differences in aliasing do not affect the outcome.",both
Calculate the total sales for each product.,"SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName;
```","Both queries calculate total sales per product by joining the 'products' table with 'Order Details' on 'ProductID'. They aggregate sales and group by ProductName, which will yield the same results.","SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;","The generated query includes a discount factor in the calculation, while the ground truth query does not.",Base
How many orders were shipped later than the required date?,SELECT COUNT(orders.OrderID) FROM orders WHERE orders.ShippedDate > orders.RequiredDate,"```sql
SELECT COUNT(orders.OrderID) AS late_shipped_orders FROM orders WHERE orders.ShippedDate > orders.RequiredDate
```","Both queries count the number of orders where the ShippedDate is later than the RequiredDate. The difference is only in the alias for the count result, which does not affect the correctness.",SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate;,"Both queries count the orders where the ShippedDate is later than the RequiredDate, so they produce the same result.",both
What is the average shipping cost to each country?,"SELECT ShipCountry, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY ShipCountry;","```sql
SELECT ShipCountry, AVG(Freight) AS AverageShippingCost
FROM orders
GROUP BY ShipCountry;
```","The generated SQL query correctly calculates the average shipping cost (Freight) for each ShipCountry from the orders table, matching the ground truth query in structure and outcome.","SELECT ShipCountry, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY ShipCountry;",The generated SQL query accurately answers the user's question and matches the ground truth query.,both
What is the average order value for the current year?,"SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN DATE_TRUNC('year', CURRENT_DATE) AND CURRENT_DATE;","```sql
SELECT 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE 
    YEAR(orders.OrderDate) = YEAR(CURRENT_DATE);
```","Both queries calculate the average order value for the current year using the same logic. They sum the product of UnitPrice, Quantity, and the discount factor, dividing by the number of distinct orders. The date condition in both queries captures the current year.",SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()),"Both queries calculate the average order value for the current year by summing the total order amount and dividing by the distinct number of orders. Although the date filtering syntax is different, they serve the same purpose.",both
How many discontinued products are still in stock?,"SELECT ProductID, UnitsInStock FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;","```sql
SELECT COUNT(*) AS DiscontinuedInStock
FROM products
WHERE Discontinued = 1 AND UnitsInStock > 0;
```","The generated SQL query counts the products, while the ground truth query selects product details. They return different result types.",SELECT COUNT(ProductID) AS DiscontinuedInStock FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;,"The generated query returns a count, whereas the ground truth query returns a list of ProductIDs and UnitsInStock.",None
List products with no units on order but have sales in the last month.,"SELECT ProductName FROM products WHERE UnitsOnOrder = 0 AND ProductID IN (SELECT DISTINCT od.ProductID FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH));","```sql
SELECT p.ProductID, p.ProductName
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE p.UnitsOnOrder = 0
AND od.OrderID IN (
    SELECT OrderID
    FROM [Order Details]
    WHERE OrderDate >= DATEADD(month, -1, GETDATE())
)
GROUP BY p.ProductID, p.ProductName;
```","The generated query does not correctly filter orders by date in the subquery, and it improperly groups the results. The ground truth correctly links orders and filters by the order date.","SELECT p.ProductID, p.ProductName FROM products p WHERE p.UnitsOnOrder = 0 AND p.ProductID IN (SELECT od.ProductID FROM [Order Details] od WHERE DATEDIFF(MONTH, CURRENT_DATE, od.OrderDate) = 1);","The generated query uses DATEDIFF and includes orders exactly one month ago, which is incorrect. The ground truth calculates the last month using DATE_SUB, which correctly considers all sales within the last month period.",None
What products have been ordered most frequently?,"SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC;","```sql
SELECT 
    [Order Details].ProductID, 
    SUM([Order Details].Quantity) AS TotalQuantity 
FROM 
    [Order Details] 
GROUP BY 
    [Order Details].ProductID 
ORDER BY 
    TotalQuantity DESC;
```",Both SQL queries calculate the total quantity for each product and order the results in descending order by total quantity. They will yield the same results despite minor syntactical differences.,SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SUM(od.Quantity) DESC;,The generated query returns 'ProductName' while the ground truth query returns 'ProductID'. They also have different grouping criteria.,Base
What is the average shipping cost per order in the last year?,"SELECT AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE()","```sql
SELECT AVG(orders.Freight) AS shipping_cost_per_order FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'
```","The generated query uses fixed dates for the last year, while the ground truth query dynamically calculates the last year using current date functions, which might lead to different results depending on when the query is run.",SELECT AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE orders.OrderDate BETWEEN '2022-09-21' AND '2023-09-21',"Both queries calculate the average shipping cost for the same one-year interval, assuming the current date is '2023-09-21'.",FT
What is the average shipping cost per order over the last month?,"SELECT AVG(Freight) FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month';","```sql
SELECT AVG(Freight) AS Average_Shipping_Cost
FROM orders
WHERE OrderDate >= DATEADD(MONTH, -1, GETDATE());
```","The generated SQL query calculates the average shipping cost for orders within the last 30 days, not the previous calendar month. Ground truth calculates for the full previous calendar month.",SELECT AVG(Freight) AS AverageFreight FROM orders WHERE EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE - INTERVAL '1 month') AND EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '1 month'),"The generated query checks for orders from the exact previous month, while the ground truth includes orders from the start of the previous calendar month onward.",None
List the top 5 employees with the highest sales growth over the last year.,"SELECT e.EmployeeID, e.FirstName, e.LastName, (SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) AS SalesGrowth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY SalesGrowth DESC LIMIT 5;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName,
       SUM(CASE WHEN o.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) AS SalesLastYear,
       SUM(CASE WHEN o.OrderDate < DATEADD(YEAR, -1, CURRENT_DATE) AND o.OrderDate >= DATEADD(YEAR, -2, CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) AS SalesPreviousYear,
       (SUM(CASE WHEN o.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - 
        SUM(CASE WHEN o.OrderDate < DATEADD(YEAR, -1, CURRENT_DATE) AND o.OrderDate >= DATEADD(YEAR, -2, CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) AS SalesGrowth
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= DATEADD(YEAR, -2, CURRENT_DATE)
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY SalesGrowth DESC
LIMIT 5;
```","The generated query calculates sales growth based on a one-year interval ending on the current date, comparing it to the same prior period. The ground truth query calculates sales growth based on calendar years, comparing the current year to the previous year.","SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2022-01-01' AND '2023-01-01' GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 5;","The generated query calculates total sales for the last year and lists the top 5 employees, whereas the ground truth query calculates the sales growth by comparing the current year's sales to the previous year's sales to find the top 5 employees with the highest sales growth.",None
What is the total inventory value for each category?,"SELECT CategoryID, SUM(UnitPrice * UnitsInStock) AS InventoryValue FROM products GROUP BY CategoryID;","```sql
SELECT p.CategoryID, SUM(p.UnitPrice * p.UnitsInStock) AS TotalInventoryValue
FROM products p
GROUP BY p.CategoryID;
```","Both queries group by CategoryID and calculate the sum of UnitPrice multiplied by UnitsInStock, which correctly answers the user question.","SELECT CategoryID, SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products GROUP BY CategoryID;","Both queries calculate the total inventory value for each category by multiplying UnitPrice with UnitsInStock and summing the results, grouped by CategoryID. The difference is only in the alias name for the result column.",both
What are the total sales by supplier and month?,"SELECT SupplierID, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) AS MonthlySales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY SupplierID, Month;","```sql
SELECT p.SupplierID, 
       YEAR(o.OrderDate) AS Year, 
       MONTH(o.OrderDate) AS Month, 
       SUM(od.Quantity * od.UnitPrice) AS TotalSales
FROM [Order Details] od
JOIN orders o ON od.OrderID = o.OrderID
JOIN products p ON od.ProductID = p.ProductID
GROUP BY p.SupplierID, YEAR(o.OrderDate), MONTH(o.OrderDate)
```","The generated query includes a year column in the output, while the ground truth query does not. This results in a different grouping and, therefore, potentially different results.","SELECT s.SupplierID, s.CompanyName, DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID, s.CompanyName, DATE_FORMAT(o.OrderDate, '%Y-%m');","The generated query uses DATE_FORMAT to extract year-month, including company name, and groups by it, while the ground truth uses EXTRACT for just the month and does not include company name.",None
Determine the average discount offered on the products from each supplier.,"SELECT p.SupplierID, AVG(od.Discount) AS AvgDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;","```sql
SELECT suppliers.SupplierID, AVG([Order Details].Discount) AS AverageDiscount
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY suppliers.SupplierID
```",Both queries calculate the average discount offered on products for each supplier by joining the 'Order Details' and 'products' tables and grouping by SupplierID.,"SELECT p.SupplierID, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",Both queries join the 'products' and 'Order Details' tables on 'ProductID' and compute the average discount grouped by 'SupplierID'. The different ordering of tables in the JOIN does not affect the result.,both
What is the average order fulfillment time per month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(day, OrderDate, ShippedDate)) AS AverageFulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
    AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM 
    orders
GROUP BY 
    Month
```","The generated query does not handle NULL values in ShippedDate, which can lead to incorrect average calculations.","SELECT EXTRACT(MONTH FROM OrderDate) AS OrderMonth, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY OrderMonth;","The generated query does not filter out rows where ShippedDate is NULL, leading to potential inaccuracies. Also, EXTRACT(MONTH FROM OrderDate) does not group by the entire month-year combination, whereas DATE_TRUNC('month', OrderDate) does, which could affect the aggregation results.",None
Analyze the sales trend for products over the last quarter.,"SELECT EXTRACT(MONTH FROM OrderDate) AS Month, SUM(Quantity * UnitPrice) AS TotalSales FROM [Order Details] WHERE OrderDate >= DATEADD(MONTH, -3, CURRENT_DATE) GROUP BY EXTRACT(MONTH FROM OrderDate);","```sql
SELECT 
    products.ProductID,
    products.ProductName,
    SUM([Order Details].Quantity) AS TotalSales,
    MONTH(orders.OrderDate) AS SaleMonth
FROM 
    products
JOIN 
    [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN 
    orders ON [Order Details].OrderID = orders.OrderID
WHERE 
    orders.OrderDate >= DATEADD(QUARTER, -1, GETDATE())
GROUP BY 
    products.ProductID, products.ProductName, MONTH(orders.OrderDate)
ORDER BY 
    SaleMonth;
```","The generated SQL query aggregates sales by product and month, while the ground truth query aggregates total sales by month only, without a product breakdown.","SELECT p.ProductName, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY p.ProductName;","The generated query groups by product name and sums quantities, while the ground truth groups by month and sums the total sales.",None
Calculate the total number of orders for each shipping country.,"SELECT ShipCountry, COUNT(*) AS NumberOfOrders FROM orders GROUP BY ShipCountry;","```sql
SELECT ShipCountry, COUNT(OrderID) AS TotalOrders
FROM orders
GROUP BY ShipCountry;
```",Both queries calculate the total number of orders for each shipping country by grouping on ShipCountry and counting the orders. The difference in alias naming ('TotalOrders' vs. 'NumberOfOrders') does not affect the result.,"SELECT ShipCountry, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipCountry;","Both queries essentially perform the same operation: counting the number of orders for each shipping country by grouping the data based on 'ShipCountry'. The only difference is the alias used for the count and whether 'COUNT(OrderID)' or 'COUNT(*)' is used, but both produce the same result.",both
Identify customers who have placed more than 10 orders.,"SELECT CustomerID, COUNT(OrderID) AS order_count FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 10;","```sql
SELECT CustomerID
FROM orders
GROUP BY CustomerID
HAVING COUNT(OrderID) > 10;
```","Both queries correctly identify customers with more than 10 orders, differing only in the inclusion of the order_count column in the ground truth query.",SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID HAVING COUNT(o.OrderID) > 10;,Both queries correctly identify customers who have placed more than 10 orders by grouping on CustomerID and applying the HAVING clause.,both
What is the distribution of employee hire dates by year?,"SELECT YEAR(HireDate) AS HireYear, COUNT(EmployeeID) AS HireCount FROM employees GROUP BY YEAR(HireDate);","```sql
SELECT YEAR(HireDate) AS HireYear, COUNT(*) AS EmployeeCount
FROM employees
GROUP BY HireYear
ORDER BY HireYear;
```","Both queries group by the year of the hire date and count the number of employees, producing the same distribution by year.","SELECT YEAR(HireDate) AS HireYear, COUNT(EmployeeID) AS NumHires FROM employees GROUP BY YEAR(HireDate);","Both queries calculate the number of hires per year, differing only in alias naming, which does not affect the results.",both
Which products have more units on order than units currently in stock?,SELECT ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;,"```sql
SELECT ProductID, ProductName, UnitsInStock, UnitsOnOrder
FROM products
WHERE UnitsOnOrder > UnitsInStock;
```","Both queries return products where units on order exceed units in stock, differing only in selected columns. The generated query includes additional columns but answers the user's question.",SELECT ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;,Both queries select ProductName from the products table where UnitsOnOrder is greater than UnitsInStock. The logic and conditions are identical.,both
Identify the most common shipping method used by each employee.,"SELECT e.EmployeeID, e.FirstName, e.LastName, o.ShipVia, COUNT(o.OrderID) as ShipMethodCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, o.ShipVia ORDER BY ShipMethodCount DESC;","```sql
SELECT 
    e.EmployeeID, 
    e.FirstName, 
    e.LastName, 
    o.ShipVia, 
    COUNT(o.ShipVia) AS ShippingMethodCount
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
GROUP BY 
    e.EmployeeID, o.ShipVia
HAVING 
    COUNT(o.ShipVia) = (
        SELECT 
            MAX(ShippingMethodCount)
        FROM (
            SELECT 
                e2.EmployeeID, 
                o2.ShipVia, 
                COUNT(o2.ShipVia) AS ShippingMethodCount
            FROM 
                employees e2
            JOIN 
                orders o2 ON e2.EmployeeID = o2.EmployeeID
            GROUP BY 
                e2.EmployeeID, o2.ShipVia
        ) AS SubQuery
        WHERE SubQuery.EmployeeID = e.EmployeeID
    )
ORDER BY 
    e.EmployeeID;
```","The generated query determines the most common shipping method per employee using a subquery, while the ground truth query does not filter for the most common method. The generated query answers the user's question, but the ground truth query provides all shipping methods per employee, not just the most common.","SELECT e.EmployeeID, o.ShipVia, COUNT(o.OrderID) AS Shipments FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, o.ShipVia ORDER BY Shipments DESC;","The generated query identifies the total shipments per shipping method for each employee but does not select the most common one. Additionally, it lacks employee names and orders by shipments globally, not per employee.",None
Identify the top 5 best-selling products last quarter.,"SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity_sold FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND CURRENT_DATE GROUP BY products.ProductID ORDER BY total_quantity_sold DESC LIMIT 5","```sql
SELECT products.ProductID, SUM([Order Details].Quantity) AS total_sales 
FROM [Order Details] 
JOIN products ON [Order Details].ProductID = products.ProductID 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30' 
GROUP BY products.ProductID 
ORDER BY total_sales DESC 
LIMIT 5;
```","The generated query uses fixed dates, while the ground truth uses a dynamic date range for the last quarter. Also, the generated query returns ProductID, whereas the ground truth returns ProductName.","SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE EXTRACT(QUARTER FROM CURRENT_DATE - INTERVAL '1' QUARTER) = EXTRACT(QUARTER FROM [Order Details].OrderDate) AND EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '1' QUARTER) = EXTRACT(YEAR FROM [Order Details].OrderDate) GROUP BY products.ProductID ORDER BY total_quantity_sold DESC LIMIT 5","The generated query compares quarters for filtering, but it does not correctly identify the last quarter's range, unlike the ground truth which uses a direct date subtraction method.",None
What is the breakdown of total sales by shipment countries?,"SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.ShipCountry","```sql
SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
GROUP BY orders.ShipCountry
```",Both queries perform the same operations: they calculate total sales by shipment country by joining the [Order Details] and orders tables and grouping the results by ShipCountry.,"SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.ShipCountry","The generated SQL query is identical to the ground truth SQL query, meaning it accurately answers the user's question regarding the breakdown of total sales by shipment countries.",both
How many orders were placed by customers in the United States?,SELECT COUNT(o.OrderID) AS USOrders FROM orders o JOIN customers c ON o.CustomerID = c.CustomerID WHERE c.Country = 'USA';,"```sql
SELECT COUNT(*) AS TotalOrders
FROM orders
JOIN customers ON orders.CustomerID = customers.CustomerID
WHERE customers.Country = 'United States';
```","Both queries count orders from customers in the United States by joining the orders and customers tables and filtering for the US. The only difference is the country's name ('United States' vs 'USA'), which should be consistent with the database's data.",SELECT COUNT(OrderID) FROM orders WHERE ShipCountry = 'United States';,"The generated query filters by ShipCountry, while the ground truth query uses the customer's country, which could lead to different results.",Base
What is the total sales revenue by country?,"SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipCountry;","```sql
SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY ShipCountry;
```","Both queries group and sum total sales revenue by the same field, ShipCountry, resulting in the same output.","SELECT customers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.Country","The generated query groups by customers.Country, but the ground truth groups by orders.ShipCountry. These can yield different results if the customer's country differs from the shipping country.",Base
What is the total number of orders that have not been shipped?,SELECT COUNT(o.OrderID) AS UnshippedOrders FROM orders o WHERE o.ShippedDate IS NULL;,"```sql
SELECT COUNT(OrderID) AS TotalPendingOrders
FROM orders
WHERE ShippedDate IS NULL;
```","Both queries correctly count the number of orders with a NULL ShippedDate, thus yielding the same result.",SELECT COUNT(OrderID) FROM orders WHERE ShippedDate IS NULL;,"Both queries calculate the count of orders with a NULL ShippedDate, answering the user's question accurately.",both
What is the product with the highest unit price currently in stock?,"SELECT ProductID, ProductName, UnitPrice FROM products WHERE UnitsInStock > 0 ORDER BY UnitPrice DESC LIMIT 1;","```sql
SELECT ProductName, UnitPrice 
FROM products 
WHERE UnitsInStock > 0 
ORDER BY UnitPrice DESC 
LIMIT 1;
```",Both queries return the product with the highest unit price currently in stock. The difference in selected columns (ProductID) does not affect the ability to identify the correct product per user question.,SELECT * FROM products WHERE UnitsInStock > 0 ORDER BY UnitPrice DESC LIMIT 1;,"The generated SQL query selects all columns, while the ground truth selects only ProductID, ProductName, and UnitPrice.",Base
Identify the top 3 employees with the fastest average fulfillment time.,"SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL GROUP BY EmployeeID ORDER BY AvgFulfillmentTime ASC LIMIT 3;","```sql
SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY EmployeeID
ORDER BY AverageFulfillmentTime
LIMIT 3;
```","The generated query does not exclude rows where ShippedDate is NULL, unlike the ground truth query.","SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgFulfillmentTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY AvgFulfillmentTime ASC LIMIT 3;","The generated query assumes there is a direct join between employees and orders tables, which might lead to incorrect results if not all employees have orders. The ground truth query directly queries the orders table without such assumptions and checks for non-null shipped dates.",None
What is the percentage of orders delivered on or before the required date each month?,"SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID)) AS OnTimeDeliveryRate FROM orders GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month,
    (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN orders.OrderID END) * 100.0 / COUNT(orders.OrderID)) AS On_time_Delivery_Rate
FROM 
    orders
GROUP BY 
    Month
```",Both queries calculate the percentage of orders delivered on or before the required date each month. They use different functions to extract the month from OrderDate but yield the same grouping by month and calculation of the percentage.,"SELECT EXTRACT(YEAR FROM Order_Date) AS year, EXTRACT(MONTH FROM Order_Date) AS month, (COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / NULLIF(COUNT(OrderID), 0)) AS on_time_delivery_rate FROM orders GROUP BY year, month;",Both queries calculate the percentage of orders delivered on or before the required date each month. They differ in syntax but achieve the same result: extracting the year and month to group by and calculating the percentage of on-time deliveries. The use of FILTER with COUNT in the generated SQL and CASE WHEN in the ground truth SQL are just different methods to achieve the same calculation.,both
Which region has the highest average order value?,"SELECT Region, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Region ORDER BY AverageOrderValue DESC LIMIT 1;","```sql
SELECT c.Region,
       AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue
FROM customers c
JOIN orders o ON c.CustomerID = o.CustomerID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.Region
ORDER BY AverageOrderValue DESC
LIMIT 1;
```","The generated SQL accurately calculates the average order value per region and limits to the highest one, similar to the ground truth query.","SELECT Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Region ORDER BY AverageOrderValue DESC LIMIT 1;","The generated query calculates the average order value by dividing the total value by the count of distinct orders, while the ground truth query uses the AVG function, computing the average value of individual order totals.",Base
List all products that have never been included in any order.,SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"```sql
SELECT p.ProductID, p.ProductName
FROM products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.ProductID IS NULL;
```",Both queries select products that are not referenced in the 'Order Details' table by ensuring products either don't join with any order or are not in a subquery of distinct ProductIDs from the 'Order Details'. The outcome is equivalent.,SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"The generated SQL query is identical to the ground truth query, and both accurately list products never included in any order by checking for ProductIDs not in the 'Order Details' table.",both
How does the product performance vary month by month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, ProductID, SUM(Quantity) AS TotalPerformance FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY Month, ProductID;","```sql
SELECT 
    DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month,
    p.ProductID,
    p.ProductName,
    SUM(od.Quantity) AS TotalQuantitySold
FROM 
    [Order Details] od
JOIN 
    products p ON od.ProductID = p.ProductID
JOIN 
    orders o ON od.OrderID = o.OrderID
GROUP BY 
    Month, p.ProductID, p.ProductName
ORDER BY 
    Month, p.ProductID;
```","The generated query includes 'ProductName' in the SELECT and GROUP BY clauses, which is not in the ground truth. Additionally, the date formatting functions (DATE_FORMAT vs. DATE_TRUNC) and the handling of tables (additional join with 'products') differ.","SELECT EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, od.ProductID, SUM(od.Quantity) AS ProductPerformance FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Year, Month, od.ProductID ORDER BY Year, Month, ProductID;","Both queries calculate product performance by month, summing quantities for each product. The difference is in how the month is extracted, but the results are equivalent.",FT
What is the total sales revenue generated for each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, 
    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Total_Sales
FROM 
    orders
JOIN 
    [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries calculate total sales revenue per month, using different functions to group and format the month. The logic for calculating total sales is identical.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(oc.UnitPrice * oc.Quantity * (1 - oc.Discount)) AS TotalSales FROM orders o JOIN [Order Details] oc ON o.OrderID = oc.OrderID GROUP BY Month;","The generated SQL query uses DATE_FORMAT, which is specific to MySQL, while the ground truth uses DATE_TRUNC, which is specific to PostgreSQL. This could lead to different implementations and results based on the SQL database used.",Base
What is the most popular product in terms of quantity sold in 2023?,"SELECT products.ProductName, SUM([Order Details].Quantity) AS total_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductName ORDER BY total_sold DESC LIMIT 1","```sql
SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity_sold
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY products.ProductID
ORDER BY total_quantity_sold DESC
LIMIT 1
```","The generated SQL query selects ProductID, while the ground truth query selects ProductName. This may result in different outputs if the ProductID and ProductName are not directly correlated.","SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductName ORDER BY total_quantity_sold DESC LIMIT 1",The generated SQL query accurately answers the user's question and yields the same results as the ground truth query. Both queries calculate the total quantity sold for each product in 2023 and return the most popular product. The differences in alias names for total quantity sold do not affect the output.,FT
Which shipping method is most frequently used for orders in 2023?,"SELECT ShipVia, COUNT(OrderID) AS shipping_count FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY ShipVia ORDER BY shipping_count DESC","```sql
SELECT ShipVia, COUNT(OrderID) AS order_count
FROM orders
WHERE YEAR(OrderDate) = 2023
GROUP BY ShipVia
ORDER BY order_count DESC
LIMIT 1;
```","The generated query uses 'LIMIT 1' to return only the most frequent shipping method, while the ground truth query does not limit results to just one.","SELECT ShipVia, COUNT(OrderID) FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY ShipVia ORDER BY COUNT(OrderID) DESC LIMIT 1;","The generated query uses LIMIT 1, potentially returning incomplete results if there is a tie for the most used method.",None
Determine the number of orders processed by each employee by year.,"SELECT employees.EmployeeID, YEAR(orders.OrderDate) AS OrderYear, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, YEAR(orders.OrderDate);","```sql
SELECT 
    employees.EmployeeID, 
    employees.FirstName, 
    employees.LastName, 
    YEAR(orders.OrderDate) AS OrderYear, 
    COUNT(orders.OrderID) AS NumberOfOrders
FROM 
    employees
JOIN 
    orders ON employees.EmployeeID = orders.EmployeeID
GROUP BY 
    employees.EmployeeID, 
    OrderYear
ORDER BY 
    employees.EmployeeID, 
    OrderYear;
```","Both queries correctly determine the number of orders processed by each employee by year. The generated query includes additional columns for employee first and last names, and sorts the results, but it doesn't affect the correctness in terms of the user's question.","SELECT YEAR(o.OrderDate) AS Year, e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY YEAR(o.OrderDate), e.EmployeeID;","Both queries group by EmployeeID and the year of the OrderDate to count the number of orders processed by each employee per year. The column order and aliases differ, but the logic and result set are equivalent.",both
Identify the employee responsible for orders with the highest freight costs.,"SELECT e.EmployeeID, e.FirstName, e.LastName, o.OrderID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.Freight = (SELECT MAX(Freight) FROM orders)","```sql
SELECT e.FirstName, e.LastName, o.Freight
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.Freight = (SELECT MAX(Freight) FROM orders);
```","The generated SQL query returns employee names and freight, while the ground truth returns employee details and order ID. The result content varies.",SELECT EmployeeID FROM orders WHERE Freight = (SELECT MAX(Freight) FROM orders) LIMIT 1;,"The generated query only returns the EmployeeID and imposes a LIMIT 1, possibly missing additional relevant employees. The ground truth query returns more details including employee names and order information without limiting the results.",None
Which product had the best performance in terms of quantity sold for the month of June 2023?,"SELECT products.ProductID, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = 6 AND YEAR(orders.OrderDate) = 2023 GROUP BY products.ProductID ORDER BY product_performance DESC LIMIT 1","```sql
SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity_sold 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
WHERE orders.OrderDate BETWEEN '2023-06-01' AND '2023-06-30' 
GROUP BY products.ProductID 
ORDER BY total_quantity_sold DESC 
LIMIT 1;
```","The generated query does not join with the 'products' table, which may affect the ability to correctly identify the ProductID. The condition for filtering dates is different, but it will yield the same date range for June 2023. However, this does not affect the final outcome since both will return the top product for June 2023.","SELECT od.ProductID, SUM(od.Quantity) AS total_quantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(MONTH FROM o.OrderDate) = 6 AND EXTRACT(YEAR FROM o.OrderDate) = 2023 GROUP BY od.ProductID ORDER BY total_quantity DESC LIMIT 1",Both queries correctly calculate the sum of quantities for products sold in June 2023 and identify the product with the highest total by ordering the results in descending order and limiting the output to one result. Differences in table aliases and column names do not affect the outcome.,FT
What is the average shipping cost per country?,"SELECT ShipCountry, AVG(Freight) AS AverageCost FROM orders GROUP BY ShipCountry;","```sql
SELECT ShipCountry, AVG(Freight) AS AverageShippingCost
FROM orders
GROUP BY ShipCountry;
```",Both queries calculate the average shipping cost (Freight) per country (ShipCountry) and group results by ShipCountry. Differences in alias naming do not affect the output.,"SELECT ShipCountry, AVG(Freight) AS avg_shipping_cost FROM orders GROUP BY ShipCountry;",Both queries calculate the average shipping cost per country by grouping on ShipCountry and using AVG(Freight). The difference is only in the alias names.,both
What is the total number of products shipped in the last month?,"SELECT SUM([Order Details].Quantity) FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.ShippedDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE();","```sql
SELECT SUM(OrderDetails.Quantity) AS TotalProductsShipped
FROM [Order Details] AS OrderDetails
JOIN orders AS Orders ON OrderDetails.OrderID = Orders.OrderID
WHERE Orders.ShippedDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);
```","The generated query doesn't include the end date 'CURDATE()' for the BETWEEN condition like the ground truth query, potentially excluding products shipped on the current date.","SELECT SUM(Quantity) FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE DATEPART(month, ShippedDate) = DATEPART(month, GETDATE()) - 1 AND DATEPART(year, ShippedDate) = DATEPART(year, GETDATE()));","The generated query uses DATEPART, which may not accurately capture the last month, especially if the current day is the first of the month. The ground truth query uses a safe range with BETWEEN to ensure the entire last month is covered.",None
What is the busiest shipping month based on total orders shipped?,"SELECT DATE_TRUNC('month', ShippedDate) AS Month, COUNT(OrderID) AS TotalOrders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month ORDER BY TotalOrders DESC LIMIT 1;","```sql
SELECT MONTH(OrderDate) AS ShippingMonth, COUNT(OrderID) AS TotalOrders
FROM orders
WHERE ShippedDate IS NOT NULL
GROUP BY MONTH(OrderDate)
ORDER BY TotalOrders DESC
LIMIT 1;
```","The generated SQL query groups by the month of OrderDate instead of ShippedDate, which does not align with the question's focus on shipping.","SELECT EXTRACT(MONTH FROM OrderDate) AS ShippingMonth, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShippingMonth ORDER BY OrderCount DESC LIMIT 1;",The generated query uses OrderDate instead of ShippedDate to determine the busiest shipping month.,None
Which employees have shipped orders late and by how many days on average?,"SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(DATEDIFF(o.ShippedDate, o.RequiredDate)) AS AvgLateDays FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate > o.RequiredDate GROUP BY e.EmployeeID, e.FirstName, e.LastName;","```sql
SELECT 
    e.EmployeeID,
    e.FirstName,
    e.LastName,
    AVG(DATEDIFF(o.ShippedDate, o.RequiredDate)) AS AverageLateDays
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
WHERE 
    o.ShippedDate > o.RequiredDate
GROUP BY 
    e.EmployeeID, e.FirstName, e.LastName;
```","Both SQL queries select the same data fields, apply the same filter condition, and group by the same columns, producing identical results.","SELECT e.FirstName, e.LastName, AVG(DATEDIFF(o.ShippedDate, o.RequiredDate)) AS AverageLateDays FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate > o.RequiredDate GROUP BY e.FirstName, e.LastName;",Both queries calculate the average late days for employees who shipped orders late by combining employee names with late shipment data. They differ only in the grouping columns. Including 'EmployeeID' helps avoid potential name duplications but doesn’t change the result for distinct names.,both
Find suppliers with a homepage listed in the suppliers table.,SELECT CompanyName FROM suppliers WHERE HomePage IS NOT NULL;,"```sql
SELECT SupplierID, CompanyName, HomePage
FROM suppliers
WHERE HomePage IS NOT NULL AND HomePage <> '';
```","The generated query selects SupplierID, CompanyName, and HomePage, whereas the ground truth query only selects CompanyName. Also, the generated query includes an additional condition to exclude empty strings, which is not present in the ground truth query.",SELECT CompanyName FROM suppliers WHERE HomePage IS NOT NULL;,Both queries are identical and accurately find suppliers with a homepage listed by checking if HomePage is not NULL.,FT
Which customers have generated the most revenue lifetime?,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC","```sql
SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value 
FROM [Order Details] 
JOIN orders ON [Order Details].OrderID = orders.OrderID 
JOIN customers ON orders.CustomerID = customers.CustomerID 
GROUP BY customers.CustomerID 
ORDER BY customer_lifetime_value DESC;
```",The generated SQL query and the ground truth query are functionally equivalent. Both calculate the total revenue for each customer using the same formula and order the results in descending order of revenue.,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC",The generated SQL query matches the ground truth SQL query exactly and will yield the same results.,both
What is the most popular shipping destination city?,"SELECT o.ShipCity, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipCity ORDER BY OrderCount DESC LIMIT 1","```sql
SELECT ShipCity, COUNT(OrderID) AS TotalOrders
FROM orders
GROUP BY ShipCity
ORDER BY TotalOrders DESC
LIMIT 1;
```","Both queries group the orders by ShipCity, count the number of orders for each city, and return the city with the highest count.","SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1;","Both queries count the number of orders for each ShipCity, group by ShipCity, order by the count in descending order, and limit the result to the top entry. They will yield the same result.",both
Which employee handled the most orders?,"SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries group by EmployeeID and order by the count descending, then limit the result to the top entry.","SELECT orders.EmployeeID, COUNT(orders.OrderID) AS TotalOrders FROM orders GROUP BY orders.EmployeeID ORDER BY TotalOrders DESC LIMIT 1;","Both queries count orders per employee and return the one with the most orders, using similar logic and syntax.",both
Calculate the total freight cost for orders shipped by each method.,"SELECT o.ShipVia, SUM(o.Freight) AS TotalFreightCost FROM orders o GROUP BY o.ShipVia;","```sql
SELECT ShipVia, SUM(Freight) AS TotalFreightCost
FROM orders
GROUP BY ShipVia;
```","Both queries calculate the total freight cost grouped by the shipping method, using the same logic and resulting in the same output.","SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;","Both queries calculate the total freight cost for each shipping method, using 'ShipVia' to group the results and 'SUM(Freight)' to aggregate the costs. The differences are only in aliasing, which does not affect the outcome.",both
Which customers have the highest retention rate over the past six months?,"SELECT c.CustomerID, COUNT(DISTINCT o.OrderID) * 100.0 / (SELECT COUNT(DISTINCT o2.OrderID) FROM orders o2 WHERE o2.CustomerID = c.CustomerID AND o2.OrderDate < DATEADD(month, -6, CURRENT_DATE)) AS RetentionRate FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate >= DATEADD(month, -6, CURRENT_DATE) GROUP BY c.CustomerID ORDER BY RetentionRate DESC","```sql
SELECT c.CustomerID, c.CompanyName, 
       COUNT(DISTINCT o1.CustomerID) AS ReturningCustomers,
       COUNT(DISTINCT o2.CustomerID) AS TotalCustomers,
       (COUNT(DISTINCT o1.CustomerID) * 1.0 / COUNT(DISTINCT o2.CustomerID)) AS RetentionRate
FROM customers c
JOIN orders o1 ON c.CustomerID = o1.CustomerID AND o1.OrderDate BETWEEN DATEADD(MONTH, -6, CURRENT_DATE) AND CURRENT_DATE
JOIN orders o2 ON c.CustomerID = o2.CustomerID AND o2.OrderDate < DATEADD(MONTH, -6, CURRENT_DATE)
GROUP BY c.CustomerID, c.CompanyName
ORDER BY RetentionRate DESC;
```","The generated query incorrectly joins orders twice and calculates 'ReturningCustomers' and 'TotalCustomers' based on distinct CustomerIDs, leading to counting issues. The ground truth correctly calculates retention as a percentage of past six months orders over previous periods.","SELECT CustomerID, COUNT(OrderID) AS RetainedOrders FROM orders WHERE OrderDate BETWEEN '2023-04-01' AND '2023-09-30' GROUP BY CustomerID HAVING COUNT(OrderID) > 1 ORDER BY RetainedOrders DESC;",The generated query counts orders in the last six months but doesn't calculate a retention rate. The ground truth calculates a retention rate based on distinct orders in the current and previous period.,None
How many products have more units on order than in stock?,SELECT COUNT(*) AS NumberOfProducts FROM products WHERE UnitsOnOrder > UnitsInStock;,"```sql
SELECT COUNT(*) AS ProductCount
FROM products
WHERE UnitsOnOrder > UnitsInStock;
```",Both queries count the number of products where UnitsOnOrder exceed UnitsInStock. The column alias difference doesn't affect the result.,SELECT COUNT(*) FROM products WHERE UnitsOnOrder > UnitsInStock;,"Both queries count the number of products where UnitsOnOrder is greater than UnitsInStock, yielding the same result.",both
What is the average freight cost for orders shipped to 'USA'?,SELECT AVG(Freight) FROM orders WHERE ShipCountry = 'USA';,"```sql
SELECT AVG(Freight) AS AverageFreightCost
FROM orders
WHERE ShipCountry = 'USA';
```",Both queries calculate the average freight cost for orders shipped to the USA. The difference in alias doesn't affect the result.,SELECT AVG(Freight) FROM orders WHERE ShipCountry = 'USA';,Both queries calculate the average freight cost for orders shipped to 'USA' by using the AVG function and filtering on ShipCountry = 'USA'.,both
What is the total sales revenue generated by each employee?,"SELECT o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID;","```sql
SELECT o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM orders o
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY o.EmployeeID
```","The generated SQL query and the ground truth query are functionally equivalent. Both compute the total sales revenue for each employee by summing the product of unit price, quantity, and discount for each order, grouped by EmployeeID.","SELECT o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID;",The generated SQL query is identical to the ground truth query and accurately answers the user's question.,both
What is the total number of products sold this quarter?,"SELECT SUM([Order Details].Quantity) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE);","```sql
SELECT SUM([Order Details].Quantity) AS TotalProductsSold
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE orders.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) 
  AND orders.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) + INTERVAL '3 months';
```","The generated query adds a condition to restrict OrderDate less than the start of the next quarter, while the ground truth does not.","SELECT SUM([Order Details].Quantity) AS total_products_sold FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE)",Both queries calculate the total number of products sold this quarter by summing up the 'Quantity' from '[Order Details]' and use the same condition for the quarter calculation.,FT
Which products are ordered more after being marked as 'discontinued'?,SELECT p.ProductName FROM products p WHERE p.Discontinued = 1 AND p.ProductID IN (SELECT od.ProductID FROM [Order Details] od WHERE od.Quantity > 0) ORDER BY p.ProductID;,"```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalOrdered
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE p.Discontinued = 1
GROUP BY p.ProductID, p.ProductName
HAVING SUM(od.Quantity) > 0
ORDER BY TotalOrdered DESC;
```","The generated query computes total order quantity for discontinued products and requires it to be greater than zero, while the ground truth checks if there are any orders (with non-zero quantity) for discontinued products. The queries differ in logic and output.","SELECT ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE products.Discontinued = 1 GROUP BY ProductName HAVING SUM([Order Details].Quantity) > (SELECT SUM([Order Details].Quantity) FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 0 AND p.ProductID = products.ProductID);","The generated query compares SUM of quantities for discontinued and non-discontinued products, but the ground truth checks if the product has any quantity ordered after being discontinued.",None
Which ship cities have the longest average order fulfillment times?,"SELECT ShipCity, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipCity ORDER BY AvgFulfillmentTime DESC;","```sql
SELECT ShipCity, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY ShipCity
ORDER BY AverageFulfillmentTime DESC;
```","Both queries calculate the average order fulfillment times per ShipCity and order the results in descending order. The differences are only in naming conventions, which do not affect the outcome.","SELECT ShipCity, AVG(TIMESTAMPDIFF(HOUR, OrderDate, ShippedDate)) AS AvgFulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipCity ORDER BY AvgFulfillmentTime DESC;","The generated SQL query calculates average fulfillment time in hours using TIMESTAMPDIFF, while the ground truth query uses DATEDIFF to calculate in days.",Base
List all suppliers who have never had a discontinuation in their products.,"SELECT SupplierID, CompanyName FROM suppliers WHERE SupplierID NOT IN (SELECT DISTINCT SupplierID FROM products WHERE Discontinued = 1);","```sql
SELECT DISTINCT s.*
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
GROUP BY s.SupplierID
HAVING SUM(p.Discontinued) = 0;
```",Both queries correctly identify suppliers who have never had a product discontinued. The generated query uses a HAVING clause to filter suppliers whose total count of discontinued products is zero. The ground truth query uses a subquery to exclude those with discontinued products. Both yield the same set of suppliers.,SELECT suppliers.CompanyName FROM suppliers WHERE NOT EXISTS (SELECT 1 FROM products WHERE suppliers.SupplierID = products.SupplierID AND products.Discontinued = 1);,"Both queries correctly identify suppliers with no products marked as discontinued. The first checks for non-existence of such products, while the second ensures suppliers are not in a list derived from discontinued products.",both
What is the total discount amount for each customer?,"SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;","```sql
SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID;
```","Both queries calculate the total discount for each customer by summing the product of UnitPrice, Quantity, and Discount from the Order Details table, grouped by CustomerID. They use equivalent joins and aggregations.","SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM customers INNER JOIN orders ON customers.CustomerID = orders.CustomerID INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;","Both queries calculate the total discount for each customer by joining the 'customers', 'orders', and 'Order Details' tables and grouping by CustomerID. The use of aliases doesn't affect the result.",both
Which customer has made the most purchases?,"SELECT CustomerID, COUNT(OrderID) AS PurchaseCount FROM orders GROUP BY CustomerID ORDER BY PurchaseCount DESC LIMIT 1;","```sql
SELECT CustomerID, COUNT(OrderID) AS TotalPurchases
FROM orders
GROUP BY CustomerID
ORDER BY TotalPurchases DESC
LIMIT 1;
```","Both queries group by CustomerID, count the OrderID to determine the number of purchases, and order the results in descending order to find the customer with the most purchases. They output the same result.","SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY CustomerID ORDER BY TotalOrders DESC LIMIT 1","Both queries aggregate OrderID by CustomerID, counting the number of orders per customer and limiting the result to the customer with the highest count.",both
Which supplier's products have the lowest average rating based on discounts given?,"SELECT products.SupplierID, AVG([Order Details].Discount) AS AverageDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.SupplierID ORDER BY AverageDiscount ASC LIMIT 1;","```sql
SELECT suppliers.CompanyName, AVG([Order Details].Discount) AS AvgDiscount
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
GROUP BY suppliers.CompanyName
ORDER BY AvgDiscount ASC
LIMIT 1;
```","The generated query selects the supplier's company name, while the ground truth selects SupplierID. Both queries calculate the lowest average discount, but they retrieve different columns.","SELECT suppliers.CompanyName, AVG([Order Details].Discount) AS AverageDiscount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY AverageDiscount ASC LIMIT 1;","The generated query returns the supplier's company name, but the ground truth query returns SupplierID. Therefore, the results are not identical.",None
Which employee handled the highest number of orders?,"SELECT EmployeeID, COUNT(OrderID) AS NumOrders FROM orders GROUP BY EmployeeID ORDER BY NumOrders DESC LIMIT 1;","```sql
SELECT EmployeeID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY EmployeeID
ORDER BY OrderCount DESC
LIMIT 1;
```",Both queries count the number of orders handled by each employee and return the employee with the highest count. The differences in alias naming do not affect the result.,"SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;","Both queries count the orders for each employee, group by EmployeeID, and order by the count in descending order, returning the top one, which adequately answers the question.",both
Get the top 3 cities with the highest number of suppliers.,"SELECT City, COUNT(SupplierID) AS NumSuppliers FROM suppliers GROUP BY City ORDER BY NumSuppliers DESC LIMIT 3;","```sql
SELECT City, COUNT(SupplierID) AS SupplierCount
FROM suppliers
GROUP BY City
ORDER BY SupplierCount DESC
LIMIT 3;
```","Both queries correctly retrieve the top 3 cities with the highest number of suppliers by counting SupplierID and sorting the count in descending order, then limiting the results to 3.","SELECT City, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY City ORDER BY SupplierCount DESC LIMIT 3","Both queries group by city, count suppliers, and order the results to select the top 3 cities, yielding the same results despite using different aliases.",both
What is the retention rate of customers over the past year?,"SELECT (COUNT(DISTINCT CustomerID) WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31') / NULLIF(COUNT(DISTINCT CustomerID) WHERE OrderDate < '2022-01-01', 0) * 100 AS RetentionRate FROM orders;","```sql
SELECT 
    (COUNT(DISTINCT o2.CustomerID) * 1.0 / NULLIF(COUNT(DISTINCT o1.CustomerID), 0)) AS RetentionRate
FROM 
    orders o1
LEFT JOIN 
    orders o2 ON o1.CustomerID = o2.CustomerID 
WHERE 
    o1.OrderDate < DATEADD(year, -1, CURRENT_DATE)
    AND o2.OrderDate BETWEEN DATEADD(year, -1, CURRENT_DATE) AND CURRENT_DATE
```","The generated query compares customers from the previous year to the year before, but the ground truth calculates retention for a fixed year (2022). The date handling and logic differ.","SELECT (COUNT(DISTINCT orders.CustomerID) FILTER (WHERE orders.OrderDate >= '2022-10-01' AND orders.OrderDate < '2023-10-01'))::FLOAT / NULLIF(COUNT(DISTINCT orders.CustomerID) FILTER (WHERE orders.OrderDate < '2022-10-01'), 0) AS year_retention_rate FROM orders WHERE orders.OrderDate < '2023-10-01'","The generated query uses a date range from '2022-10-01' to '2023-10-01', while the ground truth query uses the year 2022 ('2022-01-01' to '2022-12-31'). The queries calculate retention over different periods.",None
In which month did the highest average freight cost occur?,"SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(Freight) AS AvgFreight FROM orders GROUP BY Year, Month ORDER BY AvgFreight DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AvgFreight
FROM orders
GROUP BY Month
ORDER BY AvgFreight DESC
LIMIT 1;
```","The generated query groups by formatted month-year string without considering separate year and month values, while the ground truth query explicitly extracts and groups by year and month separately. This could lead to different results if there are multiple years of data with the same month.","SELECT EXTRACT(MONTH FROM orders.OrderDate) AS month, AVG(orders.Freight) AS avg_freight FROM orders GROUP BY EXTRACT(MONTH FROM orders.OrderDate) ORDER BY avg_freight DESC LIMIT 1","The generated query only groups by month, not considering the year like the ground truth query does.",None
Calculate the total revenue for each supplier.,"SELECT products.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID;","```sql
SELECT s.SupplierID, s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY s.SupplierID, s.CompanyName
```","Both queries calculate total revenue per supplier by summing product of UnitPrice, Quantity, and discount factor across orders, grouped by SupplierID.","SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SupplierRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName;","Both queries calculate the total revenue for each supplier by aggregating the order details and linking them to suppliers. Although the grouping is done by different columns (CompanyName vs SupplierID), the result will be the same if SupplierID is unique for each CompanyName.",both
What is the average order value per employee?,"SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;","```sql
SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID;
```","The generated SQL query and the ground truth query perform the same operations and calculations and will yield the same results. The only difference is stylistic, as the alias for the average order value is named slightly differently.","SELECT employees.EmployeeID, AVG(OrderValue) AS AverageOrderValue FROM (SELECT employees.EmployeeID, [Order Details].Quantity * [Order Details].UnitPrice AS OrderValue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID) AS EmployeeOrders GROUP BY employees.EmployeeID","The generated query does not account for discounts in calculating the order value, unlike the ground truth query.",Base
Calculate the total revenue per country.,"SELECT o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry;","```sql
SELECT customers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.Country;
```","The generated SQL query groups by 'customers.Country', while the ground truth query groups by 'orders.ShipCountry'. They may yield different results if the customer's country differs from the shipping country.","SELECT customers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.Country;","The generated query groups revenue by customers.Country, while the ground truth groups by orders.ShipCountry. Different fields may lead to different results.",None
Which month had the highest total sales and which employee contributed the most to it?,"SELECT SalesMonth, EmployeeID, TotalSales FROM (SELECT MONTH(o.OrderDate) AS SalesMonth, e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY SalesMonth, e.EmployeeID) AS MonthlySales ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT 
    DATE_FORMAT(o.OrderDate, '%Y-%m') AS SalesMonth,
    e.EmployeeID,
    e.FirstName,
    e.LastName,
    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM 
    employees e
JOIN 
    orders o ON e.EmployeeID = o.EmployeeID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    SalesMonth, e.EmployeeID
ORDER BY 
    SalesMonth, TotalSales DESC
LIMIT 1;
```","The generated query uses DATE_FORMAT to calculate SalesMonth which results in a year-month format, while the ground truth query uses the MONTH function. These may produce different grouping. Additionally, the generated query attempts to order by SalesMonth first, which doesn't align with the objective of finding the highest total sales.","SELECT EXTRACT(MONTH FROM o.OrderDate) AS SaleMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, e.EmployeeID FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN employees e ON o.EmployeeID = e.EmployeeID GROUP BY SaleMonth, e.EmployeeID ORDER BY SaleMonth, TotalSales DESC LIMIT 1;","Both queries attempt to identify the month with the highest sales and the employee who contributed the most. They group by month and employee, calculate total sales, and then order results to return the top record. The key operations match the user's question.",FT
What is the total freight cost assigned to each employee?,"SELECT e.FirstName, e.LastName, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(o.Freight) AS TotalFreight
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID, e.FirstName, e.LastName;
```","Both queries calculate the total freight cost per employee and group by EmployeeID, FirstName, and LastName, yielding the same results.","SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;","Both queries calculate the total freight cost for each employee. The generated query groups by EmployeeID and the ground truth query includes additional columns FirstName and LastName, but both yield the same aggregation result for total freight.",both
Which regions have the highest average order value?,"SELECT ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipRegion","```sql
SELECT ShipRegion, 
       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY ShipRegion
ORDER BY AverageOrderValue DESC;
```","The generated query includes an ORDER BY clause to sort the results, while the ground truth query does not. This difference affects the output explicitly requested by the user.","SELECT ShipRegion, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion ORDER BY AvgOrderValue DESC;","The generated query calculates the average per order line, while the ground truth calculates the total order value divided by the count of distinct orders.",None
Which supplier has the highest total sales for discontinued products?,"SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE products.Discontinued = TRUE GROUP BY suppliers.CompanyName ORDER BY total_sales DESC LIMIT 1","```sql
SELECT suppliers.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE products.Discontinued = 1
GROUP BY suppliers.SupplierID
ORDER BY total_sales DESC
LIMIT 1
```","The generated query uses SupplierID for grouping and output, while the ground truth query uses CompanyName. This may lead to different outputs if SupplierIDs are not unique to company names.","SELECT p.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS supplier_sales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1 GROUP BY p.SupplierID ORDER BY supplier_sales DESC LIMIT 1","The generated query returns SupplierID instead of CompanyName, which can lead to different results if SupplierID does not uniquely map to a CompanyName.",None
Which customers have the highest lifetime value?,"SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY LifetimeValue DESC;","```sql
SELECT customers.CustomerID, customers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID, customers.CompanyName
ORDER BY LifetimeValue DESC;
```","Both queries calculate the lifetime value of each customer by summing the total revenue from order details. The difference is that the generated query also retrieves the customers' company names, but this does not affect the calculation of the lifetime values or the ordering of results.","SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY lifetime_value DESC","Both queries calculate the lifetime value of each customer by summing up the order values, and they sort the results in descending order. The differences in the order of the JOIN statements do not affect the final result.",both
What is the average discount given on products in the last month?,"SELECT P.ProductName, AVG(OD.Discount) AS AverageDiscount FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID WHERE MONTH(OD.OrderID) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(OD.OrderID) = YEAR(CURDATE() - INTERVAL 1 MONTH) GROUP BY P.ProductName;","```sql
SELECT AVG(Discount) AS AverageDiscount
FROM [Order Details]
WHERE OrderID IN (
    SELECT OrderID
    FROM [Orders] -- Assuming there is an Orders table to join on and filter by date
    WHERE OrderDate >= DATEADD(MONTH, -1, GETDATE())
);
```",The generated query calculates the average discount for all orders within the last month without grouping by product. The ground truth query groups by product and calculates the average discount per product.,"SELECT AVG([Order Details].Discount) AS AvgDiscount FROM [Order Details] WHERE [Order Details].OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH));","The generated SQL query calculates the average discount across all applicable orders for the last month, but it does not join with the Products table or group by ProductName as the ground truth query does. Therefore, it won't yield the same results.",None
Identify customers with the longest time since their last order.,"SELECT o.CustomerID, DATEDIFF(CURRENT_DATE, MAX(o.OrderDate)) AS DaysSinceLastOrder FROM orders o GROUP BY o.CustomerID ORDER BY DaysSinceLastOrder DESC LIMIT 1;","```sql
SELECT 
    c.CustomerID, 
    c.CompanyName, 
    MAX(o.OrderDate) AS LastOrderDate, 
    DATEDIFF(CURRENT_DATE, MAX(o.OrderDate)) AS DaysSinceLastOrder
FROM 
    customers c
LEFT JOIN 
    orders o ON c.CustomerID = o.CustomerID
GROUP BY 
    c.CustomerID, c.CompanyName
ORDER BY 
    DaysSinceLastOrder DESC
```","The generated query includes customer details and lists all customers, while the ground truth query only identifies the customer with the maximum days since last order without providing customer details.","SELECT CustomerID, MAX(OrderDate) AS LastOrderDate FROM orders GROUP BY CustomerID ORDER BY LastOrderDate ASC LIMIT 1;","The generated query identifies the customer who has the most recent last order (by ordering ascending), whereas the ground truth identifies the customer with the longest time since the last order (by ordering descending).",None
What is the total number of products sold in the last quarter?,"SELECT SUM(od.Quantity) AS TotalProductsSold FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATEADD(quarter, -1, CURRENT_DATE);","```sql
SELECT SUM([Order Details].Quantity) AS TotalProductsSold
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
WHERE orders.OrderDate >= DATEADD(QUARTER, -1, GETDATE())
```","The generated SQL query uses GETDATE() which returns the current date and time, whereas the ground truth uses CURRENT_DATE, returning only the current date. This can lead to different results depending on the exact time of execution.",SELECT SUM(od.Quantity) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE() - INTERVAL 3 MONTH) AND QUARTER(o.OrderDate) = QUARTER(CURDATE() - INTERVAL 3 MONTH);,"The generated query checks the last quarter of the current or past years using QUARTER() and YEAR() functions, whereas the ground truth query calculates from the start of the previous quarter to now. These could yield different results depending on the current date.",None
How many orders were placed using each shipping method?,"SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY ShipVia;
```",Both queries calculate the number of orders per shipping method. The difference in alias names for the count does not affect the result.,"SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia;","The generated SQL query and the ground truth query are identical, both counting the number of orders per shipping method.",both
Determine which employee has the most shipments via the highest-cost freight method.,"SELECT o.EmployeeID, COUNT(o.OrderID) AS ShipmentCount FROM orders o WHERE o.Freight = (SELECT MAX(Freight) FROM orders) GROUP BY o.EmployeeID ORDER BY ShipmentCount DESC LIMIT 1;","```sql
SELECT e.FirstName, e.LastName, COUNT(o.OrderID) AS ShipmentCount
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
WHERE o.Freight = (SELECT MAX(Freight) FROM orders)
GROUP BY e.EmployeeID
ORDER BY ShipmentCount DESC
LIMIT 1;
```","Both queries correctly identify the employee with the most shipments using the highest-cost freight method by comparing the maximum freight value and counting the orders, although the generated query includes employee names in the output.","SELECT employees.EmployeeID, COUNT(orders.OrderID) AS ShipmentCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.Freight = (SELECT MAX(orders.Freight) FROM orders) GROUP BY employees.EmployeeID ORDER BY ShipmentCount DESC LIMIT 1","Both queries count the number of shipments by employee where the freight cost is the highest, and return the employee with the most shipments.",both
What is the most sold product in terms of quantity?,"SELECT ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY TotalQuantity DESC LIMIT 1;","```sql
SELECT ProductID, SUM(Quantity) AS TotalQuantity
FROM [Order Details]
GROUP BY ProductID
ORDER BY TotalQuantity DESC
LIMIT 1;
```","The generated query returns the ProductID, while the ground truth query returns the ProductName. Both queries determine the most sold product by quantity, but the output columns differ. They may yield the same 'TotalQuantity', but not the same representation of the product.","SELECT ProductID, SUM(Quantity) AS TotalSold FROM [Order Details] GROUP BY ProductID ORDER BY TotalSold DESC LIMIT 1;","The generated query only returns the ProductID, while the ground truth query returns the ProductName and includes a join with the products table to achieve this.",None
What is the product performance ranking for the last month?,"SELECT p.ProductName, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE MONTH(od.OrderDate) = MONTH(CURRENT_DATE) - 1 AND YEAR(od.OrderDate) = YEAR(CURRENT_DATE) GROUP BY p.ProductID, p.ProductName ORDER BY TotalSales DESC;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantity
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.OrderID IN (
    SELECT OrderID
    FROM [Order Details] 
    WHERE OrderDate >= DATEADD(month, -1, GETDATE())
)
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalQuantity DESC;
```","The generated query checks if the OrderID is in a subquery that uses DATEADD(month, -1, GETDATE()), resulting in a date range likely not covering the exact last month as the ground truth query which specifically checks for the previous month and year.","SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY products.ProductName ORDER BY TotalQuantity DESC","The generated query uses DATE_SUB to calculate a rolling one-month period, while the ground truth query specifically selects data from the last calendar month by checking both the month and year. This could lead to different results if the current day is not at the start of a new month.",None
What is the total value of the inventory currently in stock?,SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;,"```sql
SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue
FROM products
WHERE Discontinued = 0;
```","The generated query excludes discontinued products, whereas the ground truth query includes all products.",SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;,"Both queries calculate the total value of the inventory by summing up the product of UnitPrice and UnitsInStock from the products table, which accurately answers the user's question.",FT
Identify the orders that had a discount greater than 20%.,"SELECT DISTINCT orders.OrderID, [Order Details].Discount FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE [Order Details].Discount > 0.2;","```sql
SELECT *
FROM [Order Details]
WHERE Discount > 0.20;
```","The generated query selects all columns from 'Order Details', while the ground truth query selects distinct 'OrderID' from joined tables. They may yield different results.",SELECT OrderID FROM [Order Details] WHERE Discount > 0.2;,"Both queries effectively identify orders with a discount greater than 20%. The generated query returns only the `OrderID` from the `Order Details` where the condition is met, while the ground truth query includes an unnecessary join and selects `OrderID` and `Discount`. Both will yield `OrderID` of orders with discounts greater than 20%.",FT
What is the revenue growth compared to the previous month?,"SELECT ((SUM(CASE WHEN MONTH(od.OrderDate) = MONTH(CURRENT_DATE) THEN od.Quantity * od.UnitPrice ELSE 0 END) - SUM(CASE WHEN MONTH(od.OrderDate) = MONTH(CURRENT_DATE) - 1 THEN od.Quantity * od.UnitPrice ELSE 0 END)) / NULLIF(SUM(CASE WHEN MONTH(od.OrderDate) = MONTH(CURRENT_DATE) - 1 THEN od.Quantity * od.UnitPrice ELSE 0 END), 0)) * 100 AS RevenueGrowth FROM [Order Details] od WHERE YEAR(od.OrderDate) = YEAR(CURRENT_DATE);","```sql
SELECT 
    EXTRACT(YEAR FROM o.OrderDate) AS Year, 
    EXTRACT(MONTH FROM o.OrderDate) AS Month, 
    SUM(od.Quantity * od.UnitPrice) AS Revenue,
    LAG(SUM(od.Quantity * od.UnitPrice)) OVER (ORDER BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate)) AS PreviousMonthRevenue,
    (SUM(od.Quantity * od.UnitPrice) - LAG(SUM(od.Quantity * od.UnitPrice)) OVER (ORDER BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate))) AS RevenueGrowth
FROM 
    [Order Details] od
JOIN 
    Orders o ON od.OrderID = o.OrderID
GROUP BY 
    EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate)
ORDER BY 
    Year, Month;
```","The generated SQL calculates revenue growth for each month using LAG to compare with previous months, while the ground truth calculates the current versus previous month as of the current date.","SELECT MONTH(OrderDate) AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) - LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) OVER (ORDER BY MONTH(OrderDate)) AS RevenueGrowth FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY MONTH(OrderDate);","The generated query calculates the monthly revenue growth using LAG without considering edge cases like year change, while the ground truth query calculates the precise current month's and previous month's revenue growth with a percentage change that accounts for division by zero.",None
Calculate the percentage of customers who made more than one purchase.,SELECT (CAST(COUNT(*) AS FLOAT) / (SELECT COUNT(DISTINCT CustomerID) FROM orders)) * 100 AS ReturningCustomers FROM (SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 1) AS MultipleOrders;,"```sql
SELECT 
    (COUNT(DISTINCT CustomerID) FILTER (WHERE PurchaseCount > 1) * 100.0 / COUNT(DISTINCT CustomerID)) AS PercentageOfRepeatCustomers
FROM (
    SELECT 
        CustomerID, 
        COUNT(OrderID) AS PurchaseCount
    FROM 
        orders
    GROUP BY 
        CustomerID
) AS PurchaseCounts;
```",Both queries calculate the percentage of customers with more than one purchase by first determining the count of such customers and then dividing by the total number of distinct customers. The logic and outcome are equivalent.,SELECT COUNT(DISTINCT CustomerID) * 100.0 / (SELECT COUNT(DISTINCT CustomerID) FROM orders) AS RepeatCustomerPercentage FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 1;,"The generated SQL groups by CustomerID and calculates the percentage for each customer, which isn't correct. It incorrectly applies the calculation at the customer level. The ground truth query correctly calculates the overall percentage of customers making more than one purchase by first identifying such customers and then calculating their percentage against all customers.",Base
Which supplier contributed the most to total sales this year?,"SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY suppliers.SupplierID ORDER BY total_sales DESC LIMIT 1","```sql
SELECT products.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY products.SupplierID
ORDER BY total_sales DESC
LIMIT 1;
```","The generated query is missing a JOIN with the products table to link SupplierID, and does not include the suppliers table to get the supplier’s name. The date filter in the generated query also directly uses fixed dates instead of dynamically calculating the current year like in the ground truth query.","SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY suppliers.CompanyName ORDER BY TotalSales DESC LIMIT 1;","Both queries aim to find the supplier with the highest total sales for the current year. They correctly calculate total sales by joining the relevant tables and filtering using the current year. The difference in GROUP BY clause (CompanyName vs. SupplierID) does not affect the result, as they effectively group by supplier, and both use ORDER BY with LIMIT 1 to find the top supplier.",FT
Which products are responsible for the majority of sales revenue this month?,"SELECT p.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales_revenue FROM [Order Details] JOIN products p ON [Order Details].ProductID = p.ProductID JOIN orders o ON [Order Details].OrderID = o.OrderID WHERE EXTRACT(MONTH FROM o.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) AND EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY p.ProductName ORDER BY sales_revenue DESC","```sql
SELECT products.ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales
FROM [Order Details]
JOIN orders ON [Order Details].OrderID = orders.OrderID
JOIN products ON [Order Details].ProductID = products.ProductID
WHERE orders.OrderDate BETWEEN DATE_TRUNC('month', CURRENT_DATE) AND CURRENT_DATE
GROUP BY products.ProductID
ORDER BY total_sales DESC
```","The generated query uses DATE_TRUNC to filter by date, which may not capture all orders in the current month correctly, especially if CURRENT_DATE is not the last day of the month. The ground truth uses EXTRACT for both month and year, ensuring all orders in the current month are included. Additionally, the generated query uses products.ProductID instead of product name.","SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalProductSales FROM [Order Details] od WHERE od.OrderID IN (SELECT o.OrderID FROM orders o WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE)) GROUP BY od.ProductID ORDER BY TotalProductSales DESC;","The generated query outputs ProductID and the ground truth outputs ProductName. They may use different columns to represent products, affecting comparability.",None
Which month has the highest number of orders?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY Month ORDER BY TotalOrders DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY Month
ORDER BY OrderCount DESC
LIMIT 1;
```","The generated SQL query uses DATE_FORMAT, which is not ANSI SQL standard and may not work in all environments like DATE_TRUNC. Additionally, DATE_FORMAT returns a string, potentially causing sorting issues. The logic, however, is intended to achieve the same result.","SELECT EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, COUNT(o.OrderID) AS TotalOrders FROM orders o GROUP BY Year, Month ORDER BY TotalOrders DESC LIMIT 1;","Both queries aim to find the month with the highest number of orders. The generated query extracts year and month separately, while the ground truth truncates to the month. However, both lead to the same result as they group by month and order by total orders, returning the top month.",FT
What is the most frequently ordered product?,"SELECT products.ProductName, COUNT(*) AS OrderFrequency FROM [Order Details] INNER JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY OrderFrequency DESC LIMIT 1;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalOrdered
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalOrdered DESC
LIMIT 1;
```","The generated query sums quantities to determine frequency, while the ground truth counts occurrences.","SELECT ProductID, COUNT(OrderID) AS TimesOrdered FROM [Order Details] GROUP BY ProductID ORDER BY TimesOrdered DESC LIMIT 1;","Both queries aim to find the product ordered most frequently. The first returns ProductID with its order count, while the second returns ProductName with the order count. They differ in output detail but achieve the same goal regarding frequency.",FT
What is the total discount given on all products sold?,SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM [Order Details];,"```sql
SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS Total_Discount
FROM [Order Details];
```","Both queries calculate the total discount in the same way, using the same formula and table, differing only in alias naming.",SELECT SUM(Discount) FROM [Order Details];,"The generated SQL query sums the Discount column directly, assuming it contains total discounts. The ground truth query calculates discounts based on UnitPrice, Quantity, and Discount rate for each order detail, which is the accurate way to compute total discounts given.",Base
Identify orders that were delivered late compared to the required date.,SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;,"```sql
SELECT o.OrderID, o.OrderDate, o.RequiredDate, o.ShippedDate
FROM orders o
WHERE o.ShippedDate > o.RequiredDate;
```","Both queries identify orders delivered late by checking if ShippedDate is greater than RequiredDate. The generated query selects additional columns, but it doesn't affect identifying late orders.",SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;,"Both queries select OrderID from the orders table where ShippedDate is greater than RequiredDate, accurately identifying late deliveries.",both
How many distinct shipping recipients are there each month?,"SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(DISTINCT ShipName) AS DistinctRecipients FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');","```sql
SELECT 
    DATE_TRUNC('month', OrderDate) AS Month, 
    COUNT(DISTINCT ShipName) AS DistinctRecipients 
FROM 
    orders 
GROUP BY 
    Month 
ORDER BY 
    Month;
```","Both queries group by month and count distinct shipping recipients, yielding the same results despite different date formatting.","SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(DISTINCT ShipName) AS DistinctRecipients FROM orders GROUP BY Month;","Both queries calculate the number of distinct shipping recipients per month, only differing in the method of formatting the date.",both
"What is the total number of orders processed per employee, broken down by year?","SELECT e.EmployeeID, YEAR(o.OrderDate) AS Year, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, YEAR(o.OrderDate);","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, YEAR(o.OrderDate) AS Year, COUNT(o.OrderID) AS TotalOrders
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID, Year
ORDER BY Year, e.EmployeeID;
```","Both queries calculate the total number of orders processed per employee, grouped and broken down by year. The generated SQL query includes additional columns (FirstName and LastName) and an ORDER BY clause, but these do not affect the correctness of the total count grouped by employee and year.","SELECT E.EmployeeID, YEAR(O.OrderDate) AS Year, COUNT(O.OrderID) AS OrderCount FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID GROUP BY E.EmployeeID, YEAR(O.OrderDate);","Both queries achieve the same result, grouping the total number of orders per employee by year.",both
What is the average lead time for each supplier to deliver products?,"SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM products p JOIN orders o ON p.ProductID = o.OrderID GROUP BY p.SupplierID;","```sql
SELECT suppliers.SupplierID, suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN [Order Details] ON products.ProductID = [Order Details].ProductID
JOIN orders ON [Order Details].OrderID = orders.OrderID
GROUP BY suppliers.SupplierID, suppliers.CompanyName;
```","The generated query calculates the average lead time based on the supplier and also includes incorrect joins with the 'Order Details' table, making it more complex than needed. The ground truth query directly calculates average lead time for each supplier based on product IDs and order IDs without unnecessary joins.","SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.SupplierID;","The generated SQL query joins the 'Order Details' table, which is necessary for linking products to orders, whereas the ground truth query directly joins 'products' and 'orders' without using 'Order Details'. This could lead to different results if there are multiple order details per product.",None
What percentage of products are discontinued?,SELECT (COUNT(CASE WHEN Discontinued = 1 THEN 1 END) * 100.0 / COUNT(*)) AS DiscontinuedPercentage FROM products;,"```sql
SELECT (SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS DiscontinuedPercentage
FROM products;
```",Both queries calculate the percentage of discontinued products and yield the same results.,SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM products)) AS DiscontinuedPercentage FROM products WHERE Discontinued = 1;,Both queries correctly calculate the percentage of discontinued products by dividing the count of discontinued products by the total count of products.,both
Find the top 5 customers based on total order quantities.,"SELECT orders.CustomerID, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.CustomerID ORDER BY total_quantity DESC LIMIT 5;","```sql
SELECT customers.CustomerID, SUM([Order Details].Quantity) AS total_quantity
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY customers.CustomerID
ORDER BY total_quantity DESC
LIMIT 5
```","Both queries calculate total quantities for each customer by joining 'Order Details' to 'orders', and then group by 'CustomerID', ordering the results to get the top 5 customers. The 'customers' table join in the generated query is not necessary but does not change the result.","SELECT c.CustomerID, SUM(od.Quantity) AS TotalQuantity FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalQuantity DESC LIMIT 5;","Both queries correctly calculate the total order quantities per customer and order by this total in descending order, limiting the results to the top 5 customers. The differences in aliasing and aliases do not affect the outcome.",both
Which products are the most frequently ordered per month?,"SELECT p.ProductName, COUNT(od.OrderID) AS OrderFrequency, EXTRACT(MONTH FROM o.OrderDate) AS Month FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, EXTRACT(MONTH FROM o.OrderDate) ORDER BY OrderFrequency DESC;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalOrdered
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalOrdered DESC;
```","The generated query calculates the total quantity ordered per product, but does not consider monthly frequency. The ground truth query counts orders per product per month.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, ProductID, COUNT(OrderID) AS Frequency FROM orders GROUP BY Month, ProductID ORDER BY Frequency DESC;",The generated SQL query does not include product names and does not join with the products table. It counts orders only by product ID without identifying specific products like the ground truth query.,None
Calculate the on-time delivery rate for each shipping company in Q2 2023.,"SELECT shippers.CompanyName, SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / CAST(COUNT(orders.OrderID) AS DECIMAL) AS on_time_delivery_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY shippers.CompanyName","```sql
SELECT shippers.ShipperID, shippers.CompanyName, 
       COUNT(orders.OrderID WHERE orders.ShippedDate <= orders.RequiredDate) * 1.0 / COUNT(orders.OrderID) AS on_time_delivery_rate 
FROM orders 
JOIN shippers ON orders.ShipVia = shippers.ShipperID 
WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' 
GROUP BY shippers.ShipperID, shippers.CompanyName;
```",The generated SQL query contains a syntax error in the COUNT function. It uses 'COUNT(orders.OrderID WHERE ...)' which is incorrect syntax. The correct approach is to use CASE WHEN inside the aggregation as shown in the ground truth query.,"SELECT shippers.CompanyName, SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(orders.OrderID) AS on_time_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY shippers.CompanyName","Both queries calculate the on-time delivery rate using a similar logic. The generated query multiplies the result by 100.0 for percentage format, which is an acceptable difference and contextually matches the intent of finding a rate.",FT
How does the average shipping cost vary by shipper?,"SELECT shippers.CompanyName, AVG(orders.Freight) AS average_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName","```sql
SELECT shippers.ShipperID, shippers.CompanyName, AVG(orders.Freight) AS average_shipping_cost
FROM orders
JOIN shippers ON orders.ShipVia = shippers.ShipperID
GROUP BY shippers.ShipperID, shippers.CompanyName;
```","Both queries calculate the average shipping cost by shipper and utilize the same join logic. The only difference is the inclusion of 'ShipperID' in the SELECT and GROUP BY clauses, which does not affect the correctness of the result regarding average shipping cost by shipper.","SELECT ShipVia, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipVia ORDER BY ShipVia;","The generated query does not provide shipper names, only IDs. The ground truth query joins with the Shippers table to provide company names.",Base
Determine the customer retention rate for the last year.,SELECT (COUNT(DISTINCT o1.CustomerID) * 1.0 / COUNT(DISTINCT o2.CustomerID)) AS RetentionRate FROM orders o1 LEFT JOIN orders o2 ON o1.CustomerID = o2.CustomerID WHERE o1.OrderDate BETWEEN '2022-01-01' AND '2022-12-31';,"```sql
SELECT 
    (COUNT(DISTINCT o1.CustomerID) * 1.0 / NULLIF(COUNT(DISTINCT o2.CustomerID), 0)) AS CustomerRetentionRate
FROM 
    orders o1
JOIN 
    orders o2 ON o1.CustomerID = o2.CustomerID
WHERE 
    o1.OrderDate BETWEEN DATEADD(year, -1, GETDATE()) AND GETDATE()
    AND o2.OrderDate < DATEADD(year, -1, GETDATE())
```","The generated query uses current date functions to calculate the date range and checks for prior orders with different logic, potentially altering the retention definition. It also uses a JOIN which could affect results differently from the LEFT JOIN in the ground truth query.",SELECT (COUNT(DISTINCT CASE WHEN o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' THEN o.CustomerID END) / COUNT(DISTINCT CASE WHEN o.OrderDate < '2022-01-01' THEN o.CustomerID END)) * 100 AS RetentionRate FROM orders o;,"The generated query calculates the retention rate by dividing customers active last year by those active before last year, which doesn't accurately reflect retention. The ground truth calculates from customers active in both periods.",None
How many products have never been ordered?,SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);,"```sql
SELECT COUNT(*) AS NeverOrderedCount
FROM products
WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details])
```","Both queries identify products that have never been ordered, but the generated query counts them, which matches the user's requirement to know 'how many'.",SELECT (COUNT(products.ProductID) - COUNT(DISTINCT [Order Details].ProductID)) AS NeverOrdered FROM products;,"The generated query calculates the number of products that have never been ordered, while the ground truth query returns the names of these products. The result types differ: one gives a count, the other gives product names.",Base
Identify the correlation between product price and reorder level.,"SELECT ProductID, ProductName, (CAST(UnitPrice AS DOUBLE) / ReorderLevel) AS PriceToReorderRatio FROM products;","```sql
SELECT 
    p.UnitPrice, 
    p.ReorderLevel, 
    CORR(p.UnitPrice, p.ReorderLevel) AS correlation
FROM 
    products p
WHERE 
    p.Discontinued = 0
GROUP BY 
    p.UnitPrice, 
    p.ReorderLevel;
```","The generated SQL query calculates the correlation between UnitPrice and ReorderLevel, which aligns with the user's question. However, the ground truth query calculates a price-to-reorder ratio and does not address correlation, indicating different intents.","SELECT ProductID, ProductName, Price, ReorderLevel FROM products WHERE Price > ReorderLevel;","The generated query selects products where Price is greater than ReorderLevel, but it does not calculate the correlation as intended by the ground truth query, which computes a ratio for analysis.",None
What is the total revenue for each product considering discounts?,"SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
```","Both queries calculate the total revenue for each product considering discounts, differing only in the inclusion of ProductID in the GROUP BY clause, which doesn't affect the result since it's consistent with the data join logic.","SELECT ProductID, SUM(UnittPrice * Quantity * (1 - Discount)) AS TotalRevenue FROM [Order Details] GROUP BY ProductID;","The generated query groups by ProductID, missing the product names that the ground truth includes.",Base
Identify products with the highest unit price that have never been ordered.,SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]) ORDER BY UnitPrice DESC LIMIT 1;,"```sql
SELECT ProductID, ProductName, UnitPrice
FROM products
WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details])
ORDER BY UnitPrice DESC
LIMIT 1;
```","The generated SQL query selects additional columns (ProductID, UnitPrice) compared to the ground truth which only selects ProductName.","SELECT ProductName, UnitPrice FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]) ORDER BY UnitPrice DESC LIMIT 1;","The generated query selects both ProductName and UnitPrice, while the ground truth query selects only ProductName.",None
What percentage of orders have been delivered on or before the required date for each month?,"SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS OrderMonth, (CAST(SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) AS DECIMAL) / COUNT(*)) * 100 AS OnTimeDeliveryRate FROM orders GROUP BY OrderMonth;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) / COUNT(OrderID)) * 100 AS On_time_Delivery_Percentage
FROM 
    orders
GROUP BY 
    Month
```",Both queries calculate the percentage of orders delivered on or before the required date for each month. They format the date differently but achieve the same result.,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*)) AS OnTimeDeliveryRate FROM orders GROUP BY Month;","Both queries calculate the percentage of orders delivered on or before the required date for each month. They use similar logic to count the qualifying orders and divide by the total orders, grouping by the monthly format of OrderDate.",both
What is the distribution of orders among different shipping methods?,"SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY ShipVia;
```",Both queries calculate the distribution of orders by grouping them based on the 'ShipVia' column and counting the 'OrderID'. They are functionally identical and will yield the same results.,"SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia ORDER BY OrderCount DESC;","Both queries provide the distribution of orders among different shipping methods by grouping by ShipVia and counting OrderIDs. The generated query includes an ORDER BY clause for descending order, but it doesn't change the resulting counts.",both
What is the distribution of orders across different regions?,"SELECT c.Region, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.Region;","```sql
SELECT Region, COUNT(OrderID) AS OrderCount
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
GROUP BY Region;
```",Both queries calculate the order count per region by joining the 'customers' and 'orders' tables and grouping by the region.,"SELECT c.Region, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.Region;",Both the generated and ground truth queries are identical and accurately answer the user's question about the distribution of orders across regions.,both
Determine the total sales generated by discontinued products.,"SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1 GROUP BY p.ProductName;","```sql
SELECT SUM(OD.Quantity * OD.UnitPrice) AS TotalSales
FROM [Order Details] OD
JOIN products P ON OD.ProductID = P.ProductID
WHERE P.Discontinued = 1;
```","The generated query does not account for any discounts applied to the sales, whereas the ground truth query calculates total sales with discounts included.",SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1,"The generated query omits the discount factor in its calculation of total sales, whereas the ground truth query includes it.",None
Which employees have generated the highest sales in the past year?,"SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY TotalSales DESC LIMIT 5;","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE o.OrderDate >= DATEADD(YEAR, -1, GETDATE())
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY TotalSales DESC;
```","The generated SQL query does not limit the results to the top 5 employees by TotalSales, while the ground truth query includes a LIMIT 5 clause to return only the top 5.","SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2022-11-01' AND '2023-10-31' GROUP BY employees.EmployeeID ORDER BY total_sales DESC","The generated query excludes 'FirstName', 'LastName', and uses a fixed date range. It doesn't limit results to top 5 like the ground truth query.",None
Which months have the highest on-time delivery rates?,"SELECT DATE_TRUNC('month', ShippedDate) AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*)) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_TRUNC('month', ShippedDate) ORDER BY OnTimeDeliveryRate DESC LIMIT 3;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
       (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID)) AS OnTimeDeliveryRate
FROM orders
GROUP BY Month
ORDER BY OnTimeDeliveryRate DESC;
```","The queries have different date formatting functions and grouping approaches that may affect the results. The generated query uses DATE_FORMAT on OrderDate, while the ground truth uses DATE_TRUNC on ShippedDate. They might group by different months if OrderDate and ShippedDate are not closely aligned.","SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, (SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(*) * 100) AS OnTimePercentage FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY OnTimePercentage DESC;","The generated query groups by the order date, while the ground truth groups by the shipped date. This difference could lead to different results in terms of which month has the highest on-time delivery rate.",None
What is the percentage of products that are discontinued?,SELECT (COUNT(CASE WHEN Discontinued = 1 THEN 1 END) * 100.0 / COUNT(*)) AS DiscontinuedPercentage FROM products;,"```sql
SELECT 
    (SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS DiscontinuedPercentage
FROM 
    products;
```","Both queries calculate the percentage of discontinued products by dividing the count of discontinued products by the total number of products, yielding the same result.",SELECT (SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS DiscontinuedPercentage FROM products;,Both queries calculate the percentage of discontinued products by counting the number of products where Discontinued = 1 and dividing by the total product count. The use of SUM and COUNT in the first query achieves the same result as using COUNT with a CASE statement in the second query.,both
How does the quantity ordered vary by product?,"SELECT ProductID, AVG(Quantity) AS AvgQuantity FROM [Order Details] GROUP BY ProductID;","```sql
SELECT OrderDetails.ProductID, SUM(OrderDetails.Quantity) AS TotalQuantity
FROM [Order Details] AS OrderDetails
GROUP BY OrderDetails.ProductID
ORDER BY TotalQuantity DESC;
```","The generated query calculates the total quantity per product, while the ground truth query calculates the average quantity per product. These are different metrics.","SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID;","The generated SQL query calculates the total quantity ordered per product, while the ground truth query calculates the average quantity ordered per product. They provide different insights.",None
What is the average freight cost by shipping method?,"SELECT ShipVia, AVG(Freight) AS AverageFreightCost FROM orders GROUP BY ShipVia;","```sql
SELECT ShipVia, AVG(Freight) AS AverageFreightCost
FROM orders
GROUP BY ShipVia;
```","Both queries group the data by ShipVia and calculate the average freight cost, producing the same results.","SELECT ShipVia, AVG(Freight) FROM orders GROUP BY ShipVia;","Both queries group by 'ShipVia' and calculate the average of 'Freight', thus yielding the same results.",both
In which month did we have the highest total sales?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY OrderMonth ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
GROUP BY Month
ORDER BY TotalSales DESC
LIMIT 1;
```","The generated SQL and ground truth SQL produce the same output. They both group sales by month, calculate total sales, and return the month with the highest total sales. Minor differences in aliases do not affect the result.","SELECT EXTRACT(MONTH FROM OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month ORDER BY TotalSales DESC LIMIT 1;","The generated SQL groups sales by month only, while the ground truth groups by year and month, potentially leading to different interpretations of the period evaluated.",Base
Which supplier provides products with the lowest average unit price?,"SELECT s.CompanyName, AVG(p.UnitPrice) AS AvgUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName ORDER BY AvgUnitPrice ASC LIMIT 1;","```sql
SELECT s.SupplierID, s.CompanyName, AVG(p.UnitPrice) AS AverageUnitPrice
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
GROUP BY s.SupplierID, s.CompanyName
ORDER BY AverageUnitPrice ASC
LIMIT 1;
```","Both queries join suppliers with products, group by supplier, calculate the average unit price, and order ascending to find the lowest. Different column selection doesn't affect the result.",SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY AVG(products.UnitPrice) ASC LIMIT 1;,"Both queries correctly find the supplier with the lowest average unit price by joining suppliers and products tables, grouping by supplier name, calculating the average unit price, and ordering the results in ascending order before limiting to one result. The differences in aliases and column selection do not affect the outcome.",both
In which month was the average order fulfillment time the shortest?,"SELECT Month, AVG(FulfillmentTime) AS AvgFulfillmentTime FROM (SELECT DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTime, DATE_FORMAT(OrderDate, '%Y-%m') AS Month FROM orders) AS MonthlyFulfillment GROUP BY Month ORDER BY AvgFulfillmentTime ASC LIMIT 1;","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
       AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime
FROM orders
GROUP BY Month
ORDER BY AverageFulfillmentTime ASC
LIMIT 1;
```",Both queries calculate the average fulfillment time for each month and return the month with the shortest average fulfillment time. They use similar logic to achieve the same result.,"SELECT EXTRACT(MONTH FROM ShippedDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month ORDER BY AvgFulfillmentTime ASC LIMIT 1;","The generated query groups by the month extracted from the ShippedDate, while the ground truth groups by the month extracted from the OrderDate. This can lead to different results if orders and shipping span different months.",Base
What is the average time taken to fulfill an order each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month ORDER BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    AVG(DATEDIFF(ShippedDate, OrderDate)) AS Average_Fulfillment_Time
FROM 
    orders
GROUP BY 
    Month
```","The generated query may include null ShippedDate values in calculating the average, whereas the ground truth query filters them out with WHERE ShippedDate IS NOT NULL.","SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');","The generated query does not handle cases where ShippedDate is NULL, which the ground truth query filters out.",None
Identify the top 3 products with the highest sales revenue per unit.,"SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / SUM(od.Quantity) AS SalesRevenuePerUnit FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SalesRevenuePerUnit DESC LIMIT 3;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS RevenuePerUnit
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY RevenuePerUnit DESC
LIMIT 3;
```","The generated query calculates total revenue but does not divide it by the total quantity to get revenue per unit, unlike the ground truth query.","SELECT p.ProductID, p.ProductName, (SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) / SUM(od.Quantity)) AS PricePerUnit FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY PricePerUnit DESC LIMIT 3;","The generated query accounts for discounts in the revenue calculation, while the ground truth query does not include discounts. This difference could lead to different results.",None
How many orders have been placed by each customer?,"SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID;","```sql
SELECT CustomerID, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY CustomerID;
```",Both queries count the number of orders per customer using the same logic and grouping. The difference is only in the alias names for the count column.,"SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY CustomerID;",Both queries count the number of orders per customer by grouping on CustomerID. The column alias differs but does not affect the result.,both
What is the total freight cost for shipped orders last month?,SELECT SUM(Freight) AS TotalFreight FROM orders WHERE MONTH(ShippedDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(ShippedDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH);,"```sql
SELECT SUM(Freight) AS TotalFreightCost 
FROM orders 
WHERE ShippedDate >= DATE_FORMAT(NOW() - INTERVAL 1 MONTH, '%Y-%m-01') 
  AND ShippedDate < DATE_FORMAT(NOW(), '%Y-%m-01');
```","Both queries correctly calculate the total freight cost for shipped orders last month. The generated query uses date ranges to extract last month's freight, whereas the ground truth query uses MONTH() and YEAR() functions to achieve the same result.",SELECT SUM(o.Freight) AS TotalFreight FROM orders o WHERE YEAR(o.ShippedDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) AND MONTH(o.ShippedDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH);,Both queries calculate the total freight cost for orders shipped last month using the same logic and conditions.,both
How many orders were shipped late every month?,"SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(orders.ShippedDate, '%Y-%m') AS Month, 
    COUNT(orders.OrderID) AS LateOrders
FROM 
    orders
WHERE 
    orders.ShippedDate > orders.RequiredDate
GROUP BY 
    Month
```","Both queries accurately count the number of late orders by month using the same logic and conditions. They select the same fields, apply the correct filtering, and group the results by month.","SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY Month;","Both queries calculate the number of late orders per month by counting orders where the shipped date is later than the required date, using a monthly grouping.",both
What is the distribution of orders by shipping country?,"SELECT ShipCountry, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCountry ORDER BY OrderCount DESC;","```sql
SELECT ShipCountry, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY ShipCountry;
```","Both queries answer the user's question by showing the count of orders grouped by shipping country. The only difference is the ordering, which does not affect the main request for distribution.","SELECT ShipCountry, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCountry ORDER BY OrderCount DESC;","The generated SQL query is identical to the ground truth SQL query and accurately answers the user's question by providing the count of orders grouped by the shipping country, ordered by order count in descending order.",both
How many orders were placed each month?,"SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');","```sql
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, COUNT(OrderID) AS TotalOrders
FROM orders
GROUP BY OrderMonth
ORDER BY OrderMonth;
```","Both queries group by formatted month of the OrderDate and count OrderIDs, making them functionally equivalent, though column names differ.","SELECT MONTH(orders.OrderDate) AS order_month, COUNT(*) AS orders_count FROM orders GROUP BY MONTH(orders.OrderDate)","The generated SQL query groups by month without the year, which can combine data from different years if they have the same month. The ground truth query groups by both year and month.",Base
Which products have the highest unit price and are currently discontinued?,SELECT ProductName FROM products WHERE Discontinued = 1 ORDER BY UnitPrice DESC LIMIT 5;,"```sql
SELECT ProductName, UnitPrice
FROM products
WHERE Discontinued = 1
ORDER BY UnitPrice DESC;
```","The generated query does not limit the number of results, whereas the ground truth limits the results to 5. Additionally, the generated query selects both ProductName and UnitPrice, while the ground truth selects only ProductName.",SELECT ProductName FROM products WHERE Discontinued = 1 ORDER BY UnitPrice DESC LIMIT 1;,"The generated query returns only 1 product, while the ground truth query returns 5 products with the highest unit price.",None
What percentage of products are currently on order?,SELECT COUNT(DISTINCT ProductID) * 100.0 / (SELECT COUNT(ProductID) FROM products) AS PercentageOnOrder FROM [Order Details] WHERE Quantity > 0;,"```sql
SELECT 
    (COUNT(CASE WHEN UnitsOnOrder > 0 THEN 1 END) * 100.0 / COUNT(*)) AS PercentageOnOrder
FROM 
    products;
```","The queries pull data from different tables: 'products' vs '[Order Details]', and they use different conditions to calculate products on order.",SELECT (CAST(COUNT(*) AS DECIMAL) / (SELECT COUNT(*) FROM products)) * 100 AS percentage_on_order FROM products WHERE UnitsOnOrder > 0;,"The generated query calculates the percentage of products with UnitsOnOrder from the products table, while the ground truth query calculates the percentage of distinct ProductID in the Order Details where Quantity is greater than 0. The tables and conditions queried are different.",None
Which orders have the highest discount applied?,"SELECT OrderID, Discount FROM [Order Details] ORDER BY Discount DESC LIMIT 5","```sql
SELECT orders.OrderID, [Order Details].ProductID, [Order Details].UnitPrice, [Order Details].Quantity, [Order Details].Discount
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
ORDER BY [Order Details].Discount DESC
LIMIT 10;
```","The generated query includes additional columns and a different table join, and it limits the results to 10 instead of 5.","SELECT OrderID, ProductID, Discount FROM [Order Details] ORDER BY Discount DESC LIMIT 5;","The generated SQL query includes the 'ProductID' column in the selection, which is not present in the ground truth query. However, it does not affect the order of results.",None
Which supplier has the highest total sales revenue?,"SELECT p.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.SupplierID ORDER BY TotalSales DESC LIMIT 1;","```sql
SELECT s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM suppliers s
JOIN products p ON s.SupplierID = p.SupplierID
JOIN [Order Details] od ON p.ProductID = od.ProductID
JOIN orders o ON od.OrderID = o.OrderID
GROUP BY s.SupplierID, s.CompanyName
ORDER BY TotalSales DESC
LIMIT 1;
```","Both queries calculate the total sales for each supplier and return the supplier with the highest sales. The generated query includes the supplier's company name, while the ground truth query does not, but they produce the same result regarding the supplier with the highest sales.","SELECT products.SupplierID, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.SupplierID ORDER BY TotalSales DESC LIMIT 1;","Both queries calculate the total sales revenue for each supplier by joining the 'products' and 'Order Details' tables and calculating the sum of product of 'UnitPrice', 'Quantity', and adjusted discount. The additional join with 'orders' in the ground truth query does not affect the result for total sales as it doesn't alter the aggregated calculation.",both
Which suppliers provide the most products that are currently low in stock?,"SELECT suppliers.SupplierID, suppliers.SupplierName, COUNT(products.ProductID) AS LowStockProducts FROM suppliers INNER JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsInStock < products.ReorderLevel GROUP BY suppliers.SupplierID, suppliers.SupplierName;","```sql
SELECT SupplierID, COUNT(ProductID) AS LowStockCount
FROM products
WHERE UnitsInStock < ReorderLevel
GROUP BY SupplierID
ORDER BY LowStockCount DESC;
```",The generated query does not include SupplierName and may not handle cases where multiple suppliers have the same SupplierID.,"SELECT suppliers.CompanyName, COUNT(products.ProductID) AS low_stock_count FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE products.UnitsInStock < products.ReorderLevel GROUP BY suppliers.CompanyName ORDER BY low_stock_count DESC","Both queries calculate the number of products provided by each supplier that are low in stock (UnitsInStock < ReorderLevel). The results differ only in column naming and sorting, but fundamentally answer the same question.",FT
What is the total number of orders shipped each month?,"SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS ShipMonth, COUNT(OrderID) AS OrderCount FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipMonth;","```sql
SELECT 
    DATE_FORMAT(ShippedDate, '%Y-%m') AS Month,
    COUNT(OrderID) AS TotalOrders
FROM 
    orders
WHERE 
    ShippedDate IS NOT NULL
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries generate the same results by counting orders shipped each month, only differing in alias names and ordering.","SELECT DATE_TRUNC('month', ShippedDate) AS Month, COUNT(OrderID) AS OrderCount FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month;","Both queries accurately group orders by month and count the total number of orders shipped. They use different functions to extract the month from ShippedDate (DATE_TRUNC vs DATE_FORMAT), but both achieve the same result.",both
Find the top three customers by the number of orders placed.,"SELECT CustomerID, COUNT(*) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 3;","```sql
SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY CustomerID
ORDER BY NumberOfOrders DESC
LIMIT 3;
```","Both queries count the number of orders per customer, order results by the count in descending order, and limit the output to the top three customers. They are functionally equivalent.","SELECT CustomerID, COUNT(OrderID) FROM orders GROUP BY CustomerID ORDER BY COUNT(OrderID) DESC LIMIT 3;","Both queries aim to find the top three customers ranked by the total number of orders placed. The 'Generated SQL Query' uses COUNT(OrderID) while the 'Ground Truth SQL Query' uses COUNT(*), but both effectively calculate the same count of orders since orders are uniquely identified by OrderID. Therefore, both queries yield the same result.",both
Determine the monthly product performance based on sales.,"SELECT products.ProductID, DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductID, DATE_TRUNC('month', orders.OrderDate) ORDER BY TotalQuantity DESC;","```sql
SELECT 
    YEAR(OrderDate) AS Year,
    MONTH(OrderDate) AS Month,
    p.ProductID,
    p.ProductName,
    SUM(od.Quantity) AS TotalQuantity
FROM 
    products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
JOIN 
    Orders o ON od.OrderID = o.OrderID
GROUP BY 
    YEAR(OrderDate), MONTH(OrderDate), p.ProductID, p.ProductName
ORDER BY 
    Year, Month, p.ProductID;
```","The generated query includes product name and orders the results by year, month, and product ID. The ground truth query does not include product name and orders by total quantity in descending order.","SELECT p.ProductName, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS Performance FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, EXTRACT(MONTH FROM o.OrderDate);","The generated query extracts the month but does not truncate the date. It also uses ProductName instead of ProductID, leading to different grouping and potential discrepancies in the results.",None
How many orders have not yet been shipped?,SELECT COUNT(OrderID) AS UnshippedOrders FROM orders WHERE ShippedDate IS NULL,"```sql
SELECT COUNT(*) AS UnshippedOrders
FROM orders
WHERE ShippedDate IS NULL;
```","Both queries count the number of orders where the ShippedDate is NULL, which accurately addresses the user's question.",SELECT COUNT(*) FROM orders WHERE ShippedDate IS NULL;,"Both queries count the orders where ShippedDate is NULL, thus yielding the same result.",both
What is the most popular product category based on the number of unique customers?,"SELECT categories.CategoryName, COUNT(DISTINCT orders.CustomerID) AS unique_customers FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY unique_customers DESC LIMIT 1","```sql
SELECT categories.CategoryID, COUNT(DISTINCT orders.CustomerID) AS unique_customers
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID
JOIN products ON [Order Details].ProductID = products.ProductID
JOIN categories ON products.CategoryID = categories.CategoryID
GROUP BY categories.CategoryID
ORDER BY unique_customers DESC
LIMIT 1
```","The generated query selects CategoryID instead of CategoryName, which may not accurately reflect the most 'popular' category requested by the user.","SELECT categories.CategoryName, COUNT(DISTINCT products.ProductID) AS UniqueCustomers FROM products JOIN categories ON products.CategoryID = categories.CategoryID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY categories.CategoryName ORDER BY UniqueCustomers DESC LIMIT 1;",The generated query counts distinct product IDs instead of distinct customer IDs to determine popularity.,None
What is the average discount given per order?,SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details],"```sql
SELECT AVG([Order Details].Discount) AS Average_Discount_Per_Order
FROM orders
JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID;
```","The generated query averages discount by joining Orders and Order Details, potentially duplicating discounts if there are multiple order-item pairs. The ground truth calculates the average directly from Order Details, which likely yields a different result.",SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details];,Both queries calculate the average discount from the [Order Details] table and will yield the same result.,FT
How many orders were fulfilled on time each month?,"SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(*) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month,
    COUNT(orders.OrderID) AS OnTimeOrders
FROM 
    orders
WHERE 
    orders.ShippedDate <= orders.RequiredDate
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries correctly count orders fulfilled on time each month by comparing ShippedDate and RequiredDate, and the differences in date format functions do not affect the result.","SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) AS OnTimeOrders FROM orders GROUP BY Month;","Both queries correctly count the number of orders fulfilled on time each month. The logic and filtering conditions used to determine if an order was on time are the same, ensuring equivalent results.",both
Calculate the Product Performance for each product over the last year.,"SELECT p.ProductID, SUM(od.Quantity) AS TotalPerformance FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY p.ProductID;","```sql
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
WHERE od.OrderID IN (SELECT OrderID FROM Orders WHERE OrderDate >= DATEADD(year, -1, GETDATE()))
GROUP BY p.ProductID, p.ProductName
```","The generated query calculates sales over the last year by using 'Orders' table's 'OrderDate', not 'Order Details'. It also includes 'ProductName', which is not required by the ground truth query.","SELECT products.ProductName, SUM([Order Details].Quantity) AS performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY products.ProductID, products.ProductName","The generated query returns the product name while the ground truth query returns the product ID. They also group by different columns, which can change the grouping behavior.",None
How does the distribution of sales by region compare?,"SELECT employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Sales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Region","```sql
SELECT e.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY e.Region
ORDER BY TotalSales DESC;
```","Both queries calculate the total sales by region and group the results by the 'Region' column of the employees table. The generated query includes an ORDER BY clause to sort the results by total sales, but this does not affect the correctness of the query relative to the user's question.","SELECT ShipRegion, SUM(Freight) OVER (PARTITION BY ShipRegion) AS RegionSales FROM orders;","The generated query uses Freight for sales instead of calculating sales from UnitPrice, Quantity, and Discount. It uses ShipRegion from orders, not comparing employee-related regions.",Base
Which products have exceeded the reorder level?,SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,"```sql
SELECT ProductID, ProductName, UnitsInStock, ReorderLevel
FROM products
WHERE UnitsInStock > ReorderLevel;
```","The generated query checks for products where UnitsInStock is greater than ReorderLevel, while the ground truth checks for UnitsInStock less than ReorderLevel. The logic is inverted.",SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;,Both queries are identical and correctly fetch products where the UnitsInStock is less than ReorderLevel.,FT
Find the employee with the largest number of orders with discounts.,"SELECT employees.EmployeeID, COUNT(orders.OrderID) AS DiscountedOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE [Order Details].Discount > 0 GROUP BY employees.EmployeeID ORDER BY DiscountedOrders DESC LIMIT 1","```sql
SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS NumberOfOrders
FROM employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
JOIN [Order Details] od ON o.OrderID = od.OrderID
WHERE od.Discount > 0
GROUP BY e.EmployeeID
ORDER BY NumberOfOrders DESC
LIMIT 1
```",Both queries count the number of orders with discounts for each employee and return the employee with the highest count. The discrepancies in naming conventions do not affect the logic or results.,"SELECT emp_id, COUNT(DISTINCT o.OrderID) AS discounted_orders FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0 GROUP BY emp_id ORDER BY discounted_orders DESC LIMIT 1","Both queries aim to find the employee with the most orders that have discounts. They join the 'orders' and 'Order Details' tables and filter orders with discounts. The counting is performed based on orders with discounts and grouped by employee ID, then sorted to get the highest count, limited to one result. The generated query uses 'emp_id', assuming it is equivalent to 'employees.EmployeeID', which matches the logic of the ground truth.",both
Which supplier has the shortest average lead time for deliveries?,"SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC LIMIT 1","```sql
SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_lead_time 
FROM orders 
JOIN products ON orders.OrderID = products.ProductID 
GROUP BY products.SupplierID 
ORDER BY average_lead_time ASC 
LIMIT 1;
```","The generated SQL query incorrectly joins 'orders' and 'products' directly and uses 'products.ProductID'. It should join through 'Order Details' using 'OrderID' and 'ProductID'. Also, it does not join with 'suppliers' to get 'SupplierID', which may lead to incorrect results.","SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY average_lead_time ASC LIMIT 1",Both queries calculate the average lead time per supplier and return the supplier with the shortest lead time. The difference in selected columns (CompanyName vs. SupplierID) does not affect the accuracy of answering the user's question.,FT
How many orders were placed in each month of the year?,"SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) FROM orders GROUP BY Month ORDER BY Month;","```sql
SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) AS OrderCount
FROM orders
GROUP BY Year, Month
ORDER BY Year, Month;
```","The generated query groups by both year and month, giving order counts for each month of each year, while the ground truth query groups by month only, giving total order counts per month across all years.","SELECT DATE_TRUNC('month', OrderDate) AS OrderMonth, COUNT(OrderID) AS OrderCount FROM orders GROUP BY OrderMonth;","The generated query groups by full date values truncated to the month but retains the year information, whereas the ground truth extracts only the month number, not considering the year. The results differ if there are multiple years in the data.",None
Which customer placed the most orders in 2022?,"SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = 2022 GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT CustomerID, COUNT(OrderID) AS OrderCount
FROM orders
WHERE YEAR(OrderDate) = 2022
GROUP BY CustomerID
ORDER BY OrderCount DESC
LIMIT 1;
```","Both queries accurately filter orders by year 2022, group by CustomerID, count the orders, and return the customer with the most orders. They differ only in the method to extract the year from OrderDate, but achieve the same result.",SELECT orders.CustomerID FROM orders WHERE YEAR(orders.OrderDate) = 2022 GROUP BY orders.CustomerID ORDER BY COUNT(orders.OrderID) DESC LIMIT 1,"Both queries find the customer with the most orders in 2022 by grouping by CustomerID and ordering by the count of OrderID. The methods to extract the year from OrderDate differ (YEAR vs EXTRACT), but both accomplish the same task.",both
Which city has received the highest number of shipments year-to-date?,"SELECT ShipCity, COUNT(*) AS Shipments FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 1;","```sql
SELECT ShipCity, COUNT(OrderID) AS ShipmentCount
FROM orders
WHERE ShippedDate >= DATE_FORMAT(CURDATE(), '%Y-01-01')
GROUP BY ShipCity
ORDER BY ShipmentCount DESC
LIMIT 1;
```","The generated query uses ShippedDate to determine the current year's shipments, while the ground truth query uses OrderDate. The results may differ if these dates are not aligned.","SELECT ShipCity, COUNT(OrderID) AS Shipments FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-09-30' GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 1;","The generated query uses a fixed date range, while the ground truth query dynamically extracts the current year, which may result in differing results if the current year is not 2023.",None
Which month had the highest number of orders shipped?,"SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderCount FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month ORDER BY OrderCount DESC LIMIT 1;","```sql
SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, COUNT(OrderID) AS NumberOfOrders
FROM orders
GROUP BY Month
ORDER BY NumberOfOrders DESC
LIMIT 1;
```","The generated query does not filter out NULL values in ShippedDate, unlike the ground truth query, which could lead to different results.","SELECT EXTRACT(MONTH FROM ShippedDate) AS ShippedMonth, COUNT(OrderID) AS TotalOrders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShippedMonth ORDER BY TotalOrders DESC LIMIT 1;","The generated query groups by month only, whereas the ground truth groups by year and month. This may yield different results if there are multiple years of data.",None
Identify the peak order day of the week for each month.,"SELECT EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, DAYNAME(o.OrderDate) AS OrderDay, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY OrderMonth, OrderDay ORDER BY OrderMonth, OrderCount DESC;","```sql
SELECT 
    EXTRACT(YEAR FROM OrderDate) AS OrderYear,
    EXTRACT(MONTH FROM OrderDate) AS OrderMonth,
    EXTRACT(DOW FROM OrderDate) AS DayOfWeek,
    COUNT(OrderID) AS OrderCount
FROM 
    orders
GROUP BY 
    OrderYear, OrderMonth, DayOfWeek
ORDER BY 
    OrderYear, OrderMonth, OrderCount DESC;
```","The generated query groups by year, month, and day of week and orders by year, month, then count. It does not identify the peak order day directly. The ground truth groups by month and day and orders by month and count, more aligned with identifying the peak day of the week for each month.","SELECT EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, DAYNAME(o.OrderDate) AS DayOfWeek, COUNT(*) AS OrderCount FROM orders o GROUP BY Year, Month, DAYNAME(o.OrderDate) HAVING OrderCount = (SELECT MAX(sub.OrderCount) FROM (SELECT EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, DAYNAME(o.OrderDate) AS DayOfWeek, COUNT(*) AS OrderCount FROM orders o GROUP BY Year, Month, DAYNAME(o.OrderDate)) sub WHERE sub.Year = Year AND sub.Month = Month);","The generated query aims to find the peak order day for each month by filtering days with maximum order count using a subquery. The ground truth query lists days of the week with order counts for each month without singling out the peak day, hence it does not answer the user's question.",None
How many orders have zero freight cost?,SELECT COUNT(OrderID) AS FreeShippingOrders FROM orders WHERE Freight = 0;,"```sql
SELECT COUNT(OrderID) AS ZeroFreightOrders
FROM orders
WHERE Freight = 0;
```",Both queries calculate the count of orders with zero freight cost and will yield the same results despite different alias names.,SELECT COUNT(OrderID) FROM orders WHERE Freight = 0;,"Both queries count the number of orders where Freight is zero, they produce the same result despite different SELECT statement formats.",both
How many orders were shipped late each month?,"SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(OrderID) AS LateShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY Month;","```sql
SELECT 
    DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
    COUNT(OrderID) AS LateOrdersCount
FROM 
    orders
WHERE 
    ShippedDate > RequiredDate
GROUP BY 
    Month
ORDER BY 
    Month;
```","Both queries count the number of orders shipped late for each month by comparing ShippedDate and RequiredDate, group by month format derived from OrderDate and return identical results.","SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY DATE_TRUNC('month', OrderDate);","Both queries count orders shipped late by month and group by the truncated month of the OrderDate. The generated SQL uses DATE_TRUNC while the ground truth uses TO_CHAR for month formatting, but the results are equivalent.",both
Find the products with the highest average order quantity.,"SELECT p.ProductName, AVG(od.Quantity) AS AvgOrderQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY AvgOrderQuantity DESC;","```sql
SELECT p.ProductID, p.ProductName, AVG(od.Quantity) AS AverageOrderQuantity
FROM products p
JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY AverageOrderQuantity DESC
LIMIT 1;
```","The generated query uses LIMIT 1 to return only the top product with the highest average order quantity, while the ground truth query does not limit the results and can return multiple products with the same highest average.","SELECT products.ProductName, AVG([Order Details].Quantity) AS average_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY average_quantity DESC","The generated SQL query accurately answers the user's question and yields the same results as the ground truth query. The two queries are functionally equivalent, differing only in alias naming and spacing.",FT
Identify markets (country or region) with the highest average freight cost.,"SELECT COALESCE(ShipRegion, ShipCountry) AS Market, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY Market ORDER BY AvgFreightCost DESC LIMIT 1;","```sql
SELECT ShipCountry AS Market, AVG(Freight) AS AverageFreight
FROM orders
GROUP BY ShipCountry
ORDER BY AverageFreight DESC
LIMIT 1
```","The generated query only considers ShipCountry as the market, while the ground truth considers either ShipRegion or ShipCountry as the market using COALESCE.","SELECT ShipCountry, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipCountry ORDER BY AvgFreight DESC LIMIT 1;","The generated SQL query only groups by ShipCountry, whereas the ground truth query groups by either ShipRegion or ShipCountry, giving a broader definition of a market.",None
