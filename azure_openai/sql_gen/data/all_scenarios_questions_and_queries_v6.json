{
    "Order Analysis": {
        "questions": [
            "What is the total sales revenue for the past month?",
            "How many orders were placed by each customer last quarter?",
            "What is the average order value for each month in the past year?",
            "How many orders were delivered on time in the last six months?",
            "What is the distribution of order fulfillment time by month?",
            "Which employees handled the most orders in the last month?",
            "Identify the top 5 products by sales in the last quarter.",
            "What is the average freight cost per shipped order by country?",
            "How many orders were made with a discount in the past year?",
            "Which shipping methods are used most frequently?",
            "What is the total number of orders shipped late each month?",
            "Find the total sales per product category for the current year.",
            "How much revenue was generated by each employee in the past quarter?",
            "What are the top 3 regions by total number of orders?",
            "Calculate the order fulfillment time for each customer.",
            "What percentage of orders have a discount greater than 10%?",
            "Identify the peak order day of the week for each month.",
            "How many unique products were sold in each month last year?",
            "How has the on-time delivery rate changed over the last year?",
            "What is the highest single order value recorded?",
            "What is the total sales for each month?",
            "Which customer placed the highest number of orders?",
            "What is the average order value per month?",
            "How many orders were delivered on time each month?",
            "What is the average order fulfillment time per month?",
            "Which product generated the most revenue?",
            "What is the total number of orders placed by each customer?",
            "Which shipping method is used the most?",
            "What is the average discount applied to orders each month?",
            "Which employee handled the most orders?",
            "What are the total sales for each country?",
            "How many orders have a freight cost above $50?",
            "Which month had the highest total sales?",
            "How many unique products are ordered each month?",
            "What is the on-time delivery rate per month?",
            "What is the total freight cost for each shipping method?",
            "Which city received the most shipments?",
            "What is the trend in average order value over time?",
            "How many orders were shipped after the required date?",
            "What is the average unit price of products ordered each month?",
            "What is the total sales revenue for each month?",
            "Calculate the average order value for each customer.",
            "Determine the on-time delivery rate for each shipping method.",
            "Find the top 5 products by total sales revenue.",
            "Identify orders where the discount applied was greater than 20%.",
            "What is the total freight cost by country?",
            "Which customers have placed the highest number of orders?",
            "Calculate the total sales and total discount for each product.",
            "What is the average quantity of products ordered per order?",
            "Which shipping method has the least freight cost on average?",
            "What percentage of orders are delivered in the same city?",
            "How does the total sales trend over the last 6 months?",
            "Analyze the correlation between order size and fulfillment time.",
            "List all orders that were not shipped.",
            "What is the total number of orders for each employee?",
            "Identify the regions with the highest order volumes.",
            "Calculate the difference between order date and shipped date for each order.",
            "How many orders have been placed by each customer?",
            "What is the average order value for each month?",
            "Which employee has processed the most orders?",
            "What is the most frequently ordered product?",
            "How many orders have been delivered on time?",
            "What is the total discount given for each month?",
            "Which country generates the highest sales revenue?",
            "What is the average order fulfillment time for orders shipped last year?",
            "Which shipping method is most commonly used?",
            "How many orders have freight costs exceeding $100?",
            "What is the trend of total sales revenue over the past year?",
            "Which city has the highest number of shipments?",
            "How many orders are pending shipment?",
            "What is the total revenue generated without any discounts?",
            "Which region has the longest delivery time on average?",
            "What is the total freight cost by shipping method?",
            "How many different products are customers ordering each month?",
            "Which products are often paired together in orders?",
            "How many orders have been shipped in the last week?",
            "Which product has the highest total sales?",
            "What is the average order value for the year?",
            "How many orders were placed by each customer?",
            "Which employee fulfilled the most orders?",
            "Which products have the highest total sales value?",
            "Which employee handled the most number of orders?",
            "What is the average order fulfillment time for each employee?",
            "Which shipping method is the most frequently used?",
            "Calculate the on-time delivery rate for each month.",
            "Identify the month with the highest freight costs.",
            "Which customers have placed orders with the highest discounts?",
            "What is the total number of products ordered each month?",
            "Determine the top 5 cities with the highest order values.",
            "What is the average discount given on orders per month?",
            "Find the total sales revenue for each shipping country.",
            "Which orders had a total value greater than $1000?",
            "What is the correlation between freight costs and order size?",
            "Identify regions with the longest average delivery times.",
            "Which employees achieved the best on-time delivery rates?",
            "What is the total sales revenue generated each month?",
            "Which month had the highest average order value?",
            "What is the average time taken to fulfill orders each month?",
            "What is the on-time delivery rate each month?",
            "What are the total sales generated by each shipping country?",
            "Which product generated the highest revenue in the last year?",
            "Who is the employee with the most orders fulfilled?",
            "Which month had the most delayed shipments, and what is the average delay?",
            "What is the total number of orders per shipping method?",
            "What is the average freight cost per order each month?",
            "What is the most common city for order shipment?",
            "How many orders were placed with a discount greater than 20%?",
            "What is the top performing region in terms of sales revenue?",
            "What is the correlation between freight cost and order sales value?",
            "How many products have never been ordered?",
            "What is the average order value for each customer?",
            "Which employee is responsible for the highest revenue generation?",
            "What percentage of total sales is accounted for by the top 10% of customers?",
            "What is the trend of total sales over the past five years?",
            "Which customer placed the highest number of orders in the last year?",
            "What is the average discount given on all orders?",
            "What is the average order value each month?",
            "What is the total quantity of each product sold?",
            "Which shipping method is used most frequently?",
            "How long, on average, does it take to fulfill an order each month?",
            "What is the total freight cost by shipping country?",
            "Which product had the highest total sales in the last quarter?",
            "How many orders have a discount greater than 20%?",
            "Which employee processed the most orders?",
            "What are the top three cities by number of orders shipped?",
            "What is the most common order quantity?",
            "What is the total number of orders that have not been shipped?",
            "What percentage of orders are shipped via the most expensive method?",
            "Which region has the lowest average order value?",
            "What is the average shipping time for each shipping method?",
            "What is the total revenue generated from orders in the last month?",
            "Which product has generated the most revenue?",
            "How many orders are shipped within the required date?",
            "Which customer placed the most orders?",
            "How many orders were placed using each shipping method?",
            "Which region has the highest number of orders?",
            "What is the monthly trend of total sales over the past year?",
            "What are the top 5 products sold by quantity?",
            "What percentage of orders are delivered late?",
            "Which day of the week has the highest order volume?",
            "What is the average discount applied per order?",
            "What is the most common shipping city for orders?",
            "How many unique products have been ordered?",
            "What is the average freight cost per order?",
            "Which month has the highest on-time delivery rate?",
            "What is the total quantity of products sold each month?",
            "What is the difference in average order value between different shipping methods?",
            "What is the total sales revenue generated in March 2023?",
            "Which customer placed the most orders in 2022?",
            "What is the average order value for each month in 2023?",
            "How many orders were fulfilled within the required date in the first quarter of 2023?",
            "Which customer generated the highest revenue last year?",
            "How many orders were shipped on time each month?",
            "Which product had the highest total sales?",
            "What is the average fulfillment time for orders each month?",
            "How many orders were shipped with 'ShipVia' method 1?",
            "What is the total quantity of each product sold each month?",
            "How many unique customers placed orders each month?",
            "What is the total freight cost for orders shipped via method 3?",
            "Which shipping region had the most orders?",
            "What is the percentage of orders with a discount greater than 10% each month?",
            "Which month had the highest number of orders?",
            "Which city had the highest average order value?",
            "What is the total discount given each month?",
            "How many orders were placed and not yet shipped?",
            "Which country had the most delayed shipments?",
            "How many orders were canceled or modified?",
            "Which product has the highest total sales revenue?",
            "How many days on average does it take to fulfill an order?",
            "What is the percentage of on-time deliveries for each month?",
            "Which country has the highest number of orders?",
            "Find the top 5 employees who processed the most orders.",
            "What is the total discount given for each product?",
            "Which month had the peak order fulfillment speed?",
            "What is the total number of products sold each month?",
            "Which city has the highest average order value?",
            "What is the total number of orders shipped after the required date?",
            "Which customer placed the highest value order?",
            "Calculate the total sales grouped by country and month.",
            "Find the trend of order fulfillment time over the last year.",
            "Identify the shipping method with the highest average freight cost.",
            "What is the distribution of order quantities across different products?",
            "How does the average order value differ between regions?",
            "Which product generated the highest total sales revenue?",
            "Which country had the highest total sales?",
            "What is the total freight cost for all orders each month?",
            "Which employee processed the highest number of orders?",
            "What is the percentage of late shipments per month?",
            "Which shipping method was used most frequently?",
            "How many products were sold in total each month?",
            "What is the highest single order value?",
            "Which city had the highest number of orders shipped to?",
            "What is the total number of products sold to each country?",
            "What is the variance in order values each month?",
            "How many orders included a discount each month?",
            "Which month had the highest total sales revenue?",
            "What are the top three products by quantity sold per month?",
            "How does the average order value change over the months?",
            "What is the average time taken to fulfill an order each month?",
            "What percentage of orders are delivered on or before the required date each month?",
            "Which product generated the highest sales revenue in the last year?",
            "How many orders were shipped using each shipping method?",
            "What is the total freight cost for orders shipped to each country?",
            "How does the discount rate affect total sales revenue?",
            "Which country has the highest number of on-time deliveries?",
            "What is the total sales revenue per employee?",
            "How many orders did each customer place in the last quarter?",
            "Which month had the highest average order value this year?",
            "What is the most commonly ordered product?",
            "What is the average order fulfillment time for each shipping method?",
            "What are the top five cities with the highest sales revenue?",
            "What percentage of orders received a discount?",
            "What is the trend of total sales revenue over the quarters?",
            "What is the total sales revenue generated in the last month?",
            "What is the average order value per customer for the past quarter?",
            "What is the average order fulfillment time over the past year?",
            "What percentage of orders were delivered on or before the required date last month?",
            "Which customer has placed the highest number of orders in the last year?",
            "What is the total freight cost for each shipping method in the current year?",
            "How many distinct products have been ordered in the last six months?",
            "What is the total sales revenue generated for each month?",
            "What is the average order fulfillment time during the last year?",
            "What is the on-time delivery rate for each shipping method?",
            "Which country has the highest total sales revenue?",
            "What is the total quantity of products sold by each employee?",
            "Identify the top 5 customers based on total sales revenue.",
            "Calculate the total freight cost for all shipped orders.",
            "How many orders were shipped late?",
            "Which region had the highest number of orders?",
            "What is the monthly trend of order volume over the past two years?",
            "Find the top 3 products in terms of quantity sold.",
            "Identify the month with the highest sales revenue.",
            "Calculate the average discount applied to products.",
            "How many orders were shipped within the same city they were ordered from?",
            "What is the total number of orders for each shipping method used?",
            "Which customer placed the highest value order last year?",
            "What is the average order value by month for the current year?",
            "What percentage of orders were delivered on time this quarter?",
            "Find the top 5 countries with the highest order volume.",
            "Determine the month with the highest total sales in the previous year.",
            "Calculate the total freight cost for orders shipped by each method.",
            "Identify the employee who fulfilled the most orders last month.",
            "How many unique customers placed orders in the first half of this year?",
            "What is the average discount applied across all orders?",
            "Find the top 3 cities with the highest order fulfillment time.",
            "Calculate the total number of orders placed in each region.",
            "Determine the average quantity of products ordered per order.",
            "Which shipping method has the lowest total freight cost?",
            "How many orders include a discount greater than 10%?",
            "What is the total sales revenue generated by each employee?",
            "Find the customer with the highest average order value.",
            "What is the total number of products ordered by country?",
            "How many orders were placed by each customer last year?",
            "Which product had the highest sales revenue last quarter?",
            "What is the average order value this month?",
            "Which shipping method was used the most in the past six months?",
            "What is the average time taken to fulfill an order this year?",
            "How many orders were delivered on or before the required date in the last month?",
            "Which employee handled the most orders last year?",
            "What is the total number of products sold this quarter?",
            "How much discount was given in total last year?",
            "What is the highest shipping cost recorded in the last month?",
            "How many orders have a quantity greater than 10 units in the last year?",
            "What is the percentage of late deliveries in the last five years?",
            "Which city received the highest number of shipments?",
            "What is the total freight cost associated with all orders to a specific country?",
            "How does the average fulfillment time compare between different shipping methods?",
            "What is the total sales revenue by product category in the past month?",
            "How many products were ordered by each customer in the last year?",
            "What is the total sales generated in January 2023?",
            "Which customer placed the most orders in the last year?",
            "How many orders were shipped on-time in March 2023?",
            "What are the top three products by sales revenue?",
            "Which employee processed the most orders in Q1 2023?",
            "What is the average order fulfillment time by month?",
            "Which shipping method was used the most in the last quarter?",
            "How many orders were shipped late in the last year?",
            "What is the total discount given per month in 2023?",
            "Which city had the highest number of orders placed in 2022?",
            "What is the percentage of orders with no discount applied?",
            "How many unique products were sold in April 2023?",
            "Which customer spent the most in June 2023?",
            "What is the month-by-month growth in total sales?",
            "How many orders had a freight cost greater than $50?",
            "What is the average discount applied for each product?",
            "Which order had the highest overall value?",
            "What is the average quantity ordered per order for the top product?",
            "How many unique products were ordered each month?",
            "Identify the top 5 products with the highest sales revenue.",
            "Calculate the average order fulfillment time each month.",
            "What is the percentage of orders delivered on or before the required date?",
            "In which months did the company achieve the highest total sales?",
            "How many orders were placed by each employee?",
            "What is the average discount given per order each month?",
            "Identify customers who have placed more than 10 orders.",
            "Determine the region with the highest number of orders.",
            "What is the average shipping cost per order?",
            "List the top 5 cities with the highest total sales.",
            "Calculate the total freight cost for each shipping country.",
            "Which products were never ordered?",
            "What is the total quantity of products ordered each month?",
            "Identify the orders that had a discount greater than 20%.",
            "How many orders were shipped within 2 days of the order date?",
            "Which customer had the highest total sales value?",
            "Which products have the highest total sales revenue?",
            "Which customer has placed the most orders?",
            "What percentage of orders were delivered on or before the required date each month?",
            "How many orders have been placed by each employee?",
            "What is the total discount given on all orders each month?",
            "List the top 5 customers by total sales revenue.",
            "What is the average shipping time by month?",
            "Which product has the highest average discount applied?",
            "What is the total freight cost incurred for each country?",
            "How many orders were shipped late each month?",
            "Which city has the highest number of orders placed?",
            "What is the trend in the quantity ordered over the months?",
            "Which region has the highest average order value?",
            "List the top 5 employees by total orders handled.",
            "What is the total number of distinct products ordered each month?",
            "Which employee fulfilled the most orders in the last year?",
            "What is the average order value for each customer this month?",
            "How many orders were shipped on time per month?",
            "Which product generated the most revenue last quarter?",
            "What is the order fulfillment time for each shipping method?",
            "Which country had the highest freight costs last month?",
            "What is the average discount given on orders each month?",
            "Which customer placed the highest number of orders last year?",
            "How many orders have a discount applied?",
            "What is the average shipping time for orders fulfilled this month?",
            "Which shipping company was used the most in the previous quarter?",
            "What is the percentage of orders with a discount greater than 10%?",
            "Which region had the lowest total sales last month?",
            "What is the total number of orders per country in the current year?",
            "Find the top 5 products by sales volume this year.",
            "What is the average unit price of products ordered last month?",
            "Which orders took longer than the required date to be shipped?",
            "Identify the customer with the highest average order value.",
            "Calculate the total freight cost for each shipping method this month.",
            "How many orders were placed by each customer in the past year?",
            "How many orders were fulfilled on time each month?",
            "What is the total number of products sold in the last quarter?",
            "Calculate the average fulfillment time for orders by country.",
            "Determine the percentage of orders that received a discount.",
            "Which month had the highest total sales revenue this year?",
            "Find the average discount rate applied across all orders.",
            "What is the total freight cost per shipping method?",
            "How many orders are still pending shipment?",
            "List the top 10 customers by total sales value.",
            "What is the monthly growth rate in total sales revenue?",
            "How does the average order value vary by shipping country?",
            "What percentage of orders were shipped after the required date?",
            "Identify regions with the fastest order fulfillment time.",
            "Determine the correlation between order quantity and discount rate.",
            "Which employee handled the highest number of orders last month?",
            "What is the total sales revenue generated in 2023?",
            "Which month in 2023 had the highest number of orders?",
            "What is the average order value per customer in 2023?",
            "Which shipping method was used most frequently in 2023?",
            "What is the total quantity of each product sold in 2023?",
            "What is the total sales revenue generated in each month?",
            "Which customer generated the highest total sales revenue?",
            "How many orders were shipped late compared to their required date?",
            "Which product had the most orders, and how many were ordered?",
            "What is the average order fulfillment time?",
            "How many orders were delivered on time?",
            "What is the on-time delivery rate for each month?",
            "Which shipping method has been used most frequently?",
            "What is the total freight cost for each month?",
            "Identify the month with the highest number of orders placed.",
            "What is the total discount given for all orders?",
            "How many unique products were sold in the last year?",
            "How many orders did each employee handle?",
            "List the three most expensive orders based on total value.",
            "What is the average number of products per order?",
            "How many orders were shipped to each country?",
            "What is the total sales amount for each employee?",
            "What is the total sales revenue for the company in the last month?",
            "What is the average order value for each month this year?",
            "How many orders were shipped on time this quarter?",
            "What is the average time taken to fulfill an order for the last three months?",
            "Which product brought the highest revenue last year?",
            "What percentage of orders were shipped late last month?",
            "List the top 5 customers based on the total revenue they generated this year.",
            "What is the average discount given on orders over the last six months?",
            "How many orders were placed by each customer this year?",
            "What is the total freight cost per shipping method this month?",
            "Which countries have the highest number of orders in the last year?",
            "What is the most popular shipping city over the last two years?",
            "Find the total quantity of products ordered by each employee.",
            "What is the total sales revenue for orders shipped via a specific shipping method?",
            "Which orders have a fulfillment time greater than 30 days?",
            "How does the sales revenue compare between different regions?",
            "What is the average unit price of products ordered in the first quarter?",
            "Which months had the highest growth in average order value this year?",
            "What is the relationship between freight cost and total order value?",
            "Identify the most common shipping recipient name in the database.",
            "How many orders were shipped before the required date each month?",
            "What is the average fulfillment time for orders shipped in the last month?",
            "Which country has the highest on-time delivery rate?",
            "What percentage of total orders have been shipped by each shipping method?",
            "What is the monthly trend in total freight cost?",
            "What is the most ordered product by quantity?",
            "How many orders were not shipped at all?",
            "Which employee has fulfilled the highest number of orders?",
            "What is the total sales revenue per country?",
            "Which regions have the highest average order value?",
            "Which product generates the highest revenue?",
            "What is the median fulfillment time for orders?",
            "What is the average customer rating per order (assuming ratings are stored)?",
            "How many orders have been fulfilled within the required date each month?",
            "What is the total discount given on all products sold?",
            "What is the average time taken to ship an order after it's placed?",
            "Which product has generated the highest revenue?",
            "What is the percentage of orders delivered on or before the required date each month?",
            "Which city has received the highest number of shipments?",
            "What is the total freight cost for orders placed each month?",
            "How many unique products have been ordered by each customer?",
            "What is the total number of units sold for each product?",
            "How many orders have faced shipping delays?",
            "What is the average discount applied to orders per month?",
            "Which order had the lowest shipping cost?",
            "What is the correlation between order value and shipping delay?",
            "Which country has the highest average order value?",
            "How many orders were placed in the last quarter grouped by month?",
            "How has the average order value changed over time?",
            "Which products had the highest sales last year?",
            "What percentage of orders were delivered on time each month?",
            "Which customers have placed the most orders?",
            "What was the freight cost for each shipping method?",
            "Which city had the highest shipping costs?",
            "Which employee handled the most orders last quarter?",
            "How many orders were placed on weekends?",
            "What is the total number of unique products ordered?",
            "What is the distribution of order quantities?",
            "How does the on-time delivery rate vary by region?",
            "What is the average order fulfillment time by shipping method?",
            "How many customers placed orders during a promotion?",
            "What is the trend of order volumes over the last five years?",
            "Which orders had the largest discounts?",
            "What is the total sales revenue generated last month?",
            "What is the average order value for the current year?",
            "How many orders have been fulfilled on time this month?",
            "What is the total number of orders shipped via each shipping method?",
            "Identify customers with the highest total order value this year.",
            "Find the region with the highest average fulfillment time.",
            "List all orders with a discount greater than 25%.",
            "How many orders were placed but not yet shipped?",
            "Identify the shipping country with the most orders this month.",
            "What is the total freight cost incurred last year?",
            "Calculate the monthly trend of total sales for the past year.",
            "Which employee has fulfilled the most orders this month?",
            "Determine the average discount applied to orders last quarter.",
            "How many unique products were ordered last month?",
            "What is the difference in fulfillment time between two consecutive months?",
            "Which city has the lowest on-time delivery rate?",
            "Calculate the total revenue from orders with a unit price above 100.",
            "Find the average quantity of products ordered per order last year.",
            "What is the order fulfillment time for each employee?",
            "Which customer has the highest total sales?",
            "What are the top three countries by total sales?",
            "What is the average discount applied on orders?",
            "How many times was each product ordered?",
            "What is the most popular shipping destination city?",
            "What is the average quantity ordered for each product?",
            "What is the total sales by each employee?",
            "Which customer ordered the highest quantity of a single product?",
            "What is the total discount given in all orders?",
            "How many orders are placed but not yet shipped?",
            "Which region has the most orders placed?",
            "What is the total sales amount for each month?",
            "How many orders has each customer placed?",
            "Which employee handled the most orders in the last year?",
            "Which products generate the most revenue?",
            "What is the total freight cost for each shipping country?",
            "What are the top 5 cities by number of orders?",
            "What is the difference in sales between the current and previous month?",
            "Which customer has the highest total order value?",
            "What is the average discount given per order?",
            "How many distinct products are ordered each month?",
            "What are the monthly trends in total sales for the past year?",
            "Which orders have the highest discount applied?",
            "What are the top 3 employees by sales amount?",
            "How many orders have been placed so far this year?",
            "What is the total sales revenue generated this month?",
            "How many orders were placed by each customer in the last year?",
            "Which product generated the highest revenue over the past six months?",
            "How long does it take on average to fulfill an order?",
            "Which employees have the highest order fulfillment speed?",
            "What percentage of orders are delivered on time each month?",
            "How much freight was paid per shipping method last quarter?",
            "What is the monthly trend of orders with discounts applied?",
            "Which regions generate the most revenue from sales?",
            "What are the top five customers based on order volume?",
            "What is the monthly on-time delivery rate?",
            "How many orders have a discount of more than 20%?",
            "Which order had the longest delivery time?",
            "What are the average quantities ordered for each product?",
            "What is the total number of products sold by month?",
            "Which countries have the fastest-growing order volume trend?",
            "What are the total sales generated by country?",
            "How many orders shipped late in the last three months?",
            "Which customer has placed the highest number of orders?",
            "Which city receives the most orders?",
            "What is the average order fulfillment time for each month?",
            "How many orders had a discount applied?",
            "What percentage of orders are delivered on or before the required date?",
            "For each employee, what is the total sales generated from their orders?",
            "What is the total freight cost for orders in each country?",
            "Find the top 5 customers by total sales revenue.",
            "How does the time gap between order and shipment affect total sales?",
            "Calculate the total sales for orders shipped late.",
            "Find the average discount applied on orders per month.",
            "Which regions have the longest order fulfillment times?",
            "Identify orders with the highest discounts.",
            "How many orders were placed in the last quarter of each year?",
            "What are the shipping patterns (frequency) for each shipping method?",
            "What is the average order fulfillment time for the past year?",
            "What percentage of orders were delivered on or before the required date?",
            "What is the total freight cost incurred each month?",
            "Which country has the highest number of orders shipped?",
            "What is the most common ship region for orders?",
            "What is the highest discount given on any product?",
            "How many unique products have been ordered in total?",
            "Which employee has handled the most orders?",
            "What is the distribution of order quantities for each product?",
            "What is the average discount applied to products ordered?",
            "How many orders include a discount greater than 20%?",
            "What is the total revenue generated from a specific customer?",
            "How quickly are orders generally shipped after being placed?",
            "Which product has the highest average order quantity?",
            "Which product had the highest total sales last year?",
            "What was the average order value each month?",
            "What is the average order fulfillment time each month?",
            "How much freight cost was incurred each month?",
            "Which country had the highest total orders in the last quarter?",
            "What is the frequency distribution of order quantities?",
            "Which employee handled the highest number of orders?",
            "What is the most common shipping method used?",
            "How many orders received a discount greater than 10%?",
            "Which city shipped the most orders last year?",
            "What is the trend of total sales over the past six months?",
            "Which order had the longest fulfillment time?",
            "What is the correlation between freight cost and order value?",
            "How many orders were shipped late last month?",
            "What is the average unit price for all sold products?",
            "Which product had the highest sales volume last quarter?",
            "How many orders did each customer place in the past year?",
            "Which product has the highest sales revenue?",
            "What is the average discount given on products?",
            "What is the total freight cost per shipping country?",
            "How many orders have been placed with a quantity greater than 5?",
            "What is the percentage of orders delivered on time each month?",
            "Which shipping recipient has placed the most orders?",
            "What is the total discount given on all orders?",
            "In which region are most orders shipped?",
            "How many orders were placed in the last 30 days?",
            "What is the monthly trend in sales revenue over the past year?",
            "Which city receives the most shipments?",
            "What is the total sales revenue generated per month?",
            "Which product has the highest total sales in terms of revenue?",
            "How many orders were processed by each employee?",
            "Identify the top 5 customers with the highest spending.",
            "Calculate the total freight cost by shipping country.",
            "Which month had the highest order volume?",
            "Calculate the average discount given on products each month.",
            "Determine the order with the highest number of products.",
            "List customers who had at least one order with over 10% discount.",
            "How much revenue was generated from orders with no discount?",
            "Find the total number of products sold per month.",
            "Which shipping method is most frequently used?",
            "Display the number of orders shipped after their required date.",
            "List all orders with their shipment region and corresponding total order value.",
            "Which employee has the fastest average order fulfillment time?",
            "How does the on-time delivery rate compare across different regions?",
            "What is the Total Sales revenue for the last month?",
            "Which product generated the highest revenue last quarter?",
            "What is the Average Order Value for the past six months?",
            "How many orders were delivered on time this year?",
            "What is the average Order Fulfillment Time by shipper?",
            "Which country has the highest Total Sales revenue?",
            "What is the trend in Total Sales over the past year?",
            "What is the percentage of total revenue by each shipping method?",
            "What is the Average Discount applied to orders last month?",
            "What is the product count per order for the highest order by revenue?",
            "How many distinct customers placed orders each month?",
            "What is the Total Freight cost for all shipped orders this year?",
            "Which customer received the most orders in the last month?",
            "Which city had the highest number of orders placed?",
            "What is the difference in revenue from this month compared to the previous month?",
            "Which region has the fastest average Order Fulfillment Time?",
            "What is the product-wise breakdown of Total Sales for this year?",
            "What is the total sales revenue generated in the last quarter?",
            "Which are the top 5 products by sales revenue?",
            "List the orders that were fulfilled late.",
            "Which shipping method is used the most frequently?",
            "Identify the country with the highest number of orders.",
            "What percentage of total sales is attributed to each product?",
            "Calculate the monthly on-time delivery rate for the last year.",
            "Identify the top 10 customers by total sales in the past year.",
            "What is the relationship between freight cost and sales revenue?",
            "Find the average shipping time for orders to each region.",
            "Which employee handled the most orders last month?",
            "How does the quantity ordered vary by product?",
            "What are the total sales for each shipping country?",
            "Compare the order fulfillment time between two different shipping methods.",
            "What is the trend in total sales over the past 12 months?",
            "Calculate the average number of products per order."
        ],
        "sql_queries": [
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE);",
            "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY CustomerID;",
            "SELECT EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, EXTRACT(YEAR FROM o.OrderDate) AS OrderYear, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY OrderYear, OrderMonth;",
            "SELECT COUNT(o.OrderID) AS OnTimeOrders FROM orders o WHERE o.ShippedDate <= o.RequiredDate AND o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);",
            "SELECT EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, EXTRACT(YEAR FROM o.OrderDate) AS OrderYear, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgFulfillmentTime FROM orders o GROUP BY OrderYear, OrderMonth;",
            "SELECT o.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE o.OrderDate >= DATE_ADD(LAST_DAY(DATE_SUB(CURDATE(), INTERVAL 2 MONTH)), INTERVAL 1 DAY) AND o.OrderDate <= LAST_DAY(DATE_SUB(CURDATE(), INTERVAL 1 MONTH)) GROUP BY o.EmployeeID ORDER BY OrderCount DESC;",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY od.ProductID ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT o.ShipCountry, AVG(o.Freight) AS AvgFreightCost FROM orders o WHERE o.ShippedDate IS NOT NULL GROUP BY o.ShipCountry;",
            "SELECT COUNT(DISTINCT o.OrderID) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0 AND o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);",
            "SELECT o.ShipVia, COUNT(o.OrderID) AS UsageCount FROM orders o GROUP BY o.ShipVia ORDER BY UsageCount DESC;",
            "SELECT EXTRACT(YEAR FROM o.OrderDate) AS OrderYear, EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, COUNT(o.OrderID) AS LateOrderCount FROM orders o WHERE o.ShippedDate > o.RequiredDate GROUP BY OrderYear, OrderMonth;",
            "SELECT p.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY p.CategoryID;",
            "SELECT o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS EmployeeSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY o.EmployeeID;",
            "SELECT o.ShipRegion, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipRegion ORDER BY OrderCount DESC LIMIT 3;",
            "SELECT o.CustomerID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgFulfillmentTime FROM orders o GROUP BY o.CustomerID;",
            "SELECT COUNT(DISTINCT OrderID) * 100.0 / (SELECT COUNT(DISTINCT OrderID) FROM [Order Details]) AS DiscountOver10 FROM [Order Details] WHERE Discount > 0.10;",
            "SELECT EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, DAYNAME(o.OrderDate) AS OrderDay, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY OrderMonth, OrderDay ORDER BY OrderMonth, OrderCount DESC;",
            "SELECT EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, COUNT(DISTINCT od.ProductID) AS UniqueProductCount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND o.OrderDate < CURDATE() GROUP BY OrderMonth;",
            "SELECT EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, COUNT(CASE WHEN o.ShippedDate <= o.RequiredDate THEN o.OrderID END) * 100.0 / COUNT(o.OrderID) AS OnTimeDeliveryRate FROM orders o WHERE o.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY OrderMonth;",
            "SELECT o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID ORDER BY OrderValue DESC LIMIT 1;",
            "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM')",
            "SELECT orders.CustomerID, COUNT(*) AS NumberOfOrders FROM orders GROUP BY orders.CustomerID ORDER BY NumberOfOrders DESC LIMIT 1",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, COUNT(*) AS OnTimeOrders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
            "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS Month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM')",
            "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Revenue FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY Revenue DESC LIMIT 1",
            "SELECT orders.CustomerID, COUNT(*) AS TotalOrders FROM orders GROUP BY orders.CustomerID;",
            "SELECT ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, AVG([Order Details].Discount) AS AvgDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
            "SELECT EmployeeID, COUNT(*) AS OrdersHandled FROM orders GROUP BY EmployeeID ORDER BY OrdersHandled DESC LIMIT 1",
            "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry",
            "SELECT COUNT(*) FROM orders WHERE Freight > 50",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY TotalSales DESC LIMIT 1",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(DISTINCT ProductID) AS UniqueProducts FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY TO_CHAR(OrderDate, 'YYYY-MM')",
            "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS Month, COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 1.0 / COUNT(orders.OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM')",
            "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia",
            "SELECT ShipCity, COUNT(*) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 1",
            "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM') ORDER BY Month",
            "SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, AVG([Order Details].UnitPrice) AS AvgUnitPrice FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT CustomerID, AVG(TotalValue) AS AvgOrderValue FROM (SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID, o.CustomerID) AS OrderValues GROUP BY CustomerID;",
            "SELECT ShipVia, SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipVia;",
            "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS ProductSales FROM [Order Details] GROUP BY ProductID ORDER BY ProductSales DESC LIMIT 5;",
            "SELECT OrderID FROM [Order Details] WHERE Discount > 0.20;",
            "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",
            "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC;",
            "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales, SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details] GROUP BY ProductID;",
            "SELECT AVG(TotalQuantity) AS AvgQuantityPerOrder FROM (SELECT OrderID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY OrderID) AS OrderQuantities;",
            "SELECT ShipVia, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipVia ORDER BY AvgFreightCost ASC LIMIT 1;",
            "SELECT (COUNT(*) FILTER (WHERE ShipAddress LIKE '%' || ShipCity || '%'))::NUMERIC / COUNT(*) AS SameCityDeliveryPercentage FROM orders;",
            "SELECT OrderMonth, SUM(TotalSales) OVER (ORDER BY OrderMonth) AS CumulativeSales FROM (SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '6 months' GROUP BY OrderMonth) AS SalesTrend;",
            "SELECT OrderID, (TotalValue - Freight) as OrderSize, DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTime FROM (SELECT o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalValue, o.OrderDate, o.ShippedDate, o.Freight FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID) as OrderInfo;",
            "SELECT OrderID FROM orders WHERE ShippedDate IS NULL;",
            "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID;",
            "SELECT ShipRegion, COUNT(OrderID) AS OrderVolume FROM orders GROUP BY ShipRegion ORDER BY OrderVolume DESC;",
            "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS ShippingDelay FROM orders;",
            "SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY CustomerID;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_TRUNC('month', OrderDate);",
            "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT ProductID, COUNT(*) AS OrderCount FROM [Order Details] GROUP BY ProductID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate <= RequiredDate;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
            "SELECT ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCountry ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE YEAR(ShippedDate) = YEAR(CURRENT_DATE) - 1;",
            "SELECT ShipVia, COUNT(OrderID) AS ShippingCount FROM orders GROUP BY ShipVia ORDER BY ShippingCount DESC LIMIT 1;",
            "SELECT COUNT(OrderID) FROM orders WHERE Freight > 100;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY DATE_FORMAT(OrderDate, '%Y-%m') DESC;",
            "SELECT ShipCity, COUNT(OrderID) AS ShipmentCount FROM orders GROUP BY ShipCity ORDER BY ShipmentCount DESC LIMIT 1;",
            "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate IS NULL;",
            "SELECT SUM(od.UnitPrice * od.Quantity) FROM [Order Details] od;",
            "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgDeliveryTime FROM orders GROUP BY ShipRegion ORDER BY AvgDeliveryTime DESC;",
            "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(DISTINCT ProductID) AS UniqueProducts FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT od1.ProductID, od2.ProductID, COUNT(*) AS PairCount FROM [Order Details] od1 JOIN [Order Details] od2 ON od1.OrderID = od2.OrderID AND od1.ProductID < od2.ProductID GROUP BY od1.ProductID, od2.ProductID ORDER BY PairCount DESC LIMIT 5;",
            "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate >= CURRENT_DATE - INTERVAL '7' DAY;",
            "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS ProductSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY ProductSales DESC LIMIT 1;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID;",
            "SELECT orders.CustomerID, COUNT(*) AS TotalOrders FROM orders GROUP BY orders.CustomerID;",
            "SELECT orders.EmployeeID, COUNT(*) AS FulfilledOrders FROM orders WHERE orders.ShippedDate IS NOT NULL GROUP BY orders.EmployeeID ORDER BY FulfilledOrders DESC LIMIT 1;",
            "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] GROUP BY ProductID ORDER BY TotalSales DESC;",
            "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC;",
            "SELECT EmployeeID, AVG(DATEDIFF(ShipDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EmployeeID;",
            "SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Freight) AS TotalFreight FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY TotalFreight DESC LIMIT 1;",
            "SELECT o.CustomerID, MAX(od.Discount) AS MaxDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID ORDER BY MaxDiscount DESC;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Quantity) AS TotalProducts FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCity ORDER BY TotalOrderValue DESC LIMIT 5;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Discount) AS AvgDiscount FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCountry;",
            "SELECT OrderID FROM [Order Details] GROUP BY OrderID HAVING SUM(UnitPrice * Quantity * (1 - Discount)) > 1000;",
            "SELECT CORR(FreightCost, OrderValue) AS Correlation FROM (SELECT o.OrderID, SUM(o.Freight) AS FreightCost, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID) AS OrderStats;",
            "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgDeliveryTime FROM orders GROUP BY ShipRegion ORDER BY AvgDeliveryTime DESC;",
            "SELECT EmployeeID, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY EmployeeID ORDER BY OnTimeRate DESC;",
            "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month ORDER BY Month;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_TRUNC('month', OrderDate) ORDER BY AvgOrderValue DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month ORDER BY Month;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month ORDER BY Month;",
            "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry ORDER BY TotalSales DESC;",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '1 year' AND o.OrderDate < DATE_TRUNC('year', CURRENT_DATE) GROUP BY od.ProductID ORDER BY Revenue DESC LIMIT 1;",
            "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE ShippedDate IS NOT NULL GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', ShippedDate) AS Month, COUNT(OrderID) AS TotalDelays, AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgDelay FROM orders WHERE ShippedDate > RequiredDate GROUP BY Month ORDER BY TotalDelays DESC LIMIT 1;",
            "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia ORDER BY OrderCount DESC;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgFreight FROM orders GROUP BY Month ORDER BY Month;",
            "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT COUNT(DISTINCT OrderID) FROM [Order Details] WHERE Discount > 0.2;",
            "SELECT ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipRegion ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT CORR(Freight, TotalSales) AS FreightSalesCorrelation FROM ( SELECT o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, o.Freight FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID );",
            "SELECT p.ProductID FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL;",
            "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID;",
            "SELECT EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EmployeeID ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT ROUND(100.0 * SUM(t.CustomerRevenue) / (SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID), 2) AS Top10PercentSales FROM ( SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID) t ORDER BY t.CustomerRevenue DESC LIMIT (SELECT ROUND(0.1 * COUNT(DISTINCT CustomerID)) FROM orders);",
            "SELECT DATE_TRUNC('year', OrderDate) AS Year, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_TRUNC('year', OrderDate) ORDER BY Year;",
            "SELECT o.CustomerID, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE o.OrderDate > DATEADD(year, -1, CURRENT_DATE) GROUP BY o.CustomerID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT DATE_TRUNC('month', o.OrderDate) AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY OrderMonth;",
            "SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od GROUP BY od.ProductID;",
            "SELECT o.ShipVia, COUNT(o.OrderID) AS UsageCount FROM orders o GROUP BY o.ShipVia ORDER BY UsageCount DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', OrderDate) AS OrderMonth, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY OrderMonth;",
            "SELECT o.ShipCountry, SUM(o.Freight) AS TotalFreight FROM orders o GROUP BY o.ShipCountry;",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductSales FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' AND o.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY od.ProductID ORDER BY ProductSales DESC LIMIT 1;",
            "SELECT COUNT(DISTINCT od.OrderID) AS HighDiscountOrders FROM [Order Details] od WHERE od.Discount > 0.20;",
            "SELECT o.EmployeeID, COUNT(o.OrderID) AS ProcessedOrders FROM orders o GROUP BY o.EmployeeID ORDER BY ProcessedOrders DESC LIMIT 1;",
            "SELECT o.ShipCity, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipCity ORDER BY OrderCount DESC LIMIT 3;",
            "SELECT od.Quantity, COUNT(od.Quantity) AS Frequency FROM [Order Details] od GROUP BY od.Quantity ORDER BY Frequency DESC LIMIT 1;",
            "SELECT COUNT(o.OrderID) AS UnshippedOrders FROM orders o WHERE o.ShippedDate IS NULL;",
            "SELECT COUNT(o.OrderID) * 1.0 / (SELECT COUNT(*) FROM orders) AS ExpensiveShippingRate FROM orders o WHERE o.ShipVia = (SELECT ShipVia FROM (SELECT ShipVia, AVG(Freight) AS avg_freight FROM orders GROUP BY ShipVia ORDER BY avg_freight DESC LIMIT 1) AS expensive_method);",
            "SELECT o.ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipRegion ORDER BY AvgOrderValue ASC LIMIT 1;",
            "SELECT o.ShipVia, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingTime FROM orders o GROUP BY o.ShipVia;",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE);",
            "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS Revenue FROM [Order Details] GROUP BY ProductID ORDER BY Revenue DESC LIMIT 1;",
            "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate <= RequiredDate;",
            "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia;",
            "SELECT ShipRegion, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipRegion ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY Year, Month ORDER BY Year, Month;",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC FETCH FIRST 5 ROWS ONLY;",
            "SELECT (COUNT(CASE WHEN ShippedDate > RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID)) AS LatePercentage FROM orders;",
            "SELECT EXTRACT(DOW FROM OrderDate) AS DayOfWeek, COUNT(OrderID) AS OrderCount FROM orders GROUP BY DayOfWeek ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT AVG(SUM(Discount)) AS AvgDiscount FROM [Order Details] GROUP BY OrderID;",
            "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT COUNT(DISTINCT ProductID) FROM [Order Details];",
            "SELECT AVG(Freight) AS AvgFreightCost FROM orders;",
            "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID)) AS OnTimeRate FROM orders GROUP BY Month ORDER BY OnTimeRate DESC LIMIT 1;",
            "SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate);",
            "SELECT ShipVia, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipVia;",
            "SELECT SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales FROM [Order Details] OD JOIN orders O ON OD.OrderID = O.OrderID WHERE EXTRACT(YEAR FROM O.OrderDate) = 2023 AND EXTRACT(MONTH FROM O.OrderDate) = 3;",
            "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = 2022 GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT EXTRACT(MONTH FROM O.OrderDate) AS Month, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) / COUNT(DISTINCT O.OrderID) AS AvgOrderValue FROM [Order Details] OD JOIN orders O ON OD.OrderID = O.OrderID WHERE EXTRACT(YEAR FROM O.OrderDate) = 2023 GROUP BY EXTRACT(MONTH FROM O.OrderDate);",
            "SELECT COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate AND EXTRACT(YEAR FROM OrderDate) = 2023 AND EXTRACT(QUARTER FROM OrderDate) = 1;",
            "SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY CustomerID ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) FROM orders WHERE ShippedDate <= RequiredDate GROUP BY DATE_TRUNC('month', OrderDate);",
            "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS ProductSales FROM [Order Details] GROUP BY ProductID ORDER BY ProductSales DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
            "SELECT COUNT(OrderID) FROM orders WHERE ShipVia = 1;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, ProductID, SUM(Quantity) AS TotalQuantitySold FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_TRUNC('month', OrderDate), ProductID;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
            "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShipVia = 3;",
            "SELECT ShipRegion, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipRegion ORDER BY TotalOrders DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, COUNT(CASE WHEN [Order Details].Discount > 0.1 THEN 1 END) * 100.0 / COUNT(orders.OrderID) AS DiscountPercentage FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_TRUNC('month', orders.OrderDate);",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY DATE_TRUNC('month', OrderDate) ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT ShipCity, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCity ORDER BY AvgOrderValue DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscountGiven FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_TRUNC('month', orders.OrderDate);",
            "SELECT COUNT(OrderID) AS UnshippedOrders FROM orders WHERE ShippedDate IS NULL;",
            "SELECT ShipCountry, COUNT(OrderID) AS DelayedShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipCountry ORDER BY DelayedShipments DESC LIMIT 1;",
            "SELECT COUNT(OrderID) AS CanceledOrModifiedOrders FROM orders WHERE (RequiredDate IS NULL OR ShippedDate <> RequiredDate);",
            "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS ProductSales FROM [Order Details] GROUP BY ProductID ORDER BY ProductSales DESC LIMIT 1;",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders",
            "SELECT strftime('%Y-%m', OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY strftime('%Y-%m', OrderDate)",
            "SELECT ShipCountry, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipCountry ORDER BY TotalOrders DESC LIMIT 1",
            "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 5",
            "SELECT ProductID, SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details] GROUP BY ProductID;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS FulfillmentSpeed FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY FulfillmentSpeed ASC LIMIT 1",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Quantity) AS TotalProductsSold FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')",
            "SELECT ShipCity, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCity ORDER BY AvgOrderValue DESC LIMIT 1",
            "SELECT COUNT(OrderID) AS LateShipments FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS OrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY CustomerID ORDER BY OrderValue DESC LIMIT 1",
            "SELECT ShipCountry, TO_CHAR(OrderDate, 'YYYY-MM') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry, TO_CHAR(OrderDate, 'YYYY-MM')",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY Month;",
            "SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipVia ORDER BY AvgFreight DESC LIMIT 1;",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC",
            "SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion",
            "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipCountry ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM(orders.Freight) AS TotalFreightCost FROM orders GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m');",
            "SELECT orders.EmployeeID, COUNT(orders.OrderID) AS NumOrders FROM orders GROUP BY orders.EmployeeID ORDER BY NumOrders DESC LIMIT 1;",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN orders.ShippedDate > orders.RequiredDate THEN 1 END) / COUNT(orders.OrderID) * 100 AS LateShipmentPercentage FROM orders GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m');",
            "SELECT orders.ShipVia, COUNT(orders.OrderID) AS UsageCount FROM orders GROUP BY orders.ShipVia ORDER BY UsageCount DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].Quantity) AS TotalProductsSold FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY DATE_TRUNC('month', orders.OrderDate);",
            "SELECT orders.OrderID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS OrderValue FROM orders INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID ORDER BY OrderValue DESC LIMIT 1;",
            "SELECT orders.ShipCity, COUNT(orders.OrderID) AS NumOrders FROM orders GROUP BY orders.ShipCity ORDER BY NumOrders DESC LIMIT 1;",
            "SELECT orders.ShipCountry, SUM([Order Details].Quantity) AS TotalProductsSold FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipCountry;",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, VAR_POP(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) AS OrderValueVariance FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m');",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, COUNT(DISTINCT orders.OrderID) AS DiscountedOrders FROM \"Order Details\" JOIN orders ON \"Order Details\".OrderID = orders.OrderID WHERE \"Order Details\".Discount > 0 GROUP BY DATE_TRUNC('month', orders.OrderDate);",
            "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM') ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, [Order Details].ProductID, SUM([Order Details].Quantity) AS QuantitySold FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m'), [Order Details].ProductID ORDER BY Month, QuantitySold DESC;",
            "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month ORDER BY Month;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month ORDER BY Month;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month ORDER BY Month;",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductSales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE '2022-01-01' AND o.OrderDate < DATE '2023-01-01' GROUP BY od.ProductID ORDER BY ProductSales DESC LIMIT 1;",
            "SELECT ShipVia, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipVia;",
            "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSalesRevenue, SUM(od.Discount * od.UnitPrice * od.Quantity) AS TotalDiscount FROM [Order Details] od;",
            "SELECT ShipCountry, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveries FROM orders GROUP BY ShipCountry ORDER BY OnTimeDeliveries DESC LIMIT 1;",
            "SELECT EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EmployeeID;",
            "SELECT CustomerID, COUNT(OrderID) AS OrdersLastQuarter FROM orders WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 quarter' AND OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY CustomerID;",
            "SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY EXTRACT(MONTH FROM o.OrderDate) ORDER BY AverageOrderValue DESC LIMIT 1;",
            "SELECT ProductID, SUM(Quantity) AS TotalOrdered FROM [Order Details] GROUP BY ProductID ORDER BY TotalOrdered DESC LIMIT 1;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipVia;",
            "SELECT ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CitySales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCity ORDER BY CitySales DESC LIMIT 5;",
            "SELECT COUNT(DISTINCT CASE WHEN od.Discount > 0 THEN od.OrderID END) * 100.0 / COUNT(DISTINCT od.OrderID) AS DiscountOrderPercentage FROM [Order Details] od;",
            "SELECT DATE_TRUNC('quarter', o.OrderDate) AS Quarter, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Quarter ORDER BY Quarter;",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE);",
            "SELECT AVG(customer_sales.AverageOrderValue) AS AverageOrderValuePerCustomer FROM (SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' AND o.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY o.CustomerID) AS customer_sales;",
            "SELECT AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageFulfillmentTime FROM orders o WHERE o.OrderDate >= DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '1 year' AND o.OrderDate < DATE_TRUNC('year', CURRENT_DATE);",
            "SELECT COUNT(o.OrderID) FILTER (WHERE o.ShippedDate <= o.RequiredDate) * 100.0 / COUNT(o.OrderID) AS OnTimeDeliveryRate FROM orders o WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE);",
            "SELECT o.CustomerID, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE o.OrderDate >= CURRENT_DATE - INTERVAL '1 year' GROUP BY o.CustomerID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders WHERE OrderDate >= DATE '2023-01-01' GROUP BY ShipVia;",
            "SELECT COUNT(DISTINCT od.ProductID) AS DistinctProductsOrdered FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= CURRENT_DATE - INTERVAL '6 months'",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31';",
            "SELECT ShipVia, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipVia;",
            "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT EmployeeID, SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY EmployeeID;",
            "SELECT CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY CustomerID ORDER BY CustomerRevenue DESC LIMIT 5;",
            "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShippedDate IS NOT NULL;",
            "SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT ShipRegion, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipRegion ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS OrderVolume FROM orders WHERE OrderDate >= '2021-01-01' AND OrderDate < '2023-01-01' GROUP BY Month;",
            "SELECT ProductID, SUM(Quantity) AS QuantitySold FROM [Order Details] GROUP BY ProductID ORDER BY QuantitySold DESC LIMIT 3;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_TRUNC('month', OrderDate) ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details] WHERE Discount > 0;",
            "SELECT COUNT(OrderID) AS SameCityOrders FROM orders WHERE ShipCity = ShipCity;",
            "SELECT ShipVia, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipVia;",
            "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY o.CustomerID ORDER BY OrderValue DESC LIMIT 1;",
            "SELECT MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY MONTH(o.OrderDate);",
            "SELECT COUNT(o.OrderID) * 100.0 / COUNT(*) AS OnTimeDeliveryRate FROM orders o WHERE o.ShippedDate <= o.RequiredDate AND QUARTER(o.OrderDate) = QUARTER(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE);",
            "SELECT o.ShipCountry, COUNT(o.OrderID) AS OrderVolume FROM orders o GROUP BY o.ShipCountry ORDER BY OrderVolume DESC LIMIT 5;",
            "SELECT MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY MONTH(o.OrderDate) ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT o.ShipVia, SUM(o.Freight) AS TotalFreightCost FROM orders o GROUP BY o.ShipVia;",
            "SELECT o.EmployeeID, COUNT(o.OrderID) AS NumOrders FROM orders o WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL '1' MONTH) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL '1' MONTH) GROUP BY o.EmployeeID ORDER BY NumOrders DESC LIMIT 1;",
            "SELECT COUNT(DISTINCT o.CustomerID) FROM orders o WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-06-30';",
            "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
            "SELECT o.ShipCity, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgFulfillmentTime FROM orders o WHERE o.ShippedDate IS NOT NULL GROUP BY o.ShipCity ORDER BY AvgFulfillmentTime DESC LIMIT 3;",
            "SELECT o.ShipRegion, COUNT(o.OrderID) AS NumOrders FROM orders o GROUP BY o.ShipRegion;",
            "SELECT AVG(od.Quantity) AS AvgQuantity FROM [Order Details] od INNER JOIN orders o ON od.OrderID = o.OrderID;",
            "SELECT o.ShipVia, SUM(o.Freight) AS TotalFreightCost FROM orders o GROUP BY o.ShipVia ORDER BY TotalFreightCost ASC LIMIT 1;",
            "SELECT COUNT(DISTINCT od.OrderID) FROM [Order Details] od WHERE od.Discount > 0.1;",
            "SELECT o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID;",
            "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID ORDER BY AverageOrderValue DESC LIMIT 1;",
            "SELECT o.ShipCountry, SUM(od.Quantity) AS TotalProductsOrdered FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry;",
            "SELECT CustomerID, COUNT(OrderID) FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY CustomerID",
            "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS Sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '1 quarter') AND OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY ProductID ORDER BY Sales DESC LIMIT 1",
            "SELECT SUM(UnitPrice * Quantity * (1 - Discount)) / COUNT(DISTINCT orders.OrderID) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE)",
            "SELECT ShipVia, COUNT(OrderID) FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '6 months' GROUP BY ShipVia ORDER BY COUNT(OrderID) DESC LIMIT 1",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE)",
            "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate <= RequiredDate AND OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND OrderDate < DATE_TRUNC('month', CURRENT_DATE)",
            "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1",
            "SELECT SUM([Order Details].Quantity) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE);",
            "SELECT SUM(UnitPrice * Quantity * Discount) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1",
            "SELECT MAX(Freight) FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND OrderDate < DATE_TRUNC('month', CURRENT_DATE);",
            "SELECT COUNT(DISTINCT orders.OrderID) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE [Order Details].Quantity > 10 AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1",
            "SELECT (COUNT(OrderID) FILTER (WHERE ShippedDate > RequiredDate) / COUNT(OrderID)::FLOAT) * 100 AS LateDeliveryRate FROM orders WHERE YEAR(OrderDate) >= YEAR(CURRENT_DATE) - 5",
            "SELECT ShipCity, COUNT(OrderID) FROM orders GROUP BY ShipCity ORDER BY COUNT(OrderID) DESC LIMIT 1;",
            "SELECT ShipCountry, SUM(Freight) FROM orders WHERE ShipCountry = 'specific_country' GROUP BY ShipCountry",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) FROM orders GROUP BY ShipVia",
            "SELECT ProductCategory, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND orders.OrderDate < DATE_TRUNC('month', CURRENT_DATE) GROUP BY ProductCategory;",
            "SELECT CustomerID, SUM(Quantity) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY CustomerID",
            "SELECT SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE O.OrderDate BETWEEN '2023-01-01' AND '2023-01-31';",
            "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate <= RequiredDate AND DATE(OrderDate) BETWEEN '2023-03-01' AND '2023-03-31';",
            "SELECT OD.ProductID, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalRevenue FROM [Order Details] OD GROUP BY OD.ProductID ORDER BY TotalRevenue DESC LIMIT 3;",
            "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate BETWEEN '2023-07-01' AND '2023-09-30' GROUP BY ShipVia ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate AND YEAR(OrderDate) = 2022;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE YEAR(OrderDate) = 2023 GROUP BY Month;",
            "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT (COUNT(CASE WHEN OD.Discount = 0 THEN OD.OrderID END) * 100.0) / COUNT(OD.OrderID) AS NoDiscountPercentage FROM [Order Details] OD;",
            "SELECT COUNT(DISTINCT ProductID) FROM [Order Details] OD JOIN orders O ON OD.OrderID = O.OrderID WHERE O.OrderDate BETWEEN '2023-04-01' AND '2023-04-30';",
            "SELECT CustomerID, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSpent FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE O.OrderDate BETWEEN '2023-06-01' AND '2023-06-30' GROUP BY CustomerID ORDER BY TotalSpent DESC LIMIT 1;",
            "SELECT DATE_FORMAT(O.OrderDate, '%Y-%m') AS Month, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY Month ORDER BY Month;",
            "SELECT COUNT(OrderID) FROM orders WHERE Freight > 50;",
            "SELECT ProductID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY ProductID;",
            "SELECT O.OrderID, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS OrderValue FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY O.OrderID ORDER BY OrderValue DESC LIMIT 1;",
            "SELECT AVG(OD.Quantity) FROM [Order Details] OD JOIN (SELECT ProductID FROM [Order Details] GROUP BY ProductID ORDER BY SUM(UnitPrice * Quantity * (1 - Discount)) DESC LIMIT 1) AS TopProduct ON OD.ProductID = TopProduct.ProductID;",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, COUNT(DISTINCT [Order Details].ProductID) AS unique_products FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY month ORDER BY month;",
            "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS product_sales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY product_sales DESC LIMIT 5;",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_fulfillment_time FROM orders GROUP BY month;",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(*)) AS on_time_delivery_rate FROM orders GROUP BY month;",
            "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS monthly_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM') ORDER BY monthly_sales DESC LIMIT 1;",
            "SELECT EmployeeID, COUNT(OrderID) AS order_count FROM orders GROUP BY EmployeeID;",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG([Order Details].Discount) AS average_discount FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY month;",
            "SELECT CustomerID, COUNT(OrderID) AS order_count FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 10;",
            "SELECT ShipRegion, COUNT(OrderID) AS number_of_orders FROM orders GROUP BY ShipRegion ORDER BY number_of_orders DESC LIMIT 1;",
            "SELECT AVG(Freight) AS average_freight_cost FROM orders;",
            "SELECT ShipCity, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS city_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCity ORDER BY city_sales DESC LIMIT 5;",
            "SELECT ShipCountry, SUM(Freight) AS total_freight_cost FROM orders GROUP BY ShipCountry;",
            "SELECT ProductID FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT EXTRACT(YEAR FROM orders.OrderDate) AS year, EXTRACT(MONTH FROM orders.OrderDate) AS month, SUM([Order Details].Quantity) AS total_quantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY year, month;",
            "SELECT DISTINCT orders.OrderID, [Order Details].Discount FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE [Order Details].Discount > 0.2;",
            "SELECT COUNT(OrderID) FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) <= 2;",
            "SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales_value FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY CustomerID ORDER BY total_sales_value DESC LIMIT 1;",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalSales DESC;",
            "SELECT o.CustomerID, COUNT(o.OrderID) AS TotalOrders FROM orders o GROUP BY o.CustomerID ORDER BY TotalOrders DESC LIMIT 1;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Year, Month;",
            "SELECT EmployeeID, COUNT(OrderID) AS OrdersHandled FROM orders GROUP BY EmployeeID;",
            "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;",
            "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM orders GROUP BY Month;",
            "SELECT od.ProductID, AVG(od.Discount) AS AvgDiscount FROM [Order Details] od GROUP BY od.ProductID ORDER BY AvgDiscount DESC LIMIT 1;",
            "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry ORDER BY TotalFreightCost DESC;",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(OrderID) AS LateShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY Month;",
            "SELECT ShipCity, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipCity ORDER BY TotalOrders DESC LIMIT 1;",
            "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_FORMAT(o.OrderDate, '%Y-%m');",
            "SELECT ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipRegion ORDER BY AvgOrderValue DESC LIMIT 1;",
            "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 5;",
            "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, COUNT(DISTINCT od.ProductID) AS DistinctProducts FROM orders o JOIN \"Order Details\" od ON o.OrderID = od.OrderID GROUP BY Month;",
            "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1 GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURDATE()) AND EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURDATE()) GROUP BY CustomerID;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY Month;",
            "SELECT ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE QUARTER(o.OrderDate) = QUARTER(CURDATE()) - 1 AND YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY ProductID ORDER BY Revenue DESC LIMIT 1;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS FulfillmentTime FROM orders GROUP BY ShipVia;",
            "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) AND MONTH(OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY ShipCountry ORDER BY TotalFreight DESC LIMIT 1;",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, AVG(od.Discount) AS AvgDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;",
            "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1 GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT COUNT(DISTINCT o.OrderID) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0;",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM orders WHERE MONTH(ShippedDate) = MONTH(CURDATE()) AND YEAR(ShippedDate) = YEAR(CURDATE());",
            "SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders WHERE QUARTER(OrderDate) = QUARTER(CURDATE()) - 1 AND YEAR(OrderDate) = YEAR(CURDATE()) OR (QUARTER(CURDATE()) = 1 AND YEAR(OrderDate) = YEAR(CURDATE()) - 1) GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
            "SELECT (COUNT(*) FILTER (WHERE Discount > 0.1) / COUNT(*)) * 100.0 AS PercentageDiscount FROM [Order Details];",
            "SELECT ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(OrderDate) = YEAR(CURDATE() - INTERVAL 1 MONTH) AND MONTH(OrderDate) = MONTH(CURDATE() - INTERVAL 1 MONTH) GROUP BY ShipRegion ORDER BY TotalSales ASC LIMIT 1;",
            "SELECT ShipCountry, COUNT(OrderID) AS TotalOrders FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) GROUP BY ShipCountry;",
            "SELECT ProductID, SUM(Quantity) AS TotalVolume FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(OrderDate) = YEAR(CURDATE()) GROUP BY ProductID ORDER BY TotalVolume DESC LIMIT 5;",
            "SELECT AVG(UnitPrice) AS AvgUnitPrice FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(OrderDate) = YEAR(CURDATE()) AND MONTH(OrderDate) = MONTH(CURDATE()) - 1;",
            "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY CustomerID ORDER BY AvgOrderValue DESC LIMIT 1;",
            "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders WHERE MONTH(OrderDate) = MONTH(CURDATE()) AND YEAR(OrderDate) = YEAR(CURDATE()) GROUP BY ShipVia;",
            "SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders WHERE OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY CustomerID ORDER BY TotalOrders DESC;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(*) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY Month;",
            "SELECT SUM(od.Quantity) AS TotalProductsSold FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATEADD(quarter, -1, CURRENT_DATE);",
            "SELECT ShipCountry, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY ShipCountry;",
            "SELECT (COUNT(DISTINCT OrderID) * 1.0 / (SELECT COUNT(DISTINCT OrderID) FROM orders)) * 100 AS DiscountedOrderPercentage FROM [Order Details] WHERE Discount > 0;",
            "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY Month ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT AVG(Discount) AS AverageDiscountRate FROM [Order Details];",
            "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
            "SELECT COUNT(*) AS PendingOrders FROM orders WHERE ShippedDate IS NULL;",
            "SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY CustomerID ORDER BY TotalSales DESC LIMIT 10;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)), 1) OVER (ORDER BY DATE_TRUNC('month', OrderDate)) AS PreviousMonthSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_TRUNC('month', OrderDate);",
            "SELECT ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCountry;",
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM orders)) AS LateOrderPercentage FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS FastestFulfillmentTime FROM orders GROUP BY ShipRegion ORDER BY FastestFulfillmentTime ASC LIMIT 5;",
            "SELECT CORR(od.Quantity, od.Discount) AS Correlation FROM [Order Details] od;",
            "SELECT EmployeeID, COUNT(OrderID) AS HandledOrders FROM orders WHERE DATE_TRUNC('month', OrderDate) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') GROUP BY EmployeeID ORDER BY HandledOrders DESC LIMIT 1;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = 2023;",
            "SELECT MONTH(OrderDate) AS OrderMonth, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY OrderMonth ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY CustomerID;",
            "SELECT ShipVia, COUNT(OrderID) AS Frequency FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY ShipVia ORDER BY Frequency DESC LIMIT 1;",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantitySold FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = 2023) GROUP BY ProductID;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(d.UnitPrice * d.Quantity * (1 - d.Discount)) AS TotalSales FROM orders o JOIN [Order Details] d ON o.OrderID = d.OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT CustomerID, SUM(d.UnitPrice * d.Quantity * (1 - d.Discount)) AS TotalSales FROM orders o JOIN [Order Details] d ON o.OrderID = d.OrderID GROUP BY CustomerID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 1;",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL;",
            "SELECT COUNT(*) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(*) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, SUM(Freight) AS TotalFreight FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(*) AS OrderCount FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT SUM(d.UnitPrice * d.Quantity * d.Discount) AS TotalDiscount FROM [Order Details] d;",
            "SELECT COUNT(DISTINCT ProductID) FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR));",
            "SELECT EmployeeID, COUNT(*) AS OrderCount FROM orders GROUP BY EmployeeID;",
            "SELECT o.OrderID, SUM(d.UnitPrice * d.Quantity * (1 - d.Discount)) AS OrderValue FROM orders o JOIN [Order Details] d ON o.OrderID = d.OrderID GROUP BY o.OrderID ORDER BY OrderValue DESC LIMIT 3;",
            "SELECT AVG(ProductsPerOrder) FROM (SELECT SUM(d.Quantity) AS ProductsPerOrder FROM [Order Details] d GROUP BY d.OrderID) AS OrderQuantities;",
            "SELECT ShipCountry, COUNT(*) AS OrderCount FROM orders GROUP BY ShipCountry;",
            "SELECT EmployeeID, SUM(d.UnitPrice * d.Quantity * (1 - d.Discount)) AS TotalSales FROM orders o JOIN [Order Details] d ON o.OrderID = d.OrderID GROUP BY EmployeeID;",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE);",
            "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE DATE_PART('year', o.OrderDate) = DATE_PART('year', CURRENT_DATE) GROUP BY DATE_TRUNC('month', o.OrderDate);",
            "SELECT COUNT(o.OrderID) AS OnTimeOrders FROM orders o WHERE o.ShippedDate <= o.RequiredDate AND o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE);",
            "SELECT AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgFulfillmentTime FROM orders o WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months'",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY od.ProductID ORDER BY ProductRevenue DESC LIMIT 1;",
            "SELECT (COUNT(o.OrderID) FILTER (WHERE o.ShippedDate > o.RequiredDate) * 100.0 / COUNT(o.OrderID)) AS LateOrderPercentage FROM orders o WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE);",
            "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY o.CustomerID ORDER BY CustomerRevenue DESC LIMIT 5;",
            "SELECT AVG(od.Discount) AS AvgDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '6 months';",
            "SELECT o.CustomerID, COUNT(*) AS OrderCount FROM orders o WHERE DATE_PART('year', o.OrderDate) = DATE_PART('year', CURRENT_DATE) GROUP BY o.CustomerID;",
            "SELECT o.ShipVia, SUM(o.Freight) AS TotalFreightCost FROM orders o WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) GROUP BY o.ShipVia;",
            "SELECT ShipCountry, COUNT(*) AS OrderCount FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY ShipCountry ORDER BY OrderCount DESC;",
            "SELECT o.ShipCity, COUNT(*) AS ShipCount FROM orders o WHERE o.OrderDate >= DATEADD(YEAR, -2, CURRENT_DATE) GROUP BY o.ShipCity ORDER BY ShipCount DESC LIMIT 1;",
            "SELECT o.EmployeeID, SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID;",
            "SELECT o.ShipVia, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Sales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.ShipVia = :specific_shipping_method GROUP BY o.ShipVia;",
            "SELECT o.OrderID FROM orders o WHERE DATEDIFF(o.ShippedDate, o.OrderDate) > 30;",
            "SELECT o.ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Sales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipRegion;",
            "SELECT AVG(od.UnitPrice) AS AvgUnitPrice FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(QUARTER FROM o.OrderDate) = 1;",
            "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE DATE_PART('year', o.OrderDate) = DATE_PART('year', CURRENT_DATE) GROUP BY Month ORDER BY AvgOrderValue DESC;",
            "SELECT o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue, o.Freight FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID HAVING o.Freight > (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) * 0.1);",
            "SELECT ShipName, COUNT(*) AS Count FROM orders GROUP BY ShipName ORDER BY Count DESC LIMIT 1;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(*) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE ShippedDate BETWEEN DATEADD(MONTH, -1, CURRENT_DATE) AND CURRENT_DATE",
            "SELECT ShipCountry, SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipCountry ORDER BY OnTimeDeliveryRate DESC LIMIT 1",
            "SELECT ShipVia, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM orders) AS Percentage FROM orders GROUP BY ShipVia;",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, SUM(Freight) AS TotalFreight FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM')",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 1",
            "SELECT COUNT(*) FROM orders WHERE ShippedDate IS NULL",
            "SELECT EmployeeID, COUNT(*) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1",
            "SELECT ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCountry",
            "SELECT ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipRegion",
            "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalRevenue FROM [Order Details] GROUP BY ProductID ORDER BY TotalRevenue DESC LIMIT 1",
            "SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DATEDIFF(ShippedDate, OrderDate)) AS MedianFulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL",
            "SELECT OrderID, AVG(Rating) AS AvgRating FROM RatingsTable GROUP BY OrderID",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, COUNT(orders.OrderID) AS OnTimeOrders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY Month;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM [Order Details];",
            "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgShippingTime FROM orders WHERE orders.ShippedDate IS NOT NULL;",
            "SELECT ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] GROUP BY ProductID ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID)) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
            "SELECT ShipCity, COUNT(OrderID) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY Month;",
            "SELECT CustomerID, COUNT(DISTINCT [Order Details].ProductID) AS UniqueProductsOrdered FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY CustomerID;",
            "SELECT ProductID, SUM(Quantity) AS TotalUnitsSold FROM [Order Details] GROUP BY ProductID;",
            "SELECT COUNT(OrderID) AS DelayedOrders FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, AVG([Order Details].Discount) AS AvgDiscount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY Month;",
            "SELECT OrderID, Freight FROM orders WHERE Freight = (SELECT MIN(Freight) FROM orders);",
            "SELECT CORR(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) OVER (PARTITION BY orders.OrderID), DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS OrderValueShippingDelayCorrelation FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID;",
            "SELECT ShipCountry, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry ORDER BY AvgOrderValue DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, COUNT(OrderID) AS OrdersInQuarter FROM orders WHERE orders.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '3 months') GROUP BY Month;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY od.ProductID ORDER BY TotalSales DESC;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*) AS OnTimeRate FROM orders GROUP BY Month;",
            "SELECT CustomerID, COUNT(*) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC;",
            "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;",
            "SELECT ShipCity, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCity ORDER BY TotalFreight DESC;",
            "SELECT EmployeeID, COUNT(*) AS OrderCount FROM orders WHERE OrderDate BETWEEN DATE_ADD(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER), INTERVAL 1 DAY) AND LAST_DAY(DATE_SUB(CURDATE(), INTERVAL 1 DAY)) GROUP BY EmployeeID ORDER BY OrderCount DESC;",
            "SELECT COUNT(*) FROM orders WHERE DAYOFWEEK(OrderDate) IN (1, 7);",
            "SELECT COUNT(DISTINCT ProductID) FROM [Order Details];",
            "SELECT Quantity, COUNT(*) AS Frequency FROM [Order Details] GROUP BY Quantity ORDER BY Frequency DESC;",
            "SELECT ShipRegion, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(ShipRegion) * 100 AS OnTimeRate FROM orders GROUP BY ShipRegion;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia;",
            "SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate BETWEEN 'promotion_start_date' AND 'promotion_end_date';",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, COUNT(*) AS OrderVolume FROM orders GROUP BY Year ORDER BY Year DESC;",
            "SELECT OrderID, SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details] GROUP BY OrderID ORDER BY TotalDiscount DESC;",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE);",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN DATE_TRUNC('year', CURRENT_DATE) AND CURRENT_DATE;",
            "SELECT COUNT(o.OrderID) AS OnTimeOrders FROM orders o WHERE o.ShippedDate <= o.RequiredDate AND o.OrderDate BETWEEN DATE_TRUNC('month', CURRENT_DATE) AND CURRENT_DATE;",
            "SELECT o.ShipVia, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipVia;",
            "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN DATE_TRUNC('year', CURRENT_DATE) AND CURRENT_DATE GROUP BY o.CustomerID ORDER BY TotalOrderValue DESC;",
            "SELECT o.ShipRegion, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageFulfillmentTime FROM orders o GROUP BY o.ShipRegion ORDER BY AverageFulfillmentTime DESC LIMIT 1;",
            "SELECT o.OrderID FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0.25;",
            "SELECT COUNT(o.OrderID) FROM orders o WHERE o.ShippedDate IS NULL AND o.OrderDate <= CURRENT_DATE;",
            "SELECT o.ShipCountry, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE + INTERVAL '1 month') GROUP BY o.ShipCountry ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT SUM(o.Freight) AS TotalFreight FROM orders o WHERE o.OrderDate BETWEEN DATE_TRUNC('year', CURRENT_DATE - INTERVAL '1 year') AND DATE_TRUNC('year', CURRENT_DATE);",
            "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 year') AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE) GROUP BY DATE_TRUNC('month', o.OrderDate);",
            "SELECT o.EmployeeID, COUNT(o.OrderID) AS FulfilledOrders FROM orders o WHERE o.ShippedDate BETWEEN DATE_TRUNC('month', CURRENT_DATE) AND CURRENT_DATE GROUP BY o.EmployeeID ORDER BY FulfilledOrders DESC LIMIT 1;",
            "SELECT AVG(od.Discount) AS AverageDiscount FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '1' QUARTER) AND o.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE);",
            "SELECT COUNT(DISTINCT od.ProductID) AS UniqueProducts FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1' MONTH) AND DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1' DAY;",
            "SELECT (SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) FROM orders WHERE OrderDate BETWEEN DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 months') AND DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month')) - (SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) FROM orders WHERE OrderDate BETWEEN DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND DATE_TRUNC('month', CURRENT_DATE)) AS FulfillmentTimeDifference;",
            "SELECT ShipCity, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0) / COUNT(*) AS OnTimeDeliveryRate FROM orders GROUP BY ShipCity ORDER BY OnTimeDeliveryRate ASC LIMIT 1;",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS HighPriceRevenue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE od.UnitPrice > 100;",
            "SELECT AVG(od.Quantity) AS AverageQuantity FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '1 year' AND DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '1 day';",
            "SELECT o.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgFulfillmentTime FROM orders o GROUP BY o.EmployeeID;",
            "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID ORDER BY CustomerSales DESC LIMIT 1",
            "SELECT o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CountrySales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry ORDER BY CountrySales DESC LIMIT 3",
            "SELECT AVG(od.Discount) AS AvgDiscount FROM [Order Details] od",
            "SELECT od.ProductID, COUNT(od.ProductID) AS OrderCount FROM [Order Details] od GROUP BY od.ProductID",
            "SELECT o.ShipCity, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipCity ORDER BY OrderCount DESC LIMIT 1",
            "SELECT od.ProductID, AVG(od.Quantity) AS AvgQuantity FROM [Order Details] od GROUP BY od.ProductID",
            "SELECT o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS EmployeeSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID",
            "SELECT o.CustomerID, od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID, od.ProductID ORDER BY TotalQuantity DESC LIMIT 1",
            "SELECT SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM [Order Details] od",
            "SELECT COUNT(o.OrderID) AS UnshippedOrders FROM orders o WHERE o.ShippedDate IS NULL",
            "SELECT o.ShipRegion, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipRegion ORDER BY OrderCount DESC LIMIT 1",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month",
            "SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID",
            "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1 GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1",
            "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalRevenue FROM [Order Details] GROUP BY ProductID ORDER BY TotalRevenue DESC LIMIT 5",
            "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry",
            "SELECT ShipCity, COUNT(OrderID) AS NumOrders FROM orders GROUP BY ShipCity ORDER BY NumOrders DESC LIMIT 5",
            "SELECT (SUM(CASE WHEN MONTH(OrderDate) = MONTH(CURRENT_DATE) AND YEAR(OrderDate) = YEAR(CURRENT_DATE) THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END) - SUM(CASE WHEN MONTH(OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END)) AS SalesDifference FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID",
            "SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY CustomerID ORDER BY TotalValue DESC LIMIT 1",
            "SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details]",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, COUNT(DISTINCT [Order Details].ProductID) AS UniqueProducts FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
            "SELECT OrderID, Discount FROM [Order Details] ORDER BY Discount DESC LIMIT 5",
            "SELECT EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SalesAmount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EmployeeID ORDER BY SalesAmount DESC LIMIT 3",
            "SELECT COUNT(OrderID) AS OrdersThisYear FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE())",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE EXTRACT(MONTH FROM orders.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) AND EXTRACT(YEAR FROM orders.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE);",
            "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= DATEADD(year, -1, CURRENT_DATE) GROUP BY CustomerID;",
            "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS Revenue FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= DATEADD(month, -6, CURRENT_DATE)) GROUP BY ProductID ORDER BY Revenue DESC LIMIT 1;",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders;",
            "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EmployeeID ORDER BY AvgFulfillmentTime ASC;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) FILTER(WHERE ShippedDate <= RequiredDate)::NUMERIC / NULLIF(COUNT(OrderID), 0) AS OnTimeRate FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
            "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders WHERE OrderDate >= DATEADD(quarter, -1, CURRENT_DATE) GROUP BY ShipVia;",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, COUNT(DISTINCT orders.OrderID) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE [Order Details].Discount > 0 GROUP BY DATE_TRUNC('month', orders.OrderDate);",
            "SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ShipRegion;",
            "SELECT CustomerID, COUNT(OrderID) AS OrderVolume FROM orders GROUP BY CustomerID ORDER BY OrderVolume DESC LIMIT 5;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
            "SELECT COUNT(DISTINCT OrderID) FROM [Order Details] WHERE Discount > 0.2;",
            "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS DeliveryTime FROM orders ORDER BY DeliveryTime DESC LIMIT 1;",
            "SELECT ProductID, AVG(Quantity) AS AvgQuantity FROM [Order Details] GROUP BY ProductID;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(Quantity) AS TotalProductsSold FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY DATE_TRUNC('month', OrderDate);",
            "SELECT ShipCountry, COUNT(OrderID) AS OrderVolume FROM orders WHERE OrderDate >= DATEADD(year, -1, CURRENT_DATE) GROUP BY ShipCountry ORDER BY OrderVolume DESC;",
            "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ShipCountry;",
            "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate AND OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH);",
            "SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month;",
            "SELECT COUNT(DISTINCT OrderID) AS OrdersWithDiscount FROM [Order Details] WHERE Discount > 0;",
            "SELECT (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID)) AS OnTimeDeliveryRate FROM orders;",
            "SELECT EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EmployeeID;",
            "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",
            "SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY CustomerID ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT DATEDIFF(orders.ShippedDate, orders.OrderDate) AS TimeGap, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY TimeGap;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.ShippedDate > orders.RequiredDate;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG([Order Details].Discount) AS AvgDiscount FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY Month;",
            "SELECT ShipRegion, AVG(DATE_PART('day', ShippedDate - OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipRegion ORDER BY AvgFulfillmentTime DESC;",
            "SELECT OrderID, Discount FROM [Order Details] ORDER BY Discount DESC LIMIT 10;",
            "SELECT YEAR(OrderDate) AS Year, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE QUARTER(OrderDate) = 4 GROUP BY YEAR(OrderDate);",
            "SELECT ShipVia, COUNT(OrderID) AS Frequency FROM orders GROUP BY ShipVia;",
            "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgFulfillmentTime FROM orders WHERE orders.ShippedDate IS NOT NULL AND orders.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);",
            "SELECT COUNT(orders.OrderID) FILTER (WHERE orders.ShippedDate <= orders.RequiredDate) * 100.0 / COUNT(orders.OrderID) AS OnTimeDeliveryRate FROM orders;",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM(orders.Freight) AS TotalFreight FROM orders GROUP BY Month ORDER BY Month;",
            "SELECT orders.ShipCountry, COUNT(orders.OrderID) AS OrderCount FROM orders GROUP BY orders.ShipCountry ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT orders.ShipRegion, COUNT(orders.OrderID) AS RegionCount FROM orders GROUP BY orders.ShipRegion ORDER BY RegionCount DESC LIMIT 1;",
            "SELECT MAX([Order Details].Discount) AS MaxDiscount FROM [Order Details];",
            "SELECT COUNT(DISTINCT [Order Details].ProductID) AS UniqueProducts FROM [Order Details];",
            "SELECT orders.EmployeeID, COUNT(orders.OrderID) AS HandledOrders FROM orders GROUP BY orders.EmployeeID ORDER BY HandledOrders DESC LIMIT 1;",
            "SELECT [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY TotalQuantity DESC;",
            "SELECT AVG([Order Details].Discount) AS AvgDiscount FROM [Order Details];",
            "SELECT COUNT(DISTINCT [Order Details].OrderID) AS HighDiscountOrders FROM [Order Details] WHERE [Order Details].Discount > 0.2;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.CustomerID = 'specific_customer_id';",
            "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgShipTime FROM orders WHERE orders.ShippedDate IS NOT NULL;",
            "SELECT [Order Details].ProductID, AVG([Order Details].Quantity) AS AvgQuantity FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY AvgQuantity DESC LIMIT 1;",
            "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] WHERE YEAR(OrderID IN (SELECT OrderID FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1)) GROUP BY ProductID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_TRUNC('month', orders.OrderDate);",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY Month;",
            "SELECT ShipCountry, COUNT(OrderID) AS TotalOrders FROM orders WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 month' AND OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY ShipCountry ORDER BY TotalOrders DESC LIMIT 1;",
            "SELECT Quantity, COUNT(*) AS Frequency FROM [Order Details] GROUP BY Quantity ORDER BY Frequency DESC;",
            "SELECT EmployeeID, COUNT(OrderID) AS NumOrders FROM orders GROUP BY EmployeeID ORDER BY NumOrders DESC LIMIT 1;",
            "SELECT ShipVia, COUNT(OrderID) AS MethodCount FROM orders GROUP BY ShipVia ORDER BY MethodCount DESC LIMIT 1;",
            "SELECT COUNT(DISTINCT OrderID) FROM [Order Details] WHERE Discount > 0.1;",
            "SELECT ShipCity, COUNT(OrderID) AS NumOrders FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY ShipCity ORDER BY NumOrders DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '6 months' GROUP BY Month ORDER BY Month;",
            "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTime FROM orders ORDER BY FulfillmentTime DESC LIMIT 1;",
            "SELECT CORR(Freight, [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Correlation FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID;",
            "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate AND DATE_TRUNC('month', ShippedDate) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month');",
            "SELECT AVG(UnitPrice) AS AverageUnitPrice FROM [Order Details] WHERE Quantity > 0;",
            "SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE QUARTER(o.OrderDate) = QUARTER(CURDATE() - INTERVAL 3 MONTH) AND YEAR(o.OrderDate) = YEAR(CURDATE() - INTERVAL 3 MONTH) GROUP BY od.ProductID ORDER BY TotalQuantity DESC LIMIT 1;",
            "SELECT o.CustomerID, COUNT(DISTINCT o.OrderID) AS OrderCount FROM orders o WHERE o.OrderDate >= CURDATE() - INTERVAL 1 YEAR GROUP BY o.CustomerID;",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS SalesRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY SalesRevenue DESC LIMIT 1;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT o.ShipCountry, SUM(o.Freight) AS TotalFreightCost FROM orders o GROUP BY o.ShipCountry;",
            "SELECT COUNT(DISTINCT od.OrderID) FROM [Order Details] od WHERE od.Quantity > 5;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 100.0 * COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT o.ShipName, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipName ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM [Order Details];",
            "SELECT o.ShipRegion, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipRegion ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT COUNT(o.OrderID) FROM orders o WHERE o.OrderDate > CURDATE() - INTERVAL 30 DAY;",
            "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate > CURDATE() - INTERVAL 12 MONTH GROUP BY DATE_FORMAT(o.OrderDate, '%Y-%m');",
            "SELECT o.ShipCity, COUNT(o.OrderID) AS ShipmentCount FROM orders o GROUP BY o.ShipCity ORDER BY ShipmentCount DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_TRUNC('month', o.OrderDate)",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductSales FROM [Order Details] od GROUP BY od.ProductID ORDER BY ProductSales DESC LIMIT 1",
            "SELECT o.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.EmployeeID",
            "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSpent FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID ORDER BY TotalSpent DESC LIMIT 5",
            "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderVolume FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY OrderVolume DESC LIMIT 1;",
            "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, AVG(od.Discount) AS AvgDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;",
            "SELECT o.OrderID, SUM(od.Quantity) AS ProductCount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID ORDER BY ProductCount DESC LIMIT 1",
            "SELECT DISTINCT o.CustomerID FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0.1;",
            "SELECT SUM(od.UnitPrice * od.Quantity) AS NoDiscountRevenue FROM [Order Details] od WHERE od.Discount = 0",
            "SELECT TO_CHAR(o.OrderDate, 'YYYY-MM') AS Month, SUM(od.Quantity) AS TotalProductsSold FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY TO_CHAR(o.OrderDate, 'YYYY-MM')",
            "SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1",
            "SELECT COUNT(OrderID) AS NumberOfDelayedOrders FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT o.OrderID, o.ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID, o.ShipRegion;",
            "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EmployeeID ORDER BY AvgFulfillmentTime ASC LIMIT 1;",
            "SELECT ShipRegion, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) AS OnTimeDeliveries, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 1.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipRegion",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) AND MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH)",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE QUARTER(o.OrderDate) = QUARTER(CURRENT_DATE) - 1 AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY od.ProductID ORDER BY Revenue DESC LIMIT 1",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -6, CURRENT_DATE);",
            "SELECT COUNT(*) FROM orders WHERE ShippedDate <= RequiredDate AND YEAR(ShippedDate) = YEAR(CURRENT_DATE)",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillTime FROM orders GROUP BY ShipVia",
            "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CountryRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry ORDER BY CountryRevenue DESC LIMIT 1",
            "SELECT YEAR(OrderDate) AS Year, MONTH(OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY YEAR(OrderDate), MONTH(OrderDate) ORDER BY Year, Month",
            "SELECT ShipVia, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / (SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID) * 100 AS Percentage FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipVia",
            "SELECT AVG(Discount) FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) AND MONTH(OrderDate) = MONTH(CURRENT_DATE) - 1)",
            "SELECT od.OrderID, COUNT(DISTINCT od.ProductID) AS ProductCount FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID GROUP BY od.OrderID ORDER BY SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) DESC LIMIT 1",
            "SELECT YEAR(OrderDate) AS Year, MONTH(OrderDate) AS Month, COUNT(DISTINCT CustomerID) AS CustomerCount FROM orders GROUP BY YEAR(OrderDate), MONTH(OrderDate) ORDER BY Year, Month",
            "SELECT SUM(Freight) AS TotalFreight FROM orders WHERE YEAR(ShippedDate) = YEAR(CURRENT_DATE);",
            "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) AND MONTH(OrderDate) = MONTH(CURRENT_DATE) - 1 GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1",
            "SELECT (SUM(CASE WHEN MONTH(OrderDate) = MONTH(CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - SUM(CASE WHEN MONTH(OrderDate) = MONTH(CURRENT_DATE) - 1 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) AS RevenueDifference FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE)",
            "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillTime FROM orders GROUP BY ShipRegion ORDER BY AvgFulfillTime",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY od.ProductID ORDER BY ProductSales DESC;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate BETWEEN DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' AND DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 day';",
            "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS ProductSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY ProductSales DESC LIMIT 5;",
            "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
            "SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCountry ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) FROM [Order Details]) * 100 AS PercentageOfSales FROM [Order Details] GROUP BY ProductID;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders WHERE OrderDate >= DATE_ADD('year', -1, CURRENT_DATE) GROUP BY Month;",
            "SELECT orders.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY orders.CustomerID ORDER BY TotalSales DESC LIMIT 10;",
            "SELECT CORR(orders.Freight, [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID;",
            "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShipTime FROM orders GROUP BY ShipRegion;",
            "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND OrderDate < DATE_TRUNC('month', CURRENT_DATE) GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT ProductID, AVG(Quantity) AS AvgQuantity FROM [Order Details] GROUP BY ProductID;",
            "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia ORDER BY AvgFulfillmentTime;",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= CURRENT_DATE - INTERVAL '12 months' GROUP BY Month ORDER BY Month;",
            "SELECT AVG(ProductCount) AS AvgProductsPerOrder FROM (SELECT OrderID, SUM(Quantity) AS ProductCount FROM [Order Details] GROUP BY OrderID) AS OrderProductCounts;"
        ],
        "reviews": [
            "The original query used DATE_SUB(CURDATE(), INTERVAL 1 MONTH) which might not be ANSI SQL. Corrected to DATEADD(MONTH, -1, CURRENT_DATE) for ANSI compliance.",
            "The query incorrectly calculates the last quarter from today's date. It should instead determine the last quarter based on the calendar quarters, typically involving specific months. Here's the corrected query assuming we want the previous calendar quarter.",
            "The original query incorrectly divides by COUNT(DISTINCT o.OrderID) inside the AVG function. The division should not occur inside of AVG. Instead, the summation should be divided by the count of distinct orders, as done in the correction.",
            "The original query incorrectly computes OnTimeDeliveryRate instead of counting the number of on-time orders. The corrected query counts the on-time orders in the last six months, without computing a rate or ratio.",
            "The query correctly calculates the average fulfillment time but should also group by year to correctly aggregate data across months within different years.",
            "The original query uses DATE_SUB(CURDATE(), INTERVAL 1 MONTH), which may include part of the current month as well. To correctly capture the last full month, the query should calculate the first day of the last month and the last day of the last month.",
            "The query erroneously uses the last 3 months instead of the last quarter. To calculate the last quarter, the query should align with calendar quarters by checking the quarter of the current date. Also, replace DATE_SUB and CURDATE with correct functions. Another point is to replace '[Order Details]' with double quotes if necessary due to file name conflicts. Here is the corrected query: SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE QUARTER(o.OrderDate) = QUARTER(CURRENT_DATE - INTERVAL 1 QUARTER) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 QUARTER) GROUP BY od.ProductID ORDER BY TotalSales DESC LIMIT 5;",
            "The SQL query is correct. It calculates the average freight cost per shipped order by country by selecting the ShipCountry and calculating the average Freight where the ShippedDate is not null, then grouping the results by ShipCountry.",
            "The SQL query correctly calculates the number of distinct orders with a discount in the past year. The use of DISTINCT ensures unique orders are counted, and the JOIN and WHERE clauses are correctly applied.",
            "The SQL query is correct. It correctly counts the number of orders for each shipping method and orders the results by the count in descending order.",
            "The original SQL query was missing the extraction of the year for proper aggregation by both month and year. Adding 'EXTRACT(YEAR FROM o.OrderDate) AS OrderYear' and using it in the GROUP BY clause fixes this issue. The rest of the query is correct.",
            "Corrected the query to use the YEAR function to filter for the current year instead of using DATE_SUB.",
            "The query is mostly correct but doesn't accurately reflect the concept of 'the past quarter' as defined by calendar quarters (which typically are Q1: Jan-Mar, Q2: Apr-Jun, etc.). The query uses the last 3 months instead; this needs calendar logic. Here's the adjusted query: SELECT o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS EmployeeSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE QUARTER(o.OrderDate) = QUARTER(CURRENT_DATE - INTERVAL 1 QUARTER) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 QUARTER) GROUP BY o.EmployeeID;",
            "The SQL query correctly counts the number of orders per region and sorts them in descending order to find the top 3 regions with the highest order count. No corrections are needed.",
            "The SQL query is correct. It accurately calculates the average fulfillment time for each customer by grouping the orders based on CustomerID and using the AVG function on the difference between ShippedDate and OrderDate.",
            "The original query mistakenly counts all rows in [Order Details], leading to potential double-counting if an order has multiple products. The corrected query counts DISTINCT OrderID, ensuring each order is counted only once.",
            "The original query is incorrect because it groups by OrderDay and month without separating each month's context. Added EXTRACT(MONTH FROM o.OrderDate) as OrderMonth and corrected the grouping and ordering.",
            "The original SQL query is mostly correct but may incorrectly include this year's data if today\u2019s date is within a year from the previous day last year. Adding `AND o.OrderDate < CURDATE()` ensures the query only considers data from the previous year.",
            "The original query contains a mistake in the COUNT calculation for on-time delivery. It should use a CASE WHEN clause instead of COUNT with a WHERE condition inside. I also added a WHERE clause to filter the last year.",
            "The SQL query correctly identifies the highest single order value. It calculates the total value for each order, sorts the orders in descending order by their value, and then retrieves the top result using LIMIT 1.",
            "The original query used DATE_FORMAT which is not standard ANSI SQL. Replaced with TO_CHAR function for dates.",
            "The SQL query correctly calculates which customer placed the highest number of orders by grouping by CustomerID, counting the orders, and ordering in descending order with a limit of 1. No changes are necessary.",
            "The SQL query correctly calculates the average order value per month using the given formula from the metrics definitions. The use of DATE_FORMAT to group by month is appropriate, and the JOIN between orders and [Order Details] is correctly performed. The calculation of total sales divided by the distinct order count for each month matches the metric's definition for Average Order Value. This query appears to be correct and in accordance with the provided schema and metrics definitions.",
            "The query is mostly correct; however, ANSI SQL does not have a DATE_FORMAT function. Instead, use EXTRACT(YEAR FROM orders.OrderDate) || '-' || EXTRACT(MONTH FROM orders.OrderDate) for proper ANSI SQL format.",
            "The original query used DATE_FORMAT, which is not part of ANSI SQL. It has been replaced by TO_CHAR for consistency with ANSI SQL standards.",
            "The SQL query is correctly structured for the given question. It calculates the total revenue for each product and orders them in descending order to find the product generating the most revenue. The LIMIT 1 ensures only the top product is selected.",
            "The SQL query is correct. It selects the CustomerID from the orders table and counts the number of orders for each customer, grouping by CustomerID.",
            "The SQL query is correctly structured to find the shipping method used the most. It selects the ShipVia column and counts the occurrences, grouping by ShipVia and ordering the results in descending order by count, then limits the result to the top one. The query is correct.",
            "The SQL query correctly computes the average discount applied to orders each month by joining the orders and [Order Details] tables. It uses DATE_FORMAT to group by months and applies the AVG function to calculate the average discount.",
            "The SQL query correctly retrieves the EmployeeID with the highest number of orders handled by grouping the results by EmployeeID, counting the number of orders, and ordering them in descending order. The LIMIT 1 clause ensures only the top employee is returned. No corrections needed.",
            "The SQL query is correct. It calculates total sales for each country by joining the `orders` and `[Order Details]` tables and grouping by `ShipCountry`.",
            "The SQL query is correct and accurately retrieves the number of orders with a freight cost above $50.",
            "The SQL query correctly addresses the business question by joining the 'orders' and '[Order Details]' tables on 'OrderID'. It calculates the total sales per month using the specified formula. The query groups by the month and orders the results to find the highest total sales per month, using 'LIMIT 1' to return the month with the highest sales. The use of DATE_FORMAT for grouping by month is a correct approach to extract the 'YYYY-MM' format from 'OrderDate'. Therefore, the query is correct.",
            "The query is mostly correct. It uses the correct join and aggregation. The changes include using TO_CHAR to format the date as required by ANSI SQL, instead of DATE_FORMAT.",
            "The original query uses DATE_FORMAT, which is specific to MySQL. In ANSI SQL, you should use TO_CHAR for formatting dates. Additionally, ensure that integer division is avoided by multiplying the numerator by 1.0.",
            "The SQL query is correct. It calculates the total freight cost for each shipping method by grouping the records in the 'orders' table by 'ShipVia' and summing up the 'Freight' costs.",
            "The query is correct. It correctly counts the number of shipments per city, orders them in descending order of the number of shipments, and limits the result to the city with the most shipments.",
            "The original query uses MySQL's DATE_FORMAT function, which is not part of the ANSI SQL standard. I've replaced it with TO_CHAR, which is more universal for formatting dates as 'YYYY-MM'. Everything else in the query is correct for calculating the average order value over time.",
            "The SQL query correctly determines the number of orders shipped after the required date by counting entries where ShippedDate is later than RequiredDate. The query is syntactically and logically correct.",
            "The SQL query is correct, as it correctly selects the average unit price grouped by the month extracted from the OrderDate.",
            "Corrected the use of date formatting function from TO_CHAR to DATE_FORMAT for ANSI SQL compliance.",
            "The original query is almost correct. The subquery needs to group by both OrderID and CustomerID to ensure each order value is calculated per customer. The rest of the query correctly calculates the average order value for each customer.",
            "The original query had an incorrect syntax for counting conditional rows. The corrected query uses a CASE statement to properly calculate the on-time delivery rate for each shipping method.",
            "The SQL query accurately calculates the total sales revenue for each product and limits the results to show the top 5 products by revenue. The use of aliases like 'od' is consistent, and the query correctly implements the ORDER BY and LIMIT clauses to address the business question.",
            "The SQL query is correct. It selects OrderID from the 'Order Details' table where the Discount applied is greater than 20%.",
            "The SQL query is correct. It accurately retrieves the total freight cost grouped by country from the orders table.",
            "The query correctly retrieves the number of orders for each customer but LIMIT 1 restricts the output to one customer. Remove LIMIT 1 to find all customers with the highest number of orders.",
            "The original query did not incorporate the discount correctly in the TotalSales calculation. The corrected query uses the formula SUM(UnitPrice * Quantity * (1 - Discount)) for TotalSales and SUM(UnitPrice * Quantity * Discount) for TotalDiscount.",
            "The initial query calculated the average quantity per product line, not per order. The revised query first calculates the total quantity per order and then averages those totals.",
            "The query correctly calculates the average freight cost for each shipping method and orders them in ascending order to get the one with the least average. The LIMIT 1 ensures that only the shipping method with the lowest average freight cost is returned. The SQL query is correct.",
            "The original query incorrectly uses 'ShipCity = ShipCity' which is always true and doesn't check if the shipping address contains the city. The revised query checks if the shipping address contains the city name, indicating same-city delivery, which more accurately answers the question.",
            "The query correctly calculates total sales per month for the last 6 months and computes the cumulative sales. However, ensure the date range covers exactly the last 6 full months by using DATE_TRUNC. The use of TO_CHAR should be replaced with correct date functions depending on SQL dialect, but as per ANSI SQL, keeping it as is.",
            "The original query is mostly correct but needs clarification on requirements. The calculation for OrderSize using (TotalValue - Freight) seems appropriate based on the need for 'order size' definition in context. Ensure the scenario demands Freight deduction from TotalValue. Otherwise, logic seems consistent with provided definitions and schema.",
            "The SQL query is correct. It selects orders where the ShippedDate is NULL, indicating that they were not shipped.",
            "The SQL query is correct and accurately computes the total number of orders for each employee. It groups the orders by EmployeeID and counts the OrderID for each group, which answers the business question effectively.",
            "The SQL query correctly selects the ShipRegion and calculates the order volume by counting the OrderID for each region. It then groups by ShipRegion and orders the results in descending order by OrderVolume. The query is accurate and answers the business question.",
            "The SQL query is correct. It selects the OrderID and calculates the difference between ShippedDate and OrderDate using the DATEDIFF function, naming the result as ShippingDelay.",
            "The SQL query is correct. It effectively counts the total number of orders for each customer by grouping the results by CustomerID.",
            "The original query uses DATE_FORMAT which isn't ANSI SQL standard; DATE_TRUNC is more appropriate. Also, ensure that 'OrderDate' is truncated correctly for monthly aggregation.",
            "The SQL query correctly identifies the employee with the most processed orders by counting the OrderID per EmployeeID and ordering the results in descending order to retrieve the top result. No corrections are needed.",
            "The SQL query correctly identifies the most frequently ordered product by counting the occurrences of each ProductID in the [Order Details] table, grouping by ProductID, and ordering the results in descending order of the count. Using LIMIT 1 returns the product with the highest count. The query is correct according to the question.",
            "The SQL query is correct for the given question. It accurately counts the orders where the ShippedDate is on or before the RequiredDate.",
            "The original SQL query is correct and properly calculates the total discount given for each month by summing the product of UnitPrice, Quantity, and Discount per order detail. The use of DATE_FORMAT to extract the month and year is appropriate.",
            "The SQL query is correct. It joins the 'orders' and '[Order Details]' tables, calculates total sales per country, and orders them by total sales in descending order, returning the country with the highest sales.",
            "The query is mostly correct. The function CURDATE() was updated to CURRENT_DATE to align with ANSI SQL standards.",
            "The SQL query correctly counts the number of orders per shipping method (ShipVia) and orders them in descending order to identify the most commonly used method. The use of 'LIMIT 1' ensures only the top result is returned, which aligns with the question's requirement.",
            "The query is correct. It correctly counts the number of orders where the Freight exceeds $100.",
            "The original query misses the condition to restrict results to the past year. It should include a WHERE clause to filter the OrderDate for the last year.",
            "The SQL query is correct. It groups orders by ShipCity, counts OrderID for each group, and orders the results in descending order. The LIMIT 1 returns the city with the highest number of shipments, which matches the business question.",
            "The SQL query is correct. It accurately counts the number of orders where the 'ShippedDate' is NULL, indicating they are pending shipment.",
            "The SQL query correctly calculates the total revenue generated without any discounts by multiplying the UnitPrice and Quantity for each Order Detail. Therefore, the query is correct.",
            "The SQL query correctly calculates the average delivery time by region using DATEDIFF, groups by ShipRegion, and orders the results by AvgDeliveryTime in descending order. The query is correct.",
            "The SQL query correctly calculates the total freight cost grouped by each shipping method (ShipVia). The use of SUM to aggregate Freight cost and GROUP BY to categorize by ShipVia is appropriate. No errors found.",
            "The original query correctly joins the 'orders' and '[Order Details]' tables on 'OrderID' and calculates the distinct product count for each month. However, the GROUP BY clause should use DATE_FORMAT(OrderDate, '%Y-%m') directly instead of the alias 'Month'. The corrected query reflects this change.",
            "The query is correct. It selects pairs of products that appear in the same order by joining the 'Order Details' table with itself. The condition 'od1.ProductID < od2.ProductID' ensures that each pair of products is counted only once. The query then groups by product pairs and orders the results by the pair count in descending order, limiting the result to the top 5 pairs. The logic aligns with finding commonly paired products.",
            "Corrected the SQL to adhere to ANSI SQL standard by using CURRENT_DATE and adjusting the interval syntax.",
            "The SQL query correctly identifies the product with the highest total sales by calculating the total sales for each product and ordering the results in descending order, then limiting the output to the top result. The query is correct based on the provided schema and metrics.",
            "The original query incorrectly attempts to use AVG on a calculation that is already aggregated. The corrected query calculates the total sales and divides by the distinct order count to directly find the average order value for the year.",
            "The SQL query is correct. It selects the CustomerID and counts the number of orders for each customer, grouped by CustomerID.",
            "Added a condition to ensure only orders with a non-null ShippedDate are considered as fulfilled.",
            "The SQL query correctly calculates the total sales value for each ProductID by summing the product of UnitPrice, Quantity, and (1 - Discount). It then groups by ProductID and orders the results in descending order of total sales. The query is correct.",
            "The SQL query is correct. It selects the EmployeeID along with the count of OrderID, grouped by EmployeeID and orders by TotalOrders in descending order to find the employee with the most handled orders.",
            "The SQL query is correct for the given question. It calculates the average fulfillment time for each employee using the difference between 'ShippedDate' and 'OrderDate', grouped by 'EmployeeID'.",
            "The SQL query is correct. It selects the 'ShipVia' column, counts the 'OrderID' for each shipping method, groups by 'ShipVia', and orders the results by 'UsageCount' in descending order to determine the most frequently used shipping method.",
            "The query is almost correct. However, to ensure a decimal result for the on-time rate, multiply by 1.0 or use CAST. This avoids integer division.",
            "The query correctly calculates the total freight for each month and orders the results by highest freight cost. However, to identify the single month with the highest freight, it should return only the top result. Adding LIMIT 1 achieves this.",
            "The original query did not join the orders table, which is necessary to access the 'CustomerID'. The corrected query includes a join between the 'orders' table and the '[Order Details]' table on 'OrderID'.",
            "The query is correct for calculating the total number of products ordered each month. It joins the 'orders' and '[Order Details]' tables, aggregates the product quantities by month, and groups by the formatted order date to achieve the desired monthly granularity.",
            "The SQL query correctly calculates the total order value for each city and retrieves the top 5 cities with the highest order values. No changes are needed.",
            "Correct the calculation of discount averaging. It should account for quantity and unit price. Use the sum of discount applied values divided by the sum of quantity for accurate weighting.",
            "The SQL query is correct. It calculates total sales using the formula provided in the business metrics and groups the results by ShipCountry to find the total sales revenue for each shipping country.",
            "The SQL query is correct. It selects the OrderID from the [Order Details] table, groups the results by OrderID, and uses the HAVING clause to filter out orders with a total value greater than $1000 as calculated by the specified formula.",
            "The original query attempted to select directly from a subquery without applying a correlation function. The corrected query uses the CORR function, which calculates the correlation coefficient between FreightCost and OrderValue, which is what the business question requested.",
            "The SQL query is correct. It calculates the average delivery time for each region by using DATEDIFF to find the difference between ShippedDate and OrderDate, groups by ShipRegion, and sorts the results in descending order of average delivery time.",
            "The original query divides an integer by another integer, which can lead to integer division in some SQL dialects. Multiplying by 1.0 ensures the division results in a decimal value, making the OnTimeRate accurate.",
            "The query is correct. It calculates total sales revenue by summing the product of UnitPrice, Quantity, and the factor (1 - Discount) for each order detail, grouped by month.",
            "The original query is mostly correct, but the table aliases 'o' and 'od' should be replaced with full table references to stick with standard ANSI SQL. Also, the GROUP BY clause should explicitly use DATE_TRUNC('month', OrderDate) to match the SELECT clause.",
            "The SQL query is correct. It selects the truncated order dates by month and calculates the average difference between the ShippedDate and OrderDate to provide the average fulfillment time per month. No changes are needed.",
            "The original query correctly calculates the on-time delivery rate and uses DATE_TRUNC to group by month. However, to ensure proper decimal division, multiplying the numerator by 1.0 casts it to a decimal format, ensuring accuracy in the division.",
            "The original query is mostly correct, but it's a good practice to use the exact table names and ensure proper SQL syntax, especially with spaces and case sensitivity. The rewritten query maintains these practices.",
            "The original query did not properly handle the date range for the last year. Adding 'AND o.OrderDate < DATE_TRUNC('year', CURRENT_DATE)' ensures we only consider the last full year.",
            "The original query does not consider only fulfilled orders. Adding 'WHERE ShippedDate IS NOT NULL' ensures that only fulfilled orders are counted.",
            "The original query used ORDER BY MaxDelay, which is incorrect for identifying the month with the most delays. Instead, COUNT of delays per month should determine the answer. The correct query counts delays per month and orders by this count, using LIMIT 1 to find the month with the most delays. 'DATE_TRUNC' should be applied to 'ShippedDate' to correctly group by month of shipment.",
            "The SQL query is correct. It correctly selects the shipping method and counts the number of orders for each method, grouping by 'ShipVia' and ordering by the count in descending order.",
            "The query is correct. DATE_TRUNC is correctly used to truncate the OrderDate to the month, AVG is used to calculate the average freight cost, and GROUP BY aggregates the data by month.",
            "The SQL query is correct. It correctly selects the ShipCity and calculates the number of orders for each city, grouping by ShipCity. It then orders the results by the count in descending order and limits the result to the most common city.",
            "The original query counts rows in the [Order Details] table where Discount > 0.2, without ensuring unique orders. To count orders, we should use COUNT(DISTINCT OrderID) to avoid counting multiple lines for the same order.",
            "The SQL query correctly calculates the total sales for each shipping region and orders the results in descending order to find the top-performing region. It then limits the output to one record, which is the region with the highest sales. This aligns with the business question.",
            "The SQL query is mostly correct, but there's a slight error in the subquery's `GROUP BY` clause. Since we're using `Freight` as well, it needs to be included in the `GROUP BY` clause inside the subquery. This doesn't affect the result since each `OrderID` in `orders` has a unique `Freight`, but according to standard SQL practice and to ensure clarity, it should be included.",
            "The SQL query correctly answers the question. It uses a LEFT JOIN to find products with no matching entries in the [Order Details] table, indicating they have never been ordered.",
            "Corrected SQL query by adding the table alias 'o' for 'CustomerID' in the SELECT clause.",
            "The query is mostly correct. Ensured consistent use of table aliases and brackets for '[Order Details]'. The query correctly calculates revenue by summing the product of the unit price, quantity, and discount, grouped by EmployeeID, and orders by the total revenue in descending order. The LIMIT 1 clause is used to return the employee responsible for the highest revenue, which is appropriate.",
            "The original query has an issue with the subquery used for ordering and limiting. The ORDER BY and LIMIT should be applied to a subquery that ranks customers by sales. Also, the inner result should be referenced correctly. Wrapped the customer revenue calculation query as a subquery, aliased it, and corrected the limit clause.",
            "The original query is mostly correct, but the alias 'Year' should be repeated consistently in the GROUP BY clause. I used DATE_TRUNC in both the SELECT and GROUP BY clauses to ensure consistency.",
            "The original query is almost correct, but 'INTERVAL' is not ANSI SQL compliant. 'DATEADD' is used instead. The corrected query calculates the date one year back from the current date in an ANSI SQL compliant way.",
            "The SQL query is correct. It calculates the average discount across all order details.",
            "The query is correct. It calculates the 'Average Order Value' correctly by grouping orders by month using DATE_TRUNC function and computes the total sales divided by unique orders per month.",
            "The SQL query is correct and accurately calculates the total quantity of each product sold. It selects ProductID and sums Quantity for each product, grouping the results by ProductID from the [Order Details] table.",
            "The SQL query correctly identifies the most frequently used shipping method by counting the number of orders grouped by 'ShipVia' and ordering the results in descending order to get the top result. The use of 'LIMIT 1' ensures only the most frequently used method is returned. The query is correct as written.",
            "The SQL query correctly calculates the average fulfillment time per month using DATE_TRUNC to derive the monthly granularity. The function DATEDIFF is used correctly to calculate the duration between ShippedDate and OrderDate. The query is syntactically and logically correct, so no changes are needed.",
            "The SQL query is correct. It correctly calculates the total freight cost grouped by ShipCountry using the SUM function and GROUP BY clause.",
            "The original query uses 'CURRENT_DATE - INTERVAL '3 months'', which may not align with a specific quarter. The corrected query uses 'DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months'' to ensure the calculation is aligned with the last full quarter. Also, adjusted date range to '< DATE_TRUNC('quarter', CURRENT_DATE)' for exclusivity of the current quarter.",
            "The original query used COUNT(od.OrderID), which counts occurrences of OrderID. To count distinct orders, we should use COUNT(DISTINCT od.OrderID). This ensures that a single order with multiple products isn't counted multiple times if those products all have a discount greater than 20%.",
            "The query is correct. It properly counts the number of orders processed by each employee and orders them in descending order to find the employee with the most processed orders, limiting the result to one.",
            "The query is correct. It selects the ShipCity and counts the number of OrderIDs, groups the results by ShipCity, then orders them in descending order based on the count and limits the results to the top three cities.",
            "The SQL query is correct. It groups the 'Order Details' table by quantity, counts the occurrences of each quantity, and orders the result by frequency in descending order to find the most common quantity. The LIMIT 1 ensures only the top result is returned.",
            "The SQL query is correct. It accurately counts the number of orders where the 'ShippedDate' is NULL, indicating they have not been shipped.",
            "The original query uses LIMIT 1 without a subquery alias, which is required in ANSI SQL. This correction ensures the subquery is properly defined and returns the most expensive shipping method by average freight.",
            "The query correctly calculates the average order value per region and orders the results to find the region with the lowest average order value. It is structured correctly and matches the business question.",
            "The SQL query is correct. It calculates the average shipping time for each shipping method by using the DATEDIFF function to find the difference between ShippedDate and OrderDate, and groups the results by ShipVia.",
            "The original query incorrectly extracts the month without considering the year, which could include records from previous years. The correct approach is to calculate the first and last day of the previous month, ensuring the query considers both month and year.",
            "The SQL query is correct. It calculates the total revenue for each product using the specified formula and then orders the results to find the product with the highest revenue.",
            "The query correctly counts orders where the shipped date is on or before the required date, matching the business question.",
            "The SQL query correctly identifies the customer who placed the most orders by counting the number of orders for each customer, grouping by CustomerID, and ordering the results in descending order of order count. The use of LIMIT 1 ensures only the top result is returned. The query is correct.",
            "The SQL query is correct. It correctly counts the number of orders grouped by each shipping method (ShipVia).",
            "The query is correct. It selects the region with the highest number of orders by counting OrderID per ShipRegion, grouping by ShipRegion, and ordering the results in descending order, limiting to the top result.",
            "The original query does not filter the results to include only the past year. Added a WHERE clause to filter orders from the past year. Included EXTRACT(YEAR FROM o.OrderDate) to ensure proper grouping of data by both year and month and added ORDER BY for sorting.",
            "The original query used 'LIMIT 5', which is not ANSI SQL standard. The correct ANSI SQL syntax to limit the number of rows is 'FETCH FIRST 5 ROWS ONLY.' The rest of the query is correct.",
            "The original SQL query uses incorrect syntax by including a WHERE clause within the COUNT function. The corrected query utilizes a CASE statement inside the COUNT to achieve the desired conditional count.",
            "The SQL query is correct. It extracts the day of the week from the OrderDate and counts the number of orders for each day. It then orders the results by the order count in descending order and limits the result to the top day with the highest order volume.",
            "The provided query calculates the average discount directly on each entry. The correct approach is to first sum up the discounts for each order and then calculate the average. Therefore, the query should group by OrderID and then compute the average of these sums.",
            "The query is correct. It selects the ShipCity with the highest order count by grouping by ShipCity, counting the OrderID for each city, ordering by count in descending order, and limiting the result to the top one.",
            "The SQL query is correct as it properly counts the distinct ProductID values in the [Order Details] table, which represents unique products ordered.",
            "The SQL query is correct. It accurately calculates the average freight cost per order by using the AVG() function on the Freight column from the orders table.",
            "The original query is incorrect because the COUNT function does not allow a WHERE clause inside it. Instead, a CASE WHEN statement should be used within COUNT to conditionally count orders where ShippedDate is before or on the RequiredDate.",
            "The original query correctly calculates the total quantity of products sold each month. However, it does not consider the year, which could lead to aggregation issues if the dataset spans multiple years. I've added year extraction and grouping to address this.",
            "The original query does not calculate the average order value correctly. It should divide the total sales by the count of distinct orders per shipping method to find the correct average order value.",
            "The SQL query is correct. It correctly calculates the total sales revenue for orders placed in March 2023 by joining the 'Order Details' and 'orders' tables, applying the appropriate formula, and filtering by the specified date range.",
            "The SQL query correctly retrieves the customer who placed the most orders in 2022. It groups orders by CustomerID, counts the number of orders for each customer, and sorts the results in descending order. The LIMIT 1 clause ensures only the top customer is returned.",
            "The SQL query is correct. It extracts the month from the order date and calculates the average order value for each month in 2023 by dividing the total sales by the count of distinct orders per month. The use of EXTRACT function is appropriate for achieving the required monthly granularity.",
            "The query correctly counts orders where ShippedDate is less than or equal to RequiredDate, and filters by the first quarter of 2023 using the OrderDate. No corrections needed.",
            "The SQL query correctly identifies the customer with the highest revenue last year. The JOIN operation is properly set up between orders and [Order Details], and the aggregation of total revenue per customer is accurate. The use of YEAR function to filter the orders from last year is also correct. No changes are needed.",
            "The query correctly identifies the month and counts the orders shipped on time. However, to ensure ANSI SQL compliance, the `DATE_TRUNC` function should be `EXTRACT(YEAR FROM OrderDate)` and `EXTRACT(MONTH FROM OrderDate)`. Here's a corrected version using ANSI SQL: SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) FROM orders WHERE ShippedDate <= RequiredDate GROUP BY EXTRACT(YEAR FROM OrderDate), EXTRACT(MONTH FROM OrderDate);",
            "The SQL query correctly selects the ProductID with the highest total sales by ordering the summed product sales in descending order and limiting the result to one. The query is accurate as written.",
            "The query correctly calculates the average fulfillment time by month. It uses DATE_TRUNC to group by month and AVG along with DATEDIFF to compute the average fulfillment time.",
            "The query is correct for the given question. It accurately counts the number of orders shipped with 'ShipVia' method 1.",
            "The SQL query is correct as it accurately calculates the total quantity of each product sold each month by using DATE_TRUNC on the OrderDate and grouping by month and ProductID.",
            "The SQL query is correct. It correctly uses DATE_TRUNC to extract the month from OrderDate and counts distinct CustomerID values for each month. The use of GROUP BY with DATE_TRUNC ensures results are aggregated monthly.",
            "The SQL query is correct. It accurately calculates the total freight cost for orders shipped using method 3 by summing the Freight column where ShipVia equals 3.",
            "The original SQL query correctly calculates the number of orders per shipping region and orders them in descending order to find the region with the most orders. It uses GROUP BY, ORDER BY, and LIMIT correctly to achieve the desired result. No changes are needed.",
            "The original query incorrectly calculates the percentage because it doesn't correctly handle the filtering to compute the percentage. The COUNT(*) should be applied conditionally, and it should be based on 'orders.OrderID' to ensure we're only counting once per order in the denominator. The COUNT in the numerator should actually count only the orders with a discount greater than 10%.",
            "The SQL query is correct and will return the month with the highest number of orders by grouping the orders by month and counting the number of orders in each group. It then orders them in descending order and limits the result to the top row, which represents the month with the most orders.",
            "The query is mostly correct. It calculates the average order value per city and orders by descending average order value, limiting to the top city. The calculation for average order value aligns with the metric definition. No changes are needed.",
            "The SQL query is correct. It calculates the total discount given by multiplying the unit price, quantity, and discount for each order detail and grouping the results by month.",
            "The SQL query correctly counts the number of orders where the ShippedDate is NULL, indicating they have not yet been shipped. The query is accurate and correct as per the given business question.",
            "The SQL query is correct. It accurately identifies the country with the most delayed shipments by counting the orders where ShippedDate is greater than RequiredDate, grouping by ShipCountry, and ordering by the count of delayed shipments in descending order, limiting the result to 1.",
            "The SQL query correctly identifies canceled orders where RequiredDate is NULL and modified orders where ShippedDate is different from RequiredDate. The query accurately counts these orders using the specified conditions.",
            "The SQL query is correct. It calculates the total sales revenue for each product by summing up the product of UnitPrice, Quantity, and (1 - Discount) for each ProductID. It then orders the results by ProductSales in descending order and limits the output to the top result, identifying the product with the highest total sales revenue.",
            "The query is correct. It calculates the average number of days between the order date and the shipped date, which aligns with the defined metric for Order Fulfillment Time.",
            "Corrected the SQL syntax to use CASE WHEN for conditional counting, which is more commonly supported in ANSI SQL. Additionally, replaced DATE_FORMAT with strftime for improved compatibility with standard SQL functions.",
            "The query correctly selects the ShipCountry and the total number of orders per country, groups by ShipCountry, and orders the results in descending order by TotalOrders. It then limits the results to 1 to find the country with the highest number of orders. The query is correct as per the business question.",
            "The query correctly counts the number of orders processed by each employee, groups them by EmployeeID, sorts them in descending order, and limits the results to the top 5 employees. The query is correct.",
            "The SQL query correctly calculates the total discount given for each product by multiplying the unit price by the quantity and the discount, then summing these values for each product. The query is correct as per the given question.",
            "The SQL query is correct for the given question. It calculates the average fulfillment speed per month and returns the month with the fastest fulfillment (smallest average). No corrections are needed.",
            "The query correctly calculates the total number of products sold each month by joining the 'orders' and '[Order Details]' tables, grouping by month, and summing the quantities.",
            "The original query calculates the average order value incorrectly by averaging the values directly from the order details. The correct formula divides the total sales by the count of distinct order IDs.",
            "The SQL query correctly counts the number of orders where the shipped date is after the required date, which answers the business question accurately.",
            "The original query incorrectly calculates the highest value order per customer rather than finding the highest single order value. To correct this, we need to calculate the total order value per order and then find the maximum value. Here is the corrected query:\n\nSELECT orders.CustomerID, orders.OrderID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS OrderValue \nFROM orders \nJOIN [Order Details] ON orders.OrderID = [Order Details].OrderID \nGROUP BY orders.OrderID, orders.CustomerID \nORDER BY OrderValue DESC \nLIMIT 1;",
            "The original SQL query used DATE_FORMAT, which is not ANSI SQL standard. The corrected query replaces DATE_FORMAT with TO_CHAR for formatting dates. Everything else in the query is correct according to the business question and metrics definition provided.",
            "The SQL query is mostly correct, but I've replaced CURDATE() with CURRENT_DATE to align with ANSI SQL standards.",
            "The SQL query correctly computes the average freight cost for each shipping method and identifies the shipping method with the highest average. The use of GROUP BY and ORDER BY is appropriate, and LIMIT 1 correctly returns the top result. The query is correct as per the business question.",
            "The original query used COUNT which is incorrect for aggregating quantities. The correct function is SUM to get the total quantity ordered per product.",
            "The original query incorrectly used the aggregation functions. The correct query calculates the average order value per region by dividing the sum of the sales by the count of distinct orders within each region, without using window functions.",
            "The SQL query correctly calculates the total sales revenue per product and identifies the product with the highest sales. The query aggregates sales using the correct formula and orders the results to find the highest total. No changes needed.",
            "The SQL query correctly calculates the total sales for each country and limits the result to the country with the highest total sales. The query is accurate and follows the business question and schema definitions.",
            "The query is correct. It calculates the total freight cost for each month by grouping the orders by month using DATE_FORMAT on the OrderDate column and summing the Freight cost. The query properly matches the business question.",
            "The query correctly calculates the number of orders processed by each employee using COUNT and groups the results by EmployeeID. It orders the results in descending order and limits the output to the top entry, thereby identifying the employee with the highest number of orders. The query is correct as per the question.",
            "The original query calculates the count of late shipments per month, but we need the percentage. The corrected query divides the count of late shipments by the total order count per month and multiplies by 100 to get the percentage.",
            "The SQL query is correct. It counts the number of orders for each shipping method, groups by 'ShipVia', and orders the results in descending order to find the most frequently used shipping method.",
            "The original query used DATE_FORMAT, which is not ANSI SQL compliant. Replaced with DATE_TRUNC to group by month.",
            "The original query did not include a join between the 'orders' table and the '[Order Details]' table, causing a reference error. I've added an INNER JOIN on OrderID to correctly calculate the highest order value.",
            "The SQL query is correct. It counts the number of orders for each city and orders the results in descending order by the number of orders, limiting the output to the top result, which correctly identifies the city with the highest number of orders.",
            "The SQL query is correct. It accurately calculates the total number of products sold per country by joining the 'orders' and '[Order Details]' tables on the OrderID and grouping by ShipCountry, summing the Quantity from '[Order Details]'.",
            "The original query attempts to compute the variance of summed order values directly, which is incorrect. First, the total order value for each order must be calculated, then the variance of these values across a month can be computed. SQL does not support direct computation of variance over aggregates like SUM inside a variance function, so it requires additional steps or a subquery.",
            "The original query incorrectly used DATE_FORMAT, which is not ANSI SQL standard. DATE_TRUNC is used instead. Additionally, table and column names should use double quotes if they contain spaces.",
            "The SQL query used DATE_FORMAT, which is not part of ANSI SQL. Use TO_CHAR for ANSI compliance. The rest of the query logic was correct, including the JOIN, SUM, and ORDER BY clause.",
            "The query does not correctly select the top three products per month. Instead, it sorts all products and limits the entire result to three. Use a subquery or window function to rank products for each month and select the top three.",
            "The SQL query is generally correct for calculating average order value over months. However, DATE_TRUNC should be replaced with a standard function, possibly EXTRACT or DATE_FORMAT, as DATE_TRUNC is specific to certain SQL systems like PostgreSQL. Assuming ANSI SQL, this is suitable but should be adjusted for compatibility with the specific database system.",
            "The SQL query is correct. It calculates the average time taken to fulfill an order each month by truncating the order date to the month, filtering out orders that have not been shipped, and then averaging the difference between the shipped date and the order date.",
            "The SQL query is mostly correct. The use of DATE_TRUNC to aggregate by month and the calculation of OnTimeDeliveryRate using a conditional COUNT is appropriate. The query correctly groups by and orders by Month. Overall, it accurately fetches the required business metric.",
            "The original query was mostly correct, but it did not account for the full one-year range. Added a condition to limit the date range to the last year.",
            "The query is correct. It calculates the total number of orders for each shipping method using the ShipVia column and groups the results accordingly.",
            "The SQL query is correct. It calculates the total freight cost for each country by summing the 'Freight' values, grouping the results by 'ShipCountry.'",
            "The query doesn't address how the discount rate affects total sales; it only calculates total sales and total discounts. To analyze the impact of discount rates, group by discount and then calculate sales for each discount level. Here\u2019s a revised query:\n\nSELECT \n  od.Discount, \n  SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSalesRevenue, \n  SUM(od.UnitPrice * od.Quantity) AS PotentialSalesRevenue, \n  (SUM(od.Discount * od.UnitPrice * od.Quantity) / SUM(od.UnitPrice * od.Quantity)) * 100 AS AverageDiscountPercentage\nFROM [Order Details] od\nGROUP BY od.Discount;",
            "The SQL query is correct. It correctly computes the number of on-time deliveries per country, orders them descending, and limits the results to the top country with the highest on-time deliveries.",
            "The original query correctly computes the total sales revenue per employee by joining the 'orders' and '[Order Details]' tables and summing up the sales per employee. However, it refers to the '[Order Details]' table with alias 'od'. Adjust to use fully qualified names or provide the alias definition correctly.",
            "The original query incorrectly calculates the last quarter by simply subtracting 3 months from the current date. The revised query uses DATE_TRUNC to identify the start of the current quarter and subtracts one quarter to get the previous quarter. This ensures that the full last quarter is considered.",
            "The original query is mostly correct, but it should ensure that the alias 'Month' is defined based on the extracted month from o.OrderDate, and this should be consistently used in the GROUP BY clause for clarity.",
            "The SQL query is correct for identifying the most commonly ordered product by calculating the total quantity for each product and returning the one with the highest total.",
            "The SQL query is correct. It calculates the average fulfillment time for each shipping method by grouping by ShipVia and ensuring that only shipped orders are considered.",
            "The SQL query is correct and adheres to the business question. It correctly calculates the sales revenue per city and orders the results to find the top five cities with the highest sales.",
            "The original SQL query contains a syntax error in the COUNT function. The WHERE clause should be within a CASE WHEN statement to conditionally count orders with discounts.",
            "The query is mostly correct but using `DATE_TRUNC('quarter',...)` is not ANSI SQL standard. Instead, we can use `EXTRACT` functions to achieve similar results. Here's the revised query:\nSELECT EXTRACT(YEAR FROM o.OrderDate) AS Year, CEILING(EXTRACT(MONTH FROM o.OrderDate)/3.0) AS Quarter, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Year, Quarter ORDER BY Year, Quarter;",
            "The original query had an issue with the `DATE_TRUNC` function and interval logic. The corrected query properly calculates the start of the previous month by moving the interval inside `DATE_TRUNC`.",
            "The original query computes the average order value per order across the entire data set, without separating it by customer. To find the average order value per customer, we first need to calculate the total sales for each customer and then take the average of these totals. This requires a subquery that groups sales by customer.",
            "The SQL query aims to calculate the average fulfillment time over the past year. `DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '1 year'` is incorrect for this purpose. Instead, use `CURRENT_DATE - INTERVAL '1 year'`. Thus, the corrected SQL query is: SELECT AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageFulfillmentTime FROM orders o WHERE o.OrderDate >= CURRENT_DATE - INTERVAL '1 year';",
            "The SQL query is mostly correct. It accurately filters orders from the previous month using DATE_TRUNC and INTERVAL. The use of the FILTER clause is appropriate here to calculate the on-time delivery rate. Make sure the SQL dialect supports the FILTER clause as it's not part of ANSI SQL, but commonly supported in some databases.",
            "The original query used DATE_TRUNC which might incorrectly calculate the start of the year rather than evaluating from the current date exactly a year back. Adjusted the WHERE clause to accurately filter orders from exactly one year ago.",
            "The original query correctly calculates the total freight cost for each shipping method in the current year using the DATE_TRUNC function. However, ANSI SQL does not support DATE_TRUNC or CURRENT_DATE in the same way as some specific SQL dialects. Instead, one could use a static date for the current year, e.g., DATE '2023-01-01', or adjust dynamically using `YEAR(CURRENT_DATE)` if the system allows it. If a static date is used, this should be updated yearly.",
            "The query is correct and follows the ANSI SQL standard. The use of INTERVAL '6 months' ensures compatibility across most SQL databases.",
            "The SQL query correctly computes the total sales revenue for each month. DATE_TRUNC is used to group by month, and the JOIN between orders and [Order Details] tables is correctly performed with the appropriate aggregation formula. The query is correct.",
            "The SQL query correctly calculates the average order fulfillment time for orders placed in the year 2022 by using the DATEDIFF function to compute the difference between ShippedDate and OrderDate. The date range in the WHERE clause is accurate for the specified period.",
            "The original query only calculates the count of on-time deliveries without considering the total orders for each shipping method. The corrected query calculates the on-time delivery rate as a percentage of total orders.",
            "The original query is mostly correct, but aliases for tables have been removed for clarity. Using full table names ensures consistency with the schema provided. Table names are enclosed in square brackets for '[Order Details]' as per schema requirements.",
            "The SQL query is correct. It joins the 'orders' table and '[Order Details]' table on 'OrderID' and sums the 'Quantity' by 'EmployeeID', which correctly calculates the total quantity of products sold by each employee.",
            "The SQL query is mostly correct. However, 'LIMIT 5' is specific to some SQL dialects like MySQL. In ANSI SQL, the equivalent approach would involve using 'FETCH FIRST 5 ROWS ONLY'. The rest of the query correctly calculates total sales by customer and orders the results to select the top 5.",
            "The SQL query is correct. It calculates the total freight cost for all orders where the 'ShippedDate' is not null, indicating that the order has been shipped.",
            "The SQL query correctly counts the number of orders where the shipped date is later than the required date, accurately addressing the business question.",
            "The SQL query is correct. It groups the orders by ShipRegion, counts the number of OrderID in each group, and selects the region with the highest count. The use of LIMIT 1 ensures only the top region is selected.",
            "The original query is mostly correct, but it should ensure the two-year range ends before 2023-01-01. Added an end date to the WHERE clause.",
            "The SQL query is correct. It selects the ProductID and sums the Quantity for each product in the [Order Details] table, grouping by ProductID, then orders the results in descending order by QuantitySold, and limits the output to the top 3 products.",
            "The original SQL query is mostly correct, but the usage of table aliases should be consistent with the specified table names. Bracket notations in '[Order Details]' should be used consistently throughout the query. The GROUP BY clause should directly repeat the expression used in the SELECT clause (DATE_TRUNC('month', OrderDate)).",
            "The query is correct. It selects the average discount from the [Order Details] table where the discount is greater than 0, which answers the business question accurately.",
            "The original query is incorrect because it attempts to compare the city of shipment to the city from a subquery, which is not correctly implemented. The corrected query assumes that the city an order is placed from is the same as the shipping city, which may not be represented in the schema. If you meant to find orders shipped from the same city they are shipped to, the schema would need a column for 'OrderCity' or similar. Without it, we can only compare shipments to themselves, which trivially equals the total orders. Correct logic depends on context.",
            "The SQL query is correct for the given business question. It counts the number of orders grouped by the ShipVia column, accurately reflecting the total number of orders for each shipping method.",
            "The original query does not correctly identify the highest value order by a customer but rather sums the order values per customer. To find the customer with the single highest order value, we should group by order and find the maximum order value. Here's the corrected query: SELECT o.CustomerID FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY o.OrderID, o.CustomerID ORDER BY SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) DESC LIMIT 1;",
            "The SQL query is mostly correct, but the GROUP BY clause should explicitly use 'MONTH(o.OrderDate)' instead of just 'Month' to match the expression in the SELECT clause.",
            "The original query doesn't filter by the current quarter. I added conditions to check for the current quarter and year.",
            "The SQL query correctly calculates the order volume by country and selects the top 5 countries. It uses COUNT to count the number of orders per country, groups by ShipCountry, orders the result in descending order of order volume, and limits the result to 5 entries.",
            "The original query is almost correct. Adding `GROUP BY MONTH(o.OrderDate)` ensures clarity in the grouping, even though `GROUP BY Month` worked due to aliasing. The alias definition should match in both SELECT and GROUP BY clauses.",
            "The query is correct. It selects the shipping method (ShipVia) and calculates the total freight cost for each method by using SUM on the Freight column, grouped by ShipVia.",
            "The original query is incorrect because the MONTH and YEAR logic does not correctly account for when the current month is January, which would lead to a negative or wrong month. The corrected SQL query uses an interval to subtract one month from the current date.",
            "The SQL query correctly counts the number of unique customers who placed orders in the first half of 2023, using the correct date range and DISTINCT function.",
            "The SQL query is correct and accurately calculates the average discount across all orders from the [Order Details] table.",
            "The query is correct and accurately calculates the average order fulfillment time by city, ordering by highest fulfillment time, and limiting to the top 3 cities.",
            "The SQL query correctly calculates the total number of orders in each region by grouping the results based on the ShipRegion column and counting the OrderID column. The query is syntactically and logically correct.",
            "The original query incorrectly calculates the average quantity by considering each product line, not per order. The corrected query joins 'Order Details' with 'orders' to ensure that the average is calculated per order and uses 'GROUP BY' to achieve this. However, 'GROUP BY' is implicit as we are averaging per order within each line.",
            "The SQL query is correct. It groups the orders by shipping method, calculates the total freight cost for each method, and then orders the results in ascending order, returning the shipping method with the lowest total freight cost.",
            "The original query incorrectly counts the number of order details rows with discounts, rather than the number of distinct orders. Correcting to count distinct OrderID.",
            "The SQL query is correct. It calculates the total sales revenue generated by each employee by joining the 'orders' and '[Order Details]' tables and grouping by 'EmployeeID'. The formula for calculating total sales is applied correctly.",
            "The original query does not use DISTINCT in COUNT for OrderID, which could lead to incorrect averaging if there are multiple entries for the same order in the 'Order Details' table. The corrected query adds DISTINCT to ensure each order is only counted once per customer.",
            "The SQL query correctly joins the 'orders' and '[Order Details]' tables on 'OrderID', sums the 'Quantity' of products ordered, and groups the results by 'ShipCountry', which answers the business question accurately.",
            "The query is almost correct. The use of COUNT(DISTINCT OrderID) is unnecessary because OrderID is already the primary key in the orders table, ensuring uniqueness. Therefore, simply using COUNT(OrderID) suffices. The corrected query is:\n\nSELECT CustomerID, COUNT(OrderID) FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY CustomerID",
            "The query correctly joins the 'orders' and '[Order Details]' tables and calculates the total sales revenue per product. However, the time period needs to be adjusted to capture the entirety of the last quarter. The WHERE clause should include both a start and end date for the last quarter. Added 'AND OrderDate < DATE_TRUNC('quarter', CURRENT_DATE)' to fix the issue.",
            "The SQL query is mostly correct, but the function to truncate the date should be compatible with ANSI SQL standard. Instead of DATE_TRUNC, we should use EXTRACT to filter by the month and year. The corrected query is: SELECT SUM(UnitPrice * Quantity * (1 - Discount)) / COUNT(DISTINCT orders.OrderID) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) AND EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE)",
            "The original query correctly identifies the shipping method by counting orders grouped by 'ShipVia' and sorting by the highest count. It uses the 'DATE_TRUNC' function correctly to filter orders from the past six months. However, I slightly adjusted the date calculation for clarity.",
            "The SQL query correctly calculates the average fulfillment time for orders placed this year. It matches the metric 'Order Fulfillment Time' as defined.",
            "The original query correctly identifies orders delivered on or before the required date, but needs a correction for the date range. Added a condition to ensure the query fetches data only for the previous month.",
            "The SQL query was mostly correct, but needed an alias for the count to avoid ambiguity. Additionally, the use of EXTRACT(YEAR FROM CURRENT_DATE) ensures adherence to ANSI SQL standards rather than YEAR().",
            "The original query was mostly correct but needed a small adjustment to ensure we calculate the current quarter's start date correctly. 'CURRENT_DATE - INTERVAL '1 quarter'' incorrectly references the previous quarter. The revised query uses 'DATE_TRUNC('quarter', CURRENT_DATE)' to correctly align with the beginning of the current quarter.",
            "The SQL query correctly calculates the total amount of discount given last year by multiplying the UnitPrice, Quantity, and Discount, and summing it for orders placed last year. The join and date condition are properly handled.",
            "The original query erroneously includes the current month. The corrected query ensures that only the last month is considered by adjusting the date range accordingly.",
            "The original query was missing DISTINCT for counting unique orders. The correct query ensures DISTINCT orders are counted.",
            "The SQL query is mostly correct, but there is a minor syntax issue. The YEAR function is not standard SQL. Use EXTRACT(YEAR FROM OrderDate) instead. Here's the corrected query: SELECT (COUNT(OrderID) FILTER (WHERE ShippedDate > RequiredDate) / COUNT(OrderID)::FLOAT) * 100 AS LateDeliveryRate FROM orders WHERE EXTRACT(YEAR FROM OrderDate) >= EXTRACT(YEAR FROM CURRENT_DATE) - 5;",
            "The original SQL query is correct. It counts the number of orders for each city, orders them in descending order, and retrieves the city with the highest count.",
            "The original query was missing a WHERE clause to filter for a specific country. This correction adds the filter.",
            "The query is correct. It calculates the average fulfillment time by using the DATEDIFF function between ShippedDate and OrderDate, grouped by the ShipVia column. No changes are necessary.",
            "The original query did not correctly filter the date range to include orders from the past complete month. The WHERE clause was adjusted to filter based on the correct past month's interval.",
            "The query correctly calculates the total quantity of products ordered by each customer in the last year. It joins the 'orders' and '[Order Details]' tables and filters by the previous year using the OrderDate. The GROUP BY clause is correctly applied to CustomerID to aggregate the results.",
            "The query is correct. It accurately calculates total sales, joining the 'orders' and '[Order Details]' tables, filtering by the specified date range in January 2023.",
            "The SQL query correctly answers the business question by selecting the customer who placed the most orders in the specified date range of the previous year. The query appropriately uses COUNT, GROUP BY, and ORDER BY to achieve this. No changes are necessary.",
            "The original query is counting orders based on when they were placed, not when they were shipped. To correct this, use ShippedDate in the BETWEEN clause: 'AND DATE(ShippedDate) BETWEEN '2023-03-01' AND '2023-03-31';'. The corrected query should be: SELECT COUNT(OrderID) FROM orders WHERE ShippedDate <= RequiredDate AND DATE(ShippedDate) BETWEEN '2023-03-01' AND '2023-03-31';",
            "The SQL query correctly calculates the total revenue per product and orders them in descending order to identify the top three products. The use of SUM with the correct formula for calculating revenue is accurate, and the GROUP BY and ORDER BY clauses are correctly used. The LIMIT clause effectively restricts the result to the top three products. The query appears to be correct according to the provided schema and business question.",
            "The query correctly identifies the employee who processed the most orders in Q1 2023 by counting orders per EmployeeID within the specified date range. It correctly uses ORDER BY and LIMIT to find the top result.",
            "The original query is almost correct, but ensure the GROUP BY clause uses the exact transformation as the SELECT clause. Here, Group by DATE_FORMAT(OrderDate, '%Y-%m') instead of just Month.",
            "The original query is incorrect because it filters for the wrong quarter. Assuming the current year is 2023 and 'last quarter' refers to Q3 (July to September), the date range should be updated accordingly.",
            "The original query correctly counted orders shipped late by checking if ShippedDate is greater than RequiredDate. However, using BETWEEN requires exact dates, whereas using YEAR(OrderDate) = 2022 directly selects the entire year 2022, making it more concise.",
            "The original query is missing the condition to filter orders only from 2023. Added WHERE YEAR(OrderDate) = 2023 to correct this.",
            "The SQL query is correct and aligns with the business question.",
            "The original query had a syntax error. The corrected query uses a CASE statement to count orders where Discount is 0. The multiplication by 100.0 is used to ensure floating-point division.",
            "The SQL query is correct. It correctly counts distinct products from 'Order Details' in April 2023 by checking the order dates in the 'orders' table.",
            "The SQL query is correct. It calculates the total spending per customer in June 2023, groups by CustomerID, and orders the results in descending order to find the customer who spent the most, limiting the result to one.",
            "The query correctly calculates the total sales per month using the given formula, but it does not calculate the 'growth' from one month to the next. To get month-by-month growth, you need to compare each month's total sales to the previous month's total sales. Here is a corrected version that includes the growth calculation:\n\nWITH MonthlySales AS (\n    SELECT DATE_FORMAT(O.OrderDate, '%Y-%m') AS Month, \n           SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales\n    FROM orders O\n    JOIN [Order Details] OD ON O.OrderID = OD.OrderID\n    GROUP BY DATE_FORMAT(O.OrderDate, '%Y-%m')\n)\nSELECT Month, \n       TotalSales, \n       LAG(TotalSales) OVER (ORDER BY Month) AS PreviousMonthSales,\n       (TotalSales - LAG(TotalSales) OVER (ORDER BY Month)) / LAG(TotalSales) OVER (ORDER BY Month) * 100 AS GrowthPercentage\nFROM MonthlySales\nORDER BY Month;",
            "The query is correct. It accurately counts the number of orders with a freight cost greater than $50.",
            "The SQL query correctly calculates the average discount applied for each product by grouping by ProductID and using the AVG function on the Discount column. No corrections are needed.",
            "The SQL query is correct. It calculates the total value for each order and retrieves the OrderID with the highest value using ORDER BY and LIMIT 1.",
            "The SQL query is correct. It first identifies the top product based on the total sales and then calculates the average quantity per order for that product.",
            "The query is correct. It accurately selects unique products ordered each month by joining the orders and order details tables, then grouping by month.",
            "The SQL query correctly calculates the total sales revenue for each product and retrieves the top 5 products by sales revenue. The use of SUM to calculate the sales and ORDER BY to sort the results is accurate. The LIMIT clause correctly restricts the output to the top 5 products. The query is correct and adheres to ANSI SQL standards.",
            "The SQL query is almost correct. However, ANSI SQL does not have the `DATE_FORMAT` function. Instead, we can use the `EXTRACT(YEAR FROM orders.OrderDate)` and `EXTRACT(MONTH FROM orders.OrderDate)` to achieve this. Here is the corrected version:\n\nSELECT EXTRACT(YEAR FROM orders.OrderDate) AS year, EXTRACT(MONTH FROM orders.OrderDate) AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_fulfillment_time FROM orders GROUP BY EXTRACT(YEAR FROM orders.OrderDate), EXTRACT(MONTH FROM orders.OrderDate);",
            "The SQL query is mostly correct, but it lacked multiplication by 100.0 for accurate percentage calculation. Corrected the division to use floating-point arithmetic.",
            "The original query used DATE_FORMAT which is not ANSI SQL. It was corrected to use TO_CHAR for formatting dates, which is more standard across SQL implementations. The logic of the query to calculate total sales and find the month with the highest sales is correct.",
            "The SQL query is correct. It groups the orders by EmployeeID and counts the number of orders for each employee.",
            "The query is generally correct, but we want the average discount per order, so it should calculate the average discount for each order before averaging it for the month. The corrected query is:\n\nSELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(order_avg_discount) AS average_discount\nFROM (\n    SELECT orders.OrderID, AVG([Order Details].Discount) AS order_avg_discount\n    FROM [Order Details]\n    JOIN orders ON orders.OrderID = [Order Details].OrderID\n    GROUP BY orders.OrderID\n) AS order_discounts\nGROUP BY month;",
            "The query is correct, but it's best practice to use the actual aggregation expression in the HAVING clause instead of the alias.",
            "The SQL query correctly calculates the number of orders per region and orders the results in descending order, selecting the top result. The query is correct.",
            "The SQL query correctly calculates the average shipping cost per order by using the AVG function on the Freight column in the orders table. No corrections are needed.",
            "The SQL query is correct. It selects the city and calculates the total sales for each city by summing the product of unit price, quantity, and discount factor from the 'Order Details' table, joining it with the 'orders' table. It then groups results by city and orders by total sales in descending order, limiting the output to the top 5.",
            "The SQL query is correct. It calculates the total freight cost for each shipping country by summing the 'Freight' column and grouping the results by 'ShipCountry'.",
            "The SQL query correctly identifies products that were never ordered by selecting those ProductIDs from the 'products' table that do not appear in the 'Order Details' table. The query uses the NOT IN clause to filter out products that have been ordered, thereby providing a list of products that have never been purchased. This query is correct and properly answers the given business question.",
            "The original query uses `DATE_FORMAT`, which is not part of the ANSI SQL standard. Instead, I used `EXTRACT` to obtain the year and month from `OrderDate`. The `GROUP BY` clause was updated to include both year and month separately.",
            "The original query is missing an INNER JOIN on the 'orders' table to retrieve the order details with discounts greater than 20%. The DISTINCT keyword is used to ensure unique OrderIDs are returned.",
            "The initial query is incorrectly retrieving OrderID instead of counting them. The COUNT function should be used to find the number of orders shipped within 2 days.",
            "The SQL query is correct. It calculates the total sales value per customer by joining the orders and [Order Details] tables, then ordering the results to find the customer with the highest sales, limiting the result to the top customer. No changes needed.",
            "The query correctly calculates the total sales revenue for each product by summing up the UnitPrice multiplied by Quantity, adjusted for any Discount, and orders the products by TotalSales in descending order. It properly uses the GROUP BY clause on ProductID to calculate the total sales for each product individually and the ORDER BY clause to sort the results. The query is correct.",
            "The query is correct. It correctly groups the orders by CustomerID, counts the total number of orders per customer, and orders the results to find the customer with the most orders. The use of LIMIT 1 ensures only the top customer is returned.",
            "The original query had a syntax error with the COUNT and WHERE. Corrected by using CASE WHEN inside COUNT for correct filtering and replaced DATE_FORMAT with EXTRACT for ANSI compliance.",
            "The provided SQL query correctly answers the business question by counting the number of orders placed by each employee. No changes are necessary.",
            "The SQL query correctly calculates the total discount given on all orders each month by multiplying the unit price, quantity, and discount for each order detail and summing the result. The orders are grouped by month using the DATE_FORMAT function to extract the year and month from OrderDate. The query is correct as per the business question.",
            "The SQL query correctly calculates the total sales revenue for each customer and retrieves the top 5 customers by total sales revenue. The use of a JOIN between 'orders' and '[Order Details]' on 'OrderID' is appropriate, and the calculation of total sales with the formula is accurate. The GROUP BY, ORDER BY, and LIMIT clauses are used correctly to achieve the desired result. No changes are needed.",
            "The SQL query is correct for calculating the average shipping time by month. The usage of DATE_FORMAT to extract 'YYYY-MM' and the function AVG(DATEDIFF(ShippedDate, OrderDate)) are appropriate for this requirement.",
            "The SQL query is correct. It selects the product with the highest average discount by calculating the average discount for each product, ordering by the average discount in descending order, and using LIMIT 1 to return the product with the highest average discount.",
            "The SQL query is correct as it accurately calculates the total freight cost by country and orders the result in descending order of the freight cost.",
            "The original query had an improper syntax. The WHERE clause should be used to filter results, not in the SELECT clause. Also, DATE_FORMAT is not standard ANSI SQL; using TO_CHAR with a proper date format to extract the year and month is more appropriate for ANSI SQL.",
            "The query is correct. It selects the city with the highest number of orders by counting OrderID grouped by ShipCity and orders them in descending order, returning the top result with LIMIT 1.",
            "The query is mostly correct but needs to group by the expression DATE_FORMAT(o.OrderDate, '%Y-%m') rather than using the alias 'Month', which might cause an issue in some databases.",
            "The query correctly calculates the average order value per region by aggregating order details and grouping by ShipRegion. No corrections are needed.",
            "The SQL query correctly retrieves the top 5 employees based on the total number of orders they handled. It groups the results by 'EmployeeID', counts the 'OrderID' for each employee, orders the results in descending order by 'TotalOrders', and limits the output to the top 5. The query is accurate and aligns with the business question.",
            "The SQL query was almost correct. The main issue was the use of DATE_FORMAT and a missing quotation for the table name. DATE_TRUNC is a standard way to retrieve the month portion of a date. Additionally, using correct identifier quoting for the table name [Order Details] with double quotes in ANSI SQL.",
            "The query is correct assuming the environment supports the YEAR() and CURDATE() functions. It correctly counts orders per employee for the previous year, groups them by EmployeeID, and orders by the count to get the employee with the most orders.",
            "The original query incorrectly uses DATE_FORMAT, which is not standard ANSI SQL. Replaced with EXTRACT to ensure compliance with ANSI SQL.",
            "The SQL query is almost correct, but it groups by OrderDate instead of ShippedDate. Change the grouping to ShippedDate to match the question's requirement of orders 'shipped on time per month'. Additionally, the DATE_FORMAT function is not ANSI SQL compliant. Use EXTRACT function. Here's the corrected query: SELECT EXTRACT(YEAR FROM ShippedDate) AS Year, EXTRACT(MONTH FROM ShippedDate) AS Month, COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY Year, Month;",
            "The original query does not consider the year for determining the last quarter, which can lead to errors when the current date is in the first quarter. The corrected query includes checking the year.",
            "The SQL query is correct and accurately calculates the average order fulfillment time for each shipping method. It correctly uses the DATEDIFF function to calculate the difference between the ShippedDate and OrderDate, and groups the results by ShipVia.",
            "The original query does not account for the year properly, which could lead to incorrect results if it is run in January. The corrected query adjusts for this by using 'CURRENT_DATE - INTERVAL 1 MONTH' to fetch both year and month for the correct previous month.",
            "The original query uses DATE_FORMAT which is not part of ANSI SQL. Changed it to TO_CHAR for ANSI compliance.",
            "The SQL query correctly identifies the customer who placed the highest number of orders last year. It uses the YEAR function to filter orders from the previous year, groups by CustomerID to count orders per customer, and orders the results in descending order to find the maximum, using LIMIT 1 to return only the top result. No corrections are needed.",
            "The original query counts all order details with a discount, potentially counting the same order multiple times if it contains multiple discounted items. Using COUNT(DISTINCT o.OrderID) ensures each order is only counted once, even if multiple items in the order have discounts.",
            "The original query incorrectly uses 'OrderDate' to filter the current month's orders. It should use 'ShippedDate' instead to reflect orders fulfilled during the current month. Added year condition to ensure it filters within the current year as well.",
            "The query incorrectly uses the current quarter without considering the year boundary. Added a condition to check for the previous year when the current quarter is Q1.",
            "The original query was mostly correct, but it's important to ensure that division results in a decimal division; hence, using 100.0 instead of 100. This ensures correct calculation of percentage.",
            "The original query does not correctly handle the month and year subtraction for determining last month. The updated query uses 'CURDATE() - INTERVAL 1 MONTH' to correctly reference orders from the previous month while taking into consideration the year as well.",
            "The SQL query is correct. It selects the ShipCountry and counts the OrderID for orders placed in the current year, grouped by ShipCountry.",
            "The SQL query is correct and retrieves the top 5 products by sales volume for the current year. It correctly joins the 'Order Details' with 'orders', filters by the current year, groups by ProductID, and limits the result to the top 5 based on total quantity.",
            "The query needs to ensure that orders are selected from the correct year, especially when the current month is January. Added YEAR comparison to handle year boundary.",
            "The SQL query correctly identifies orders that were shipped after their required date by selecting OrderID where ShippedDate is greater than RequiredDate. This matches the business question accurately.",
            "The SQL query correctly identifies the customer with the highest average order value by calculating the average using the appropriate formula. The query joins the 'orders' and '[Order Details]' tables on 'OrderID', and then groups by 'CustomerID' to compute the average order value per customer. The 'ORDER BY' clause is correctly used to sort in descending order, and 'LIMIT 1' ensures only the top result is returned.",
            "The original query is mostly correct, but it is missing a condition to ensure the calculation is within the current year. Adding 'AND YEAR(OrderDate) = YEAR(CURDATE())' ensures that only orders from the current month and year are considered.",
            "The SQL query is mostly correct, but ANSI SQL uses INTERVAL to handle date arithmetic. Here\u2019s the revised query: SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders WHERE OrderDate >= CURRENT_DATE - INTERVAL '1 YEAR' GROUP BY CustomerID ORDER BY TotalOrders DESC;",
            "The SQL query is mostly correct, but it should be using DATE_TRUNC on ShippedDate for consistency in identifying on-time orders per month. The revised query is: SELECT DATE_TRUNC('month', ShippedDate) AS Month, COUNT(*) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY Month;",
            "The query is almost correct, but the calculation for the start of the last quarter is incorrect. DATEADD with 'quarter' and CURRENT_DATE is not valid SQL. The correct way to calculate the start of the last quarter is more complex, involving determining the current quarter and adjusting accordingly. Below is the corrected query.",
            "The SQL query correctly calculates the average fulfillment time by country using AVG with DATEDIFF, and it groups the results by ShipCountry. The query aligns with the schema and business metric definition provided.",
            "The original query counts all order details with a discount, but duplicates OrderIDs can lead to overcounting. We should count distinct OrderIDs in [Order Details] with a discount.",
            "The original query was missing a condition to filter orders for the current year. Adding a WHERE clause to filter the current year's orders resolves this issue.",
            "The query correctly calculates the average discount rate across all orders by using the AVG function on the Discount column in the [Order Details] table. The query is correct and requires no changes.",
            "The SQL query correctly calculates the total freight cost per shipping method by grouping the 'orders' table by the 'ShipVia' column and summing the 'Freight' costs. No corrections are needed.",
            "The query correctly counts the number of orders with a NULL ShippedDate, indicating they are pending shipment. No corrections are needed.",
            "The query is correct and calculates total sales for each customer by summing the product of unit price, quantity, and discount for each order detail. It correctly groups by CustomerID and orders the results to find the top 10 customers by total sales.",
            "The original SQL query is mostly correct, but it does not compute the monthly growth rate in total sales revenue as requested. The SQL needs an additional calculation for growth rate. Here's a corrected version: SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)), 1) OVER (ORDER BY DATE_TRUNC('month', OrderDate)) AS PreviousMonthSales, (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) - LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)), 1) OVER (ORDER BY DATE_TRUNC('month', OrderDate))) / NULLIF(LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)), 1) OVER (ORDER BY DATE_TRUNC('month', OrderDate)), 0) AS GrowthRate FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_TRUNC('month', OrderDate);",
            "The original query mistakenly calculates the average directly on the price and quantity adjusted for discount. Instead, it should compute the total sales for each country and divide it by the number of distinct orders per country to correctly calculate the average order value.",
            "The provided query was mostly correct; however, to ensure proper division and avoid integer division issues, I modified it to multiply by 100.0 instead of 100.",
            "The SQL query correctly calculates the average order fulfillment time for each shipping region and orders the results to identify the regions with the fastest fulfillment. It uses the DATEDIFF function to compute the time difference between 'ShippedDate' and 'OrderDate', and groups by 'ShipRegion' to calculate the average (AVG) per region. It then orders the results by 'FastestFulfillmentTime' in ascending order to find the fastest times and limits the output to the top five regions. The query is correct.",
            "The SQL query correctly uses the CORR function to determine the correlation between the quantity and discount in the [Order Details] table, aligning with the business question.",
            "The query correctly identifies the employee who handled the highest number of orders last month by using DATE_TRUNC to extract the month from OrderDate. The interval subtraction should be within the DATE_TRUNC function. Corrected this in the query.",
            "The SQL query is correct. It calculates the total sales revenue from joined tables 'orders' and '[Order Details]' where the order date is in the year 2023, according to the defined metric for Total Sales.",
            "The SQL query is correct. It selects the month and counts the number of orders for each month in 2023, then orders the result in descending order by the number of orders, and finally limits the result to the top entry.",
            "The query correctly calculates the average order value per customer for orders placed in 2023. It correctly uses a JOIN between the 'orders' and '[Order Details]' tables and filters by the year 2023. The calculation for average order value per customer uses the defined metric",
            "The SQL query is correct. It correctly calculates the frequency of each shipping method used in 2023, orders them by frequency in descending order, and limits the output to the most frequently used method. Review and execution depend on the support of 'YEAR' function and LIMIT clause in the specific SQL dialect.",
            "The original query uses the YEAR() function, which is not part of the ANSI SQL standard. It has been replaced with EXTRACT(YEAR FROM OrderDate). The rest of the query correctly calculates the total quantity by grouping on ProductID.",
            "The original query is almost correct, but the GROUP BY clause should use the same expression as the SELECT clause to ensure consistency. `Month` is an alias, so use the entire expression `DATE_FORMAT(OrderDate, '%Y-%m')` in the GROUP BY clause.",
            "The SQL query is correct. It calculates the total sales for each CustomerID by joining the 'orders' and '[Order Details]' tables. The query groups by CustomerID and orders the results to find the customer with the highest total sales revenue. The use of LIMIT 1 ensures only the top customer is returned.",
            "The SQL query is correct. It accurately counts the number of orders where the ShippedDate is later than the RequiredDate, which aligns with the business question.",
            "The SQL query correctly calculates the total quantity of each product ordered and limits the result to the product with the highest total quantity. No corrections needed.",
            "The SQL query correctly calculates the average order fulfillment time by using the DATEDIFF function to find the difference between ShippedDate and OrderDate, and then averaging these differences. The WHERE clause correctly filters out orders without a ShippedDate. The query is accurate and follows the provided metric definition.",
            "The query correctly counts orders where the ShippedDate is on or before the RequiredDate, matching the definition of on-time delivery.",
            "The original query correctly calculates the on-time delivery rate. However, to ensure division results in a decimal, multiplying by 1.0 is added. Also, the GROUP BY clause should match the SELECT clause.",
            "The SQL query correctly identifies the shipping method used most frequently by counting occurrences of each shipping method in the 'orders' table and ordering the results by the count in descending order, then limiting the result to one. The query is correct for the question asked.",
            "The original query correctly calculates the total freight cost by grouping the results by month. However, to adhere to the ANSI SQL standard, the DATE_FORMAT function should be replaced with TO_CHAR. The correct function to extract the year and month is TO_CHAR(OrderDate, 'YYYY-MM').",
            "The original query correctly aggregates orders by month but needs to use 'GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')' rather than 'GROUP BY Month' to properly group the dates. This ensures no alias issues during grouping. The ORDER BY clause and LIMIT are used correctly to find the month with the highest number of orders.",
            "The SQL query is correct. It calculates the total discount by multiplying the unit price, quantity, and discount for each order detail, then summing the results.",
            "The SQL query correctly calculates the number of unique products sold in the last year by using a subquery to filter 'OrderID' from the 'orders' table where 'OrderDate' is within the last year. The use of 'COUNT(DISTINCT ProductID)' is appropriate to get unique products.",
            "The SQL query is correct. It accurately retrieves the number of orders each employee handled by counting the orders and grouping by EmployeeID.",
            "The SQL query is correct as it calculates the total value for each order by summing the product of UnitPrice, Quantity, and (1 - Discount) for each order. It then orders the results by the total order value in descending order and limits the output to the top three most expensive orders.",
            "The initial query incorrectly used AVG with GROUP BY and failed to calculate the sum of quantities per order before averaging. This corrected query first sums the quantities for each order and then calculates the average of these sums.",
            "The SQL query correctly counts the number of orders shipped to each country by grouping records based on the ShipCountry field. The use of COUNT(*) is appropriate for counting the number of orders per country. The query is accurate for the given business question.",
            "The query is correct. It calculates the total sales amount for each employee by summing the product of UnitPrice, Quantity, and the Discount factor for all orders associated with each EmployeeID. The JOIN operation is correctly performed between the 'orders' and '[Order Details]' tables using the OrderID.",
            "The original query does not correctly restrict the date range to the last month. It's important to ensure that the date range is from the start of the previous month to the start of the current month. The corrected query adds the condition 'AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE)'.",
            "The SQL query is almost correct, but the GROUP BY clause should explicitly use DATE_TRUNC('month', o.OrderDate) to match the SELECT clause. The rest of the logic for calculating the average order value is correct.",
            "The query is almost correct but it needs to ensure that the 'OrderDate' filter includes the whole current quarter. Use 'DATE_TRUNC('quarter', CURRENT_DATE)' for both the start and end comparison, ending with the last day of the current quarter. This will ensure only this quarter's orders are considered. The corrected query is:\n\nSELECT COUNT(o.OrderID) AS OnTimeOrders \nFROM orders o \nWHERE o.ShippedDate <= o.RequiredDate \nAND o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) \nAND o.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) + INTERVAL '3 months';",
            "The DATE_TRUNC function is used incorrectly for interval subtraction. It should ensure the start of the period from three months ago is correctly calculated.",
            "The original query used DATE_PART instead of EXTRACT, which is the ANSI SQL standard function for extracting the year. The rest of the query logic is correct.",
            "The query correctly calculates the percentage of orders shipped late, but the date condition should include only orders from the previous month. Added condition to exclude current month orders.",
            "The query's logic is correct for finding the top 5 customers based on revenue generated this year. Using EXTRACT(YEAR FROM ...) instead of DATE_PART('year', ...) is more standard in ANSI SQL.",
            "The query is mostly correct, but the WHERE clause should ensure that it includes the entire six-month period up to the current date, without truncating the current month. Corrected query: SELECT AVG(od.Discount) AS AvgDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_ADD('month', -6, CURRENT_DATE);",
            "The query is correct. It accurately counts the number of orders placed by each customer in the current year using the DATE_PART function to extract the year from both the OrderDate and the current date. The query uses GROUP BY to group results by CustomerID and COUNT to determine the number of orders.",
            "The SQL query correctly calculates the total freight cost per shipping method for the current month by filtering orders where the OrderDate is greater than or equal to the start of the current month. It then groups the results by ShipVia and sums the Freight cost for each group. This query is correct and follows the ANSI SQL standard.",
            "The original query uses DATE_PART which is not standard ANSI SQL, replaced with EXTRACT function.",
            "The query originally used DATE_TRUNC with interval subtraction, which is not standard. DATEADD is a more appropriate function here for subtracting two years from the current date.",
            "The SQL query correctly joins the 'orders' and '[Order Details]' tables on the 'OrderID'. It accurately sums the 'Quantity' for each 'EmployeeID' and groups the result by 'EmployeeID'. The query is correct and compatible with the ANSI SQL standard.",
            "The query is correct. It successfully calculates the total sales for a specific shipping method using the provided formula. The group by clause ensures the sum is calculated for the specified ShipVia.",
            "The SQL query is correct. It accurately filters orders where the fulfillment time exceeds 30 days using the DATEDIFF function.",
            "The query is correct as it calculates the total sales revenue grouped by the ShipRegion, using a join between the orders and [Order Details] tables to get necessary sales data.",
            "The original query incorrectly uses 'DATE_TRUNC' to filter for the first quarter. The corrected query uses 'EXTRACT(QUARTER FROM o.OrderDate) = 1' to correctly filter orders from the first quarter.",
            "The query calculates the average order value for each month and orders them by AvgOrderValue. However, it does not measure growth compared to previous months. To find the growth, you would have to compare the AvgOrderValue of each month with the previous month. This can be done using a window function like LAG to compare each month's AvgOrderValue with the previous month. This query currently lists the months with the highest AvgOrderValue, not growth.",
            "The SQL query correctly calculates the total order value and compares the freight cost to 10% of this value for each order. The use of GROUP BY and HAVING clauses is appropriate for the intended comparison.",
            "The original query is correct. It correctly finds the most common shipping recipient name by grouping by ShipName and ordering by the count in descending order, then limiting the result to one row.",
            "The original query incorrectly uses TO_CHAR instead of DATE_FORMAT for the date conversion. DATE_FORMAT is used in ANSI SQL to format dates according to specific patterns.",
            "The function DATEADD is incorrect in the context for the current date function in standard SQL. Use DATE_SUB instead. Also, use CURRENT_DATE or CURRENT_TIMESTAMP appropriately. The corrected query is: SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE ShippedDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) AND CURRENT_DATE",
            "The original SQL query had an integer division issue, which could result in incorrect calculation of the percentage. By multiplying by 100.0, we ensure float division is used, providing an accurate OnTimeDeliveryRate.",
            "The provided SQL query correctly calculates the percentage of total orders shipped by each shipping method. It uses a subquery to obtain the total count of orders and computes the percentage for each 'ShipVia' using a grouped count. The grouping and calculation logic are correct.",
            "The query correctly calculates the monthly total freight cost by grouping orders by month and summing the freight values. It's using the correct function TO_CHAR for formatting the date.",
            "The SQL query is correct. It selects the ProductID and the sum of the Quantity from the [Order Details] table, groups the results by ProductID, and orders them in descending order by the total quantity. The LIMIT 1 clause ensures that only the product with the highest total quantity is returned.",
            "The SQL query is correct. It accurately counts the number of orders where the ShippedDate column is null, indicating orders that have not been shipped.",
            "The SQL query is correct. It counts the number of orders each employee has fulfilled, groups by EmployeeID, orders the results by OrderCount in descending order, and limits the output to the top result, which is what the question asks for.",
            "The SQL query correctly calculates total sales revenue per country by joining the orders and [Order Details] tables and grouping the results by ShipCountry. The use of SUM and the formula aligns with the 'Total Sales' metric definition.",
            "The original query incorrectly calculated the average order value by not dividing by the count of distinct orders. The corrected query uses the provided metric formula to calculate Average Order Value accurately.",
            "The SQL query is correct. It correctly calculates total revenue for each product by summing the product of UnitPrice, Quantity, and the discount factor, groups the results by ProductID, orders by descending TotalRevenue, and limits the result to the top product.",
            "The original query used MEDIAN which is not a standard SQL function. Instead, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY ...) is used to calculate the median in ANSI SQL.",
            "The provided query is mostly correct assuming that there is a table named 'RatingsTable' with columns 'OrderID' and 'Rating'. The inner SELECT is unnecessary, so it was removed for simplicity and clarity.",
            "The SQL query correctly addresses the business question. It calculates the count of orders where the shipped date is on or before the required date, grouped by month using DATE_TRUNC on OrderDate.",
            "The SQL query correctly calculates the total discount given on all products sold by multiplying UnitPrice, Quantity, and Discount, and summing up these values for all records in the [Order Details] table. The query is correct and matches the business question.",
            "The SQL query correctly calculates the average time taken to ship an order after it is placed by using DATEDIFF to find the difference between ShippedDate and OrderDate. The WHERE clause ensures that only shipped orders are considered. The query is accurate and follows the schema and metric definitions provided.",
            "The query is correct in identifying the product with the highest revenue. It correctly calculates the total revenue per product and orders the results in descending order, limiting the output to the top result.",
            "The original query attempted to use a WHERE clause within the COUNT aggregate function, which is incorrect. The corrected query uses a CASE statement with COUNT to conditionally count only those orders where ShippedDate is on or before RequiredDate.",
            "The provided SQL query correctly answers the business question by selecting the city with the highest number of shipments using COUNT and GROUP BY. The use of ORDER BY DESC and LIMIT 1 correctly ensures only the top city is returned. No corrections are needed.",
            "The SQL query correctly calculates the total freight cost for orders placed each month by summing the 'Freight' column and grouping the data by month using DATE_TRUNC on 'OrderDate'. The query is correct and follows the ANSI SQL standard.",
            "The query is correct. It selects the CustomerID and counts the distinct ProductID from the Order Details table for each customer, grouping the results by CustomerID.",
            "The SQL query is correct. It selects ProductID and calculates the total units sold by summing the Quantity for each product, grouping by ProductID.",
            "The query is correct. It accurately counts the number of orders with a ShippedDate greater than the RequiredDate, identifying delayed shipments.",
            "The SQL query is correct and will accurately calculate the average discount applied to orders per month. It properly uses DATE_TRUNC to group by month and AVG to calculate the average discount.",
            "The original query only returns the lowest shipping cost as an aggregate, but to find the specific order with that shipping cost, we need to filter orders that have a freight equal to the minimum freight.",
            "The original query attempted to find the correlation between average order value and shipping delay using AVG, which is incorrect. I've corrected it to calculate the correlation based on the total order value per order using the SUM function and included a discount factor. The CORR function (standardized as the correlation coefficient in some SQL implementations) calculates correlation properly.",
            "The SQL query correctly calculates the average order value for each country and returns the country with the highest average order value. The JOIN is correctly performed between orders and [Order Details], the AVG function is used to compute the average order value, and the query properly groups by ShipCountry. The use of ORDER BY and LIMIT 1 is appropriate to find the highest average order value.",
            "Corrected the date range calculation in the WHERE clause to accurately reflect the last quarter.",
            "The original query is mostly correct. The issues were addressed by explicitly specifying the full table names and columns to match the schema provided, avoiding abbreviations.",
            "The SQL query correctly calculates the total sales for each product in the previous year. It joins the 'Order Details' and 'orders' tables on 'OrderID' and filters by the order date to ensure it only includes orders from the past year. The query then groups by 'ProductID' to aggregate sales and orders by TotalSales in descending order. The formula used is correct based on the given metric definition for Total Sales.",
            "The original query correctly calculates the percentage of orders delivered on time each month. However, to ensure a precise floating-point division for the percentage calculation, multiplying the count by 100.0 helps retain decimals.",
            "The SQL query is correct. It accurately counts the number of orders for each customer and orders the results in descending order to show which customers placed the most orders.",
            "The SQL query correctly calculates the total freight cost for each shipping method by grouping the 'ShipVia' column and summing the 'Freight' values. This aligns with the business question.",
            "The query correctly answers the question by grouping the orders by city and summing the freight costs, then ordering the results by the total freight in descending order to show the city with the highest costs first. The SQL query is accurate and conforms to the ANSI SQL standard.",
            "The original query calculates the orders for the last 3 months from today, which may not be the same as the last full quarter. I've corrected it to accurately calculate the number of orders per employee for the previous quarter.",
            "The SQL query is incorrect because the DAYOFWEEK function typically returns 1 for Sunday and 7 for Saturday. The correct days for the weekend should be (1, 7). However, the solution is to ensure proper use in ANSI SQL. We should map the correct days accordingly. To correctly get the weekend days in a consistent SQL manner: SELECT COUNT(*) FROM orders WHERE EXTRACT(DOW FROM OrderDate) IN (0, 6);",
            "The query correctly counts the distinct ProductID values from the [Order Details] table, which is correct for finding the total number of unique products ordered. No changes needed.",
            "The SQL query correctly answers the business question by selecting the Quantity from the [Order Details] table and counting the occurrences of each quantity with a GROUP BY clause. It then orders the results by Frequency in descending order to show the most common quantities first. The query is correct as written.",
            "The query is mostly correct, but using COUNT(*) will work correctly here too. Ensure division is handled correctly by the SQL engine used.",
            "The SQL query is correct. It calculates the average time taken to fulfill an order for each shipping method, using the difference between the ShippedDate and OrderDate. The use of AVG and DATEDIFF functions is appropriate for the business question.",
            "The original query counts all orders placed during the promotion period. To find how many distinct customers placed orders, we need to count distinct CustomerID values.",
            "The query needs to use the EXTRACT function instead of DATE_FORMAT, as ANSI SQL does not support DATE_FORMAT. The use of EXTRACT allows for retrieving the year from the date.",
            "The SQL query correctly calculates the total discount per order by multiplying UnitPrice, Quantity, and Discount for each order and then summing the result. The use of GROUP BY OrderID and ORDER BY TotalDiscount DESC ensures the orders are grouped correctly and sorted by the total discount in descending order. The query is correct for the question asked.",
            "The original query's end date includes the first day of the current month, which should be excluded. The correction adjusts this by using '<' for the end date of the range.",
            "The SQL query appears correct for calculating the average order value for the current year. It properly joins the orders and [Order Details] tables, calculates the total sales for each order, and divides by the distinct order count. The WHERE clause uses DATE_TRUNC to filter the current year's orders.",
            "The original query calculates the on-time delivery rate instead of the number of orders. Adjusted the query to count the number of on-time orders.",
            "The SQL query is correct. It accurately counts the number of orders for each shipping method by grouping on the 'ShipVia' column.",
            "The query is mostly correct, but DATE_TRUNC('year', CURRENT_DATE) is not standard ANSI SQL. Instead, use EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) to filter the current year's data.",
            "The SQL query is correct. It correctly calculates the average fulfillment time by computing the average of date differences between ShippedDate and OrderDate for each region, and then orders the results in descending order to find the region with the highest average fulfillment time. The LIMIT 1 clause ensures that only the top region is returned.",
            "The SQL query correctly selects the OrderID from the orders table by joining it with the [Order Details] table and applying a filter for Discount greater than 0.25. The query is correct.",
            "The SQL query accurately counts the number of orders that have been placed but not yet shipped, ensuring the ShippedDate is NULL. The condition OrderDate <= CURRENT_DATE is not necessary, as orders with NULL ShippedDate implies they are not yet shipped regardless of the OrderDate. The query could be simplified to: SELECT COUNT(o.OrderID) FROM orders o WHERE o.ShippedDate IS NULL;",
            "The query needed correction in the date range. It should consider the entirety of the current month including current_date, and should exclude days from the next month. Also added LIMIT 1 to get the country with the most orders.",
            "The SQL query is incorrect. The BETWEEN clause currently includes the start of the current year, which should be excluded for calculating last year's total. Adjust the date range to cover the entire previous year.",
            "The original query truncates the date for the current year minus one year, which would incorrectly include dates from January 1 of that year. The correct approach is to start from the first day of the current month in the last year and go to the first day of the current month in the current year.",
            "The query is mostly correct, but DATE_TRUNC function was improperly used in ANSI SQL context. Use the first day of the current month instead by combining EXTRACT and DATE functions.",
            "The original query error is in the date range logic. It should include the start of the last quarter up to the start of the current quarter, not including the current quarter. Corrected range in the query.",
            "The original query incorrectly calculates 'last month' by using the current month range. The corrected query calculates the start of 'last month' using 'CURRENT_DATE - INTERVAL '1' MONTH' and ends it with the last day of the previous month.",
            "The original query attempts to compare the average fulfillment time of orders across two months using a cross join, which does not properly isolate the results for each month. The corrected query uses subqueries to separate the calculations for each month, thereby ensuring the intended comparison of the average fulfillment times.",
            "The original query was calculating the on-time delivery rate incorrectly. It didn't correctly include only those orders where 'ShippedDate <= RequiredDate' in the numerator. The corrected query uses a COUNT with a CASE statement to include only on-time shipments in the numerator.",
            "The query is correct. It computes the total revenue from orders with a unit price above 100 as specified in the business question.",
            "The original query's date range was incorrect for 'last year'. Adjusted to the correct range using DATE_TRUNC and INTERVAL to capture the entirety of the previous year.",
            "The SQL query is correct for calculating the average order fulfillment time for each employee. It groups by EmployeeID and uses the DATEDIFF function to compute the days between ShippedDate and OrderDate, which aligns with the provided metrics definition.",
            "The SQL query correctly calculates the total sales per customer and returns the customer with the highest total sales by using a JOIN between orders and [Order Details] tables, summing up the sales, and ordering the results in descending order. No changes are needed.",
            "The SQL query is correct. It accurately calculates total sales by country and limits the result to the top three countries by sorting in descending order of sales.",
            "The SQL query is correct as it calculates the average discount applied on orders by averaging the Discount column in the [Order Details] table.",
            "The SQL query correctly counts the number of times each product was ordered by grouping on ProductID and counting the occurrences of each ProductID. The query is correct and needs no changes.",
            "The SQL query is correct. It counts the number of orders for each shipping city, groups them by city, and orders the results in descending order by the count, limiting the results to the top one, effectively finding the most popular destination city.",
            "The SQL query correctly calculates the average quantity ordered for each product by grouping the data by ProductID and computing the average of the Quantity column. The query is correct.",
            "The query correctly calculates total sales by each employee, using a JOIN between the 'orders' and '[Order Details]' tables on the 'OrderID' column. The `GROUP BY` clause is appropriately used to aggregate sales by 'EmployeeID', matching the business question.",
            "The query correctly joins the orders and [Order Details] tables, groups by CustomerID and ProductID, calculates the total quantity for each CustomerID and ProductID pair, and orders them in descending order. The LIMIT 1 clause is used to get the customer with the highest quantity of a single product. The query is correct.",
            "The SQL query correctly calculates the total discount by multiplying the UnitPrice, Quantity, and Discount for each order in the [Order Details] table. The calculation and table used are appropriate for answering the business question.",
            "The SQL query correctly counts the number of orders placed but not yet shipped by checking for NULL values in the ShippedDate column. No corrections needed.",
            "The SQL query is correct. It selects the region with the most orders by counting the number of orders per region using GROUP BY and orders them in descending order to get the region with the highest count. The LIMIT 1 ensures only the top region is returned.",
            "The query is correct. It calculates total sales for each month by joining the 'orders' and '[Order Details]' tables and grouping by the formatted month from the 'OrderDate'.",
            "The SQL query is correct. It correctly selects the CustomerID and counts the number of orders each customer has placed using GROUP BY.",
            "The original query incorrectly calculates the current year for order filtering. It should filter for the previous year by using 'YEAR(CURDATE()) - 1'.",
            "The SQL query correctly calculates the total revenue for each product by summarizing (UnitPrice * Quantity * (1 - Discount)) and ordering the results to show the top 5 products with the highest revenue. There are no errors in the query.",
            "The SQL query is correct. It calculates the total freight cost for each shipping country using a SUM aggregation and groups the results by ShipCountry.",
            "The query correctly selects the ShipCity and counts the number of orders for each city. It then groups the results by ShipCity and orders them in descending order of NumOrders. The LIMIT 5 clause ensures only the top 5 cities are returned. The query is correct.",
            "The original query did not account for the year when considering the current and previous months, potentially leading to incorrect results at the year boundary. The corrected query includes the year check in the CASE statements to ensure accurate monthly comparisons.",
            "The SQL query correctly calculates the total order value for each customer by joining 'orders' and '[Order Details]' on 'OrderID'. It groups the results by 'CustomerID', orders by 'TotalValue' in descending order, and limits the results to the top one, thus finding the customer with the highest order value.",
            "The current SQL query calculates the average discount per order line, not per order. To find the average discount per order, you need to calculate the average of the average discounts across all orders.",
            "The query is mostly correct but needs the table prefix '[Order Details]' for ProductID in the SELECT clause to avoid ambiguity. Additionally, grouping should be done using the actual expression used for the alias 'Month'.",
            "The query is almost correct, but the GROUP BY clause should use the same function as the SELECT clause for consistency. Use GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m').",
            "The original query incorrectly groups by OrderID and uses MAX, which is unnecessary for finding the highest discounts globally. The corrected query orders all entries by the Discount column and limits the result to the top 5, which directly answers the question.",
            "The SQL query is correct. It calculates the sales amount for each employee and selects the top 3 based on the total sales amount. The JOIN operation correctly connects the 'orders' and '[Order Details]' tables on OrderID.",
            "The SQL query is correct and matches the business question. It counts the number of orders placed in the current year by using the YEAR function on OrderDate and CURDATE().",
            "The original query is mostly correct, but not all SQL dialects support the 'MONTH()' and 'YEAR()' functions. Replacing them with 'EXTRACT(MONTH FROM ...)' and 'EXTRACT(YEAR FROM ...)' aligns better with the ANSI SQL standard.",
            "The original query looks mostly correct, but DATEADD is not an ANSI SQL function. The correct function in ANSI SQL for subtracting a year from the current date is CURRENT_DATE - INTERVAL '1' YEAR. Here's the corrected query: SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= CURRENT_DATE - INTERVAL '1' YEAR GROUP BY CustomerID;",
            "The SQL query is almost correct but DATEADD is not a standard ANSI SQL function. Instead, we can use INTERVAL: SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS Revenue FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= CURRENT_DATE - INTERVAL '6' MONTH) GROUP BY ProductID ORDER BY Revenue DESC LIMIT 1;",
            "The SQL query is correct according to the defined metric 'Order Fulfillment Time'. It correctly calculates the average time taken to fulfill an order by computing the average difference between 'ShippedDate' and 'OrderDate' in the 'orders' table.",
            "The query correctly calculates the average order fulfillment time for each employee and orders them in ascending order, showing those with the highest speeds first. It uses DATEDIFF to find the difference between ShippedDate and OrderDate.",
            "The original query is mostly correct but needs to handle division by zero to avoid errors when there are no orders in a month. Using 'NULLIF' ensures that division by zero is avoided.",
            "The SQL query incorrectly uses the DATEADD function and CURRENT_DATE to filter orders from the last quarter. Instead, we should calculate the beginning of the last quarter and the end of the last quarter to filter the results. Here's the correct query:\n\n```sql\nSELECT ShipVia, SUM(Freight) AS TotalFreight\nFROM orders\nWHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months'\n  AND OrderDate < DATE_TRUNC('quarter', CURRENT_DATE)\nGROUP BY ShipVia;\n```",
            "The original query placed the WHERE clause incorrectly and had syntax issues with JOIN. The corrected query first performs the JOIN and then applies the WHERE condition correctly.",
            "The query is correct and follows the metrics definition for calculating Total Sales, matching each order detail with its respective region in the 'orders' table using the OrderID.",
            "The query correctly identifies the top five customers based on order volume by counting the number of orders per customer and ordering them in descending order. It uses LIMIT 5 to ensure that only the top five customers are selected. The query adheres to ANSI SQL standards and accurately addresses the business question.",
            "The original query correctly calculates the on-time delivery rate monthly, using the FILTER clause to count only those orders that were shipped on or before the required date. To ensure decimal division, I've added * 1.0 to prevent integer division, which may result in unexpected results if COUNT(OrderID) is an integer. The query is now correct.",
            "The query is correct. It counts distinct OrderIDs from the [Order Details] table where the Discount is greater than 0.2.",
            "The query correctly calculates the delivery time for each order and orders the results in descending order to return the order with the longest delivery time.",
            "The SQL query correctly computes the average quantities ordered for each product by grouping on ProductID and applying the AVG function to the Quantity column. The query is accurate and doesn't require any corrections.",
            "The SQL query is correct and accurately calculates the total number of products sold by month.",
            "The current query calculates the order volume for the last year but does not determine growth trends. To assess growth, compare order volumes over multiple previous periods. For example, compare the current year's volume with the previous year's volume. This requires additional logic beyond a simple count.",
            "The SQL query is correct. It correctly sums the total sales by ShipCountry using the formula for Total Sales provided in the business metrics definitions. The JOIN between [Order Details] and orders on OrderID is appropriate and the GROUP BY correctly aggregates the results by ShipCountry.",
            "The original query uses DATEADD, which is non-standard. Corrected to DATE_SUB for standard compliance and correct functionality.",
            "The SQL query correctly answers the business question by selecting the CustomerID and counting the number of orders per customer, then ordering the results in descending order to find the customer with the highest number of orders. The use of LIMIT 1 ensures only the top result is returned. The query accurately matches the question's requirements.",
            "The provided SQL query correctly calculates the city that receives the most orders by counting the number of orders for each city and ordering the results in descending order. The query then uses LIMIT 1 to return the city with the highest number of orders. Therefore, the query is correct.",
            "The SQL query is correct. It calculates the average order fulfillment time by grouping orders by month derived from the OrderDate and using the AVG function with DATEDIFF to find the average fulfillment time.",
            "The original query did not count distinct OrderIDs, potentially overcounting if an order had multiple products with discounts. The corrected query uses DISTINCT to ensure each OrderID is counted only once.",
            "The original query is mostly correct, but to ensure floating point division for percentage calculation, it's important to multiply the numerator by 1.0. Otherwise, integer division might result in 0 for percentages less than 1.",
            "The initial query is mostly correct, but the order of the tables in the JOIN clause has been altered for clarity. Also, it's a good practice to use table aliases or fully qualify columns to avoid ambiguity.",
            "The SQL query correctly calculates the total freight cost for orders in each country by using the SUM function on the Freight column and grouping the results by ShipCountry. The query is accurate as per the business question.",
            "The initial query is mostly correct. However, for clarity and correctness, table aliases or full table names should be used to specify columns distinctly in queries that involve joins, especially for columns with the same name in different tables.",
            "The original SQL query is correct. The function DATEDIFF is used appropriately to calculate the time gap between order and shipment, and the aggregation of TotalSales is calculated per TimeGap.",
            "The original query correctly calculates the total sales for orders shipped late. The column references for 'UnitPrice', 'Quantity', 'Discount', 'ShippedDate', and 'RequiredDate' are accurately specified with the correct table aliases. No changes needed.",
            "The SQL query is correct. It calculates the average discount per month by joining the 'orders' and '[Order Details]' tables and grouping by the month extracted from 'OrderDate'. The only change was specifying the table '[Order Details]' for the 'Discount' column to ensure clarity.",
            "The original query uses DATEDIFF which is not part of ANSI SQL. In ANSI SQL, date arithmetic is performed using subtraction and the DATE_PART function to ensure correct date difference calculation.",
            "The query correctly identifies orders from the [Order Details] table ordered by the highest discounts. The usage of ORDER BY Discount DESC followed by LIMIT 10 is appropriate to return the top 10 orders with the highest discounts.",
            "The initial query incorrectly included QUARTER in the GROUP BY clause. Since we are only interested in the fourth quarter of each year, the GROUP BY should only include YEAR(OrderDate). The corrected query matches the question by counting orders for the fourth quarter of each year.",
            "The SQL query correctly calculates the frequency of each shipping method by counting the number of orders grouped by the ShipVia column. The query is accurate for the given business question.",
            "The query is correct according to the business question and metrics definition. It correctly calculates the average order fulfillment time for orders shipped in the past year.",
            "The SQL query correctly calculates the percentage of orders delivered on or before the required date by using the FILTER clause with COUNT for conditional aggregation. No corrections are needed.",
            "The SQL query is correct. It calculates the total freight cost for each month by truncating the OrderDate to the month level, grouping by month, and then summing the Freight for each group. The query is properly grouped and ordered by Month.",
            "The SQL query is correct and properly answers the business question by finding the country with the highest number of shipped orders. It groups the orders by 'ShipCountry', counts the number of 'OrderID's, and orders the result in descending order by the count before limiting the result to one entry.",
            "The SQL query is correct. It selects the ship region with the highest order count, grouping by ShipRegion and ordering by the count in descending order, limiting the output to one result to get the most common ship region.",
            "The SQL query is correct. It accurately computes the highest discount given on any product by using the MAX function on the Discount column in the [Order Details] table.",
            "The SQL query correctly calculates the number of unique products ordered by counting distinct ProductID values in the [Order Details] table. No changes are needed.",
            "The SQL query is correct. It counts the number of orders handled by each employee and orders the result in descending order. The LIMIT 1 ensures only the employee with the most orders is returned. The use of COUNT, GROUP BY, and ORDER BY is appropriate for the question asked.",
            "The SQL query is correct for the given question. It calculates the total quantity of orders for each product by grouping by ProductID and ordering the results in descending order by total quantity. The use of SUM and GROUP BY is appropriate for this calculation.",
            "The SQL query correctly calculates the average discount applied to products ordered by simply averaging the Discount column in the [Order Details] table. No changes are necessary.",
            "The SQL query is correct. It correctly counts the distinct OrderID in the [Order Details] table where the discount is greater than 20%.",
            "The SQL query correctly calculates the total revenue generated from a specific customer by joining the 'orders' and '[Order Details]' tables. The formula matches the business metric definition for Total Sales, and the use of 'CustomerID' in the WHERE clause is appropriate for filtering by a specific customer.",
            "The SQL query is correct. It calculates the average time taken to ship orders by computing the difference in days between the 'ShippedDate' and 'OrderDate', excluding orders with null 'ShippedDate', which aligns with the business question.",
            "The SQL query is correct. It calculates the average quantity per product and orders the results to fetch the product with the highest average quantity.",
            "The original query does not filter orders from last year. Added a subquery in WHERE clause to include only orders from last year.",
            "The original query is almost correct but needs to use the full expression DATE_TRUNC('month', orders.OrderDate) in the GROUP BY clause instead of the alias 'Month'. SQL standard requires that expressions used in the SELECT list that are not named or aliased must be repeated in GROUP BY.",
            "The original query correctly calculates the average order fulfillment time per month, but the grouping alias 'Month' needs to be changed to the actual expression in the GROUP BY clause.",
            "The SQL query is correct. It calculates the total freight cost incurred each month by truncating the OrderDate to the month level and summing the Freight column, then groups by the Month.",
            "Correct DATE_TRUNC and interval usage to ensure the query captures the last quarter accurately.",
            "The SQL query correctly fetches the frequency distribution of order quantities by grouping them by 'Quantity' in the '[Order Details]' table and counting the occurrences. The query is correct and matches the business question.",
            "The SQL query correctly answers the question. It aggregates orders by EmployeeID, counts them, and orders the result to find the employee with the highest number of orders. No corrections needed.",
            "The SQL query is correct. It effectively counts the occurrences of each shipping method (ShipVia) and orders them in descending order to find the most common one. The LIMIT 1 clause ensures only the most common method is returned.",
            "The original query counts the number of line items with a discount greater than 10%, rather than the number of unique orders. The corrected query uses DISTINCT to count unique OrderIDs.",
            "The SQL query is correct. It selects the ShipCity and counts the number of orders for the previous year, groups by ShipCity, orders by the count in descending order, and limits the result to the city with the most orders.",
            "The query is mostly correct but requires a small adjustment for the date calculation. Use DATE_TRUNC to accurately capture the full six-month period from the beginning of the current month.",
            "The SQL query is correct. It selects the OrderID along with the calculated fulfillment time from the orders, ordering the result by the fulfillment time in descending order to retrieve the order with the longest fulfillment time. The LIMIT 1 clause ensures only the top result is returned.",
            "The query is mostly correct. However, ANSI SQL standard doesn't define the CORR function. You'll need to check your specific SQL database system documentation for implementation details, as support for statistical functions like correlation can vary across systems. Assuming the function is supported, ensure the correct syntax and that data types are compatible for the calculation.",
            "The original query checks if orders were placed last month instead of shipped. This has been corrected to filter orders that were shipped late last month by adjusting the date filter on ShippedDate.",
            "Corrected the query to ensure only sold products (Quantity > 0) are considered.",
            "The query correctly finds the product with the highest sales volume in terms of quantity in the last quarter. It calculates the total quantity of each product ordered in the last quarter and orders them in descending order, returning the top result. The use of QUARTER and date manipulation with CURDATE() - INTERVAL 3 MONTH is appropriate for this purpose.",
            "The query is mostly correct, but the WHERE clause should include orders from the past year from the current date, not just the past calendar year. The condition should be 'o.OrderDate >= CURDATE() - INTERVAL 1 YEAR' to correctly calculate from a year ago till today.",
            "The SQL query correctly calculates the sales revenue by product and orders the result to find the product with the highest sales revenue. The use of the 'LIMIT 1' clause ensures that only the product with the highest sales revenue is returned. The query is correct.",
            "The SQL query is correct and accurately calculates the average discount given on products by computing the average of the Discount column in the [Order Details] table.",
            "The SQL query correctly calculates the total freight cost per shipping country by grouping the 'orders' table by 'ShipCountry' and summing the 'Freight' costs. The query aligns with the business question.",
            "The original query counts every instance of OrderID, which may lead to overcounting if an order has multiple products with a quantity greater than 5. Using COUNT(DISTINCT od.OrderID) correctly counts the number of unique orders that have at least one product with a quantity greater than 5.",
            "The query correctly calculates the percentage of on-time deliveries each month. Ensuring the use of 100.0 for accurate decimal calculation in division is a good practice.",
            "The SQL query is correct and should correctly identify the shipping recipient with the most orders placed. It groups the orders by 'ShipName' and sorts them by the count of 'OrderID' in descending order, returning the top result.",
            "The original query is mostly correct. The table alias 'od' was used but not needed in the correction. The query sums up the total discount given, which matches the business question perfectly.",
            "The SQL query is correct. It selects the region with the most orders by grouping by ShipRegion, counting the orders, and ordering the results in descending order before limiting to the top result.",
            "The SQL query correctly counts the number of orders placed in the last 30 days using COUNT and filtering with the OrderDate. Ensure the database supports the CURDATE function and INTERVAL syntax.",
            "The query is mostly correct, but the GROUP BY clause should match the alias used in SELECT. Use DATE_FORMAT(o.OrderDate, '%Y-%m') consistently in GROUP BY.",
            "The SQL query is correct. It selects the city with the highest number of orders by grouping the orders by ShipCity, counting the number of orders for each city, and then ordering the results in descending order of shipment count. The LIMIT 1 ensures only the city with the most shipments is returned.",
            "The DATE_FORMAT function is not standard ANSI SQL. Instead, use DATE_TRUNC to group by month. Additionally, ensure the GROUP BY clause uses the correct month extraction function.",
            "The SQL query correctly calculates the total sales for each product and orders the results to find the product with the highest sales. It uses the correct columns and applies the formula for calculating total sales as defined in the metrics. The use of GROUP BY, ORDER BY, and LIMIT 1 is appropriate for the question. The query is correct.",
            "The SQL query correctly answers the business question by selecting the EmployeeID and counting the number of OrderIDs to determine how many orders each employee processed. The GROUP BY clause is correctly applied to EmployeeID.",
            "The query is mostly correct. It effectively performs a join between the 'orders' and '[Order Details]' tables, calculates the total spending for each customer, and orders the results to identify the top 5 spenders. The use of 'LIMIT 5' at the end is appropriate for the top 5 query. The ANSI SQL syntax is correctly followed, assuming the use of brackets for a table name with a space is supported by the database.",
            "The original query is correct and aligns with the business question. Removed alias for simplicity.",
            "The original query used 'GROUP BY Month', but 'Month' is derived using 'DATE_FORMAT' and should directly reference the expression. The corrected query fixes this by grouping using 'DATE_FORMAT(OrderDate, '%Y-%m')' directly.",
            "The SQL query is correct. It calculates the average discount each month by joining the 'orders' and '[Order Details]' tables and grouping by the month extracted from 'OrderDate'.",
            "The SQL query is correct. It joins the 'orders' and '[Order Details]' tables on the OrderID, calculates the total quantity of products for each order, and returns the order with the highest product count by sorting in descending order and limiting the result to one.",
            "The query is correct. It selects distinct customers who have at least one order detail entry with a discount greater than 10%. The JOIN operation is correctly performed between the orders and order details tables based on the OrderID.",
            "The SQL query is correct. It calculates the total revenue generated from orders with no discount by multiplying UnitPrice by Quantity and summing these values where Discount is 0.",
            "The original query uses DATE_FORMAT, which is not ANSI SQL standard. Corrected to use TO_CHAR for date formatting. The GROUP BY clause needs to match the SELECT clause for correctness.",
            "The SQL query is correct. It counts the number of orders for each shipping method (ShipVia), then orders them by the count in descending order, and limits the output to the top shipping method. The syntax and approach aligns with the question.",
            "The original query lists the delayed days for each order, but it does not count the number of such orders. Corrected the query to count the number of delayed orders.",
            "The SQL query is correct. It joins the 'orders' and '[Order Details]' tables on 'OrderID', calculates the total order value using the given formula, and groups the results by 'OrderID' and 'ShipRegion'.",
            "The SQL query accurately calculates the average fulfillment time for each employee and then orders the results to find the employee with the fastest average fulfillment time. The use of LIMIT 1 ensures that only the top result, i.e., the employee with the fastest fulfillment time, is returned. The query appears correct.",
            "The original query had an incorrect method for counting on-time deliveries and calculating the on-time rate. I corrected it using a CASE statement to conditionally count orders delivered on time.",
            "The original query fails to correctly handle the edge case where the current month is January. By subtracting one month from the current date directly, the query correctly calculates the year and month for the last month.",
            "The original query does not ensure that the quarter is from the same year. In a new year, 'QUARTER(CURRENT_DATE) - 1' could refer to the fourth quarter of the previous year. The corrected query checks that the year of the order date is the same as the current year for the previous quarter calculation.",
            "The original query was mostly correct but used a non-standard function DATE_SUB. Changed it to DATEADD for ANSI SQL compliance.",
            "The original query filters by the order date year instead of the shipped date year. The updated query now correctly filters orders shipped within the current year.",
            "The SQL query correctly calculates the average Order Fulfillment Time grouped by the ShipVia column. No changes are needed.",
            "The query correctly calculates the Total Sales for each country and orders the results to find the highest sales revenue. The use of JOIN and aggregation functions is appropriate. I've adjusted the table and column references to fully qualify them.",
            "The SQL query is mostly correct in calculating the 'Total Sales' by month. However, to ensure it covers only the past year, a WHERE clause should be added to filter the OrderDate to cover the last year from the current date. For example: WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR). The following query assumes you are using a system that supports DATE_SUB and CURDATE; otherwise, these functions need to be adjusted accordingly.",
            "The original query is mostly correct, but you should ensure that you're referring to 'od' for [Order Details] consistently throughout. The SELECT and JOIN clauses are correctly structured.",
            "The SQL query correctly calculates the average discount for orders placed in the previous month. It uses a subquery to filter orders from last month and calculates the average of the Discount column from the [Order Details] table. The use of IN ensures the correct subset of orders is considered.",
            "The original query correctly calculates the product count per order for the highest order by revenue. It joins the 'orders' and 'Order Details' tables, groups by OrderID, and orders by the total revenue for each order, returning the top result. No correction needed.",
            "The SQL query is correct. It correctly selects the year and month of each order date, counts the distinct customer IDs, and groups the results by year and month to provide the number of distinct customers placing orders each month.",
            "The query correctly calculates the total freight cost for shipped orders this year by filtering on the ShippedDate using the current year. The use of SUM and YEAR functions is appropriate.",
            "The query will not work correctly to get the previous month due to how the MONTH() function handles the 0th month (e.g., if the current month is January, it does not account for December of the previous year). Instead, use the DATE_TRUNC function to handle this or adjust manually for year-end transitions.",
            "The SQL query is correct and answers the question as it selects the city with the highest number of orders placed by grouping by 'ShipCity', counting the 'OrderID', and ordering the result in descending order of order count, then limiting the output to the top result.",
            "The query does not correctly handle the transition between months of different years (e.g., from December to January). It also incorrectly uses 'MONTH(CURRENT_DATE) - 1', which can result in invalid months (e.g., 0). A proper approach would involve date arithmetic functions to handle month and year transitions.",
            "The SQL query is correct. It selects the ShipRegion and calculates the average Order Fulfillment Time by using DATEDIFF to find the difference between ShippedDate and OrderDate. The results are grouped by ShipRegion and ordered by the average fulfillment time to find the fastest region.",
            "The query is correct. It calculates the Total Sales for each product for the current year and orders the results by ProductSales in descending order.",
            "The original query incorrectly calculates the last 3 months rather than the last quarter. The corrected query uses the DATE_TRUNC function to identify the start of the current quarter, then adjusts for the last quarter.",
            "The SQL query is correctly formulated to calculate the top 5 products by sales revenue based on the given schema and business metrics definitions.",
            "The SQL query correctly identifies orders that were fulfilled late by selecting orders where the ShippedDate is greater than the RequiredDate. The query is accurate and aligned with the business question.",
            "The SQL query is correct. It correctly counts the number of orders for each shipping method and orders them in descending order to find the most frequently used shipping method. The LIMIT 1 ensures that only the top result is returned.",
            "The SQL query correctly identifies the country with the highest number of orders by aggregating and counting OrderID grouped by ShipCountry. The use of ORDER BY with DESC and LIMIT 1 ensures we get the top country by order count. No corrections needed.",
            "The SQL query is correct. It calculates the percentage of total sales for each product by computing the sum of sales for each product and dividing it by the total sales of all products, then multiplying by 100 to get the percentage. The GROUP BY clause is used correctly to aggregate the results by ProductID.",
            "The original query calculates the on-time delivery rate but does not filter for the last year. Added a WHERE clause to filter orders from the last year.",
            "The SQL query is mostly correct. However, the function DATEADD is not part of the ANSI SQL standard and is specific to certain SQL dialects like SQL Server. In ANSI SQL, you would use the INTERVAL keyword for date arithmetic. Here is the corrected query: SELECT orders.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= CURRENT_DATE - INTERVAL '1' YEAR GROUP BY orders.CustomerID ORDER BY TotalSales DESC LIMIT 10;",
            "Corrected the 'Freight' column to be referenced from the 'orders' table, as it is correctly placed in that table according to the provided schema.",
            "The SQL query is correct. It correctly calculates the average shipping time by using the DATEDIFF function to find the difference between ShippedDate and OrderDate, and grouping the results by ShipRegion.",
            "The original query incorrectly calculates the date range for the last month. The 'WHERE' clause must ensure that 'OrderDate' is after the start of the previous month and before the start of the current month.",
            "The SQL query correctly calculates the average quantity ordered for each product by grouping results based on ProductID. No changes are needed.",
            "The SQL query correctly calculates the total sales for each shipping country by joining the orders and [Order Details] tables and grouping by ShipCountry. The use of SUM to calculate the total sales is appropriate based on the metric's definition. The query is correct.",
            "The query correctly calculates the average fulfillment time for each shipping method by using the AVG function on the date difference between ShippedDate and OrderDate. The use of GROUP BY on ShipVia is appropriate to compare different shipping methods. The ORDER BY clause sorts the results by average fulfillment time, which is correct for comparison.",
            "The original query was mostly correct but it missed filtering for the past 12 months. Added a WHERE clause to filter orders based on the date range.",
            "The initial query incorrectly calculates the average quantity without grouping by OrderID. The corrected query groups by OrderID to calculate the sum of quantities for each order and then averages those sums."
        ],
        "difficulty": [
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "advanced",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "easy",
            "easy",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "easy",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "easy",
            "advanced",
            "easy",
            "easy",
            "medium",
            "easy",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "easy",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "easy",
            "advanced",
            "medium",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "advanced",
            "medium",
            "medium",
            "easy",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "easy",
            "easy",
            "easy",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "easy",
            "advanced",
            "medium",
            "easy"
        ]
    },
    "Customer Analysis": {
        "questions": [
            "What is the total number of unique customers who have placed orders?",
            "Which country has the highest number of customers?",
            "How many orders were placed in the year 2023?",
            "What is the average freight cost per order?",
            "What is the total revenue generated by customer 'XYZ Company'?",
            "Which customer has the highest lifetime value?",
            "List the top 5 products sold by quantity.",
            "Which month had the highest order volume in 2023?",
            "Find all customers who have never placed an order.",
            "Calculate the total discounts given in 2023.",
            "What is the average order quantity per customer?",
            "Which employee has handled the most orders?",
            "Find the most frequently used shipping method.",
            "What is the retention rate between January and February 2023?",
            "Which product generated the highest total revenue?",
            "List all customers and the number of orders they placed.",
            "What is the average shipping time for each shipping method?",
            "Identify the top 3 cities with the highest total revenue.",
            "How many orders were shipped after the required date?",
            "Find the customer with the largest single order revenue.",
            "What is the total revenue generated by each customer?",
            "How many orders have been placed by customers in each country?",
            "Which customer has placed the highest number of orders?",
            "What is the average order value per customer?",
            "List the top 5 products with the highest total sales.",
            "Find out the average discount given for each customer.",
            "Which city has the highest number of customers?",
            "Calculate the total freight cost for all orders shipped to the USA.",
            "Identify the number of unique products ordered by each customer.",
            "Calculate the average time between order placement and shipping.",
            "Which month has the highest number of orders?",
            "Determine the retention rate of customers from January 2023 to December 2023.",
            "How many orders have been delayed in shipment past their required date?",
            "List the customers with more than 5 orders.",
            "Find the top 3 employees who handle the most orders.",
            "What is the total quantity of products sold to date?",
            "Calculate the Customer Lifetime Value for each customer.",
            "Identify customers with the highest average order frequency.",
            "Which shipper method is used most frequently?",
            "What is the total discount given across all orders?",
            "How many orders has each customer placed in the last year?",
            "How much freight cost did we incur last month?",
            "What is the most frequently ordered product?",
            "How many different products did each customer order last quarter?",
            "Which city hosts the most customers?",
            "What is the average order size in terms of quantity?",
            "Which shipper was used the most last year?",
            "What is the total discount given on all orders?",
            "Identify the top 5 customers by total revenue.",
            "Which countries have the highest number of orders?",
            "How many customers placed their first order this year?",
            "What is the average discount applied to orders by each customer?",
            "What was the most common order month for new customers?",
            "How many orders were shipped for each shipping method?",
            "Calculate the total revenue per country.",
            "What is the average number of orders per month per customer?",
            "Which product generated the most revenue last month?",
            "What percentage of orders were placed by returning customers?",
            "Which customers have placed orders in more than three different cities?",
            "What is the average discount applied to orders by country?",
            "Who are the top five customers by total ordered quantity?",
            "How many orders were placed but not shipped yet?",
            "What is the monthly average freight cost?",
            "Which products have the highest discount percentage?",
            "How many customers have made repeat purchases?",
            "What is the distribution of orders among different shipping methods?",
            "Which customer has the highest Customer Lifetime Value?",
            "What is the average order value for each customer?",
            "How is the order frequency distributed over the months of the year?",
            "Identify customers who have ordered within the last month but not in the previous three months.",
            "What is the total freight cost per country?",
            "List employees who have not been assigned to any orders.",
            "Which regions have the highest average order quantities?",
            "How many customers exist in each country?",
            "What is the average number of products ordered per order?",
            "What is the total order quantity for orders shipped by different freight companies?",
            "Identify the customers with the highest order frequency in the last year.",
            "Which customers have placed more than 5 orders?",
            "What is the average discount given across all orders?",
            "Who are the top 5 customers by total order value?",
            "What is the average freight cost for orders shipped to Germany?",
            "Which customers have placed more than 10 orders?",
            "Identify the top 5 products with the highest total sales value.",
            "What is the average order quantity for orders placed in 2023?",
            "Determine the total discounts given to each customer.",
            "How many customers are located in each country?",
            "What is the most frequently used shipping method?",
            "Calculate the total revenue generated by orders shipped after the required date.",
            "Which customer placed the first order?",
            "What is the average unit price for products with a quantity greater than 50?",
            "List the customers who have never received a discount on their orders.",
            "What is the retention rate for January 2023?",
            "Identify orders with a freight cost greater than $100 and shipped to the USA.",
            "Which employee has processed the most orders?",
            "Calculate the lifetime value of each customer.",
            "Identify the city with the highest number of customers.",
            "What is the total number of products ordered by each customer?",
            "What is the percentage of orders shipped within 3 days of the order date?",
            "Determine the customer satisfaction score based on average order frequency.",
            "What is the total revenue generated by each customer over their lifetime?",
            "Which customers have placed the most orders?",
            "How many orders have been placed by customers from each country?",
            "What is the total quantity of products ordered in the last year?",
            "Identify the top three products by revenue.",
            "Which shipping methods are most frequently used?",
            "How many customers have more than one order in the system?",
            "What is the total discount given to each customer?",
            "Find customers who haven't placed an order in the last year.",
            "Calculate the total freight cost for orders shipped to each country.",
            "What is the average time between order date and shipped date?",
            "Identify the customer with the highest Lifetime Value (CLV).",
            "Find the most common city for customer addresses.",
            "What is the overall customer retention rate for the past three months?",
            "Which employees have processed the most orders?",
            "Determine the top regions by total order revenue.",
            "What is the average discount given on orders?",
            "Find orders with a shipping cost over $100.",
            "Identify customers with the longest time since their last order.",
            "What is the average order value for customers from each country?",
            "How many unique products have been ordered in total?",
            "What is the total number of orders placed each month?",
            "Which customer generated the most revenue last year?",
            "How many orders were shipped more than a week after the order date?",
            "What is the average discount applied to the orders?",
            "Which products were most commonly ordered?",
            "How many customers are there from each city?",
            "What is the percentage of orders that used each shipping method?",
            "What are the top 5 customers by total spending?",
            "What is the distribution of orders across different regions?",
            "Which employees are handling the most orders?",
            "What is the monthly customer retention rate?",
            "Which orders had the highest freight costs?",
            "What is the growth rate in customer orders year over year?",
            "How many orders were placed by customers with 'Manager' in their contact title?",
            "Which cities have the highest number of different customers?",
            "What is the total discount amount provided to each customer?",
            "How many customers are there from each country?",
            "Which customers have placed orders with a shipping cost exceeding $100?",
            "What is the average order quantity for each product?",
            "Which customer placed the most orders last year?",
            "What is the total discount given by each customer?",
            "How many orders have not yet been shipped?",
            "What is the average freight cost for orders shipped to the USA?",
            "What is the most common shipping city?",
            "Which orders had a discount applied and what was the total discount amount?",
            "Identify the top 5 customers based on lifetime value.",
            "How many distinct products were ordered by each customer?",
            "Find the number of orders placed each month this year.",
            "What is the Customer Retention Rate for the last quarter?",
            "Calculate the average time between order placement and shipping for all orders.",
            "Which customer had the highest single order value?",
            "List all customers who have not placed any orders in the last six months.",
            "Find the most ordered product in terms of quantity.",
            "Which region has the highest total freight cost?",
            "Identify customers with over $5000 in total order revenue.",
            "How many orders were placed by customers in each country?",
            "What is the average order value across all orders?",
            "Identify the customer with the highest lifetime value.",
            "What is the total revenue generated from each customer?",
            "How many customers are from each country?",
            "Which customer placed the most orders?",
            "Identify the top five products in terms of total revenue.",
            "Calculate the total discount given to each customer.",
            "What is the customer retention rate for the past month?",
            "List all customers who have not placed an order in the last year.",
            "What is the average freight cost per shipped order?",
            "Find the most recent order details for a specific customer.",
            "What is the total quantity ordered for each product?",
            "Determine the average shipping delay for all orders.",
            "List the top three cities with the most customers.",
            "Calculate the total freight cost by country.",
            "Identify customers with more than five orders.",
            "What is the percentage of orders that include a discount?",
            "Find the total revenue generated in each month of the current year.",
            "Which region has the highest average order value?",
            "What is the total Customer Lifetime Value for each customer?",
            "How many orders were placed by customers in 'Germany' last month?",
            "Which customer has the highest total order value?",
            "What products have been ordered most frequently?",
            "What is the average discount rate for orders over the past year?",
            "Identify customers who have never placed an order.",
            "Calculate the Customer Retention Rate for the past quarter.",
            "Which customer regions have the highest number of orders?",
            "How many customers have placed more than five orders?",
            "What is the average freight cost for orders shipped to 'USA'?",
            "Find the most recent order for each customer.",
            "Determine which month had the highest sales revenue this year.",
            "Identify the employee responsible for the highest number of orders.",
            "Calculate the average quantity ordered per product.",
            "Find customers with orders that have been delayed more than a week.",
            "Which product generated the most revenue this quarter?",
            "Analyze the trend in the number of orders shipped each month.",
            "Find the top 5 customers by order frequency.",
            "List countries with the most diverse product purchases.",
            "What is the average order amount for each customer?",
            "How many orders were shipped within 7 days of the order date?",
            "What are the top 5 products with the highest revenue?",
            "Which customer received the most discounts on their orders?",
            "What is the average freight cost for shipped orders?",
            "Identify customers who have not placed any orders in the last year.",
            "What are the top 5 cities with the most orders?",
            "Which customers have returned to place an order more than once?",
            "What is the percentage increase in orders compared to the previous year?",
            "List customers with the highest average discount per order.",
            "Identify orders that have not been shipped within 30 days of the order date.",
            "Which employees have the highest number of orders processed?",
            "What is the trend of the number of orders over the months?",
            "Are there any regions where the average order value is below average?",
            "How many distinct products are purchased by each customer?",
            "Calculate Customer Retention Rate for the last quarter.",
            "Find the total quantity of products ordered by each customer.",
            "How many orders were placed in each country?",
            "Which product generated the most revenue?",
            "How many customers placed orders in the last year?",
            "What is the total discount given per customer?",
            "Which region has the highest customer satisfaction based on on-time shipping?",
            "How many orders were shipped late?",
            "What is the Customer Lifetime Value for each customer?",
            "What percentage of customers returned in the last quarter?",
            "Which shipping method is most frequently used?",
            "Identify the top 5 customers by total order value.",
            "How many customers are there in each contact title category?",
            "Calculate the total freight cost per country.",
            "What is the maximum, minimum, and average discount given on orders?",
            "How many unique products did the top customer purchase?",
            "Which month had the highest sales revenue?",
            "Identify the earliest and latest shipping dates for each customer.",
            "Which company name appears most frequently in the customer database?",
            "How many orders were placed each month?",
            "What is the total number of customers from each country?",
            "How many orders have been placed by each customer?",
            "Determine the total orders and average order value for each shipping country.",
            "Find the customer with the highest lifetime value.",
            "Calculate the percentage of customers who made more than one purchase.",
            "What is the total discount provided across all orders?",
            "List the top 3 products by revenue.",
            "Determine the monthly customer retention rate for the last year.",
            "Analyze the monthly order trends and identify peak months.",
            "What is the average freight cost per shipping method?",
            "Which cities have the highest number of unique customers?",
            "What is the total revenue generated from orders that included a discount?",
            "Identify customers who have never received a discount.",
            "How many orders were shipped late (after the required date)?",
            "Find the region with the highest customer lifetime value.",
            "List all customers who placed orders in the first quarter of 2023.",
            "Determine the impact of discounts on the average order value.",
            "Which customers have placed more than ten orders?",
            "Which products have the highest total sales revenue?",
            "What is the customer lifetime value for each customer?",
            "Which customers have not placed any orders in the last year?",
            "What is the most popular shipping country?",
            "Which customer has the highest frequency of orders?",
            "What is the total quantity of products ordered by each customer?",
            "Which orders have incurred the highest freight costs?",
            "How many orders have been shipped to the 'USA'?",
            "What is the average discount provided per order?",
            "Which city has the most number of customers?",
            "Find the top five customers by total revenue.",
            "What is the customer retention rate from January to June?",
            "Calculate the average time between order and shipment.",
            "Identify customers who have received a discount of more than 20% on any product.",
            "How many orders were shipped more than 5 days after the required date?",
            "List the customers who have placed orders only with a specific EmployeeID.",
            "What is the total revenue by country?",
            "What is the total lifetime value of each customer?",
            "How many orders were placed each month in the last year?",
            "What are the top 5 products by sales revenue?",
            "Which customers placed orders in January that were shipped by a specific shipping method?",
            "Calculate the total discount given on all orders.",
            "Find the average freight cost for orders shipped to each country.",
            "List the top 3 customers by order volume.",
            "Find orders that have never been shipped.",
            "Calculate the total number of orders placed by each region.",
            "Determine the month with the highest sales revenue.",
            "Identify products with a discount greater than 10%.",
            "What is the customer retention rate for the last six months?",
            "How many customers are in each contact title category?",
            "Find the total sales for each shipping method.",
            "List orders with a required date earlier than the order date.",
            "Calculate the average discount rate for each product.",
            "Which employee managed the highest number of orders?",
            "What is the total revenue generated by each customer over time?",
            "How many orders were placed by customers in the United States?",
            "Which customer has made the most orders?",
            "How many orders have been shipped but not yet delivered?",
            "Identify the top 5 customers by total spending.",
            "Which products are most frequently ordered?",
            "What is the Customer Retention Rate for the last year?",
            "How many customers have placed more than 5 orders?",
            "What regions have the highest number of unique customers?",
            "Which customers placed orders during a specific month?",
            "Find the total value of orders for each shipping country.",
            "What is the most common shipping method used?",
            "Which employees handled the most orders last month?",
            "Identify the average number of products per order.",
            "How many orders included a discount?",
            "What is the earliest and latest order date for each customer?",
            "Determine the total number of customers who have never placed an order.",
            "Which customer placed the highest number of orders?",
            "Which customers have placed orders more than five times?",
            "Identify the top 10 products with the highest sales revenue.",
            "Which countries have the highest number of customers?",
            "What is the total freight cost for each shipping method?",
            "Find the average shipping time for orders.",
            "What is the monthly trend of new customers acquired?",
            "What percentage of orders were shipped late (after the required date)?",
            "Find the total discount given across all orders.",
            "Which city has the highest order volume?",
            "Determine the Customer Retention Rate for the past quarter.",
            "What is the distribution of order quantities?",
            "List the top 5 customers by total order value.",
            "Which region generates the most revenue?",
            "Identify customers who have received the highest total discounts.",
            "What is the most frequently used contact title among customers?",
            "What is the total revenue generated from each customer over time?",
            "How many unique products have been ordered by each customer?",
            "What are the top 5 products with the highest discount given?",
            "Which customers have the highest lifetime value?",
            "What is the most common shipping country for orders?",
            "What are the total freight costs incurred per month?",
            "What percentage of customers are returning customers within the last month?",
            "Which city has the highest number of orders?",
            "What is the average discount applied per order?",
            "Which products are ordered the most with a discount applied?",
            "What are the 10 cities with highest revenue from customer orders?",
            "What are the top 3 regions in terms of total order quantity?",
            "Which customers have not placed an order in the last year?",
            "What is the total revenue generated by region?",
            "Which customer placed the earliest order and when?",
            "What percentage of orders are shipped via each shipping method?",
            "What is the average time span between the order date and shipped date?",
            "Which customer has placed the most orders?",
            "What is the average order value?",
            "Which products have been ordered the most across all customers?",
            "What is the average number of items per order?",
            "Which cities have customers with the highest customer lifetime value?",
            "What is the average freight cost per shipment method?",
            "What is the customer retention rate for the last year?",
            "Which products are most frequently ordered together?",
            "What is the ratio of shipped orders to total orders per customer?",
            "How many customers are there in each region?",
            "What is the total revenue for each month in the last year?",
            "Which employees handled the most customer orders?",
            "What percentage of total revenue comes from repeat customers?",
            "What is the order frequency of each customer?",
            "Which customer has the highest average order value?",
            "What are the top three countries by number of orders?",
            "Which customers have placed the highest number of orders?",
            "List the customers who have never placed an order.",
            "Who are the top 5 customers by revenue?",
            "What is the monthly revenue trend?",
            "Which product generates the most revenue?",
            "What is the average discount offered per order?",
            "Identify the top 3 cities with the highest number of customers.",
            "How many orders were shipped late last month?",
            "Calculate the average quantity of products per order.",
            "Determine the total freight cost per country.",
            "Which shipping method is preferred by most customers?",
            "Find the number of orders that include products with a discount greater than 10%.",
            "Identify customers with more than 5 orders placed in the last quarter.",
            "What is the total number of distinct products sold?",
            "List the top 3 employees who handled the most orders.",
            "Which customers received shipments to multiple countries?",
            "What is the trend in the average discount offered over the past year?",
            "Which customers made purchases in both January and February?",
            "Identify the top 5 customers based on the number of orders they placed.",
            "Which products have been ordered the most by customers from Canada?",
            "Calculate the average freight cost for orders shipped to each country.",
            "Which product has generated the most revenue?",
            "What is the total discount offered across all orders?",
            "Which customer received the most discounts?",
            "Identify customers who have not placed an order in the last six months.",
            "Which region generated the highest revenue?",
            "How many orders were placed by each employee?",
            "What is the average number of days between order placement and shipping?",
            "What is the total sales value for each product category?",
            "Which day of the week has the highest number of orders placed?",
            "How many orders were placed with a discount greater than 10%?",
            "Which customers are from a specific country and have placed orders?",
            "How many orders were placed by customers from a specific city?",
            "Which products are ordered the most?",
            "What is the average discount given on all orders?",
            "How many orders have not been shipped yet?",
            "What is the total freight cost incurred for all orders?",
            "How many unique customers placed orders in the last month?",
            "What is the retention rate of customers over the past year?",
            "Which regions have the highest number of unique customers?",
            "What is the most popular shipping method?",
            "How many shipments were delayed beyond the required date?",
            "What is the total quantity of each product sold?",
            "Which customer generated the highest revenue in the last year?",
            "What is the average number of products per order?",
            "How often do customers from a specific region place orders?",
            "What is the total amount of discounts given per customer?",
            "Which orders have the highest discount applied?",
            "What is the average freight cost for orders shipped in the month of January?",
            "How many orders were shipped to each country during the last quarter?",
            "Which products are most frequently ordered with a discount?",
            "Calculate the total sales for each product.",
            "Determine the top 5 customers by lifetime value.",
            "Which shipping method is used most frequently?",
            "Find the average discount given on all orders.",
            "Identify orders with a shipping delay greater than 7 days.",
            "Calculate the customer retention rate over the past year.",
            "Which region has the highest total sales?",
            "List customers along with their total number of orders.",
            "Determine the month with the highest sales.",
            "Which employee managed the most orders?",
            "Find the customer with the highest single order value.",
            "How many customers have ordered more than 20 times?",
            "Calculate the total quantity ordered for each product category.",
            "How many orders were placed by each customer in 2022?",
            "List the top 5 customers by total revenue generated.",
            "What is the total freight cost for all orders shipped to Germany?",
            "How many orders were delayed beyond the required date?",
            "What are the top 3 most purchased products in terms of quantity?",
            "Find the most frequently ordered product for each customer.",
            "Calculate the total revenue generated in December 2022.",
            "How many unique products are ordered each month?",
            "What is the average discount applied to orders?",
            "List customers who haven\u2019t placed any orders in the last year.",
            "Determine the retention rate for customers between January and June 2023.",
            "Identify the month with the highest number of new customers.",
            "What is the highest single order value recorded?",
            "Find the customer with the longest duration between first and last order.",
            "How many customers are located in each region?",
            "Which product category generates the most revenue?",
            "Calculate the lifetime value for each customer.",
            "What is the total number of customers in each country?",
            "Find the average order value for each customer.",
            "Which product has been ordered the most?",
            "Which customer has made the most purchases?",
            "What is the total sales revenue for each customer?",
            "Identify the customers who have not placed any orders.",
            "Which region has the highest number of distinct customers?",
            "Calculate the average order value across all customers.",
            "List the top 5 customers by lifetime value.",
            "What is the total number of orders placed in each country?",
            "Determine the most frequently ordered product.",
            "Identify customers with a retention period between two specific dates.",
            "What is the total freight cost per city?",
            "List all orders that have not been shipped yet.",
            "Which customer has the highest total order quantity?",
            "Calculate the percentage of orders shipped on time.",
            "Determine the month with the highest number of new customers.",
            "What is the customer retention rate over the last month?",
            "Find the average shipping time by country.",
            "Identify the product with the highest average unit price.",
            "Which customers have received the largest discounts?",
            "Calculate the revenue lost due to discounts for each product.",
            "Which country has the highest number of orders?",
            "How many customers have placed an order in each city?",
            "What is the average freight cost per order in the database?",
            "Identify the top three products by total revenue.",
            "Which customers have never received a discounted product?",
            "What is the average number of orders placed per customer?",
            "Calculate the customer lifetime value for each customer.",
            "Determine the retention rate for the last quarter.",
            "Find the average order size by country.",
            "Identify customers with orders shipped within 7 days of the order date.",
            "What is the total discount given for each product?",
            "Find the top five countries in terms of shipping costs.",
            "How many orders were shipped to a different country than the customer's?",
            "What is the percentage of orders that included a discount?",
            "Calculate the average discount per order.",
            "Determine the peak month for order placements.",
            "Which customers have placed orders in all available regions?",
            "What is the total number of customers by country?",
            "What is the average freight cost by shipping country?",
            "Find the top 5 most ordered products by quantity.",
            "Calculate the total revenue generated by each customer.",
            "Determine the average discount given on all orders.",
            "Which month had the highest number of orders placed?",
            "Find the highest freight charges for each country.",
            "What is the most common city among shipping addresses?",
            "Track monthly customer retention rates over the past year.",
            "Determine the average order amount by customer region.",
            "Which customers are located in a specific region?",
            "How many unique products were ordered last year?",
            "Find the total number of orders shipped by each method.",
            "Calculate the difference between required and shipped dates on average.",
            "What are the top 5 countries with the highest number of customers?",
            "Which customers have placed orders totaling more than $10,000?",
            "Identify the most frequently ordered product.",
            "Which customers have made repeat purchases?",
            "How many orders were shipped in 2022?",
            "Calculate the total freight cost for each shipping country.",
            "Determine the average discount applied per order.",
            "Find the customers who have not placed any orders.",
            "What is the Customer Lifetime Value (CLV) for each customer?",
            "List all orders along with their total value post discount.",
            "What is the monthly customer retention rate for 2023?",
            "Identify the earliest and latest order dates for each customer.",
            "Rank customers by the number of orders they have placed.",
            "How many distinct products are ordered in each country?",
            "What is the total revenue generated from orders in 2023?",
            "Find the customer with the longest gap between two orders.",
            "What percentage of orders are completed without any discount?",
            "How many orders were placed by customers from each country?",
            "Which product has the highest discount applied?",
            "How many unique customers placed orders each month?",
            "What is the total number of orders placed by each customer?",
            "Which customers have not placed any orders?",
            "What is the lifetime value of each customer?",
            "How many orders were placed in each city?",
            "Calculate the customer retention rate for January 2022.",
            "What percentage of orders include a discount?",
            "List customers who made orders in January but not in February.",
            "Find the average discount per customer.",
            "Which product is ordered the most by customers in Germany?",
            "How many unique products has each customer ordered?",
            "List the top 3 cities with the highest number of shipped orders.",
            "Identify which employees handle the most orders.",
            "Calculate the average number of orders for each month in 2021.",
            "What is the average shipping time per order?",
            "Which customer generated the highest revenue in 2022?",
            "List customers with more than 5 orders and an average discount of more than 10%.",
            "Determine the most common shipping region for orders exceeding $500.",
            "List the top 5 cities with the highest number of customers.",
            "Which products have the highest discount rate on average?",
            "Calculate the total freight cost for all orders in the last year.",
            "What is the average number of orders placed by customers from each country?",
            "Identify orders that have a shipping delay greater than 7 days.",
            "Which customer has the most significant number of high-value orders (over $1000)?",
            "Determine the top 3 regions with the highest sales.",
            "What percentage of orders are shipped through each shipping method?",
            "How many products are ordered on average per order?",
            "Identify the month with the highest number of orders last year.",
            "Which customers have the highest retention rate over the past six months?",
            "Find the customers who have not placed an order in the last year.",
            "What are the top 5 products in terms of revenue generated?",
            "List the employee who has handled the most orders.",
            "What is the average discount given per order?",
            "How does the average order value change per region?",
            "What is the average order value for each country?",
            "List the top 5 products by revenue.",
            "How many orders were shipped to each country?",
            "Calculate the average discount given per order.",
            "Which month had the highest number of orders?",
            "Identify customers with orders shipped after the required date.",
            "Determine the customer retention rate for the last year.",
            "Find the total number of distinct products ordered by each customer.",
            "What is the total freight cost by region?",
            "Identify the top 3 cities with the highest number of shipping delays.",
            "Find the average number of products per order.",
            "Calculate the total revenue for orders with more than 5 items.",
            "Determine which employee has handled the most orders.",
            "List customers who have not placed any orders in the past year.",
            "What is the total discount amount for each customer?",
            "What is the average discount applied to orders for each customer?",
            "How many orders have been shipped to each country?",
            "What is the total freight cost for each customer?",
            "How many unique products have been purchased by each customer?",
            "What are the top 5 products by total sales value?",
            "How many returning customers are there each month?",
            "Which customers have not placed any orders recently?",
            "What is the most common shipping method?",
            "Which product has the highest average discount?",
            "What is the average quantity of products per order?",
            "How many orders have a shipping delay?",
            "What is the most common customer region?",
            "What are the total sales for each employee?",
            "Which country has the highest average order value?",
            "How many customers have ordered more than 10 times?",
            "What is the total number of shipped orders per month?",
            "What is the total number of unique customers?",
            "What is the average freight cost for all orders?",
            "How many orders were placed in each month of the year?",
            "List all orders that were shipped after the required date.",
            "Calculate the total revenue generated from each country.",
            "Which customers placed an order in the last month?",
            "Which city has the highest number of unique customers?",
            "How many orders were shipped last year?",
            "What is the total discount given in the last quarter?",
            "Identify customers who have not placed an order this year.",
            "Which product has the highest quantity ordered?",
            "Calculate the Lifetime Value for each customer.",
            "List the orders with the highest freight cost.",
            "Which employee handled the most orders?",
            "What is the average number of orders per country?",
            "What is the total revenue for each product category?",
            "Identify the orders shipped more than 7 days after ordering.",
            "What is the average discount per order?",
            "Which region accounts for the highest revenue?",
            "How many customers ordered more than three times?",
            "Identify peak ordering days of the week.",
            "How many orders were placed by each customer?",
            "What is the total freight cost by shipping method?",
            "Which product has the highest total sales quantity?",
            "Find the total number of orders placed in each country.",
            "What is the average discount applied on all orders?",
            "Identify customers who placed orders in multiple regions.",
            "Calculate the average order value per customer.",
            "Identify orders with freight cost greater than $100.",
            "What is the retention rate for customers from the last year?",
            "Find the top 5 customers by lifetime value.",
            "What is the total number of unique products ordered?",
            "What is the percentage of orders that were shipped late?",
            "Calculate the total revenue for each shipping country.",
            "How many customers have the title 'Owner'?",
            "Identify the orders shipped with discount greater than 10%.",
            "Determine the top 3 cities with the highest number of orders.",
            "Which city has the most customer orders?",
            "Identify the top 5 customers by order count.",
            "Find the average discount given on orders across all customers.",
            "Determine the most popular shipping method used by customers.",
            "Calculate the Customer Lifetime Value for a specific customer.",
            "Which product has the highest total sales revenue?",
            "Calculate the average order size in terms of total items.",
            "Determine the busiest month for orders.",
            "Find the customer with the longest average delivery time.",
            "Identify the customer with the highest return rate.",
            "How many customers placed more than one order in the last year?",
            "Which country had the highest average order value last year?",
            "What are the top 5 customers by total order value?",
            "How many orders were placed in 2022?",
            "List the customers who have not placed any orders.",
            "What is the total revenue from all orders?",
            "Which month in 2022 had the highest sales?",
            "How many customers are located in each city?",
            "List the orders where the discount was applied.",
            "What is the customer retention rate for January 2023?",
            "List the regions with the highest number of orders.",
            "What is the average order quantity per product?",
            "Identify orders shipped via the most common method.",
            "Calculate the average time from order to shipping.",
            "Which city's orders have the highest average freight cost?",
            "What is the difference in total revenue between 2021 and 2022?",
            "Which product has been ordered the most by quantity?"
        ],
        "sql_queries": [
            "SELECT COUNT(DISTINCT CustomerID) FROM orders;",
            "SELECT Country, COUNT(*) AS NumCustomers FROM customers GROUP BY Country ORDER BY NumCustomers DESC LIMIT 1;",
            "SELECT COUNT(*) FROM orders WHERE YEAR(OrderDate) = 2023;",
            "SELECT AVG(Freight) FROM orders;",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE c.CompanyName = 'XYZ Company';",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CLV FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY CLV DESC LIMIT 1;",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 5;",
            "SELECT MONTH(OrderDate) AS OrderMonth, COUNT(*) AS OrderCount FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY OrderMonth ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT CustomerID FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders);",
            "SELECT SUM(od.UnitPrice * od.Quantity * od.Discount) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = 2023;",
            "SELECT AVG(order_quantity) FROM (SELECT o.CustomerID, SUM(od.Quantity) AS order_quantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID) AS customer_orders;",
            "SELECT EmployeeID, COUNT(*) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
            "SELECT (COUNT(DISTINCT o.JanuaryCustomerID) * 1.0 / COUNT(DISTINCT o2.PreJanuaryCustomerID)) * 100 AS RetentionRate FROM (SELECT DISTINCT CustomerID AS JanuaryCustomerID FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-02-01') o LEFT JOIN (SELECT DISTINCT CustomerID AS PreJanuaryCustomerID FROM orders WHERE OrderDate < '2023-01-01') o2 ON o.JanuaryCustomerID = o2.PreJanuaryCustomerID;",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT c.CustomerID, COUNT(o.OrderID) AS OrderCount FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID;",
            "SELECT ShipVia, AVG(DATEDIFF(day, OrderDate, ShippedDate)) AS AvgShippingTime FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipVia;",
            "SELECT ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCity ORDER BY TotalRevenue DESC LIMIT 3;",
            "SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT o.CustomerID, od.OrderID, MAX(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MaxSingleOrderRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID, od.OrderID ORDER BY MaxSingleOrderRevenue DESC LIMIT 1;",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
            "SELECT customers.Country, COUNT(orders.OrderID) AS NumberOfOrders FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.Country;",
            "SELECT customers.CustomerID, COUNT(orders.OrderID) AS NumberOfOrders FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT customers.CustomerID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
            "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT customers.CustomerID, AVG([Order Details].Discount) AS AverageDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
            "SELECT City, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY City ORDER BY NumberOfCustomers DESC LIMIT 1;",
            "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShipCountry = 'USA';",
            "SELECT customers.CustomerID, COUNT(DISTINCT [Order Details].ProductID) AS NumberOfUniqueProducts FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingDelay FROM orders WHERE ShippedDate IS NOT NULL;",
            "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EXTRACT(MONTH FROM OrderDate) ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' THEN orders.CustomerID END) * 1.0 / COUNT(DISTINCT orders.CustomerID)) AS RetentionRate FROM orders WHERE orders.OrderDate < '2023-01-01' OR orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31';",
            "SELECT COUNT(OrderID) AS DelayedOrders FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT customers.CustomerID, COUNT(orders.OrderID) AS NumberOfOrders FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 5;",
            "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 3;",
            "SELECT SUM(Quantity) AS TotalQuantitySold FROM [Order Details];",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CustomerLifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
            "SELECT customers.CustomerID, COUNT(orders.OrderID) / NULLIF(DATEDIFF(MAX(orders.OrderDate), MIN(orders.OrderDate)), 0) AS AverageOrderFrequency FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID ORDER BY AverageOrderFrequency DESC;",
            "SELECT ShipVia, COUNT(OrderID) AS NumberOfShipments FROM orders GROUP BY ShipVia ORDER BY NumberOfShipments DESC LIMIT 1;",
            "SELECT SUM(UnitPrice * Quantity * Discount) AS TotalDiscountGiven FROM [Order Details];",
            "SELECT c.CustomerID, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY c.CustomerID;",
            "SELECT SUM(o.Freight) AS TotalFreightLastMonth FROM orders o WHERE o.OrderDate >= DATEADD(MONTH, DATEDIFF(MONTH, 0, CURRENT_DATE) - 1, 0) AND o.OrderDate < DATEADD(MONTH, DATEDIFF(MONTH, 0, CURRENT_DATE), 0);",
            "SELECT od.ProductID, COUNT(od.OrderID) AS OrderCount FROM [Order Details] od GROUP BY od.ProductID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT c.CustomerID, COUNT(DISTINCT od.ProductID) AS ProductVariety FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('QUARTER', CURRENT_DATE) - INTERVAL '3 MONTH' AND o.OrderDate < DATE_TRUNC('QUARTER', CURRENT_DATE) GROUP BY c.CustomerID;",
            "SELECT c.City, COUNT(c.CustomerID) AS CustomerCount FROM customers c GROUP BY c.City ORDER BY CustomerCount DESC LIMIT 1;",
            "SELECT AVG(od.Quantity) AS AverageOrderSize FROM [Order Details] od;",
            "SELECT o.ShipVia, COUNT(o.OrderID) AS ShipCount FROM orders o WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY o.ShipVia ORDER BY ShipCount DESC LIMIT 1;",
            "SELECT SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details];",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalRevenue DESC LIMIT 5;",
            "SELECT o.ShipCountry, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipCountry ORDER BY OrderCount DESC;",
            "SELECT COUNT(DISTINCT o.CustomerID) AS NewCustomers FROM orders o WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) AND NOT EXISTS (SELECT 1 FROM orders o2 WHERE o2.CustomerID = o.CustomerID AND YEAR(o2.OrderDate) < YEAR(CURDATE()));",
            "SELECT c.CustomerID, AVG(od.Discount) AS AverageDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
            "SELECT EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, COUNT(o.CustomerID) AS NewCustomerCount FROM orders o JOIN customers c ON o.CustomerID = c.CustomerID WHERE o.OrderDate = c.RegisterDate GROUP BY OrderMonth ORDER BY NewCustomerCount DESC LIMIT 1;",
            "SELECT o.ShipVia, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipVia;",
            "SELECT o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry;",
            "SELECT c.CustomerID, COUNT(o.OrderID) / COUNT(DISTINCT EXTRACT(YEAR FROM o.OrderDate) || '-' || EXTRACT(MONTH FROM o.OrderDate)) AS AvgOrdersPerMonth FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID;",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND o.OrderDate < CURDATE() GROUP BY od.ProductID ORDER BY Revenue DESC LIMIT 1;",
            "SELECT COUNT(DISTINCT o.CustomerID) * 100.0 / (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR)) AS ReturningCustomerPercentage FROM orders o WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) AND o.CustomerID IN (SELECT CustomerID FROM orders WHERE OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR));",
            "SELECT DISTINCT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID HAVING COUNT(DISTINCT orders.ShipCity) > 3;",
            "SELECT customers.Country, AVG([Order Details].Discount) AS AvgDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.Country;",
            "SELECT customers.CustomerID, SUM([Order Details].Quantity) AS TotalQuantity FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY TotalQuantity DESC LIMIT 5;",
            "SELECT COUNT(*) FROM orders WHERE ShippedDate IS NULL;",
            "SELECT DATE_PART('month', OrderDate) AS OrderMonth, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY OrderMonth;",
            "SELECT ProductID, MAX(Discount) AS MaxDiscount FROM [Order Details] GROUP BY ProductID ORDER BY MaxDiscount DESC;",
            "SELECT COUNT(DISTINCT CustomerID) FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 1;",
            "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia;",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CustomerLifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY CustomerLifetimeValue DESC LIMIT 1;",
            "SELECT customers.CustomerID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
            "SELECT EXTRACT(MONTH FROM OrderDate) AS OrderMonth, COUNT(OrderID) AS OrderFrequency FROM orders GROUP BY OrderMonth;",
            "SELECT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate BETWEEN CURRENT_DATE - INTERVAL '1 month' AND CURRENT_DATE AND customers.CustomerID NOT IN (SELECT CustomerID FROM orders WHERE OrderDate BETWEEN CURRENT_DATE - INTERVAL '4 months' AND CURRENT_DATE - INTERVAL '2 month');",
            "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;",
            "SELECT EmployeeID FROM employees WHERE EmployeeID NOT IN (SELECT DISTINCT EmployeeID FROM orders);",
            "SELECT ShipRegion, AVG([Order Details].Quantity) AS AvgQuantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion ORDER BY AvgQuantity DESC;",
            "SELECT Country, COUNT(CustomerID) AS CustomerCount FROM customers GROUP BY Country;",
            "SELECT AVG(OrderQuantity) AS AvgProductsPerOrder FROM (SELECT OrderID, COUNT(ProductID) AS OrderQuantity FROM [Order Details] GROUP BY OrderID) AS OrderCounts;",
            "SELECT ShipVia, SUM([Order Details].Quantity) AS TotalQuantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipVia;",
            "SELECT CustomerID, COUNT(OrderID) AS OrderFrequency FROM orders WHERE OrderDate > CURRENT_DATE - INTERVAL '1 year' GROUP BY CustomerID ORDER BY OrderFrequency DESC LIMIT 10;",
            "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 5;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT C.CustomerID, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalOrderValue FROM customers C JOIN orders O ON C.CustomerID = O.CustomerID JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY C.CustomerID ORDER BY TotalOrderValue DESC LIMIT 5;",
            "SELECT AVG(Freight) FROM orders WHERE ShipCountry = 'Germany';",
            "SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 10;",
            "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] GROUP BY ProductID ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT AVG(Quantity) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(OrderDate) = 2023;",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
            "SELECT Country, COUNT(CustomerID) FROM customers GROUP BY Country;",
            "SELECT ShipVia, COUNT(*) AS MethodCount FROM orders GROUP BY ShipVia ORDER BY MethodCount DESC LIMIT 1;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.ShippedDate > orders.RequiredDate;",
            "SELECT CustomerID FROM orders ORDER BY OrderDate ASC LIMIT 1;",
            "SELECT AVG(UnitPrice) FROM [Order Details] WHERE Quantity > 50;",
            "SELECT DISTINCT CustomerID FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE Discount > 0);",
            "SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' THEN orders.CustomerID END) * 1.0) / (NULLIF(COUNT(DISTINCT CASE WHEN orders.OrderDate < '2023-01-01' THEN orders.CustomerID END), 0)) AS RetentionRate FROM orders;",
            "SELECT OrderID FROM orders WHERE Freight > 100 AND ShipCountry = 'USA';",
            "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
            "SELECT City, COUNT(CustomerID) FROM customers GROUP BY City ORDER BY COUNT(CustomerID) DESC LIMIT 1;",
            "SELECT customers.CustomerID, SUM([Order Details].Quantity) AS TotalProducts FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
            "SELECT (COUNT(*) FILTER (WHERE ShippedDate <= DATE_ADD(OrderDate, INTERVAL 3 DAY)) * 100.0 / COUNT(*)) AS PercentageShippedWithin3Days FROM orders;",
            "SELECT customers.CustomerID, COUNT(orders.OrderID)/DATEDIFF(MAX(orders.OrderDate), MIN(orders.OrderDate)) AS OrderFrequency FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID ORDER BY OrderFrequency DESC;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
            "SELECT o.CustomerID, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.CustomerID ORDER BY OrderCount DESC;",
            "SELECT c.Country, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.Country;",
            "SELECT SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate > CURRENT_DATE - INTERVAL '1 year';",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 3;",
            "SELECT o.ShipVia, COUNT(o.OrderID) AS UseCount FROM orders o GROUP BY o.ShipVia ORDER BY UseCount DESC;",
            "SELECT COUNT(*) FROM (SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID HAVING COUNT(o.OrderID) > 1) subquery;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
            "SELECT CustomerID FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders WHERE OrderDate >= CURRENT_DATE - INTERVAL '1' YEAR);",
            "SELECT o.ShipCountry, SUM(o.Freight) AS TotalFreight FROM orders o GROUP BY o.ShipCountry;",
            "SELECT AVG(CAST(o.ShippedDate AS DATE) - CAST(o.OrderDate AS DATE)) AS AverageShippingTime FROM orders o WHERE o.ShippedDate IS NOT NULL;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY LifetimeValue DESC LIMIT 1;",
            "SELECT City, COUNT(CustomerID) AS CustomerCount FROM customers GROUP BY City ORDER BY CustomerCount DESC LIMIT 1;",
            "SELECT (COUNT(DISTINCT o1.CustomerID) - COUNT(DISTINCT o2.CustomerID)) / NULLIF(COUNT(DISTINCT o2.CustomerID), 0) AS RetentionRate FROM orders o1 LEFT JOIN orders o2 ON o1.CustomerID = o2.CustomerID WHERE o1.OrderDate BETWEEN CURRENT_DATE - INTERVAL '3 months' AND CURRENT_DATE AND o2.OrderDate < CURRENT_DATE - INTERVAL '3 months';",
            "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC;",
            "SELECT Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY Region ORDER BY TotalRevenue DESC;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT OrderID FROM orders WHERE Freight > 100;",
            "SELECT o.CustomerID, DATEDIFF(CURRENT_DATE, MAX(o.OrderDate)) AS DaysSinceLastOrder FROM orders o GROUP BY o.CustomerID ORDER BY DaysSinceLastOrder DESC LIMIT 1;",
            "SELECT c.Country, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Country;",
            "SELECT COUNT(DISTINCT od.ProductID) AS UniqueProducts FROM [Order Details] od;",
            "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY DATE_TRUNC('month', o.OrderDate);",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= '2022-01-01' AND o.OrderDate <= '2022-12-31' GROUP BY c.CustomerID ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT COUNT(o.OrderID) AS DelayedOrders FROM orders o WHERE DATEDIFF(o.ShippedDate, o.OrderDate) > 7;",
            "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
            "SELECT od.ProductID, COUNT(od.ProductID) AS OrderCount FROM [Order Details] od GROUP BY od.ProductID ORDER BY OrderCount DESC;",
            "SELECT c.City, COUNT(DISTINCT c.CustomerID) AS CustomerCount FROM customers c GROUP BY c.City;",
            "SELECT ShipVia, COUNT(OrderID) * 100.0 / (SELECT COUNT(*) FROM orders) AS ShippingPercentage FROM orders GROUP BY ShipVia;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSpending FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalSpending DESC LIMIT 5;",
            "SELECT c.Region, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.Region;",
            "SELECT o.EmployeeID, COUNT(o.OrderID) AS HandledOrders FROM orders o GROUP BY o.EmployeeID ORDER BY HandledOrders DESC;",
            "SELECT COUNT(DISTINCT o1.CustomerID) * 100.0 / NULLIF((SELECT COUNT(DISTINCT o2.CustomerID) FROM orders o2 WHERE o2.OrderDate < '2023-01-01'), 0) AS RetentionRate FROM orders o1 WHERE o1.OrderDate BETWEEN '2023-01-01' AND '2023-12-31';",
            "SELECT o.OrderID, o.Freight FROM orders o ORDER BY o.Freight DESC;",
            "SELECT EXTRACT(YEAR FROM o.OrderDate) AS Year, COUNT(o.OrderID) AS OrderCount, COUNT(o.OrderID) - LAG(COUNT(o.OrderID)) OVER (ORDER BY EXTRACT(YEAR FROM o.OrderDate)) AS OrderGrowth FROM orders o GROUP BY EXTRACT(YEAR FROM o.OrderDate);",
            "SELECT c.CustomerID, COUNT(o.OrderID) AS ManagerOrders FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE c.ContactTitle LIKE '%Manager%' GROUP BY c.CustomerID;",
            "SELECT c.City, COUNT(DISTINCT c.CustomerID) AS UniqueCustomerCount FROM customers c GROUP BY c.City ORDER BY UniqueCustomerCount DESC;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
            "SELECT Country, COUNT(DISTINCT CustomerID) AS NumberOfCustomers FROM customers GROUP BY Country",
            "SELECT DISTINCT customers.CustomerID, CompanyName FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.Freight > 100;",
            "SELECT ProductID, AVG(Quantity) AS AverageQuantity FROM [Order Details] GROUP BY ProductID",
            "SELECT customers.CustomerID, COUNT(orders.OrderID) AS TotalOrders FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY customers.CustomerID ORDER BY TotalOrders DESC LIMIT 1",
            "SELECT customers.CustomerID, SUM([Order Details].Discount * [Order Details].UnitPrice * [Order Details].Quantity) AS TotalDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID",
            "SELECT COUNT(OrderID) AS UnshippedOrders FROM orders WHERE ShippedDate IS NULL",
            "SELECT AVG(Freight) AS AverageFreight FROM orders WHERE ShipCountry = 'USA';",
            "SELECT ShipCity, COUNT(OrderID) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 1",
            "SELECT OrderID, SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details] WHERE Discount > 0 GROUP BY OrderID",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY LifetimeValue DESC LIMIT 5;",
            "SELECT customers.CustomerID, COUNT(DISTINCT [Order Details].ProductID) AS NumberOfProducts FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID",
            "SELECT MONTH(OrderDate) AS OrderMonth, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY MONTH(OrderDate)",
            "SELECT (COUNT(DISTINCT o1.CustomerID) * 1.0 / COUNT(DISTINCT o2.CustomerID)) AS RetentionRate FROM orders o1, orders o2 WHERE o1.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND CURRENT_DATE AND o2.OrderDate < DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH);",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders WHERE ShippedDate IS NOT NULL;",
            "SELECT c.CustomerID, o.OrderID, (od.UnitPrice * od.Quantity * (1 - od.Discount)) AS SingleOrderValue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID JOIN customers c ON o.CustomerID = c.CustomerID ORDER BY SingleOrderValue DESC LIMIT 1",
            "SELECT CustomerID, CompanyName FROM customers WHERE CustomerID NOT IN (SELECT CustomerID FROM orders WHERE OrderDate > CURRENT_DATE - INTERVAL '6 MONTH')",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC FETCH FIRST 1 ROW ONLY",
            "SELECT ShipRegion, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipRegion ORDER BY TotalFreightCost DESC LIMIT 1",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID HAVING TotalRevenue > 5000",
            "SELECT c.Country, COUNT(o.OrderID) AS NumberOfOrders FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.Country;",
            "SELECT AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM [Order Details] od;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY LifetimeValue DESC LIMIT 1;",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
            "SELECT Country, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY Country;",
            "SELECT customers.CustomerID, COUNT(orders.OrderID) AS NumberOfOrders FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalRevenue FROM [Order Details] GROUP BY ProductID ORDER BY TotalRevenue DESC LIMIT 5;",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
            "SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-08-01' AND '2023-08-31' THEN orders.CustomerID END) / COUNT(DISTINCT CASE WHEN orders.OrderDate < '2023-08-01' THEN orders.CustomerID END)) AS RetentionRate FROM orders;",
            "SELECT CustomerID FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR));",
            "SELECT AVG(Freight) AS AverageFreightCost FROM orders WHERE ShippedDate IS NOT NULL;",
            "SELECT customers.CustomerID, orders.OrderID, orders.OrderDate FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE customers.CustomerID = 'specific_customer_id' ORDER BY orders.OrderDate DESC LIMIT 1;",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID;",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingDelay FROM orders WHERE ShippedDate IS NOT NULL;",
            "SELECT City, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY City ORDER BY NumberOfCustomers DESC LIMIT 3;",
            "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",
            "SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 5;",
            "SELECT (COUNT(*) FILTER (WHERE Discount > 0) / NULLIF(COUNT(*), 0)) * 100 AS PercentageWithDiscount FROM [Order Details];",
            "SELECT DATE_TRUNC('month', OrderDate) AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE DATE_PART('year', OrderDate) = DATE_PART('year', CURRENT_DATE) GROUP BY OrderMonth;",
            "SELECT Region, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Region ORDER BY AverageOrderValue DESC LIMIT 1;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerLifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
            "SELECT COUNT(OrderID) FROM orders WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Country = 'Germany') AND OrderDate >= DATEADD(MONTH, -1, DATE_TRUNC('MONTH', CURRENT_DATE)) AND OrderDate < DATE_TRUNC('MONTH', CURRENT_DATE);",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalOrderValue DESC LIMIT 1;",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC;",
            "SELECT AVG(Discount) FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1);",
            "SELECT CustomerID FROM customers WHERE CustomerID NOT IN (SELECT CustomerID FROM orders);",
            "SELECT (COUNT(DISTINCT CustomerID) FILTER (WHERE OrderDate BETWEEN CURRENT_DATE - INTERVAL '3 MONTH' AND CURRENT_DATE)) / NULLIF(COUNT(DISTINCT CustomerID) FILTER (WHERE OrderDate < CURRENT_DATE - INTERVAL '3 MONTH'), 0) AS RetentionRate FROM orders;",
            "SELECT Region, COUNT(OrderID) AS NumberOfOrders FROM orders o JOIN customers c ON o.CustomerID = c.CustomerID GROUP BY Region ORDER BY NumberOfOrders DESC;",
            "SELECT COUNT(*) FROM (SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID) AS OrderCounts WHERE OrderCount > 5;",
            "SELECT AVG(Freight) FROM orders WHERE ShipCountry = 'USA';",
            "SELECT CustomerID, MAX(OrderDate) AS RecentOrderDate FROM orders GROUP BY CustomerID;",
            "SELECT MONTH(OrderDate) AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlyRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY OrderMonth ORDER BY MonthlyRevenue DESC LIMIT 1;",
            "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT ProductID, AVG(Quantity) AS AverageQuantity FROM [Order Details] GROUP BY ProductID;",
            "SELECT c.CustomerID FROM orders o JOIN customers c ON o.CustomerID = c.CustomerID WHERE DATEDIFF(DAY, RequiredDate, ShippedDate) > 7;",
            "SELECT ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductRevenue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE QUARTER(o.OrderDate) = QUARTER(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY ProductID ORDER BY ProductRevenue DESC LIMIT 1;",
            "SELECT EXTRACT(YEAR FROM ShippedDate) AS ShipYear, EXTRACT(MONTH FROM ShippedDate) AS ShipMonth, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipYear, ShipMonth ORDER BY ShipYear, ShipMonth;",
            "SELECT CustomerID, COUNT(OrderID) AS OrderFrequency FROM orders GROUP BY CustomerID ORDER BY OrderFrequency DESC LIMIT 5;",
            "SELECT Country, COUNT(DISTINCT ProductID) AS ProductVariety FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN customers c ON o.CustomerID = c.CustomerID GROUP BY Country ORDER BY ProductVariety DESC;",
            "SELECT c.CustomerID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderAmount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
            "SELECT COUNT(*) FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) <= 7;",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 5;",
            "SELECT c.CustomerID, SUM(od.Discount) AS TotalDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalDiscount DESC LIMIT 1;",
            "SELECT AVG(Freight) AS AverageFreight FROM orders WHERE ShippedDate IS NOT NULL;",
            "SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate IS NULL OR o.OrderDate < CURDATE() - INTERVAL 1 YEAR;",
            "SELECT ShipCity, COUNT(*) AS NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 5;",
            "SELECT CustomerID, COUNT(OrderID) FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 1;",
            "SELECT ((COUNT(*) - previous_year_count) * 100.0 / previous_year_count) AS PercentageIncrease FROM (SELECT COUNT(*) AS current_year_count FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE())) current_year, (SELECT COUNT(*) AS previous_year_count FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1) previous_year;",
            "SELECT c.CustomerID, AVG(od.Discount) AS AverageDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY AverageDiscount DESC;",
            "SELECT OrderID FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) > 30 AND ShippedDate IS NULL;",
            "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC;",
            "SELECT MONTH(OrderDate) AS OrderMonth, COUNT(*) AS NumberOfOrders FROM orders GROUP BY OrderMonth ORDER BY OrderMonth;",
            "SELECT c.Region, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Region HAVING AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) < (SELECT AVG(d.UnitPrice * d.Quantity * (1 - d.Discount)) FROM orders ord JOIN [Order Details] d ON ord.OrderID = d.OrderID);",
            "SELECT c.CustomerID, COUNT(DISTINCT od.ProductID) AS DistinctProducts FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
            "SELECT (COUNT(DISTINCT CASE WHEN OrderDate BETWEEN '2023-07-01' AND '2023-09-30' THEN CustomerID END) * 100.0 / COUNT(DISTINCT CASE WHEN OrderDate < '2023-07-01' THEN CustomerID END)) AS CustomerRetentionRate FROM orders;",
            "SELECT c.CustomerID, SUM(od.Quantity) AS TotalQuantity FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
            "SELECT Country, COUNT(OrderID) AS OrderCount FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY Country;",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);",
            "SELECT c.CustomerID, SUM(od.Discount * od.UnitPrice * od.Quantity) AS TotalDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
            "SELECT Region, AVG(CASE WHEN DATEDIFF(ShippedDate, RequiredDate) < 0 THEN 0 ELSE DATEDIFF(ShippedDate, RequiredDate) END) AS AvgDelay FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE ShippedDate IS NOT NULL GROUP BY Region ORDER BY AvgDelay ASC;",
            "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerLifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
            "SELECT (COUNT(DISTINCT o1.CustomerID) FILTER (WHERE o1.OrderDate BETWEEN '2023-07-01' AND '2023-09-30'))::DOUBLE PRECISION / NULLIF(COUNT(DISTINCT o2.CustomerID) FILTER (WHERE o2.OrderDate < '2023-07-01'), 0) * 100 AS RetentionRate FROM orders o1 CROSS JOIN orders o2;",
            "SELECT ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalValue DESC LIMIT 5;",
            "SELECT ContactTitle, COUNT(*) AS TitleCount FROM customers GROUP BY ContactTitle;",
            "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;",
            "SELECT MAX(Discount) AS MaxDiscount, MIN(Discount) AS MinDiscount, AVG(Discount) AS AvgDiscount FROM [Order Details];",
            "SELECT COUNT(DISTINCT od.ProductID) FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.CustomerID = (SELECT CustomerID FROM (SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Total FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY o.CustomerID ORDER BY Total DESC LIMIT 1) AS TopCustomer);",
            "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, EXTRACT(YEAR FROM OrderDate) AS Year, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS SalesRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Year, Month ORDER BY SalesRevenue DESC LIMIT 1;",
            "SELECT CustomerID, MIN(ShippedDate) AS Earliest, MAX(ShippedDate) AS Latest FROM orders GROUP BY CustomerID;",
            "SELECT CompanyName, COUNT(*) AS Frequency FROM customers GROUP BY CompanyName ORDER BY Frequency DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', OrderDate) AS OrderMonth, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY OrderMonth ORDER BY OrderMonth;",
            "SELECT Country, COUNT(CustomerID) AS TotalCustomers FROM customers GROUP BY Country;",
            "SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY CustomerID;",
            "SELECT ShipCountry, COUNT(DISTINCT OrderID) AS TotalOrders, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCountry;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY LifetimeValue DESC LIMIT 1;",
            "SELECT (CAST(COUNT(*) AS FLOAT) / (SELECT COUNT(DISTINCT CustomerID) FROM orders)) * 100 AS ReturningCustomers FROM (SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 1) AS MultipleOrders;",
            "SELECT SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details];",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 3;",
            "SELECT EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, (COUNT(DISTINCT o.CustomerID) FILTER (WHERE EXISTS (SELECT 1 FROM orders o2 WHERE o2.CustomerID = o.CustomerID AND o2.OrderDate < DATE_TRUNC('month', o.OrderDate)))::FLOAT / NULLIF(COUNT(DISTINCT o.CustomerID), 0)) * 100 AS RetentionRate FROM orders o WHERE o.OrderDate >= '2022-01-01' AND o.OrderDate < '2023-01-01' GROUP BY Year, Month ORDER BY Year, Month;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY Year, Month ORDER BY TotalOrders DESC;",
            "SELECT ShipVia, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipVia;",
            "SELECT City, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM customers GROUP BY City ORDER BY UniqueCustomers DESC;",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS RevenueWithDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0;",
            "SELECT CustomerID FROM customers WHERE NOT EXISTS (SELECT 1 FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE customers.CustomerID = o.CustomerID AND od.Discount > 0);",
            "SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalLifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Region ORDER BY TotalLifetimeValue DESC LIMIT 1;",
            "SELECT DISTINCT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31';",
            "SELECT AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValueWithDiscount, AVG(od.UnitPrice * od.Quantity) AS AverageOrderValueWithoutDiscount FROM [Order Details] od;",
            "SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 10;",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalSales DESC;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerLifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
            "SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderID IS NULL OR o.OrderDate >= CURRENT_DATE - INTERVAL '1 year';",
            "SELECT ShipCountry, COUNT(*) AS OrderCount FROM orders GROUP BY ShipCountry ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT CustomerID, COUNT(OrderID) AS OrderFrequency FROM orders GROUP BY CustomerID ORDER BY OrderFrequency DESC LIMIT 1;",
            "SELECT c.CustomerID, SUM(od.Quantity) AS TotalQuantity FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
            "SELECT OrderID, Freight FROM orders ORDER BY Freight DESC LIMIT 5;",
            "SELECT COUNT(*) FROM orders WHERE ShipCountry = 'USA';",
            "SELECT AVG(od.Discount) FROM [Order Details] od;",
            "SELECT City, COUNT(CustomerID) AS CustomerCount FROM customers GROUP BY City ORDER BY CustomerCount DESC;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalRevenue DESC LIMIT 5;",
            "SELECT (COUNT(DISTINCT CASE WHEN o.OrderDate BETWEEN '2023-01-01' AND '2023-06-30' THEN o.CustomerID END) / NULLIF(COUNT(DISTINCT CASE WHEN o.OrderDate < '2023-01-01' THEN o.CustomerID END), 0) * 100) AS RetentionRate FROM orders o;",
            "SELECT AVG(DATE_PART('day', o.ShippedDate - o.OrderDate)) AS AvgShippingTime FROM orders o WHERE o.ShippedDate IS NOT NULL;",
            "SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0.2;",
            "SELECT COUNT(o.OrderID) FROM orders o WHERE o.ShippedDate > o.RequiredDate + INTERVAL '5 day';",
            "SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID HAVING COUNT(DISTINCT o.EmployeeID) = 1 AND MAX(o.EmployeeID) = specific_id;",
            "SELECT o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry;",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 year' GROUP BY Year, Month ORDER BY Year, Month;",
            "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SalesRevenue FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY SalesRevenue DESC LIMIT 5;",
            "SELECT DISTINCT customers.CompanyName FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE EXTRACT(MONTH FROM orders.OrderDate) = 1 AND orders.ShipVia = 1;",
            "SELECT SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details];",
            "SELECT ShipCountry, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipCountry;",
            "SELECT customers.CompanyName, COUNT(orders.OrderID) AS OrderVolume FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CompanyName ORDER BY OrderVolume DESC LIMIT 3;",
            "SELECT OrderID FROM orders WHERE ShippedDate IS NULL;",
            "SELECT Region, COUNT(orders.OrderID) AS NumberOfOrders FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY Region;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SalesRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Year, Month ORDER BY SalesRevenue DESC LIMIT 1;",
            "SELECT DISTINCT ProductID FROM [Order Details] WHERE Discount > 0.10;",
            "SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN CURRENT_DATE - INTERVAL '6 months' AND CURRENT_DATE THEN orders.CustomerID END) / COUNT(DISTINCT CASE WHEN orders.OrderDate < CURRENT_DATE - INTERVAL '6 months' THEN orders.CustomerID END)) * 100 AS RetentionRate FROM orders;",
            "SELECT ContactTitle, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY ContactTitle;",
            "SELECT ShipVia, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipVia;",
            "SELECT OrderID FROM orders WHERE RequiredDate < OrderDate;",
            "SELECT ProductID, AVG(Discount) AS AverageDiscount FROM [Order Details] GROUP BY ProductID;",
            "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
            "SELECT COUNT(o.OrderID) AS USOrders FROM orders o JOIN customers c ON o.CustomerID = c.CustomerID WHERE c.Country = 'USA';",
            "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT COUNT(OrderID) AS ShippedNotDelivered FROM orders WHERE ShippedDate IS NOT NULL AND ShippedDate < RequiredDate;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSpent FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalSpent DESC LIMIT 5;",
            "SELECT ProductID, COUNT(ProductID) AS Frequency FROM [Order Details] GROUP BY ProductID ORDER BY Frequency DESC;",
            "SELECT (COUNT(DISTINCT CASE WHEN o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' THEN o.CustomerID END) * 1.0) / NULLIF(COUNT(DISTINCT CASE WHEN o.OrderDate < '2022-01-01' THEN o.CustomerID END), 0) AS RetentionRate FROM orders o;",
            "SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID HAVING COUNT(o.OrderID) > 5;",
            "SELECT Region, COUNT(DISTINCT CustomerID) AS NumCustomers FROM customers GROUP BY Region ORDER BY NumCustomers DESC;",
            "SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE EXTRACT(MONTH FROM o.OrderDate) = 6 AND EXTRACT(YEAR FROM o.OrderDate) = 2023;",
            "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry;",
            "SELECT ShipVia, COUNT(ShipVia) AS Count FROM orders GROUP BY ShipVia ORDER BY Count DESC LIMIT 1;",
            "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) - 1 AND EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY EmployeeID ORDER BY OrderCount DESC;",
            "SELECT AVG(Count) FROM (SELECT COUNT(ProductID) AS Count FROM [Order Details] GROUP BY OrderID) AS ProductCounts;",
            "SELECT COUNT(DISTINCT OrderID) AS DiscountedOrders FROM [Order Details] WHERE Discount > 0;",
            "SELECT c.CustomerID, MIN(o.OrderDate) AS FirstOrder, MAX(o.OrderDate) AS LastOrder FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID;",
            "SELECT COUNT(CustomerID) AS NeverOrdered FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders);",
            "SELECT c.CustomerID, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT customers.CustomerID, COUNT(orders.OrderID) AS OrderCount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 5",
            "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SalesRevenue FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY SalesRevenue DESC LIMIT 10",
            "SELECT Country, COUNT(*) AS CustomerCount FROM customers GROUP BY Country ORDER BY CustomerCount DESC",
            "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM orders WHERE ShippedDate IS NOT NULL",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(DISTINCT CustomerID) AS NewCustomers FROM orders GROUP BY Month ORDER BY Month;",
            "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM orders) AS LateShippingPercentage FROM orders WHERE ShippedDate > RequiredDate",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM [Order Details];",
            "SELECT ShipCity, COUNT(*) AS OrderVolume FROM orders GROUP BY ShipCity ORDER BY OrderVolume DESC LIMIT 1",
            "SELECT 100.0 * (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate BETWEEN '2023-07-01' AND '2023-09-30') / (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate < '2023-07-01') AS RetentionRate;",
            "SELECT Quantity, COUNT(*) AS Frequency FROM [Order Details] GROUP BY Quantity ORDER BY Frequency DESC",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalOrderValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY TotalOrderValue DESC LIMIT 5",
            "SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Revenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion ORDER BY Revenue DESC LIMIT 1",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY TotalDiscount DESC LIMIT 5;",
            "SELECT ContactTitle, COUNT(*) AS Frequency FROM customers GROUP BY ContactTitle ORDER BY Frequency DESC LIMIT 1",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
            "SELECT customers.CustomerID, COUNT(DISTINCT [Order Details].ProductID) AS UniqueProductCount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
            "SELECT ProductID, Discount FROM [Order Details] ORDER BY Discount DESC LIMIT 5;",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY LifetimeValue DESC;",
            "SELECT ShipCountry, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCountry ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, SUM(Freight) AS TotalFreight FROM orders GROUP BY EXTRACT(YEAR FROM OrderDate), EXTRACT(MONTH FROM OrderDate);",
            "SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN CURRENT_DATE - INTERVAL '1 month' AND CURRENT_DATE THEN orders.CustomerID END) / COUNT(DISTINCT orders.CustomerID)) * 100 AS RetentionRate FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate < CURRENT_DATE - INTERVAL '1 month';",
            "SELECT City, COUNT(orders.OrderID) AS OrderCount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY City ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT ProductID, COUNT(OrderID) AS OrderCount FROM [Order Details] WHERE Discount > 0 GROUP BY ProductID ORDER BY OrderCount DESC;",
            "SELECT ShipCity, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCity ORDER BY TotalRevenue DESC LIMIT 10;",
            "SELECT ShipRegion, SUM([Order Details].Quantity) AS TotalQuantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion ORDER BY TotalQuantity DESC LIMIT 3;",
            "SELECT CustomerID FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders WHERE OrderDate >= CURRENT_DATE - INTERVAL '1 year');",
            "SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion;",
            "SELECT CustomerID, OrderDate AS EarliestOrderDate FROM orders WHERE OrderDate = (SELECT MIN(OrderDate) FROM orders);",
            "SELECT ShipVia, (COUNT(OrderID) * 100.0 / (SELECT COUNT(*) FROM orders)) AS Percentage FROM orders GROUP BY ShipVia;",
            "SELECT AVG(DATE_PART('day', ShippedDate - OrderDate)) AS AverageShippingTime FROM orders WHERE ShippedDate IS NOT NULL;",
            "SELECT c.CustomerID, COUNT(o.OrderID) AS TotalOrders FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY TotalOrders DESC LIMIT 1;",
            "SELECT AVG(Subtotal) AS AverageOrderValue FROM (SELECT o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Subtotal FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID) AS OrderValues;",
            "SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalQuantity DESC;",
            "SELECT AVG(total_items) AS AverageItemsPerOrder FROM (SELECT SUM(od.Quantity) AS total_items FROM [Order Details] od GROUP BY od.OrderID) subquery;",
            "SELECT c.City, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerLifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.City ORDER BY CustomerLifetimeValue DESC;",
            "SELECT o.ShipVia, AVG(o.Freight) AS AverageFreight FROM orders o GROUP BY o.ShipVia;",
            "SELECT (SELECT COUNT(DISTINCT o.CustomerID) FROM orders o WHERE o.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE()) / (SELECT COUNT(DISTINCT o.CustomerID) FROM orders o WHERE o.OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR)) AS RetentionRate;",
            "SELECT od1.ProductID, od2.ProductID, COUNT(*) AS OrderedTogetherCount FROM [Order Details] od1 JOIN [Order Details] od2 ON od1.OrderID = od2.OrderID AND od1.ProductID < od2.ProductID GROUP BY od1.ProductID, od2.ProductID ORDER BY OrderedTogetherCount DESC;",
            "SELECT c.CustomerID, COUNT(o1.OrderID) * 1.0 / COUNT(o.OrderID) AS ShippedToTotalRatio FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID LEFT JOIN orders o1 ON c.CustomerID = o1.CustomerID AND o1.ShippedDate IS NOT NULL GROUP BY c.CustomerID;",
            "SELECT c.Region, COUNT(c.CustomerID) AS CustomerCount FROM customers c GROUP BY c.Region;",
            "SELECT YEAR(o.OrderDate) AS Year, MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY YEAR(o.OrderDate), MONTH(o.OrderDate);",
            "SELECT o.EmployeeID, COUNT(o.OrderID) AS OrdersHandled FROM orders o GROUP BY o.EmployeeID ORDER BY OrdersHandled DESC;",
            "SELECT (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount) * CASE WHEN num_orders > 1 THEN 1 ELSE 0 END) / SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) AS RepeatRevenuePercentage FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN (SELECT CustomerID, COUNT(OrderID) as num_orders FROM orders GROUP BY CustomerID) repeat_customers ON o.CustomerID = repeat_customers.CustomerID;",
            "SELECT c.CustomerID, COUNT(o.OrderID) AS OrderFrequency FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID;",
            "SELECT c.CustomerID, AVG(OrderValues.Subtotal) AS AverageOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN (SELECT o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Subtotal FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID GROUP BY o.OrderID) AS OrderValues ON o.OrderID = OrderValues.OrderID GROUP BY c.CustomerID ORDER BY AverageOrderValue DESC LIMIT 1;",
            "SELECT o.ShipCountry, COUNT(o.OrderID) AS TotalOrders FROM orders o GROUP BY o.ShipCountry ORDER BY TotalOrders DESC LIMIT 3;",
            "SELECT c.CustomerID, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY OrderCount DESC;",
            "SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.CustomerID IS NULL;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalRevenue DESC LIMIT 5;",
            "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_FORMAT(o.OrderDate, '%Y-%m');",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT c.City, COUNT(c.CustomerID) AS CustomerCount FROM customers c GROUP BY c.City ORDER BY CustomerCount DESC LIMIT 3;",
            "SELECT COUNT(o.OrderID) AS LateOrders FROM orders o WHERE o.ShippedDate > o.RequiredDate AND o.OrderDate BETWEEN '2023-09-01' AND '2023-09-30';",
            "SELECT AVG(Quantity) AS AverageQuantity FROM [Order Details];",
            "SELECT o.ShipCountry, SUM(o.Freight) AS TotalFreight FROM orders o GROUP BY o.ShipCountry;",
            "SELECT o.ShipVia, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipVia ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT COUNT(DISTINCT o.OrderID) AS DiscountedOrders FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0.10;",
            "SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate BETWEEN DATEADD(QUARTER, -1, CURRENT_DATE) AND CURRENT_DATE GROUP BY c.CustomerID HAVING COUNT(o.OrderID) > 5;",
            "SELECT COUNT(DISTINCT od.ProductID) AS DistinctProducts FROM [Order Details] od;",
            "SELECT o.EmployeeID, COUNT(o.OrderID) AS HandledOrders FROM orders o GROUP BY o.EmployeeID ORDER BY HandledOrders DESC LIMIT 3;",
            "SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID HAVING COUNT(DISTINCT o.ShipCountry) > 1;",
            "SELECT TO_CHAR(o.OrderDate, 'YYYY-MM') AS Month, AVG(od.Discount) AS AverageDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= CURRENT_DATE - INTERVAL '1 year' GROUP BY Month;",
            "SELECT DISTINCT o1.CustomerID FROM orders o1 INNER JOIN orders o2 ON o1.CustomerID = o2.CustomerID WHERE MONTH(o1.OrderDate) = 1 AND MONTH(o2.OrderDate) = 2;",
            "SELECT c.CustomerID, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY OrderCount DESC LIMIT 5;",
            "SELECT od.ProductID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE c.Country = 'Canada' GROUP BY od.ProductID ORDER BY SUM(od.Quantity) DESC;",
            "SELECT o.ShipCountry, AVG(o.Freight) AS AverageFreight FROM orders o GROUP BY o.ShipCountry;",
            "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalRevenue FROM [Order Details] GROUP BY ProductID ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details];",
            "SELECT customers.CustomerID, SUM([Order Details].Discount * [Order Details].UnitPrice * [Order Details].Quantity) AS TotalDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY TotalDiscount DESC LIMIT 1;",
            "SELECT CustomerID FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH));",
            "SELECT Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Region ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID;",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders WHERE ShippedDate IS NOT NULL;",
            "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS SalesValue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductID;",
            "SELECT DAYNAME(OrderDate) AS DayOfWeek, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY DAYNAME(OrderDate) ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT COUNT(DISTINCT OrderID) AS DiscountedOrders FROM [Order Details] WHERE Discount > 0.1;",
            "SELECT customers.CustomerID, customers.CompanyName FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE customers.Country = 'Specific Country';",
            "SELECT COUNT(*) FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.City = 'Specific City';",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC;",
            "SELECT AVG(Discount) FROM [Order Details];",
            "SELECT COUNT(*) FROM orders WHERE ShippedDate IS NULL;",
            "SELECT SUM(Freight) FROM orders;",
            "SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND OrderDate < DATE_TRUNC('month', CURRENT_DATE);",
            "SELECT (COUNT(DISTINCT CustomerID) WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31') / NULLIF(COUNT(DISTINCT CustomerID) WHERE OrderDate < '2022-01-01', 0) * 100 AS RetentionRate FROM orders;",
            "SELECT Region, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM customers GROUP BY Region ORDER BY UniqueCustomers DESC;",
            "SELECT ShipVia, COUNT(*) AS Shipments FROM orders GROUP BY ShipVia ORDER BY Shipments DESC LIMIT 1;",
            "SELECT COUNT(OrderID) AS DelayedShipments FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT ProductID, SUM(Quantity) AS TotalSold FROM [Order Details] GROUP BY ProductID;",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY customers.CustomerID ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT AVG(Quantity) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID;",
            "SELECT Region, COUNT(OrderID) AS OrdersCount FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Region = 'Specific Region' GROUP BY Region;",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
            "SELECT OrderID FROM [Order Details] WHERE Discount = (SELECT MAX(Discount) FROM [Order Details]);",
            "SELECT AVG(Freight) AS AverageFreight FROM orders WHERE EXTRACT(MONTH FROM ShippedDate) = 1;",
            "SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE OrderDate BETWEEN 'YYYY-10-01' AND 'YYYY-12-31' GROUP BY ShipCountry;",
            "SELECT ProductID, COUNT(OrderID) AS TimesOrdered FROM [Order Details] WHERE Discount > 0 GROUP BY ProductID ORDER BY TimesOrdered DESC;",
            "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] GROUP BY ProductID;",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY LifetimeValue DESC LIMIT 5;",
            "SELECT ShipVia, COUNT(OrderID) AS TimesUsed FROM orders GROUP BY ShipVia ORDER BY TimesUsed DESC;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate + INTERVAL '7' DAY;",
            "SELECT (COUNT(DISTINCT CASE WHEN EXTRACT(YEAR FROM orders.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) THEN orders.CustomerID END) / NULLIF(COUNT(DISTINCT CASE WHEN EXTRACT(YEAR FROM orders.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 THEN orders.CustomerID END), 0)) * 100 AS RetentionRate FROM orders;",
            "SELECT Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Region ORDER BY TotalSales DESC;",
            "SELECT customers.CustomerID, COUNT(orders.OrderID) AS NumberOfOrders FROM customers LEFT JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Year, Month ORDER BY MonthlySales DESC LIMIT 1;",
            "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT o.CustomerID, od.OrderID, (od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID ORDER BY OrderValue DESC LIMIT 1;",
            "SELECT COUNT(CustomerID) FROM (SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID HAVING OrderCount > 20) AS CustomerOrders;",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID;",
            "SELECT c.CustomerID, COUNT(o.OrderID) AS NumberOfOrders FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE YEAR(o.OrderDate) = 2022 GROUP BY c.CustomerID;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalRevenue DESC LIMIT 5;",
            "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShipCountry = 'Germany';",
            "SELECT COUNT(o.OrderID) AS DelayedOrders FROM orders o WHERE o.ShippedDate > o.RequiredDate;",
            "SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalQuantity DESC LIMIT 3;",
            "SELECT c.CustomerID, od.ProductID, COUNT(od.ProductID) AS Frequency FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID, od.ProductID HAVING COUNT(od.ProductID) = (SELECT MAX(Freq) FROM (SELECT od2.ProductID, COUNT(od2.ProductID) AS Freq FROM orders o2 JOIN [Order Details] od2 ON o2.OrderID = od2.OrderID WHERE o2.CustomerID = c.CustomerID GROUP BY od2.ProductID) AS Temp) ORDER BY c.CustomerID;",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = 12 AND YEAR(o.OrderDate) = 2022;",
            "SELECT EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, COUNT(DISTINCT od.ProductID) AS UniqueProducts FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate);",
            "SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate IS NULL OR o.OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY c.CustomerID HAVING MAX(o.OrderDate) < DATE_SUB(CURDATE(), INTERVAL 1 YEAR) OR MAX(o.OrderDate) IS NULL;",
            "SELECT (COUNT(DISTINCT CASE WHEN o.OrderDate BETWEEN '2023-01-01' AND '2023-06-30' THEN o.CustomerID END) / NULLIF(COUNT(DISTINCT CASE WHEN o.OrderDate < '2023-01-01' THEN o.CustomerID END), 0)) * 100 AS RetentionRate FROM orders o;",
            "SELECT MONTH(OrderDate) AS Month, COUNT(DISTINCT c.CustomerID) AS NewCustomers FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY MONTH(OrderDate) ORDER BY NewCustomers DESC LIMIT 1;",
            "SELECT o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID ORDER BY OrderValue DESC LIMIT 1;",
            "SELECT c.CustomerID, DATEDIFF(MAX(o.OrderDate), MIN(o.OrderDate)) AS Duration FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY Duration DESC LIMIT 1;",
            "SELECT Region, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY Region;",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY Revenue DESC LIMIT 1;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY LifetimeValue DESC;",
            "SELECT Country, COUNT(CustomerID) AS TotalCustomers FROM customers GROUP BY Country;",
            "SELECT customers.CustomerID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID;",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 1;",
            "SELECT CustomerID, COUNT(OrderID) AS PurchaseCount FROM orders GROUP BY CustomerID ORDER BY PurchaseCount DESC LIMIT 1;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
            "SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderID IS NULL;",
            "SELECT Region, COUNT(DISTINCT CustomerID) AS DistinctCustomers FROM customers GROUP BY Region ORDER BY DistinctCustomers DESC LIMIT 1;",
            "SELECT AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY LifetimeValue DESC LIMIT 5;",
            "SELECT ShipCountry, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipCountry;",
            "SELECT ProductID, COUNT(ProductID) AS OrderFrequency FROM [Order Details] GROUP BY ProductID ORDER BY OrderFrequency DESC LIMIT 1;",
            "SELECT DISTINCT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate BETWEEN 'start_date' AND 'end_date';",
            "SELECT ShipCity, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCity;",
            "SELECT OrderID FROM orders WHERE ShippedDate IS NULL;",
            "SELECT c.CustomerID, SUM(od.Quantity) AS TotalQuantity FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalQuantity DESC LIMIT 1;",
            "SELECT (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID)) AS OnTimePercentage FROM orders;",
            "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(DISTINCT CustomerID) AS NewCustomers FROM orders WHERE OrderDate >= 'start_date' GROUP BY Month ORDER BY NewCustomers DESC LIMIT 1;",
            "SELECT (COUNT(DISTINCT o.CustomerID) * 100.0 / COALESCE((SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate < DATE_TRUNC('month', CURRENT_DATE)), 1)) AS RetentionRate FROM orders o WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE);",
            "SELECT ShipCountry, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipCountry;",
            "SELECT ProductID, AVG(UnitPrice) AS AveragePrice FROM [Order Details] GROUP BY ProductID ORDER BY AveragePrice DESC LIMIT 1;",
            "SELECT c.CustomerID, MAX(od.Discount) AS MaxDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY MaxDiscount DESC;",
            "SELECT ProductID, SUM(UnitPrice * Quantity * Discount) AS RevenueLost FROM [Order Details] GROUP BY ProductID ORDER BY RevenueLost DESC;",
            "SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCountry ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT c.City, COUNT(DISTINCT o.CustomerID) AS NumberOfCustomers FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.City;",
            "SELECT AVG(Freight) AS AverageFreightCost FROM orders;",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC FETCH FIRST 3 ROWS ONLY;",
            "SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID HAVING SUM(CASE WHEN od.Discount > 0 THEN 1 ELSE 0 END) = 0;",
            "SELECT AVG(OrderCount) AS AverageOrdersPerCustomer FROM (SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID) AS CustomerOrders;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerLifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
            "SELECT (COUNT(DISTINCT CASE WHEN o.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' THEN o.CustomerID END) / COUNT(DISTINCT CASE WHEN o.OrderDate < '2023-01-01' THEN o.CustomerID END)) AS RetentionRate FROM orders o;",
            "SELECT o.ShipCountry, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderSize FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry;",
            "SELECT c.CustomerID, o.OrderID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE DATEDIFF(o.ShippedDate, o.OrderDate) <= 7;",
            "SELECT od.ProductID, SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscountGiven FROM [Order Details] od GROUP BY od.ProductID;",
            "SELECT ShipCountry, SUM(Freight) AS TotalShippingCost FROM orders GROUP BY ShipCountry ORDER BY TotalShippingCost DESC LIMIT 5;",
            "SELECT COUNT(*) FROM orders o JOIN customers c ON o.CustomerID = c.CustomerID WHERE o.ShipCountry <> c.Country;",
            "SELECT COUNT(CASE WHEN Discount > 0 THEN 1 END) * 100.0 / COUNT(*) AS PercentageWithDiscount FROM [Order Details];",
            "SELECT AVG(Discount) AS AverageDiscountPerOrder FROM (SELECT OrderID, AVG(Discount) AS Discount FROM [Order Details] GROUP BY OrderID) AS OrderDiscounts;",
            "SELECT EXTRACT(MONTH FROM OrderDate) AS OrderMonth, COUNT(*) AS NumberOfOrders FROM orders GROUP BY EXTRACT(MONTH FROM OrderDate) ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT c.CustomerID FROM customers c WHERE NOT EXISTS (SELECT 1 FROM (SELECT DISTINCT Region FROM orders) r WHERE NOT EXISTS (SELECT 1 FROM orders o WHERE o.CustomerID = c.CustomerID AND o.ShipRegion = r.Region));",
            "SELECT Country, COUNT(CustomerID) AS TotalCustomers FROM customers GROUP BY Country;",
            "SELECT ShipCountry, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipCountry;",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 5;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT EXTRACT(MONTH FROM OrderDate) AS OrderMonth, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY OrderMonth ORDER BY TotalOrders DESC FETCH FIRST 1 ROW ONLY;",
            "SELECT ShipCountry, MAX(Freight) AS MaxFreight FROM orders GROUP BY ShipCountry;",
            "SELECT ShipCity, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipCity ORDER BY TotalOrders DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', o.OrderDate) AS month, (COUNT(DISTINCT o.CustomerID) FILTER (WHERE o.OrderDate BETWEEN '2021-01-01' AND '2021-12-31'))::float / NULLIF(COUNT(DISTINCT o.CustomerID) FILTER (WHERE o.OrderDate < '2021-01-01'), 0) AS RetentionRate FROM orders o WHERE o.OrderDate BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY month ORDER BY month;",
            "SELECT c.Region, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderAmount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Region;",
            "SELECT * FROM customers WHERE Region = 'SpecificRegion';",
            "SELECT COUNT(DISTINCT ProductID) AS UniqueProducts FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE YEAR(OrderDate) = 2022);",
            "SELECT ShipVia, COUNT(OrderID) AS TotalShippedOrders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipVia;",
            "SELECT AVG(CAST(JULIANDAY(ShippedDate) - JULIANDAY(RequiredDate) AS INTEGER)) AS AverageDelay FROM orders WHERE ShippedDate IS NOT NULL;",
            "SELECT Country, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY Country ORDER BY NumberOfCustomers DESC LIMIT 5;",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSpent FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID HAVING TotalSpent > 10000;",
            "SELECT ProductID, COUNT(ProductID) AS OrderFrequency FROM [Order Details] GROUP BY ProductID ORDER BY OrderFrequency DESC LIMIT 1;",
            "SELECT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID HAVING COUNT(DISTINCT orders.OrderID) > 1;",
            "SELECT COUNT(OrderID) FROM orders WHERE YEAR(ShippedDate) = 2022;",
            "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;",
            "SELECT OrderID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY OrderID;",
            "SELECT customers.CustomerID FROM customers LEFT JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderID IS NULL;",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CLV FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
            "SELECT orders.OrderID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS OrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID;",
            "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(DISTINCT o1.CustomerID) * 1.0 / NULLIF((SELECT COUNT(DISTINCT o2.CustomerID) FROM orders o2 WHERE o2.OrderDate < '2023-01-01'), 0) AS RetentionRate FROM orders o1 WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY EXTRACT(MONTH FROM OrderDate);",
            "SELECT CustomerID, MIN(OrderDate) AS FirstOrder, MAX(OrderDate) AS LastOrder FROM orders GROUP BY CustomerID;",
            "SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID ORDER BY NumberOfOrders DESC;",
            "SELECT Country, COUNT(DISTINCT [Order Details].ProductID) AS DistinctProducts FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY Country;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(OrderDate) = 2023;",
            "SELECT t.CustomerID, MAX(t.Gap) AS MaxGap FROM (SELECT CustomerID, DATEDIFF(day, OrderDate, LAG(OrderDate) OVER(PARTITION BY CustomerID ORDER BY OrderDate)) AS Gap FROM orders) AS t GROUP BY t.CustomerID ORDER BY MaxGap DESC LIMIT 1;",
            "SELECT COUNT(DISTINCT OrderID) * 1.0 / NULLIF((SELECT COUNT(DISTINCT OrderID) FROM [Order Details]), 0) AS NoDiscountRate FROM [Order Details] WHERE Discount = 0;",
            "SELECT c.Country, COUNT(o.OrderID) AS NumberOfOrders FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.Country;",
            "SELECT od.ProductID, od.Discount FROM [Order Details] od WHERE od.Discount = (SELECT MAX(Discount) FROM [Order Details]) LIMIT 1;",
            "SELECT YEAR(OrderDate) AS Year, MONTH(OrderDate) AS Month, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders GROUP BY YEAR(OrderDate), MONTH(OrderDate);",
            "SELECT customers.CustomerID, COUNT(orders.OrderID) AS TotalOrders FROM customers LEFT JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID",
            "SELECT customers.CustomerID FROM customers LEFT JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderID IS NULL",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID",
            "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCity",
            "SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2022-01-01' AND '2022-01-31' THEN orders.CustomerID END) * 1.0 / COUNT(DISTINCT CASE WHEN orders.OrderDate < '2022-01-01' THEN orders.CustomerID END)) AS RetentionRate FROM orders;",
            "SELECT COUNT(DISTINCT OrderID) FILTER(WHERE Discount > 0) / COUNT(DISTINCT OrderID) * 100.0 AS DiscountedOrdersPercentage FROM [Order Details]",
            "SELECT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' AND customers.CustomerID NOT IN (SELECT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28')",
            "SELECT customers.CustomerID, AVG([Order Details].Discount) AS AverageDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID",
            "SELECT ProductID, COUNT(*) AS OrderCount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Country = 'Germany' GROUP BY ProductID ORDER BY OrderCount DESC LIMIT 1",
            "SELECT customers.CustomerID, COUNT(DISTINCT [Order Details].ProductID) AS UniqueProductsOrdered FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID",
            "SELECT ShipCity, COUNT(OrderID) AS NumShippedOrders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipCity ORDER BY NumShippedOrders DESC LIMIT 3",
            "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC",
            "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) / 12 AS AverageOrders FROM orders WHERE OrderDate BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY EXTRACT(MONTH FROM OrderDate)",
            "SELECT AVG(DATEDIFF(day, OrderDate, ShippedDate)) AS AverageShippingTime FROM orders WHERE ShippedDate IS NOT NULL",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = 2022 GROUP BY customers.CustomerID ORDER BY TotalRevenue DESC LIMIT 1",
            "SELECT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 5 AND AVG([Order Details].Discount) > 0.10",
            "SELECT ShipRegion FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion HAVING SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) > 500 ORDER BY COUNT(orders.OrderID) DESC LIMIT 1",
            "SELECT City, COUNT(CustomerID) AS CustomerCount FROM customers GROUP BY City ORDER BY CustomerCount DESC LIMIT 5",
            "SELECT od.ProductID, AVG(od.Discount) AS AvgDiscount FROM [Order Details] od GROUP BY od.ProductID ORDER BY AvgDiscount DESC",
            "SELECT SUM(Freight) AS TotalFreight FROM orders WHERE OrderDate >= (CURRENT_DATE - INTERVAL '1 year')",
            "SELECT c.Country, AVG(o_count.CountOrders) AS AvgOrders FROM customers c JOIN (SELECT CustomerID, COUNT(OrderID) AS CountOrders FROM orders GROUP BY CustomerID) o_count ON c.CustomerID = o_count.CustomerID GROUP BY c.Country",
            "SELECT OrderID, DATEDIFF(ShippedDate, RequiredDate) AS Delay FROM orders WHERE DATEDIFF(ShippedDate, RequiredDate) > 7;",
            "SELECT c.CustomerID, COUNT(o.OrderID) AS HighValueOrders FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 1000",
            "SELECT c.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Region ORDER BY TotalSales DESC LIMIT 3",
            "SELECT ShipVia, COUNT(OrderID) * 100.0 / (SELECT COUNT(OrderID) FROM orders) AS Percentage FROM orders GROUP BY ShipVia",
            "SELECT AVG(total_products) AS AvgProductsPerOrder FROM (SELECT SUM(od.Quantity) AS total_products FROM [Order Details] od GROUP BY od.OrderID) subquery;",
            "SELECT MONTH(OrderDate) AS OrderMonth, COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY MONTH(OrderDate) ORDER BY OrderCount DESC FETCH FIRST 1 ROW ONLY",
            "SELECT c.CustomerID, COUNT(DISTINCT o.OrderID) * 100.0 / (SELECT COUNT(DISTINCT o2.OrderID) FROM orders o2 WHERE o2.CustomerID = c.CustomerID AND o2.OrderDate < DATEADD(month, -6, CURRENT_DATE)) AS RetentionRate FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate >= DATEADD(month, -6, CURRENT_DATE) GROUP BY c.CustomerID ORDER BY RetentionRate DESC",
            "SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate IS NULL OR o.OrderDate < DATEADD(year, -1, CURRENT_DATE);",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY Revenue DESC LIMIT 5;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM orders o JOIN employees e ON o.EmployeeID = e.EmployeeID GROUP BY e.EmployeeID ORDER BY OrderCount DESC LIMIT 1",
            "SELECT AVG(od.Discount) AS AvgDiscountPerOrder FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID",
            "SELECT c.Region, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Region",
            "SELECT o.ShipCountry, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry;",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 5;",
            "SELECT ShipCountry, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCountry;",
            "SELECT AVG(od.Discount) AS AvgDiscount FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID;",
            "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EXTRACT(MONTH FROM OrderDate) ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT o.CustomerID, o.OrderID FROM orders o WHERE o.ShippedDate > o.RequiredDate;",
            "SELECT (COUNT(DISTINCT o1.CustomerID) * 1.0 / COUNT(DISTINCT o2.CustomerID)) AS RetentionRate FROM orders o1 LEFT JOIN orders o2 ON o1.CustomerID = o2.CustomerID WHERE o1.OrderDate BETWEEN '2022-01-01' AND '2022-12-31';",
            "SELECT c.CustomerID, COUNT(DISTINCT od.ProductID) AS ProductCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
            "SELECT o.ShipRegion, SUM(o.Freight) AS TotalFreight FROM orders o GROUP BY o.ShipRegion;",
            "SELECT o.ShipCity, COUNT(o.OrderID) AS DelayCount FROM orders o WHERE o.ShippedDate > o.RequiredDate GROUP BY o.ShipCity ORDER BY DelayCount DESC LIMIT 3;",
            "SELECT AVG(TotalQuantity) AS AvgProductsPerOrder FROM (SELECT OrderID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY OrderID) AS OrderSummary;",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID HAVING SUM(od.Quantity) > 5;",
            "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderID IS NULL OR o.OrderDate < CURRENT_DATE - INTERVAL '1 YEAR';",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
            "SELECT customers.CustomerID, AVG([Order Details].Discount) AS AverageDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
            "SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCountry;",
            "SELECT customers.CustomerID, SUM(orders.Freight) AS TotalFreight FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID;",
            "SELECT customers.CustomerID, COUNT(DISTINCT [Order Details].ProductID) AS UniqueProducts FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
            "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY TotalSales DESC FETCH FIRST 5 ROWS ONLY;",
            "SELECT MONTH(OrderDate) AS OrderMonth, COUNT(DISTINCT CASE WHEN OrderDate < DATEADD(MONTH, -1, OrderDate) THEN CustomerID ELSE NULL END) AS ReturningCustomers FROM orders GROUP BY OrderMonth;",
            "SELECT customers.CustomerID FROM customers LEFT JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderID IS NULL OR orders.OrderDate < CURRENT_DATE - INTERVAL '6 months';",
            "SELECT ShipVia, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipVia ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT [Order Details].ProductID, AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY AverageDiscount DESC LIMIT 1;",
            "SELECT AVG(quantity_per_order) AS AverageQuantityPerOrder FROM (SELECT OrderID, SUM(Quantity) AS quantity_per_order FROM [Order Details] GROUP BY OrderID) AS order_quantities;",
            "SELECT COUNT(OrderID) AS DelayedOrders FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT Region, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY Region ORDER BY NumberOfCustomers DESC LIMIT 1;",
            "SELECT EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EmployeeID;",
            "SELECT ShipCountry, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry ORDER BY AverageOrderValue DESC LIMIT 1;",
            "SELECT COUNT(*) FROM (SELECT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 10) AS subquery;",
            "SELECT EXTRACT(YEAR FROM ShippedDate) AS Year, EXTRACT(MONTH FROM ShippedDate) AS Month, COUNT(OrderID) AS ShippedOrders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Year, Month;",
            "SELECT COUNT(DISTINCT CustomerID) FROM customers;",
            "SELECT AVG(Freight) FROM orders;",
            "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) FROM orders GROUP BY Month ORDER BY Month;",
            "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Country;",
            "SELECT c.CustomerID, c.CompanyName FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE);",
            "SELECT City, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM customers GROUP BY City ORDER BY UniqueCustomers DESC LIMIT 1;",
            "SELECT COUNT(OrderID) AS OrdersLastYear FROM orders WHERE YEAR(ShippedDate) = YEAR(CURDATE()) - 1;",
            "SELECT SUM(UnitPrice * Quantity * Discount) AS TotalDiscountLastQuarter FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE QUARTER(OrderDate) = QUARTER(CURDATE()) - 1 AND YEAR(OrderDate) = YEAR(CURDATE()));",
            "SELECT c.CustomerID, c.CompanyName FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate IS NULL OR YEAR(o.OrderDate) <> YEAR(CURDATE());",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 1;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
            "SELECT OrderID, Freight FROM orders ORDER BY Freight DESC LIMIT 10;",
            "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT Country, AVG(OrderCount) AS AvgOrders FROM (SELECT o.CustomerID, c.Country, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.Country, o.CustomerID) AS subquery GROUP BY Country;",
            "SELECT p.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.CategoryID;",
            "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS ShippingDelay FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) > 7;",
            "SELECT OrderID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY OrderID;",
            "SELECT Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Region ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT COUNT(*) FROM (SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID HAVING COUNT(o.OrderID) > 3) AS subquery;",
            "SELECT DAYOFWEEK(OrderDate) AS DayOfWeek, COUNT(OrderID) AS OrderCount FROM orders GROUP BY DAYOFWEEK(OrderDate) ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID;",
            "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 1;",
            "SELECT ShipCountry, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCountry;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID HAVING COUNT(DISTINCT orders.ShipRegion) > 1;",
            "SELECT customers.CustomerID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
            "SELECT OrderID, Freight FROM orders WHERE Freight > 100;",
            "SELECT (COUNT(DISTINCT CASE WHEN OrderDate BETWEEN '2022-01-01' AND '2022-12-31' THEN CustomerID END) * 1.0 / NULLIF(COUNT(DISTINCT CASE WHEN OrderDate < '2022-01-01' THEN CustomerID END), 0)) * 100 AS RetentionRate FROM orders;",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY LifetimeValue DESC LIMIT 5;",
            "SELECT COUNT(DISTINCT ProductID) AS UniqueProductsOrdered FROM [Order Details];",
            "SELECT (COUNT(*) FILTER (WHERE ShippedDate > RequiredDate)::FLOAT / COUNT(*)) * 100 AS LateShipmentPercentage FROM orders;",
            "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry;",
            "SELECT COUNT(*) FROM customers WHERE ContactTitle = 'Owner';",
            "SELECT OrderID FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE [Order Details].Discount > 0.10;",
            "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 3;",
            "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY CustomerID ORDER BY TotalOrders DESC LIMIT 5;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT ShipVia, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipVia ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CustomerLifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE customers.CustomerID = 'specific_customer_id' GROUP BY customers.CustomerID;",
            "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity) AS TotalSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT AVG(TotalItems) AS AverageOrderSize FROM (SELECT OrderID, SUM(Quantity) AS TotalItems FROM [Order Details] GROUP BY OrderID) AS OrderSizes;",
            "SELECT EXTRACT(MONTH FROM OrderDate) AS OrderMonth, COUNT(OrderID) AS MonthlyOrders FROM orders GROUP BY OrderMonth ORDER BY MonthlyOrders DESC LIMIT 1;",
            "SELECT CustomerID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageDeliveryTime FROM orders GROUP BY CustomerID ORDER BY AverageDeliveryTime DESC LIMIT 1;",
            "SELECT CustomerID FROM (SELECT CustomerID, COUNT(OrderID) as NumberOfOrders FROM orders GROUP BY CustomerID) as OrderCounts WHERE NumberOfOrders = (SELECT MAX(NumberOfOrders) FROM (SELECT CustomerID, COUNT(OrderID) as NumberOfOrders FROM orders GROUP BY CustomerID) as OrderCounts);",
            "SELECT COUNT(CustomerID) FROM (SELECT CustomerID, COUNT(OrderID) as NumberOfOrders FROM orders WHERE OrderDate > (CURRENT_DATE - INTERVAL '1' YEAR) GROUP BY CustomerID HAVING COUNT(OrderID) > 1) AS FrequentCustomers;",
            "SELECT Country, AVG(TotalOrderValue) AS AverageOrderValue FROM (SELECT orders.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalOrderValue, customers.Country FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY orders.OrderID, customers.Country) AS CountryOrderAverages GROUP BY Country ORDER BY AverageOrderValue DESC LIMIT 1;",
            "SELECT c.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN \"Order Details\" od ON o.OrderID = od.OrderID GROUP BY c.CompanyName ORDER BY TotalOrderValue DESC FETCH FIRST 5 ROWS ONLY;",
            "SELECT COUNT(*) FROM orders WHERE YEAR(OrderDate) = 2022;",
            "SELECT c.CompanyName FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderID IS NULL;",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID;",
            "SELECT MONTH(OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(OrderDate) = 2022 GROUP BY MONTH(OrderDate) ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT City, COUNT(*) AS NumberOfCustomers FROM customers GROUP BY City;",
            "SELECT DISTINCT orders.OrderID, customers.CustomerID, customers.CompanyName FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID INNER JOIN customers ON orders.CustomerID = customers.CustomerID WHERE [Order Details].Discount > 0;",
            "SELECT (COUNT(DISTINCT o.CustomerID) FILTER (WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-01-31'))::DECIMAL / NULLIF(COUNT(DISTINCT o.CustomerID) FILTER (WHERE o.OrderDate < '2023-01-01'), 0) FROM orders o;",
            "SELECT ShipRegion, COUNT(*) AS NumberOfOrders FROM orders GROUP BY ShipRegion ORDER BY NumberOfOrders DESC;",
            "SELECT ProductID, AVG(Quantity) AS AvgQuantity FROM [Order Details] GROUP BY ProductID;",
            "SELECT ShipVia, COUNT(*) AS NumberOfOrders FROM orders GROUP BY ShipVia ORDER BY NumberOfOrders DESC FETCH FIRST 1 ROW ONLY;",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM orders WHERE ShippedDate IS NOT NULL;",
            "SELECT ShipCity, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipCity ORDER BY AvgFreightCost DESC LIMIT 1;",
            "SELECT (SUM(CASE WHEN YEAR(OrderDate) = 2022 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - SUM(CASE WHEN YEAR(OrderDate) = 2021 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) AS RevenueDifference FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID;",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 1;"
        ],
        "reviews": [
            "The SQL query is correct. It accurately counts the distinct CustomerID entries from the orders table to determine the number of unique customers who have placed orders.",
            "The SQL query is correct. It groups the customers by Country, counts the number of customers in each country, orders the result in descending order of customer count, and limits the result to the top country with the highest number of customers.",
            "The query is not compliant with ANSI SQL as the YEAR() function might not be supported universally. Instead, use a DATE function such as EXTRACT to ensure compatibility.",
            "The SQL query is correct. It calculates the average freight cost per order by using the AVG function on the Freight column in the orders table.",
            "The SQL query correctly calculates the total revenue for the specified customer by joining the necessary tables and applying the formula given for Customer Lifetime Value. The query is correct and adheres to the provided schema and business definition.",
            "The SQL query correctly calculates the Customer Lifetime Value (CLV) by joining the appropriate tables and using the provided formula. It then orders the customers by CLV in descending order and limits the result to the top customer, which matches the business question.",
            "The provided SQL query is correct. It selects the ProductID and sums the Quantity from the [Order Details] table, groups by ProductID, orders by the total quantity in descending order, and limits the result to the top 5 products. The use of LIMIT 5 as per ANSI SQL may need to be adjusted depending on the SQL dialect if implementing on a different system.",
            "The query correctly calculates the month with the highest order volume in 2023 by grouping orders by month, counting them, and sorting in descending order to return the top result. It aligns with the business question.",
            "The SQL query is correct. It selects all customers whose CustomerID does not appear in the orders table, effectively identifying customers who have never placed an order.",
            "The original query uses the YEAR function, which may not be supported in all ANSI SQL implementations. The corrected query uses EXTRACT(YEAR FROM o.OrderDate) to ensure compatibility with ANSI SQL standard.",
            "The original query incorrectly attempts to calculate the average by grouping directly by CustomerID and computing AVG on the quantity from [Order Details], which would not calculate the average per customer. The correct approach is to first sum the quantities for each customer and then compute the average of these sums.",
            "The SQL query is correct. It correctly selects EmployeeID and counts the number of orders for each employee, ordering the results in descending order and limiting the output to the top result, which answers the question.",
            "The query is correct. It groups the orders by ShipVia, counts the occurrences, orders them in descending order, and limits the result to 1 to find the most frequently used shipping method.",
            "The original query incorrectly equates two distinct customer counts without a proper distinct matching of customers from January-February against those before January. The corrected query first identifies customers from the desired period and prior, then calculates retention properly with a left join, accounting for returning customers only.",
            "The SQL query is correct. It calculates the total revenue per product by summing the product of unit price, quantity, and discount factor for each product, groups by ProductID, and orders the results in descending order of revenue, selecting the top product.",
            "The SQL query is correct. It lists all customers and counts the number of orders each customer has placed, including those with zero orders due to the LEFT JOIN.",
            "The original query has an error in the DATEDIFF function usage. The correct syntax is DATEDIFF(part, start_date, end_date) where 'part' specifies the part to be calculated, in this case 'day'. Also, ensure ShippedDate is not NULL to avoid incorrect results.",
            "The original query is almost correct. The only correction needed is in the GROUP BY clause where we should use ShipCity directly without the table alias because it is unambiguous in this query.",
            "The SQL query is correct. It accurately counts the number of orders where the ShippedDate is later than the RequiredDate.",
            "The original query needed to include od.OrderID in the GROUP BY clause to ensure the aggregation of individual orders. This allows us to find the maximum revenue for a single order.",
            "The SQL query correctly calculates the total revenue by each customer based on the provided schema and the Customer Lifetime Value metric definition. No corrections needed.",
            "The SQL query correctly answers the business question by counting the number of orders placed by customers in each country. It properly joins the customers and orders tables on CustomerID and groups the results by country.",
            "The provided SQL query is correct and answers the business question. It joins the customers and orders tables, counts the number of orders per customer, groups the results by CustomerID, and orders them in descending order to get the customer with the most orders. LIMIT 1 ensures only the top result is returned.",
            "The SQL query correctly calculates the average order value per customer by joining the 'customers', 'orders', and '[Order Details]' tables and grouping by 'CustomerID'. The formula for average order value matches the requirement of multiplying 'UnitPrice' by 'Quantity' and adjusting for 'Discount', then averaging the result grouped by 'CustomerID'.",
            "The SQL query is correct. It calculates the total sales per product and lists the top 5 products with the highest sales, ordering them in descending order.",
            "The SQL query correctly calculates the average discount given for each customer by joining the necessary tables and grouping by CustomerID to compute the average discount from the Order Details table.",
            "The SQL query is correct. It selects the City and counts the number of CustomerIDs for each city, groups them by City, orders in descending order based on the number of customers, and limits the result to the top one, which correctly answers the business question.",
            "The query correctly calculates the total freight cost for all orders shipped to the USA. No corrections needed.",
            "The SQL query is correct. It joins the customers, orders, and [Order Details] tables properly to count the distinct products ordered by each customer, grouping by CustomerID.",
            "The SQL query is correct. It calculates the average difference in days between the 'OrderDate' and the 'ShippedDate' where 'ShippedDate' is not null, which answers the business question.",
            "The query is mostly correct, but for clarity, it's better to group by the exact expression used in the SELECT clause (EXTRACT(MONTH FROM OrderDate)). The original query works due to aliasing, but explicit grouping ensures accuracy.",
            "The original query uses WHERE clauses incorrectly inside the COUNT function. The solution uses CASE WHEN with COUNT to differentiate conditions while ensuring the correct division.",
            "The SQL query is correct as it correctly counts the number of orders where the 'ShippedDate' is later than the 'RequiredDate'.",
            "The SQL query correctly retrieves customers who have placed more than 5 orders. It uses a JOIN between the customers and orders tables, groups by CustomerID, and applies a HAVING clause to filter the results correctly. The query aligns with the business question without any errors.",
            "The SQL query correctly counts the number of orders handled by each employee and returns the top 3 based on the number of orders. The use of GROUP BY, ORDER BY, and LIMIT clauses is appropriate for this query.",
            "The SQL query correctly calculates the total quantity of products sold by summing the Quantity column from the [Order Details] table. No corrections needed.",
            "The SQL query is correct and follows the definition provided for calculating Customer Lifetime Value. It uses the correct tables, columns, and joins, and includes the appropriate GROUP BY clause.",
            "The original query correctly calculates the order frequency, but it lacks handling for division by zero. Adding NULLIF prevents division by zero errors. Ordering by AverageOrderFrequency in descending order will help identify customers with the highest frequency.",
            "The SQL query correctly identifies the most frequently used shipping method by counting the number of orders for each method and ordering them in descending order. The LIMIT 1 clause ensures that only the shipper used most frequently is returned. The query is accurate and aligns with the business question.",
            "The original query correctly calculates the total discount by multiplying UnitPrice, Quantity, and Discount for each order detail. It then sums these values to get the total discount given across all orders. The column names and table reference are correct. No changes are needed to correct the query.",
            "The SQL query correctly calculates the number of orders each customer has placed over the last year. It joins the 'customers' and 'orders' tables on 'CustomerID', filters orders placed in the last year using 'o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)', and groups results by 'CustomerID' to count the orders for each customer.",
            "The original query uses a non-standard date format function for extracting the first day of the previous month. I've corrected it to use ANSI SQL functions to properly capture last month's date range.",
            "The SQL query correctly identifies the most frequently ordered product by counting orders for each product and ordering in descending order to limit the result to the top one.",
            "The original query used DATE_SUB, which is not ANSI SQL. Also, the query should calculate the correct 'last quarter' range using date truncation. I corrected this by using DATE_TRUNC and INTERVAL according to ANSI SQL standard.",
            "The SQL query correctly selects the city with the most customers by counting the number of CustomerID entries per city, grouping by city, and ordering the result in descending order. Using LIMIT 1 ensures that only the city with the highest customer count is returned. The query is accurate and follows the business question requirements.",
            "The SQL query is correct. It calculates the average quantity per order from the [Order Details] table.",
            "The query is mostly correct but may not return expected results, since 'last year' is generally understood as the previous calendar year. The condition 'DATE_SUB(CURDATE(), INTERVAL 1 YEAR)' retrieves orders from exactly one year ago to the present day. Modify the query to cover the entire last calendar year instead.",
            "The original query is correct and calculates the total discount given on all orders by multiplying the unit price, quantity, and discount for each order detail.",
            "The SQL query correctly joins the 'customers', 'orders', and '[Order Details]' tables and calculates the total revenue per customer. It groups by 'CustomerID' and orders by 'TotalRevenue' in descending order, limiting the results to the top 5, which matches the business question. The query is correct.",
            "The SQL query is correct. It selects the correct columns, aggregates the data by counting the orders per country, groups by ShipCountry, and orders the results by OrderCount in descending order.",
            "The original query counts customers with any order this year, not specifically their first order. The corrected query ensures the orders this year are their first by checking no prior orders exist.",
            "The SQL query is correct. It joins the customers, orders, and 'Order Details' tables to calculate the average discount applied to orders by each customer, grouping the results by CustomerID.",
            "The query is incorrect because it assumes a 'RegisterDate' field in the 'customers' table, which is not provided in the schema. If we assume that new customers are those with their first order in a particular month, we may need additional logic or data. Another way to infer new customers would be through an assumption or business rule if a registrant's first order is considered their 'register date'. For this solution, 'DISTINCT' is not necessary as we are not filtering duplicates in the context of new customers within the ordered month. Hence, the COUNT should simply count the CustomerIDs linked to a newly joined 'orders' record assuming first-time orders or alternative logic defined.",
            "The query correctly retrieves the number of orders for each shipping method by grouping on the 'ShipVia' column and counting the 'OrderID'. It follows the ANSI SQL standard correctly.",
            "The SQL query correctly calculates the total revenue per country by joining the 'orders' and '[Order Details]' tables, using the ShipCountry for grouping, which aligns with the business question.",
            "The original query incorrectly attempted to average the month number. Instead, the desired calculation is the average number of orders per month per customer, which requires counting the total orders and dividing by the number of months in which orders were placed.",
            "The original query doesn't correctly determine 'last month' due to potential issues with the month boundary calculation. The correct query uses DATE_SUB and Date comparison to accurately fetch data from the previous calendar month.",
            "The original query does not correctly identify returning customers who placed orders in the current year. The corrected query ensures that only customers who placed orders in previous years are counted as returning.",
            "The SQL query correctly answers the question by selecting distinct CustomerIDs for customers who placed orders in more than three different shipping cities. The JOIN between customers and orders is correctly implemented, and the HAVING clause appropriately filters for customers with more than three distinct ShipCity values.",
            "The SQL query is correct. It correctly calculates the average discount applied to orders by country by joining the customers, orders, and [Order Details] tables and grouping by the customers' country.",
            "The query correctly joins the tables to calculate the total ordered quantity for each customer, groups the results by CustomerID, and orders them in descending order by total quantity. It then uses LIMIT to return the top five results. The query is correct.",
            "The SQL query is correct. It counts the number of orders in the 'orders' table where the 'ShippedDate' is null, meaning the order has been placed but not shipped yet.",
            "The query correctly calculates the monthly average freight cost by using DATE_PART to extract the month from OrderDate and grouping by it. The use of AVG function is appropriate for calculating the average freight cost. The query is correct as per the given schema and requirements.",
            "The SQL query is correct and retrieves the maximum discount percentage for each product, ordering them in descending order to show products with the highest discount first.",
            "The query attempts to find the number of customers with repeat purchases by grouping by CustomerID and checking for more than one order. However, the final COUNT should be outside of the HAVING condition to ensure the count of distinct customers. The corrected query is: SELECT COUNT(*) FROM (SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 1) AS repeat_customers;",
            "The query correctly groups and counts orders by the shipping method (ShipVia) from the orders table. It is accurate and aligns with the given business question.",
            "The SQL query correctly calculates the Customer Lifetime Value by joining the customers, orders, and [Order Details] tables and using the specified formula. It then groups by CustomerID, orders by CustomerLifetimeValue in descending order, and limits the result to the top customer, aligning with the business question.",
            "The SQL query is correct. It accurately calculates the average order value for each customer by averaging the total price of products ordered, accounting for quantity and discount, grouped by CustomerID.",
            "The original query uses DATE_PART, which is not standard ANSI SQL. Using EXTRACT is proper for ANSI SQL.",
            "The main issue with the original query is the incorrect interval for the subquery checking previous orders. It should check the period from 4 months ago to 1 month ago, inclusive of the day exactly one month ago. This is corrected by changing INTERVAL '1 month' to INTERVAL '2 month' in the subquery range.",
            "The original query is correct. It calculates the total freight cost per country by summing the Freight column and grouping by ShipCountry from the orders table.",
            "The SQL query is correct. It uses a subquery to select EmployeeID from orders and checks which EmployeeID from employees is not in that subquery. This successfully retrieves employees who have not been assigned to any orders.",
            "The SQL query is correct. It correctly calculates the average order quantities per region by joining the 'orders' and '[Order Details]' tables on 'OrderID'. It then groups the results by 'ShipRegion' and orders them in descending order of average quantity.",
            "The SQL query is correct. It correctly selects the Country and counts the number of CustomerID entries, grouping by Country to obtain the desired result.",
            "The SQL query correctly calculates the average number of products ordered per order by first counting the number of products for each order and then averaging these counts. The use of a subquery to achieve this is appropriate. The query is correct.",
            "The query correctly calculates the total order quantity for each shipping method by grouping on 'ShipVia'. It joins the 'orders' table with the '[Order Details]' table on 'OrderID' to sum the 'Quantity' for each 'ShipVia'. There are no mistakes in the query.",
            "The SQL query is correct and follows the ANSI SQL standard. It selects CustomerID and counts the number of orders placed in the last year, ordered by the frequency of orders in descending order, and limits the result to the top 10 customers.",
            "The original SQL query is correct and accurately answers the business question by counting the number of orders per customer and filtering those with more than 5 orders.",
            "The SQL query is correct. It calculates the average discount across all orders from the 'Order Details' table using the AVG function on the 'Discount' column.",
            "The query correctly joins the 'customers', 'orders', and '[Order Details]' tables to calculate the total order value for each customer. It then orders the results in descending order by total order value and limits the results to the top 5 customers. The query is correct and follows ANSI SQL standards.",
            "The SQL query is correct. It correctly calculates the average freight cost for orders where the shipping country is Germany.",
            "The SQL query is correct. It groups the orders by CustomerID and uses the HAVING clause to filter customers with more than 10 orders.",
            "The SQL query correctly computes the total sales per product by multiplying the unit price by quantity and applying the discount. It then groups by ProductID and orders the results by total sales in descending order, using LIMIT to return the top 5. The query is correct as written.",
            "The SQL query is correct. It calculates the average order quantity for orders placed in 2023 by joining the 'Order Details' and 'orders' tables and filtering by the year of the 'OrderDate'.",
            "The SQL query correctly determines the total discounts given to each customer by calculating the total discount for each order and aggregating it by CustomerID. No corrections are needed.",
            "The SQL query is correct. It accurately counts the number of customers grouped by country.",
            "The SQL query is correct. It groups the orders by the shipping method (ShipVia), counts the number of orders for each method, and then orders by the count in descending order, returning the most frequently used shipping method.",
            "The original query is almost correct. The only issue is that it uses column aliases without explicitly specifying the table name, which might lead to ambiguity. The corrected query adds explicit table references to 'ShippedDate' and 'RequiredDate'.",
            "The original query is mostly correct but should explicitly specify ASC for clarity, although it's the default. The corrected query includes this.",
            "The SQL query correctly answers the business question by calculating the average unit price for products with a quantity greater than 50. The query uses the AVG function on the UnitPrice column from the [Order Details] table with a WHERE clause to filter for Quantity greater than 50. The query is correctly formatted and does not require changes.",
            "The original query incorrectly checked OrderIDs for discounts, which doesn't ensure customers never received discounts across all their orders. The revised query correctly excludes customers whose any order had a discount.",
            "The original query incorrectly places the WHERE clauses. Instead, use CASE statements within COUNT functions to differentiate between the conditions. Also, use NULLIF to handle division by zero if there are no prior customers.",
            "The query is correct and retrieves orders with a freight cost greater than $100 and shipped to the USA.",
            "The SQL query is correct for the question. It selects the EmployeeID and counts the number of orders processed by each employee, groups the results by EmployeeID, orders them in descending order based on the count, and limits the results to the top entry, effectively retrieving the employee who processed the most orders.",
            "The SQL query is correct. It calculates the lifetime value of each customer by joining the 'customers', 'orders', and '[Order Details]' tables and applying the defined formula to calculate the lifetime value, grouping by the 'CustomerID' as required.",
            "The SQL query is correct. It selects the City and counts the number of CustomerID entries for each City. The results are grouped by City, sorted in descending order by customer count, and limited to the top result to identify the city with the highest number of customers.",
            "The SQL query is correct. It joins the customers, orders, and [Order Details] tables appropriately and sums up the Quantity for each CustomerID.",
            "The given SQL query is not using standard ANSI SQL. The correct function to add days in ANSI SQL is `DATE_ADD`, however, for direct day addition in some systems you may use `DATE + INTERVAL`. To achieve platform compatibility, we should modify it using a straightforward date comparison or consider SQL functions such as `DATEADD` for such an operation:\n\n```sql\nSELECT (COUNT(*) * 100.0 / NULLIF(COUNT(CASE WHEN ShippedDate <= OrderDate + INTERVAL '3' DAY THEN 1 END), 0)) AS PercentageShippedWithin3Days FROM orders;\n```\nThis ensures using standard operations for the comparison, while handling divisions safely with `NULLIF`.",
            "The query aims to calculate the order frequency for customers, which is a step towards understanding customer satisfaction. However, it uses DATEDIFF with dates, which isn't part of ANSI SQL as DATEDIFF is often database-specific. A more ANSI-compliant approach would be to subtract the dates using the DATE type's arithmetic operations if supported. Additionally, ensure there's no division by zero. The current query assumes that each customer has orders; otherwise, division by zero could occur.",
            "The SQL query is correct. It selects the CustomerID from the customers table and calculates the lifetime value using the formula provided, grouping the results by CustomerID.",
            "The SQL query is correct and retrieves the CustomerID and count of orders for each customer, ordered by the count in descending order.",
            "The SQL query correctly joins the 'customers' table with the 'orders' table and counts the number of orders per country. The GROUP BY clause is used appropriately to aggregate the orders by country. The query is correct as written.",
            "The SQL query is almost correct, but ANSI SQL does not support the INTERVAL function with 'year'. Instead, use the DATEADD function for compatibility. The corrected query is:\n\nSELECT SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate > DATEADD(year, -1, CURRENT_DATE);",
            "The query correctly calculates the total revenue for each product by grouping on ProductID and summing the product of UnitPrice, Quantity, and the discount factor. It orders the results in descending order of TotalRevenue and limits the output to the top three products. The query is correct as per the given requirement.",
            "The SQL query correctly answers the business question by counting the number of orders for each shipping method and ordering the results in descending order. No changes are needed.",
            "The original query correctly identifies customers with more than one order, but doesn't provide the count. The corrected query nests the original query to count these customers.",
            "The SQL query correctly calculates the total discount given to each customer by joining the customers, orders, and [Order Details] tables, and grouping by CustomerID. The formula used in the SUM function accurately accounts for the discount by multiplying UnitPrice, Quantity, and Discount.",
            "The original query used '>' instead of '>=' which may miss orders placed exactly one year ago. Corrected to consider orders from one year ago.",
            "The SQL query is correct. It calculates the total freight cost for each country by summing the 'Freight' column and grouping the results by 'ShipCountry'.",
            "The original query assumes direct subtraction of dates works as expected in all database systems. Casting both dates to DATE type ensures correct subtraction in systems that may otherwise handle dates differently.",
            "The SQL query is correct and correctly calculates the Lifetime Value per customer using a SUM aggregation, joining the necessary tables, and ordering by LifetimeValue in descending order, limiting the result to one customer.",
            "The SQL query provided is correct. It selects the City and counts the CustomerID values, groups the results by City, orders them by the count in descending order, and limits the results to the most common city.",
            "Original query incorrectly calculates the retention rate by performing cross joins. Updated query uses a LEFT JOIN to correctly retain customers appearing in both timeframes. NULLIF is added to prevent division by zero.",
            "The SQL query is correct. It accurately counts the number of orders processed by each employee, grouping by EmployeeID, and orders the result in descending order of the order count.",
            "The original SQL query is correct and matches the business question. It calculates the total revenue per region by joining the orders, [Order Details], and customers tables, then grouping and ordering by total revenue.",
            "The query correctly calculates the average discount. It uses the AVG function to compute the average value of the Discount column from the [Order Details] table. No corrections are needed.",
            "The provided SQL query correctly retrieves the OrderID from the 'orders' table where the freight cost is greater than $100. The query matches the business question.",
            "The original query incorrectly uses the subtraction operator for date difference calculation. ANSI SQL doesn't directly support date subtraction to determine the difference in days. The corrected query uses the DATEDIFF function, assuming it's supported. Ensure your SQL environment supports this or adjust to the specific SQL syntax applicable.",
            "The SQL query is correct. It calculates the average order value for customers from each country by joining the 'customers', 'orders', and 'Order Details' tables and grouping the results by the 'Country' column from the 'customers' table.",
            "The SQL query is correct. It correctly counts the number of unique ProductIDs from the [Order Details] table, which addresses the business question of how many unique products have been ordered in total.",
            "The query correctly calculates the total number of orders placed each month by truncating the OrderDate to the month level and grouping by this truncated date. The use of COUNT(o.OrderID) correctly counts the orders. No corrections needed.",
            "The query correctly calculates the total revenue for each customer by considering the unit price, quantity, and discount for orders placed in the year 2022. It uses the SUM and GROUP BY operations appropriately and orders the results in descending order to select the customer with the highest revenue using LIMIT 1. The SQL query is correct as per the business question.",
            "The original query returns the OrderID and ShippingDelay for orders shipped more than a week after the order date. However, the business question asks for the count of such orders. I corrected the query to return the count instead.",
            "The SQL query is correct. It calculates the average discount from the [Order Details] table as expected.",
            "The SQL query is correct and effectively counts the number of times each product was ordered, ordering the result in descending order by order count.",
            "The SQL query is correct. It correctly uses COUNT(DISTINCT c.CustomerID) to count unique customers from each city and groups by city.",
            "The SQL query is correct. It calculates the percentage of orders that used each shipping method by dividing the count of orders for each shipping method by the total number of orders.",
            "The SQL query provided is correct. It selects the CustomerID and calculates total spending by each customer using the specified formula. The query groups by CustomerID, orders results by total spending in descending order, and limits the result to the top 5 customers. The query adheres to the schema and employs the necessary joins and aggregation.",
            "The SQL query is correct. It joins the customers and orders tables on CustomerID and groups the results by Region to count the number of orders for each region.",
            "The SQL query is correct. It successfully retrieves the employee IDs and the count of orders they handle, ordering the results by the number of orders in descending order.",
            "The original query calculates the retention rate over the entire year of 2023 rather than monthly. To achieve a true monthly retention rate, you would need to compute this for each month separately, iterating over each month's date range. Additionally, to prevent division by zero, a NULLIF function is used in this context.",
            "The original query is almost correct, but it only retrieves the single order with the highest freight cost due to the LIMIT 1 clause. To find all orders with the highest freight cost, you should identify the maximum freight value first and then filter the orders matching that value.",
            "The original query attempts to calculate the year-over-year growth in the number of orders. However, there is a logical error in using COUNT(o.OrderID) directly inside the LAG function, as it results in an aggregation issue. To correct this, ensure that you count the orders by year and then use LAG on the resulting counts. To achieve this, both the COUNT and its LAG should be part of a subquery or calculated in the same SELECT list. This revised query counts the orders per year and uses LAG to find the difference from the previous year.",
            "The SQL query correctly joins the 'customers' and 'orders' tables on CustomerID and filters the results where the ContactTitle contains 'Manager'. The COUNT and GROUP BY clauses are used appropriately to calculate the number of orders per customer with 'Manager' in their title. The query is correct.",
            "The SQL query is correct. It selects the city and counts distinct customers in each city, grouping by city and ordering the results by the customer count in descending order.",
            "The SQL query correctly calculates the total discount amount provided to each customer by multiplying the unit price by the quantity and the discount, then summing the results. The query correctly joins the customers, orders, and order details tables, and groups the results by customer ID. The query is correct as per the provided schema and business question.",
            "The SQL query is correct and matches the business question. It selects the country and counts the distinct CustomerID grouped by Country from the 'customers' table.",
            "The provided query is correct. It accurately selects distinct CustomerID and CompanyName from the customers table where the associated orders have a Freight cost greater than $100.",
            "The SQL query correctly calculates the average quantity ordered for each product. The use of GROUP BY ProductID followed by AVG(Quantity) is appropriate to answer this question. Therefore, the query is correct and adheres to the given database schema.",
            "The query correctly calculates the total number of orders per customer for the last year. However, ensure that the SQL environment supports the `YEAR()` function correctly with the `OrderDate`. The rest of the logic correctly performs the necessary join, filtering, aggregation, and ordering. The `LIMIT 1` clause effectively narrows down the result to the customer with the most orders.",
            "The original SQL query incorrectly sums only the discount values. To calculate the total discount given by each customer, we need to consider UnitPrice and Quantity, i.e., the formula should be SUM(UnitPrice * Quantity * Discount).",
            "The SQL query is correct. It accurately counts orders where the 'ShippedDate' is NULL, indicating they have not yet been shipped.",
            "The provided SQL query correctly calculates the average freight cost for orders shipped to the USA. The query uses the AVG function on the Freight column and filters records where ShipCountry is 'USA'. The syntax and logic are correct and align with the business question.",
            "The SQL query is correct. It selects the ShipCity and counts the number of orders for each city, groups by ShipCity, and orders the results in descending order of shipments. The use of LIMIT 1 ensures that only the city with the most shipments is returned. No corrections are needed.",
            "The SQL query correctly selects the OrderID and calculates the total discount amount using SUM(UnitPrice * Quantity * Discount) for rows where Discount > 0. The GROUP BY clause is correctly used on OrderID. This query is correct and accurately answers the business question.",
            "The SQL query correctly calculates the Customer Lifetime Value by joining the 'customers', 'orders', and '[Order Details]' tables and summing the revenue per order. It then groups by 'CustomerID' and limits the results to the top 5 customers by ordering the results in descending order of the Lifetime Value. The query aligns with the business question requirements.",
            "The original query is correct. It correctly joins the 'customers', 'orders', and '[Order Details]' tables to count the number of distinct 'ProductID' for each 'CustomerID'.",
            "The query correctly retrieves the number of orders placed each month for the current year. It uses `MONTH` and `YEAR` functions to filter and group the data appropriately. The use of `CURRENT_DATE` is valid to determine the current year.",
            "The original query had syntax errors and incorrect logic. The 'WHERE' clause should be part of the 'JOIN' conditions or a 'WHERE' condition itself for each subquery. Furthermore, the query was missing necessary subquery structure to correctly handle the calculation. The corrected query separates the calculation logic to ensure correct division and to handle potential division by zero, a multiplication by 1.0 is included to ensure floating-point division.",
            "The original SQL query is correct. The AVG function calculates the average difference between the OrderDate and ShippedDate for orders where ShippedDate is not null, which is the correct approach for this question.",
            "The original query only fetched the OrderID and value, missing the CustomerID. The corrected query includes joins to get the CustomerID, as well as the original order details, and orders by the value to find the highest.",
            "The SQL query is mostly correct, but DATE_SUB is not part of the ANSI SQL standard. The correct way to express the date subtraction uses the ANSI SQL standard format with 'CURRENT_DATE - INTERVAL '6 MONTH''. Everything else in the query is accurate.",
            "The original query is mostly correct but uses 'LIMIT 1' which is not part of the ANSI SQL standard. Instead, 'FETCH FIRST 1 ROW ONLY' is used in ANSI SQL to limit the result set to a single row.",
            "The SQL query is correct. It selects the 'ShipRegion' and calculates the 'SUM(Freight)' as 'TotalFreightCost', groups the results by 'ShipRegion', orders them in descending order by 'TotalFreightCost', and limits the result to 1, effectively identifying the region with the highest total freight cost.",
            "The SQL query correctly calculates the total revenue for each customer and filters for customers with revenue over $5000. The JOIN operations and the use of the SUM and HAVING clause are appropriate.",
            "The SQL query correctly joins the 'customers' and 'orders' tables on 'CustomerID', counts the number of 'OrderID's, and groups the results by 'Country'. The query correctly answers the question. No changes are needed.",
            "The SQL query correctly calculates the average order value by considering the unit price, quantity, and discount from the [Order Details] table. It accurately computes the desired metric.",
            "The SQL query is correct and will return the customer with the highest lifetime value by joining the relevant tables, computing the lifetime value based on the formula provided, and ordering the results in descending order to get the top customer. The LIMIT 1 clause is used correctly to return only the top result.",
            "The SQL query is correct. It accurately calculates the total revenue generated from each customer by joining the relevant tables and applying the specified formula.",
            "The SQL query correctly retrieves the number of customers from each country by counting CustomerID and grouping by Country. It adheres to the schema provided.",
            "The SQL query correctly retrieves the CustomerID of the customer who placed the most orders by joining the 'customers' and 'orders' tables and counting the number of orders for each customer, then ordering by the count in descending order and limiting the result to 1.",
            "The SQL query is correct and follows the ANSI SQL standard. It correctly calculates the total revenue for each product and retrieves the top five by using SUM, GROUP BY, and ORDER BY.",
            "The SQL query is correct and properly calculates the total discount given to each customer by multiplying the unit price, quantity, and discount, then summing these values for each customer.",
            "The original query had incorrect syntax for conditional aggregation. I corrected it by using CASE statements within COUNT.",
            "The original query was mostly correct, but it's a good practice to use DISTINCT in the subquery to ensure CustomerID is evaluated correctly without duplicates.",
            "The SQL query correctly calculates the average freight cost for orders that have a non-null ShippedDate, which means they have been shipped. The query accurately addresses the business question.",
            "The original query is almost correct. Minor adjustment: ensure 'OrderDate' is fully qualified by the table name as 'orders.OrderDate' for clarity and accuracy.",
            "The query correctly calculates the total quantity ordered for each product by summing the 'Quantity' and grouping by 'ProductID'. The table '[Order Details]' is correctly referenced, so the query is correct.",
            "The query is correct and uses DATEDIFF to calculate the shipping delay for all orders where the ShippedDate is not null. It then calculates the average of these delays.",
            "The SQL query is correct. It accurately counts the number of customers in each city, groups by City, orders by the count in descending order, and limits the results to the top three cities.",
            "The SQL query correctly calculates the total freight cost grouped by country using the 'ShipCountry' column. The query is accurate and follows the business question requirements.",
            "Corrected the HAVING condition to use COUNT(OrderID) directly instead of the alias.",
            "The original query uses the FILTER clause correctly to count the rows where Discount > 0. However, to avoid division by zero, NULLIF is used in the corrected query to handle cases where the total count is zero.",
            "The SQL query is correct. It calculates the total revenue for each month of the current year by joining the orders and [Order Details] tables, filtering by the current year, and grouping by the month.",
            "The query is almost correct, but '!Region' may cause confusion. The query should group by 'customers.Region' explicitly. Moreover, to avoid a potential syntax error depending on the SQL database being used, ensure that the table '[Order Details]' is referenced correctly with square brackets or based on database requirements if using different SQL engines.",
            "The SQL query is correct and aligns with the defined metric for Customer Lifetime Value.",
            "The original query uses the SQL Server specific function DATEADD and GETDATE(), which are not ANSI SQL standard. I've revised the query to use DATE_TRUNC for defining the timeframe of the previous month, which works in systems supporting standard SQL and PostgreSQL.",
            "The SQL query provided correctly calculates and retrieves the customer with the highest total order value by joining the relevant tables and using a SUM aggregation on the order details. The query properly orders the results to find the top customer and limits the output to one result.",
            "The SQL query is correct. It selects all products, calculates the total quantity ordered for each and orders the results in descending order, showing the most frequently ordered products first.",
            "The original query is mostly correct but it uses GETDATE(), which is specific to some SQL dialects like SQL Server. The correct ANSI SQL function for the current date is CURRENT_DATE.",
            "The SQL query correctly identifies customers who have never placed an order by using a subquery to check for the absence of CustomerID in the orders table. The query is correct.",
            "The original query's use of 'start_date' and 'end_date' was unclear. Updated to calculate the past quarter using CURRENT_DATE and INTERVAL. Added NULLIF to avoid division by zero.",
            "The SQL query correctly joins the 'orders' table with the 'customers' table on 'CustomerID', groups the results by 'Region', and counts the number of orders per region. The results are ordered by 'NumberOfOrders' in descending order. The query accurately answers the business question and conforms to the schema.",
            "The original query correctly identifies customers who have placed more than five orders, but it doesn't return the count of such customers. The corrected query uses COUNT(*) to return the total number of customers meeting this condition.",
            "The SQL query is correct and accurately calculates the average freight cost for orders shipped to 'USA'.",
            "The SQL query correctly finds the most recent order date for each customer by grouping the orders by CustomerID and selecting the maximum order date.",
            "The original query is nearly correct, but 'GETDATE()' is not ANSI SQL standard. Replacing it with 'CURRENT_DATE' aligns it with the ANSI SQL standard. Otherwise, the query correctly calculates monthly sales revenue for the current year and identifies the month with the highest revenue.",
            "The SQL query accurately answers the question by selecting the EmployeeID and counting the number of orders associated with each employee. It then orders the results in descending order to find the employee with the highest number of orders and limits the output to one result. The query is correct and follows the appropriate logic.",
            "The SQL query is correct and accurately calculates the average quantity ordered per product by grouping the data based on ProductID and computing the average of the Quantity column.",
            "The original query incorrectly calculates delay by comparing OrderDate and RequiredDate. It should compare RequiredDate and ShippedDate to determine delay. Corrected this in the SQL query.",
            "The original query is mostly correct but missed ensuring that the year of the current date matches the year of the OrderDate. Added YEAR condition to fix potential cross-year quarter issues.",
            "The original query only grouped by month, ignoring the year. This could lead to incorrect aggregation if the data spans multiple years. The correct query groups by both year and month to accurately analyze trends over time.",
            "The SQL query is correct. It selects the CustomerID, counts the number of orders for each customer, and orders them by the count in descending order, limiting the result to the top 5.",
            "The query correctly joins the 'orders', '[Order Details]', and 'customers' tables. It calculates the variety of products purchased per country by counting distinct 'ProductID'. The use of GROUP BY on 'Country' and ordering the results by 'ProductVariety' in descending order fulfills the requirement to find countries with the most diverse product purchases. No corrections are needed.",
            "The SQL query correctly calculates the average order amount for each customer by joining the customers, orders, and [Order Details] tables, and correctly using AVG to calculate the average order amount. The GROUP BY clause is correctly applied to group results by CustomerID.",
            "The SQL query seems correct as it counts the orders where the shipped date is within 7 days of the order date using the DATEDIFF function. However, note that if there are NULL values in 'ShippedDate', they would be excluded from the count, which might or might not be the intended behavior depending on the requirements.",
            "The SQL query correctly calculates the total revenue for each product and retrieves the top 5 products with the highest revenue. The use of SUM, GROUP BY, and ordering by DESC is appropriate for this question. The query is correct.",
            "The SQL query is correct. It calculates the total discount per customer and orders the results to find the customer with the highest total discount, limiting the result to the top customer.",
            "The SQL query correctly calculates the average freight cost for orders that have been shipped. The condition 'WHERE ShippedDate IS NOT NULL' accurately filters for shipped orders.",
            "The original query checks if the order date is either null or older than one year, missing customers with only older orders. It correctly identifies customers who have never placed an order. However, to identify those who haven't placed any orders in the past year, we should ensure that we are not excluding customers who have had more recent orders. The given query works correctly as intended, as 'OR o.OrderDate IS NULL' handles customers with no orders.",
            "The SQL query correctly selects the top 5 cities with the most orders by grouping by 'ShipCity', counting the number of orders, and sorting the results in descending order. The use of 'LIMIT 5' is appropriate to obtain only the top 5 results. The query is correct and follows the given schema and SQL standards.",
            "The SQL query correctly identifies customers who have placed more than one order by grouping the orders by CustomerID and using the HAVING clause to filter those with more than one order.",
            "The original query incorrectly calculates the count for the current year and mixes logic directly within a single SELECT statement. To fix this, we separate the counts for the current and previous years using subqueries, making calculation straightforward and correct.",
            "The SQL query is correct. It joins the 'customers', 'orders', and '[Order Details]' tables properly to calculate the average discount per order for each customer, and orders the results by highest average discount.",
            "The current query is incorrect. Instead of DATEDIFF between RequiredDate and OrderDate, it should be between ShippedDate and OrderDate to check for unshipped orders beyond 30 days. Additionally, since you want unshipped orders, the logic for ShippedDate should be correct as IS NULL.",
            "The SQL query is correct. It selects the EmployeeID and the count of OrderID, grouping by EmployeeID and ordering the results in descending order of the number of orders. No changes needed.",
            "The SQL query is mostly correct, but to adhere to ANSI SQL standards, the MONTH function should be rewritten using EXTRACT. The corrected SQL query is: SELECT EXTRACT(MONTH FROM OrderDate) AS OrderMonth, COUNT(*) AS NumberOfOrders FROM orders GROUP BY OrderMonth ORDER BY OrderMonth;",
            "The query was mostly correct. The only adjustment needed was to ensure proper qualification of the Region column in the GROUP BY clause by using c.Region.",
            "The SQL query is correct. It accurately selects the CustomerID and counts the distinct ProductID for each customer using proper JOINs and GROUP BY.",
            "Ensure 'start_date' and 'end_date' are replaced with actual dates for the last quarter of interest. Here, I've used '2023-07-01' to '2023-09-30' as an example.",
            "The SQL query is correct and aligns with the business question. It correctly joins the 'customers', 'orders', and '[Order Details]' tables to aggregate the total quantity of products ordered by each customer, grouped by the 'CustomerID'.",
            "The original SQL query contains a mistake. Using COUNT(DISTINCT OrderID) is unnecessary since OrderID is unique in the orders table. Also, ensure that columns used in the SELECT list that are not part of aggregate functions are included in the GROUP BY clause. The corrected query correctly applies the join and aggregation.",
            "The SQL query correctly calculates the total revenue per product by multiplying the unit price, quantity, and applying the discount for each order detail. The query then groups the results by ProductID and orders them in descending order of revenue, limiting the results to the top result, which answers the business question accurately.",
            "The query is almost correct. The function CURDATE() should be replaced with CURRENT_DATE to align with ANSI SQL standards.",
            "The given SQL query correctly calculates the total discount amount per customer by multiplying the discount rate by the unit price and quantity, and then summing these values for each customer. The query is accurate.",
            "The original query calculates the average delay without adjusting for early shipments. The revised query treats early shipments (where ShippedDate is before RequiredDate and thus DATEDIFF is negative) as on-time with no delay, potentially indicating higher satisfaction.",
            "The SQL query is correct and accurately counts the number of orders where the ShippedDate is later than the RequiredDate.",
            "The SQL query is correct and aligns with the business metric definition for Customer Lifetime Value by using the correct tables and joining conditions.",
            "The original query doesn't ensure calculations are done separately before division, which may lead to incorrect results. CROSS JOIN is used to evaluate each part independently. NULLIF is used to handle division by zero.",
            "The SQL query correctly counts the number of times each shipping method is used. It then orders the results by the count in descending order and limits the result to the top one, thus identifying the most frequently used shipping method. The query is correct.",
            "The SQL query is correct. It correctly calculates the total order value for each customer and retrieves the top 5 customers with the highest total order value.",
            "The SQL query is correct. It accurately counts the number of customers per contact title category by using the GROUP BY clause on ContactTitle.",
            "The SQL query correctly calculates the total freight cost per country by summing the Freight column and grouping by the ShipCountry. No changes needed.",
            "The SQL query correctly retrieves the maximum, minimum, and average discount from the [Order Details] table. The query is valid and aligns with the business question.",
            "The original query does not fully apply the Customer Lifetime Value metric formula. Corrected to include discounts in product totals.",
            "Added EXTRACT(YEAR FROM OrderDate) to the GROUP BY clause to ensure sales are correctly grouped by year and month. This prevents aggregation issues over multiple years.",
            "The SQL query is correct. It selects the earliest and latest shipping dates for each customer by grouping the data by CustomerID and applying MIN and MAX functions on the ShippedDate column.",
            "The query is correct. It groups the results by CompanyName, counts the occurrences, orders them by frequency in descending order, and limits the result to the top one, which provides the most frequent company name in the customer database.",
            "The SQL query is correct for the business question. It groups orders by month and counts the number of orders for each month.",
            "The SQL query correctly retrieves the total number of customers from each country by grouping the customers by their Country and counting the CustomerID. The query aligns with the business question and utilizes the correct table and columns.",
            "The SQL query is correct. It counts the orders for each customer grouped by CustomerID in the orders table.",
            "The original query correctly calculates the total orders and average order value per shipping country. However, it should use COUNT(DISTINCT OrderID) to ensure each order is counted only once, even if it contains multiple products.",
            "The SQL query correctly calculates the customer lifetime value by summing up the revenue generated from each order detail, then groups the results by customer and orders them to find the highest lifetime value, limiting the result to one customer. The query is correct.",
            "The original query incorrectly uses SUM to count customers with more than one order. It should use a subquery with HAVING to filter customers with more than one order, and then calculate the percentage based on the total distinct customers.",
            "The provided SQL query correctly computes the total discount by multiplying the unit price, quantity, and discount for each order detail in the [Order Details] table.",
            "The given SQL query is correct. It correctly calculates the total revenue for each product by multiplying the unit price, quantity, and applying the discount, then groups the results by ProductID. Finally, it orders the products by total revenue in descending order and limits the result to the top 3 products.",
            "The original query correctly calculates retention by checking for prior orders from the same customer. However, using 'NULLIF' prevents division by zero errors in months without any orders. The performance of this query could be improved by ensuring the subquery is optimized for large datasets.",
            "The original query correctly groups orders by year and month but should order the results by 'TotalOrders' in descending order to identify peak months.",
            "The SQL query is correct. It selects the shipping method and calculates the average freight cost, grouping by the shipping method as expected.",
            "The SQL query is correct. It accurately selects the city and counts the distinct CustomerIDs for each city, then orders the results by the count in descending order to find the cities with the highest number of unique customers.",
            "The SQL query correctly calculates the total revenue from orders with a discount. It joins the orders and [Order Details] tables, filters for discounts greater than zero, and sums the calculated revenue, which is precise for the question asked.",
            "The SQL query is correct. It accurately identifies customers who have never received a discount by checking for the existence of any order with a discount greater than 0 for each customer.",
            "The SQL query is correct. It counts the number of orders where the ShippedDate is later than the RequiredDate, which is the correct interpretation of 'shipped late'.",
            "The query is mostly correct. However, we should ensure that the column 'Region' is selected from the 'customers' table by specifying 'c.Region'. Here's the corrected query:\n\nSELECT c.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalLifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Region ORDER BY TotalLifetimeValue DESC LIMIT 1;",
            "The original query incorrectly grouped by CustomerID, but did not join with the customers table to list details as required. The corrected query uses DISTINCT to ensure unique CustomerIDs and includes a join between customers and orders.",
            "The SQL query correctly calculates the average order value with and without discounts by using the formula provided in the business metrics. The use of AVG function on the calculated expressions for order value with and without discounts is correct. The query is appropriate for the given question.",
            "The SQL query correctly identifies customers who have placed more than ten orders. It uses GROUP BY to aggregate the orders by CustomerID and HAVING to filter groups with an order count greater than ten. No corrections needed.",
            "The SQL query correctly calculates the total sales revenue for each product by multiplying UnitPrice, Quantity, and the discount factor. It groups the results by ProductID and orders them in descending order by TotalSales, which matches the business question's requirements.",
            "The SQL query is correct. It calculates the Customer Lifetime Value for each customer by summing the revenue from each order, adjusting for any discounts, and groups the results by CustomerID.",
            "The original query incorrectly selects orders older than a year. The corrected query ensures that customers with no orders or orders within the last year are selected.",
            "The SQL query correctly calculates the number of orders for each shipping country and returns the country with the highest order count. The use of GROUP BY, COUNT, ORDER BY DESC, and LIMIT 1 is appropriate for this query.",
            "The SQL query correctly calculates the order frequency for each customer and returns the customer with the highest frequency. The use of COUNT, GROUP BY, and ORDER BY is appropriate. The LIMIT 1 clause ensures only the top customer is returned. No changes necessary.",
            "The SQL query is correct. It accurately calculates the total quantity of products ordered by each customer by joining the 'customers', 'orders', and 'Order Details' tables and using GROUP BY on the CustomerID.",
            "The original query only returns the single order with the highest freight cost. If multiple highest-cost orders are needed, increase the LIMIT value as required by the business need. Assuming the requirement is to return the top 5 highest freight costs, the LIMIT has been adjusted to 5.",
            "The query is correct and returns the number of orders shipped to the USA.",
            "The query calculates the average discount per product line, not per order. To find the average discount per order, you need to aggregate discounts for each order first and then find the average of these aggregates.",
            "The SQL query is correct. It selects the city and counts the number of customers for each city, grouping by city and ordering by the customer count in descending order to find the city with the most customers.",
            "The query is correct. It joins the customers, orders, and Order Details tables, calculates the total revenue per customer, and selects the top five customers based on total revenue. All necessary fields and computations are correctly used.",
            "The original query divides by zero if there are no orders before January. Using NULLIF prevents division by zero by returning NULL instead.",
            "The initial query directly subtracts the dates, which may not work correctly in some SQL dialects. It's more reliable to use a function like DATE_PART to calculate the difference in days.",
            "The SQL query correctly identifies customers who have received a discount of more than 20% on any product. No corrections are needed.",
            "The original query didn't count the orders but instead listed their IDs. Also, the date arithmetic was correctly used with INTERVAL '5 day'. Adding COUNT to aggregate the results correctly addresses the question.",
            "The original query does not ensure that the customer placed orders only with the specific EmployeeID. The updated query uses HAVING to count distinct EmployeeIDs for each customer and checks that it is only the specified one.",
            "The SQL query accurately calculates the total revenue by country using the 'ShipCountry' field from the 'orders' table and the revenue calculation from the '[Order Details]' table. The query correctly joins the 'orders' and '[Order Details]' tables on 'OrderID' and groups the results by 'ShipCountry' to aggregate the total revenue. No changes are needed.",
            "The SQL query correctly calculates the total lifetime value of each customer by joining the 'customers', 'orders', and '[Order Details]' tables and grouping by CustomerID. This is consistent with the metric definition provided.",
            "The original query correctly breaks down the number of orders by year and month within the last year. However, it incorrectly subtracts a number of years, rather than truncating the current date to the start of the current month before subtracting a year. The corrected query uses DATE_TRUNC to ensure we compare from the start of the current month from last year.",
            "The SQL query is correct for the given business question. It calculates the sales revenue for each product by using the formula provided in the schema and then orders the results in descending order to find the top 5 products by sales revenue.",
            "The SQL query is mostly correct but does not handle the specific shipping method dynamically. To address the requirement generically, replace '1' with a parameter placeholder to allow for any shipping method: SELECT DISTINCT customers.CompanyName FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE EXTRACT(MONTH FROM orders.OrderDate) = 1 AND orders.ShipVia = ?;",
            "The SQL query correctly calculates the total discount by multiplying UnitPrice, Quantity, and Discount from the [Order Details] table and summing the results.",
            "The SQL query is correct. It calculates the average freight cost for orders grouped by shipping country by selecting ShipCountry and using AVG(Freight), which aligns with the business question.",
            "The SQL query correctly joins the 'customers' and 'orders' tables on 'CustomerID', counts the number of orders for each customer, orders the results by order volume in descending order, and limits the output to the top 3 customers. The query is correct and follows the business question requirements precisely.",
            "The SQL query correctly identifies orders that have never been shipped by selecting records where the ShippedDate is NULL. No corrections needed.",
            "The query is correct. It joins the 'customers' and 'orders' tables on 'CustomerID', groups by 'Region', and counts 'OrderID' to calculate the total number of orders per region.",
            "The SQL query is correct. It calculates monthly sales revenue by extracting year and month from the OrderDate and then joins Orders with Order Details to compute total sales revenue. It groups by year and month, orders by sales revenue in descending order, and limits the results to the top entry, which gives the month with the highest sales revenue.",
            "The SQL query is correct. It selects distinct ProductID values from the 'Order Details' table where the Discount is greater than 10%.",
            "The original query uses WHERE clauses inside the COUNT function, which is incorrect syntax. The correct approach is to use a CASE statement within the COUNT function for each condition.",
            "The SQL query correctly counts the number of customers in each contact title category by grouping on the 'ContactTitle' column and counting 'CustomerID'. It accurately answers the business question.",
            "The SQL query is correct. It properly joins the 'orders' and '[Order Details]' tables on 'OrderID' and groups the results by 'ShipVia' to calculate the total sales for each shipping method.",
            "The SQL query correctly retrieves the OrderID for orders where the RequiredDate is earlier than the OrderDate. The query is correct and adheres to the given business question.",
            "The SQL query correctly calculates the average discount rate for each product by grouping the results based on ProductID. The syntax and logic are appropriate for the given schema.",
            "The SQL query is correct. It retrieves the EmployeeID with the highest number of orders by counting OrderID for each EmployeeID, grouping by EmployeeID, and ordering the results in descending order, limiting to the top result.",
            "The query is correct. It accurately computes the total revenue per customer using the specified formula and joins.",
            "The query is mostly correct, but it should use 'United States' instead of 'USA' for the country name, as per the schema definition.",
            "The SQL query correctly calculates the number of orders per customer and retrieves the customer with the most orders using GROUP BY, ORDER BY, and LIMIT.",
            "The original query checked for RequiredDate being NULL, which is incorrect based on the question. The correct check is that ShippedDate is not NULL and ShippedDate is before RequiredDate, indicating the order has shipped but not yet delivered by the required date.",
            "The SQL query is correct. It properly joins the 'customers', 'orders', and '[Order Details]' tables to calculate total spending per customer. The calculated total is then ordered in descending order and limited to the top 5 customers.",
            "The SQL query correctly identifies the products by counting their occurrences in the [Order Details] table and ordering them by frequency in descending order. It is accurate as per the business question.",
            "The original query used WHERE inside COUNT, which is incorrect. It should use CASE WHEN to apply conditions within the COUNT function. Also, NULLIF is used to avoid division by zero.",
            "The SQL query correctly identifies customers with more than 5 orders by joining the 'customers' and 'orders' tables, grouping by 'CustomerID', and using the HAVING clause to filter customers based on the count of their orders. The query outputs the CustomerID of customers who have placed more than 5 orders. It accurately resolves the business question.",
            "The query is correct. It selects regions and counts the distinct number of customers in each region, grouping by region and ordering by the count in descending order.",
            "The SQL query is correct. It joins the 'customers' and 'orders' tables on 'CustomerID' and filters orders placed in June 2023 by extracting the month and year from 'OrderDate'.",
            "The provided SQL query is mostly correct. However, it should use the full table references for 'orders' and '[Order Details]'. The query correctly calculates the total order value grouped by shipping country. The original query uses shorthand aliases without declaring them, which may cause confusion. Ensure consistency with the rest of the schema by using full table references.",
            "The SQL query correctly selects the shipping method that appears most frequently in the 'orders' table. It groups by the 'ShipVia' column, counts each group, and orders them in descending order to get the most common method, limiting the result to one row. The query is accurate based on the provided question.",
            "The original query uses a hard-coded month and year which may not reflect the 'last month' dynamically. Changed the query to dynamically calculate last month based on the current date.",
            "The provided SQL query correctly calculates the average number of products per order. It first calculates the count of products in each order, then takes the average of those counts.",
            "The original query needs to count distinct OrderID to ensure each order is only counted once if it has any discounted line items.",
            "The SQL query is correct. It joins the 'customers' and 'orders' tables on 'CustomerID' and correctly uses aggregate functions MIN and MAX to find the earliest and latest order dates for each customer, grouping by 'CustomerID'.",
            "The query correctly finds customers who have never placed an order by using a subquery to find all unique CustomerIDs from the 'orders' table and filtering the 'customers' table for CustomerIDs not in that list. The query is accurate and follows ANSI SQL standards.",
            "The SQL query correctly answers the question by joining customers and orders tables on CustomerID, grouping by CustomerID, counting the number of orders, and ordering by the order count in descending order. It limits the result to 1 to find the customer with the highest number of orders. The query is correct and does not require changes.",
            "The SQL query is correct. It selects customers who have placed orders more than five times by joining the 'customers' and 'orders' tables, grouping by 'CustomerID', and using a HAVING clause to filter those with more than five orders.",
            "The SQL query is correct. It calculates the sales revenue for each product and orders them in descending order, limiting the result to the top 10 products.",
            "The SQL query is correct. It selects the countries and counts the number of customers from the 'customers' table, groups the results by country, and orders them in descending order by the customer count.",
            "The SQL query correctly computes the total freight cost for each shipping method by grouping the orders by the 'ShipVia' column and summing the 'Freight' column. It is accurate and aligns with the business question.",
            "The SQL query is correct as it calculates the average difference between the 'ShippedDate' and 'OrderDate'. It also correctly filters out any orders where the 'ShippedDate' is NULL, as these would not have been shipped.",
            "The query correctly aggregates the number of new customers on a monthly basis, assuming 'new customers' are those who placed an order for the first time in each month. However, the concept of 'new customers' may require additional filtering to identify customers whose first order is in the specified month. Without additional tables/fields to track 'first-order' status, the query considers all customers placing orders in a given month as 'new', which may not be accurate.",
            "The SQL query is correct. It calculates the percentage of orders shipped late by dividing the number of late shipments by the total number of orders and multiplying by 100. This matches the business question.",
            "The SQL query correctly calculates the total discount across all orders by multiplying the unit price, quantity, and discount for each order detail. No changes are needed.",
            "The SQL query correctly identifies the city with the highest order volume by counting the number of orders for each city, grouping by ShipCity, ordering by the count in descending order, and limiting the result to the top city. It is syntactically and logically correct according to the database schema and the business question.",
            "The SQL query correctly calculates the Customer Retention Rate for the past quarter using the provided dates. It appropriately uses subqueries to determine the count of distinct customers for the specified periods.",
            "The SQL query is correct. It correctly selects the quantity and counts the frequency from the '[Order Details]' table, groups the results by quantity, and orders by frequency in descending order.",
            "The query is correct. It joins the necessary tables and correctly calculates the total order value for each customer, groups by CustomerID, and orders the results to return the top 5 customers by total order value.",
            "The SQL query correctly calculates the total revenue by region and orders the results to find the region with the highest revenue. The query properly uses a JOIN between 'orders' and '[Order Details]' and computes the revenue as specified by the provided formula. The ORDER BY and LIMIT clauses accurately address the requirement to find the top revenue-generating region. The query is correct.",
            "The query correctly calculates total discounts by multiplying the unit price, quantity, and the discount before summing them. It also orders the results by the highest total discount and limits the output to the top five customers. The logic in the query aligns with the business question.",
            "The SQL query correctly counts the occurrences of each ContactTitle, groups by ContactTitle, and orders the results by frequency in descending order. The LIMIT 1 clause ensures that only the most frequently occurring title is returned. No changes are needed.",
            "The SQL query is correct and accurately calculates the total revenue generated from each customer over time by joining the relevant tables and correctly applying the formula for Customer Lifetime Value.",
            "The SQL query is correct. It accurately counts the number of distinct products ordered by each customer by joining the customers, orders, and [Order Details] tables and grouping by CustomerID.",
            "The SQL query is almost correct, but it needs to use 'SELECT DISTINCT ProductID, Discount' to ensure unique products are considered if duplicates exist. Additionally, check that 'LIMIT 5' is supported by your SQL dialect. If not, use alternatives such as 'FETCH FIRST 5 ROWS ONLY'.",
            "The SQL query correctly calculates the Customer Lifetime Value as defined by the metric. The JOIN operations between tables are accurate, and the GROUP BY and ORDER BY clauses are used correctly to achieve the desired output. No changes are necessary.",
            "The SQL query correctly calculates the most common shipping country by counting the number of orders per shipping country, ordering by the count in descending order, and limiting the result to the top entry. The query is correct as per the given question.",
            "The SQL query is mostly correct but to avoid ambiguity, ensure that the GROUP BY clause uses the same expressions as the SELECT clause.",
            "Corrected the use of inline conditional logic (CASE WHEN) for counting distinct returning customers in the specified period. The WHERE clause for the second count is adjusted to include the whole dataset prior to the last month.",
            "The SQL query correctly identifies the city with the highest number of orders. It successfully joins the customers and orders tables using CustomerID, groups by City, and orders by the count of orders in descending order, limiting the result to the top entry.",
            "The query calculates the average discount per line item, not per order. To find the average discount per order, you need to group by OrderID and then calculate the average of those averages. Here's how you can do it:\n\nSELECT AVG(OrderDiscount) AS AverageDiscount FROM (\n    SELECT OrderID, AVG(Discount) AS OrderDiscount\n    FROM [Order Details]\n    GROUP BY OrderID\n) AS OrderDiscounts;",
            "The SQL query is correct. It selects the ProductID and counts the number of orders where a discount is applied, grouping by ProductID, and orders the results by the order count in descending order.",
            "The query correctly calculates the total revenue by city using a SUM over the product of UnitPrice, Quantity, and a discount factor for each order detail. It groups and orders by ShipCity and returns the top 10 cities with the highest revenue, which aligns with the business question.",
            "The SQL query correctly calculates the total order quantity for each shipping region and selects the top 3 regions with the highest total quantity. No correction needed.",
            "The query is correct. It selects customers whose CustomerID is not present in the set of customers who have placed orders in the past year.",
            "The query is correct in terms of calculating total revenue by region based on the shipping region. It correctly joins the 'orders' and '[Order Details]' tables and groups the results by 'ShipRegion'.",
            "The original query groups by CustomerID and attempts to find the earliest order per customer, then orders the result to get the absolute earliest order. However, to directly find the customer who placed the earliest order, we compare the OrderDate directly to the minimum OrderDate found in the subquery without grouping.",
            "The SQL query correctly calculates the percentage of orders for each shipping method by dividing the count of orders for each shipping method by the total number of orders, and it multiplies by 100 to express it as a percentage.",
            "The SQL query is correct. It calculates the average number of days between the OrderDate and ShippedDate for orders that have been shipped.",
            "The SQL query correctly identifies the customer who has placed the most orders by counting the number of orders each customer has made and sorting them in descending order. The LIMIT 1 clause ensures that only the top result is returned. The query is accurate given the business question.",
            "The SQL query is correct. It calculates the average order value by first computing the subtotal for each order, taking into account the unit price, quantity, and discount, and then averaging these subtotals.",
            "The SQL query is correct. It selects the ProductID and calculates the total quantity ordered for each product. The results are grouped by ProductID and ordered by the total quantity in descending order.",
            "The original query calculates the average quantity per order detail line, rather than the average number of items per entire order. The corrected query groups the order details by OrderID to sum the quantities for each order, then calculates the average of these sums across all orders.",
            "The query correctly calculates the Customer Lifetime Value by summing up the revenue generated per city. The use of JOIN operations between the 'customers', 'orders', and '[Order Details]' tables is appropriate, and the GROUP BY c.City accurately groups the results by city. The final sort order by CustomerLifetimeValue is also correct to identify the cities with the highest values. No corrections are needed.",
            "The SQL query is correct. It accurately computes the average freight cost grouped by shipment method (ShipVia) from the orders table using the AVG aggregation function.",
            "The SQL query correctly calculates the customer retention rate for the last year by using nested queries to find distinct customers active in the last year compared to those who were active before the last year. Ensure 'CURDATE()' matches your database's current date function.",
            "The original query is mostly correct, but to avoid duplicating pairs (e.g., (A, B) and (B, A)), use od1.ProductID < od2.ProductID instead of od1.ProductID != od2.ProductID.",
            "The original query incorrectly uses a subquery to count shipped orders for each customer. Instead, we can use a LEFT JOIN to achieve this, ensuring we handle any potential division by zero issues by multiplying by 1.0 to convert to a decimal, which maintains precision in the ratio.",
            "The SQL query correctly counts the number of customers in each region by grouping the results based on the 'Region' column.",
            "The original query does not filter for the last year. Added a WHERE clause to filter orders from the last year using DATEADD function.",
            "The SQL query is correct. It selects the EmployeeID and counts the number of orders handled by each employee, then orders the result by the number of orders in descending order.",
            "The original query is overly complex and incorrectly calculates the repeat customer revenue. The corrected query uses a subquery to determine the number of orders per customer and applies a condition directly to each order's contribution to revenue in the main query.",
            "The SQL query is correct and accurately answers the business question by counting the number of orders for each customer.",
            "The original query is mostly correct but needs slight adjustment in the subquery's joins and alias references to maintain consistency. The rewritten query correctly calculates the average order value and returns the customer with the highest value.",
            "The SQL query is correct. It selects ShipCountry and counts OrderID grouped by ShipCountry, orders by the count in descending order, and limits the result to the top three countries.",
            "The SQL query is correct. It joins the 'customers' and 'orders' tables on 'CustomerID', counts the number of orders for each customer, groups the results by 'CustomerID', and orders them in descending order based on the count.",
            "The SQL query is correct. It uses a LEFT JOIN to include all customers and checks for orders that don't exist using the condition 'WHERE o.CustomerID IS NULL'. This correctly identifies customers who have never placed an order.",
            "The provided SQL query correctly calculates the revenue for each customer by joining the 'customers', 'orders', and 'Order Details' tables. It groups by CustomerID and orders the results by the calculated total revenue in descending order, limiting the results to the top 5 customers. The query is correct and meets the business question requirements.",
            "The original query is mostly correct, but for ANSI SQL compliance, the DATE_FORMAT function should be replaced with another method. The corrected query uses standard SQL to extract year and month using the EXTRACT function.",
            "The SQL query correctly calculates the total revenue generated by each product using the formula: SUM(UnitPrice * Quantity * (1 - Discount)). It then orders the results by TotalRevenue in descending order and limits the output to the top product. The query is correct and aligns with the business question.",
            "The original SQL query is correct for the given question. It calculates the average discount across all order details.",
            "The query correctly selects the city and counts the number of customers, groups by city, orders by customer count in descending order, and limits the results to the top 3. It accurately answers the business question with no errors.",
            "The SQL query correctly counts the number of orders shipped late by comparing the ShippedDate to the RequiredDate. The date range specified in the query corresponds to the entire month of September 2023, which correctly covers the 'last month' if the current month is October 2023.",
            "The query calculates the average quantity per 'line item' in the [Order Details] table, not per order. To find the average quantity per order, you would need to group by OrderID first.",
            "The SQL query correctly calculates the total freight cost per country by grouping the orders by 'ShipCountry' and summing the 'Freight' values.",
            "The SQL query is correct. It correctly aggregates the orders by the shipping method ('ShipVia') and counts the number of orders for each method. It then orders the results in descending order based on the count and limits the output to the top result, showing the most preferred shipping method.",
            "The original query does not consider that an order might be counted multiple times if it has multiple line items with discounts over 10%. The corrected query uses DISTINCT to ensure each order is counted only once, even if it has several discounted items.",
            "The original query lacked filtering for the last quarter. Added a WHERE clause to filter orders within the last quarter using DATEADD function.",
            "The SQL query is correct for the given question. It correctly counts the distinct ProductIDs from the [Order Details] table, which answers the question of the total number of distinct products sold.",
            "The SQL query correctly retrieves the top 3 employees with the most orders handled. It groups by EmployeeID, counts the orders, orders the result in descending order, and limits the output to 3.",
            "The SQL query is correct. It selects the customers who have shipments to more than one distinct country by using GROUP BY on CustomerID and applying HAVING with COUNT(DISTINCT ShipCountry) > 1.",
            "The original query does not restrict the data to the past year. Added WHERE clause to filter records from the past year and used TO_CHAR for date formatting.",
            "The query correctly finds customers who made purchases in both January and February by joining the orders table on CustomerID and filtering by month. It uses distinct to ensure each customer is only listed once.",
            "The query is correct. It properly joins the 'customers' table with the 'orders' table using 'CustomerID', counts the orders for each customer, groups by 'CustomerID', orders them by the count in descending order, and limits the results to the top 5.",
            "The original query incorrectly uses DISTINCT and lacks a GROUP BY clause necessary for aggregation. It should aggregate by product and order by the total quantity ordered.",
            "The original query incorrectly joins the 'orders' table with 'customers' to group by customer country. However, the question specifies grouping by 'ShipCountry' from the 'orders' table. The corrected query uses 'ShipCountry' for both the SELECT and GROUP BY clauses.",
            "The SQL query correctly computes the total revenue for each product by multiplying the unit price by the quantity and adjusting for any discount. The query then orders the results by total revenue in descending order and limits the output to the top result, which directly answers the business question. The query appears to be accurate and correctly formatted.",
            "The original query incorrectly multiplies the Discount by the UnitPrice and Quantity before summing. The discount should be applied as a percentage of the total price, so the calculation needs to multiply UnitPrice and Quantity first, then multiply by Discount to get the total discount amount.",
            "The original query is missing a join with the customers table to correctly associate CustomerID with the discount data. The corrected query includes a join with the customers table.",
            "The SQL query is mostly correct, but the function DATE_SUB should be replaced with the ANSI SQL equivalent, which is CURRENT_DATE - INTERVAL '6' MONTH.",
            "The query correctly calculates the total revenue by region by summing the product of UnitPrice, Quantity, and the discount factor from the [Order Details] table. It joins the customers, orders, and [Order Details] tables appropriately and groups by the Region column, then orders the results by TotalRevenue in descending order and limits the output to the top entry which signifies the region with the highest revenue. The query is correct as per the given schema and business question.",
            "The query is correct. It accurately counts the number of orders placed by each employee using a GROUP BY on EmployeeID.",
            "The query is correct as it calculates the average difference in days between the order placement date and the shipping date for orders that have been shipped.",
            "The SQL query calculates total sales value per product, not per product category. To get the total sales value per product category, a join with the 'categories' table is required. Assuming a 'categories' table exists with 'CategoryID' and 'CategoryName':\n```sql\nSELECT categories.CategoryID, categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SalesValue \nFROM [Order Details]\nJOIN products ON [Order Details].ProductID = products.ProductID\nJOIN categories ON products.CategoryID = categories.CategoryID\nGROUP BY categories.CategoryID, categories.CategoryName;\n```",
            "The query is correct. It groups orders by the day of the week, counts the number of orders for each day, orders them in descending order of their count, and limits the result to the top one day with the highest count.",
            "The original query does not account for the possibility of counting the same OrderID multiple times if there are multiple items with discounts greater than 10% in the same order. Using DISTINCT ensures each OrderID is only counted once.",
            "The SQL query is correct for the given question. It retrieves customers who are from a specific country and have placed orders.",
            "The SQL query is correct for the given business question. It joins the 'orders' and 'customers' tables and counts the number of orders where the customer's city matches the specified city.",
            "The query accurately answers the question by aggregating product orders and sorting them by descending order of quantity.",
            "The SQL query is correct. It calculates the average discount from the [Order Details] table.",
            "The SQL query is correct. It correctly counts the orders where the ShippedDate is null, indicating the orders have not been shipped yet.",
            "The SQL query correctly calculates the total freight cost by summing the Freight column in the orders table. No changes are needed.",
            "The original query used DATE_SUB, which is not ANSI SQL. Instead, DATE_TRUNC is used to calculate the start of the current month, and then subtract one month to get the start of the last month. The end date is set as the start of the current month.",
            "The original SQL query uses placeholders 'start_date' and 'end_date' instead of actual date values. Provide actual dates for the past year. Additionally, use NULLIF to avoid division by zero.",
            "The SQL query is correct. It selects the Region and counts distinct CustomerID values from the customers table, grouping the results by Region and ordering them by the count of unique customers in descending order.",
            "The SQL query correctly identifies the most popular shipping method by counting the number of shipments for each method and ordering them in descending order, then limiting the result to the top one. The query is correct and uses appropriate SQL syntax.",
            "The initial query only selected the OrderID of delayed shipments, but did not count them. The revised query includes a COUNT() function to accurately answer the question about the number of delayed shipments.",
            "Correct. The query accurately calculates the total quantity sold for each product by grouping the 'Order Details' table by 'ProductID'.",
            "The original query incorrectly checks for the current year. It should check for the previous year using YEAR(CURRENT_DATE) - 1.",
            "The original query does not account for calculating averages per order. By joining the [Order Details] table with the orders table using OrderID, we ensure that the average is correctly computed per order.",
            "The query is correct but could be made more precise by including 'Region' explicitly in the GROUP BY, as it is in the SELECT statement. The logical flow matches the schema and question requirements.",
            "The SQL query correctly calculates the total amount of discounts given per customer by joining the customers, orders, and [Order Details] tables on the appropriate keys and summing up the discounts.",
            "The original query incorrectly uses MAX() which gives the maximum discount per order, but not the single highest discount across all orders. The corrected query finds the OrderID(s) with the highest discount applied across all order details.",
            "The original query uses OrderDate instead of ShippedDate. The question specifies orders 'shipped' in January, so the correct filter should be on ShippedDate.",
            "The query correctly counts the number of orders shipped to each country during the last quarter of a generic year. Ensure you replace 'YYYY' with the actual year before execution.",
            "The SQL query correctly answers the business question. It selects the ProductID and counts the number of times each product is ordered with a discount. The results are grouped by ProductID and ordered in descending order according to the count. The use of the WHERE clause to filter for discounts greater than 0 is appropriate.",
            "The SQL query correctly calculates the total sales for each product by summarizing the revenue generated from the order details based on product IDs. The use of GROUP BY ProductID and the calculation of SUM(UnitPrice * Quantity * (1 - Discount)) align with the requirement to compute total sales per product. No corrections are needed.",
            "The SQL query correctly computes the Customer Lifetime Value by calculating the total revenue for each customer using the provided formula and then selecting the top 5 customers by this value. The usage of JOINs and the GROUP BY clause is appropriate, and the LIMIT clause is correctly used to filter the top 5 customers.",
            "The SQL query is correct. It selects the shipping method (ShipVia) and counts the number of times (OrderID) each method is used, grouping by ShipVia and ordering the results by the count in descending order.",
            "The SQL query is correct. It calculates the average discount from the [Order Details] table, which is aligned with the question.",
            "The query is incorrect. The interval addition should use the 'DATE' manipulation, not 'INTERVAL'. Correct query: SELECT OrderID FROM orders WHERE ShippedDate > DATE_ADD(RequiredDate, INTERVAL 7 DAY);",
            "The original query had syntax errors in the COUNT function and didn't handle division by zero. I corrected it by using CASE expressions within COUNT and added NULLIF to prevent division by zero.",
            "The SQL query is syntactically correct for the business question provided. It correctly calculates the total sales per region by joining the necessary tables (customers, orders, and [Order Details]) and grouping the results by the 'Region' column. It then orders the results by TotalSales in descending order. No changes needed.",
            "The SQL query correctly retrieves the list of customers with their total number of orders. The LEFT JOIN ensures that all customers are listed, even those with no orders, and COUNT(orders.OrderID) correctly counts the orders for each customer. The query is accurate as written.",
            "The SQL query correctly calculates the monthly sales by joining the 'orders' and '[Order Details]' tables, extracting the year and month from 'OrderDate', and aggregating the sales with SUM. It then orders the results to find the highest sales month and limits the output to one row. The query is correct.",
            "The query correctly calculates the number of orders per employee and retrieves the employee with the most orders by grouping by EmployeeID, counting OrderID, and ordering by the count in descending order. Using LIMIT 1 ensures only the top result is returned. The query is correct.",
            "The original query does not retrieve the customer associated with the highest single order value. By joining the [Order Details] with the orders table using OrderID, we can select the CustomerID along with the order and its value.",
            "The original query was missing an alias for the subquery and did not count the customers. Used HAVING clause for filtering within subquery.",
            "The query calculates the total quantity for each product, not for each product category. Ensure there is a 'Product Category' to calculate this correctly. If 'Product Category' was intended, the current schema does not support it. Please verify the schema or clarify the requirement.",
            "The query is correct. It joins the 'customers' and 'orders' tables using 'CustomerID', filters orders placed in 2022 using the 'YEAR' function, and groups the results by 'CustomerID' to count the number of orders per customer.",
            "The provided SQL query correctly calculates the total revenue generated by each customer using a JOIN operation across the 'customers', 'orders', and 'Order Details' tables. It sums up the revenue for each customer's orders after applying the discount. The query then orders the results by TotalRevenue in descending order and limits the output to the top 5 customers. The query is correctly structured and accomplishes the intended business question.",
            "The SQL query is correct. It accurately calculates the total freight cost for orders shipped to Germany by summing the 'Freight' column for rows where 'ShipCountry' is 'Germany'.",
            "The SQL query is correct. It counts the number of orders where the shipped date is later than the required date, indicating a delay.",
            "The SQL query accurately answers the business question by selecting the ProductID and summing the Quantity from the [Order Details] table. It then groups by ProductID and orders the results in descending order of total quantity, limiting the result to the top 3. The query is correct.",
            "The original query retrieves all products ordered by each customer with their frequencies, but it doesn't filter out to only show the most frequently ordered product for each customer. The corrected query includes a subquery within the HAVING clause to filter for the product with the maximum frequency per customer. The ORDER BY clause is adjusted to reflect ordering by CustomerID instead.",
            "The SQL query correctly calculates the total revenue for December 2022 by joining the 'orders' and 'Order Details' tables and filtering the orders placed in December 2022. The use of the SUM function with the described formula is appropriate for calculating revenue. However, since ANSI SQL does not directly support MONTH or YEAR functions, consider an alternative like using the format 'o.OrderDate BETWEEN '2022-12-01' AND '2022-12-31'' for better compatibility.",
            "Corrected to include year in the aggregation to avoid mixing data from different years.",
            "The original SQL query is correct in terms of logic but should use correct table aliasing according to standard SQL guidelines. The corrected query properly maintains the table name within brackets.",
            "The original query incorrectly lists customers who have orders older than one year and orders within the last year. The corrected query ensures it only lists customers who have not placed any orders in the last year by using GROUP BY and HAVING to filter based on the maximum OrderDate.",
            "The original query had incorrect syntax for conditional counting. This corrected version uses CASE statements to count customers conditionally. NULLIF is used to avoid division by zero errors.",
            "The original query assumed a 'DateRegistered' column, which doesn't exist in the 'customers' table. Instead, to determine new customers, join 'customers' and 'orders' tables on 'CustomerID' using 'OrderDate' for the registration month.",
            "The original query calculates the order value for each line item, but to get the total order value per order, a SUM and GROUP BY are needed to aggregate the order values by OrderID.",
            "The SQL query is correct. It calculates the duration between the first and last order for each customer and orders them in descending order to find the customer with the longest duration, limiting the result to one customer.",
            "The query is correct. It selects the region and counts the number of customers in each region, grouping by the Region field from the 'customers' table.",
            "The query calculates revenue per ProductID, not per product category. Assuming product categories are tracked in a 'products' table with a 'CategoryID' column, join with 'products' table and group by 'CategoryID'. Adjusted query: SELECT p.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.CategoryID ORDER BY Revenue DESC LIMIT 1;",
            "The query is correct as per the defined metric for calculating 'Customer Lifetime Value'. It correctly joins the necessary tables and applies the formula by grouping the results by 'CustomerID'. The results are ordered by 'LifetimeValue' in descending order, which is also appropriate.",
            "The SQL query is correct. It accurately calculates the total number of customers in each country by counting CustomerID and grouping by Country.",
            "The original query lacked the join between the 'orders' and 'customers' tables. Added this join to correctly compute the average order value for each customer.",
            "The SQL query is correct. It selects the ProductID and sums the Quantity from the [Order Details] table, grouping by ProductID. It orders by the total quantity in descending order and limits the result to 1, which identifies the most ordered product.",
            "The query correctly counts the number of orders per CustomerID and orders the results in descending order to find the customer with the most purchases. The use of LIMIT 1 ensures that only the top result is returned. The query is correct.",
            "The query is correct and follows the given formula for Customer Lifetime Value. It joins the 'customers', 'orders', and '[Order Details]' tables correctly and calculates the total sales revenue for each customer using the provided formula. No changes are needed.",
            "The SQL query correctly identifies customers who have not placed any orders by using a LEFT JOIN between the 'customers' and 'orders' tables and filtering for records where 'OrderID' is NULL. No changes needed.",
            "The SQL query is correct. It selects the Region and counts distinct CustomerID values, groups by Region, orders by the count in descending order, and limits the result to the top one region.",
            "The SQL query is correct. It calculates the average value of all orders by joining the 'orders' and '[Order Details]' tables, and correctly applies the formula for order value.",
            "The SQL query correctly calculates the Customer Lifetime Value by joining the 'customers', 'orders', and '[Order Details]' tables, grouping by 'CustomerID', and ordering by the calculated LifetimeValue in descending order to get the top 5 customers.",
            "The SQL query is correct. It correctly counts the total number of orders grouped by the shipping country, which answers the business question.",
            "The SQL query correctly identifies the most frequently ordered product by counting the occurrence of each ProductID in the [Order Details] table, grouping by ProductID, and ordering the result in descending order. The LIMIT 1 ensures that only the product with the highest frequency is returned. The query is correct and follows ANSI SQL standards.",
            "Corrected query to use DISTINCT to ensure each customer is listed only once.",
            "The SQL query correctly calculates the total freight cost per shipping city. No changes necessary.",
            "The SQL query correctly lists all orders that have not been shipped by checking for NULL values in the ShippedDate column.",
            "The provided SQL query correctly joins the 'customers', 'orders', and '[Order Details]' tables and calculates the total order quantity for each customer. It uses GROUP BY to aggregate the quantities by CustomerID, and orders the results to return the customer with the highest total quantity. The query is syntactically and logically correct.",
            "The original query used integer division which would result in zero due to rounding. To correct this, one of the numbers should be casted to a decimal type or multiplied by 100.0 to ensure floating point division. Also, ensure the comparison logic is correctly stating ShippedDate <= RequiredDate for on-time orders.",
            "The current query does not correctly identify new customers. To determine 'new' customers, you must first identify customers who have placed their first order within the specified month. This can be achieved by determining the earliest order date for each customer and checking if it falls within the month being considered. Here's a corrected query:\n\n```\nSELECT EXTRACT(MONTH FROM FirstOrderDate) AS Month, COUNT(CustomerID) AS NewCustomers\nFROM (\n    SELECT CustomerID, MIN(OrderDate) AS FirstOrderDate\n    FROM orders\n    GROUP BY CustomerID\n) AS first_orders\nWHERE EXTRACT(YEAR FROM FirstOrderDate) = 'year' AND FirstOrderDate >= 'start_date'\nGROUP BY Month\nORDER BY NewCustomers DESC\nLIMIT 1;\n```\n\nMake sure to replace 'year', 'start_date', and other placeholders with actual values.",
            "The original query calculates retention rate using a division, which can result in division by zero if there are no customers in the previous period. Using COALESCE handles this by providing a default value of 1. Additionally, 'DATE_TRUNC' is used to ensure correct month calculations.",
            "The SQL query correctly calculates the average shipping time by country. It groups the data by ShipCountry and computes the average number of days between the OrderDate and the ShippedDate, ensuring ShippedDate is not null.",
            "The SQL query correctly calculates the product with the highest average unit price. It aggregates data by ProductID, calculates the average UnitPrice, orders the results in descending order by average price, and limits the output to one row. The query is correct and follows ANSI SQL standards.",
            "The SQL query is correct. It retrieves customers along with the maximum discount they have received, sorting the results in descending order by the discount value.",
            "The SQL query correctly calculates the revenue lost due to discounts for each product by multiplying the unit price, quantity, and discount, then summing these values for each product. The query groups by ProductID and orders the results by RevenueLost in descending order. No corrections needed.",
            "The SQL query correctly answers the business question by counting the number of orders for each ShipCountry and then ordering the results to find the country with the highest count. The LIMIT 1 ensures only the top result is returned. The query is accurate and follows the ANSI SQL standard.",
            "The original query mistakenly groups by 'City'. It should specify 'c.City' to align with the selected column alias. The corrected query is now accurate.",
            "The SQL query is correct. It accurately calculates the average freight cost per order from the 'orders' table.",
            "The given query was almost correct but used `LIMIT 3`, which is not part of standard ANSI SQL. I replaced it with `FETCH FIRST 3 ROWS ONLY` to comply with the ANSI SQL standard.",
            "The original query checks for orders where the discount is zero or null, which could incorrectly include customers who have had orders with discounts. The corrected query uses a GROUP BY and HAVING clause to identify customers who have never received a discount, ensuring we only include fully undiscounted customers.",
            "The provided SQL query is correct. It calculates the average number of orders per customer by first counting the number of orders for each customer and then averaging these counts.",
            "The SQL query is correct. It correctly calculates the customer lifetime value as defined by the sum of the product of unit price, quantity, and discount adjusted for each customer's orders.",
            "The original query incorrectly places the conditions inside COUNT(). Correctly use CASE WHEN to apply conditions separately for each count.",
            "The SQL query is correct for finding the average order size by country. It correctly joins the 'orders' and '[Order Details]' tables on the 'OrderID', calculates the average order size using the formula for each ShipCountry, and groups the results by 'o.ShipCountry'. This matches the business question.",
            "The SQL query is mostly correct, but there's no DATEDIFF function as part of the ANSI SQL standard. We can use instead the equivalent expression using INTERVAL to determine the difference in days. Here is the corrected version of the SQL query:\n\nSELECT c.CustomerID, o.OrderID\nFROM customers c\nJOIN orders o ON c.CustomerID = o.CustomerID\nWHERE o.ShippedDate <= o.OrderDate + INTERVAL '7' DAY;",
            "The SQL query correctly calculates the total discount given for each product by multiplying the quantity, unit price, and discount factor, then aggregating the results by the product ID. The query is correct.",
            "The SQL query is correct. It properly aggregates the total shipping costs by country, orders by the total in descending order, and limits the results to the top five countries.",
            "The SQL query is correct. It joins the 'orders' and 'customers' tables on CustomerID and counts the number of orders where the ShipCountry is not the same as the customer's Country.",
            "The original query incorrectly uses a WHERE clause inside COUNT. Instead, use a CASE statement within COUNT to specify the discount condition properly.",
            "The original query incorrectly calculates the average discount overall rather than per order. The corrected query first calculates the average discount for each order, then averages these results.",
            "The SQL query correctly extracts the month from OrderDate and counts the number of orders for each month. It then orders the months by the number of orders in descending order and selects the top month. The query is appropriate for determining the peak month for order placements.",
            "The original query incorrectly derives regions from 'customers'. It should derive distinct regions from 'orders' to ensure customers have placed orders in all those regions.",
            "The SQL query correctly calculates the total number of customers by country by grouping the 'customers' table by the 'Country' column and counting distinct 'CustomerID's for each country. The query is correct and does not need any changes.",
            "The SQL query correctly calculates the average freight cost by shipping country. The query selects ShipCountry and uses the AVG function on the Freight column, grouping by ShipCountry, which aligns with the business question.",
            "The SQL query correctly calculates the total quantity for each product, groups the result by ProductID, sorts the total quantity in descending order, and limits the result to the top 5 products. The query is correct.",
            "The SQL query is correct as it correctly joins the customers, orders, and Order Details tables to calculate the total revenue per customer by multiplying unit price, quantity, and considering the discount. The group by clause correctly groups the results by CustomerID.",
            "The SQL query correctly calculates the average discount for all orders using the [Order Details] table. No changes needed.",
            "The original query uses 'MONTH()' function which is not standard ANSI SQL. Instead, 'EXTRACT(MONTH FROM OrderDate)' should be used to extract the month. Additionally, 'LIMIT' is not ANSI SQL standard, so 'FETCH FIRST 1 ROW ONLY' should be used.",
            "The query is correct. It correctly selects the highest freight charges for each country by grouping by 'ShipCountry' and using 'MAX' on the 'Freight' column.",
            "The SQL query is correct. It groups orders by 'ShipCity' and counts the number of 'OrderID' for each city to find the most common shipping city, then orders the result in descending order by 'TotalOrders' and returns the top result with LIMIT 1.",
            "The original query did not group by month and was calculating retention rate over an incorrect period. It should group by truncated order dates to months and ensure calculations are done for each month in the past year.",
            "The SQL query correctly calculates the average order amount by customer region. It joins the customers, orders, and [Order Details] tables and groups the results by customer region. The use of AVG function on the total order amount calculation is appropriate for determining the average. The query is correct as per the given requirement.",
            "The query correctly retrieves all customers located in the specified region. Ensure 'SpecificRegion' is replaced by the actual region name for accurate results.",
            "The provided SQL query correctly calculates the number of unique products ordered in the previous year by selecting distinct ProductIDs from the [Order Details] table for orders placed in 2022.",
            "The SQL query is correct and accurately answers the business question. It counts the number of orders grouped by shipping method where the orders have been shipped.",
            "The original query uses DATEDIFF, which is not part of ANSI SQL. Instead, I've used the JULIANDAY function to calculate the difference between dates in days.",
            "The SQL query is correct. It selects the Country and counts the number of customers for each country, groups by Country, orders the result in descending order by the number of customers, and limits the result to the top 5 countries.",
            "The SQL query is correct as it accurately calculates the total amount spent by each customer and filters those with total spendings greater than $10,000.",
            "The query correctly identifies the most frequently ordered product by counting the occurrences of each ProductID in the [Order Details] table and ordering the results in descending order by frequency. The use of LIMIT 1 ensures that only the product with the highest frequency is returned. The query is correct as per the given requirements.",
            "The SQL query is correct. It joins the 'customers' and 'orders' tables, groups by 'CustomerID', and filters having more than one distinct 'OrderID', which effectively identifies customers with repeat purchases.",
            "The original query incorrectly uses OrderDate instead of ShippedDate, which should be used to determine if an order was shipped in 2022.",
            "The SQL query correctly calculates the total freight cost for each shipping country by summing the 'Freight' column and grouping by 'ShipCountry'. The query is correct and follows the given schema.",
            "The SQL query correctly calculates the average discount applied per order by grouping on OrderID and using the AVG function on the Discount column.",
            "The SQL query is correct. It uses a LEFT JOIN to include all customers and filters out those who have corresponding order records by checking for NULL in orders.OrderID.",
            "The query is correct and matches the definition of Customer Lifetime Value in the provided schema. It appropriately joins the 'customers', 'orders', and '[Order Details]' tables and calculates the total revenue generated from a customer over time by grouping by customers.CustomerID.",
            "The SQL query is correct. It properly calculates the total value of each order after applying discounts and groups the results by OrderID.",
            "The original query does not calculate the retention rate on a monthly basis. The revised query groups the results by month to provide a monthly retention rate for 2023.",
            "The query correctly retrieves the earliest and latest order dates for each customer by grouping the 'orders' table by 'CustomerID' and applying MIN and MAX functions on 'OrderDate'. It is correctly formulated according to the business question.",
            "The query is correct. It accurately counts the number of orders for each customer and ranks them in descending order.",
            "The query correctly calculates the number of distinct products ordered in each country by joining the necessary tables: [Order Details], orders, and customers. The GROUP BY clause is correctly applied to the Country column. Ensure that the table and column names match exactly as defined in the schema, especially for [Order Details].",
            "The query seems correct as it calculates the total revenue generated from orders in 2023 by summing the product of UnitPrice, Quantity, and the discount factor from the [Order Details] table for all orders placed in 2023.",
            "The original query incorrectly attempts to join two overlapping subqueries; it's unnecessary and overly complex. The corrected query uses a single subquery with LAG to calculate gaps within each customer's order history, and finds the maximum gap for each customer, ordering to find the single highest.",
            "The original query counts individual order line items without discounts, which may result in duplicate OrderIDs if an order has multiple items. The corrected query counts distinct OrderIDs where no discount was applied.",
            "The SQL query is correct. It joins the customers and orders tables on CustomerID, counts the number of orders for each country, and groups the results by Country.",
            "The original query attempts to find the product with the highest discount but incorrectly calculates the maximum discount for each product and limits the result. The corrected query finds the maximum discount from all records first and then gets the product(s) corresponding to that discount.",
            "The SQL query correctly answers the question by counting distinct CustomerID values per month and year. It uses the YEAR() and MONTH() functions to extract the year and month from OrderDate and groups the results accordingly.",
            "The SQL query correctly joins the 'customers' and 'orders' tables using a LEFT JOIN, ensuring all customers are included even if they have no orders. It correctly counts the number of orders for each customer using COUNT and GROUP BY. No corrections are needed.",
            "The SQL query correctly uses a LEFT JOIN to find customers who have not placed any orders, as indicated by NULL values in the orders.OrderID field. The query is correct.",
            "The SQL query is correct. The query calculates the Customer Lifetime Value by joining the 'customers', 'orders', and '[Order Details]' tables and summing up the total revenue generated from each customer's orders, accounting for discounts, and grouping by 'CustomerID'.",
            "The SQL query is correct. It correctly selects the ShipCity and counts the number of OrderIDs, grouping by ShipCity to get the number of orders for each city.",
            "The original query syntax is incorrect. The use of the WHERE clause inside COUNT is not valid. I used CASE WHEN to filter conditions appropriately within COUNT, and multiplied by 1.0 to ensure division as a float.",
            "The original query mistakenly calculates the percentage of rows with a discount applied instead of the percentage of orders. The corrected query calculates the percentage of distinct orders that have at least one item with a discount.",
            "The query correctly identifies customers who made orders in January but not in February by using a subquery to exclude those who also ordered in February. Ensure 'start_date_jan', 'end_date_jan', 'start_date_feb', and 'end_date_feb' are replaced with actual dates.",
            "The SQL query is correct. It joins the customers, orders, and [Order Details] tables on the appropriate keys and calculates the average discount per customer using the AVG function, grouped by CustomerID.",
            "The query correctly identifies the product ordered the most by customers in Germany. It properly joins the necessary tables ([Order Details], orders, and customers), filters by Country = 'Germany', groups by ProductID, counts the occurrences to find the most ordered product, and limits the result to 1. No corrections are needed.",
            "The SQL query correctly retrieves the unique number of products each customer has ordered by joining the 'customers', 'orders', and '[Order Details]' tables and counting the distinct ProductIDs for each CustomerID.",
            "The original query does not account for only considering shipped orders. Adding a WHERE clause to filter orders that have a ShippedDate ensures only shipped orders are counted.",
            "The SQL query correctly counts the number of orders handled by each employee, groups the results by EmployeeID, and orders them in descending order to show the employees handling the most orders. The query is correct.",
            "The original query mistakenly divides by the count of distinct years instead of dividing by 12 months. The corrected query divides by 12 to get the average for each month in 2021.",
            "The SQL query correctly calculates the average shipping time per order by using the DATEDIFF function to compute the difference between the 'OrderDate' and 'ShippedDate'. It includes a condition to exclude orders with a NULL 'ShippedDate', ensuring only completed orders are considered. The query is correct and follows the ANSI SQL standard, assuming the DATEDIFF function is supported by the SQL dialect being used.",
            "The original SQL query is mostly correct, but ensure correct table aliasing by specifying orders.OrderDate. Additionally, confirm your SQL engine supports YEAR function; otherwise, use EXTRACT(YEAR FROM orders.OrderDate) or date functions applicable to it.",
            "The SQL query correctly selects customers with more than 5 orders and an average discount of more than 10%. The correct tables and joins are used, and the HAVING clause accurately specifies the conditions needed.",
            "The query is mostly correct in logic, but the aggregation and ordering need to be adjusted. The query calculates total value per shipping region and then orders by the frequency of regions, but it should instead first group by regions, filter on the sum condition, and finally order by the count of orders. The correct query would use subquery or correct aggregation as follows: SELECT ShipRegion FROM (SELECT ShipRegion, COUNT(orders.OrderID) AS OrderCount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion HAVING SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) > 500) AS valid_orders ORDER BY OrderCount DESC LIMIT 1;",
            "The SQL query correctly answers the business question by selecting the City and counting the number of CustomerID entries, grouping by City, and ordering by the count in descending order to get the top 5 cities.",
            "The SQL query is correct and accurately answers the business question by calculating the average discount for each product and ordering the results in descending order to show the highest discount rates first.",
            "The original query uses a non-standard function DATEADD. The corrected query uses standard SQL to subtract one year from the current date and filter the records accordingly.",
            "The query is mostly correct but doesn't account for customers without orders, which could affect the average calculation. Additionally, to include all countries, the query should use a LEFT JOIN. Here's the corrected query:\n\nSELECT c.Country, AVG(COALESCE(o_count.CountOrders, 0)) AS AvgOrders \nFROM customers c \nLEFT JOIN (SELECT CustomerID, COUNT(OrderID) AS CountOrders FROM orders GROUP BY CustomerID) o_count \nON c.CustomerID = o_count.CustomerID \nGROUP BY c.Country;",
            "The original query is incorrect because it uses 'DATEDIFF(day, o.RequiredDate, o.ShippedDate)'. In ANSI SQL, the function 'DATEDIFF' only takes two arguments. The corrected query uses 'DATEDIFF(ShippedDate, RequiredDate)'.",
            "The query is almost correct but needs modification to count each high-value order separately. Use a subquery to filter high-value orders before counting. Corrected query: SELECT c.CustomerID, COUNT(*) AS HighValueOrders FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN (SELECT od.OrderID FROM [Order Details] od GROUP BY od.OrderID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 1000) AS high_value ON o.OrderID = high_value.OrderID GROUP BY c.CustomerID ORDER BY HighValueOrders DESC LIMIT 1",
            "The SQL query correctly calculates the total sales for each region by summing the revenue generated from order details, grouped by region, and orders them in descending order to fetch the top 3 regions. The use of JOIN across the customers, orders, and [Order Details] tables is appropriate. The SQL syntax and logic align well with the business question.",
            "The SQL query correctly calculates the percentage of orders shipped through each shipping method. It uses a subquery to get the total count of orders and divides the count of orders for each 'ShipVia' by this total, multiplying by 100 to get the percentage.",
            "The original query incorrectly calculates the average quantity per line item rather than the average number of products ordered per order. The corrected query first aggregates the sum of quantities for each order and then calculates the average.",
            "The original query used GETDATE(), which is specific to SQL Server. Changed to CURRENT_DATE for ANSI SQL compatibility and used 'FETCH FIRST 1 ROW ONLY' instead of LIMIT for standard compliance.",
            "The original query uses GETDATE() which is SQL Server specific. It has been replaced with CURRENT_DATE for ANSI SQL compatibility. Additionally, the subquery should count distinct orders before the past six months, which was corrected.",
            "The original query uses GETDATE() which is SQL Server specific. Changed GETDATE() to CURRENT_DATE to conform to ANSI SQL. ORDER BY clause adjusted to include 'o.OrderDate IS NULL' in the WHERE condition first to ensure that customers with no orders are included as well.",
            "The provided SQL query is correct. It calculates the total revenue for each product by summing up the (UnitPrice * Quantity * (1 - Discount)) for each product and then orders the results by Revenue in descending order, limiting the output to the top 5 products.",
            "The SQL query is incorrect because the 'employees' table is not part of the provided schema. As such, the query should be adjusted to remove the join with the 'employees' table and simply group by the 'EmployeeID' in the 'orders' table, which is sufficient to determine which employee handled the most orders. Here is the corrected query:\n\nSELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "The original query did not consider grouping discounts per order. The corrected query joins orders to ensure that each discount is associated with a specific order, if needed for further processing. However, the concept of 'per order' implies we might aggregate by OrderID first before averaging, depending on requirements.",
            "The query is correct. It calculates the average order value per region by joining the customers, orders, and order details tables, and grouping by region.",
            "The SQL query is correct. It calculates the average order value for each country by joining the orders and [Order Details] tables on OrderID and grouping the results by ShipCountry.",
            "The provided SQL query correctly calculates the total revenue for each product by summing the product of unit price, quantity, and discount adjustment. It then orders these totals in descending order and limits the result to the top 5 products, which matches the business question.",
            "The SQL query correctly counts the number of orders grouped by the shipping country. It aligns with the business question as it selects 'ShipCountry' and counts 'OrderID' to get the 'OrderCount' for each group. Therefore, no corrections are needed.",
            "The SQL query correctly calculates the average discount from the 'Order Details' table. The JOIN with the 'orders' table, while unnecessary, does not affect the result as it only ensures the existence of matched entries in both tables.",
            "The original query is mostly correct, but for clarity and precision, 'GROUP BY Month' should be replaced with 'GROUP BY EXTRACT(MONTH FROM OrderDate)' to match the SELECT clause expression.",
            "The SQL query is correct and accurately identifies customers with orders where the shipping date is later than the required date.",
            "The original query has syntax errors and logic issues. Use `LEFT JOIN` to ensure we compare the same customers in both parts. Ensure division is numeric by multiplying COUNT by 1.0.",
            "The SQL query correctly calculates the total number of distinct products ordered by each customer by joining the 'customers', 'orders', and 'Order Details' tables and grouping by 'CustomerID'. The use of COUNT(DISTINCT od.ProductID) is appropriate to count distinct products per customer. There are no issues in the query.",
            "The SQL query is correct. It correctly selects the ShipRegion and calculates the total freight cost for each region using the SUM function.",
            "The SQL query correctly identifies the top 3 cities with the highest number of shipping delays by counting orders where the ShippedDate is later than the RequiredDate, grouping by ShipCity, and ordering the results by the count in descending order. The LIMIT 3 clause is used to select the top 3 results. The query appears to be correct and aligns with the business question.",
            "The original query calculates the average quantity per order detail line rather than per order. The corrected query first aggregates the quantities by OrderID, then calculates the average across all orders.",
            "The query correctly calculates the total revenue for orders with more than 5 items. It uses a JOIN between 'orders' and '[Order Details]' tables and applies a HAVING clause to filter orders based on the total quantity, ensuring only orders with more than 5 items are considered.",
            "The SQL query is correct. It groups the orders by EmployeeID, counts the number of orders handled by each employee, and orders the result in descending order to retrieve the employee with the most orders, limiting the result to only one employee.",
            "The original query incorrectly returns customers with orders placed more than a year ago. The corrected query checks for customers with NULL in the OrderID field to find those who haven't placed any orders in the past year.",
            "The SQL query is correct. It calculates the total discount amount for each customer by joining the 'customers', 'orders', and 'Order Details' tables and grouping by 'CustomerID'. The formula uses 'SUM(od.UnitPrice * od.Quantity * od.Discount)' to compute the total discount correctly.",
            "The SQL query is correct and accurately calculates the average discount applied to orders for each customer. The joins between the 'customers', 'orders', and '[Order Details]' tables are correctly implemented, and aggregation with AVG is used properly to calculate the average discount per customer.",
            "The SQL query correctly calculates the number of orders that have been shipped to each country. It selects the 'ShipCountry' and counts the 'OrderID', grouping the results by 'ShipCountry'. The query is correct.",
            "The SQL query is correct. It accurately joins the 'customers' and 'orders' tables on 'CustomerID', and calculates the total freight cost (SUM of Freight) for each customer, grouping by 'CustomerID'.",
            "The SQL query is correct. It correctly joins the 'customers', 'orders', and '[Order Details]' tables and counts the distinct 'ProductID' per 'CustomerID' to answer the question.",
            "The original query is mostly correct, but the use of 'LIMIT' isn't ANSI SQL standard. Instead, 'FETCH FIRST 5 ROWS ONLY' is used to limit the results to the top 5 products.",
            "The original query only counts distinct customers by month but does not specifically determine if they are returning customers. A 'returning customer' typically means the customer has placed an order in a prior month. The revised query includes a CASE statement to check for orders made before the current month.",
            "The query incorrectly uses 'orders.OrderID IS NULL' which will not be effective in determining recent orders. It should properly filter customers by checking if their last order date is more than 6 months ago. A corrected query is: SELECT customers.CustomerID FROM customers LEFT JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID HAVING MAX(orders.OrderDate) < CURRENT_DATE - INTERVAL '6 months' OR MAX(orders.OrderDate) IS NULL;",
            "The SQL query correctly identifies and counts the shipping methods used in the 'orders' table, groups them, and orders by the highest count to determine the most common method. The usage of LIMIT 1 ensures only the most common method is returned. There are no issues with the query.",
            "The SQL query is correct. It calculates the average discount for each product and orders the results to find the product with the highest average discount, returning the top result with LIMIT 1.",
            "The original query computes the average quantity of products across all order details, but the correct interpretation of the question requires computing the average quantity per order. The revised query calculates the total quantity for each order and then computes the average of those totals.",
            "The original query retrieves all orders with shipping delay but does not count them. The corrected query uses COUNT to return the number of delayed orders.",
            "The query correctly identifies the most common customer region by counting the number of customers per region, grouping by region, and ordering the result in descending order. The LIMIT 1 clause ensures only the most common region is returned. The query is correct.",
            "The SQL query is correct. It calculates the total sales for each employee by joining the 'orders' and 'Order Details' tables, then grouping by EmployeeID to sum the sales amount.",
            "The SQL query is correct. It calculates the average order value for each country by joining the orders and [Order Details] tables. The results are grouped by the shipping country and ordered by the average order value in descending order, returning the top result.",
            "The original query correctly identifies customer IDs that have made more than 10 orders, but it doesn't count them. The revised query correctly counts the number of such customers by wrapping the existing query in a subquery and using COUNT(*).",
            "The original query only groups by month, which would combine all years together. To accurately count shipped orders per month for each year, you need to also extract and group by the year.",
            "The SQL query correctly calculates the total number of unique customers by using COUNT(DISTINCT CustomerID) on the 'customers' table.",
            "The SQL query correctly calculates the average freight cost from the 'orders' table. No changes are needed.",
            "The SQL query is correct. It extracts the month from the 'OrderDate' and counts the number of 'OrderID' per month, correctly grouping and ordering by month.",
            "The SQL query is correct and will list all orders where the ShippedDate is after the RequiredDate.",
            "The query correctly calculates the total revenue generated from each country using the given formula for revenue. It joins the 'orders', 'customers', and '[Order Details]' tables appropriately and groups the results by 'Country' to get total revenue per country. Thus, the query is correct.",
            "The original query uses DATE_SUB and CURDATE, which are not ANSI SQL functions. Replaced them with DATEADD and CURRENT_DATE for compliance with ANSI SQL standards.",
            "The SQL query is correct. It counts the distinct number of customers per city, orders them in descending order, and limits the result to the city with the highest count.",
            "The original query is incorrect because it checks the OrderDate instead of the ShippedDate. The corrected query counts orders based on the ShippedDate, as the business question specifies 'shipped last year'.",
            "The main issue with the query is that it does not handle cases where the current quarter is the first quarter of the year. In such cases, QUARTER(CURDATE()) - 1 would result in zero, which is an invalid quarter. Additionally, we must ensure the method to retrieve the data is compatible with the SQL dialect being used, especially for date functions like QUARTER() and CURDATE(). Finally, the query doesn't consider the need for proper parentheses in the WHERE clause conditions. Here's a corrected version:\n\nSELECT SUM(UnitPrice * Quantity * Discount) AS TotalDiscountLastQuarter FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE (QUARTER(OrderDate) = CASE WHEN QUARTER(CURDATE()) = 1 THEN 4 ELSE QUARTER(CURDATE()) - 1 END) AND (YEAR(OrderDate) = CASE WHEN QUARTER(CURDATE()) = 1 THEN YEAR(CURDATE()) - 1 ELSE YEAR(CURDATE()) END));",
            "The logic in the query is correct for identifying customers who have not placed an order this year. The LEFT JOIN and the condition ensuring either no orders or orders not matching the current year effectively filter the desired customers. The condition with `o.OrderDate IS NULL` should be checked first to ensure proper logic flow. As a result, the existing query works well.",
            "The SQL query is correct. It calculates the total quantity for each product and orders the results in descending order to find the product with the highest quantity ordered.",
            "The SQL query is correct and aligns with the business question of calculating the Lifetime Value for each customer. It correctly uses a JOIN between the customers, orders, and Order Details tables, and calculates the sum of the revenue for each customer. The GROUP BY clause is properly applied to group the results by CustomerID.",
            "The query correctly selects OrderID and Freight from the orders table and orders the results by Freight in descending order, limiting the output to the top 10 entries with the highest freight cost. No corrections needed.",
            "The SQL query correctly identifies the employee who handled the most orders by counting the number of orders handled by each employee and returning the employee with the highest count.",
            "The original query correctly calculates the average number of orders per country by aggregating on a subquery that counts orders per customer and country. However, there is a small mistake in terms of how the records are counted. The subquery should first consider counting the `CustomerID` and `OrderID` for correct aggregation and then calculate the average in the outer query.",
            "The SQL query is attempting to calculate the total revenue for each product category. However, the schema provided does not include a 'products' table. Therefore, the JOIN operation and reference to 'p.CategoryID' are incorrect. To fix this, ensure the 'products' table exists with the 'CategoryID' column. If it doesn't, this logic cannot be processed with the current schema.",
            "The original query is mostly correct in logic. However, ANSI SQL does not have a DATEDIFF function defined. A portable way would be to use a system that supports date arithmetic directly if available. If using a system with ANSI SQL support, calculate the difference using a method provided by the specific SQL dialect.",
            "The provided SQL query is correct. It calculates the average discount for each order by grouping on OrderID and applying the AVG function to the Discount column.",
            "The original query is mostly correct but the GROUP BY clause should use only 'Region' without the table alias 'c'. The corrected query reflects this change.",
            "The provided SQL query correctly identifies customers who have ordered more than three times, but it does not return the count of such customers. To achieve the desired result, a subquery is used to find the customers, followed by a SQL query to count them.",
            "The query correctly identifies the day of the week with the highest number of orders using the DAYOFWEEK function to group by and count orders. The ORDER BY and LIMIT 1 are used appropriately to find the peak day. The syntax is accurate and suitable for the question.",
            "The query correctly retrieves the number of orders placed by each customer by grouping the orders based on CustomerID and counting the number of OrderID entries per customer. This matches the business question. The SQL query is correct as is.",
            "The SQL query is correct. It selects the shipping method (ShipVia) and calculates the total freight cost (SUM(Freight)) for each method, grouping results by ShipVia.",
            "The SQL query correctly calculates the total quantity sold for each product and orders the results in descending order to find the product with the highest total sales quantity. The LIMIT 1 clause ensures that only the product with the highest sales is returned. Therefore, the query is correct and matches the business question.",
            "The SQL query is correct. It selects the ShipCountry and counts the number of OrderID entries for each ShipCountry, grouping the results to provide the total number of orders placed in each country.",
            "The SQL query is correct and accurately calculates the average discount applied on all orders by selecting the average from the [Order Details] table.",
            "The original query is mostly correct. I've added the table alias 'orders' before the 'ShipRegion' column to make it clear and precise, following best practices. The logic of the query is accurate, identifying customers who have placed orders in more than one distinct shipping region.",
            "The SQL query is correctly calculating the average order value per customer by joining the 'customers', 'orders', and '[Order Details]' tables. Each customer's average order value is computed by averaging the total value of all their orders, where the value is determined by multiplying the unit price, quantity, and applying any discount. The GROUP BY clause properly groups results by CustomerID to compute the average for each individual customer.",
            "The SQL query is correct. It selects OrderID and Freight from the orders table where the Freight is greater than $100. No corrections are needed.",
            "The original query contains errors in the subqueries within the COUNT function. The correct approach is to use CASE WHEN to calculate counts conditionally and ensure no division by zero using NULLIF.",
            "The SQL query is correct and aligns with the business question. It properly calculates the customer lifetime value using a JOIN between the 'customers', 'orders', and '[Order Details]' tables, aggregates the total value by 'CustomerID', and orders the results to find the top 5 customers by lifetime value.",
            "The SQL query is correct. It accurately counts the distinct ProductID values from the [Order Details] table, which represents the total number of unique products ordered.",
            "The original query doesn't handle integer division correctly, which may result in a zero value if integer division occurs. Casting one of the counts to FLOAT ensures correct floating point division.",
            "The SQL query correctly calculates the total revenue for each shipping country by joining the 'orders' and '[Order Details]' tables and grouping by 'ShipCountry'. The formula for calculating revenue is also correctly applied. No corrections are needed.",
            "The SQL query is correct. It accurately counts the number of customers with the title 'Owner'.",
            "The query correctly identifies orders with a discount greater than 10%. It joins the 'orders' table with the '[Order Details]' table and applies the appropriate condition on the 'Discount' column. The query is correct.",
            "The SQL query correctly selects the ShipCity and counts the number of orders, grouping by ShipCity and ordering by the order count in descending order, limiting the result to the top 3. This query meets the requirements of the business question accurately.",
            "The SQL query correctly groups orders by ShipCity and counts the number of orders for each city. It orders the results in descending order and limits the output to one row, showing the city with the most orders. The query is correct.",
            "The provided SQL query is correct. It accurately identifies the top 5 customers by order count by grouping the orders by CustomerID and ordering the results in descending order based on the total number of orders.",
            "The SQL query correctly calculates the average discount from the 'Order Details' table. No changes are needed.",
            "The SQL query correctly determines the most popular shipping method by counting the number of orders for each ShipVia and ordering the results in descending order to find the top one. No corrections are needed.",
            "The SQL query correctly calculates the Customer Lifetime Value for a specific customer by joining the customers, orders, and [Order Details] tables and applying the correct formula. The WHERE clause filters for the specific customer, and the GROUP BY clause aggregates the results by CustomerID. The query is correct.",
            "The SQL query correctly calculates the total sales revenue for each product by multiplying the UnitPrice by the Quantity for each order detail. It then groups the results by ProductID and orders them in descending order to identify the product with the highest total sales revenue. The LIMIT 1 clause ensures only the product with the highest revenue is returned. The query is correct according to the business question.",
            "The SQL query correctly calculates the average order size in terms of total items by aggregating the quantity of items per order and then averaging these totals.",
            "The query is correctly structured to find the busiest month by extracting the month from the 'OrderDate' and counting the number of orders. It groups the results by month and orders them in descending order, limiting the result to the top entry, which represents the busiest month. No corrections are needed.",
            "Query is correct for calculating the customer with the longest average delivery time. Ensure 'ShippedDate' is not NULL to avoid inaccurate calculations.",
            "The current query identifies the customer who has placed the most orders, which does not directly correspond to the 'highest return rate' as per the customer's returning behavior over specific time periods. Without a clear time frame or comparison to first-time orders, it's difficult to measure a true return rate. The problem lies in the definition of 'return rate' used in this context. If defining 'return rate' specifically refers to frequency of repeated orders overall, the query might suffice, but it lacks context. Typically, retention analysis would compare orders over different periods. If applicable, consider modifying the definition of 'return rate' in light of temporary periods, or ensuring the presence of conditions defining an order as a returning one.",
            "The original query is almost correct. However, `DATE_SUB(CURDATE(), INTERVAL 1 YEAR)` is a MySQL-specific function. In ANSI SQL, you should use `CURRENT_DATE - INTERVAL '1' YEAR`. Also, specifying `HAVING COUNT(OrderID) > 1` ensures only customers with more than one order are counted.",
            "The SQL query correctly calculates the average order value for each country using a subquery. It joins the orders, order details, and customers tables to find the total order value for each order and country. The outer query then calculates the average of these values, groups by country, and orders the results to find the country with the highest average order value. The logic and syntax are correct according to the requirements.",
            "The original SQL query is correct in terms of logic, but in ANSI SQL, double quotes should be used for table names with spaces. Additionally, 'LIMIT' is not part of the ANSI SQL standard; instead, 'FETCH FIRST n ROWS ONLY' is used.",
            "The query correctly counts the number of orders placed in 2022 by filtering the OrderDate column to the year 2022 using the YEAR() function.",
            "The SQL query is correct. It uses a LEFT JOIN to combine customers with orders and filters for customers who have no orders by checking where the OrderID in the orders table is NULL.",
            "The SQL query correctly calculates the total revenue from all orders by joining the 'orders' and '[Order Details]' tables and applying the correct formula for revenue with discounts.",
            "The query correctly computes the total sales for each month in 2022 and orders the result to find the month with the highest sales. It uses appropriate joins and aggregates as per the schema.",
            "The query correctly counts the number of customers in each city as specified in the question. It's accurate and adheres to the provided schema.",
            "The original query only selects from [Order Details], returning only the details where the discount is greater than 0 but doesn't include related order or customer information. The corrected query joins with the orders and customers tables to retrieve OrderID and customer details for orders where a discount was applied.",
            "The original query correctly uses filters to count distinct customers for both the targeted and prior periods. However, it should cast the division to DECIMAL to avoid integer division and handle division by zero using NULLIF.",
            "The SQL query correctly selects the ShipRegion and counts the number of orders for each region, then orders the result by the number of orders in descending order, which matches the business question requirements. No changes are necessary.",
            "The SQL query correctly calculates the average order quantity per product by using the AVG() function on the Quantity column and grouping the results by ProductID. The query accurately reflects the business question.",
            "The original query is correct, but using FETCH FIRST 1 ROW ONLY is more ANSI SQL compliant than LIMIT 1.",
            "The SQL query is correct. It calculates the average number of days between the order date and the shipped date for orders that have been shipped.",
            "The SQL query correctly calculates the average freight cost for each city and orders them in descending order to find the city with the highest average freight cost. The LIMIT 1 clause ensures only the top result is returned. The query is correct and aligns with the business question.",
            "The SQL query is correct. It calculates the difference in total revenue between 2021 and 2022 by using conditional aggregation to sum the revenue for each year and subtracting the 2021 total from the 2022 total.",
            "The SQL query correctly selects the ProductID and the sum of the Quantity ordered for each product, groups the results by ProductID, orders by the descending sum, and limits the output to the top result. The query is correct and adheres to the business question."
        ],
        "difficulty": [
            "easy",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "easy",
            "advanced",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "medium",
            "easy",
            "easy",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "advanced",
            "easy",
            "advanced",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "easy",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "medium",
            "easy",
            "easy",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "easy",
            "easy",
            "easy",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "easy",
            "medium",
            "easy",
            "advanced",
            "easy",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "easy",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "easy",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "easy",
            "advanced",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "easy",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "medium"
        ]
    },
    "Product Analysis": {
        "questions": [
            "What are the total sales for each product?",
            "Which products are currently discontinued?",
            "What is the total inventory value for each supplier?",
            "Which category has the highest number of products?",
            "How many units of each product are currently on order?",
            "Which product has the highest sales volume?",
            "What is the average discount rate given on orders?",
            "Which suppliers have provided products with above average unit prices?",
            "How many different products have been sold in total?",
            "What is the monthly sales revenue for each product?",
            "Which products need to be reordered based on current inventory levels?",
            "How many products have a discount of more than 10%?",
            "What is the total sales revenue for each category?",
            "What is the average quantity per order for each product?",
            "Which products have never been ordered?",
            "How does the inventory turnover ratio vary for each product?",
            "How many products have stock levels below their reorder levels?",
            "Which suppliers provide products with the highest average discount?",
            "What is the total order quantity for each product in the last month?",
            "Which discontinued products have remaining stock?",
            "What is the total quantity of each product sold?",
            "Which product has the highest sales revenue?",
            "How many units of each product are currently in stock?",
            "Which suppliers provide products that are currently out of stock?",
            "What is the average unit price of products per category?",
            "How many discontinued products are still in stock?",
            "What is the inventory turnover ratio for each product?",
            "Which products are below their reorder level and need restocking?",
            "What are the top 5 products with the highest order quantities?",
            "How much revenue is generated from orders with more than 10 units?",
            "Which category of products has the highest average discount applied?",
            "Are there any products that have never been ordered?",
            "What is the average discount given across all orders?",
            "Which suppliers provide the most expensive products on average?",
            "What is the total revenue generated per supplier?",
            "What is the monthly trend in sales quantity for each product?",
            "Which products have received the highest average discount?",
            "How many suppliers supply more than 3 different products?",
            "Which orders had the highest total discount applied?",
            "What is the total potential revenue from products not yet ordered?",
            "What are the top 5 products by sales volume?",
            "Which supplier provides the most expensive product?",
            "What is the average price of products that are not discontinued?",
            "How many products have inventory levels below their reorder level?",
            "Which product has the highest inventory turnover ratio?",
            "What is the total revenue generated by each product?",
            "How many units of discontinued products are still in stock?",
            "What is the discount applied most frequently across orders?",
            "Which category has the highest number of products on order?",
            "What is the average discount applied per product?",
            "How many distinct suppliers are there for products with no units on order?",
            "Which products have a reorder level higher than 100?",
            "What is the total revenue for products provided by each supplier?",
            "Which product experiences the highest average discount?",
            "How many products have been ordered more than 100 times?",
            "Which products have both stock and on-order quantities greater than zero?",
            "What is the total quantity of products sold per month?",
            "How many orders were made for each product on which a discount was applied?",
            "What is the typical quantity per unit across all products?",
            "What are the names and unit prices of all products that are currently in stock?",
            "Which products have the most units on order?",
            "What is the total sales revenue for each product?",
            "Which products have not been ordered at all?",
            "How many distinct products have been discontinued?",
            "What is the average discount given per product?",
            "Identify products that need to be reordered based on the reorder level.",
            "Calculate the monthly product performance based on sales quantities.",
            "Which suppliers provide products with the highest average unit price?",
            "What is the total quantity sold for each category?",
            "What are the top 5 best-selling products by quantity?",
            "Find the least profitable products based on sales minus discounts.",
            "How many products have a unit price higher than the average unit price across all products?",
            "Identify the products that are provided by multiple suppliers.",
            "What is the overall discount given for all orders?",
            "Which products have never been discontinued and are always in stock?",
            "Calculate the total cost of units currently on order for each product.",
            "Determine the top 3 products with the highest reorder level.",
            "How does the sales quantity for a product change each month?",
            "What is the total quantity sold for each product?",
            "Which products have stock levels below their reorder level?",
            "What is the total number of discontinued products?",
            "Which product has the highest unit price?",
            "How many products have a stock level below their reorder level?",
            "What is the average discount offered on products?",
            "List all products that are currently out of stock.",
            "Find the product with the most units on order.",
            "What are the total sales for each supplier?",
            "Calculate the average unit price of all products from each supplier.",
            "Identify products sold with more than 20% discount.",
            "Find the top 5 products based on total quantity sold.",
            "What is the average inventory turnover ratio for each month?",
            "List the products that have never been ordered.",
            "Calculate the total revenue generated by each product.",
            "Identify the suppliers providing more than 5 different products.",
            "What is the total order quantity for each product in January 2023?",
            "Which product has the highest total sales revenue?",
            "Find the average number of units on order per category.",
            "Which supplier has the most discontinued products?",
            "What is the total discount given for each product?",
            "Which products have been discontinued and still have units in stock?",
            "Which supplier provides the highest number of unique products?",
            "What is the average discount applied on all orders?",
            "List the top 5 products by sales revenue.",
            "Calculate the inventory turnover ratio for each product category.",
            "Identify the month with the highest sales volume.",
            "How many products fall in each discount bracket (0-10%, 11-20%, etc.)?",
            "Find the average reorder level for products in each category.",
            "List all products that are currently on order but discontinued.",
            "Determine the total sales revenue by supplier.",
            "Which category has the highest average unit price?",
            "Identify products with the highest variance in monthly sales.",
            "Calculate the total potential revenue for products in stock.",
            "Find the supplier with the best-selling product.",
            "What is the effect of discount on the total sales quantity?",
            "List products that have never been ordered.",
            "Which products have the highest average monthly sales growth?",
            "Assess the impact of discounts on product performance.",
            "What are the top 5 best-selling products in terms of quantity sold?",
            "Which products have a unit price greater than $50?",
            "How many units are currently on order for discontinued products?",
            "Which supplier provides the most number of different products?",
            "What is the total inventory value for each category?",
            "Identify products with sales quantities exceeding their stock levels.",
            "What is the average discount applied to orders for each product?",
            "Which product categories have the highest inventory turnover ratio?",
            "How does the monthly sales performance of products change over time?",
            "List all products that have never been ordered.",
            "How many products need to be reordered in each category?",
            "What are the total sales by supplier and month?",
            "What percentage of products are currently discontinued?",
            "Identify the top 3 products with the highest sales revenue per unit.",
            "What is the average units per order for each product?",
            "Find products that have sales only during specific months.",
            "Calculate the inventory turnover ratio for each product.",
            "What are the least ordered products over the last six months?",
            "How many different suppliers provide products in each category?",
            "Which products are currently out of stock?",
            "What are the total sales for each product in the current month?",
            "Which suppliers provide the most products?",
            "What is the average unit price of products by category?",
            "How many products have been discontinued?",
            "What is the reorder level for products with the highest sales last month?",
            "Which product has the highest number of units on order?",
            "Calculate the total revenue for each product considering discounts.",
            "Find the top 5 products with the highest inventory turnover ratio.",
            "Which category has the most units in stock?",
            "Identify products that need reordering where units in stock are below reorder level.",
            "Determine the total quantity sold for each supplier.",
            "Which product categories have been on order but not yet reached reorder level?",
            "Calculate the monthly product sales performance index.",
            "What is the total discount given for all orders?",
            "Find the revenue impact of the top 3 discounted products.",
            "Analyze the trends of units ordered for each product over the last quarter.",
            "Compute the total inventory value grouped by supplier.",
            "Identify potential supply chain issues by analyzing delayed orders.",
            "Determine monthly trends in inventory turnover ratios.",
            "Which products have not been reordered past their reorder level?",
            "What is the average unit price of discontinued products?",
            "Identify the top 5 products by total sales quantity.",
            "What is the total revenue generated by each category of products?",
            "What is the total discount given across all orders?",
            "Find the product with the highest revenue.",
            "Calculate the inventory turnover ratio for all products.",
            "What is the average discount applied to orders per product?",
            "List all discontinued products with over 100 units in stock.",
            "Find products with total order quantities below a specified threshold.",
            "Calculate the total number of units sold per supplier.",
            "What is the most frequently ordered product?",
            "Compute the average order quantity for each product.",
            "Identify products that need restocking based on their reorder level and units on order.",
            "What is the average revenue per unit for each product?",
            "Identify categories with the highest number of discontinued products.",
            "Calculate the total value of products in stock for each supplier.",
            "What are the top 5 best-selling products by total quantity sold?",
            "Which products have not been sold at all?",
            "What is the total revenue generated from each product?",
            "Which suppliers provide discontinued products?",
            "What are the products with stock levels below reorder levels?",
            "What is the most common discount rate given on products?",
            "Which products have the highest orders on discount?",
            "What is the average unit price of products in each category?",
            "Identify the top 3 products with the highest revenue growth month over month.",
            "What are the products with less than 5 units in stock but more than 10 units on order?",
            "Which products have been consistently ordered every month?",
            "Which supplier has the most diverse product range?",
            "What is the monthly trend in order quantities for each product?",
            "Which categories have products that are all discontinued?",
            "Find all products that have never been discounted.",
            "What is the supplier-wise average unit price of products?",
            "List the products with an average selling price higher than their listed unit price.",
            "Which products have been discontinued?",
            "What is the average inventory level for each product category?",
            "Which supplier provides the most products?",
            "What is the total revenue for each category?",
            "Identify the products that are below their reorder level.",
            "Calculate the average discount given per product.",
            "What is the total number of units ordered for each supplier?",
            "Find products that have never been ordered.",
            "List the monthly sales performance for each product.",
            "Identify the product with the highest sales revenue in the last month.",
            "Calculate the total value of products currently in stock.",
            "What is the average number of units ordered per product?",
            "List the top 3 products with the lowest stock levels.",
            "Identify any products with a unit price exceeding $100 that have not been discontinued.",
            "What is the total sales quantity for each product?",
            "What is the average unit price of all products supplied by each supplier?",
            "Which products have exceeded the reorder level?",
            "Identify products with the highest inventory turnover ratio.",
            "How many units of each product were sold on average per month?",
            "What is the total discount amount applied to each product?",
            "Find the top 5 products with the highest sales revenue.",
            "What is the total number of units on order for each product category?",
            "Identify which products have never been ordered.",
            "What is the average discount given on each product?",
            "Compare the sales performance of all products per quarter.",
            "Calculate the total stock value for each product.",
            "Which categories have the highest number of discontinued products?",
            "Identify suppliers whose products have the lowest average inventory.",
            "Find out the monthly average units in stock for each product.",
            "What is the reorder frequency for each product?",
            "Calculate the total units sold and total discount given per supplier.",
            "Which product has the highest number of units sold?",
            "What is the current stock level of each product?",
            "Identify all products that need to be reordered.",
            "What are the total sales for each product per month?",
            "Which products have less than the reorder level in stock?",
            "Identify the top 5 best-selling products by quantity.",
            "Which suppliers have the most products discontinued?",
            "Calculate the revenue generated by each product category.",
            "What is the average discount offered for each product?",
            "How does the sales volume fluctuate throughout the year for each product?",
            "Find products with zero units on order but high units in stock.",
            "Determine the product with the highest inventory turnover ratio.",
            "List products with the lowest sales performance last month.",
            "How many products have never been ordered?",
            "Identify products with high discounts and low sales.",
            "Compute monthly sales growth rate for each product.",
            "Find the reorder level for the most ordered products.",
            "What is the total revenue lost by discounting products?",
            "Which categories have the highest average unit price?",
            "Find the correlation between units on order and sales.",
            "Analyze the sales trend and predict the next quarter's sales for top products.",
            "Discover products sold in quantities exceeding 1000 units per month.",
            "Which products show a sales drop after a discount is applied?",
            "Which products have sold the most units?",
            "List the discontinued products that still have inventory.",
            "What is the average unit price for products in each category?",
            "Find the top five products by sales revenue.",
            "How many units are on order for each product?",
            "Identify products below their reorder levels.",
            "What is the monthly product performance for each product?",
            "Identify products with the highest unit price that have never been ordered.",
            "Find products with stock levels below the average stock level.",
            "List products that have been ordered more than 100 times.",
            "What is the total value of inventory for each product?",
            "List products with a reorder level higher than units in stock.",
            "Calculate the percentage of discontinued products that still have units in stock.",
            "Identify the top three suppliers based on product count provided.",
            "Find products that have the highest discount applied in orders.",
            "Which suppliers provide products with zero units in stock?",
            "How many discontinued products are still listed?",
            "What is the monthly performance of each product based on sales?",
            "Which products have reorder levels below their current stock levels?",
            "What are the total sales revenue and average discount for each product?",
            "Which products are on order but currently discontinued?",
            "What is the total value of all products currently in stock?",
            "Find products with the highest unit price and lowest quantity in stock.",
            "Which products have never been sold?",
            "Calculate the total number of orders for each product category.",
            "What is the average unit price for products from each supplier?",
            "Which product categories require the most frequent reorders?",
            "Identify the products with the largest discrepancies between units on order and units in stock.",
            "What is the average discount given on orders by product?",
            "Which products contributed to the top 10% of total sales revenue?",
            "Find the product with the maximum quantity ordered at once.",
            "What products have not met their reorder levels in the last month?",
            "Determine the total inventory value per supplier.",
            "Which product has the highest number of units in stock?",
            "Identify products that are below their reorder level.",
            "What is the total order quantity for each product?",
            "Find the top 5 products by sales revenue.",
            "Calculate the monthly sales performance for each product.",
            "List products with a higher price than the average product price.",
            "Which product categories have the highest total order quantity?",
            "Identify the products with the highest discount rate.",
            "Calculate the total inventory value for each product.",
            "Which products have zero units on order?",
            "Find the average discount across all orders.",
            "Identify the top 3 suppliers by total sales revenue.",
            "Which products are sold at a price higher than their unit price in the order details?",
            "What is the average discount applied to products?",
            "Which products have stock below their reorder level?",
            "Calculate the total revenue for each product.",
            "List all discontinued products and their remaining stock.",
            "Identify products with no sales in the last month.",
            "Find the average order quantity per product.",
            "Determine the product with the highest unit price that is still active.",
            "Which supplier provides the most number of products?",
            "Find products with a discount greater than 10% and quantity ordered over 100 units.",
            "Calculate the inventory turnover ratio for each product for the current month.",
            "List products that are below reorder level but have no pending orders.",
            "Determine the total sales generated by discontinued products.",
            "Identify the top 3 products by sales revenue that is still in stock.",
            "What is the average discount given across all products?",
            "Calculate the monthly sales trend of each product for the last year.",
            "Find the total units ordered for products in each category.",
            "Which product has the highest reorder level?",
            "Identify products that are not discontinued but have zero units in stock.",
            "Find the average unit price of products supplied by each supplier.",
            "Determine the total discount value provided for each product.",
            "Which products need to be reordered based on their reorder level and current stock?",
            "What is the total revenue generated for each product?",
            "What is the average discount applied to each product?",
            "What is the total quantity sold for each category of products?",
            "How many discontinued products are there in each category?",
            "What is the highest revenue-generating product category?",
            "Which product has the most units in stock?",
            "Find the top five products with the highest sales volume.",
            "Calculate the monthly product performance for each product.",
            "Identify suppliers with products that have the lowest stock levels.",
            "Find all products with a unit price greater than the average.",
            "What is the total value of products on order for each supplier?",
            "Identify products with a sales price lower than their current order price.",
            "Determine the inventory turnover ratio for each product.",
            "Which products received the highest total discounts?",
            "Calculate the monthly inventory turnover ratio for each category.",
            "What is the total number of units sold for each product?",
            "Which products have a stock level below their reorder level?",
            "How much revenue has each product generated, excluding discounts?",
            "List the products that have been discontinued.",
            "What is the total quantity of products on order for each supplier?",
            "Calculate the inventory turnover ratio for each product on a monthly basis.",
            "Identify the top 5 products by sales quantity.",
            "What is the average unit price of products supplied by each supplier?",
            "Find out the total units in stock for each category.",
            "What is the product performance metric for the last six months?",
            "What is the average product unit price by category?",
            "Determine the total value of discounts applied over all orders.",
            "Identify products with unit prices above the average unit price.",
            "How many distinct products have been sold?",
            "What is the revenue growth compared to the previous month?",
            "Which categories have products with no stock?",
            "How many products have zero units on order and in stock?",
            "Which suppliers are associated with the discontinued products?",
            "What is the average unit price of products in stock?",
            "How many products have a reorder level higher than their units in stock?",
            "Which product has the highest inventory turnover ratio for the past month?",
            "List products with no units on order but have sales in the last month.",
            "What is the total revenue generated by each product this year?",
            "Identify products that have never been ordered.",
            "What is the highest discount applied to any product in the past year?",
            "Which categories are associated with the highest average product price?",
            "How many products have a unit price greater than the average unit price of all products?",
            "Which products have units in stock less than their reorder level?",
            "Who are the top 3 suppliers by the number of active products supplied?",
            "What is the total stock value for each product?",
            "How many products have been ordered more than 1000 times?",
            "Identify the product with the highest sales revenue during the last 6 months.",
            "List all products that have never been discontinued and have more than 500 units sold.",
            "What is the average discount provided across all products?",
            "Find products with unit prices more than double their average category price.",
            "What are the top 5 selling products by quantity?",
            "Which products have a reorder level that has been reached and need restocking?",
            "Which category of products has the highest number of units sold?",
            "How many products are currently discontinued?",
            "What is the total quantity of products sold by month?",
            "Which suppliers have more than three products discontinued?",
            "What is the total discount given for each product across all orders?",
            "What is the average quantity of units ordered per product?",
            "What is the total value of units on order for each product?",
            "How many distinct orders include products with a discount greater than 20%?",
            "Find the products with a unit price above the overall average unit price.",
            "Which products have more units on order than in stock?",
            "What is the average discount applied to each order?",
            "What are the products with below-average sales but above-average stock levels?",
            "Calculate the revenue contribution percentage of each product to the total sales.",
            "Identify products with decreasing sales trends over months.",
            "What are the top 5 best-selling products by quantity sold?",
            "What is the average price of products supplied by each supplier?",
            "Which products have not reached their reorder level?",
            "What is the product with the highest inventory turnover ratio?",
            "Find the average units on order for products that are not discontinued.",
            "Which products have a unit price above the average unit price of all products?",
            "What is the total quantity sold per category?",
            "Identify products with zero units in stock but have pending orders.",
            "What is the total sales for each supplier?",
            "Which products have the highest reorder levels?",
            "What is the percentage of discontinued products in inventory?",
            "How many products have a discount higher than 10% on average?",
            "Calculate the product performance for each product per month.",
            "What is the supplier with the most products above reorder level?",
            "Find products that have been sold with zero discounts more than 50 times.",
            "Calculate the average inventory turnover ratio per category.",
            "Calculate the monthly inventory turnover ratio for each product.",
            "Find the top 5 products with the highest sales quantity.",
            "Identify the most common discount rate applied to product sales.",
            "Determine the total order quantity for each supplier.",
            "What is the average discount on products sold per category?",
            "What is the price difference between the highest and lowest priced products?",
            "Calculate the average unit price of products by supplier.",
            "Find the total number of products in each category.",
            "Identify products with no reorder level set.",
            "Find the month with the highest sales for a particular product.",
            "Calculate the total revenue for each category.",
            "How many products have more units on order than in stock?",
            "Which products are the most frequently ordered per month?",
            "Identify suppliers that provide the top-rated product.",
            "Calculate the sales quantity variance month-over-month for each product.",
            "What is the average quantity per unit for all products in stock?",
            "Which products have been ordered the most?",
            "What is the average unit price of products by each supplier?",
            "How many discontinued products do we currently have?",
            "Which products are below their reorder level?",
            "What is the total sales value for each category?",
            "What is the top-selling product in terms of quantity?",
            "What is the monthly inventory turnover ratio?",
            "How much total discount has been given for each product?",
            "What products have zero units on order?",
            "Which products have been sold at a discount?",
            "What is the total order count for each product?",
            "Which products have unit prices above the average price?",
            "What is the average quantity ordered per product?",
            "For each product, what percentage of sales is at a discount?",
            "Which products' sales have increased during the past month?",
            "What is the highest discount given to a single product?",
            "Which products should be considered for discontinuation based on sales?",
            "What is the stock-to-sale ratio for each product?",
            "Which products have a stock level below the reorder level?",
            "What are the total sales for each product over the last year?",
            "What is the average discount applied on each product?",
            "What is the top-selling product for each category?",
            "What is the total revenue generated by each supplier?",
            "Find products with the highest inventory turnover ratio.",
            "What is the monthly sales performance for each product?",
            "Which products have the highest total discounts given?",
            "How does the sales quantity of each product compare month over month?",
            "Which products have the largest number of units on order?",
            "What is the average price of products purchased per order?",
            "How many orders included a specific product?",
            "For each product, what was the highest recorded order quantity in a single transaction?",
            "What is the percentage of discontinued products in each category?",
            "How often do products fall below the reorder level, and what is the average time to replenish?",
            "Which categories have the highest total sales?",
            "What is the revenue contribution of each product relative to the total sales?",
            "Which products have a stock below their reorder level?",
            "How many products are discontinued?",
            "What is the total quantity of each product sold last month?",
            "Which suppliers provide the most units of products?",
            "Find the products with the highest sales quantity but are still in stock.",
            "How many products are on order for each supplier?",
            "Calculate the discount rate for each order in the [Order Details] table.",
            "What is the average discount applied across all orders?",
            "Which product has been ordered in the highest quantity?",
            "Determine the monthly product performance based on sales.",
            "What is the current inventory turnover ratio?",
            "Which category has the highest overall sales?",
            "What is the total revenue generated after applying discounts?",
            "Analyze the products with higher sales than the average monthly performance.",
            "Identify suppliers who supply discontinued products.",
            "Which orders have the highest discount applied?",
            "What is the total quantity ordered for each product?",
            "Which products have inventory levels below their reorder level?",
            "What is the revenue generated from each product?",
            "What is the total inventory value of all products?",
            "Which discontinued products still have stock?",
            "What is the product with the highest order quantity in the last month?",
            "Which products have the highest inventory turnover ratio?",
            "How many units of each product are on order?",
            "Which products have the highest revenue but are discontinued?",
            "What is the monthly sales trend for each category?",
            "Which products have the highest number of unique customer orders?",
            "What is the average quantity ordered per order?",
            "Which supplier's products have the highest average discount?",
            "What is the reorder status of products with the highest sales?",
            "How does the unit price of products affect order quantity?",
            "Which product categories generate the most revenue?",
            "What is the average unit price of products within each category?",
            "What is the total sales revenue generated by each product?",
            "Find products with below-average stock levels compared to their reorder level.",
            "Which products have the highest discounts applied on average?",
            "How many products fall below their reorder level?",
            "What are the total units ordered per supplier?",
            "Identify the category with the highest total sales revenue.",
            "What is the average discount percentage for each product?",
            "Determine the impact of discontinued products on total inventory.",
            "Identify products with the highest ratio of units on order to units in stock.",
            "What is the cost of unsold units in stock for each product?",
            "How does the reorder level compare to the average units in stock for each product?",
            "Find the product with the highest total revenue after discounts.",
            "Which products have a unit price above the average product price?",
            "What are the top 5 best-selling products by units sold?",
            "What is the total revenue generated by each product category?",
            "How many products are below their reorder level?",
            "Which products need to be reordered based on the reorder level?",
            "List the top 5 best-selling products by quantity.",
            "Identify products with no current stock but have pending orders.",
            "What is the total revenue generated by each category?",
            "Calculate the product performance for each month.",
            "Identify the product with the highest inventory turnover ratio.",
            "Which products have the highest profit margin?",
            "What is the total quantity sold for each supplier?",
            "How does the inventory level compare from month to month?",
            "Which product has the highest discount applied across all orders?",
            "What is the average unit price for products within each category?",
            "Identify the products that have never been ordered.",
            "What percentage of products are above their reorder level?",
            "Analyze the trend of units ordered over the last 3 months.",
            "What is the total amount of discounts given for all orders?",
            "Find the correlation between unit price and quantity ordered.",
            "What are the names of all products that have been discontinued?",
            "Which products have the highest quantity in stock?",
            "Calculate the total sales for each product.",
            "How many units of each product have been ordered so far?",
            "What is the average discount given per order?",
            "Identify suppliers with the most products.",
            "Find all products with stock levels below the reorder level.",
            "Which product category has the highest total sales?",
            "Determine the Inventory Turnover Ratio for each product.",
            "Identify products that are priced above the average unit price.",
            "Calculate total revenue lost due to discounts.",
            "Which products have a sales quantity above their reorder level?",
            "Identify the product with the highest reorder level.",
            "Find the top 3 suppliers based on their product sales.",
            "List products with orders but no stock.",
            "How many units on order are there for products with zero stock?",
            "What is the average discount applied across all products?",
            "How many products have a unit price above the average unit price of all products?",
            "What is the total revenue generated from discontinued products?",
            "Identify the top 5 products with the highest inventory turnover ratio.",
            "Which product has the highest sales volume this month?",
            "What is the total quantity on order for each product category?",
            "List products whose reorder level is higher than the number of units in stock.",
            "What is the total number of units sold for products that are not discontinued?",
            "Find the product with the most significant percentage sales growth month-over-month.",
            "What is the average inventory level for each supplier?",
            "Which products have a reorder level that is less than the average reorder level?",
            "Calculate the cumulative sales by category for this year.",
            "What is the most frequently provided quantity per unit?",
            "Evaluate if there is a correlation between discount percentage and sales volume.",
            "Determine the month with the highest total product sales value.",
            "Which discontinued product had the highest sales before being discontinued?",
            "Which products have been ordered the most this month?",
            "What is the average stock level for each product category?",
            "Identify products with stock levels below their reorder level.",
            "List products that have not been ordered in the last quarter.",
            "Identify the top-performing products by sales revenue.",
            "Which products have been discontinued and still have stock remaining?",
            "Determine the total quantity of products on order for each supplier.",
            "How many different products are supplied by each supplier?",
            "Which product categories have the highest total sales?",
            "What is the total discount value given for each order?",
            "List products that have the highest margin by comparing unit price with discounted price.",
            "Find the products with the highest average order quantity.",
            "What is the overall average discount applied across all sales?",
            "Identify suppliers who provide the highest number of products.",
            "Calculate the total value of discontinued products in stock.",
            "Which products have never been discontinued?",
            "Identify products with no discount offered at all times.",
            "What are the top-selling products based on quantity ordered?",
            "Find the average unit price for products in each category.",
            "Identify products with stock levels below the reorder threshold.",
            "What percentage of products are discontinued?",
            "Which products have the highest total discount amount applied?",
            "Calculate the total quantity of each product currently on order.",
            "Identify the top three categories by total sales revenue.",
            "How many unique products are ordered each month?",
            "What is the trend in total sales revenue over the last year?",
            "Identify suppliers with more than five discontinued products.",
            "How does average order quantity compare between two specific categories?",
            "What are the monthly sales quantities for each product in the past year?",
            "Which products are ordered more after being marked as 'discontinued'?",
            "Determine the most common discount rates used.",
            "What is the variation in unit prices within each product category?",
            "What are the most ordered combinations of products?",
            "What is the average discount applied to each product category?",
            "Which suppliers provide the most products by quantity?",
            "List the top 3 products by sales revenue.",
            "What is the total quantity ordered for discontinued products?",
            "Find the product with the highest unit price.",
            "Which products have the largest difference between units in stock and units on order?",
            "Determine if any products are being sold at a discount greater than 20%.",
            "What is the sum of all discounts given on 'Order Details'?",
            "Find the average units on order for each supplier.",
            "Which categories have products that are all below the reorder level?",
            "Calculate the total revenue for products with no discount applied.",
            "What is the product performance ranking for the last month?",
            "List all products that are not discontinued but have zero units in stock.",
            "Identify products with low performance metrics.",
            "What are the top 5 best-selling products by quantity ordered?",
            "Which supplier provides the most products that are currently in stock?",
            "What is the average unit price of products for each category?",
            "Identify the products that have been discontinued.",
            "Find the product with the highest current stock level.",
            "Determine the average discount applied across all products.",
            "Which products have orders that significantly exceed their reorder levels?",
            "How many units on order exist for each supplier?",
            "List all products and their respective stock and order quantities.",
            "What are the total sales values for each product category?",
            "Identify the least sold product and the number of units sold.",
            "Calculate the average reorder level across all products.",
            "Which category has the longest list of discontinued products?",
            "Find the total quantity ordered for each supplier.",
            "Identify products that need restocking (units in stock below reorder level).",
            "What is the percentage of discontinued products relative to total products?",
            "Analyze the correlation between unit price and units ordered for the products.",
            "What is the monthly sales trend for each product?",
            "What is the monthly product performance based on sales volume?",
            "What is the average number of units per order for each product?",
            "Which suppliers provide products with below-average units in stock?",
            "What is the total revenue for each product considering discounts?",
            "Which products have sales exceeding their reorder level?",
            "What is the inventory turnover ratio for each product monthly?",
            "What is the total discounted value of all orders?",
            "Which category has the highest total quantity ordered?",
            "How many products have reached their reorder level?",
            "What is the total value of products in stock for each supplier?",
            "Which products have the greatest variance in monthly sales?",
            "What is the average monthly sales growth for each product?",
            "Identify products with zero sales this year.",
            "Which products have the highest average order quantity?",
            "What are the top 5 best-selling products based on quantity sold?"
        ],
        "sql_queries": [
            "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;",
            "SELECT ProductID, ProductName FROM products WHERE Discontinued = 1;",
            "SELECT SupplierID, SUM(UnitsInStock * UnitPrice) AS InventoryValue FROM products GROUP BY SupplierID;",
            "SELECT CategoryID, COUNT(ProductID) AS NumProducts FROM products GROUP BY CategoryID ORDER BY NumProducts DESC LIMIT 1;",
            "SELECT ProductID, UnitsOnOrder FROM products;",
            "SELECT ProductID, SUM([Order Details].Quantity) AS SalesVolume FROM [Order Details] GROUP BY ProductID ORDER BY SalesVolume DESC LIMIT 1;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT DISTINCT SupplierID FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
            "SELECT COUNT(DISTINCT ProductID) AS TotalUniqueProducts FROM [Order Details];",
            "SELECT products.ProductID, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS MonthlyRevenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID, Month;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT COUNT(DISTINCT ProductID) AS ProductCount FROM [Order Details] WHERE Discount > 0.1;",
            "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName;",
            "SELECT ProductID, AVG(Quantity) AS AverageQuantity FROM [Order Details] GROUP BY ProductID;",
            "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT products.ProductID, (SUM([Order Details].Quantity * [Order Details].UnitPrice)/AVG(products.UnitsInStock)) AS InventoryTurnover FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;",
            "SELECT COUNT(ProductID) AS NumberOfProducts FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT SupplierID, AVG([Order Details].Discount) AS AverageDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID ORDER BY AverageDiscount DESC LIMIT 1;",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] WHERE OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) GROUP BY ProductID;",
            "SELECT ProductID, ProductName, UnitsInStock FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID;",
            "SELECT products.ProductID, products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID, products.ProductName ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT ProductID, UnitsInStock FROM products;",
            "SELECT DISTINCT SupplierID FROM products WHERE UnitsInStock = 0;",
            "SELECT CategoryID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY CategoryID;",
            "SELECT ProductID, UnitsInStock FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
            "SELECT ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(UnitsInStock) AS InventoryTurnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductID;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT ProductID, SUM(Quantity) AS TotalOrdered FROM [Order Details] GROUP BY ProductID ORDER BY TotalOrdered DESC LIMIT 5;",
            "SELECT SUM(UnitPrice * Quantity) AS Revenue FROM [Order Details] WHERE Quantity > 10;",
            "SELECT products.CategoryID, AVG([Order Details].Discount) AS AvgDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.CategoryID ORDER BY AvgDiscount DESC LIMIT 1;",
            "SELECT ProductID FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
            "SELECT SupplierID, AVG(UnitPrice) AS AvgPrice FROM products GROUP BY SupplierID ORDER BY AvgPrice DESC;",
            "SELECT SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY SupplierID;",
            "SELECT ProductID, EXTRACT(MONTH FROM OrderDate) AS Month, SUM(Quantity) AS MonthlySales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ProductID, Month;",
            "SELECT ProductID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY ProductID ORDER BY AvgDiscount DESC LIMIT 3;",
            "SELECT COUNT(*) FROM (SELECT SupplierID FROM products GROUP BY SupplierID HAVING COUNT(DISTINCT ProductID) > 3) AS SupplierCount;",
            "SELECT OrderID, SUM(Discount * UnitPrice * Quantity) AS TotalDiscount FROM [Order Details] GROUP BY OrderID ORDER BY TotalDiscount DESC LIMIT 1;",
            "SELECT SUM(UnitPrice * UnitsInStock) AS PotentialRevenue FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT p.ProductName, SUM(od.Quantity) AS SalesVolume FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY SalesVolume DESC LIMIT 5;",
            "SELECT p.ProductName, p.UnitPrice, p.SupplierID FROM products p ORDER BY p.UnitPrice DESC LIMIT 1;",
            "SELECT AVG(p.UnitPrice) AS AveragePrice FROM products p WHERE p.Discontinued = 0;",
            "SELECT COUNT(*) FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) DESC LIMIT 1;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;",
            "SELECT SUM(p.UnitsInStock) AS TotalUnitsInStock FROM products p WHERE p.Discontinued = 1;",
            "SELECT od.Discount, COUNT(*) AS Frequency FROM [Order Details] od GROUP BY od.Discount ORDER BY Frequency DESC LIMIT 1;",
            "SELECT p.CategoryID, SUM(p.UnitsOnOrder) AS UnitsOnOrder FROM products p GROUP BY p.CategoryID ORDER BY UnitsOnOrder DESC LIMIT 1;",
            "SELECT AVG(od.Discount) AS AverageDiscount FROM [Order Details] od;",
            "SELECT COUNT(DISTINCT p.SupplierID) FROM products p WHERE p.UnitsOnOrder = 0;",
            "SELECT p.ProductName FROM products p WHERE p.ReorderLevel > 100;",
            "SELECT s.SupplierID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID;",
            "SELECT p.ProductName, AVG(od.Discount) AS AverageDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY AverageDiscount DESC LIMIT 1;",
            "SELECT COUNT(*) FROM (SELECT p.ProductID FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID HAVING SUM(od.Quantity) > 100) AS subquery;",
            "SELECT p.ProductName FROM products p WHERE p.UnitsInStock > 0 AND p.UnitsOnOrder > 0;",
            "SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY EXTRACT(MONTH FROM o.OrderDate);",
            "SELECT od.ProductID, COUNT(od.OrderID) FROM [Order Details] od WHERE od.Discount > 0 GROUP BY od.ProductID;",
            "SELECT AVG(CAST(SUBSTRING_INDEX(QuantityPerUnit, ' ', 1) AS DECIMAL)) FROM products;",
            "SELECT ProductName, UnitPrice FROM products WHERE UnitsInStock > 0;",
            "SELECT ProductName, UnitsOnOrder FROM products WHERE UnitsOnOrder = (SELECT MAX(UnitsOnOrder) FROM products);",
            "SELECT P.ProductName, SUM(OD.Quantity * OD.UnitPrice) AS TotalRevenue FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID GROUP BY P.ProductName;",
            "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT COUNT(DISTINCT ProductID) FROM products WHERE Discontinued = 1;",
            "SELECT ProductName, AVG(Discount) AS AvgDiscount FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID GROUP BY ProductName;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT P.ProductID, EXTRACT(YEAR FROM O.OrderDate) AS Year, EXTRACT(MONTH FROM O.OrderDate) AS Month, SUM(OD.Quantity) AS MonthlyPerformance FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID JOIN orders O ON OD.OrderID = O.OrderID GROUP BY P.ProductID, Year, Month;",
            "SELECT SupplierID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY SupplierID ORDER BY AvgUnitPrice DESC;",
            "SELECT CategoryID, SUM(Quantity) AS TotalQuantity FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID GROUP BY CategoryID;",
            "SELECT ProductName FROM (SELECT P.ProductName, SUM(OD.Quantity) AS TotalQuantity FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID GROUP BY P.ProductName ORDER BY TotalQuantity DESC) AS TopProducts LIMIT 5;",
            "SELECT P.ProductName, SUM(OD.Quantity * OD.UnitPrice * (1 - OD.Discount)) AS Profit FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID GROUP BY P.ProductName ORDER BY Profit ASC;",
            "SELECT COUNT(*) FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
            "SELECT P.ProductName FROM products P JOIN (SELECT ProductID FROM products GROUP BY ProductID HAVING COUNT(DISTINCT SupplierID) > 1) AS MultiSupplier ON P.ProductID = MultiSupplier.ProductID;",
            "SELECT SUM(Quantity * UnitPrice * Discount) FROM [Order Details];",
            "SELECT ProductName FROM products WHERE Discontinued = 0 AND UnitsInStock > 0;",
            "SELECT ProductName, SUM(UnitPrice * UnitsOnOrder) AS TotalCostOnOrder FROM products GROUP BY ProductName;",
            "SELECT ProductName FROM products ORDER BY ReorderLevel DESC LIMIT 3;",
            "SELECT P.ProductID, EXTRACT(MONTH FROM O.OrderDate) AS Month, SUM(OD.Quantity) AS MonthlyQuantity FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID JOIN orders O ON OD.OrderID = O.OrderID GROUP BY P.ProductID, EXTRACT(MONTH FROM O.OrderDate);",
            "SELECT products.ProductID, SUM([Order Details].Quantity) AS TotalQuantitySold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
            "SELECT ProductName FROM products WHERE UnitPrice = (SELECT MAX(UnitPrice) FROM products);",
            "SELECT COUNT(ProductName) FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT AVG(Discount) FROM [Order Details];",
            "SELECT ProductName FROM products WHERE UnitsInStock = 0;",
            "SELECT ProductName FROM products WHERE UnitsOnOrder = (SELECT MAX(UnitsOnOrder) FROM products);",
            "SELECT SupplierID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID;",
            "SELECT SupplierID, AVG(UnitPrice) FROM products GROUP BY SupplierID;",
            "SELECT ProductName FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE Discount > 0.20;",
            "SELECT ProductName, SUM([Order Details].Quantity) AS TotalQuantitySold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY TotalQuantitySold DESC LIMIT 5;",
            "SELECT DATE_FORMAT([Order Details].OrderDate, '%Y-%m') AS Month, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY DATE_FORMAT([Order Details].OrderDate, '%Y-%m');",
            "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;",
            "SELECT SupplierID, COUNT(DISTINCT ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID HAVING COUNT(DISTINCT ProductID) > 5;",
            "SELECT ProductName, SUM(Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY ProductName;",
            "SELECT ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY SUM([Order Details].Quantity * [Order Details].UnitPrice) DESC LIMIT 1;",
            "SELECT CategoryID, AVG(UnitsOnOrder) FROM products GROUP BY CategoryID;",
            "SELECT SupplierID FROM products WHERE Discontinued = 1 GROUP BY SupplierID ORDER BY COUNT(ProductID) DESC LIMIT 1;",
            "SELECT ProductName, SUM(Discount * Quantity * UnitPrice) AS TotalDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName;",
            "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
            "SELECT SupplierID, COUNT(DISTINCT ProductID) AS UniqueProducts FROM products GROUP BY SupplierID ORDER BY UniqueProducts DESC LIMIT 1;",
            "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
            "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS SalesRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY SalesRevenue DESC LIMIT 5;",
            "SELECT products.CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnover FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.CategoryID;",
            "SELECT EXTRACT(YEAR FROM orders.order_date) AS Year, EXTRACT(MONTH FROM orders.order_date) AS Month, SUM([Order Details].Quantity) AS TotalSalesVolume FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Year, Month ORDER BY TotalSalesVolume DESC LIMIT 1;",
            "SELECT CASE WHEN Discount <= 0.1 THEN '0-10%' WHEN Discount <= 0.2 THEN '11-20%' ELSE '21%+' END AS DiscountBracket, COUNT(DISTINCT ProductID) FROM [Order Details] GROUP BY DiscountBracket;",
            "SELECT CategoryID, AVG(ReorderLevel) AS AvgReorderLevel FROM products GROUP BY CategoryID;",
            "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsOnOrder > 0;",
            "SELECT p.SupplierID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",
            "SELECT CategoryID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY CategoryID ORDER BY AvgUnitPrice DESC LIMIT 1;",
            "SELECT ProductID, STDDEV(SUM([Order Details].Quantity) OVER (PARTITION BY EXTRACT(YEAR FROM OrderDate), EXTRACT(MONTH FROM OrderDate))) AS SalesVariance FROM [Order Details] GROUP BY ProductID ORDER BY SalesVariance DESC LIMIT 1;",
            "SELECT SUM(products.UnitPrice * products.UnitsInStock) AS TotalPotentialRevenue FROM products WHERE products.Discontinued = 0;",
            "SELECT SupplierID, products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID, products.ProductName ORDER BY TotalQuantity DESC LIMIT 1;",
            "SELECT Discount, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] GROUP BY Discount;",
            "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT ProductID, (SUM([Order Details].Quantity) / COUNT(DISTINCT EXTRACT(YEAR_MONTH FROM order_date))) AS AvgMonthlySalesGrowth FROM [Order Details] GROUP BY ProductID ORDER BY AvgMonthlySalesGrowth DESC;",
            "SELECT products.ProductID, SUM([Order Details].Quantity * (1 - [Order Details].Discount)) / SUM([Order Details].Quantity) AS DiscountEffect FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
            "SELECT ProductName FROM products WHERE UnitPrice > 50;",
            "SELECT SUM(UnitsOnOrder) FROM products WHERE Discontinued = 1;",
            "SELECT SupplierID, COUNT(DISTINCT ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID ORDER BY NumberOfProducts DESC LIMIT 1;",
            "SELECT CategoryID, SUM(UnitPrice * UnitsInStock) AS InventoryValue FROM products GROUP BY CategoryID;",
            "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity) > MAX(p.UnitsInStock);",
            "SELECT p.ProductName, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
            "SELECT CategoryID, (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY CategoryID ORDER BY InventoryTurnover DESC;",
            "SELECT p.ProductID, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS MonthlySales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, EXTRACT(MONTH FROM o.OrderDate);",
            "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT CategoryID, COUNT(ProductID) AS ReordersNeeded FROM products WHERE UnitsInStock < ReorderLevel GROUP BY CategoryID;",
            "SELECT SupplierID, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) AS MonthlySales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY SupplierID, Month;",
            "SELECT (COUNT(CASE WHEN Discontinued = 1 THEN ProductID END) * 1.0 / COUNT(ProductID) * 100) AS PercentageDiscontinued FROM products;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / SUM(od.Quantity) AS SalesRevenuePerUnit FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SalesRevenuePerUnit DESC LIMIT 3;",
            "SELECT p.ProductName, AVG(od.Quantity) AS AverageUnitsPerOrder FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
            "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName HAVING COUNT(DISTINCT EXTRACT(MONTH FROM od.OrderDate)) = 1;",
            "SELECT p.ProductID, (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
            "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= ADD_MONTHS(CURRENT_DATE, -6) GROUP BY p.ProductName ORDER BY SUM(od.Quantity) ASC LIMIT 1;",
            "SELECT CategoryID, COUNT(DISTINCT SupplierID) AS NumberOfSuppliers FROM products GROUP BY CategoryID;",
            "SELECT ProductName FROM products WHERE UnitsInStock = 0;",
            "SELECT p.ProductName, SUM(od.Quantity) as TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE DATE_FORMAT(od.OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m') GROUP BY p.ProductID;",
            "SELECT SupplierID, COUNT(ProductID) as ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC;",
            "SELECT CategoryID, AVG(UnitPrice) as AveragePrice FROM products GROUP BY CategoryID;",
            "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
            "SELECT ProductID, ReorderLevel FROM products WHERE ProductID IN (SELECT ProductID FROM [Order Details] WHERE DATE_FORMAT(CURDATE(), '%Y-%m') = DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 1 MONTH), '%Y-%m') GROUP BY ProductID ORDER BY SUM(Quantity) DESC LIMIT 1);",
            "SELECT ProductName FROM products WHERE UnitsOnOrder = (SELECT MAX(UnitsOnOrder) FROM products);",
            "SELECT p.ProductName, SUM(od.Quantity * (od.UnitPrice - od.UnitPrice * od.Discount)) as TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) as InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY InventoryTurnoverRatio DESC FETCH FIRST 5 ROWS ONLY;",
            "SELECT CategoryID, SUM(UnitsInStock) as TotalUnitsInStock FROM products GROUP BY CategoryID ORDER BY TotalUnitsInStock DESC;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT p.SupplierID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;",
            "SELECT DISTINCT CategoryID FROM products WHERE UnitsOnOrder > 0 AND UnitsOnOrder < ReorderLevel;",
            "SELECT p.ProductID, YEAR(o.OrderDate) AS Year, MONTH(o.OrderDate) AS Month, SUM(od.Quantity) as SalesPerformance FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, YEAR(o.OrderDate), MONTH(o.OrderDate) ORDER BY SalesPerformance DESC;",
            "SELECT SUM(Quantity * UnitPrice * Discount) as TotalDiscount FROM [Order Details];",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * od.Discount) AS DiscountedImpact FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY DiscountedImpact DESC FETCH FIRST 3 ROWS ONLY;",
            "SELECT p.ProductID, SUM(od.Quantity) as QuantityOrdered, DATE_FORMAT(OrderDate, '%Y-%m') as OrderMonth FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, OrderMonth ORDER BY OrderMonth;",
            "SELECT SupplierID, SUM(UnitPrice * UnitsInStock) as InventoryValue FROM products GROUP BY SupplierID;",
            "SELECT OrderID, DeliveryStatus FROM orders WHERE DeliveryStatus = 'Delayed';",
            "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') as OrderMonth, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) as InventoryTurnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY OrderMonth ORDER BY OrderMonth;",
            "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND UnitsOnOrder = 0;",
            "SELECT AVG(UnitPrice) FROM products WHERE Discontinued = 1;",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalSales FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalSales DESC FETCH FIRST 5 ROWS ONLY;",
            "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS TotalRevenue FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID;",
            "SELECT SUM(Discount) AS TotalDiscount FROM [Order Details];",
            "SELECT products.ProductName, SUM([Order Details].Quantity * ([Order Details].UnitPrice * (1 - [Order Details].Discount))) AS TotalRevenue FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
            "SELECT products.ProductName, AVG([Order Details].Discount) AS AverageDiscount FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
            "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 100;",
            "SELECT products.ProductName FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName HAVING COALESCE(SUM([Order Details].Quantity), 0) < 50;",
            "SELECT SupplierID, SUM([Order Details].Quantity) AS TotalUnitsSold FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID;",
            "SELECT products.ProductName, COUNT(*) AS OrderFrequency FROM [Order Details] INNER JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY OrderFrequency DESC LIMIT 1;",
            "SELECT products.ProductName, AVG([Order Details].Quantity) AS AverageOrderQuantity FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
            "SELECT ProductName FROM products WHERE UnitsInStock + UnitsOnOrder <= ReorderLevel;",
            "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity) / SUM([Order Details].Quantity) AS AverageRevenuePerUnit FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
            "SELECT CategoryID, COUNT(*) AS DiscontinuedCount FROM products WHERE Discontinued = 1 GROUP BY CategoryID ORDER BY DiscontinuedCount DESC;",
            "SELECT SupplierID, SUM(UnitPrice * UnitsInStock) AS TotalStockValue FROM products GROUP BY SupplierID;",
            "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantitySold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalQuantitySold DESC LIMIT 5;",
            "SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;",
            "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
            "SELECT DISTINCT s.SupplierID, s.SupplierName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1;",
            "SELECT p.ProductID, p.ProductName FROM products p WHERE p.UnitsInStock < p.ReorderLevel;",
            "SELECT od.Discount, COUNT(*) AS Frequency FROM [Order Details] od GROUP BY od.Discount ORDER BY Frequency DESC LIMIT 1;",
            "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice * od.Discount) AS DiscountedRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0 GROUP BY p.ProductID, p.ProductName ORDER BY DiscountedRevenue DESC;",
            "SELECT p.CategoryID, AVG(p.UnitPrice) AS AveragePrice FROM products p GROUP BY p.CategoryID;",
            "WITH Monthly_Revenue AS (SELECT p.ProductID, p.ProductName, DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS Revenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, p.ProductName, Month) SELECT ProductID, ProductName, Month, Revenue, LAG(Revenue) OVER (PARTITION BY ProductID ORDER BY Month) AS PreviousMonthRevenue, (Revenue - LAG(Revenue) OVER (PARTITION BY ProductID ORDER BY Month)) / LAG(Revenue) OVER (PARTITION BY ProductID ORDER BY Month) AS GrowthRate FROM Monthly_Revenue ORDER BY GrowthRate DESC LIMIT 3;",
            "SELECT p.ProductID, p.ProductName FROM products p WHERE p.UnitsInStock < 5 AND p.UnitsOnOrder > 10;",
            "SELECT p.ProductID, p.ProductName, COUNT(DISTINCT DATE_TRUNC('month', o.OrderDate)) AS MonthsOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, p.ProductName HAVING MonthsOrdered = (SELECT COUNT(DISTINCT DATE_TRUNC('month', OrderDate)) FROM orders o);",
            "SELECT s.SupplierID, s.SupplierName, COUNT(DISTINCT p.CategoryID) AS CategoryCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID, s.SupplierName ORDER BY CategoryCount DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalOrderQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY DATE_TRUNC('month', o.OrderDate), p.ProductID, p.ProductName ORDER BY DATE_TRUNC('month', o.OrderDate), TotalOrderQuantity DESC;",
            "SELECT c.CategoryID FROM categories c JOIN products p ON c.CategoryID = p.CategoryID GROUP BY c.CategoryID HAVING SUM(CAST(p.Discontinued AS INT)) = COUNT(p.ProductID);",
            "SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName HAVING SUM(CASE WHEN od.Discount > 0 THEN 1 ELSE 0 END) = 0;",
            "SELECT s.SupplierID, s.SupplierName, AVG(p.UnitPrice) AS AverageUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID, s.SupplierName;",
            "SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName HAVING AVG(od.UnitPrice * (1 - od.Discount)) > p.UnitPrice;",
            "SELECT ProductName FROM products WHERE Discontinued = 1;",
            "SELECT CategoryID, AVG(UnitsInStock) AS AverageInventory FROM products GROUP BY CategoryID;",
            "SELECT SupplierID, COUNT(ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID ORDER BY NumberOfProducts DESC LIMIT 1;",
            "SELECT CategoryID, SUM(products.UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT ProductID, AVG(Discount) AS AverageDiscount FROM [Order Details] GROUP BY ProductID;",
            "SELECT SupplierID, SUM([Order Details].Quantity) AS TotalUnitsOrdered FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID;",
            "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT ProductID FROM [Order Details]);",
            "SELECT products.ProductID, EXTRACT(MONTH FROM [Order Details].OrderDate) AS SalesMonth, SUM([Order Details].Quantity) AS MonthlySales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, EXTRACT(MONTH FROM [Order Details].OrderDate);",
            "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].OrderDate BETWEEN DATEADD(MONTH, -1, CURRENT_DATE) AND CURRENT_DATE GROUP BY products.ProductID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT SUM(UnitPrice * UnitsInStock) AS TotalStockValue FROM products;",
            "SELECT ProductID, AVG(Quantity) AS AverageUnitsOrdered FROM [Order Details] GROUP BY ProductID;",
            "SELECT ProductID, ProductName, UnitsInStock FROM products ORDER BY UnitsInStock ASC LIMIT 3;",
            "SELECT ProductID, ProductName FROM products WHERE UnitPrice > 100 AND Discontinued = 0;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
            "SELECT SupplierID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY SupplierID;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT p.ProductID, (SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(CAST(p.UnitsInStock AS DECIMAL)), 0)) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY InventoryTurnover DESC;",
            "SELECT p.ProductName, AVG(od.Quantity) AS AverageMonthlySales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
            "SELECT p.ProductName, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS SalesRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SalesRevenue DESC LIMIT 5;",
            "SELECT CategoryID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY CategoryID;",
            "SELECT p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;",
            "SELECT p.ProductName, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
            "SELECT p.ProductName, DATE_TRUNC('quarter', o.OrderDate) AS Quarter, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID GROUP BY p.ProductName, Quarter;",
            "SELECT ProductName, (UnitPrice * UnitsInStock) AS StockValue FROM products;",
            "SELECT CategoryID, COUNT(ProductID) AS DiscontinuedCount FROM products WHERE Discontinued = 1 GROUP BY CategoryID ORDER BY DiscontinuedCount DESC;",
            "SELECT SupplierID, AVG(UnitsInStock) AS AverageInventory FROM products GROUP BY SupplierID ORDER BY AverageInventory ASC LIMIT 1;",
            "SELECT p.ProductName, EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, AVG(p.UnitsInStock) AS AverageMonthlyStock FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, Year, Month;",
            "SELECT ProductName, COUNT(*) AS ReorderCount FROM products WHERE UnitsInStock < ReorderLevel GROUP BY ProductName;",
            "SELECT s.SupplierID, SUM(od.Quantity) AS TotalUnitsSold, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN suppliers s ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
            "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SUM(od.Quantity) DESC LIMIT 1;",
            "SELECT ProductID, UnitsInStock FROM products;",
            "SELECT ProductID, UnitsInStock, ReorderLevel FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT p.ProductID, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, EXTRACT(MONTH FROM o.OrderDate);",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
            "SELECT SupplierID, COUNT(*) AS DiscontinuedCount FROM products WHERE Discontinued = 1 GROUP BY SupplierID ORDER BY DiscontinuedCount DESC;",
            "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
            "SELECT p.ProductName, AVG(od.Discount) AS AvgDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;",
            "SELECT p.ProductName, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS SalesVolume FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, EXTRACT(MONTH FROM o.OrderDate);",
            "SELECT ProductName FROM products WHERE UnitsOnOrder = 0 AND UnitsInStock > 50;",
            "SELECT TOP 1 p.ProductID, (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY InventoryTurnoverRatio DESC;",
            "SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE MONTH(od.OrderID) = MONTH(CURRENT_DATE) - 1 AND YEAR(od.OrderID) = YEAR(CURRENT_DATE) GROUP BY p.ProductID, p.ProductName HAVING SUM(od.Quantity) = (SELECT MIN(total_quantity) FROM (SELECT ProductID, SUM(Quantity) as total_quantity FROM [Order Details] WHERE MONTH(OrderID) = MONTH(CURRENT_DATE) - 1 AND YEAR(OrderID) = YEAR(CURRENT_DATE) GROUP BY ProductID) AS subquery);",
            "SELECT p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;",
            "SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName HAVING AVG(od.Discount) > 0.2 AND SUM(od.Quantity) < 100;",
            "SELECT p.ProductID, MONTH(o.OrderDate) AS Month, (SUM(od.Quantity * od.UnitPrice) - LAG(SUM(od.Quantity * od.UnitPrice)) OVER (PARTITION BY p.ProductID ORDER BY MONTH(o.OrderDate))) / NULLIF(LAG(SUM(od.Quantity * od.UnitPrice)) OVER (PARTITION BY p.ProductID ORDER BY MONTH(o.OrderDate)), 0) AS GrowthRate FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, MONTH(o.OrderDate);",
            "SELECT p.ProductName, p.ReorderLevel FROM products p JOIN (SELECT ProductID, SUM(Quantity) AS TotalOrdered FROM [Order Details] GROUP BY ProductID) od ON p.ProductID = od.ProductID ORDER BY TotalOrdered DESC LIMIT 1;",
            "SELECT SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalRevenueLost FROM [Order Details] od;",
            "SELECT c.CategoryID, AVG(p.UnitPrice) AS AvgUnitPrice FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
            "SELECT CORR(p.UnitsOnOrder, SUM(od.Quantity)) AS Correlation FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID;",
            "WITH SalesTrend AS (SELECT p.ProductID, MONTH(OrderDate) AS Month, SUM(od.Quantity) AS MonthlySales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, MONTH(OrderDate)) SELECT p.ProductName, st.CurrentQuarterSales, st.NextQuarterPrediction FROM products p JOIN (SELECT ProductID, SUM(CASE WHEN Month BETWEEN 1 AND 3 THEN MonthlySales ELSE 0 END) AS CurrentQuarterSales, SUM(CASE WHEN Month BETWEEN 4 AND 6 THEN MonthlySales ELSE 0 END) AS NextQuarterPrediction FROM SalesTrend GROUP BY ProductID) st ON p.ProductID = st.ProductID ORDER BY st.CurrentQuarterSales DESC LIMIT 5;",
            "SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity) > 1000;",
            "SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName HAVING SUM(CASE WHEN od.Discount > 0 THEN od.Quantity ELSE 0 END) < SUM(CASE WHEN od.Discount = 0 THEN od.Quantity ELSE 0 END);",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalUnitsSold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalUnitsSold DESC;",
            "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
            "SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID;",
            "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS SalesRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY SalesRevenue DESC LIMIT 5;",
            "SELECT ProductID, UnitsOnOrder FROM products;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT products.ProductName, EXTRACT(MONTH FROM orders.OrderDate) AS Month, SUM([Order Details].Quantity) AS MonthlyPerformance FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductName, EXTRACT(MONTH FROM orders.OrderDate);",
            "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]) ORDER BY UnitPrice DESC LIMIT 1;",
            "SELECT ProductName FROM products WHERE UnitsInStock < (SELECT AVG(UnitsInStock) FROM products);",
            "SELECT ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, ProductName HAVING SUM([Order Details].Quantity) > 100;",
            "SELECT ProductName, UnitsInStock * UnitPrice AS InventoryValue FROM products;",
            "SELECT ProductName FROM products WHERE ReorderLevel > UnitsInStock;",
            "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM products WHERE Discontinued = 1) AS Percentage FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
            "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 3;",
            "SELECT products.ProductName, [Order Details].Discount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount = (SELECT MAX([Order Details].Discount) FROM [Order Details]) ORDER BY products.ProductName;",
            "SELECT s.SupplierID, s.SupplierName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.UnitsInStock = 0;",
            "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
            "SELECT p.ProductID, MONTH(o.OrderDate) AS Month, SUM(od.Quantity) AS MonthlyPerformance FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID GROUP BY p.ProductID, MONTH(o.OrderDate);",
            "SELECT ProductID, ProductName FROM products WHERE ReorderLevel < UnitsInStock;",
            "SELECT p.ProductID, SUM(od.UnitPrice * od.Quantity) AS TotalRevenue, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
            "SELECT ProductID, ProductName FROM products WHERE Discontinued = 1 AND UnitsOnOrder > 0;",
            "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock = (SELECT MIN(UnitsInStock) FROM products) ORDER BY UnitPrice DESC LIMIT 1;",
            "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT c.CategoryID, COUNT(DISTINCT o.OrderID) AS TotalOrders FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY c.CategoryID;",
            "SELECT s.SupplierID, AVG(p.UnitPrice) AS AverageUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
            "SELECT CategoryID, SUM(CASE WHEN UnitsInStock <= ReorderLevel THEN 1 ELSE 0 END) AS FrequentReorders FROM products GROUP BY CategoryID;",
            "SELECT ProductID, ProductName, UnitsOnOrder - UnitsInStock AS Discrepancy FROM products ORDER BY Discrepancy DESC;",
            "SELECT p.ProductID, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
            "SELECT p.ProductID, p.ProductName FROM products p WHERE p.ProductID IN (SELECT ProductID FROM (SELECT ProductID, SUM(UnitPrice * Quantity) AS SalesRevenue FROM [Order Details] GROUP BY ProductID ORDER BY SalesRevenue DESC LIMIT (SELECT COUNT(DISTINCT ProductID) * 0.1 FROM [Order Details])) subquery);",
            "SELECT ProductID FROM [Order Details] WHERE Quantity = (SELECT MAX(Quantity) FROM [Order Details]);",
            "SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.ReorderLevel > p.UnitsInStock AND DATEDIFF(MONTH, od.OrderDate, CURRENT_DATE) = 1;",
            "SELECT s.SupplierID, SUM(p.UnitPrice * p.UnitsInStock) AS TotalInventoryValue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock = (SELECT MAX(UnitsInStock) FROM products)",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel",
            "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName",
            "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalRevenue DESC LIMIT 5",
            "SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, p.ProductID, SUM(od.Quantity) AS MonthlyPerformance FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY EXTRACT(MONTH FROM o.OrderDate), p.ProductID",
            "SELECT ProductID, ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
            "SELECT c.CategoryID, SUM(od.Quantity) AS TotalOrderQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID ORDER BY TotalOrderQuantity DESC",
            "SELECT od.ProductID, MAX(od.Discount) AS MaxDiscount FROM [Order Details] od GROUP BY od.ProductID ORDER BY MaxDiscount DESC",
            "SELECT p.ProductID, SUM(p.UnitPrice * p.UnitsInStock) AS InventoryValue FROM products p GROUP BY p.ProductID",
            "SELECT ProductID, ProductName FROM products WHERE UnitsOnOrder = 0;",
            "SELECT AVG(Discount) FROM [Order Details];",
            "SELECT s.SupplierID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY TotalSales DESC LIMIT 3;",
            "SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.UnitPrice > p.UnitPrice",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
            "SELECT ProductName, UnitsInStock FROM products WHERE Discontinued = 1;",
            "SELECT p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID AND EXTRACT(YEAR_MONTH FROM NOW() - INTERVAL 1 MONTH) = EXTRACT(YEAR_MONTH FROM od.OrderDate) WHERE od.OrderID IS NULL AND p.Discontinued = 0;",
            "SELECT p.ProductName, AVG(od.Quantity) AS AverageQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
            "SELECT ProductName, UnitPrice FROM products WHERE Discontinued = 0 ORDER BY UnitPrice DESC LIMIT 1;",
            "SELECT SupplierID, COUNT(ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID ORDER BY NumberOfProducts DESC LIMIT 1;",
            "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0.10 AND od.Quantity > 100;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE MONTH(CURRENT_DATE) = EXTRACT(MONTH FROM od.OrderDate) AND YEAR(CURRENT_DATE) = EXTRACT(YEAR FROM od.OrderDate) GROUP BY p.ProductName;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel AND UnitsOnOrder = 0;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1 GROUP BY p.ProductName;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.UnitsInStock > 0 GROUP BY p.ProductName ORDER BY TotalRevenue DESC LIMIT 3;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT p.ProductName, MONTH(o.OrderDate) AS Month, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY p.ProductName, MONTH(o.OrderDate);",
            "SELECT c.CategoryID, SUM(od.Quantity) AS TotalUnitsOrdered FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
            "SELECT ProductName, ReorderLevel FROM products ORDER BY ReorderLevel DESC LIMIT 1;",
            "SELECT ProductName FROM products WHERE Discontinued = 0 AND UnitsInStock = 0;",
            "SELECT SupplierID, AVG(UnitPrice) AS AverageUnitPrice FROM products GROUP BY SupplierID;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscountValue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
            "SELECT p.ProductName, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
            "SELECT CategoryID, SUM(od.Quantity) AS TotalQuantitySold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY CategoryID;",
            "SELECT CategoryID, COUNT(ProductID) AS DiscontinuedCount FROM products WHERE Discontinued = 1 GROUP BY CategoryID;",
            "SELECT CategoryID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY CategoryID ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT ProductName FROM products ORDER BY UnitsInStock DESC LIMIT 1;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY TotalSold DESC FETCH FIRST 5 ROWS ONLY;",
            "SELECT p.ProductName, EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS Performance FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, p.ProductName, Year, Month;",
            "SELECT SupplierID, ProductName, UnitsInStock FROM products WHERE UnitsInStock = (SELECT MIN(UnitsInStock) FROM products);",
            "SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
            "SELECT SupplierID, SUM(UnitsOnOrder * UnitPrice) AS TotalValueOnOrder FROM products GROUP BY SupplierID;",
            "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.UnitPrice < od.UnitPrice;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
            "SELECT p.ProductName, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalDiscount DESC;",
            "SELECT p.CategoryID, EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.CategoryID, Year, Month;",
            "SELECT p.ProductID, SUM(od.Quantity) AS TotalQuantitySold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT p.ProductID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS Revenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
            "SELECT ProductName FROM products WHERE Discontinued = 1;",
            "SELECT s.SupplierID, SUM(p.UnitsOnOrder) AS TotalUnitsOnOrder FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
            "SELECT p.ProductID, EXTRACT(MONTH FROM od.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, EXTRACT(MONTH FROM od.OrderDate);",
            "SELECT p.ProductID, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY TotalQuantity DESC LIMIT 5;",
            "SELECT p.SupplierID, AVG(p.UnitPrice) AS AverageUnitPrice FROM products p GROUP BY p.SupplierID;",
            "SELECT p.CategoryID, SUM(p.UnitsInStock) AS TotalUnitsInStock FROM products p GROUP BY p.CategoryID;",
            "SELECT p.ProductID, SUM(od.Quantity) AS PerformanceMetric FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= DATEADD(month, -6, CURRENT_DATE) GROUP BY p.ProductID;",
            "SELECT c.CategoryID, AVG(p.UnitPrice) AS AveragePrice FROM categories c JOIN products p ON c.CategoryID = p.CategoryID GROUP BY c.CategoryID;",
            "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount) AS TotalDiscountValue FROM [Order Details];",
            "SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
            "SELECT COUNT(DISTINCT ProductID) FROM [Order Details];",
            "SELECT ((SUM(CASE WHEN MONTH(od.OrderDate) = MONTH(CURRENT_DATE) THEN od.Quantity * od.UnitPrice ELSE 0 END) - SUM(CASE WHEN MONTH(od.OrderDate) = MONTH(CURRENT_DATE) - 1 THEN od.Quantity * od.UnitPrice ELSE 0 END)) / NULLIF(SUM(CASE WHEN MONTH(od.OrderDate) = MONTH(CURRENT_DATE) - 1 THEN od.Quantity * od.UnitPrice ELSE 0 END), 0)) * 100 AS RevenueGrowth FROM [Order Details] od WHERE YEAR(od.OrderDate) = YEAR(CURRENT_DATE);",
            "SELECT c.CategoryID FROM categories c WHERE NOT EXISTS (SELECT 1 FROM products p WHERE p.CategoryID = c.CategoryID AND p.UnitsInStock > 0);",
            "SELECT COUNT(*) FROM products WHERE UnitsInStock = 0 AND UnitsOnOrder = 0;",
            "SELECT SupplierID FROM products WHERE Discontinued = 1;",
            "SELECT AVG(UnitPrice) FROM products WHERE UnitsInStock > 0;",
            "SELECT COUNT(ProductID) FROM products WHERE ReorderLevel > UnitsInStock;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) GROUP BY p.ProductName ORDER BY InventoryTurnoverRatio DESC LIMIT 1;",
            "SELECT ProductName FROM products WHERE UnitsOnOrder = 0 AND ProductID IN (SELECT DISTINCT od.ProductID FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH));",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS Revenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE YEAR(order_date) = YEAR(CURDATE()) GROUP BY p.ProductName ORDER BY Revenue DESC;",
            "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT MAX(Discount) FROM [Order Details] WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
            "SELECT p.CategoryID, AVG(p.UnitPrice) AS AvgPrice FROM products p GROUP BY p.CategoryID ORDER BY AvgPrice DESC;",
            "SELECT COUNT(*) FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT s.SupplierID, COUNT(p.ProductID) AS ActiveProducts FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.Discontinued = 0 GROUP BY s.SupplierID ORDER BY ActiveProducts DESC LIMIT 3;",
            "SELECT p.ProductName, (p.UnitPrice * p.UnitsInStock) AS StockValue FROM products p;",
            "SELECT COUNT(DISTINCT ProductID) AS NumberOfProducts FROM [Order Details] GROUP BY ProductID HAVING SUM(Quantity) > 1000;",
            "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY p.ProductID ORDER BY SUM(od.Quantity * od.UnitPrice) DESC LIMIT 1;",
            "SELECT p.ProductName FROM products p WHERE p.Discontinued = 0 AND p.ProductID IN (SELECT od.ProductID FROM [Order Details] od GROUP BY od.ProductID HAVING SUM(od.Quantity) > 500);",
            "SELECT AVG(Discount) FROM [Order Details];",
            "SELECT p.ProductName FROM products p JOIN categories c ON p.CategoryID = c.CategoryID WHERE p.UnitPrice > 2 * (SELECT AVG(p1.UnitPrice) FROM products p1 WHERE p1.CategoryID = p.CategoryID);",
            "SELECT ProductName, SUM([Order Details].Quantity) AS TotalSold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY TotalSold DESC LIMIT 5;",
            "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;",
            "SELECT CategoryID, SUM([Order Details].Quantity) AS TotalSold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID ORDER BY TotalSold DESC LIMIT 1;",
            "SELECT COUNT(*) AS DiscontinuedCount FROM products WHERE Discontinued = 1;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Quantity) AS TotalQuantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
            "SELECT SupplierID, COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1 GROUP BY SupplierID HAVING COUNT(*) > 3;",
            "SELECT p.ProductName, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;",
            "SELECT products.ProductName, AVG([Order Details].Quantity) AS AverageQuantityOrdered FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName;",
            "SELECT ProductName, UnitsOnOrder * UnitPrice AS TotalOnOrderValue FROM products;",
            "SELECT COUNT(DISTINCT OrderID) FROM [Order Details] WHERE Discount > 0.2;",
            "SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
            "SELECT ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName HAVING SUM(Quantity) < (SELECT AVG(total_quantity) FROM (SELECT SUM(Quantity) AS total_quantity FROM [Order Details] GROUP BY ProductID) AS subquery) AND AVG(products.UnitsInStock) > (SELECT AVG(UnitsInStock) FROM products)",
            "SELECT p.ProductName, (SUM(od.Quantity * od.UnitPrice) / (SELECT SUM(Quantity * UnitPrice) FROM [Order Details])) * 100 AS RevenuePercentage FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;",
            "SELECT ProductName FROM (SELECT ProductName, DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Quantity) AS QuantitySold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ProductName, Month) sub WHERE QuantitySold < LAG(QuantitySold) OVER (PARTITION BY ProductName ORDER BY Month);",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSold DESC LIMIT 5;",
            "SELECT SupplierID, AVG(UnitPrice) FROM products GROUP BY SupplierID;",
            "SELECT ProductName FROM products WHERE UnitsInStock > ReorderLevel;",
            "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) DESC LIMIT 1;",
            "SELECT AVG(UnitsOnOrder) FROM products WHERE Discontinued = 0;",
            "SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
            "SELECT p.CategoryID, SUM(od.Quantity) FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID;",
            "SELECT ProductName FROM products WHERE UnitsInStock = 0 AND UnitsOnOrder > 0;",
            "SELECT p.SupplierID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",
            "SELECT ProductName, ReorderLevel FROM products ORDER BY ReorderLevel DESC LIMIT 5;",
            "SELECT 100.0 * COUNT(*) / (SELECT COUNT(*) FROM products) AS DiscontinuedPercentage FROM products WHERE Discontinued = 1;",
            "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID HAVING AVG(od.Discount) > 0.1;",
            "SELECT p.ProductName, EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS Performance FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, p.ProductName, EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate);",
            "SELECT SupplierID FROM products WHERE UnitsInStock > ReorderLevel GROUP BY SupplierID ORDER BY COUNT(ProductID) DESC LIMIT 1;",
            "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount = 0 GROUP BY p.ProductID HAVING COUNT(od.OrderID) > 50;",
            "SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID;",
            "SELECT p.ProductID, EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate);",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
            "SELECT Discount, COUNT(*) AS Frequency FROM [Order Details] GROUP BY Discount ORDER BY Frequency DESC LIMIT 1;",
            "SELECT p.SupplierID, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",
            "SELECT c.CategoryID, AVG(od.Discount) AS AvgDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID;",
            "SELECT MAX(UnitPrice) - MIN(UnitPrice) AS PriceDifference FROM products;",
            "SELECT SupplierID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY SupplierID;",
            "SELECT CategoryID, COUNT(ProductID) AS TotalProducts FROM products GROUP BY CategoryID;",
            "SELECT ProductName FROM products WHERE ReorderLevel IS NULL;",
            "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, SUM(od.Quantity) AS TotalSales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE od.ProductID = ? GROUP BY EXTRACT(MONTH FROM o.OrderDate) ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID;",
            "SELECT COUNT(*) AS NumberOfProducts FROM products WHERE UnitsOnOrder > UnitsInStock;",
            "SELECT p.ProductName, COUNT(od.OrderID) AS OrderFrequency, EXTRACT(MONTH FROM o.OrderDate) AS Month FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, EXTRACT(MONTH FROM o.OrderDate) ORDER BY OrderFrequency DESC;",
            "SELECT SupplierID FROM products WHERE ProductID = (SELECT ProductID FROM [Order Details] GROUP BY ProductID ORDER BY SUM(Quantity) DESC LIMIT 1);",
            "SELECT ProductID, (SUM(CASE WHEN EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) THEN Quantity ELSE 0 END) - SUM(CASE WHEN EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) - 1 THEN Quantity ELSE 0 END)) AS SalesVariance FROM [Order Details] GROUP BY ProductID;",
            "SELECT AVG(CAST(SUBSTRING_INDEX(QuantityPerUnit, ' ', 1) AS UNSIGNED)) AS AvgQuantityPerUnit FROM products WHERE UnitsInStock > 0;",
            "SELECT ProductName, SUM([Order Details].Quantity) AS TotalOrdered FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY TotalOrdered DESC;",
            "SELECT SupplierID, AVG(UnitPrice) AS AverageUnitPrice FROM products GROUP BY SupplierID;",
            "SELECT COUNT(ProductID) AS DiscontinuedProducts FROM products WHERE Discontinued = 1;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID;",
            "SELECT ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY SUM([Order Details].Quantity) DESC LIMIT 1;",
            "SELECT EXTRACT(MONTH FROM order_date) AS Month, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnover FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY Month;",
            "SELECT ProductName, SUM([Order Details].Discount * [Order Details].Quantity * [Order Details].UnitPrice) AS TotalDiscountGiven FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount > 0 GROUP BY ProductName;",
            "SELECT ProductName FROM products WHERE UnitsOnOrder = 0;",
            "SELECT DISTINCT ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount > 0;",
            "SELECT ProductName, COUNT([Order Details].OrderID) AS OrderCount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;",
            "SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
            "SELECT ProductName, AVG([Order Details].Quantity) AS AverageQuantityOrdered FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;",
            "SELECT ProductName, SUM(CASE WHEN Discount > 0 THEN [Order Details].Quantity ELSE 0 END) * 100.0 / SUM([Order Details].Quantity) AS DiscountSalesPercentage FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;",
            "SELECT ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) GROUP BY ProductName HAVING SUM([Order Details].Quantity) > (SELECT COALESCE(SUM([Order Details].Quantity), 0) FROM [Order Details] WHERE EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) - 1);",
            "SELECT ProductName, [Order Details].Discount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount = (SELECT MAX(Discount) FROM [Order Details]) LIMIT 1;",
            "SELECT ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName HAVING SUM([Order Details].Quantity) < MIN(ReorderLevel);",
            "SELECT ProductName, UnitsInStock * 1.0 / SUM([Order Details].Quantity) AS StockToSaleRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 0;",
            "SELECT products.ProductName, SUM([Order Details].Quantity * (1 - [Order Details].Discount) * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
            "SELECT ProductName, AVG([Order Details].Discount) AS AverageDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;",
            "SELECT CategoryID, ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID, ProductName;",
            "SELECT products.SupplierID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.SupplierID;",
            "SELECT ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(UnitsInStock), 0) AS InventoryTurnover FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY InventoryTurnover DESC;",
            "SELECT ProductName, SUM([Order Details].Quantity) AS MonthlySales, EXTRACT(MONTH FROM OrderDate) AS Month FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ProductName, Month ORDER BY ProductName, Month;",
            "SELECT ProductName, SUM(Discount) AS TotalDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY TotalDiscount DESC;",
            "SELECT ProductName, EXTRACT(MONTH FROM OrderDate) AS Month, SUM([Order Details].Quantity) AS MonthlyQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ProductName, EXTRACT(MONTH FROM OrderDate) ORDER BY ProductName, EXTRACT(MONTH FROM OrderDate);",
            "SELECT ProductName, UnitsOnOrder FROM products ORDER BY UnitsOnOrder DESC;",
            "SELECT OrderID, AVG(UnitPrice) AS AveragePrice FROM [Order Details] GROUP BY OrderID;",
            "SELECT ProductID, COUNT(DISTINCT OrderID) AS OrderCount FROM [Order Details] GROUP BY ProductID;",
            "SELECT ProductName, MAX(Quantity) AS MaxOrderQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;",
            "SELECT CategoryID, 100.0 * COUNT(CASE WHEN Discontinued = 1 THEN 1 END) / COUNT(*) AS DiscontinuedPercentage FROM products GROUP BY CategoryID;",
            "SELECT ProductName, COUNT(*) AS ReorderEvents, AVG(DATEDIFF(day, ReorderLevelDate, ReplenishDate)) AS AverageReplenishTime FROM ReorderHistory GROUP BY ProductName;",
            "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID ORDER BY TotalSales DESC;",
            "SELECT ProductName, 100.0 * SUM([Order Details].Quantity * [Order Details].UnitPrice) / (SELECT SUM(Quantity * UnitPrice) FROM [Order Details]) AS RevenueContribution FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
            "SELECT products.ProductID, SUM([Order Details].Quantity) FROM [Order Details] JOIN products ON products.ProductID = [Order Details].ProductID WHERE [Order Details].OrderID IN (SELECT OrderID FROM orders WHERE OrderDate BETWEEN DATEADD(month, -1, GETDATE()) AND GETDATE()) GROUP BY products.ProductID;",
            "SELECT SupplierID, SUM(UnitsInStock + UnitsOnOrder) AS TotalUnits FROM products GROUP BY SupplierID ORDER BY TotalUnits DESC;",
            "SELECT ProductName FROM products WHERE ProductID IN (SELECT ProductID FROM [Order Details] GROUP BY ProductID HAVING SUM(Quantity) > 0) AND UnitsInStock > 0;",
            "SELECT SupplierID, SUM(UnitsOnOrder) FROM products GROUP BY SupplierID;",
            "SELECT OrderID, ProductID, (Discount * 100) AS DiscountRate FROM [Order Details];",
            "SELECT AVG(Discount) FROM [Order Details];",
            "SELECT ProductID FROM [Order Details] GROUP BY ProductID ORDER BY SUM(Quantity) DESC LIMIT 1;",
            "SELECT products.ProductID, DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductID, DATE_TRUNC('month', orders.OrderDate) ORDER BY TotalQuantity DESC;",
            "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID;",
            "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT SUM((UnitPrice * Quantity) - (UnitPrice * Quantity * Discount)) AS TotalRevenue FROM [Order Details];",
            "SELECT ProductID FROM (SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID) AS ProductPerformance WHERE TotalQuantity > (SELECT AVG(TotalQuantity) FROM (SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID) AS AvgPerformance);",
            "SELECT SupplierID FROM products WHERE Discontinued = 1;",
            "SELECT OrderID FROM [Order Details] ORDER BY Discount DESC LIMIT 1;",
            "SELECT ProductID, SUM(Quantity) AS TotalOrdered FROM [Order Details] GROUP BY ProductID;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS Revenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
            "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
            "SELECT ProductID, ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
            "SELECT od.ProductID, p.ProductName, SUM(od.Quantity) AS TotalOrdered FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATEADD(month, -1, CURRENT_DATE) GROUP BY od.ProductID, p.ProductName ORDER BY TotalOrdered DESC FETCH FIRST 1 ROW ONLY;",
            "SELECT p.ProductID, (SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0)) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY InventoryTurnover DESC;",
            "SELECT ProductID, UnitsOnOrder FROM products;",
            "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * (od.UnitPrice - od.UnitPrice * od.Discount)) AS Revenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1 GROUP BY p.ProductID, p.ProductName ORDER BY Revenue DESC;",
            "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, p.CategoryID, SUM(od.Quantity * od.UnitPrice) AS MonthlySales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY Month, p.CategoryID ORDER BY Month;",
            "SELECT p.ProductID, COUNT(DISTINCT od.OrderID) AS UniqueOrders FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY UniqueOrders DESC;",
            "SELECT AVG(Quantity) AS AverageQuantityOrdered FROM [Order Details];",
            "SELECT s.SupplierID, s.SupplierName, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID, s.SupplierName ORDER BY AverageDiscount DESC;",
            "SELECT p.ProductID, p.ProductName, p.UnitsInStock - p.ReorderLevel AS ReorderStatus FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY SUM(od.Quantity) DESC LIMIT 10;",
            "SELECT p.ProductID, p.ProductName, p.UnitPrice, SUM(od.Quantity) AS TotalOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName, p.UnitPrice ORDER BY TotalOrdered DESC;",
            "SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS Revenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID ORDER BY Revenue DESC;",
            "SELECT CategoryID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY CategoryID;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT p.ProductName, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY AverageDiscount DESC;",
            "SELECT COUNT(ProductID) FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT SupplierID, SUM(od.Quantity) AS TotalUnitsOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY SupplierID;",
            "SELECT c.CategoryID, SUM(od.Quantity * (od.UnitPrice * (1 - od.Discount))) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT p.ProductName, AVG(od.Discount) * 100 AS AverageDiscountPercentage FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
            "SELECT SUM(UnitsInStock) FROM products WHERE Discontinued = 1;",
            "SELECT ProductName, UnitsOnOrder / NULLIF(UnitsInStock, 0) AS OrderToStockRatio FROM products ORDER BY OrderToStockRatio DESC;",
            "SELECT ProductName, UnitsInStock * UnitPrice AS UnsoldCost FROM products WHERE UnitsInStock > 0;",
            "SELECT ProductName, ReorderLevel - AVG(UnitsInStock) OVER (PARTITION BY ProductID) AS ReorderDifference FROM products;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenueAfterDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalRevenueAfterDiscount DESC LIMIT 1;",
            "SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSold DESC LIMIT 5;",
            "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
            "SELECT COUNT(ProductName) AS NumberOfProducts FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
            "SELECT p.ProductID, p.ProductName FROM products p WHERE p.UnitsInStock = 0 AND p.UnitsOnOrder > 0;",
            "SELECT c.CategoryID, c.CategoryName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN categories c ON p.CategoryID = c.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryID, c.CategoryName;",
            "SELECT p.ProductID, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS ProductPerformance FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, EXTRACT(MONTH FROM o.OrderDate);",
            "SELECT p.ProductID, (SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0)) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY InventoryTurnoverRatio DESC LIMIT 1;",
            "SELECT p.ProductID, SUM(od.Quantity * (od.UnitPrice - od.Discount)) - SUM(od.Quantity * p.UnitPrice) AS ProfitMargin FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY ProfitMargin DESC;",
            "SELECT p.SupplierID, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",
            "SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(p.UnitsInStock) AS InventoryLevel FROM products p JOIN orders o ON p.ProductID = o.OrderID GROUP BY EXTRACT(MONTH FROM o.OrderDate);",
            "SELECT p.ProductID, p.ProductName, od.Discount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID ORDER BY od.Discount DESC LIMIT 1;",
            "SELECT p.CategoryID, AVG(p.UnitPrice) AS AveragePrice FROM products p GROUP BY p.CategoryID;",
            "SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL;",
            "SELECT (COUNT(*) FILTER(WHERE UnitsInStock > ReorderLevel) * 100.0 / COUNT(*)) AS PercentageAbove FROM products;",
            "SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS TotalUnitsOrdered FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= CURRENT_DATE - INTERVAL '3 months' GROUP BY EXTRACT(MONTH FROM o.OrderDate) ORDER BY Month DESC;",
            "SELECT SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscount FROM [Order Details] od;",
            "SELECT CORR(od.UnitPrice, od.Quantity) AS Correlation FROM \"Order Details\" od;",
            "SELECT ProductName FROM products WHERE Discontinued = 1;",
            "SELECT ProductName, UnitsInStock FROM products ORDER BY UnitsInStock DESC;",
            "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalOrdered FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
            "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
            "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnover FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;",
            "SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
            "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount) AS TotalDiscountLoss FROM [Order Details];",
            "SELECT products.ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName HAVING SUM([Order Details].Quantity) > products.ReorderLevel;",
            "SELECT ProductName FROM products ORDER BY ReorderLevel DESC LIMIT 1;",
            "SELECT SupplierID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS SupplierSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID ORDER BY SupplierSales DESC LIMIT 3;",
            "SELECT DISTINCT products.ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE products.UnitsInStock = 0;",
            "SELECT SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products WHERE UnitsOnOrder > 0 AND UnitsInStock = 0;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT COUNT(*) FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
            "SELECT SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 1;",
            "SELECT p.ProductID, SUM(od.Quantity * od.UnitPrice) / CASE WHEN AVG(p.UnitsInStock) = 0 THEN NULL ELSE AVG(p.UnitsInStock) END AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY InventoryTurnover DESC LIMIT 5;",
            "SELECT p.ProductID FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE EXTRACT(MONTH FROM CURRENT_DATE) = EXTRACT(MONTH FROM CURRENT_DATE) GROUP BY p.ProductID ORDER BY SUM(od.Quantity) DESC LIMIT 1;",
            "SELECT c.CategoryID, SUM(po.UnitsOnOrder) AS TotalOrderQuantity FROM products po JOIN categories c ON po.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
            "SELECT ProductName FROM products WHERE ReorderLevel > UnitsInStock;",
            "SELECT SUM(od.Quantity) FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 0;",
            "SELECT p.ProductID, ((SUM(CASE WHEN EXTRACT(MONTH FROM od.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) THEN od.Quantity ELSE 0 END) - SUM(CASE WHEN EXTRACT(MONTH FROM od.OrderDate) = EXTRACT(MONTH FROM DATE_ADD('month', -1, CURRENT_DATE)) THEN od.Quantity ELSE 0 END)) / NULLIF(SUM(CASE WHEN EXTRACT(MONTH FROM od.OrderDate) = EXTRACT(MONTH FROM DATE_ADD('month', -1, CURRENT_DATE)) THEN od.Quantity ELSE 0 END), 0)) * 100 AS SalesGrowth FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY SalesGrowth DESC LIMIT 1;",
            "SELECT SupplierID, AVG(UnitsInStock) AS AvgInventory FROM products GROUP BY SupplierID;",
            "SELECT ProductName FROM products WHERE ReorderLevel < (SELECT AVG(ReorderLevel) FROM products);",
            "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalCategorySales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID WHERE EXTRACT(YEAR FROM od.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY c.CategoryID;",
            "SELECT QuantityPerUnit, COUNT(*) AS Frequency FROM products GROUP BY QuantityPerUnit ORDER BY Frequency DESC LIMIT 1;",
            "SELECT CORR(od.Discount, od.Quantity) AS DiscountSalesCorrelation FROM [Order Details] od;",
            "SELECT EXTRACT(MONTH FROM o.OrderDate) AS SalesMonth, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY SalesMonth ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1 GROUP BY p.ProductID, p.ProductName ORDER BY SUM(od.Quantity * od.UnitPrice) DESC LIMIT 1;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IN (SELECT OrderID FROM orders WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE) AND YEAR(OrderDate) = YEAR(CURRENT_DATE)) GROUP BY p.ProductName ORDER BY TotalOrdered DESC;",
            "SELECT c.CategoryName, AVG(p.UnitsInStock) AS AvgStock FROM categories c JOIN products p ON c.CategoryID = p.CategoryID GROUP BY c.CategoryName;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT p.ProductName FROM products p WHERE p.ProductID NOT IN (SELECT DISTINCT od.ProductID FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATEADD(QUARTER, -1, CURRENT_DATE));",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 0 GROUP BY p.ProductName ORDER BY TotalRevenue DESC LIMIT 5;",
            "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
            "SELECT s.SupplierName, SUM(p.UnitsOnOrder) FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.UnitsOnOrder > 0 GROUP BY s.SupplierName;",
            "SELECT s.SupplierName, COUNT(DISTINCT p.ProductID) AS ProductCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierName;",
            "SELECT c.CategoryName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalSales FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryName;",
            "SELECT od.OrderID, SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscount FROM [Order Details] od GROUP BY od.OrderID;",
            "SELECT ProductName, UnitPrice - MIN(od.UnitPrice * (1 - od.Discount)) AS Margin FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY ProductName ORDER BY Margin DESC LIMIT 5;",
            "SELECT p.ProductName, AVG(od.Quantity) AS AvgOrderQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY AvgOrderQuantity DESC;",
            "SELECT AVG(Discount) AS OverallAvgDiscount FROM [Order Details];",
            "SELECT s.SupplierName, COUNT(p.ProductID) AS ProductCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierName ORDER BY ProductCount DESC LIMIT 5;",
            "SELECT SUM(UnitsInStock * UnitPrice) AS TotalValue FROM products WHERE Discontinued = 1;",
            "SELECT ProductName FROM products WHERE Discontinued = 0;",
            "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details] WHERE Discount > 0);",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC;",
            "SELECT CategoryID, AVG(UnitPrice) FROM products GROUP BY CategoryID;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 0;",
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM products)) AS DiscontinuedPercentage FROM products WHERE Discontinued = 1;",
            "SELECT p.ProductName, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalDiscount DESC;",
            "SELECT ProductName, SUM(UnitsOnOrder) AS TotalOnOrder FROM products GROUP BY ProductName;",
            "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS Revenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID ORDER BY Revenue DESC FETCH FIRST 3 ROWS ONLY;",
            "SELECT DATE_TRUNC('month', o.OrderDate) AS OrderMonth, COUNT(DISTINCT od.ProductID) FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY OrderMonth;",
            "SELECT DATE_TRUNC('month', o.OrderDate) AS OrderMonth, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS MonthlyRevenue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY OrderMonth ORDER BY OrderMonth DESC;",
            "SELECT s.SupplierID FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.Discontinued = 1 GROUP BY s.SupplierID HAVING COUNT(p.ProductID) > 5;",
            "SELECT p.CategoryID, AVG(od.Quantity) AS AvgQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.CategoryID;",
            "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, p.ProductName, SUM(od.Quantity) AS MonthlyQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY Month, p.ProductName ORDER BY Month;",
            "SELECT p.ProductName FROM products p WHERE p.Discontinued = 1 AND p.ProductID IN (SELECT od.ProductID FROM [Order Details] od WHERE od.Quantity > 0) ORDER BY p.ProductID;",
            "SELECT Discount, COUNT(*) AS Count FROM [Order Details] GROUP BY Discount ORDER BY Count DESC;",
            "SELECT c.CategoryID, STDDEV(p.UnitPrice) FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
            "SELECT od1.ProductID, od2.ProductID, COUNT(*) AS Count FROM [Order Details] od1 JOIN [Order Details] od2 ON od1.OrderID = od2.OrderID AND od1.ProductID < od2.ProductID GROUP BY od1.ProductID, od2.ProductID ORDER BY Count DESC;",
            "SELECT c.CategoryID, AVG(od.Discount) AS AvgDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
            "SELECT s.SupplierID, SUM(od.Quantity) AS TotalQuantity FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY TotalQuantity DESC;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS SalesRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SalesRevenue DESC LIMIT 3;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1 GROUP BY p.ProductName;",
            "SELECT ProductName FROM products ORDER BY UnitPrice DESC LIMIT 1;",
            "SELECT ProductName, (UnitsInStock - UnitsOnOrder) AS StockDifference FROM products ORDER BY StockDifference DESC;",
            "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0.2;",
            "SELECT SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscounts FROM [Order Details] od;",
            "SELECT p.SupplierID, AVG(p.UnitsOnOrder) AS AvgUnitsOnOrder FROM products p GROUP BY p.SupplierID;",
            "SELECT c.CategoryID FROM categories c JOIN products p ON c.CategoryID = p.CategoryID GROUP BY c.CategoryID HAVING COUNT(p.ProductID) = SUM(CASE WHEN p.UnitsInStock < p.ReorderLevel THEN 1 ELSE 0 END);",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount = 0 GROUP BY p.ProductName;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE MONTH(od.OrderDate) = MONTH(CURRENT_DATE) - 1 AND YEAR(od.OrderDate) = YEAR(CURRENT_DATE) GROUP BY p.ProductID, p.ProductName ORDER BY TotalSales DESC;",
            "SELECT ProductName FROM products WHERE Discontinued = 0 AND UnitsInStock = 0;",
            "SELECT p.ProductName, SUM(od.Quantity) AS SalesQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID HAVING SUM(od.Quantity) < 10;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
            "SELECT s.SupplierID, COUNT(p.ProductID) AS ProductCount FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.UnitsInStock > 0 GROUP BY s.SupplierID ORDER BY ProductCount DESC LIMIT 1;",
            "SELECT p.CategoryID, AVG(p.UnitPrice) AS AveragePrice FROM products p GROUP BY p.CategoryID;",
            "SELECT ProductName FROM products WHERE Discontinued = 1;",
            "SELECT ProductName FROM products ORDER BY UnitsInStock DESC LIMIT 1;",
            "SELECT AVG(od.Discount) AS AverageDiscount FROM [Order Details] od;",
            "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID HAVING SUM(od.Quantity) > p.ReorderLevel;",
            "SELECT SupplierID, SUM(UnitsOnOrder) FROM products GROUP BY SupplierID;",
            "SELECT ProductName, UnitsInStock, UnitsOnOrder FROM products;",
            "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY TotalSold ASC LIMIT 1;",
            "SELECT AVG(ReorderLevel) FROM products;",
            "SELECT c.CategoryID, COUNT(p.ProductID) AS DiscontinuedCount FROM products p JOIN categories c ON p.CategoryID = c.CategoryID WHERE p.Discontinued = 1 GROUP BY c.CategoryID ORDER BY DiscontinuedCount DESC LIMIT 1;",
            "SELECT s.SupplierID, SUM(od.Quantity) FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID;",
            "SELECT p.ProductName FROM products p WHERE p.UnitsInStock < p.ReorderLevel;",
            "SELECT (CAST(SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS DiscontinuedPercentage FROM products;",
            "SELECT p.ProductName, CORR(p.UnitPrice, od.Quantity) AS PriceQuantityCorrelation FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
            "SELECT p.ProductName, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS MonthlySales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, Month ORDER BY p.ProductName, Month;",
            "SELECT p.ProductName, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS MonthlySales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, EXTRACT(MONTH FROM o.OrderDate);",
            "SELECT p.ProductName, AVG(od.Quantity) AS AvgQuantityPerOrder FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
            "SELECT p.SupplierID, p.ProductName FROM products p WHERE p.UnitsInStock < (SELECT AVG(UnitsInStock) FROM products);",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
            "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity) > MAX(p.ReorderLevel);",
            "SELECT p.ProductName, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, EXTRACT(MONTH FROM o.OrderDate);",
            "SELECT SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalDiscountedValue FROM [Order Details] od;",
            "SELECT c.CategoryName, SUM(od.Quantity) AS TotalQuantity FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryName ORDER BY TotalQuantity DESC LIMIT 1;",
            "SELECT COUNT(*) FROM products WHERE UnitsInStock <= ReorderLevel;",
            "SELECT s.SupplierName, SUM(p.UnitPrice * p.UnitsInStock) AS TotalStockValue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierName;",
            "SELECT p.ProductName, VARIANCE(od.Quantity) AS SalesVariance FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SalesVariance DESC LIMIT 1;",
            "SELECT p.ProductName, AVG(CASE WHEN LAG(SUM(od.Quantity), 1) OVER (PARTITION BY p.ProductID ORDER BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate)) = 0 THEN NULL ELSE (SUM(od.Quantity) - LAG(SUM(od.Quantity), 1) OVER (PARTITION BY p.ProductID ORDER BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate))) / LAG(SUM(od.Quantity), 1) OVER (PARTITION BY p.ProductID ORDER BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate)) END) AS AvgSalesGrowth FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, p.ProductName, EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate);",
            "SELECT p.ProductName FROM products p WHERE p.ProductID NOT IN (SELECT od.ProductID FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE));",
            "SELECT p.ProductName, AVG(od.Quantity) AS AverageOrderQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY AverageOrderQuantity DESC LIMIT 1;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSold DESC LIMIT 5;"
        ],
        "reviews": [
            "The query is correct. It calculates the total sales for each product by summing the product of quantity and unit price from the Order Details table, correctly joining on ProductID and grouping by ProductID.",
            "The SQL query is correct. It accurately selects the ProductID and ProductName from the products table where the Discontinued field is set to 1, indicating the product is discontinued.",
            "The SQL query is correct. It calculates the total inventory value per supplier by multiplying the units in stock by the unit price and grouping by the SupplierID.",
            "The SQL query is correct. It selects the CategoryID and counts the number of ProductID for each category, grouping by CategoryID, and orders the results in descending order by the number of products, returning the top result with LIMIT 1.",
            "The query correctly retrieves the ProductID and UnitsOnOrder from the products table, which answers how many units of each product are currently on order. No changes needed.",
            "The query is correct. It selects ProductID and calculates the sum of Quantity from the [Order Details] table, groups by ProductID, orders by the calculated SalesVolume in descending order, and limits the result to one row, which fulfills the requirement of finding the product with the highest sales volume.",
            "The SQL query is correct. It accurately calculates the average discount rate from the 'Order Details' table.",
            "The query correctly finds the suppliers providing products with above-average unit prices by comparing each product's unit price to the average unit price across all products. The DISTINCT keyword ensures no duplicate supplier entries.",
            "The SQL query is correct. It counts the distinct ProductID from the [Order Details] table to determine how many different products have been sold in total.",
            "The original query did not include a JOIN between [Order Details] and products to get the correct ProductID. Also, the table alias for 'ProductID' should specify the table to avoid ambiguity.",
            "The SQL query is correct. It selects products where the units in stock are less than the reorder level, indicating the need to reorder.",
            "The original query incorrectly groups by ProductID and counts each occurrence. The corrected query counts the distinct ProductIDs with a discount greater than 10%.",
            "The SQL query is almost correct, but it is missing the 'categories' table definition in the schema. Assuming the 'categories' table has columns 'CategoryID' and 'CategoryName', the query is correct.",
            "The SQL query correctly calculates the average quantity per order for each product.",
            "The query is correct. It selects products from the 'products' table whose ProductID is not present in the 'Order Details' table, effectively finding products that have never been ordered.",
            "The SQL query is mostly correct but calculating inventory turnover this way does not take into account orders over a time period, which could lead to incorrect aggregation. Additionally, it's better to exclude discontinued products to get a more accurate analysis. However, since the business metric does not specify time-based filtering, the calculation for individual products is handled correctly within the schema's context.",
            "The original query lists product details but does not answer the question of 'how many'. I've corrected it to count the number of products below their reorder level.",
            "The query is almost correct but does not specify the table for the 'Discount' column, which is necessary since 'Discount' is from '[Order Details]' table. The corrected query explicitly mentions '[Order Details].Discount' to avoid ambiguity.",
            "The query is not correct as it assumes an 'OrderDate' column exists in the '[Order Details]' table, which is not defined in the schema. A JOIN with the 'orders' table, assumed to contain 'OrderDate', is likely needed. Without the 'orders' table schema, full correction isn't possible. Ensure 'OrderDate' exists in the appropriate table and adjust the query syntax accordingly.",
            "The query correctly selects discontinued products that have remaining stock by filtering for products where 'Discontinued' is 1 and 'UnitsInStock' is greater than 0. No changes needed.",
            "The SQL query is correct. It selects the ProductID and calculates the total quantity sold for each product by summing up the Quantity column in the [Order Details] table and grouping by ProductID.",
            "The original query did not account for discounts applied to the products. To correctly calculate the total revenue, the discount should be deducted from each product's revenue contribution.",
            "The SQL query is correct. It retrieves the ProductID and the UnitsInStock for each product, which answers the question accurately.",
            "The query correctly retrieves distinct SupplierIDs for products that are out of stock (UnitsInStock = 0). The query is correct.",
            "The SQL query is correct. It calculates the average unit price of products grouped by category, which answers the business question accurately.",
            "The SQL query correctly identifies discontinued products that are still in stock.",
            "The query correctly calculates the inventory turnover ratio per product by joining the 'Order Details' and 'products' tables. It sums the product of Quantity and UnitPrice from 'Order Details' and divides by the average UnitsInStock for each ProductID. However, ensure that the AVG(UnitsInStock) is calculated appropriately per monthly requirement if necessary based on your granularity needs.",
            "The original query incorrectly included UnitsOnOrder in the calculation. The condition should only compare UnitsInStock with ReorderLevel to determine if restocking is needed.",
            "The SQL query is mostly correct, but it uses a LIMIT clause which is not part of standard ANSI SQL. Replace it with a FETCH clause for ANSI SQL compliance.",
            "The query is correct as it calculates the total revenue from orders with quantities greater than 10 by multiplying UnitPrice and Quantity for each relevant order.",
            "The SQL query correctly calculates the average discount applied per product category, ordering the results to find the highest average discount. It appropriately uses a JOIN between the 'Order Details' and 'products' tables and applies GROUP BY and ORDER BY clauses correctly.",
            "The SQL query correctly identifies products that have never been ordered by selecting ProductIDs from the products table that are not present in the [Order Details] table.",
            "The SQL query is correct. It accurately calculates the average discount from the [Order Details] table.",
            "The SQL query correctly calculates the average price of products for each supplier and orders the results in descending order by average price. The query appropriately uses GROUP BY and ORDER BY clauses, making it correct for the given question.",
            "The original query did not account for discounts applied to the products. The corrected query includes this by multiplying by (1 - [Order Details].Discount) to accurately calculate the total revenue.",
            "The SQL query is missing the reference to the 'orders' table in the schema, which means 'OrderDate' might not be correctly accessed. Also, the table needs to be explicitly added in the schema for the JOIN to work. Assuming 'orders' has 'OrderDate', the query is otherwise correct. If 'OrderDate' is not part of 'orders', adjustments would be needed.",
            "The SQL query correctly selects the ProductID and calculates the average discount from the [Order Details] table. It groups the results by ProductID, orders them in descending order of the average discount, and limits the results to the top 3 products. The query is correct.",
            "The original query attempts to select SupplierIDs and their product counts but doesn't provide the count of such suppliers. The corrected query counts the number of suppliers satisfying the condition.",
            "The SQL query correctly calculates the total discount for each order by multiplying the discount, unit price, and quantity. It groups by OrderID, orders the results by TotalDiscount in descending order, and limits the output to the top result. The query is correct as per the given question.",
            "The query is correct. It calculates the potential revenue for products that have not appeared in any orders by excluding ProductIDs present in the [Order Details] table.",
            "The query is correct. It joins the 'Order Details' table and 'products' table using the 'ProductID'. It sums the 'Quantity' for each 'ProductName' to determine sales volume, and orders the results in descending order to find the top 5 products by sales volume. The use of 'LIMIT 5' correctly restricts the output to the top 5 products.",
            "The original query tries to join the 'suppliers' table, which doesn't seem to be defined in the schema. The correction removes the join and selects directly from 'products'. Additionally, there's no need to select the SupplierID from 'suppliers' since it's included in 'products'.",
            "The SQL query is correct. It selects the average price of products where the 'Discontinued' flag is set to 0, meaning they are not discontinued.",
            "The SQL query correctly counts the number of products where the units in stock are below the reorder level. No corrections are needed.",
            "The query correctly identifies the product with the highest inventory turnover ratio by calculating the ratio for each product and ordering it in descending order. However, ensure division by zero is handled when calculating the average units in stock.",
            "The SQL query correctly calculates the total revenue for each product by multiplying the quantity by the unit price and accounting for the discount. The query joins 'Order Details' and 'products' tables and groups the results by product name, which aligns with the business question.",
            "The original query lists product names and units in stock, but the business question asks for the total number of units in stock. The query should sum the 'UnitsInStock' for discontinued products.",
            "The SQL query correctly answers the business question. It groups the data by the 'Discount' field in the '[Order Details]' table and counts the frequency of each discount. It then orders the results in descending order of frequency and limits the output to 1 row, effectively selecting the most frequently applied discount.",
            "The original query incorrectly counts the number of products per category. It should calculate the sum of 'UnitsOnOrder' for each category.",
            "The SQL query correctly calculates the average discount applied across all products. It doesn't need to change unless the requirement is to average discounts for each product individually, which isn't indicated in the question given.",
            "The SQL query correctly counts the distinct SupplierIDs for products that have zero units on order. It matches the business question, so no corrections are needed.",
            "The query is correct and answers the question as intended.",
            "The SQL query is correct. It properly calculates the total revenue for products provided by each supplier by joining the '[Order Details]' and 'products' tables, then grouping the results by 'SupplierID' and summing the revenue for each supplier.",
            "The query correctly calculates the average discount for each product and orders the results in descending order to identify the product with the highest average discount. The use of JOIN between 'Order Details' and 'products' is correct, and the appropriate grouping and aggregation are applied. LIMIT 1 ensures only the top result is returned. The query is correct as per the question requirements.",
            "The original query lists the names of products ordered more than 100 times, but the question asks for the count of such products. Additionally, the correct query needs to count the number of products meeting the condition by using a subquery for aggregation.",
            "The SQL query is correct and retrieves the product names where UnitsInStock and UnitsOnOrder are both greater than zero.",
            "The original query is missing the 'orders' table from where the 'OrderDate' should be extracted. A join between 'Order Details' and 'orders' is necessary to access 'OrderDate'.",
            "The SQL query is correct. It correctly selects the ProductID and counts the orders where a discount is applied, grouping by ProductID.",
            "The original query correctly extracts the numeric part of QuantityPerUnit, but it uses UNSIGNED. For casting fractions correctly in potential realistic scenarios, we should use DECIMAL instead. Assuming the QuantityPerUnit is numeric, the revised query should work using DECIMAL.",
            "The SQL query is correct. It retrieves the product names and unit prices for products with a positive stock level, as per the business question.",
            "The original query is mostly correct but redundant. Adding 'UnitsOnOrder' to the SELECT clause provides clarity on the number of units.",
            "The query correctly calculates the total sales revenue for each product by joining the 'Order Details' and 'products' tables on ProductID and summing the product of Quantity and UnitPrice for each ProductName. The query is correct.",
            "The SQL query is correct. It selects product names from the 'products' table where the ProductID does not exist in the 'Order Details' table, effectively identifying products that have not been ordered.",
            "The original query does not count distinct products. It should use COUNT(DISTINCT ProductID) to ensure only unique products are counted.",
            "The query is correct. It calculates the average discount per product by joining the 'Order Details' table with the 'products' table on the ProductID and grouping the results by ProductName.",
            "The SQL query correctly identifies products that need to be reordered by checking if UnitsInStock is less than ReorderLevel. No changes are necessary.",
            "The original query does not account for monthly granularity. Added EXTRACT functions to group by year and month from an assumed 'OrderDate' column in an 'orders' table.",
            "The SQL query is correct. It selects the SupplierID and calculates the average unit price of products for each supplier, ordering the results in descending order by average unit price.",
            "The SQL query correctly calculates the total quantity sold for each category by joining the [Order Details] with the products table using ProductID and grouping by CategoryID.",
            "The original query had an issue with the placement of the LIMIT clause. It should be applied outside the subquery.",
            "The original query correctly calculates the profit by subtracting the discount from the sales calculation. However, for clarity and accuracy, the profit calculation can be simplified by using 'OD.UnitPrice * (1 - OD.Discount)' to directly get the discounted price per unit, then multiplying by quantity. The rest of the query, including the JOIN and ORDER BY clauses, is correct.",
            "The SQL query is correct and accurately answers the question by selecting the count of products with a unit price greater than the average unit price across all products.",
            "The original query is mostly correct, but I've slightly simplified the subquery by eliminating the unnecessary alias in the SELECT clause. The subquery directly identifies ProductIDs with more than one distinct SupplierID.",
            "The query correctly calculates the overall discount by multiplying Quantity, UnitPrice, and Discount for each order and summing them up.",
            "The SQL query correctly identifies products that have never been discontinued (Discontinued = 0) and are currently in stock (UnitsInStock > 0). It does not distinguish 'always' in stock since it only checks current UnitsInStock. However, based on available schema, it's the best interpretation.",
            "The SQL query is correct. It aggregates the total cost of units currently on order for each product using GROUP BY on ProductName.",
            "The query correctly selects the top 3 products with the highest reorder level by ordering the products in descending order of 'ReorderLevel' and limiting the results to 3. The use of LIMIT is appropriate for this purpose.",
            "The query is mostly correct, but 'OrderDate' is not prefixed with the appropriate table alias 'O'. Added table alias 'O' to 'OrderDate' in SELECT and GROUP BY clauses.",
            "The SQL query is correct. It correctly joins the 'products' table with the '[Order Details]' table on 'ProductID', calculates the sum of 'Quantity' for each product, and groups the result by 'ProductID'.",
            "The SQL query is correct and answers the business question by selecting products where UnitsInStock is less than ReorderLevel.",
            "The SQL query is correct and follows the schema structure. It correctly counts the number of discontinued products by checking if the 'Discontinued' column is equal to 1.",
            "The SQL query is correct. It retrieves the product name of the product with the highest unit price from the products table.",
            "The original query returns the names of products with stock levels below their reorder level, but the question asks for the count of such products. The corrected query uses COUNT to return the number of products meeting the criteria.",
            "The query correctly calculates the average discount from the [Order Details] table. The SQL query is correct.",
            "The SQL query is correct for the question asked. It correctly selects products where 'UnitsInStock' is equal to 0, indicating they are out of stock.",
            "The SQL query correctly retrieves the product with the maximum units on order by using a subquery to find the maximum value and comparing it to the 'UnitsOnOrder' field.",
            "The query is correct. It accurately calculates the total sales for each supplier by joining the '[Order Details]' and 'products' tables on 'ProductID' and grouping the results by 'SupplierID'.",
            "The query is correct. It selects the SupplierID and calculates the average UnitPrice for each supplier. The GROUP BY clause ensures the average is calculated per SupplierID.",
            "The SQL query is correct. It appropriately joins the 'Order Details' and 'products' tables using the ProductID and filters records where the discount is greater than 20%.",
            "The SQL query is correct. It correctly joins the 'products' and 'Order Details' tables, groups by 'ProductName', sums the 'Quantity' from 'Order Details', orders the results by 'TotalQuantitySold' in descending order, and limits the results to the top 5.",
            "The query is incorrect because the 'OrderDate' column does not exist in the '[Order Details]' table according to the provided schema. To correct this, we need to have access to an 'OrderDate' field. If 'orders' table available and has 'OrderDate', it should be joined. The corrected query cannot be formulated accurately without the actual schema for 'orders'. Assuming such a table exists, it would be necessary to adapt the query to include the join with 'orders' and select 'OrderDate' from there.",
            "The query is correct. It lists the product names for products that haven't been ordered by ensuring their ProductID does not appear in the Order Details table.",
            "The SQL query is correct. It calculates the total revenue by multiplying the quantity by the unit price from the [Order Details] table, joined on ProductID, and groups the results by ProductName.",
            "The SQL query is mostly correct, but the HAVING clause should directly use COUNT(DISTINCT ProductID) instead of alias 'NumberOfProducts'.",
            "The query assumes the 'OrderDate' column exists in the '[Order Details]' table, which is not present in the provided schema. To fix this, ensure there's a correct date filter or add the 'OrderDate' to the relevant table. If 'OrderDate' belongs to another table such as 'Orders', you need to join with that table. Without the correct schema adjustment, the current query won't execute correctly.",
            "The query correctly joins the 'products' and '[Order Details]' tables on 'ProductID'. It groups by 'ProductName' and orders by the sum of the sales revenue (calculated as 'Quantity * UnitPrice') in descending order. The LIMIT 1 clause ensures that only the product with the highest sales revenue is returned. The query is correct.",
            "The SQL query is correct. It selects the average number of units on order from the 'products' table grouped by 'CategoryID', which aligns with the business question.",
            "The SQL query is correct. It selects the SupplierID from the products table where products are discontinued, groups by SupplierID, counts ProductID, and orders in descending order to find the supplier with most discontinued products. The LIMIT 1 correctly restricts the result to the top supplier.",
            "The original query incorrectly summed the discount as a scalar value. Discounts should be multiplied by the quantity and unit price to reflect their impact on the total value.",
            "The query is correct and accurately selects products that are discontinued and still have units in stock.",
            "The SQL query is correct. It selects the SupplierID, counts the distinct ProductIDs for each supplier, and orders the result in descending order by the count of unique products, limiting the result to the top supplier.",
            "The SQL query is correct. It accurately computes the average discount applied on all orders using the [Order Details] table.",
            "The SQL query correctly joins the 'products' and '[Order Details]' tables, calculates the SalesRevenue by multiplying Quantity and UnitPrice, and groups by ProductName. It then orders by SalesRevenue in descending order and limits to the top 5 entries. The query is correct.",
            "The existing query is almost correct, but to accurately reflect the inventory turnover ratio per category, you need to calculate the average UnitsInStock only for products in that category. Therefore, the following query should be used: SELECT products.CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(CASE WHEN products.CategoryID = products.CategoryID THEN products.UnitsInStock ELSE NULL END) AS InventoryTurnover FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.CategoryID;",
            "The original query used YEAR_MONTH, which is not standard SQL and should be replaced with separate EXTRACT functions for both year and month. Also, 'order_date' should be explicitly stated as from the 'orders' table.",
            "The original query didn't count distinct products. It should count unique ProductIDs within each discount bracket.",
            "The SQL query is correct. It selects the CategoryID and calculates the average reorder level for each category by grouping the products accordingly.",
            "The SQL query is correct. It selects products that are discontinued and have units on order, matching the business question.",
            "The SQL query is mostly correct. It calculates the total sales revenue by supplier. However, I replaced aliases for table names to improve clarity and consistency. The calculation logic and grouping are correct as per the business requirement.",
            "The SQL query correctly calculates the average unit price for each category and orders the results to find the highest. There are no errors.",
            "The original query used an incorrect function 'STDDEV_MONTH'. The correct approach is to calculate the standard deviation of monthly sales using the window function STDDEV. The query should also consider the monthly partitioning using EXTRACT for year and month from the order date, although 'Order Details' doesn't explicitly have an 'OrderDate' column. If needed, this should be JOINed with the 'orders' table to access the 'OrderDate' column.",
            "The original query correctly calculates potential revenue for each product but does not filter out discontinued products. The revised query calculates the total potential revenue for all non-discontinued products.",
            "The original query was aggregating based on sales (quantity multiplied by unit price). However, the question asks for the best-selling product, which implies the greatest total quantity sold. Therefore, the correct approach is to sum the quantity instead. Additionally, the SupplierID and ProductName should be selected to identify the specific product and supplier. The ORDER BY should prioritize TotalQuantity to find the best-selling product.",
            "The query correctly calculates the total sales quantity for each discount level, showing the effect of discount on total sales quantity. It uses GROUP BY on the Discount column to aggregate quantities by discount level, which is appropriate for answering the question.",
            "The SQL query correctly identifies products that have never been ordered by selecting ProductIDs not present in the [Order Details] table. The query is correct according to the given database schema and business question.",
            "The SQL query is incorrect because it lacks a join with the 'products' table to bring in the necessary product details. It is also missing the 'orders' table to obtain the 'order_date'. Additionally, the calculation does not consider month-over-month growth; rather, it calculates an average sales per month, which is not equivalent to sales growth. To properly calculate average monthly sales growth, data over a period of time is needed, with specific logic to determine growth. The revised query should first sum sales by product and month, then calculate growth between months if a specific definition of growth is provided.",
            "The SQL query correctly computes the DiscountEffect by considering the weighted impact of discounts on quantities sold. It joins the products table with [Order Details] using the ProductID and calculates the ratio of discounted sales quantities over the total quantities, grouped by ProductID. The query is syntactically and logically correct.",
            "The SQL query is mostly correct. It joins the 'products' and 'Order Details' tables on 'ProductID', aggregates the quantity sold by 'ProductName', and orders the results by 'TotalQuantity' in descending order to fetch the top 5. However, the use of LIMIT 5 is incorrect for standard ANSI SQL and should be replaced with FETCH FIRST 5 ROWS ONLY.",
            "The SQL query is correct for the given question. It selects product names from the products table where the unit price is greater than 50.",
            "The query is correct. It accurately sums the 'UnitsOnOrder' for products that are marked as discontinued.",
            "The SQL query is correct for the given question. It correctly counts the distinct number of products provided by each supplier and orders them to find the supplier with the most different products.",
            "The SQL query is correct. It calculates the total inventory value for each category by multiplying the UnitPrice by UnitsInStock for each product and grouping the results by CategoryID.",
            "The original query may not compare correctly against 'UnitsInStock', as aggregation with MAX is needed to ensure proper comparison in the HAVING clause.",
            "The SQL query is correct. It calculates the average discount for each product by joining the 'products' and '[Order Details]' tables on 'ProductID' and then groups by 'ProductName'. The AVG function correctly calculates the average discount.",
            "The query incorrectly calculates the denominator in the inventory turnover ratio. The average inventory should be calculated based on monthly granularity, not merely AVG(p.UnitsInStock). We need to ensure temporal granularity is applied correctly, but since no date field is provided in the schema, this might not be achievable. Check if additional date fields are available or necessary.",
            "The original query was missing a join to the 'orders' table to access 'OrderDate'. Fixed by joining '[Order Details]' with 'orders' using 'OrderID'.",
            "The SQL query is correct and efficiently finds all products that have never been ordered by checking for ProductIDs not present in the 'Order Details' table.",
            "The SQL query is correct. It accurately counts the number of products where 'UnitsInStock' is less than 'ReorderLevel', grouping by 'CategoryID' to determine how many products need to be reordered per category.",
            "The original query is missing a join to an 'orders' table to access the 'OrderDate' field. The corrected query includes this join.",
            "The original query incorrectly uses DISTINCT with two columns and has logic errors. The corrected query counts the discontinued products only and divides by the total count of products, multiplying by 100 to get the percentage.",
            "The original query incorrectly divides total sales by the product's unit price instead of the total quantity sold. Corrected by dividing total revenue by total quantity sold for accurate sales revenue per unit.",
            "The provided SQL query correctly calculates the average units per order for each product. The join between the 'products' and '[Order Details]' tables is correctly established, and the aggregation function AVG is used appropriately on the 'Quantity' column. The query accurately groups results by 'ProductName' to meet the business question requirements.",
            "The query is incorrect because the 'Order Details' table is missing the 'OrderDate' column, which is necessary for the EXTRACT function in the HAVING clause. Assuming 'OrderDate' should actually exist, the query structure is correct. Ensure 'OrderDate' is present in a related table, typically 'orders'. To correct, join with the 'orders' table to access 'OrderDate'.",
            "The query correctly calculates the inventory turnover ratio for each product. It joins the 'products' table with the '[Order Details]' table on 'ProductID', and groups by 'ProductID' to compute the sum of (Quantity * UnitPrice) divided by the average units in stock. This aligns with the provided metric formula. The query is accurate as per the given database schema and business metrics definitions.",
            "The query is incorrect because the 'Order Details' table in the schema does not contain an 'OrderDate' column. Assuming there's an 'Orders' table with 'OrderDate', a proper query should include this table. Additionally, LIMIT 1 only returns one product while the question asks for the least ordered products over last six months, potentially needing more than one result. Correct approach is to determine criteria for 'least ordered' or include multiple products if necessary.",
            "The SQL query is correct. It successfully selects the number of distinct suppliers for each product category.",
            "The query is correct. It selects the product names from the 'products' table where the 'UnitsInStock' is 0, effectively finding products that are out of stock.",
            "The original query doesn't filter the orders by the current month correctly because it uses CURDATE() and NOW() without considering the date field in the 'Order Details' table. The corrected query adds a condition using the OrderDate column (assuming it exists) to filter by the current month.",
            "The SQL query correctly counts the number of products provided by each supplier and orders the result in descending order. The query successfully answers the business question.",
            "The SQL query correctly answers the question by calculating the average unit price of products grouped by category ID. The aggregation using AVG and grouping by CategoryID is implemented correctly.",
            "The SQL query is correct. It properly counts the number of products that have been discontinued in the 'products' table where 'Discontinued' equals 1.",
            "The query is incorrect. The inner query needs to filter orders from the last month only. The DATE_FORMAT logic is incorrect; it should calculate the date range for the previous month for each record. Here's the corrected query: SELECT ProductID, ReorderLevel FROM products WHERE ProductID IN (SELECT ProductID FROM [Order Details] WHERE YEAR(OrderDate) = YEAR(CURDATE() - INTERVAL 1 MONTH) AND MONTH(OrderDate) = MONTH(CURDATE() - INTERVAL 1 MONTH) GROUP BY ProductID ORDER BY SUM(Quantity) DESC LIMIT 1);",
            "The SQL query is correct. It correctly selects the product name from the 'products' table where the 'UnitsOnOrder' is equal to the maximum value of 'UnitsOnOrder' in the 'products' table.",
            "The SQL query is mostly correct, but it should group by p.ProductName instead of p.ProductID to ensure each product's name corresponds correctly to its total revenue.",
            "The original query correctly calculates the Inventory Turnover Ratio but does not handle division by zero if AVG(p.UnitsInStock) is zero. Also, p.ProductName should be included in the GROUP BY clause, and 'LIMIT' should be replaced with 'FETCH FIRST 5 ROWS ONLY' according to ANSI SQL standard.",
            "The SQL query is correct. It groups the products by CategoryID, sums up the UnitsInStock for each category, and orders the results in descending order to find the category with the most units in stock.",
            "The SQL query correctly identifies products that need reordering by comparing the units in stock against the reorder level. No changes required.",
            "The SQL query is mostly correct, but it should qualify the SupplierID with the 'products' table in the SELECT and GROUP BY clauses. The revised query adds this qualification.",
            "The original query incorrectly uses the `IN` clause with a subquery that references non-existent columns like UnitsOnOrder in the [Order Details] table. The corrected query directly checks the UnitsOnOrder in the products table instead.",
            "The original query did not include a monthly granularity, which is required for the business question to be answered correctly. I've added a join to an orders table (assuming existence based on OrderID foreign key) and grouped the results by year and month.",
            "The provided query is correct and matches the business question regarding the total discount for all orders. The calculation correctly multiplies the Quantity, UnitPrice, and Discount to achieve the total discount.",
            "The initial query calculates the revenue impact of products with discounts but did not include ProductID in the SELECT clause when grouping by ProductID. Also, 'LIMIT' is not part of ANSI SQL; 'FETCH FIRST 3 ROWS ONLY' should be used instead.",
            "The query is missing a filter for the last quarter. 'OrderDate' seems undefined, so it needs to be clarified. Additionally, DATE_FORMAT is not part of ANSI SQL. Correcting to retrieve data for the last quarter using an alternative method.",
            "The query correctly calculates the total inventory value grouped by SupplierID by multiplying UnitPrice by UnitsInStock, which is appropriate for this question.",
            "The query correctly retrieves orders with a 'Delayed' delivery status. However, the schema provided does not include an 'orders' table or a 'DeliveryStatus' field. Additional context or schema details are needed to verify this query.",
            "The original query is missing a join with the 'orders' table to access the 'OrderDate'. Additionally, the formula for Inventory Turnover Ratio should use AVG(p.UnitsInStock) as per the metric definition instead of SUM(p.UnitsInStock).",
            "The query correctly identifies products with units in stock less than or equal to the reorder level and no units on order. The conditions align with the business question. The SQL query is correct.",
            "The SQL query is correct. It accurately calculates the average unit price of products that are discontinued.",
            "The original query is mostly correct, but 'LIMIT 5' should be replaced with 'FETCH FIRST 5 ROWS ONLY' for ANSI SQL compliance.",
            "The original query does not account for the discount applied on the `Order Details`. To calculate the total revenue correctly, the discount should be factored into the calculation.",
            "The query is correct. It accurately calculates the total discount by summing the Discount column from the [Order Details] table. The use of SUM and correct table reference matches the business question.",
            "The original query did not account for the discount in the revenue calculation. The corrected query includes the discount in the calculation of TotalRevenue.",
            "The SQL query is mostly correct, but the calculation of the Inventory Turnover Ratio should ideally use only non-zero stock products to avoid division by zero errors. Also, ensure that the data types and null values are properly handled to avoid any potential errors. Note that 'products.UnitsInStock' should be greater than zero.",
            "The SQL query is mostly correct, but it's important to specify which table the 'Discount' column belongs to in the SELECT statement. I've added the table name for clarity.",
            "The SQL query is correct. It properly selects discontinued products with more than 100 units in stock.",
            "The original query does not account for products with no orders, resulting in NULL sums. Using COALESCE ensures products with no orders are included with a sum of 0.",
            "The SQL query is correct. It accurately joins the 'products' table with the '[Order Details]' table using the ProductID and groups the results by SupplierID to calculate the total number of units sold per supplier using SUM([Order Details].Quantity).",
            "The SQL query is correct. It joins the 'Order Details' and 'products' tables on the ProductID, counts the occurrences for each ProductName, groups by ProductName, and orders the results by the order frequency in descending order, returning the top result.",
            "The SQL query is correct for the given business question. It selects the product name and calculates the average order quantity for each product by joining the 'products' and 'Order Details' tables and grouping by the product name.",
            "The given SQL query correctly identifies products that need restocking by checking if the sum of UnitsInStock and UnitsOnOrder is less than or equal to the ReorderLevel. There is no syntax error or logical mistake in the query. It accurately answers the business question based on the provided schema.",
            "The original query incorrectly calculates the average by using AVG instead of SUM for revenue. It should sum the total revenue and divide by the total quantity.",
            "The SQL query correctly identifies categories with the highest number of discontinued products. The query selects the 'CategoryID' and counts discontinued products by checking if 'Discontinued' is 1. It groups by 'CategoryID' and orders the result by 'DiscontinuedCount' in descending order, which aligns with the business question.",
            "The provided SQL query correctly calculates the total value of products in stock for each supplier. It multiplies the UnitPrice by UnitsInStock to get the stock value for each product and sums these values grouped by SupplierID. No corrections are needed.",
            "The SQL query is correct. It properly joins the 'products' and '[Order Details]' tables, groups by 'ProductID' and 'ProductName', calculates the total quantity sold, and limits the result to the top 5 products.",
            "The query correctly uses a LEFT JOIN to find products with no matching entries in the [Order Details] table, indicating that they haven't been sold. The condition 'WHERE od.ProductID IS NULL' ensures only those products are selected. The query is correct as is.",
            "The SQL query correctly calculates the total revenue for each product by summing the quantity times the unit price minus any discount applied in the 'Order Details' table. The JOIN condition and GROUP BY clause are also correctly used to aggregate the results by product. Therefore, the query is correct.",
            "The SQL query is correct. It selects distinct SupplierID and SupplierName for suppliers who provide discontinued products based on the Discontinued column being set to 1.",
            "The SQL query is correct. It accurately selects the ProductID and ProductName from the products table where the UnitsInStock are less than the ReorderLevel.",
            "The SQL query is correct. It correctly selects the discount rate along with its frequency from the 'Order Details' table, groups the results by discount rate, orders them by frequency in descending order, and limits the output to the most frequent discount rate.",
            "The SQL query correctly calculates the total discounted revenue for each product by summing the product of quantity, unit price, and discount. It joins the 'products' table and '[Order Details]' table on 'ProductID', filters for rows where a discount was applied, and groups the results by product ID and name, ordering by the calculated discounted revenue in descending order. Query is correct.",
            "The query incorrectly attempts to join non-existent 'categories' table. The correct query uses only the 'products' table to calculate the average unit price by CategoryID, which is correctly grouped.",
            "The query is mostly correct, but it assumes the existence of an 'orders' table with an 'OrderDate' column, not specified in the schema. The calculation of 'GrowthRate' is correctly using the LAG function to obtain the previous month's revenue. The use of DATE_TRUNC to group monthly is appropriate. Ensure that the SQL environment supports the use of 'DATE_TRUNC' and handling square bracket table names ([Order Details]).",
            "The SQL query is correct. It accurately selects products with less than 5 units in stock and more than 10 units on order as per the business question.",
            "The query assumes that a subquery will correctly determine the total number of distinct months in which orders were made. The alias 'o' should still be accessible in the subquery. The use of 'DATE_TRUNC' is correct for monthly grouping. Ensure the 'orders' table is correctly accessible in the subquery. The subquery is correctly placed within the HAVING clause to filter products that are ordered every unique month. Ensure 'orders' table includes the 'OrderDate' column.",
            "The SQL query correctly identifies the supplier with the most diverse product range by counting distinct CategoryID values per supplier. It joins suppliers and products on SupplierID, groups by SupplierID and SupplierName, and orders the result by CategoryCount in descending order, limiting to 1 result. The query is accurate and follows the ANSI SQL standard.",
            "The initial query is mostly correct, but the alias 'Month' should also be used in the GROUP BY and ORDER BY clauses. Otherwise, it might cause an error in certain databases.",
            "The query is correct. It joins the 'categories' and 'products' tables, groups by CategoryID, and checks if all products in a category are discontinued by comparing the sum of the Discontinued flag (converted to INT) with the count of products. If these values are equal, all products in that category are discontinued.",
            "The original query incorrectly includes products with orders where the discount is zero. The corrected query ensures that only products that have no discounts at all are included.",
            "The SQL query is correctly structured. It properly joins the 'suppliers' and 'products' tables on the SupplierID key and calculates the average UnitPrice per supplier. The GROUP BY clause appropriately groups by both SupplierID and SupplierName to provide the desired data aggregation.",
            "The SQL query is mostly correct. However, to ensure accuracy, 'p.UnitPrice' should be included correctly in the HAVING clause. Rewrite the HAVING clause to reference 'p.UnitPrice' correctly by either including it as an aggregated field or ensuring it comes from the products table. We also assume that 'p.UnitPrice' is constant for each 'ProductID', which should theoretically be the case; otherwise, including it in an aggregated comparison is not entirely correct.",
            "The original SQL query is correct. It correctly selects `ProductName` from `products` where `Discontinued` is equal to 1, which indicates the product is discontinued.",
            "The given SQL query is correct for calculating the average inventory level for each product category from the 'products' table.",
            "The original SQL query is correct. It selects the SupplierID and counts the number of products per supplier, ordering by the count in descending order, and limits the result to the supplier with the most products.",
            "The original query didn't account for the discount applied to the products in the calculation of total revenue. I corrected it by including the discount factor.",
            "The SQL query is correct and accurately identifies products with stock levels below their reorder levels.",
            "The SQL query correctly calculates the average discount per product by selecting the ProductID and averaging the Discount, grouped by ProductID. There are no syntax errors or logical mistakes; the query is correct as per the given schema.",
            "The original query is mostly correct, but it needed the '[Order Details].' prefix on 'Quantity' to maintain clarity and specificity. The updated query uses '[Order Details].Quantity' to accurately reference the correct table's Quantity column.",
            "The given SQL query is correct. It selects products from the 'products' table that do not have a corresponding entry in the '[Order Details]' table, effectively identifying products that have never been ordered.",
            "The original query is missing the alias for the extracted month. Adding 'EXTRACT(MONTH FROM [Order Details].OrderDate) AS SalesMonth' fixes this. Also, assume 'OrderDate' column exists even if not specified in the schema.",
            "The query mistakenly uses direct subtraction with 'CURRENT_DATE - INTERVAL '1' MONTH', which is not supported in ANSI SQL. Corrected using 'DATEADD'. Also, field references in the SELECT clause need the correct table aliasing for clarity.",
            "The SQL query is correct. It calculates the total value of products currently in stock by multiplying the unit price by the units in stock and summing the values.",
            "The SQL query correctly calculates the average number of units ordered per product by grouping order details by ProductID and using the AVG function on Quantity.",
            "The SQL query correctly identifies the 3 products with the lowest stock levels by ordering the products in ascending order of UnitsInStock and limiting the results to 3. The query is syntactically correct and matches the business question accurately.",
            "The SQL query is correct. It correctly selects the ProductID and ProductName from the products table where the UnitPrice is greater than 100 and the product is not discontinued (Discontinued = 0 indicates false).",
            "The SQL query is correct. It successfully joins the 'products' table with the '[Order Details]' table using 'ProductID'. The query then calculates the total quantity for each product using 'SUM(od.Quantity)' and groups the results by 'ProductName'.",
            "The SQL query correctly calculates the average unit price of products for each supplier using the AVG function and correctly groups the results by SupplierID. The query is accurate and aligned with the given question.",
            "The SQL query correctly identifies products with stock levels below their reorder level. The query uses the 'products' table to compare 'UnitsInStock' with 'ReorderLevel' and selects the 'ProductName' where 'UnitsInStock' is less than 'ReorderLevel'. The query is accurate and requires no changes.",
            "The original query correctly calculates the inventory turnover ratio, but it may encounter a division by zero error if any product's stock is zero. I added a NULLIF to handle this case safely.",
            "The original query attempts to divide the average quantity by the distinct months using DATE_TRUNC on a field 'OrderDate' which doesn't exist in the provided schema. To correctly calculate the average quantity per month, we should group by ProductID and date truncation should be done correctly if the 'OrderDate' field were to exist. The mistake is in assuming 'OrderDate' exists in 'Order Details'. Without 'OrderDate', we cannot compute monthly averages. If 'OrderDate' existed, the logic would be correct by counting distinct months in each ProductID group.",
            "The SQL query is mostly correct but needs a minor adjustment. The discount is a percentage, so multiplying by the UnitPrice again gives the discounted amount. Therefore, the correct expression should subtract the discount from 1 before multiplying. The corrected SQL query should be: SELECT p.ProductName, SUM((1 - od.Discount) * od.Quantity * od.UnitPrice) AS TotalDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName.",
            "The SQL query correctly calculates the sales revenue for each product by multiplying the quantity of each order by the unit price, grouping by product name, and ordering the results by sales revenue in descending order. The query then limits the results to the top 5 products, which answers the business question accurately. The syntax and logic appear correct. No changes needed.",
            "The SQL query is correct and matches the business question. It accurately calculates the total number of units on order for each product category by grouping by CategoryID and summing UnitsOnOrder.",
            "The SQL query is correct. It correctly uses a LEFT JOIN to find products with no match in the [Order Details] table, indicating they have never been ordered.",
            "The SQL query correctly calculates the average discount for each product by joining the 'products' table with the '[Order Details]' table and grouping by 'ProductName'. The use of 'AVG' function for discount is appropriate and no corrections are needed.",
            "The original query is missing a join with the 'orders' table to access the 'OrderDate' column. The alias 'o' is used for the 'orders' table in the corrected query.",
            "The SQL query correctly calculates the total stock value for each product by multiplying the unit price by the units in stock. No corrections are needed.",
            "The SQL query is correct and accurately retrieves the categories with the highest number of discontinued products. It counts the discontinued products for each category and orders the results in descending order.",
            "The SQL query correctly calculates the average inventory for each supplier and orders the results to find the supplier with the lowest average inventory. The use of LIMIT 1 ensures only the supplier with the lowest average is returned. No corrections needed.",
            "The original query did not calculate the monthly average because it lacked a time dimension. By joining with the 'orders' table (assuming it has an 'OrderDate' column), we can group by year and month to correctly calculate the monthly averages.",
            "The query counts how many times the inventory level is below the reorder level for each product, which fits the concept of reorder frequency. The logic seems aligned with the concept, assuming this 'frequency' is defined as how often the stock is below the reorder level. If that's the intended definition, the query is correct.",
            "The query is syntactically correct, but it is based on the assumption that there is a 'suppliers' table, which is not specified in the provided schema. The calculation for 'TotalDiscount' correctly multiplies the discount by the quantity and unit price, assuming this is the intended business logic. If the assumption about the 'suppliers' table is incorrect, additional context or schema information would be required.",
            "The SQL query is correct. It joins the 'products' and '[Order Details]' tables on 'ProductID', groups by 'ProductName', calculates the total quantity sold using SUM(od.Quantity), and sorts the results in descending order. The LIMIT 1 statement ensures only the product with the highest units sold is returned.",
            "The SQL query correctly retrieves the current stock level of each product, as it selects the ProductID and UnitsInStock from the products table. The query is accurate and requires no changes.",
            "The SQL query correctly identifies products that need to be reordered by selecting ProductID, UnitsInStock, and ReorderLevel where UnitsInStock is less than ReorderLevel. No corrections are needed.",
            "The original query is incorrect because it attempts to use `MONTH(od.OrderID)`, but the order date is not available in the `Order Details` table. The query should instead include a join with the `orders` table to extract the month from the correct field, assuming an `OrderDate` field exists in the `orders` table.",
            "The SQL query correctly retrieves product names where the units in stock are less than the reorder level. No changes are needed.",
            "The SQL query correctly identifies the top 5 best-selling products by quantity. The use of JOIN between the [Order Details] and products tables is correctly implemented. The query appropriately aggregates quantities and orders the results to select the top 5. No corrections needed.",
            "The original query incorrectly attempts to join tables and use a subquery. The correct query directly counts discontinued products by SupplierID.",
            "Assuming that the 'categories' table exists with 'CategoryID' as a column, the query is correct and calculates the total revenue by product category correctly.",
            "The SQL query is correct. It calculates the average discount for each product by joining the '[Order Details]' table with the 'products' table on 'ProductID' and grouping by 'ProductName'.",
            "The original query incorrectly attempts to use MONTH() on OrderID, which is not a date field. The correct approach involves joining the orders table to get the OrderDate and then using EXTRACT(MONTH FROM o.OrderDate).",
            "The SQL query correctly identifies products with zero units on order and more than 50 units in stock. The query matches the business question and utilizes the schema correctly. No changes are needed.",
            "Corrected 'UnitesInStock' to 'UnitsInStock'. The SQL query is now correct and will determine the product with the highest inventory turnover ratio.",
            "The original query didn't consider year filtering and also had incorrect subquery handling for aggregation. The corrected SQL query ensures the previous month's context takes the year into account and properly calculates sales performance.",
            "The original SQL query is mostly correct. However, the condition in the WHERE clause should be 'od.ProductID IS NULL' instead of 'od.OrderID IS NULL' to check for products that have never been ordered.",
            "The SQL query is correct based on the given business question. It correctly joins the products table with [Order Details] on ProductID, groups by ProductName, and applies the correct HAVING condition to identify products with an average discount greater than 0.2 and total sales quantity less than 100.",
            "The original query uses the incorrect column for ordering and lacks proper partitioning. It also needs an explicit calculation for growth rate with handling for zero in the denominator.",
            "The SQL query correctly computes the total quantity ordered for each product by performing an aggregation on the '[Order Details]' table, and then joins this result with the 'products' table to access the reorder level. The query correctly orders the results by 'TotalOrdered' in descending order and limits the result to the top product. This query is correct for the given business question.",
            "The SQL query correctly calculates the total revenue lost by discounting products by multiplying the quantity, unit price, and discount for each order detail. The logic is correct and matches the business question.",
            "The SQL query is attempting to find the average unit price for each category. However, the schema provided does not include a 'categories' table or any details about 'CategoryID' other than its existence in the 'products' table. To fix this, assuming a table 'categories' exists with a column 'CategoryID', the query seems correct. Assuming correct table structure, the query is properly formatted to achieve the desired result.",
            "The provided SQL query incorrectly attempts to use 'UnitsOnOrder' from the 'Order Details' table, which does not exist. Instead, 'UnitsOnOrder' should be accessed from the 'products' table. Additionally, the use of the CORR() function with SUM() is incorrect because CORR expects two lists of numbers, not an aggregated number. Therefore, the query needs to be adjusted to ensure values are not aggregated before calculating correlation. A potential approach could be calculating correlation on non-aggregated data if that's supported by the database or performing this analysis in a different tool where raw data can be processed.",
            "Issues identified: \n1. MONTH(od.OrderID) is incorrect as OrderID isn't a date. Use MONTH(o.OrderDate) assuming there's an orders table with OrderDate.\n2. Subqueries in SELECT for quarterly calculation need correction.\n3. TOP 5 not applicable in standard SQL, use LIMIT. \n4. SalesTrend subqueries should be aggregated correctly. \n5. ORDER BY needs to be applied after LIMIT clause. Adjusted the SQL query to fix these issues.",
            "The query does not account for the monthly granularity specified in the question. It should group by both the product name and the month to ensure that sales are evaluated on a monthly basis.",
            "The original query incorrectly uses MAX and MIN with aggregation. Instead, use SUM with CASE WHEN constructs to evaluate quantities with and without discounts.",
            "The query correctly joins the 'products' and '[Order Details]' tables on 'ProductID'. It calculates the total units sold for each product and orders the results in descending order by 'TotalUnitsSold'. No corrections are needed.",
            "The SQL query is correct. It selects the product names from the 'products' table where the product is discontinued and still has units in stock.",
            "The SQL query correctly calculates the average unit price for products in each category by selecting the CategoryID and applying the AVG function on UnitPrice, grouped by CategoryID. The query is accurate and correctly aligned with the business question.",
            "The SQL query is correct for finding the top five products by sales revenue. It correctly joins the 'products' table with the '[Order Details]' table, calculates the sales revenue for each product, and sorts them in descending order to get the top five.",
            "The original query correctly selects the units on order but should include ProductID instead of ProductName to directly associate with the ProductID as the 'units on order' query focuses on product identifiers.",
            "The SQL query is correct. It selects products where the UnitsInStock is less than the ReorderLevel, which aligns with the business question.",
            "The original SQL query had a syntax issue with MONTH function, which is not standard ANSI SQL. Replaced it with EXTRACT(MONTH FROM orders.OrderDate) for compatibility.",
            "The SQL query is almost correct. However, the ORDER BY clause should not be before LIMIT. To select the product with the highest unit price among those never ordered, no changes are needed. The query correctly orders the products by UnitPrice in descending order and limits the result to the top one, ensuring we get the product with the highest UnitPrice.",
            "The query is correct. It selects product names from the products table where the units in stock are below the average units in stock across all products.",
            "The original query did not include products.ProductID in the GROUP BY clause, which is necessary to ensure the correct aggregation. The corrected query adds products.ProductID to the GROUP BY clause.",
            "The provided SQL query is correct. It calculates the total value of inventory for each product by multiplying 'UnitsInStock' by 'UnitPrice' and selects 'ProductName' along with the calculated 'InventoryValue' from the 'products' table.",
            "The SQL query correctly lists products where the 'ReorderLevel' is higher than 'UnitsInStock'. The query accurately reflects the business question as written.",
            "The SQL query correctly calculates the percentage of discontinued products that still have units in stock. It achieves this by dividing the count of discontinued products with units in stock by the total count of discontinued products.",
            "The query is correct. It groups products by SupplierID, counts the distinct ProductID for each supplier, orders the result by ProductCount in descending order, and limits the output to the top three suppliers. No changes needed.",
            "The original query finds the maximum discount and groups by product, but it doesn't directly find the product(s) with the highest discount. Instead, the corrected query checks for products that have the maximum discount applied across all order details and returns them.",
            "The SQL query seems correct. It selects SupplierID and SupplierName from the suppliers table, joining with the products table to filter products with zero units in stock. Ensure the suppliers table exists with these columns.",
            "The SQL query is correct. It accurately counts the number of discontinued products by checking where the 'Discontinued' column is 1.",
            "The SQL query is mostly correct but it is missing the 'orders' table in the schema. Also, the 'OrderDate' column is not defined in 'orders'. Assuming 'orders' table exists and has 'OrderDate', the query logic is otherwise aligned with the business question and schema. If 'OrderDate' exists in the 'orders' table, the query is correct as is.",
            "The original query used 'ReorderLevel > UnitsInStock' which incorrectly selects products with reorder levels above stock. The correct condition is 'ReorderLevel < UnitsInStock' to find products with reorder levels below their current stock levels.",
            "The SQL query correctly calculates the total sales revenue and average discount for each product by joining the 'products' and '[Order Details]' tables on 'ProductID' and using the SUM and AVG functions. The GROUP BY clause is correctly used to group results by 'ProductID.' No corrections needed.",
            "The query is correct. It selects products where both the Discontinued flag is set to 1 and there are UnitsOnOrder greater than 0.",
            "The SQL query correctly calculates the total value of all products currently in stock by multiplying the UnitPrice by UnitsInStock for each product and then summing up these values. The query is correct and does not require any changes.",
            "The query correctly finds the product with the lowest quantity in stock and orders by unit price in descending order, then limits to 1 result, which answers the question as intended. No changes needed.",
            "The original query is correct. It accurately selects products from the 'products' table whose ProductIDs do not appear in the '[Order Details]' table, indicating they have never been sold.",
            "The original query incorrectly calculates the total orders without considering unique orders. Adjusted by adding DISTINCT to COUNT(o.OrderID) to ensure it only counts unique orders.",
            "The SQL query is mostly correct, but it references a column 'SupplierName' that doesn't exist in the suppliers table according to the provided schema. I've removed 'SupplierName' from the query as it is not available in the schema.",
            "The original query incorrectly checks 'UnitsOnOrder' against 'ReorderLevel'. It should check 'UnitsInStock'. The corrected query evaluates if 'UnitsInStock' is less than or equal to 'ReorderLevel', indicating a need for reorder.",
            "The SQL query correctly identifies products with discrepancies between units on order and units in stock by calculating the difference and ordering the results in descending order. The query accurately addresses the business question.",
            "The SQL query correctly calculates the average discount by product. The join between 'products' and '[Order Details]' tables is performed on 'ProductID', and the average discount is aggregated and grouped by 'ProductID'. The query is correct as per the given business question.",
            "The given SQL query has a conceptual error in defining the subquery for LIMIT. ANSI SQL doesn\u2019t support using dynamic values like 10% directly in the LIMIT clause in this manner. Instead, we can use a window function to rank products based on sales and filter the top 10%. Also, naming the subquery helps clarify the query logic.",
            "The original query incorrectly uses GROUP BY and MAX without identifying the single highest order. The corrected query finds the product with the highest quantity in a single order.",
            "The original query references 'LastOrderDate' and assumes its existence, which is not defined in the provided schema. The query should calculate based on 'OrderDate' from the '[Order Details]' table. The condition in 'DATEDIFF' should be corrected to find orders that were placed exactly one month ago, using '= 1' to check for the last month.",
            "The SQL query is correct. It properly joins the 'suppliers' and 'products' tables on the SupplierID, calculates the total inventory value by multiplying UnitPrice with UnitsInStock for each product, and groups the results by SupplierID to get the total inventory value per supplier.",
            "The SQL query is correct and matches the business question. It selects the ProductID and ProductName for the product with the highest UnitsInStock.",
            "The SQL query correctly identifies products that have stock levels below their reorder level. The query selects ProductID and ProductName from the products table where UnitsInStock is less than ReorderLevel. It aligns perfectly with the business question, so there are no mistakes or issues to correct.",
            "The SQL query is correct. It correctly joins the 'products' and '[Order Details]' tables on 'ProductID' and groups by 'ProductID' and 'ProductName' to calculate the total quantity for each product.",
            "The SQL query is correct. It selects product ID and name along with the total revenue calculated by multiplying the quantity and unit price from the [Order Details] table. The results are grouped by product ID and name, ordered by total revenue in descending order, and limited to the top 5 results.",
            "The query is mostly correct, but the alias 'Month' in the GROUP BY clause should directly use the EXTRACT function. The existing GROUP BY clause should refer to EXTRACT(MONTH FROM o.OrderDate) instead of just 'Month'. Also, ensure 'orders' table and 'OrderDate' column exist or adjust the query as per the schema.",
            "The SQL query correctly selects ProductID and ProductName from the products table where the UnitPrice is greater than the average UnitPrice of all products. The query is accurately formulated based on the business question.",
            "The SQL query is correct assuming there is a 'categories' table with a 'CategoryID' column. It correctly joins 'products' and '[Order Details]' using 'ProductID', then joins with 'categories' using 'CategoryID'. It aggregates total order quantity and orders by descending quantity. Validation of existing 'categories' table is required.",
            "The query is correct. It selects the ProductID and maximum discount from the [Order Details] table, groups by ProductID, and orders the results by the maximum discount in descending order to find the products with the highest discount rate.",
            "The SQL query is correct. It calculates the total inventory value for each product by multiplying the unit price with units in stock and grouping the results by ProductID.",
            "The SQL query is correct and accurately retrieves the products with zero units on order according to the schema provided.",
            "The SQL query correctly calculates the average discount using the AVG function on the Discount column from the [Order Details] table. The query is accurate and there are no changes needed.",
            "The SQL query is correct as per ANSI SQL standards. It correctly calculates the total sales revenue for each supplier and orders them in descending order to identify the top 3 suppliers.",
            "The original query correctly identifies products sold at a higher price than their unit price in order details. The WHERE clause correctly uses od.UnitPrice > p.UnitPrice to filter these products. No corrections were needed.",
            "The SQL query correctly calculates the average discount applied to products using the AVG() function on the Discount column from the [Order Details] table. The syntax and logic are appropriate for the business question.",
            "The SQL query correctly identifies products where the stock is below their reorder level. No corrections are needed.",
            "The SQL query correctly calculates the total revenue for each product by multiplying the quantity and unit price, adjusting for the discount, and grouping by product name. No changes are needed.",
            "The SQL query correctly selects the names and stock levels of discontinued products by filtering on the 'Discontinued' column using a value of 1. This matches the business question and is syntactically correct according to the provided schema.",
            "The original SQL query incorrectly checks for null values for both OrderID and Quantity, which would not identify products with no sales in the last month. Additionally, the query should filter order details by the last month, which requires a date column like OrderDate in the 'Order Details' table. Assuming such a column exists, the corrected query includes a date filter condition to specify the last month.",
            "The query correctly calculates the average order quantity per product by joining the products and 'Order Details' tables using ProductID and grouping by ProductName. No changes are necessary.",
            "The SQL query is correct. It selects the product name and unit price from the 'products' table, filters for products that are not discontinued (Discontinued = 0), and orders the results by unit price in descending order, returning the top result with the highest unit price using LIMIT 1.",
            "The SQL query correctly retrieves the SupplierID and counts the number of products for each supplier, ordering them to find the maximum. The use of GROUP BY and ORDER BY with LIMIT 1 ensures the desired result. No corrections are needed.",
            "The query is correct. It correctly joins the 'products' table with the '[Order Details]' table on 'ProductID' and applies the necessary filters for discount and quantity.",
            "The original query did not filter the dates properly as the OrderID should not be used to extract the month. Instead, an OrderDate column should be presumed for this purpose. The logic was corrected to use EXTRACT for both month and year based on this assumption.",
            "The SQL query is correct. It accurately selects the ProductName from the products table where the UnitsInStock is less than ReorderLevel and UnitsOnOrder is zero.",
            "The SQL query appears correct. It calculates the total sales for discontinued products by joining the 'products' and '[Order Details]' tables on 'ProductID', filtering for discontinued products, and using an aggregate function to sum sales. The 'GROUP BY' clause ensures the results are grouped by product name.",
            "The SQL query is mostly correct. It properly calculates the total revenue for each product and filters those that are in stock. The use of JOIN, the calculation of TotalRevenue with proper consideration of discounts, and the order with LIMIT 3 are all correct. No changes are needed.",
            "The query is correct. It calculates the average discount in the [Order Details] table.",
            "The original SQL query misses two key components: the calculation of total quantity sold each month and filtering for the last year's data. I've added the SUM function to calculate total quantities and a WHERE clause to filter for the last year.",
            "The query correctly calculates the total units ordered for products in each category by joining the 'Order Details', 'products', and 'categories' tables. It properly groups by 'CategoryID' and uses SUM to calculate total quantities. The query is correct.",
            "The SQL query correctly selects the product with the highest reorder level by ordering the 'ReorderLevel' in descending order and limiting the result to the top one. The query is correct and adheres to the business question.",
            "The SQL query correctly identifies products that are not discontinued and have zero units in stock. The use of 'Discontinued = 0' correctly filters products that are not discontinued, and 'UnitsInStock = 0' filters those with zero stock.",
            "The SQL query is correct and aligns with the business question. It selects SupplierID and calculates the average UnitPrice for each supplier by grouping the results by SupplierID.",
            "The provided SQL query is correct for the given business question. It calculates the total discount value for each product by multiplying the quantity, unit price, and discount, then summing up these values for each product.",
            "The SQL query correctly identifies products that need to be reordered by comparing UnitsInStock with ReorderLevel. The query is correct.",
            "The SQL query is mostly correct. However, the GROUP BY clause should synchronize with the SELECT statement to avoid any potential SQL errors or warnings. Here, we should group by p.ProductName as well to match the selected fields in the query.",
            "The SQL query is mostly correct, but the GROUP BY clause should match the SELECT clause when using aggregate functions. It should also include both p.ProductID and p.ProductName in the GROUP BY clause to avoid errors in some SQL systems. The corrected query would be: SELECT p.ProductName, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
            "The SQL query correctly joins the 'products' table with the '[Order Details]' table on 'ProductID'. It summarizes the total quantity sold using SUM(od.Quantity) and groups the results by 'CategoryID'. The query is correctly written given the schema and problem.",
            "The query is correct. It appropriately counts the number of discontinued products per category by checking where the 'Discontinued' column is set to 1 and groups the results by 'CategoryID'.",
            "The query correctly calculates total revenue by multiplying the quantity, unit price, and discount. However, it lacks the correct join to include CategoryID from the products table, assuming CategoryID is available in the products table. It appropriately groups by CategoryID and orders by total revenue. The query limits the output to a single category with the highest revenue.",
            "The SQL query is correct. It selects the product name ordered by the number of units in stock in descending order and limits the result to the top one, which effectively answers the question.",
            "The original query incorrectly uses LIMIT, which is not part of ANSI SQL. Replaced with FETCH FIRST 5 ROWS ONLY.",
            "The query is mostly correct but needs to group by p.ProductName to match the SELECT clause.",
            "The query correctly identifies products with the lowest stock levels by selecting the SupplierID, ProductName, and UnitsInStock from the products table where UnitsInStock matches the minimum UnitsInStock. No corrections are needed.",
            "The SQL query is correct and accomplishes the business question by selecting products with a unit price greater than the average unit price.",
            "The SQL query correctly calculates the total value of products on order for each supplier using the 'products' table. It multiplies 'UnitsOnOrder' by 'UnitPrice' and groups the result by 'SupplierID', which aligns with the business question.",
            "The SQL query is correct. It joins the 'products' and '[Order Details]' tables on 'ProductID' and filters the products where the 'UnitPrice' in the 'products' table is less than the 'UnitPrice' in the '[Order Details]' table.",
            "The query correctly joins the products and [Order Details] tables and calculates the inventory turnover ratio using the specified formula. However, to prevent division by zero errors, it's crucial to use NULLIF to safeguard against the average of UnitsInStock being zero.",
            "The original query is mostly correct but the GROUP BY clause needs to use p.ProductName instead of p.ProductID to correctly label the product names with their corresponding discounts.",
            "The query is mostly correct but missed including the 'orders' table in the schema definition. Assuming 'OrderDate' belongs to the 'orders' table, the query correctly calculates the Inventory Turnover Ratio per category on a monthly basis. Ensure that the 'orders' table has been correctly defined and included in the schema.",
            "The SQL query is correct and matches the business question. It correctly joins the 'products' and '[Order Details]' tables and calculates the total quantity sold for each product by summing the 'Quantity' column from the '[Order Details]' table, grouped by 'ProductID' from the 'products' table.",
            "The query correctly retrieves the product names where the stock level is below the reorder level. No corrections needed.",
            "The original query did not account for the discounts correctly. The discount should be applied to the product of quantity and unit price by using the calculation '(1 - od.Discount)'. This will correctly exclude the discount from the revenue.",
            "The SQL query is correct as it selects the product names from the 'products' table where the 'Discontinued' field is set to 1, indicating the product is discontinued.",
            "The SQL query is mostly correct. However, according to the provided schema, no definition for the 'suppliers' table exists. The query assumes the existence of this table. If 'suppliers' should be part of the schema, then the query is correct. Otherwise, more information is needed regarding how SupplierID is related if there's no 'suppliers' table.",
            "The original query is missing the extraction of the month from the OrderDate column in the SELECT clause, which is necessary for monthly granularity. Additionally, the `OrderDate` column should be included in the GROUP BY clause, using the EXTRACT function for month extraction.",
            "The SQL query is mostly correct but lacks the inclusion of the product name, which might be useful for identification alongside the ProductID. To enhance readability, you might consider including the ProductName in the results.",
            "The original query mistakenly references a 'suppliers' table that isn't defined in the schema. The corrected query uses only the 'products' table as per the provided schema.",
            "The original query references a 'categories' table that is not included in the schema provided. Therefore, the join with the 'categories' table is unnecessary. The query can be simplified by selecting directly from the 'products' table and grouping by 'CategoryID'.",
            "The original query used GETDATE(), which is not ANSI SQL standard. Replaced with CURRENT_DATE for compatibility. Ensure [Order Details] has an OrderDate column.",
            "The SQL query is mostly correct, but there's a minor issue: the 'categories' table is not defined in the given schema. Assuming the 'categories' table exists with a 'CategoryID' column, the query is otherwise correct. Check for the existence of the 'categories' table.",
            "The SQL query is correct in selecting the sum of the discount values applied. It multiplies Quantity, UnitPrice, and Discount correctly within the [Order Details] table.",
            "The SQL query is correct and successfully retrieves products with unit prices above the average unit price.",
            "The query is correct. It counts the distinct ProductIDs in the [Order Details] table, which reflects the number of distinct products sold.",
            "The original query attempts to compare revenue between two sets of joined data for the current and previous month but does not correctly filter and compute monthly revenue. It also lacks date functions to accurately compare the months. The revised query uses conditional aggregation to separately calculate revenues for the current and previous month and includes a null check to prevent division errors.",
            "The query correctly identifies categories that have no products in stock by using a NOT EXISTS clause. The logic is sound, ensuring that it checks for products within each category where UnitsInStock is greater than 0. If such a product does not exist, the category is selected. The schema confirms the necessity of these table joins and columns. The query format and structure are aligned with ANSI SQL standards.",
            "The SQL query correctly counts the number of products with zero units in stock and on order. The query uses the correct table and columns, and accurately applies the conditions specified in the question.",
            "The original query is mostly correct, but it includes an unnecessary join with the suppliers table, which is not included in the schema. The revised query directly selects SupplierID from the products table where Discontinued equals 1.",
            "The query is correct. It calculates the average unit price of products that have more than zero units in stock.",
            "The original query lists product details but doesn't count them. Updated the query to count the number of products meeting the condition.",
            "The original query didn't filter the results to show data from the past month. The corrected query includes a WHERE clause to filter orders from the past month using `od.OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE)`. Ensure that the `OrderDate` column exists in the `[Order Details]` table and adjust the DATEADD function based on the specific SQL dialect if needed.",
            "The original query didn't join the 'orders' table, which is necessary to filter based on the order date. This has been corrected in the revised query above.",
            "The query is mostly correct, but it appears that the 'OrderDate' column is not defined in the 'Order Details' table. Assuming it should be in a related 'orders' table, the query needs adjustment to account for the correct table join to access 'OrderDate'. Therefore, the query needs to be revised to include a proper join with the 'orders' table to ensure 'OrderDate' can be used in the WHERE clause.",
            "The SQL query is correct. It selects products from the 'products' table whose 'ProductID' is not found in the 'Order Details' table, effectively identifying products that have never been ordered.",
            "The original query is incorrect as it assumes an 'OrderDate' field exists in the '[Order Details]' table, which is not specified. If 'OrderDate' is indeed a correct field, it can be used. The logic to get the past year was corrected to ensure it captures the entire last year period correctly, assuming today's date as the reference.",
            "The original query used a table 'categories' which is not listed in the provided schema. Assuming no schema error and focusing solely on the 'products' table, the query is corrected to fetch category-wise average product price. Removed the join with categories table.",
            "The SQL query correctly answers the business question by counting the number of products where the 'UnitPrice' is greater than the average 'UnitPrice' of all products. The use of a subquery to determine the average is appropriate, and the comparison and aggregation functions are correctly used.",
            "The SQL query correctly answers the business question by selecting products where UnitsInStock is less than ReorderLevel. The query utilizes the 'products' table and accurately uses the WHERE clause to filter the products based on the given condition. No corrections are needed.",
            "The query is mostly correct but there is a minor issue as the 'suppliers' table is not defined in the schema provided. Assuming the table 'suppliers' exists with a 'SupplierID' column as a primary key, the query is correct.",
            "The SQL query is correct and accurately calculates the total stock value for each product by multiplying 'UnitPrice' by 'UnitsInStock'.",
            "The provided query retrieves product names. However, the question asks for the number of products ordered more than 1000 times. The corrected query counts distinct products meeting the criteria.",
            "The query has an error because it references a non-existent 'OrderDate' column directly within the '[Order Details]' table. Assuming there's an 'orders' table with an 'OrderDate' column, the correct query should include a join with the 'orders' table. Without further schema data, the column 'OrderDate' cannot be resolved. The SQL query has been corrected to assume the presence of such a join.",
            "The SQL query is correct. It checks for products that are not discontinued and aggregates sales data to ensure more than 500 units have been sold.",
            "The SQL query is correct. It retrieves the average discount from the 'Order Details' table, which matches the business question.",
            "The SQL query is mostly correct. However, there's no need to join the categories table as it is not used in the SELECT clause. In the subquery, ensure it uses the correct matching of the category from the main query. The correction aligns `p1.CategoryID = p.CategoryID` directly in the subquery, which is already done in the original query. The redundant JOIN was removed.",
            "The SQL query is correct based on the schema. It correctly calculates total quantity sold per product and orders the results to get the top 5 selling products by quantity.",
            "The SQL query correctly identifies products with stock levels at or below the reorder level and ensures they are not discontinued. No changes are needed.",
            "The query correctly joins the products table and the [Order Details] table to calculate the total units sold per category and orders the results to find the category with the highest number. The use of 'LIMIT 1' ensures only the category with the highest sales is returned. The query is correct.",
            "The query is correct. It counts the number of products where the 'Discontinued' field is set to 1, which indicates that a product is discontinued.",
            "The query is mostly correct, but it refers to an 'order' table which is not defined in the given schema. Assuming 'orders' table should exist and has 'OrderDate' column, the query is fine. Make sure to include 'OrderDate' in the 'orders' table for accuracy.",
            "The original query is mostly correct, but the HAVING clause should use the COUNT(*) function instead of the alias DiscontinuedProducts for clarity and standard compliance.",
            "The original query incorrectly attempted to group by ProductName directly from the [Order Details] table where it doesn't exist. It also didn't join the appropriate tables. The corrected query joins [Order Details] and products tables on ProductID and groups by ProductName from the products table.",
            "Corrected the SQL query to join the 'products' and '[Order Details]' tables on ProductID to access ProductName for each product.",
            "The SQL query correctly calculates the total value of units on order for each product by multiplying the UnitsOnOrder by the UnitPrice in the 'products' table.",
            "The query is correct and accurately counts distinct orders with a discount greater than 20%.",
            "The SQL query is correct. It selects ProductName from the products table where the UnitPrice is above the overall average UnitPrice.",
            "The SQL query correctly identifies products with more units on order than in stock by comparing the UnitsOnOrder and UnitsInStock columns in the products table. The query is correct and adheres to the provided schema.",
            "The query is correct and accurately calculates the average discount applied to each order. It uses the AVG function on the Discount column from the [Order Details] table, which is appropriate for the given question.",
            "The original query correctly aims to find products with below-average sales using a subquery for average sales. However, it misses checking for above-average stock levels. This correction adds an additional HAVING condition to compare against the average stock level.",
            "The original query does not include a join between the [Order Details] table and the products table, which is necessary to retrieve the ProductName. I've corrected the query by joining these tables on ProductID.",
            "The query is mostly correct but needs a few corrections. Ensure 'orders' table is part of the schema with OrderDate. The DATE_FORMAT function should be replaced with an equivalent ANSI SQL function such as TO_CHAR, which isn't directly part of ANSI SQL and depends on the specific SQL dialect. Updated SQL query example (assuming the correct date formatting function exists):\nSELECT DISTINCT ProductName FROM (SELECT ProductName, EXTRACT(YEAR_MONTH FROM OrderDate) AS Month, SUM(Quantity) AS QuantitySold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ProductName, Month) sub WHERE QuantitySold < LAG(QuantitySold) OVER (PARTITION BY ProductName ORDER BY Month);",
            "The original query correctly retrieves the top 5 best-selling products by quantity sold, but the GROUP BY clause should use p.ProductName to ensure each product's name is correctly aggregated.",
            "The SQL query correctly computes the average price of products for each supplier. No corrections are needed.",
            "The SQL query is correct and accurately retrieves products that have not reached their reorder level by checking if UnitsInStock is greater than ReorderLevel.",
            "The original query incorrectly grouped by ProductID instead of ProductName, which would cause issues if products share names. Additionally, using NULLIF to avoid division by zero when calculating the Inventory Turnover Ratio is recommended.",
            "The SQL query correctly implements the requested business question. It accurately calculates the average units on order for products that are not discontinued by using the WHERE clause to filter based on the 'Discontinued' field.",
            "The SQL query correctly retrieves products with a unit price above the average unit price. It uses a subquery to calculate the average and compares each product's unit price against this value.",
            "The query is correct. It correctly joins the products table with the [Order Details] table on ProductID and aggregates the sums of quantities sold, grouped by CategoryID.",
            "The query correctly identifies products with zero units in stock and pending orders by checking if UnitsInStock equals 0 and UnitsOnOrder is greater than 0. No correction needed.",
            "The SQL query is correct and accurately computes the total sales for each supplier by joining the 'products' and '[Order Details]' tables on 'ProductID' and grouping by 'SupplierID'.",
            "The SQL query correctly answers the business question by selecting the product names and reorder levels from the products table. It orders the results by ReorderLevel in descending order and limits the output to the top 5 products. The query adheres to the ANSI SQL standard and the provided schema. No corrections are needed.",
            "The SQL query correctly calculates the percentage of discontinued products by counting discontinued products (`Discontinued = 1`) and dividing by the total count of products. It is accurate and requires no corrections.",
            "The SQL query correctly identifies products with an average discount greater than 10%. However, since the question asks 'how many products,' the query should count the products instead of listing their names. The correct query should use a COUNT function.",
            "The original query did not account for monthly aggregation. I added a JOIN with the 'orders' table to extract the year and month from the 'OrderDate', ensuring the results are grouped by product name, year, and month.",
            "The original query checks for products below the reorder level using 'UnitsInStock < ReorderLevel', which is incorrect. It should be 'UnitsInStock > ReorderLevel' to find products above the reorder level. The corrected query reflects this change.",
            "The SQL query is correct. It joins the 'products' table with the 'Order Details' table, filters for orders with zero discount, groups by ProductID, and selects those with more than 50 sales.",
            "The original query attempts to calculate the average inventory turnover ratio, but incorrectly uses AVG on an already aggregated SUM/AVG calculation directly. Instead, compute the sum of sales and divide by the average of UnitsInStock, ensuring to use NULLIF to avoid division by zero errors.",
            "The original query calculates the turnover ratio but lacks the monthly granularity requested. Additionally, the 'orders' table is missing from the schema, which would contain the 'OrderDate' needed to group results by month and year. The revised query assumes the existence of this 'orders' table.",
            "The SQL query is correct. It accurately joins the 'products' and '[Order Details]' tables on 'ProductID', sums the 'Quantity' from '[Order Details]' to find the total sales quantity per product, groups by 'ProductName', and orders the result in descending order to find the top 5 products. The use of LIMIT 5 is appropriate to achieve the desired outcome.",
            "The SQL query correctly identifies the most common discount rate by counting the frequency of each discount. The use of GROUP BY, ORDER BY, and LIMIT 1 is appropriate for this query. It is syntactically and logically correct.",
            "The query is mostly correct. The only correction needed is to prefix 'SupplierID' with the alias 'p' to clarify the table source in the GROUP BY clause. No other changes are needed.",
            "The query mistakenly joins with a 'categories' table that is not defined in the schema. Assuming CategoryID is correctly used from the 'products' table, we don't need this additional join.",
            "The SQL query is correct and accurately calculates the price difference between the highest and lowest priced products by using the MAX and MIN functions on the UnitPrice column in the products table.",
            "The SQL query correctly calculates the average unit price of products for each supplier by grouping the results by SupplierID and applying the AVG() function to UnitPrice. The query is correct based on the given schema and question.",
            "The SQL query is correct. It calculates the total number of products in each category by grouping the records by CategoryID and counting the ProductID.",
            "The SQL query is correct. It accurately selects product names from the 'products' table where the ReorderLevel is NULL, which matches the business question.",
            "The original query is mostly correct but is missing the 'od.' prefix for ProductID in the WHERE clause. Additionally, OrderDate should be prefixed with 'o.' to clarify its source.",
            "The original query incorrectly joins to the 'categories' table, which is not necessary since 'CategoryID' is already present in the 'products' table. The correct query selects 'p.CategoryID' and groups by it, calculating the total revenue based on the joined 'products' and '[Order Details]' tables.",
            "The original query selects product names, but the question asks for a count of such products. The corrected query uses COUNT(*) to return the number of products meeting the condition.",
            "The SQL query is mostly correct, but it requires better clarity in the use of tables and column names. Specifically, 'OrderDate' is not defined in the given schema, and must be properly sourced. Assuming 'OrderDate' is present in the 'orders' table, the query structure is correct. Verify 'OrderDate' existence in 'orders' or adjust accordingly.",
            "The original query does not specify an aggregation of quantities to determine the top-rated product. By aggregating the quantities using SUM within a subquery and then ordering by the sum of quantities, we can retrieve the ProductID for the top-rated product correctly.",
            "The original query used IIF which is not part of ANSI SQL. The corrected query uses CASE WHEN for conditional aggregation. Removed the WHERE clause filtering by ProductID since we want this for each product.",
            "The SQL query correctly calculates the average quantity per unit for products that are in stock by extracting the numeric part from the QuantityPerUnit field, assuming it is structured as 'number unit'. The use of SUBSTRING_INDEX and CAST is appropriate for this task.",
            "The SQL query is correct and accurately answers the business question by selecting the product names and ordering them based on the sum of quantities in descending order.",
            "The SQL query is correct as it retrieves the average unit price for each supplier by grouping the products by SupplierID.",
            "The SQL query is correct. It selects the count of products where the 'Discontinued' flag is set to 1.",
            "The given SQL query correctly identifies products that have units in stock below their reorder level by selecting the ProductName from the products table where UnitsInStock is less than ReorderLevel. No corrections are needed.",
            "The query correctly calculates the total sales value by multiplying quantity and unit price for each product and groups by CategoryID. Ensure that your database supports the syntax for using terms like [Order Details] with brackets, as it's not standard in all SQL dialects.",
            "The SQL query correctly joins the 'products' and '[Order Details]' tables, groups by 'ProductName', and orders the results by the total quantity sold in descending order to select the top-selling product. The use of 'LIMIT 1' ensures only the top result is returned. The query is correct.",
            "In order to accurately calculate the monthly inventory turnover ratio, the order date should be used to extract the month, rather than the current date. Therefore, the query should include a join with the orders table and extract the month from the order_date column in the orders table.",
            "The provided query is almost correct. However, the table alias or fully-qualified column name needs to be used consistently. I fixed the reference to [Order Details].Discount in the WHERE clause, ensuring no syntax issues occur.",
            "The SQL query is correct. It retrieves the names of products from the 'products' table where 'UnitsOnOrder' is zero, matching the business question.",
            "The original query groups by ProductName where a distinct selection would be enough. Using DISTINCT is more appropriate to avoid unnecessary grouping.",
            "The SQL query correctly identifies each product by its name and counts the number of orders associated with each product. The JOIN operation is correctly set up to match products with their respective 'Order Details'. The query successfully answers the business question.",
            "The SQL query is correct and retrieves the names of products with unit prices above the average price.",
            "The query is correct as it calculates the average quantity ordered per product by joining the products table with the [Order Details] table, grouping by the product name.",
            "The SQL query is correct. It correctly calculates the percentage of sales at a discount by summing the quantities with a discount and dividing by the total quantity for each product, grouped by ProductName.",
            "The original query lacked proper aggregation for the previous month's sales and comparison logic. The revised query specifically compares the sales of the current month with the previous month. It assumes the presence of an 'OrderDate' column in the [Order Details] table.",
            "The original query calculates the maximum discount for each product, but the question asks for the highest discount overall. The corrected query finds the maximum discount across all products, then selects product names that match this discount.",
            "The query attempts to identify products for discontinuation based on sales quantity being less than the reorder level. However, 'HAVING SUM([Order Details].Quantity) < MIN(ReorderLevel)' is incorrect because ReorderLevel belongs to the products table, not aggregated data from order details. Instead, we should analyze sales data in conjunction with inventory signals such as sales being below reorder levels for the product.",
            "The given query is mostly correct, but it incorrectly calculates the stock-to-sale ratio assuming that the units in stock are constant for all sales. Also, there's no handling of potential zero quantity, which can lead to division by zero. If we still want to use this definition, returning a NULL or handling zero appropriately might be necessary. Moreover, ensure proper aliasing and formatting.",
            "The SQL query correctly identifies products where the stock level is below the reorder level and ensures the product is not discontinued. The query is accurate and adheres to the given business question.",
            "The original query does not account for the discount, which affects the total sales calculation. Corrected the query by including the discount in the computation.",
            "The original SQL query is mostly correct. However, it's a good practice to include the table name or alias when referencing columns in a JOIN to avoid ambiguity. I have updated the query to include the table name for the 'Discount' column.",
            "The query groups and sums the quantities correctly but does not identify the top-selling product per category. Use a subquery or common table expression to rank products by TotalQuantity within each CategoryID, then filter by rank.",
            "The query was mostly correct, but 'SupplierID' in the SELECT and GROUP BY clauses should be prefixed with 'products.' to maintain clarity and correctness according to schema references.",
            "The original query correctly calculates the inventory turnover ratio but does not handle division by zero. The corrected query uses NULLIF to avoid dividing by zero in the AVG(UnitsInStock).",
            "The query is mostly correct, but it is missing the extraction of the year from OrderDate to avoid mixing sales from different years in the same month. Additionally, OrderDate should be aliased from the correct table (orders). The corrected query would be: SELECT ProductName, SUM([Order Details].Quantity) AS MonthlySales, EXTRACT(YEAR FROM orders.OrderDate) AS Year, EXTRACT(MONTH FROM orders.OrderDate) AS Month FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ProductName, Year, Month ORDER BY ProductName, Year, Month;",
            "The query correctly joins the products and [Order Details] tables on ProductID, selects the ProductName, and calculates the total discounts. However, the `Discount` needs to be multiplied by the `Quantity` to get the correct total discount for each product. The correct query is: SELECT ProductName, SUM([Order Details].Discount * [Order Details].Quantity * [Order Details].UnitPrice) AS TotalDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY TotalDiscount DESC;",
            "The SQL query is mostly correct, but it should ensure that the 'OrderDate' field is specified from the 'orders' table. I've adjusted it in the query.",
            "The query correctly fetches the products ordered by UnitsOnOrder in descending order, which answers the question about products with the largest number of units on order. The SQL query is correct according to the schema and requirements.",
            "The original query is correct. It calculates the average unit price for each order as intended.",
            "The SQL query correctly counts the number of distinct orders for each product by grouping on ProductID and counting distinct OrderID.",
            "The SQL query is correct as it properly joins the 'products' and '[Order Details]' tables on 'ProductID', and uses MAX(Quantity) to find the highest recorded order quantity in a single transaction for each product. GROUP BY ProductName ensures that the results are aggregated by product.",
            "The SQL query is correct. It calculates the percentage of discontinued products in each category by checking when the 'Discontinued' field is 1 and dividing that count by the total count of products for each 'CategoryID'. The logic and structure are appropriate for the desired business question.",
            "The provided SQL query references a table 'ReorderHistory' with columns 'ReorderLevelDate' and 'ReplenishDate' that do not appear in the given schema. Since this table and these columns are not defined, the SQL query cannot be evaluated against the provided schema. To answer the business question, you would need to define an appropriate schema and data structure that records reorder events and replenish dates, which are currently not specified in the provided schema.",
            "The query is mostly correct, but there is a minor improvement needed: the SQL query should ensure that grouping is done on the correct column and calculation of total sales is accurate. Additionally, double-check the column Grouping by 'CategoryID' should be as intended by business outcomes, possibly involving category table if applicable in full schema context.",
            "The SQL query is correct. It calculates the revenue contribution of each product by joining the products and [Order Details] tables, summing up the revenue for each product and dividing it by the total revenue from all products.",
            "The SQL query is correct for the given business question. It appropriately selects products where the UnitsInStock is less than the ReorderLevel.",
            "The SQL query is correct. It counts the number of discontinued products in the 'products' table by checking if the 'Discontinued' column is equal to 1.",
            "The query attempts to find the total quantity of each product sold last month, but it has some issues. The orders table is referenced but not defined in the schema, so it should be considered. The date range should explicitly cover the last month. Assuming an orders table exists with OrderID and OrderDate, the date logic should also consider using a specific month offset. Here's a revised query: SELECT products.ProductID, SUM([Order Details].Quantity) FROM [Order Details] JOIN products ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= DATEADD(month, DATEDIFF(month, 0, GETDATE()) - 1, 0) AND orders.OrderDate < DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0) GROUP BY products.ProductID;",
            "The original query only sums the 'UnitsInStock'. To determine which suppliers provide the most units, both 'UnitsInStock' and 'UnitsOnOrder' should be considered. Added ordering to see top suppliers.",
            "The original query is incorrect because it does not properly compare the sales quantity to the units in stock. The HAVING clause tries to compare SUM(Quantity) with UnitsInStock, which isn't a valid comparison as UnitsInStock is not accessible in the subquery. The corrected query identifies products still in stock with sales greater than zero.",
            "The SQL query correctly answers the business question by summing the 'UnitsOnOrder' for each 'SupplierID' in the 'products' table. No corrections are needed.",
            "The original SQL query calculates the discount amount, not the discount rate. To find the discount rate, return the Discount column as a percentage by multiplying it by 100.",
            "The SQL query is correct for calculating the average discount across all orders from the [Order Details] table.",
            "The SQL query is almost correct but ANSI SQL does not support LIMIT. Use FETCH FIRST 1 ROWS ONLY instead. Correct query: SELECT ProductID FROM [Order Details] GROUP BY ProductID ORDER BY SUM(Quantity) DESC FETCH FIRST 1 ROWS ONLY;",
            "The original query was missing the monthly granularity. It needs an additional join with the orders table to access the OrderDate and apply monthly aggregation.",
            "The SQL query is mostly correct, but the concept of 'current' implies filtering by the most recent time period or specifying a date range. As there is no date field in the provided schema, you must verify if such a column exists in a related table and join accordingly to filter by date. Without considering date, the SQL will compute the overall ratio based on all available data.",
            "The SQL query is correct and answers the question by calculating the total sales per category and selecting the one with the highest sales.",
            "The SQL query correctly calculates the total revenue after applying discounts by subtracting the discounted amount from the total sales amount for each product in the [Order Details] table. The logic and syntax of the query are correct.",
            "The original query incorrectly does not specify the 'Average monthly performance'. To correct this, rewrite the query using a common table expression (CTE) to incorporate monthly sales and then filter products with total sales higher than the average monthly performance.",
            "The original query uses GROUP BY, which is unnecessary as the goal is simply to list SupplierIDs supplying discontinued products. The correct query removes the GROUP BY clause.",
            "The query is almost correct, but the LIMIT clause is not ANSI SQL standard. Replace LIMIT 1 with FETCH FIRST 1 ROWS ONLY for ANSI SQL compliance. The corrected query should be: SELECT OrderID FROM [Order Details] ORDER BY Discount DESC FETCH FIRST 1 ROWS ONLY;.",
            "The provided SQL query is correct. It selects ProductID and computes the total quantity ordered for each product by summing the Quantity column, grouping by ProductID.",
            "The SQL query correctly captures the business question by selecting products where the inventory levels are below their reorder level. No changes are needed.",
            "The SQL query is correct and accurately calculates the revenue generated from each product by multiplying the quantity ordered by the unit price, and grouping by ProductID and ProductName.",
            "The SQL query is correct. It correctly calculates the total inventory value by multiplying UnitPrice by UnitsInStock for each product and then summing these values.",
            "The SQL query correctly identifies discontinued products that still have stock. No changes are necessary.",
            "The original query did not explicitly join the orders table, which causes the OrderID filter to not work correctly. Changed GETDATE() to CURRENT_DATE for ANSI SQL compliance. Added FETCH FIRST 1 ROW ONLY to limit results in a standard way.",
            "The original query correctly calculates the inventory turnover ratio, but it does not handle the case where the average UnitsInStock might be zero, which would cause a division by zero error. The solution is to use NULLIF to avoid division by zero.",
            "The SQL query correctly retrieves the number of units on order for each product from the 'products' table based on the business question.",
            "The original query does not account for discounts when calculating revenue. The correct formula for revenue is Quantity * (UnitPrice - UnitPrice * Discount). The revised query incorporates this adjustment.",
            "The SQL query is mostly correct, but there is a potential issue: The 'orders' table is not defined in the provided schema, so its structure and existence are assumed. If it does not exist, the query will fail. Other than that, the query is correctly structured to calculate monthly sales by category, assuming 'orders' contains 'OrderDate'.",
            "The query correctly calculates the number of unique orders per product by joining the 'products' table with the '[Order Details]' table and counting distinct OrderIDs for each ProductID. It is properly grouped by ProductID and ordered by the count of unique orders in descending order. The query is correct as per the given question.",
            "The query correctly computes the average quantity ordered per order by aggregating all quantities in the [Order Details] table and calculating their average. No corrections needed.",
            "The query is correct given the schema. It calculates the average discount per supplier and orders the results in descending order by average discount.",
            "The query attempts to find the reorder status of the top 10 best-selling products. However, the column `ReorderStatus` is calculated correctly, and `SUM(od.Quantity)` is used to identify the highest sales, which aligns with the 'Product Performance' metric. The use of LIMIT 10 will indeed capture the top 10 products by sales quantity. The SQL query is correct and follows the business question requirements.",
            "The SQL query correctly retrieves the total order quantity for each product along with its unit price. It also orders the results by the total ordered quantity in descending order. The usage of JOIN and GROUP BY is appropriate for answering the business question. There are no mistakes to correct in this query.",
            "The initial query did not factor in the potential discounts applied to products. To accurately calculate revenue, the discount should be considered. The corrected query includes this adjustment by multiplying the product of quantity and unit price by (1 - od.Discount).",
            "The SQL query is correct. It calculates the average unit price of products grouped by their respective category IDs, which aligns with the business question.",
            "The SQL query is correct. It selects the product name and calculates the total revenue by multiplying the quantity by unit price, correctly aggregating the results for each product.",
            "The SQL query provided correctly answers the question by selecting products where the 'UnitsInStock' is less than the 'ReorderLevel'. No changes are needed.",
            "The SQL query is correct. It properly joins the 'products' and '[Order Details]' tables on 'ProductID', calculates the average discount per product, groups by 'ProductName', and orders the results by 'AverageDiscount' in descending order.",
            "The original query incorrectly retrieves product names. The corrected query counts the products that fall below their reorder level using COUNT(ProductID).",
            "The SQL query is correctly written to answer the question. It joins the 'products' and '[Order Details]' tables on 'ProductID' and groups by 'SupplierID' to calculate the sum of 'Quantity'. The query accurately retrieves the total units ordered per supplier.",
            "The original query did not account for discounts applied to the products when calculating total sales revenue. The corrected query includes the discount in the calculation.",
            "The SQL query is correct for the given question. It calculates the average discount percentage for each product by joining the 'products' table with the '[Order Details]' table and grouping by 'ProductName'.",
            "The original SQL query calculates the total inventory of discontinued products correctly by summing the UnitsInStock where products are discontinued (Discontinued = 1). The query is correct for evaluating the total inventory impact of discontinued products.",
            "The query is correct and uses NULLIF to prevent division by zero errors. It orders the results by the calculated ratio in descending order, which aligns with the business question.",
            "The SQL query correctly calculates the cost of unsold units in stock for each product where UnitsInStock is greater than zero, by multiplying UnitsInStock with UnitPrice. No corrections are needed.",
            "The query is incorrect because AVG(UnitsInStock) cannot be used directly in the SELECT clause as it's an aggregate function without an OVER clause or not part of an aggregate query. Additionally, the GROUP BY clause is missing the necessary aggregation and proper usage with ReorderLevel. Using a window function with PARTITION BY allows for the correct calculation.",
            "The query is correct. It calculates the total revenue after discounts for each product and returns the product with the highest revenue.",
            "The SQL query is correct. It selects products with a unit price greater than the average unit price of all products.",
            "The SQL query is mostly correct. However, the LIMIT clause is not supported in all databases. For ANSI SQL compliance, replace LIMIT with FETCH FIRST 5 ROWS ONLY.",
            "The query correctly computes the total revenue for each product category by joining the products with the order details and categories tables. However, the categories table was not defined in the provided schema, so the query assumes its existence and structure based on common database design practices. Assuming the categories table exists and has a CategoryID column, the query is correct.",
            "The original query retrieves product names, but the question asks for a count. Changed to COUNT(ProductName) for the correct result.",
            "The SQL query is correct. It correctly selects products where the units in stock are less than the reorder level, which matches the business question.",
            "The initial query was almost correct but missing the ProductName in the GROUP BY clause. The corrected query includes ProductName in the GROUP BY clause to follow SQL standards.",
            "The SQL query is correct. It selects products where the stock is zero but have pending orders, matching the business question.",
            "The initial query is almost correct, but it is missing the grouping by c.CategoryName, which is required since it's included in the SELECT clause. The corrected query now includes both c.CategoryID and c.CategoryName in the GROUP BY clause.",
            "The query is mostly correct but lacks a reference to the year for proper grouping by month. It should include EXTRACT(YEAR FROM o.OrderDate) in the SELECT and GROUP BY clauses. Ensure orders table has OrderDate column.",
            "The SQL query correctly calculates the inventory turnover ratio by dividing the sum of the product of quantity and unit price by the average units in stock. It correctly uses NULLIF to avoid division by zero and orders the results in descending order to fetch the product with the highest ratio. The use of LIMIT 1 is appropriate to return the single top result.",
            "The original query incorrectly calculates the discount. It should subtract the discounted price from the product's unit price instead. Moreover, the profit margin calculation needs to account for the actual unit price from the 'products' table rather than the 'Order Details' table, as these might differ.",
            "The provided SQL query correctly retrieves the total quantity sold for each supplier. It joins the products table with the Order Details table on the ProductID and groups the results by SupplierID, summing the Quantity to get the total sold for each supplier.",
            "The query is incorrect. There is no 'OrderDate' column specified in the '[Order Details]' or referenced 'orders' table in the schema, and the join condition is improperly defined. The query should focus on monthly inventory levels directly from the 'products' table without needing an unnecessary join. Here\u2019s a revised query: SELECT EXTRACT(MONTH FROM CURRENT_DATE) AS Month, SUM(p.UnitsInStock) AS InventoryLevel FROM products p GROUP BY EXTRACT(MONTH FROM CURRENT_DATE);",
            "The original query incorrectly uses the MAX function and groups by ProductID. Instead, we should simply order by discount in descending order and limit the result to 1 to find the product with the single highest discount.",
            "The original query references a 'categories' table, which is not defined in the schema. Assuming the CategoryID is sufficient for grouping, the correct query groups directly by the CategoryID column in the 'products' table.",
            "The query correctly uses a LEFT JOIN to identify products that have never been ordered by checking for NULL in the OrderID column from the [Order Details] table. No corrections are needed.",
            "The SQL query is correct. It calculates the percentage of products where 'UnitsInStock' is greater than 'ReorderLevel' using the FILTER clause.",
            "The original query is missing a filter to only include the last 3 months. Added a WHERE clause to filter the OrderDate to the last 3 months.",
            "The original query missed multiplying the discount by the UnitPrice to get the correct total discount value.",
            "The SQL query is mostly correct, but the table name should use double quotes for special characters or spaces. Ensure the SQL environment supports the CORR function.",
            "The SQL query correctly retrieves the names of all products that have been discontinued. It selects the 'ProductName' from the 'products' table where the 'Discontinued' column is equal to 1, which indicates the product is discontinued.",
            "The original query did not include UnitsInStock in the select clause, which can help provide more context to identify products with the highest quantities.",
            "The SQL query correctly calculates the total sales for each product by joining the 'products' table with the '[Order Details]' table using 'ProductID'. It sums the product of 'Quantity' and 'UnitPrice' for each 'ProductName', grouped correctly by 'ProductName'. The query is accurate and follows the given business question and metrics definitions.",
            "The SQL query correctly calculates the total quantity ordered for each product by joining the 'products' table with the '[Order Details]' table on the 'ProductID' key and aggregating the results by product name. The query is accurate and follows the ANSI SQL standard.",
            "The SQL query is correct. It calculates the average discount applied to orders from the [Order Details] table.",
            "The query correctly identifies suppliers with the most products by counting the number of products per SupplierID and ordering them in descending order by ProductCount.",
            "The SQL query is correct as it correctly selects the ProductName from the products table where UnitsInStock is less than ReorderLevel.",
            "The query correctly calculates total sales per category by joining the products table with [Order Details] on ProductID and grouping by CategoryID to sum the sales. The use of LIMIT 1 after ordering by TotalSales in descending order ensures that only the category with the highest sales is returned. The query is correct.",
            "The SQL query is mostly correct, but it should also include 'products.ProductName' in the GROUP BY clause. Here is the corrected query: SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnover FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName;",
            "The query correctly identifies products where the UnitPrice is greater than the average UnitPrice of all products. The SQL query is correct and no changes are necessary.",
            "The query is correct. It multiplies the quantity, unit price, and discount to correctly calculate the total revenue lost due to discounts.",
            "The original query is mostly correct, but the product name was not included in the GROUP BY clause, which is necessary since it's being selected. The correct query adds products.ProductName to the GROUP BY clause.",
            "The SQL query is correct. It selects the product name from the products table and orders the results by the ReorderLevel in descending order, limiting the output to the top result, which will be the product with the highest reorder level.",
            "The query is correct. It correctly joins 'products' and '[Order Details]' tables on 'ProductID', calculates the sales by multiplying 'Quantity' and 'UnitPrice', groups by 'SupplierID', and orders the results in descending order by sales, limiting the output to the top 3.",
            "The original query groups by ProductID, which is unnecessary. Instead, using DISTINCT ensures unique product names are listed without grouping.",
            "The original query retrieves the product names and their units on order, but it does not calculate the total units on order, which is necessary to answer the question. The corrected query sums the units on order for products with zero stock.",
            "The SQL query correctly calculates the average discount across all products from the '[Order Details]' table. No changes are needed.",
            "The SQL query correctly counts the number of products with a unit price above the average unit price. The subquery calculates the average unit price, and the main query filters products whose unit price is greater than this average.",
            "The query is correct as it correctly calculates the total revenue from discontinued products by joining 'products' and '[Order Details]' on 'ProductID' and filtering for discontinued products.",
            "The original query correctly calculates the inventory turnover ratio but does not handle the case where the average units in stock might be zero, leading to a division by zero error. The revised query includes a CASE statement to address this.",
            "The query is missing a check for the current year. The 'OrderDate' column does not exist in the '[Order Details]' table based on the given schema. Assuming 'Order Details' has an 'OrderDate' field, the correct query checks year as well: SELECT p.ProductID FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE EXTRACT(MONTH FROM od.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) AND EXTRACT(YEAR FROM od.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY p.ProductID ORDER BY SUM(od.Quantity) DESC LIMIT 1;",
            "The SQL query correctly computes the total quantity on order for each product category by summing the 'UnitsOnOrder' from the 'products' table and grouping the results by 'CategoryID'. The join with the 'categories' table ensures the correct association by 'CategoryID'. However, the 'categories' table should be defined in the schema for completeness. If it is not defined, the query requires access to it to work as intended.",
            "The SQL query correctly lists products where the reorder level is higher than the number of units in stock. The query accurately uses a comparison operator on the appropriate columns. No changes needed.",
            "The SQL query is correct. It correctly joins the 'Order Details' and 'products' tables on 'ProductID' and filters out discontinued products, calculating the total quantity sold for products that are not discontinued.",
            "The original query incorrectly uses the FILTER clause, which is not part of standard SQL. Instead, use CASE statements for conditional aggregation. The NULLIF function is employed to prevent division by zero when calculating percentage growth. Additionally, ensure that the OrderDate column is properly referenced if it exists in the schema.",
            "The SQL query correctly calculates the average inventory level for each supplier by using the AVG function on the UnitsInStock column and grouping by SupplierID.",
            "The SQL query is correct and retrieves products with a reorder level less than the average reorder level.",
            "Corrected the query to include the discount in the calculation of total category sales. Additionally, ensured proper handling of the OrderDate field if it resides in another table.",
            "The SQL query is correct. It counts the occurrences of each 'QuantityPerUnit' and orders them by frequency in descending order, limiting the result to the top 1.",
            "The query correctly uses the CORR function to evaluate the correlation between the discount percentage and sales volume. The FROM clause correctly references the '[Order Details]' table with an alias 'od'. The query is correct and requires no changes.",
            "The provided SQL query is incorrect because it references 'od.OrderDate', which isn't a column in the '[Order Details]' table as per the schema. To fix this, a join with the 'orders' table is assumed to get the 'OrderDate'. The corrected query includes a join to the 'orders' table to access the 'OrderDate' and extracts the month for analysis.",
            "The provided SQL query is mostly correct but lacked including 'ProductName' in the GROUP BY clause. Following ANSI SQL standards, all non-aggregated columns in the SELECT statement must be included in the GROUP BY clause.",
            "The query is mostly correct, but the 'orders' table and its connection to 'OrderID' must be defined in the schema. If it exists, ensure that the subquery in the WHERE clause is utilizing the correct table and column names for filtering by date.",
            "The SQL query is correct. It joins the 'categories' and 'products' tables on 'CategoryID', calculates the average 'UnitsInStock' for each category, and groups results by 'CategoryName'.",
            "The SQL query is correct. It selects products where the UnitsInStock is less than the ReorderLevel, which answers the business question accurately.",
            "The original query was referencing 'OrderID' without a join to the 'orders' table, which caused an issue. The corrected query uses a JOIN between '[Order Details]' and 'orders' to filter the products not ordered in the last quarter.",
            "The original query correctly calculates the total revenue for each product and lists the top 5 products by sales revenue. However, it does not account for discontinued products. Adding a condition to exclude discontinued products (WHERE p.Discontinued = 0) improves the query.",
            "The SQL query correctly identifies products that are discontinued and have remaining stock by checking the 'Discontinued' column for 1 and 'UnitsInStock' for values greater than 0. No changes needed.",
            "The original query correctly joins the suppliers and products tables and groups by SupplierName. However, it might make sense to include a condition to only sum the UnitsOnOrder where they are greater than zero. This ensures that suppliers with no products on order are not included in the result.",
            "The SQL query is correct. It correctly joins the 'suppliers' and 'products' tables and counts distinct products for each supplier.",
            "The SQL query is mostly correct, but there is one issue. The 'categories' table is referenced in the query, but it is not defined in the schema. Ensure that the 'categories' table exists in the database and that the CategoryName column is present. If the table exists, the query should work as intended.",
            "The query is correct. It calculates the total discount for each order by multiplying the quantity, unit price, and discount, then summing these for each OrderID.",
            "The query is mostly correct, but 'MIN(od.UnitPrice * (1 - od.Discount))' is not calculating the highest margin. It should be 'AVG(od.UnitPrice * (1 - od.Discount))' to consider average discounted price across all orders. Here is the corrected query: SELECT ProductName, UnitPrice - AVG(od.UnitPrice * (1 - od.Discount)) AS Margin FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY ProductName, UnitPrice ORDER BY Margin DESC LIMIT 5;",
            "The SQL query is correct. It joins the products table with the [Order Details] table on ProductID, calculates the average order quantity, groups by product name, and orders the results by average order quantity in descending order.",
            "The provided SQL query is correct. It calculates the overall average discount from the 'Order Details' table using the AVG function.",
            "The original query is almost correct but there's an issue: the 'suppliers' table is not defined in the provided schema. Assuming 'suppliers' exists with SupplierName, the query is correct. Otherwise, the schema needs updating with the 'suppliers' table definition.",
            "The given query is correct. It selects the total value of discontinued products in stock by calculating the sum of UnitsInStock times UnitPrice for products where Discontinued is 1. The query follows the schema correctly without errors.",
            "The query is correctly identifying products that have never been discontinued by checking where the Discontinued column is 0.",
            "The SQL query is correct. It selects product names from the 'products' table where the ProductID does not appear in the 'Order Details' table with a discount greater than 0. This correctly identifies products that were never sold with a discount.",
            "The SQL query correctly answers the question by joining the 'Order Details' table with the 'products' table on 'ProductID'. It sums the quantities ordered for each product, groups by product name, and orders the results in descending order by total quantity. The query is correct according to ANSI SQL standards.",
            "The provided query includes a join with the 'categories' table, but the schema doesn't specify the existence of such a table. Assuming 'categories' table should not be used, I've corrected it by removing the join and directly grouping by CategoryID from the 'products' table.",
            "The SQL query is correct. It selects product names where the stock level is below the reorder level and the product is not discontinued.",
            "The SQL query correctly calculates the percentage of products that are discontinued. It counts the discontinued products and divides by the total product count.",
            "The SQL query correctly calculates the total discount amount applied to each product by multiplying the discount by the quantity and unit price. It then groups the results by product name and orders by the total discount in descending order. The query is accurate and correct for the given question.",
            "The SQL query correctly calculates the total quantity of each product currently on order using the 'UnitsOnOrder' field from the 'products' table. No corrections are needed.",
            "The query is mostly correct, but it uses 'LIMIT', which is not part of ANSI SQL. Replacing 'LIMIT 3' with 'FETCH FIRST 3 ROWS ONLY' adheres to the ANSI SQL standard.",
            "The original query was missing the join to the 'orders' table to access the 'OrderDate' column. The corrected query joins the '[Order Details]' table with the 'orders' table using 'OrderID'.",
            "The original query is missing a join between [Order Details] and the orders table to access OrderDate. Also, the WHERE clause is added to filter the date range to the last year.",
            "The SQL query is correct, assuming a 'suppliers' table exists with a 'SupplierID' column. It correctly identifies suppliers with more than five discontinued products by joining the 'products' table with an assumed 'suppliers' table, filtering for discontinued products, grouping by 'SupplierID', and applying a HAVING clause to count more than five products.",
            "The original query was incorrect as it attempted to join the products table with itself and categories table which does not exist. The corrected query calculates the average order quantity for each category using the products and [Order Details] tables.",
            "The original query was missing a join to the orders table to access the OrderDate. The corrected query includes the join and filters for the past year.",
            "The original query does not correctly identify products that are ordered more after being discontinued. The subquery should include a condition that checks for orders greater than zero to ensure products are actually ordered after being discontinued.",
            "The query correctly retrieves the most common discount rates by counting occurrences of each discount in the [Order Details] table and ordering them in descending order by count.",
            "The query attempts to calculate the standard deviation of unit prices for each product category. However, the 'categories' table is not mentioned in the schema, so this join may not be correct. Assuming the categories table exists, the join and calculation are otherwise correct. Ensure the 'categories' table is defined, or adjust the query accordingly.",
            "The original query mostly works but uses '<>' which might cause duplicate pairs in reverse order. Using '<' in ProductID comparison resolves this issue.",
            "The SQL query provided is incorrect because there is no 'categories' table defined in the schema. To achieve the desired output, we should consider only the available tables. Since only the 'CategoryID' from 'products' is available, we need to revise the query to: SELECT p.CategoryID, AVG(od.Discount) AS AvgDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID;",
            "The original query incorrectly summed UnitsInStock instead of the total quantity from [Order Details]. It should calculate the total quantity ordered across all products provided by each supplier.",
            "The query is correct. It calculates the sales revenue by multiplying the quantity by unit price per product, groups by product name, orders the results by sales revenue in descending order, and limits the output to the top 3 products.",
            "The original query grouped by ProductID but selected ProductName, which is incorrect. The corrected query groups by ProductName to align with the SELECT clause.",
            "The SQL query correctly selects the product with the highest unit price by ordering the results in descending order by UnitPrice and limiting the output to one row. The query is accurate.",
            "The SQL query correctly calculates the difference between UnitsInStock and UnitsOnOrder for each product and orders the results in descending order to find the largest differences. The query is correct as per the requirement.",
            "The SQL query correctly identifies products being sold at a discount greater than 20% by joining the products and [Order Details] tables and filtering on the discount value.",
            "The query incorrectly calculates discounts. Discounts are percentage values and should be applied as reductions to the total price. The correct formula should multiply Quantity and UnitPrice, then apply the discount. Correct query: SELECT SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscounts FROM [Order Details] od;",
            "The original query references a 'suppliers' table which is not defined in the schema. The correct query should only use the 'products' table to find the average units on order for each supplier.",
            "The query incorrectly filters in the WHERE clause before aggregation, which can exclude some eligible categories before evaluation. The correct query needs to count all products per category and compare it to the count of products below the reorder level using the HAVING clause.",
            "The SQL query is correct. It selects the product names and calculates the total revenue by summing the product of quantity and unit price from '[Order Details]' where there is no discount applied. The results are grouped by product name, as required.",
            "The original query was missing a condition to filter sales for the last month. I've added a WHERE clause to filter the OrderDate to the previous month. Also, corrected the GROUP BY clause to include ProductName and removed aggregating by MONTH function.",
            "The SQL query is correct and returns products that are not discontinued with zero units in stock.",
            "The query correctly identifies products with low sales quantity by grouping the data by ProductID and filtering for total sales quantities less than 10. The logic aligns with the 'Product Performance' metric, defined as the sum of ordered quantities, grouped by product, so the query is accurate.",
            "The original query groups by p.ProductID, which will work, but to ensure the results align with user-friendly output showing ProductName, it's better to group by p.ProductName.",
            "The SQL query is mostly correct but there is a mistake in the table definition. The schema provided does not include the 'suppliers' table definition, which implies a missing table. Assuming there is a 'suppliers' table with at least a 'SupplierID' column, the query logic itself is correct. Without the table, the query cannot be fully assessed.",
            "The SQL query is correct. It selects the CategoryID from the products table and computes the average UnitPrice for each category, grouping by CategoryID, which answers the business question accurately.",
            "The SQL query is correct for identifying products that have been discontinued. The 'Discontinued' field is of type BIT, and the condition 'Discontinued = 1' accurately retrieves the products with this attribute set to true.",
            "The SQL query is correct. It selects the product name from the 'products' table and orders the results by 'UnitsInStock' in descending order, limiting the result to one record to find the product with the highest stock level.",
            "The SQL query correctly calculates the average discount applied across all products by using the AVG function on the Discount column from the 'Order Details' table. There are no syntax errors or logical mistakes in the query.",
            "The SQL query is mostly correct but needs minor adjustment. The 'HAVING' clause should use an aggregate function that summarizes the data correctly before comparing it with a non-aggregated column. Simply comparing the sum of orders to the reorder level would work if the logic of comparison aligns with 'significantly exceed'. To ensure correctness, a more precise threshold word could replace 'significantly exceed'. Assuming the current logic is correct as 'exceed', verifying the 'HAVING' condition is comparing aggregated order quantities directly against reorder levels which should be correct under any database running this schema. Thus, the SQL query is correct as per the current logical understanding of 'exceed'.",
            "Corrected the SQL query by removing unnecessary join with suppliers table since SupplierID is already present in the products table.",
            "The original SQL query is correct. It selects the ProductName, UnitsInStock, and UnitsOnOrder from the products table, which aligns with the business question to list all products and their respective stock and order quantities.",
            "The original query does not take into account the discount applied to each order. The formula for total sales should include the discount factor.",
            "The query is correct in identifying the least sold product by summing the quantities from the Order Details and ordering them in ascending order, then limiting the results to 1 to get the least sold product. Ensure that the ORDER BY includes the correct alias 'TotalSold' and 'LIMIT 1' is used to get the least sold product.",
            "The SQL query is correct. It accurately calculates the average reorder level across all products by using the AVG function on the ReorderLevel column from the products table.",
            "The provided SQL query is almost correct, but the 'categories' table was not defined in the schema. To correct it, ensure the 'categories' table is part of the schema or referenced accurately. Assuming 'categories' is valid, the query is correctly structured to find the category with the most discontinued products.",
            "The query is correct. It joins the products and order details tables on the ProductID, then joins with suppliers on SupplierID. The query correctly groups by SupplierID and calculates the total quantity ordered.",
            "The SQL query is correct. It appropriately selects products from the 'products' table where the 'UnitsInStock' is less than 'ReorderLevel', indicating they need restocking.",
            "The SQL query is correct. It calculates the percentage of discontinued products by dividing the count of discontinued products by the total number of products and multiplying by 100.",
            "The original query did not match the unit price correctly from the 'products' table. The corrected query now uses 'p.UnitPrice' for the correlation calculation and includes 'p.ProductName' in the GROUP BY clause.",
            "The original query didn't account for the discount applied to each product in the sales calculation. The corrected query includes the discount in the calculation of MonthlySales by multiplying the unit price and quantity by (1 - Discount).",
            "The query is mostly correct, but it assumes the existence of an 'OrderDate' column in the 'orders' table which is not mentioned in the given schema. If 'OrderDate' exists in 'orders', then the query is correct. Please ensure 'OrderDate' is present in the 'orders' table.",
            "The SQL query correctly calculates the average quantity of units per order for each product by joining the 'products' table with the '[Order Details]' table on 'ProductID'. The result is grouped by 'ProductName', which correctly aligns with the business question given.",
            "The query correctly identifies suppliers and product names for products where the units in stock are below average. The subquery correctly calculates the average units in stock. However, to also include the unique SupplierID list, consider using DISTINCT if the requirement is to avoid listing multiple products from the same supplier.",
            "The query is correct. It calculates the total revenue for each product by considering discounts and groups the results by product name.",
            "The query correctly calculates the sales per product, but the comparison in the HAVING clause should use the MAX function to ensure the ReorderLevel is correctly associated with each grouped product.",
            "The SQL query is correct in terms of calculating the inventory turnover ratio monthly for each product. However, the table 'orders' is not defined in the given schema. Ensure the 'orders' table is part of the schema definition before executing the query.",
            "The original query incorrectly multiplies by the discount, which gives the discounted amount. Instead, it should subtract the discount from 1 to get the final discounted price.",
            "The SQL query correctly identifies the category with the highest total quantity ordered by joining the categories, products, and [Order Details] tables. It accurately sums the quantities and orders them in descending order, limiting the results to the top category.",
            "The original query checks for equality, but products that have 'reached their reorder level' should include those with stock levels that are less than or equal to the reorder level. Changed '=' to '<='.",
            "The SQL query is correct and matches the business question. It correctly joins the 'suppliers' and 'products' tables, calculates the total stock value by multiplying 'UnitPrice' with 'UnitsInStock', and groups the results by 'SupplierName'.",
            "The SQL query does not correctly address the question of monthly sales variance because it lacks a time component. The query should use a date column to calculate variance month by month. Assuming an available 'OrderDate' column in an 'orders' table to capture the month, here is the corrected SQL query: SELECT p.ProductName, VARIANCE(od.Quantity) AS SalesVariance FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, YEAR(o.OrderDate), MONTH(o.OrderDate) ORDER BY SalesVariance DESC LIMIT 1;",
            "The original query does not handle division by zero, and it incorrectly calculates sales growth without averaging it monthly. The corrected query includes LAG to compute monthly sales growth and calculates the average of these growth values. Fixes include handling division by zero and proper usage of EXTRACT for year and month to ensure correct ordering and partitioning.",
            "The SQL query is correct and accurately identifies products with zero sales in the current year.",
            "The SQL query is correct. It joins the 'products' and '[Order Details]' tables on the 'ProductID', calculates the average quantity ordered for each product, groups by product name, and orders the results to present the product with the highest average order quantity.",
            "The query is correct. It selects the product names and calculates the total quantity sold for each product. It then orders the results by the total quantity sold in descending order and limits the output to the top 5 products."
        ],
        "difficulty": [
            "easy",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "advanced",
            "medium",
            "medium",
            "easy",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "easy",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "easy",
            "easy",
            "easy",
            "easy",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "easy",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "easy",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "easy",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "easy",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "advanced",
            "easy",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium"
        ]
    },
    "Employee Performance": {
        "questions": [
            "What is the total sales generated by each employee?",
            "Which employee has generated the most sales?",
            "How many orders were placed by each employee in the year 2022?",
            "Find the employee who has the earliest hire date.",
            "What is the average discount applied per order for each employee?",
            "List the top 5 employees with the highest sales in 2021.",
            "Calculate the total freight cost managed by each employee.",
            "Find the employee with the highest average order value.",
            "Which country has the most sales handled by an employee?",
            "Identify employees who achieve over $100,000 in sales.",
            "List all employees who were hired before 2010.",
            "Calculate the average salary for employees grouped by city.",
            "What is the total quantity of products sold by each employee?",
            "Find the employee who handles the largest order.",
            "How many employees have a title of 'Sales Representative'?",
            "Calculate the sales growth for each employee from 2020 to 2021.",
            "Identify employees without a manager.",
            "Find the average shipping time for orders handled by each employee.",
            "Which region has the most sales by employees?",
            "List employees who have not placed any orders.",
            "What is the total sales value generated by each employee?",
            "Who are the top 5 employees with the highest sales in the last year?",
            "Which employee has the most orders completed in a given month?",
            "What is the average freight cost per order for each employee?",
            "How many employees have sales exceeding $10,000 in total?",
            "What is the total number of years of experience for all employees?",
            "Which employees have not completed any sales in the current year?",
            "What is the average age of employees at the time of hire?",
            "How does the distribution of sales by region compare?",
            "List employees who have managed the most number of other employees.",
            "Which employee has the best performance in terms of sales per month?",
            "Find orders that were shipped late beyond the required date.",
            "Identify employees whose average order size is the largest.",
            "Calculate the total discounts given by each employee.",
            "Which employees have earned a salary above the average?",
            "What are the top 3 most common courtesy titles among employees?",
            "Determine the correlation between employee experience and total sales.",
            "List employees who have been with the company for over 10 years.",
            "What is the trend in monthly sales for each region?",
            "Evaluate the impact of hiring date on the sales performance.",
            "What is the total sales amount generated by each employee in the current month?",
            "Which employee has the highest number of orders placed?",
            "What is the average order value for each employee?",
            "List employees who have not placed any orders in the last year.",
            "What is the total discount given by each employee?",
            "Find the top 5 employees by total sales in the last quarter.",
            "What is the average age of employees based on their birth year?",
            "Identify the employee with the longest tenure in the company.",
            "What is the total freight cost associated with each employee's orders?",
            "Calculate the monthly sales growth for each employee over the past 6 months.",
            "Which employee has the maximum average order value?",
            "What is the total sales generated by employees in each country?",
            "List the employees along with their managers and total sales.",
            "How many orders require shipping but have not yet been shipped per employee?",
            "Identify employees who achieved more than a stipulated sales target last month.",
            "List employees who have served a certain region but have no orders in other regions.",
            "Calculate the average salary of employees based on their title.",
            "Find any correlation between the employees' hire date and their performance in sales.",
            "Which region has the highest sales overall contributed by employees?",
            "What is the total sales generated by each employee this month?",
            "List the employees who have not completed an order last quarter.",
            "Which employee has the highest average order value?",
            "Identify the employee with the most orders shipped late.",
            "Find the total number of orders handled by each employee in the past year.",
            "Which employees have more than five years of employment?",
            "Determine which employee has the highest cumulative discount given across all orders.",
            "Identify employees with the longest employment without managerial reports.",
            "Find the top 10 highest earning employees based on their sales performance.",
            "Calculate the total discounts provided by each employee annually.",
            "Which employee shipped orders to the most diverse range of countries?",
            "What is the monthly growth rate in sales for each employee?",
            "List employees with orders exceeding $10,000 in total order value.",
            "Determine which employee has the most shipments via the highest-cost freight method.",
            "How many orders were placed by the team led by each manager?",
            "Identify employees whose sales performance has declined over the last year.",
            "What are the top three cities where employees have made the most sales?",
            "Find the average order processing time for each employee.",
            "List employees who have managed to reduce discount percentages over the years.",
            "What is the total sales generated by each employee in the last month?",
            "Which employee has generated the highest sales revenue this year?",
            "Which employee has the highest sales in the last month?",
            "What is the average salary of employees grouped by title?",
            "Calculate the number of orders managed by each employee.",
            "Which city has the largest number of employees based on their address?",
            "List employees who manage other employees and their respective reports.",
            "Calculate the total discount given on orders per employee.",
            "Find the correlation between employee hire date and total sales.",
            "Identify the employee with the highest number of orders in the current year.",
            "Calculate the monthly sales trend for each employee.",
            "Which employee handles orders with the maximum average freight cost?",
            "Analyze the impact of employee birth month on sales performance.",
            "List employees who have not been assigned any orders.",
            "Calculate the total revenue generated by orders that were shipped after the required date.",
            "Who are the top-performing employees in terms of sales in each country?",
            "Find the longevity of employees in the company based on hire date.",
            "Determine the employee with the most significant increase in sales year-over-year.",
            "List employees with a managerial role and their direct subordinates.",
            "Calculate the percentage contribution of each employee to the total sales.",
            "Analyze employee performance in relation to customer regions.",
            "What is the total sales revenue generated by each employee?",
            "Which employee has processed the most orders?",
            "How many orders did each employee handle in the last month?",
            "Which territories have the highest sales performance?",
            "What is the relationship between employee tenure and sales performance?",
            "Who are the top 5 employees in terms of total sales revenue?",
            "How does sales performance vary by employee's city?",
            "How many days on average does it take for an order to be shipped by each employee?",
            "What is the total freight cost handled by each employee?",
            "How many employees have sales revenue above the median?",
            "Which employees offer the highest average discount?",
            "How does the number of orders correlate with the employee's hire date?",
            "What is the growth rate of sales for each employee over the past year?",
            "How many employees have increased their sales compared to the previous month?",
            "Which employees have sales in multiple regions?",
            "Analyze the sales impact of employees who report to the same manager.",
            "Identify any outliers in employee sales performance.",
            "What is the total sales amount generated by each employee?",
            "Which employee has generated the highest total sales?",
            "How many orders has each employee processed?",
            "Which employees have not processed any orders?",
            "Calculate the average discount given by each employee on their sales.",
            "Find the total freight cost for each employee's orders.",
            "What is the total number of orders shipped each month?",
            "Identify employees who report to a specific manager.",
            "List employees who have been hired in the last 5 years.",
            "Show the total sales for each employee by year.",
            "How many orders were processed by employees in each city?",
            "Which employee manages the highest number of other employees?",
            "What is the distribution of salaries across different job titles?",
            "Identify the top 5 products by sales revenue generated by employees.",
            "Calculate the difference between required and shipped dates for each order.",
            "What is the average number of orders processed per employee in a month?",
            "List the regions covered by employees and the total sales in each.",
            "Compare the sales performance between employees with different titles.",
            "Find employees with the longest tenure at the company.",
            "List the employees who have the highest sales in the last month.",
            "How many orders have been placed by each employee?",
            "Find the average order value for each employee.",
            "Which employees have a birthday this month?",
            "List all employees who report to a specific manager.",
            "Find the total number of products sold by each employee.",
            "What is the average discount given by each employee?",
            "Determine the most common shipped city for each employee.",
            "Who are the top three employees with the highest number of orders?",
            "What is the monthly sales growth rate for each employee?",
            "Identify employees who have managed orders with a freight cost greater than $500.",
            "List employees who have not completed any orders in the last six months.",
            "Find the total sales for each employee in a specific region.",
            "Calculate the average days between order placement and shipment for each employee.",
            "Identify all employees hired in the last year and their initial sales performance.",
            "What is the total number of orders shipped by each shipping method per employee?",
            "Find the impact of discounts on sales performance for each employee.",
            "What is the total number of orders each employee has managed?",
            "Which employee had the highest sales last month?",
            "What is the total freight cost for orders handled by each employee?",
            "How many orders did each employee handle in the last year?",
            "Which employee had the most orders that were shipped late?",
            "What is the total number of products sold by each employee?",
            "What is the total revenue generated by all employees combined?",
            "Which employee handles the most orders that require urgent shipping?",
            "What is the top sales territory based on order quantity?",
            "How many orders were managed by employees in each country?",
            "Which employee has the longest tenure in the company?",
            "What is the average order value handled by each employee?",
            "Which employee served the most customers?",
            "What percentage of total sales does each employee contribute?",
            "Who are the top 5 performing employees by sales volume?",
            "What are the most common product categories sold by each employee?",
            "Which employees are responsible for the top 25% of business revenue?",
            "How does the number of orders per employee vary by month?",
            "Which employee had the highest increase in sales compared to the previous year?",
            "What is the total sales generated by each employee in the last quarter?",
            "Who are the top 5 sales employees based on total sales?",
            "Which employee has handled the most orders?",
            "What is the monthly growth trend in total sales for each employee?",
            "How many orders have been shipped, but not yet delivered?",
            "Which employees manage the most valuable orders (by total sales amount)?",
            "How does the average order value differ between employees?",
            "Who are the employees with the longest tenure, and how does that correlate with their sales performance?",
            "What is the total number of orders each employee handled in the last year?",
            "Which employee has the highest average discount for orders handled?",
            "Find the distribution of employee sales across different regions.",
            "Which employees have orders pending for more than a month?",
            "Identify the peak sales months for the entire team.",
            "How does sales performance fluctuate by employee age group?",
            "Calculate the average delivery time for orders handled by each employee.",
            "What is the correlation between employee salary and sales performance?",
            "Which employees have managed shipping to the most diverse set of countries?",
            "Find the top 5 products frequently sold by employees.",
            "What is the impact of shipping costs on the sales of each employee?",
            "Which employee had the greatest sales increase compared to the previous month?",
            "What is the total sales value for each employee?",
            "Which employee has generated the highest sales this month?",
            "How many orders has each employee processed this year?",
            "Which employee processed the most orders in the last quarter?",
            "What is the total sales value by employee, grouped by month?",
            "Which employee had the largest discount applied to their orders?",
            "How many unique customers has each employee served?",
            "What is the total freight cost associated with orders handled by each employee?",
            "Which day did each employee have the most orders placed?",
            "What is the average number of orders processed per employee each month?",
            "How many employees have a hire date before 1995?",
            "What is the highest salary paid to any employee?",
            "Which city has the most employees based on their address?",
            "What is the total sales figure broken down by employee countries?",
            "What titles of employees have the highest average sales?",
            "How many employees report directly to each manager?",
            "Which region has the most orders?",
            "What is the most common shipment method used for orders processed by each employee?",
            "What percentage of total sales is contributed by employees with titles containing 'Manager'?",
            "What is the total monthly sales generated by each employee?",
            "Which employee has generated the highest sales this year?",
            "What is the average sales per employee?",
            "List employees who have handled orders with total discounts over 10%.",
            "Identify the top three employees with the fastest average shipping times.",
            "How many orders have been processed by each employee?",
            "What is the total freight cost managed by each employee?",
            "Find out which month had the highest sales and which employees contributed to it.",
            "Calculate the average discount provided by each employee.",
            "Which employees have the highest total sales in each country?",
            "Determine the impact of employee tenure on sales performance.",
            "What is the ratio of shipped orders to required orders per employee?",
            "Identify any employees who have not processed any orders in the last six months.",
            "Find employees with the highest differences in sales by month.",
            "Which employees have managed orders with the longest shipping distances?",
            "What is the total number of unique customers served by each employee?",
            "Which employees have processed orders with the highest average unit price?",
            "List employees who have seen a growth trend in their sales over the last year.",
            "Identify any employee under direct supervision and their total sales contributions.",
            "How does each employee's sales compare to their average order discount?",
            "Which employee has the highest number of orders?",
            "Which employee has generated the highest sales in the last year?",
            "List the top three employees with the most orders completed in the last month.",
            "How many orders has each employee fulfilled that shipped on time?",
            "Which employee handles the most valuable products by unit price?",
            "Find employees whose most common shipment destination is outside their country of residence.",
            "What is the total freight cost assigned to each employee?",
            "Identify any employees who have not completed any orders this year.",
            "Calculate the average number of products per order for each employee.",
            "Which orders have a discount greater than 20% and who manages them?",
            "Find the manager with the highest performing team based on total sales.",
            "What is the distribution of order quantities for each employee over the last three months?",
            "Which employees had orders delayed beyond the required date?",
            "For which employees are sales concentrated in a single region?",
            "How does the average salary of employees correlate with their sales performance?",
            "Which employee's orders have the highest average discount?",
            "Identify patterns in order shipping dates relative to order dates for each employee.",
            "Which employees have experienced the fastest growth in sales over the year?",
            "Compare sales performances between employees working in different regions.",
            "Which employee has the most consistent sales performance over the last six months?",
            "What is the total sales generated by each employee for the month of June 2023?",
            "Which employee has the highest total sales?",
            "What is the average salary of employees in each city?",
            "How many orders were shipped after the required date?",
            "What is the total freight cost for all orders shipped to the USA?",
            "Which employee has processed the maximum number of orders?",
            "List the top 5 employees with the highest average sales per order.",
            "Calculate the total discount given on all orders for each employee.",
            "Which employee works under the highest number of managers?",
            "Provide a list of employees who have a birthday in the current month.",
            "Find the earliest hire date among employees grouped by city.",
            "Which region has the highest total sales?",
            "Calculate the sales growth percentage for each employee from the previous month.",
            "What is the total sales generated by employees hired in the last five years?",
            "Identify employees with zero orders processed.",
            "How does the average employee salary compare between different regions?",
            "Determine the employee with the least freight cost associated with their orders.",
            "Which employee has generated the highest total sales this year?",
            "What is the average order value placed by each employee?",
            "How many orders did each employee process last quarter?",
            "Identify employees who have not processed any orders in the past six months.",
            "What is the total discount given by each employee for all their orders?",
            "Which month had the highest total sales and which employee contributed the most to it?",
            "How many employees were hired within the last year?",
            "What is the average age of employees who have the title 'Sales Representative'?",
            "List all employees who report to a manager located in the same city.",
            "What is the average time taken to ship orders processed by each employee?",
            "Which employee handled the most number of high-value orders (orders over $10,000)?",
            "What is the total freight cost associated with orders processed by each employee?",
            "Identify employees who have processed orders only within a specific country.",
            "What is the total revenue generated by orders within the last financial quarter?",
            "Which five products contribute the most to the total sales of each employee?",
            "What is the correlation between tenure and average sales per employee?",
            "How many orders include a discount greater than 20% and which employees processed them?",
            "Compile a list of employees and their average order quantity per transaction.",
            "What is the total sales amount for each employee?",
            "Which employee generated the most sales in January?",
            "How many orders were processed by each employee?",
            "Which employees have processed more than 100 orders?",
            "How much revenue did each employee generate after discounts?",
            "What are the top 5 employees with the highest number of sales?",
            "Which employees have completed sales across multiple countries?",
            "What is the total freight cost associated with each employee's sales?",
            "Which employee had the highest average discount applied to their sales?",
            "How many unique products did each employee sell?",
            "Who are the top 3 employees based on the total number of units sold?",
            "Which employee was responsible for the most expensive single order?",
            "How have employee sales changed month over month?",
            "Which cities have the most sales attributed to each employee?",
            "For each manager, what is the total sales made by their subordinates?",
            "How many sales were made by employees hired in the last year?",
            "What percentage of total sales does each employee account for?",
            "Identify employees who have not made any sales in the past 6 months.",
            "What is the total sales value generated by each employee in the last month?",
            "Which employee has generated the highest sales revenue in the current year?",
            "Which employee has the highest total sales so far this year?",
            "How many orders were placed by each employee in December?",
            "What is the average order value per employee?",
            "What is the distribution of employee hire dates by year?",
            "Which employees have not yet made a sale?",
            "What is the total freight cost incurred for orders handled by each employee?",
            "What is the average discount applied to orders handled by each employee?",
            "How many employees report to each manager?",
            "Which employee has the longest tenure at the company?",
            "What is the total revenue generated from orders that included a discount?",
            "Which city had the highest number of orders processed by employees?",
            "What is the distribution of sales by employee title?",
            "How many orders included products with a discount greater than 20%?",
            "Which employee has handled the most diverse range of products in their orders?",
            "What is the average shipping time for orders processed by each employee?",
            "How does employee sales compare across different countries?",
            "Who is the top-performing employee in terms of the total number of quantities sold?",
            "Which employee was hired most recently?",
            "How many orders has each employee handled?",
            "What is the total freight cost for all shipped orders?",
            "Which city has the highest number of different employees living in it?",
            "Who are the top three employees by number of orders handled over the past year?",
            "Find the employee with the longest tenure at the company.",
            "Which orders have been delayed beyond their required date?",
            "How many active employees are there by country?",
            "Which employee reports to the highest number of orders?",
            "What is the total revenue contributed by employees in each region?",
            "List all employees and their respective managers.",
            "Which employee handled the most orders that were shipped late?",
            "What are the top selling products and which employees are associated with these sales?",
            "Calculate the yearly turnover rate of employees.",
            "What is the total value of unshipped orders?",
            "Which employee made the highest total sales last month?",
            "How many orders were handled by each employee this year?",
            "Calculate the average order value for each employee.",
            "Identify the employee with the earliest hire date.",
            "List the top 5 employees with the highest number of orders handled.",
            "Which cities have the highest number of sales from employees?",
            "Find the total sales for employees who report to a specific manager.",
            "List employees who have never handled an order.",
            "Identify the employee with the most frequent orders.",
            "Determine the total sales per region by employee.",
            "How does employee salary correlate with total sales?",
            "Identify employees who have been with the company for over 10 years.",
            "List the employee sales on each day of a specific month.",
            "Which employee handled the largest order by value?",
            "Find the difference in sales between the current and previous year for each employee.",
            "What is the average age of employees who have made a sale in the last year?",
            "Which employee manages the most sales in the United States?",
            "What is the total sales generated by each employee in the current year?",
            "How has the average employee salary changed over the past 5 years?",
            "What is the total number of orders handled by each employee?",
            "How many employees were hired before 2000?",
            "Which employees have not recorded any sales this year?",
            "What is the distribution of employee titles within the company?",
            "What is the highest discount given on an order and by which employee?",
            "Which region hosts the most employees?",
            "What is the total number of sales per city?",
            "Which employee's orders have the highest average freight cost?",
            "How many orders have been shipped late?",
            "What is the average age of employees?",
            "What is the total sales per month for each employee?",
            "Which employees report to whom?",
            "What is the most common shipping method used for orders?",
            "How much sales did employees generate in each country?",
            "Which employee has the highest number of distinct customers?",
            "Which employee had the highest total sales this year?",
            "What are the average sales per employee for last month?",
            "What is the total sales generated by each employee for the current month?",
            "Which employee has generated the highest sales revenue?",
            "How many orders did each employee handle last year?",
            "Find the employee who has worked the longest in the company.",
            "Determine the average age of employees at the company.",
            "Which employees report to the same manager, and how many are they?",
            "Identify employees who have birthdays this month.",
            "What is the average time taken from order placement to shipping for each employee?",
            "List the top 5 employees based on sales performance for the previous quarter.",
            "What is the total freight cost incurred for orders managed by each employee?",
            "Determine the total discount amount given by each employee.",
            "Which employee had the highest number of orders delayed beyond the required date?",
            "Calculate the total sales per employee per region.",
            "How many different titles are held by employees, and what are they?",
            "Identify the employees who have a higher salary than the average salary.",
            "Which employees are responsible for the majority of orders in a specific territory?",
            "List the top 3 products sold by each employee based on quantity.",
            "Analyze the trend of monthly sales by employee.",
            "Determine the average number of orders handled per week by employees.",
            "Identify the employee with the shortest average order processing time.",
            "What is the average salary of employees by country?",
            "Which employee has made the most sales this year?",
            "How many orders were placed each month for the last year?",
            "List the employees who have not placed any orders this month.",
            "Identify the top 3 cities by total sales revenue.",
            "Which products have the highest discount on average?",
            "How much freight cost has been incurred for each shipping country?",
            "What is the average order size (quantity) by employee?",
            "Identify employees with a salary above the average and who have generated above-average sales.",
            "Which employees have shipped orders late and by how many days on average?",
            "List the top 5 employees with the highest sales growth over the last year.",
            "What is the total number of unique products ordered this year?",
            "Which employee had the earliest hire date?",
            "Calculate the average sales per month for each employee for the last 6 months.",
            "Find employees living in the same city as their manager.",
            "How many unique customers placed orders handled by each employee?",
            "Identify the employee with the longest time since their last order.",
            "What is the most common shipping method used for orders over $500?",
            "Which employee generated the highest total sales last month?",
            "List the top 5 employees with the most orders in the past year.",
            "Find the employee with the earliest hire date who also has a manager.",
            "Calculate the total freight cost for each employee's orders.",
            "How many orders were placed by each employee in each city?",
            "Determine the employee with the largest number of distinct products sold.",
            "List the employees who have never reported to a manager.",
            "Identify employees who have a 'Manager' title and calculate their total sales.",
            "Find the employee with the highest number of late shipments.",
            "What is the total number of units sold by each employee?",
            "Identify employees who have increased their sales by over 10% compared to the previous month.",
            "Find the average salary of employees who have generated over $50,000 in sales.",
            "What is the total number of orders processed per employee, broken down by year?",
            "Calculate the sales to salary ratio for each employee.",
            "Find the employees whose birth month is the current month.",
            "Which employee has the most extended period between hire date and first order?",
            "What is the total discount provided by each employee?",
            "Which employee has generated the highest sales in the last quarter?",
            "Calculate the average order value processed by employees.",
            "Identify the employee with the most orders in a given year.",
            "Which city has the highest employee sales?",
            "Determine the number of orders processed by each employee by year.",
            "What is the average time taken from order placement to shipment for each employee?",
            "List top five employees in terms of sales revenue generation.",
            "Calculate the total freight costs associated with each employee.",
            "Which employee has the maximum number of late shipments?",
            "Identify seasonal trends in employee sales over the years.",
            "Which products have a high sales volume due to specific employees?",
            "Evaluate the impact of discounts on sales generated by employees.",
            "Find the top employee in terms of sales for each territory.",
            "Determine the hire dates of employees who have achieved the highest sales.",
            "Analyze the correlation between employee job title and sales performance.",
            "Calculate the monthly sales growth for each employee over the past year.",
            "Determine the proportion of orders that were shipped late by different employees.",
            "What is the total revenue difference between employees with different titles?",
            "Identify employees with consistent monthly sales growth.",
            "What is the total sales for each employee for the current month?",
            "Which employee has generated the highest sales so far this year?",
            "How many orders has each employee handled in the past quarter?",
            "List the top 5 employees with the most orders shipped on time.",
            "What is the total freight cost incurred by shipments handled by each employee?",
            "Which employees are responsible for the orders that were shipped late last month?",
            "How many unique products does each employee typically handle in their orders?",
            "Determine the employee with the highest average discount applied to their orders.",
            "What is the demographic distribution (e.g., city or country) of employees?",
            "Calculate the growth in monthly sales for each employee over the past year.",
            "Which employee reports to the manager with the highest average sales per employee?",
            "Find the employee who has handled the most orders for the product with the highest selling price.",
            "For each region, which employee has the highest total sales?",
            "What is the correlation between the hire date and sales performance of employees?",
            "Which employees have managed orders with a total value over $10,000?",
            "Identify employees who have never handled an order in a specific region.",
            "Which employees have a higher average order value than their direct manager?",
            "Which employee has the highest total sales in the current year?",
            "What are the top three products sold by the employee with the highest sales?",
            "How many orders did each employee handle last month?",
            "Which employee handled the most number of orders in the last quarter?",
            "How many employees were hired in each year?",
            "How many employees have a title containing 'Manager'?",
            "What is the average age of employees in each city?",
            "Which employees report to a specific manager?",
            "Calculate the total discount amount granted by each employee.",
            "What is the monthly sales trend for each employee over the past year?",
            "Identify the employee responsible for orders with the highest freight costs.",
            "List all employees who have handled orders shipped to a specific country.",
            "What is the total revenue contribution of employees grouped by their title?",
            "What is the average salary of employees grouped by region?",
            "Which employees have handled orders with a shipping cost greater than a specified amount?",
            "What is the total sales generated by each employee in 2023?",
            "Which employee generated the highest sales in the first quarter of 2023?",
            "How many orders were handled by each employee in 2023?",
            "What is the average order value processed by each employee?",
            "List employees along with the total freight costs they managed in 2023.",
            "Who are the top 5 employees in terms of sales revenue?",
            "What is the average discount given by employees?",
            "Which city had the highest total sales?",
            "List employees who have processed more than 100 orders.",
            "How many days is the average shipping delay for orders handled by each employee?",
            "Which employees have generated sales in every month of 2023?",
            "Identify employees who have earned a total sales amount greater than their annual salary.",
            "What is the sales trend per month for 2023 for each employee?",
            "Which employees have the highest order counts in different shipping regions?",
            "What are the top-selling products for each employee?",
            "Calculate the sales performance growth rate for each employee quarter over quarter.",
            "Determine which employees have given the highest average discount.",
            "Find all employees who ship to more than three different countries.",
            "What is the relationship between employee hire date and sales performance?",
            "What is the average order amount per employee?",
            "Which city has the most employee-generated sales?",
            "Which employee has the most orders shipped on time?",
            "What is the average discount rate per employee?",
            "Who is the youngest employee in the company?",
            "Which employee has been with the company the longest?",
            "What is the total sales for each product?",
            "Which employee manages the highest number of employees?",
            "What is the employee count by title?",
            "What is the total sales by country?",
            "What is the distribution of employee salaries?",
            "What is the monthly sales trend for each employee?",
            "Which employee generated the most sales in the last quarter?",
            "Which employees have generated the highest sales in the past year?",
            "How many orders did each employee handle in the last quarter?",
            "Which employee generated the most sales last month?",
            "What is the average sales amount per order by each employee?",
            "What is the total discount amount applied by each employee?",
            "Which city has the highest number of orders, and who handles them?",
            "Find the employee with the longest tenure. How much sales have they generated?",
            "What is the total freight cost for each shipping country?",
            "Identify the employees who have not met their sales targets in the last month.",
            "What is the average discount given per order by each employee?",
            "List the employees and the corresponding regions they manage.",
            "How many distinct customers does each employee handle?",
            "Identify the top 5 employees in terms of sales in the current year.",
            "What is the sales growth rate for each employee compared to the previous year?",
            "Which employee serves the most diverse regions?",
            "What is the average shipping time for orders handled by each employee?",
            "Identify employees whose orders have the largest average discount.",
            "List the top 3 cities by total sales and the corresponding managing employees.",
            "What is the total sales generated by each employee within a specific month?",
            "Which employee has the highest sales in a given year?",
            "List the top 5 employees based on the number of orders handled.",
            "Identify employees who have not made any sales in the last quarter.",
            "Which employee has the shortest delivery time on average?",
            "Determine the employee with the most orders shipped before the required date.",
            "Calculate the total freight cost for orders handled by each employee.",
            "Identify the most common shipping method used by each employee.",
            "Find the employee with the highest average order quantity.",
            "Determine which employee has served the most unique customers.",
            "How many employees have sales greater than a specific threshold?",
            "Identify the employees who report to a specific manager and their sales totals.",
            "Compare the total sales of employees who joined in the last year to those who have been with the company longer.",
            "List the employees who have handled orders from more than one region.",
            "Find the average discount given in orders handled by each department.",
            "What is the sales trend over the last 6 months for each employee?",
            "Determine the sales per order for each employee and identify any significant outliers.",
            "Which employee has the most orders pending shipment?",
            "What is the total sales for employees based on the city they work in?",
            "List the employees who have not made any sales this year.",
            "Which employee has worked the longest with the company?",
            "How many unique customers have each employee served?",
            "List the employees who were hired in the last year.",
            "Which city has the highest number of orders processed by employees?",
            "Find the employee with the largest number of orders with discounts.",
            "What is the average sales per employee per month?",
            "What is the total number of orders shipped on time by each employee?",
            "Which employee handled the most expensive single order?",
            "List all employees who have never been a manager.",
            "Which employee's orders have the highest average discount applied?",
            "What is the distribution of employees across different cities?",
            "List the employees who have been with the company for more than 5 years.",
            "What is the total freight cost for orders processed by each employee?",
            "Identify the employee who handled the most orders in the last month.",
            "What is the sales growth rate by employee for each month?",
            "Which employee processed the most number of units in their orders?",
            "How do employees' sales compare to their salary expenditures?",
            "Which month had the highest total sales generated by employees?",
            "What is the average time gap between order placement and shipping for each employee?",
            "How many unique products has each employee sold?",
            "Find the employee whose orders have encountered the most delays in shipping.",
            "What are the average sales per order for each employee?",
            "Rank employees based on the total value of discounts provided in their orders.",
            "Who are the top performers based on the sales generated in the last quarter?",
            "Analyze the impact of employee birth years on their sales performance.",
            "Who is the top-performing employee in terms of sales?",
            "How many orders were handled by each employee?",
            "How many orders were handled by each employee in the last month?",
            "Who are the top three employees in terms of sales?",
            "What is the total sales generated by employees in each city?",
            "Which employee processed the most diverse range of products?",
            "What is the distribution of employee salaries by region?",
            "What is the total sales for orders shipped last quarter?",
            "Which employee shipped the most orders to 'USA'?",
            "How many days on average does each employee take to ship an order?",
            "What are the total sales by employees who were hired last year?",
            "Which employees have never made a sale?",
            "How much discount is typically applied to orders by each employee?",
            "Which employee had the highest number of late shipments?",
            "What is the total sales amount generated by each employee for the current year?",
            "Which employee has handled the most orders in the last quarter?",
            "List employees who have a birthday this month.",
            "Find the average discount applied by each employee across all orders.",
            "What is the highest and lowest salary for employees in each city?",
            "Determine the average number of orders processed by employees each month.",
            "Identify employees who have not placed any orders in the past six months.",
            "Calculate the total freight costs per employee for the current year.",
            "Find the employee with the most sales in a particular region.",
            "What percentage of orders were shipped late for each employee?",
            "List the employees who have managed the highest total order value without any discounts.",
            "Identify the top 5 employees with the highest sales for the last year.",
            "Calculate the total sales for each employee by month.",
            "Find employees who have worked for more than 10 years and their number of orders handled.",
            "What is the difference between employees\u2019 highest and lowest monthly sales?",
            "Who are the employees managing the orders with the highest average freight charges?",
            "Identify employees with the highest number of unique customers.",
            "Calculate the total quantity of products sold by each employee.",
            "Find the employees whose orders have the shortest shipping time.",
            "Determine the impact of employee turnover on sales over the last three years.",
            "Which employee has the highest sales in the last quarter?",
            "How many employees have generated more than $50,000 in sales?",
            "What are the average sales per employee per month?",
            "Which employees are responsible for the top 10 largest orders?",
            "How much freight cost has been incurred by each employee's orders?",
            "What is the sales performance of employees working in different regions?",
            "Find employees whose sales have increased by more than 20% compared to the previous month.",
            "Which employee has the most significant number of orders that include discounts?",
            "How does the average discount applied affect total sales per employee?",
            "Identify employees with no sales in the last month.",
            "What are the total units sold by each employee?",
            "How many orders were not shipped by the required date for each employee?",
            "Which employees have sales in more than three different countries?",
            "What is the average hiring duration of employees in correlation to their sales?",
            "Identify the correlation between employee salary and total sales.",
            "How many orders per employee are shipped with each shipping method?",
            "What is the earliest hire date among employees who generated top 10% sales?",
            "How do employees' birth months correlate to their sales success?",
            "What is the average order size per employee in terms of revenue?",
            "How many orders were placed by each employee per month?",
            "Which employee processed the largest number of orders this year?",
            "What is the average discount given by each employee on their orders?",
            "Which employee manages the most orders in terms of required delivery date?",
            "What is the trend of total sales for each employee month-by-month?",
            "How does the average monthly sales of each employee compare across different regions?",
            "Which employee has the highest growth in sales compared to the previous quarter?",
            "What is the age distribution of employees and how does it relate to total sales?",
            "How does the length of employment relate to each employee's total sales?",
            "Which employees have met their sales targets for the past quarter?",
            "What percentage of total sales is contributed by each employee?",
            "Which employees have orders with the highest discount and what impact does that have on sales?",
            "How does employee Title affect average sales performance?",
            "Which employee had the most sales in the last quarter?",
            "List employees who have not handled any orders yet."
        ],
        "sql_queries": [
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS TotalOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE YEAR(o.OrderDate) = 2022 GROUP BY e.EmployeeID;",
            "SELECT EmployeeID, FirstName, LastName, HireDate FROM employees ORDER BY HireDate ASC LIMIT 1;",
            "SELECT e.EmployeeID, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2021 GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AvgOrderValue DESC LIMIT 1;",
            "SELECT o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CountrySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry ORDER BY CountrySales DESC LIMIT 1;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING TotalSales > 100000;",
            "SELECT EmployeeID, FirstName, LastName, HireDate FROM employees WHERE HireDate < '2010-01-01';",
            "SELECT City, AVG(Salary) AS AvgSalary FROM employees GROUP BY City;",
            "SELECT e.EmployeeID, SUM(od.Quantity) AS TotalQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, o.OrderID ORDER BY OrderValue DESC LIMIT 1;",
            "SELECT COUNT(*) AS NumSalesRepresentatives FROM employees WHERE Title = 'Sales Representative';",
            "SELECT e.EmployeeID, ((SUM(CASE WHEN YEAR(o.OrderDate) = 2021 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - SUM(CASE WHEN YEAR(o.OrderDate) = 2020 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) / NULLIF(SUM(CASE WHEN YEAR(o.OrderDate) = 2020 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END), 0)) * 100 AS SalesGrowth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT EmployeeID, FirstName, LastName FROM employees WHERE ReportsTo IS NULL;",
            "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NOT NULL GROUP BY e.EmployeeID;",
            "SELECT o.ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS RegionSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN employees e ON o.EmployeeID = e.EmployeeID GROUP BY o.ShipRegion ORDER BY RegionSales DESC LIMIT 1;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 5",
            "SELECT orders.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM orders WHERE MONTH(orders.OrderDate) = 6 AND YEAR(orders.OrderDate) = 2023 GROUP BY orders.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT employees.EmployeeID, AVG(orders.Freight) AS AverageFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID",
            "SELECT COUNT(*) FROM (SELECT employees.EmployeeID FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID HAVING SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) > 10000) AS subquery;",
            "SELECT SUM(TIMESTAMPDIFF(YEAR, employees.HireDate, CURDATE())) AS TotalYearsExperience FROM employees",
            "SELECT employees.EmployeeID FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID AND YEAR(orders.OrderDate) = YEAR(CURDATE()) WHERE orders.OrderID IS NULL",
            "SELECT AVG((CAST(JULIANDAY(employees.HireDate) - JULIANDAY(employees.BirthDate)) / 365.25 AS DECIMAL(5, 2))) AS AverageAgeAtHire FROM employees",
            "SELECT employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Sales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Region",
            "SELECT e1.FirstName, e1.LastName, COUNT(e2.EmployeeID) AS ManageCount FROM employees e1 JOIN employees e2 ON e1.EmployeeID = e2.ReportsTo GROUP BY e1.EmployeeID ORDER BY ManageCount DESC;",
            "SELECT employees.EmployeeID, AVG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) OVER (PARTITION BY EXTRACT(YEAR FROM orders.OrderDate), EXTRACT(MONTH FROM orders.OrderDate), employees.EmployeeID) AS AvgMonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
            "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate",
            "SELECT employees.EmployeeID, AVG([Order Details].Quantity) AS AvgOrderSize FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY AvgOrderSize DESC LIMIT 1",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
            "SELECT employees.EmployeeID FROM employees WHERE Salary > (SELECT AVG(Salary) FROM employees);",
            "SELECT TitleOfCourtesy, COUNT(*) AS Count FROM employees GROUP BY TitleOfCourtesy ORDER BY Count DESC LIMIT 3",
            "SELECT employees.EmployeeID, (DATEDIFF(CURDATE(), employees.HireDate) / 365) AS ExperienceYears, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
            "SELECT employees.EmployeeID, TIMESTAMPDIFF(YEAR, employees.HireDate, CURDATE()) AS YearsWithCompany FROM employees WHERE TIMESTAMPDIFF(YEAR, employees.HireDate, CURDATE()) > 10;",
            "SELECT MONTH(orders.OrderDate) AS OrderMonth, employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY OrderMonth, employees.Region",
            "SELECT employees.EmployeeID, YEAR(employees.HireDate) AS HireYear, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, YEAR(employees.HireDate)",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY OrderCount DESC LIMIT 1",
            "SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, employees.FirstName, employees.LastName FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderID IS NULL OR orders.OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName HAVING COUNT(orders.OrderID) = 0",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE QUARTER(orders.OrderDate) = QUARTER(CURDATE()) - 1 AND YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 5",
            "SELECT AVG(YEAR(CURDATE()) - YEAR(BirthDate)) AS AverageAge FROM employees",
            "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS FullName, DATEDIFF(CURDATE(), employees.HireDate) AS Tenure FROM employees ORDER BY Tenure DESC LIMIT 1;",
            "SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID",
            "SELECT employees.EmployeeID, YEAR(orders.OrderDate) AS Year, MONTH(orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATEADD(MONTH, -6, CURRENT_DATE) GROUP BY employees.EmployeeID, YEAR(orders.OrderDate), MONTH(orders.OrderDate) ORDER BY employees.EmployeeID, Year, Month",
            "SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY AvgOrderValue DESC LIMIT 1",
            "SELECT employees.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Country",
            "SELECT e1.EmployeeID AS EmployeeID, CONCAT(e1.FirstName, ' ', e1.LastName) AS EmployeeName, CONCAT(e2.FirstName, ' ', e2.LastName) AS ManagerName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees e1 LEFT JOIN employees e2 ON e1.ReportsTo = e2.EmployeeID JOIN orders ON e1.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY e1.EmployeeID, e1.FirstName, e1.LastName, e2.FirstName, e2.LastName",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS UnshippedOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate IS NULL AND orders.RequiredDate IS NOT NULL GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY employees.EmployeeID HAVING TotalSales > 10000;",
            "SELECT e1.EmployeeID, e1.FirstName, e1.LastName FROM employees e1 JOIN orders o ON e1.EmployeeID = o.EmployeeID GROUP BY e1.EmployeeID, e1.FirstName, e1.LastName HAVING COUNT(DISTINCT o.ShipRegion) = 1 AND MAX(e1.Region) = 'X'",
            "SELECT employees.Title, AVG(employees.Salary) AS AverageSalary FROM employees GROUP BY employees.Title",
            "SELECT e.EmployeeID, e.HireDate, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.HireDate ORDER BY TotalSales DESC",
            "SELECT employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Region ORDER BY TotalSales DESC LIMIT 1",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL OR (o.OrderDate < DATE_SUB(CURDATE(), INTERVAL MOD(MONTH(CURDATE()) - 1, 3) + 1 MONTH) AND o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL MOD(MONTH(CURDATE()) - 1, 3) + 4 MONTH));",
            "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AvgOrderValue DESC LIMIT 1;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS LateOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.RequiredDate < o.ShippedDate GROUP BY e.EmployeeID ORDER BY LateOrders DESC LIMIT 1;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS TotalOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY e.EmployeeID;",
            "SELECT EmployeeID FROM employees WHERE DATEDIFF(CURRENT_DATE, HireDate) / 365 > 5;",
            "SELECT e.EmployeeID, SUM(od.Discount * od.UnitPrice * od.Quantity) AS TotalDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalDiscount DESC LIMIT 1;",
            "SELECT e.EmployeeID FROM employees e LEFT JOIN employees m ON e.EmployeeID = m.ReportsTo WHERE m.ReportsTo IS NULL ORDER BY e.HireDate ASC;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalEarnings FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalEarnings DESC LIMIT 10;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscounts FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, COUNT(DISTINCT o.ShipCountry) AS UniqueCountries FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY UniqueCountries DESC LIMIT 1;",
            "SELECT e.EmployeeID, YEAR(o.OrderDate) AS Year, MONTH(o.OrderDate) AS Month, (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) - LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) OVER (PARTITION BY e.EmployeeID ORDER BY YEAR(o.OrderDate), MONTH(o.OrderDate))) / LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) OVER (PARTITION BY e.EmployeeID ORDER BY YEAR(o.OrderDate), MONTH(o.OrderDate)) AS MonthlyGrowth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, YEAR(o.OrderDate), MONTH(o.OrderDate);",
            "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN (SELECT OrderID, SUM(UnitPrice * Quantity * (1 - Discount)) AS OrderValue FROM [Order Details] GROUP BY OrderID) ov ON o.OrderID = ov.OrderID WHERE ov.OrderValue > 10000;",
            "SELECT o.EmployeeID, COUNT(o.OrderID) AS ShipmentCount FROM orders o WHERE o.Freight = (SELECT MAX(Freight) FROM orders) GROUP BY o.EmployeeID ORDER BY ShipmentCount DESC LIMIT 1;",
            "SELECT m.EmployeeID AS ManagerID, COUNT(o.OrderID) FROM employees e JOIN employees m ON e.ReportsTo = m.EmployeeID JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY m.EmployeeID;",
            "SELECT EmployeeID FROM (SELECT e.EmployeeID, EXTRACT(YEAR FROM o.OrderDate) AS Year, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AnnualSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, EXTRACT(YEAR FROM o.OrderDate)) AS Performance WHERE AnnualSales < LAG(AnnualSales) OVER (PARTITION BY EmployeeID ORDER BY Year);",
            "SELECT o.ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCity ORDER BY TotalSales DESC LIMIT 3;",
            "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgProcessingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NOT NULL GROUP BY e.EmployeeID;",
            "SELECT DISTINCT EmployeeID FROM (SELECT EmployeeID, Year, AvgDiscount, LAG(AvgDiscount, 1) OVER (PARTITION BY EmployeeID ORDER BY Year) AS PrevAvgDiscount FROM (SELECT e.EmployeeID, YEAR(o.OrderDate) AS Year, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, YEAR(o.OrderDate)) AS YearlyDiscounts) AS Discounts WHERE AvgDiscount < PrevAvgDiscount;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT Title, AVG(Salary) AS AvgSalary FROM employees GROUP BY Title;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
            "SELECT City, COUNT(EmployeeID) AS EmployeeCount FROM employees GROUP BY City ORDER BY EmployeeCount DESC LIMIT 1;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, r.FirstName AS ReportFirstName, r.LastName AS ReportLastName FROM employees e JOIN employees r ON e.EmployeeID = r.ReportsTo;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, YEAR(CURDATE()) - YEAR(e.HireDate) AS YearsSinceHire FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY e.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT e.EmployeeID, MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, MONTH(o.OrderDate);",
            "SELECT e.EmployeeID, AVG(o.Freight) AS AvgFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY AvgFreight DESC LIMIT 1;",
            "SELECT e.EmployeeID, MONTH(e.BirthDate) AS BirthMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, MONTH(e.BirthDate);",
            "SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL;",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LateShipmentRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.ShippedDate > o.RequiredDate;",
            "SELECT e.EmployeeID, e.Country, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.Country ORDER BY e.Country, TotalSales DESC;",
            "SELECT EmployeeID, DATEDIFF(CURDATE(), HireDate)/365.25 AS YearsWithCompany FROM employees;",
            "SELECT e.EmployeeID, YEAR(o.OrderDate) AS OrderYear, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, YEAR(o.OrderDate);",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, r.FirstName AS SubFirstName, r.LastName AS SubLastName, r.Title FROM employees e JOIN employees r ON e.EmployeeID = r.ReportsTo WHERE e.Title LIKE '%Manager%';",
            "SELECT e.EmployeeID, (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / (SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID)) * 100 AS SalesContribution FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, o.ShipCountry FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName, o.ShipCountry HAVING COUNT(DISTINCT o.ShipCountry) > 1;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS NumberOfOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY NumberOfOrders DESC;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrdersLastMonth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY e.EmployeeID;",
            "SELECT e.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Region ORDER BY TotalSales DESC;",
            "SELECT e.EmployeeID, DATEDIFF(CURRENT_DATE, e.HireDate) AS Tenure, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT e.City, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.City;",
            "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageShippingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
            "WITH Sales AS (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID), MedianSales AS (SELECT TotalSales FROM Sales ORDER BY TotalSales LIMIT 1 OFFSET (SELECT COUNT(*) FROM Sales) / 2) SELECT COUNT(*) FROM Sales WHERE TotalSales > (SELECT * FROM MedianSales);",
            "SELECT e.EmployeeID, AVG(od.Discount) AS AverageDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AverageDiscount DESC;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS NumberOfOrders, MONTH(e.HireDate) AS HireMonth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, MONTH(e.HireDate);",
            "SELECT e.EmployeeID, (SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) / NULLIF(SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END), 0) AS GrowthRate FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, (SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE) - 1 AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) AS SalesIncrease FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, COUNT(DISTINCT o.ShipRegion) AS RegionsCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID HAVING RegionsCount > 1;",
            "SELECT e.ReportsTo, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ManagerSalesImpact FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE e.ReportsTo IS NOT NULL GROUP BY e.ReportsTo;",
            "SELECT e.EmployeeID, TotalSales FROM (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, AVG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) OVER () AS AverageSales, STDDEV_SAMP(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) OVER () AS SalesSTD FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID) AS SalesSummary WHERE ABS(TotalSales - AverageSales) > 2 * SalesSTD;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderID IS NULL;",
            "SELECT employees.EmployeeID, AVG([Order Details].Discount) AS AverageDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
            "SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS ShipMonth, COUNT(OrderID) AS OrderCount FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipMonth;",
            "SELECT employees.EmployeeID, employees.FirstName, employees.LastName FROM employees WHERE employees.ReportsTo = ?;",
            "SELECT EmployeeID, FirstName, LastName FROM employees WHERE HireDate >= DATE_SUB(CURDATE(), INTERVAL 5 YEAR);",
            "SELECT YEAR(orders.OrderDate) AS OrderYear, employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY YEAR(orders.OrderDate), employees.EmployeeID;",
            "SELECT employees.City, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.City;",
            "SELECT employees.EmployeeID, COUNT(subordinate.EmployeeID) AS NumberOfSubordinates FROM employees LEFT JOIN employees AS subordinate ON employees.EmployeeID = subordinate.ReportsTo GROUP BY employees.EmployeeID ORDER BY NumberOfSubordinates DESC LIMIT 1;",
            "SELECT employees.Title, AVG(employees.Salary) AS AverageSalary FROM employees GROUP BY employees.Title;",
            "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SalesRevenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY [Order Details].ProductID ORDER BY SalesRevenue DESC LIMIT 5;",
            "SELECT OrderID, DATEDIFF(orders.RequiredDate, orders.ShippedDate) AS DateDifference FROM orders;",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) / COUNT(DISTINCT DATE_FORMAT(orders.OrderDate, '%Y-%m')) AS AverageMonthlyOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
            "SELECT employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Region;",
            "SELECT employees.Title, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Title;",
            "SELECT employees.EmployeeID, (CURDATE() - employees.HireDate) / 365 AS YearsAtCompany FROM employees ORDER BY YearsAtCompany DESC;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
            "SELECT EmployeeID, CONCAT(FirstName, ' ', LastName) AS FullName FROM employees WHERE MONTH(BirthDate) = MONTH(CURDATE());",
            "SELECT EmployeeID, CONCAT(FirstName, ' ', LastName) AS FullName FROM employees WHERE ReportsTo = ?;",
            "SELECT employees.EmployeeID, SUM([Order Details].Quantity) AS TotalProducts FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, AVG([Order Details].Discount) AS AvgDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, orders.ShipCity, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, orders.ShipCity ORDER BY employees.EmployeeID, OrderCount DESC;",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY OrderCount DESC LIMIT 3;",
            "SELECT employees.EmployeeID, EXTRACT(YEAR FROM orders.OrderDate) AS Year, EXTRACT(MONTH FROM orders.OrderDate) AS Month, ((SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) - LAG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) OVER (PARTITION BY employees.EmployeeID ORDER BY EXTRACT(YEAR, MONTH FROM orders.OrderDate))) / NULLIF(LAG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) OVER (PARTITION BY employees.EmployeeID ORDER BY EXTRACT(YEAR, MONTH FROM orders.OrderDate)), 0)) AS MonthlyGrowth FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, EXTRACT(YEAR FROM orders.OrderDate), EXTRACT(MONTH FROM orders.OrderDate);",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS HighFreightOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.Freight > 500 GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, CONCAT(FirstName, ' ', LastName) AS FullName FROM employees WHERE employees.EmployeeID NOT IN (SELECT DISTINCT EmployeeID FROM orders WHERE OrderDate >= DATE_ADD(CURRENT_DATE, INTERVAL -6 MONTH));",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.ShipRegion = ? GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgDays FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, CONCAT(FirstName, ' ', LastName) AS FullName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS InitialSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE employees.HireDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY employees.EmployeeID, FullName;",
            "SELECT employees.EmployeeID, ShipVia, COUNT(orders.OrderID) AS ShippedOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, ShipVia;",
            "SELECT employees.EmployeeID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSalesWithoutDiscount, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS TotalSalesWithDiscount, (SUM([Order Details].Quantity * [Order Details].UnitPrice) - SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount))) AS DiscountImpact FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS TotalOrders FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1",
            "SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS LateOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.RequiredDate < orders.ShippedDate GROUP BY employees.EmployeeID ORDER BY LateOrders DESC LIMIT 1",
            "SELECT employees.EmployeeID, SUM([Order Details].Quantity) AS TotalProducts FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS UrgentOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.RequiredDate < DATEADD(DAY, 2, orders.OrderDate) GROUP BY employees.EmployeeID ORDER BY UrgentOrders DESC",
            "SELECT orders.ShipRegion, SUM([Order Details].Quantity) AS OrderQuantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipRegion ORDER BY OrderQuantity DESC LIMIT 1",
            "SELECT employees.Country, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.Country",
            "SELECT EmployeeID, DATEDIFF(CURRENT_DATE, HireDate) AS TenureDays FROM employees ORDER BY TenureDays DESC LIMIT 1",
            "SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
            "SELECT employees.EmployeeID, COUNT(DISTINCT orders.CustomerID) AS CustomerCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY CustomerCount DESC LIMIT 1",
            "SELECT employees.EmployeeID, (SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / TotalSales.TotalSales) * 100 AS SalesPercentage FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID, (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID) AS TotalSales GROUP BY employees.EmployeeID",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 5",
            "SELECT employees.EmployeeID, ProductID, COUNT(ProductID) AS ProductCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, ProductID ORDER BY ProductCount DESC",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS EmployeeSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID HAVING SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) > (SELECT PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY sub_query.EmployeeSales) FROM (SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS EmployeeSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID) AS sub_query)",
            "SELECT employees.EmployeeID, MONTH(orders.OrderDate) AS OrderMonth, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, MONTH(orders.OrderDate)",
            "SELECT employees.EmployeeID, SUM(CASE WHEN YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END) - SUM(CASE WHEN YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END) AS SalesIncrease FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY SalesIncrease DESC",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -3, CURRENT_DATE) GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY OrderCount DESC;",
            "SELECT e.EmployeeID, YEAR(o.OrderDate) AS Year, MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, YEAR(o.OrderDate), MONTH(o.OrderDate) ORDER BY e.EmployeeID, Year, Month;",
            "SELECT COUNT(o.OrderID) AS ShippedNotDelivered FROM orders o WHERE o.ShippedDate IS NOT NULL AND o.RequiredDate IS NULL;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC;",
            "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, DATEDIFF(CURDATE(), e.HireDate) AS TenureDays, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TenureDays DESC;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AvgDiscount DESC;",
            "SELECT e.EmployeeID, o.ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, o.ShipRegion;",
            "SELECT e.EmployeeID, o.OrderID, DATEDIFF(CURDATE(), o.OrderDate) AS DaysPending FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.RequiredDate IS NOT NULL AND DATEDIFF(CURDATE(), o.OrderDate) > 30;",
            "SELECT YEAR(o.OrderDate) AS Year, MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Year, Month ORDER BY TotalSales DESC;",
            "SELECT e.EmployeeID, FLOOR(DATEDIFF(CURDATE(), e.BirthDate)/365) AS AgeGroup, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, AgeGroup;",
            "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgDeliveryTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NOT NULL GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, e.Salary, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN \"Order Details\" od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.Salary;",
            "SELECT e.EmployeeID, COUNT(DISTINCT o.ShipCountry) AS UniqueCountries FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY UniqueCountries DESC;",
            "SELECT od.ProductID, COUNT(od.OrderID) AS Frequency FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY od.ProductID ORDER BY Frequency DESC LIMIT 5;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT EmployeeID, SalesIncrease FROM (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) - LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)), 1, 0) OVER (PARTITION BY e.EmployeeID ORDER BY YEAR(o.OrderDate), MONTH(o.OrderDate)) AS SalesIncrease FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, YEAR(o.OrderDate), MONTH(o.OrderDate)) AS MonthlySales ORDER BY SalesIncrease DESC LIMIT 1;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID ORDER BY SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) DESC LIMIT 1;",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS TotalOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE QUARTER(orders.OrderDate) = QUARTER(CURRENT_DATE - INTERVAL 3 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 3 MONTH) GROUP BY employees.EmployeeID ORDER BY COUNT(orders.OrderID) DESC LIMIT 1;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales, EXTRACT(MONTH FROM orders.OrderDate) AS Month FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, EXTRACT(MONTH FROM orders.OrderDate);",
            "SELECT employees.EmployeeID, [Order Details].Discount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE [Order Details].Discount = (SELECT MAX([Order Details].Discount) FROM [Order Details]) LIMIT 1;",
            "SELECT employees.EmployeeID, COUNT(DISTINCT orders.CustomerID) AS UniqueCustomers FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
            "SELECT EmployeeID, OrderDate AS Day, NumOrders FROM (SELECT employees.EmployeeID, orders.OrderDate, COUNT(orders.OrderID) AS NumOrders, ROW_NUMBER() OVER (PARTITION BY employees.EmployeeID ORDER BY COUNT(orders.OrderID) DESC, orders.OrderDate) AS rn FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, orders.OrderDate) AS ranked_orders WHERE rn = 1 ORDER BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) / COUNT(DISTINCT EXTRACT(YEAR_MONTH FROM orders.OrderDate)) AS AvgOrdersPerMonth FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
            "SELECT COUNT(*) FROM employees WHERE HireDate < '1995-01-01';",
            "SELECT MAX(Salary) FROM employees;",
            "SELECT City, COUNT(*) AS NumEmployees FROM employees GROUP BY City ORDER BY NumEmployees DESC LIMIT 1;",
            "SELECT employees.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Country;",
            "SELECT Title, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Title ORDER BY AvgSales DESC;",
            "SELECT Manager.EmployeeID, COUNT(Employee.EmployeeID) AS DirectReports FROM employees AS Employee JOIN employees AS Manager ON Employee.ReportsTo = Manager.EmployeeID GROUP BY Manager.EmployeeID;",
            "SELECT ShipRegion, COUNT(OrderID) AS NumOrders FROM orders GROUP BY ShipRegion ORDER BY NumOrders DESC LIMIT 1;",
            "SELECT employees.EmployeeID, ShipVia, COUNT(orders.OrderID) AS NumShipments FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, ShipVia ORDER BY NumShipments DESC;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID) * 100 AS ManagerContributionPercentage FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE employees.Title LIKE '%Manager%';",
            "SELECT employees.EmployeeID, EXTRACT(YEAR FROM orders.OrderDate) AS Year, EXTRACT(MONTH FROM orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, Year, Month;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE EXTRACT(YEAR FROM orders.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, SUM([Order Details].Discount) AS TotalDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID HAVING TotalDiscount > 0.1;",
            "SELECT employees.EmployeeID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageShippingTime FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate IS NOT NULL GROUP BY employees.EmployeeID ORDER BY AverageShippingTime ASC LIMIT 3;",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreightCost FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
            "SELECT EXTRACT(YEAR FROM orders.OrderDate) AS Year, EXTRACT(MONTH FROM orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Year, Month ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT employees.EmployeeID, AVG([Order Details].Discount) AS AverageDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, orders.ShipCountry;",
            "SELECT employees.EmployeeID, DATEDIFF(CURRENT_DATE, employees.HireDate) AS TenureDays, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, SUM(CASE WHEN orders.ShippedDate IS NOT NULL THEN 1 ELSE 0 END) AS ShippedOrders, COUNT(orders.OrderID) AS TotalOrders, (SUM(CASE WHEN orders.ShippedDate IS NOT NULL THEN 1 ELSE 0 END) / CAST(COUNT(orders.OrderID) AS FLOAT)) AS ShippedToRequiredRatio FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderDate IS NULL OR orders.OrderDate < (CURRENT_DATE - INTERVAL '6 MONTH') AND orders.OrderDate >= (CURRENT_DATE - INTERVAL '12 MONTH');",
            "SELECT employees.EmployeeID, EXTRACT(YEAR FROM orders.OrderDate) AS OrderYear, EXTRACT(MONTH FROM orders.OrderDate) AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, OrderYear, OrderMonth ORDER BY EmployeeID, OrderMonth;",
            "SELECT employees.EmployeeID, MAX(orders.ShipCountry), MAX(orders.ShipPostalCode) FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, COUNT(DISTINCT orders.CustomerID) AS UniqueCustomers FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, AVG([Order Details].UnitPrice) AS AverageUnitPrice FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY AverageUnitPrice DESC;",
            "SELECT employees.EmployeeID FROM (SELECT employees.EmployeeID, EXTRACT(YEAR FROM orders.OrderDate) AS Year, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS YearlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, Year) subquery WHERE YearlySales > LAG(YearlySales, 1) OVER (PARTITION BY EmployeeID ORDER BY Year);",
            "SELECT e1.EmployeeID, e1.ReportsTo, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees e1 INNER JOIN orders ON e1.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE e1.ReportsTo IS NOT NULL GROUP BY e1.EmployeeID, e1.ReportsTo;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales, AVG([Order Details].Discount) AS AverageDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS NumberOfOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1",
            "SELECT e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT e.FirstName, e.LastName, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE MONTH(o.OrderDate) = MONTH(CURDATE()) - 1 AND YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY OrderCount DESC LIMIT 3;",
            "SELECT e.FirstName, e.LastName, COUNT(o.OrderID) AS OnTimeOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate <= o.RequiredDate GROUP BY e.FirstName, e.LastName;",
            "SELECT e.FirstName, e.LastName FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID ORDER BY od.UnitPrice DESC LIMIT 1;",
            "SELECT e.FirstName, e.LastName, most_common.ShipCountry FROM (SELECT o.EmployeeID, o.ShipCountry, COUNT(*) as cnt, RANK() OVER (PARTITION BY o.EmployeeID ORDER BY COUNT(*) DESC) as rnk FROM orders o GROUP BY o.EmployeeID, o.ShipCountry) as most_common JOIN employees e ON e.EmployeeID = most_common.EmployeeID WHERE most_common.rnk = 1 AND most_common.ShipCountry <> e.Country;",
            "SELECT e.FirstName, e.LastName, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
            "SELECT e.FirstName, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND YEAR(o.OrderDate) = YEAR(CURDATE()) WHERE o.OrderID IS NULL;",
            "SELECT e.FirstName, e.LastName, AVG(od.Quantity) AS AvgProducts FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT o.OrderID, e.FirstName, e.LastName FROM orders o JOIN employees e ON o.EmployeeID = e.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0.2;",
            "SELECT m.FirstName, m.LastName, SUM(t.TotalSales) AS TopTeamSales FROM employees e JOIN employees m ON e.ReportsTo = m.EmployeeID JOIN (SELECT o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID) t ON e.EmployeeID = t.EmployeeID GROUP BY m.EmployeeID, m.FirstName, m.LastName ORDER BY TopTeamSales DESC LIMIT 1;",
            "SELECT e.FirstName, e.LastName, od.Quantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY e.FirstName, e.LastName, od.Quantity ORDER BY od.Quantity;",
            "SELECT e.FirstName, e.LastName, COUNT(o.OrderID) AS DelayedOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate > o.RequiredDate GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
            "SELECT e.FirstName, e.LastName, o.ShipRegion FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName, o.ShipRegion HAVING COUNT(DISTINCT o.ShipRegion) = 1;",
            "SELECT e.FirstName, e.LastName, e.Salary, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.FirstName, e.LastName, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.FirstName, e.LastName ORDER BY AvgDiscount DESC LIMIT 1;",
            "SELECT e.FirstName, e.LastName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
            "SELECT e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY e.EmployeeID ORDER BY TotalSales DESC;",
            "SELECT e.FirstName, e.LastName, e.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.FirstName, e.LastName, e.Region ORDER BY TotalSales DESC;",
            "SELECT e.FirstName, e.LastName, STDDEV(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) AS SalesConsistency FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY e.EmployeeID ORDER BY SalesConsistency ASC LIMIT 1;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = 6 AND YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT City, AVG(Salary) AS AvgSalary FROM employees GROUP BY City;",
            "SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT SUM(Freight) FROM orders WHERE ShipCountry = 'USA';",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgSalesPerOrder FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY AvgSalesPerOrder DESC LIMIT 5;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, COUNT(DISTINCT employees.ReportsTo) AS Managers FROM employees WHERE employees.ReportsTo IS NOT NULL GROUP BY employees.EmployeeID ORDER BY Managers DESC LIMIT 1;",
            "SELECT FirstName, LastName FROM employees WHERE MONTH(BirthDate) = MONTH(CURRENT_DATE);",
            "SELECT City, MIN(HireDate) AS EarliestHireDate FROM employees GROUP BY City;",
            "SELECT Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Region ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT e.EmployeeID, ((SUM(CASE WHEN MONTH(o.OrderDate) = 6 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END) - SUM(CASE WHEN MONTH(o.OrderDate) = 5 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END)) / NULLIF(SUM(CASE WHEN MONTH(o.OrderDate) = 5 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END), 0)) * 100 AS GrowthPercentage FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] ON o.OrderID = [Order Details].OrderID GROUP BY e.EmployeeID;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE employees.HireDate >= DATE_SUB(CURRENT_DATE, INTERVAL 5 YEAR) GROUP BY employees.EmployeeID;",
            "SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL;",
            "SELECT Region, AVG(Salary) AS AvgSalary FROM employees GROUP BY Region;",
            "SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY TotalFreight ASC LIMIT 1;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND CURRENT_DATE GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL OR o.OrderDate < CURRENT_DATE - INTERVAL '6' MONTH GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT SalesMonth, EmployeeID, TotalSales FROM (SELECT MONTH(o.OrderDate) AS SalesMonth, e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY SalesMonth, e.EmployeeID) AS MonthlySales ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT COUNT(EmployeeID) AS NewHires FROM employees WHERE HireDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);",
            "SELECT AVG(YEAR(CURRENT_DATE) - YEAR(e.BirthDate) - (DATE_FORMAT(CURRENT_DATE, '%m%d') < DATE_FORMAT(e.BirthDate, '%m%d'))) AS AverageAge FROM employees e WHERE e.Title = 'Sales Representative';",
            "SELECT e1.EmployeeID, e1.FirstName, e2.FirstName AS ManagerName FROM employees e1 JOIN employees e2 ON e1.ReportsTo = e2.EmployeeID WHERE e1.City = e2.City;",
            "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageShippingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, COUNT(DISTINCT o.OrderID) AS HighValueOrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 10000 ORDER BY HighValueOrderCount DESC LIMIT 1;",
            "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(DISTINCT o.ShipCountry) = 1 AND MAX(o.ShipCountry) = 'Specific Country';",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND CURRENT_DATE;",
            "SELECT e.EmployeeID, od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, od.ProductID ORDER BY e.EmployeeID, ProductSales DESC;",
            "SELECT e.EmployeeID, (YEAR(CURRENT_DATE) - YEAR(e.HireDate)) AS Tenure, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT o.OrderID, e.EmployeeID FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID JOIN employees e ON o.EmployeeID = e.EmployeeID WHERE od.Discount > 0.2;",
            "SELECT e.EmployeeID, AVG(od.Quantity) AS AverageOrderQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(MONTH FROM o.OrderDate) = 1 GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(o.OrderID) > 100",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 5",
            "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(DISTINCT o.ShipCountry) > 1",
            "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID, AVG(od.Discount) AS AverageDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AverageDiscount DESC LIMIT 1",
            "SELECT e.EmployeeID, COUNT(DISTINCT od.ProductID) AS UniqueProducts FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY SUM(od.Quantity) DESC LIMIT 3",
            "SELECT e.EmployeeID, o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID, e.EmployeeID ORDER BY OrderValue DESC LIMIT 1",
            "SELECT e.EmployeeID, EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, EXTRACT(YEAR FROM o.OrderDate) AS OrderYear, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, OrderYear, OrderMonth ORDER BY e.EmployeeID, OrderYear, OrderMonth",
            "SELECT e.EmployeeID, o.ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CitySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, o.ShipCity",
            "SELECT m.EmployeeID AS ManagerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ManagerSales FROM employees m JOIN employees s ON m.EmployeeID = s.ReportsTo JOIN orders o ON s.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY m.EmployeeID",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS RecentSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE e.HireDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / (SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) FROM [Order Details] od INNER JOIN orders o ON od.OrderID = o.OrderID)) * 100 AS SalesPercentage FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) WHERE o.OrderID IS NULL GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND o.OrderDate < CURDATE() GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE EXTRACT(MONTH FROM o.OrderDate) = 12 GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT YEAR(HireDate) AS HireYear, COUNT(EmployeeID) AS HireCount FROM employees GROUP BY YEAR(HireDate);",
            "SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL;",
            "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.ReportsTo, COUNT(e.EmployeeID) AS ReportCount FROM employees e WHERE e.ReportsTo IS NOT NULL GROUP BY e.ReportsTo;",
            "SELECT e.EmployeeID, DATEDIFF(CURRENT_DATE, e.HireDate) AS Tenure FROM employees e ORDER BY Tenure DESC LIMIT 1;",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0;",
            "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT e.Title, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Title;",
            "SELECT COUNT(DISTINCT od.OrderID) FROM [Order Details] od WHERE od.Discount > 0.2;",
            "SELECT e.EmployeeID, COUNT(DISTINCT od.ProductID) AS ProductCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY ProductCount DESC LIMIT 1;",
            "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NOT NULL GROUP BY e.EmployeeID;",
            "SELECT e.Country, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Country;",
            "SELECT e.EmployeeID, SUM(od.Quantity) AS TotalQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalQuantity DESC LIMIT 1;",
            "SELECT FirstName, LastName, HireDate FROM employees ORDER BY HireDate DESC LIMIT 1;",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS NumberOfOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
            "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShippedDate IS NOT NULL;",
            "SELECT City, COUNT(DISTINCT EmployeeID) AS EmployeeCount FROM employees GROUP BY City ORDER BY EmployeeCount DESC LIMIT 1;",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS NumberOfOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY employees.EmployeeID ORDER BY NumberOfOrders DESC LIMIT 3;",
            "SELECT FirstName, LastName, DATEDIFF(NOW(), HireDate) AS Tenure FROM employees ORDER BY Tenure DESC LIMIT 1;",
            "SELECT OrderID, DATEDIFF(ShippedDate, RequiredDate) AS Delay FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT Country, COUNT(EmployeeID) AS EmployeeCount FROM employees GROUP BY Country;",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS NumberOfOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Region;",
            "SELECT e1.FirstName AS Employee, e2.FirstName AS Manager FROM employees e1 LEFT JOIN employees e2 ON e1.ReportsTo = e2.EmployeeID;",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS LateOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE ShippedDate > RequiredDate GROUP BY employees.EmployeeID ORDER BY LateOrders DESC LIMIT 1;",
            "SELECT [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalQuantity, employees.EmployeeID FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY [Order Details].ProductID, employees.EmployeeID ORDER BY TotalQuantity DESC LIMIT 5;",
            "SELECT COUNT(EmployeeID) / (SELECT COUNT(EmployeeID) FROM employees) * 100 AS TurnoverRate FROM employees WHERE HireDate BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW();",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS UnshippedValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE ShippedDate IS NULL;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.FirstName, e.LastName, e.HireDate FROM employees e ORDER BY e.HireDate ASC LIMIT 1;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY OrderCount DESC LIMIT 5;",
            "SELECT e.City, COUNT(*) AS SalesCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.City ORDER BY SalesCount DESC;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE e.ReportsTo = ? GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderFrequency FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY OrderFrequency DESC LIMIT 1;",
            "SELECT e.Region, e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Region, e.EmployeeID;",
            "SELECT e.EmployeeID, e.Salary, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.Salary;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e WHERE DATEDIFF(CURRENT_DATE, e.HireDate) > 3650;",
            "SELECT e.EmployeeID, o.OrderDate, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS DailySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = %s AND YEAR(o.OrderDate) = %s GROUP BY e.EmployeeID, o.OrderDate;",
            "SELECT o.EmployeeID, o.OrderID FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID, o.OrderID ORDER BY SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) DESC LIMIT 1;",
            "SELECT e.EmployeeID, (SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) AS SalesDifference FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT AVG(DATEDIFF(CURRENT_DATE, e.BirthDate) / 365) AS AverageAge FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS US_Sales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.ShipCountry = 'United States' GROUP BY e.EmployeeID ORDER BY US_Sales DESC LIMIT 1;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY e.EmployeeID;",
            "SELECT YEAR(CURDATE()) - INTERVAL (n-1) YEAR AS Year, AVG(Salary) AS AvgSalary FROM employees WHERE YEAR(HireDate) <= YEAR(CURDATE()) AND YEAR(HireDate) >= YEAR(CURDATE()) - 5 GROUP BY YEAR(CURDATE()) - INTERVAL (n-1) YEAR ORDER BY Year DESC;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS NumberOfOrders FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
            "SELECT COUNT(*) FROM employees WHERE HireDate < '2000-01-01';",
            "SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND YEAR(o.OrderDate) = YEAR(CURDATE()) WHERE o.OrderID IS NULL;",
            "SELECT Title, COUNT(*) AS Count FROM employees GROUP BY Title;",
            "SELECT o.EmployeeID, od.Discount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID ORDER BY od.Discount DESC LIMIT 1;",
            "SELECT Region, COUNT(*) AS EmployeeCount FROM employees GROUP BY Region ORDER BY EmployeeCount DESC;",
            "SELECT ShipCity, COUNT(OrderID) AS TotalSales FROM orders GROUP BY ShipCity;",
            "SELECT o.EmployeeID, AVG(o.Freight) AS AvgFreight FROM orders o GROUP BY o.EmployeeID ORDER BY AvgFreight DESC LIMIT 1;",
            "SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT AVG(TIMESTAMPDIFF(YEAR, BirthDate, CURDATE())) AS AvgAge FROM employees;",
            "SELECT e.EmployeeID, EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate);",
            "SELECT ReportsTo, GROUP_CONCAT(CONCAT(FirstName, ' ', LastName) SEPARATOR ', ') AS Employees FROM employees GROUP BY ReportsTo;",
            "SELECT ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
            "SELECT e.EmployeeID, o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN \"[Order Details]\" od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, o.ShipCountry;",
            "SELECT o.EmployeeID, COUNT(DISTINCT o.CustomerID) AS DistinctCustomers FROM orders o GROUP BY o.EmployeeID ORDER BY DistinctCustomers DESC LIMIT 1;",
            "SELECT e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY e.FirstName, e.LastName ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT e.FirstName, e.LastName, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(o.OrderDate) = YEAR(CURDATE() - INTERVAL 1 MONTH) GROUP BY e.EmployeeID;",
            "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName;",
            "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName);",
            "SELECT EmployeeID, CONCAT(FirstName, ' ', LastName) AS EmployeeName FROM employees ORDER BY HireDate ASC LIMIT 1;",
            "SELECT AVG(YEAR(CURRENT_DATE) - YEAR(BirthDate)) AS AverageAge FROM employees;",
            "SELECT ReportsTo, COUNT(EmployeeID) AS NumberOfReports FROM employees WHERE ReportsTo IS NOT NULL GROUP BY ReportsTo;",
            "SELECT EmployeeID, CONCAT(FirstName, ' ', LastName) AS EmployeeName FROM employees WHERE MONTH(BirthDate) = MONTH(CURRENT_DATE) AND YEAR(BirthDate) <> YEAR(CURRENT_DATE);",
            "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgShippingTime FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE QUARTER(orders.OrderDate) = QUARTER(DATE_SUB(CURRENT_DATE, INTERVAL 1 QUARTER)) AND YEAR(orders.OrderDate) = YEAR(DATE_SUB(CURRENT_DATE, INTERVAL 1 QUARTER)) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName;",
            "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName;",
            "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, COUNT(orders.OrderID) AS DelayedOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate > orders.RequiredDate GROUP BY employees.EmployeeID ORDER BY DelayedOrders DESC LIMIT 1;",
            "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, orders.ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName), orders.ShipRegion;",
            "SELECT DISTINCT Title FROM employees;",
            "SELECT EmployeeID, CONCAT(FirstName, ' ', LastName) AS EmployeeName FROM employees WHERE Salary > (SELECT AVG(Salary) FROM employees);",
            "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.ShipRegion = 'SpecificTerritory' GROUP BY employees.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalQuantity FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, [Order Details].ProductID ORDER BY employees.EmployeeID, TotalQuantity DESC;",
            "SELECT MONTH(orders.OrderDate) AS OrderMonth, employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY MONTH(orders.OrderDate), employees.EmployeeID, employees.FirstName, employees.LastName;",
            "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, AVG(OrderCountPerWeek) AS AvgOrdersPerWeek FROM (SELECT employees.EmployeeID, COUNT(orders.OrderID)/4 AS OrderCountPerWeek FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, YEAR(orders.OrderDate), WEEK(orders.OrderDate)) AS WeeklyOrders GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgProcessingTime FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate IS NOT NULL GROUP BY employees.EmployeeID ORDER BY AvgProcessingTime ASC LIMIT 1;",
            "SELECT Country, AVG(Salary) AS AvgSalary FROM employees GROUP BY Country;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT MONTH(OrderDate) AS OrderMonth, COUNT(OrderID) AS TotalOrders FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY MONTH(OrderDate);",
            "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) WHERE o.OrderID IS NULL;",
            "SELECT ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCity ORDER BY TotalSales DESC LIMIT 3;",
            "SELECT ProductID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY ProductID ORDER BY AvgDiscount DESC;",
            "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.Quantity) AS AvgOrderSize FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
            "WITH AvgSalary AS (SELECT AVG(Salary) AS AvgSal FROM employees), AvgSales AS (SELECT AVG(TotalSales) AS AvgEmpSales FROM (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID) Sub) SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e JOIN AvgSalary a ON e.Salary > a.AvgSal JOIN (SELECT e2.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS EmpSales FROM employees e2 JOIN orders o2 ON e2.EmployeeID = o2.EmployeeID JOIN [Order Details] od ON o2.OrderID = od.OrderID GROUP BY e2.EmployeeID) s ON e.EmployeeID = s.EmployeeID JOIN AvgSales av ON s.EmpSales > av.AvgEmpSales;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(DATEDIFF(o.ShippedDate, o.RequiredDate)) AS AvgLateDays FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate > o.RequiredDate GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, (SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) AS SalesGrowth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY SalesGrowth DESC LIMIT 5;",
            "SELECT COUNT(DISTINCT ProductID) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE);",
            "SELECT EmployeeID, FirstName, LastName, HireDate FROM employees ORDER BY HireDate ASC LIMIT 1;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(MonthlySales) AS AvgMonthlySales FROM (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales, MONTH(o.OrderDate) AS OrderMonth, YEAR(o.OrderDate) AS OrderYear FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY e.EmployeeID, MONTH(o.OrderDate), YEAR(o.OrderDate)) AS MonthlySalesTable GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e JOIN employees m ON e.ReportsTo = m.EmployeeID WHERE e.City = m.City;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(DISTINCT o.CustomerID) AS UniqueCustomers FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY MAX(o.OrderDate) IS NULL DESC, MAX(o.OrderDate) ASC LIMIT 1;",
            "SELECT ShipVia, COUNT(OrderID) AS TotalOrders FROM orders WHERE OrderID IN (SELECT OrderID FROM [Order Details] GROUP BY OrderID HAVING SUM(UnitPrice * Quantity * (1 - Discount)) > 500) GROUP BY ShipVia ORDER BY TotalOrders DESC LIMIT 1;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY OrderCount DESC LIMIT 5;",
            "SELECT e.EmployeeID, e.HireDate FROM employees e WHERE e.HireDate = (SELECT MIN(HireDate) FROM employees WHERE ReportsTo IS NOT NULL) AND e.ReportsTo IS NOT NULL;",
            "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, o.ShipCity, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, o.ShipCity;",
            "SELECT e.EmployeeID, COUNT(DISTINCT od.ProductID) AS DistinctProducts FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY DistinctProducts DESC LIMIT 1;",
            "SELECT e.EmployeeID FROM employees e WHERE e.ReportsTo IS NULL;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE e.Title LIKE '%Manager%' GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS LateShipments FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate > o.RequiredDate GROUP BY e.EmployeeID ORDER BY LateShipments DESC LIMIT 1;",
            "SELECT e.EmployeeID, SUM(od.Quantity) AS TotalUnits FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID FROM (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CurrentMonthSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID) cm JOIN (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS PreviousMonthSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY e.EmployeeID) pm ON cm.EmployeeID = pm.EmployeeID WHERE ((cm.CurrentMonthSales - pm.PreviousMonthSales) / pm.PreviousMonthSales) * 100 > 10;",
            "SELECT AVG(e.Salary) AS AvgSalary FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 50000;",
            "SELECT e.EmployeeID, YEAR(o.OrderDate) AS Year, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, YEAR(o.OrderDate);",
            "SELECT e.EmployeeID, (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / e.Salary) AS SalesToSalaryRatio FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID FROM employees e WHERE MONTH(e.BirthDate) = MONTH(CURRENT_DATE);",
            "SELECT e.EmployeeID, DATEDIFF(MIN(o.OrderDate), e.HireDate) AS HireToFirstOrder FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY HireToFirstOrder DESC LIMIT 1;",
            "SELECT e.EmployeeID, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATEADD(quarter, -1, CURRENT_DATE) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS TotalOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE YEAR(orders.OrderDate) = 2022 GROUP BY employees.EmployeeID ORDER BY TotalOrders DESC LIMIT 1;",
            "SELECT employees.City, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CitySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.City ORDER BY CitySales DESC;",
            "SELECT employees.EmployeeID, YEAR(orders.OrderDate) AS OrderYear, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, YEAR(orders.OrderDate);",
            "SELECT employees.EmployeeID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageShippingTime FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreightCost FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS LateShipments FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate > orders.RequiredDate GROUP BY employees.EmployeeID ORDER BY LateShipments DESC LIMIT 1;",
            "SELECT YEAR(orders.OrderDate) AS OrderYear, MONTH(orders.OrderDate) AS OrderMonth, employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY YEAR(orders.OrderDate), MONTH(orders.OrderDate), employees.EmployeeID ORDER BY OrderYear, OrderMonth, employees.EmployeeID;",
            "SELECT [Order Details].ProductID, employees.EmployeeID, SUM([Order Details].Quantity) AS TotalQuantity FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY [Order Details].ProductID, employees.EmployeeID HAVING SUM([Order Details].Quantity) > 1000;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscountEffect FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS RegionalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, employees.Region ORDER BY RegionalSales DESC;",
            "SELECT employees.HireDate FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.HireDate, employees.EmployeeID ORDER BY SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) DESC LIMIT 1;",
            "SELECT employees.Title, AVG(TotalSales) AS AverageSales FROM (SELECT employees.Title, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, employees.Title) AS EmployeeSales GROUP BY employees.Title;",
            "SELECT employees.EmployeeID, EXTRACT(YEAR FROM orders.OrderDate) AS Year, EXTRACT(MONTH FROM orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY employees.EmployeeID, EXTRACT(YEAR FROM orders.OrderDate), EXTRACT(MONTH FROM orders.OrderDate) ORDER BY employees.EmployeeID, Year, Month;",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) * 1.0 / (SELECT COUNT(*) FROM orders WHERE orders.EmployeeID = employees.EmployeeID) AS LateOrderProportion FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate > orders.RequiredDate GROUP BY employees.EmployeeID ORDER BY LateOrderProportion DESC;",
            "SELECT employees.Title, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Title;",
            "SELECT employees.EmployeeID, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, DATE_FORMAT(orders.OrderDate, '%Y-%m') ORDER BY employees.EmployeeID, OrderMonth;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderDate BETWEEN DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '3 months') AND CURRENT_DATE GROUP BY employees.EmployeeID",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OnTimeOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY employees.EmployeeID ORDER BY OnTimeOrders DESC LIMIT 5",
            "SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID",
            "SELECT employees.EmployeeID FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE MONTH(orders.ShippedDate) = MONTH(DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)) AND YEAR(orders.ShippedDate) = YEAR(DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)) AND orders.ShippedDate > orders.RequiredDate",
            "SELECT employees.EmployeeID, COUNT(DISTINCT [Order Details].ProductID) AS UniqueProducts FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
            "SELECT employees.EmployeeID, AVG([Order Details].Discount) AS AverageDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY AverageDiscount DESC LIMIT 1",
            "SELECT Country, COUNT(EmployeeID) AS EmployeeCount FROM employees GROUP BY Country",
            "SELECT employees.EmployeeID, MONTH(orders.OrderDate) AS Month, YEAR(orders.OrderDate) AS Year, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY employees.EmployeeID, YEAR(orders.OrderDate), MONTH(orders.OrderDate) ORDER BY employees.EmployeeID, Year, Month",
            "SELECT e.EmployeeID FROM employees e WHERE e.ReportsTo = (SELECT employees.EmployeeID FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) DESC LIMIT 1);",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE [Order Details].ProductID = (SELECT ProductID FROM [Order Details] ORDER BY UnitPrice DESC LIMIT 1) GROUP BY employees.EmployeeID ORDER BY OrderCount DESC LIMIT 1",
            "SELECT Region, EmployeeID, MAX(TotalSales) AS HighestTotalSales FROM (SELECT Region, employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE Region IS NOT NULL GROUP BY Region, employees.EmployeeID) AS RegionalSales GROUP BY Region, EmployeeID ORDER BY Region, HighestTotalSales DESC;",
            "SELECT employees.EmployeeID, employees.HireDate, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, employees.HireDate ORDER BY employees.HireDate",
            "SELECT employees.EmployeeID FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID HAVING SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) > 10000",
            "SELECT employees.EmployeeID FROM employees WHERE NOT EXISTS (SELECT 1 FROM orders WHERE orders.EmployeeID = employees.EmployeeID AND orders.ShipRegion = 'SpecificRegion')",
            "SELECT a.EmployeeID FROM employees a JOIN orders b ON a.EmployeeID = b.EmployeeID JOIN [Order Details] c ON b.OrderID = c.OrderID JOIN employees d ON a.ReportsTo = d.EmployeeID GROUP BY a.EmployeeID, d.EmployeeID HAVING AVG(c.UnitPrice * c.Quantity * (1 - c.Discount)) > (SELECT AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.EmployeeID = d.EmployeeID);",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY TotalSales DESC LIMIT 1",
            "SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.EmployeeID = (SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) DESC LIMIT 1) GROUP BY od.ProductID ORDER BY TotalQuantity DESC LIMIT 3",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL '1' MONTH) AND MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL '1' MONTH) GROUP BY e.EmployeeID, e.FirstName, e.LastName",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate BETWEEN DATE_ADD(LAST_DAY(DATE_SUB(CURRENT_DATE, INTERVAL QUARTER(DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH))), INTERVAL 1 DAY) AND LAST_DAY(DATE_SUB(CURRENT_DATE, INTERVAL MONTH(CURRENT_DATE)-QUARTER(CURRENT_DATE)*3 MONTH)) GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY OrderCount DESC LIMIT 1",
            "SELECT YEAR(HireDate) AS HireYear, COUNT(EmployeeID) AS HiredEmployees FROM employees GROUP BY YEAR(HireDate)",
            "SELECT COUNT(*) AS NumberOfManagers FROM employees WHERE Title LIKE '%Manager%'",
            "SELECT e.City, AVG(FLOOR(DATEDIFF(CURRENT_DATE, e.BirthDate) / 365.25)) AS AvgAge FROM employees e GROUP BY e.City",
            "SELECT e1.EmployeeID, e1.FirstName, e1.LastName FROM employees e1 JOIN employees e2 ON e1.ReportsTo = e2.EmployeeID WHERE e2.EmployeeID = ?",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName",
            "SELECT YEAR(o.OrderDate) AS OrderYear, MONTH(o.OrderDate) AS OrderMonth, e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND CURRENT_DATE GROUP BY YEAR(o.OrderDate), MONTH(o.OrderDate), e.EmployeeID, e.FirstName, e.LastName ORDER BY OrderYear, OrderMonth",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, o.OrderID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.Freight = (SELECT MAX(Freight) FROM orders)",
            "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShipCountry = ? GROUP BY e.EmployeeID, e.FirstName, e.LastName",
            "SELECT e.Title, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Title ORDER BY Revenue DESC",
            "SELECT e.Region, AVG(e.Salary) AS AvgSalary FROM employees e GROUP BY e.Region",
            "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.Freight > ? GROUP BY e.EmployeeID, e.FirstName, e.LastName",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT e.EmployeeID, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT o.ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCity ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID HAVING OrderCount > 100;",
            "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.RequiredDate)) AS AvgShippingDelay FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate > o.RequiredDate GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY e.EmployeeID HAVING COUNT(DISTINCT EXTRACT(MONTH FROM o.OrderDate)) = 12;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, e.Salary FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > e.Salary;",
            "SELECT e.EmployeeID, EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY e.EmployeeID, EXTRACT(MONTH FROM o.OrderDate);",
            "SELECT e.EmployeeID, o.ShipRegion, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, o.ShipRegion ORDER BY OrderCount DESC;",
            "SELECT e.EmployeeID, od.ProductID, SUM(od.Quantity) AS TotalSold FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, od.ProductID ORDER BY TotalSold DESC;",
            "SELECT e.EmployeeID, EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(QUARTER FROM o.OrderDate) AS Quarter, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Sales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, Year, Quarter;",
            "SELECT e.EmployeeID, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AvgDiscount DESC LIMIT 1;",
            "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(DISTINCT o.ShipCountry) > 3;",
            "SELECT e.EmployeeID, EXTRACT(YEAR FROM e.HireDate) AS HireYear, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, EXTRACT(YEAR FROM e.HireDate);",
            "SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderAmount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
            "SELECT employees.City, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CitySales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.City ORDER BY CitySales DESC;",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OnTimeOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY employees.EmployeeID ORDER BY OnTimeOrders DESC LIMIT 1;",
            "SELECT employees.EmployeeID, AVG([Order Details].Discount) AS AverageDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
            "SELECT EmployeeID, FirstName, LastName, BirthDate FROM employees ORDER BY BirthDate DESC LIMIT 1;",
            "SELECT EmployeeID, FirstName, LastName, HireDate FROM employees ORDER BY HireDate ASC LIMIT 1;",
            "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] GROUP BY [Order Details].ProductID;",
            "SELECT e1.EmployeeID, COUNT(e2.EmployeeID) AS ManagersCount FROM employees e1 LEFT JOIN employees e2 ON e1.EmployeeID = e2.ReportsTo GROUP BY e1.EmployeeID ORDER BY ManagersCount DESC LIMIT 1;",
            "SELECT Title, COUNT(EmployeeID) AS EmployeeCount FROM employees GROUP BY Title;",
            "SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CountrySales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipCountry;",
            "SELECT Salary, COUNT(EmployeeID) AS EmployeeCount FROM employees GROUP BY Salary;",
            "SELECT YEAR(orders.OrderDate) AS Year, MONTH(orders.OrderDate) AS Month, employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY YEAR(orders.OrderDate), MONTH(orders.OrderDate), employees.EmployeeID;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE QUARTER(orders.OrderDate) = QUARTER(CURDATE() - INTERVAL 3 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURDATE() - INTERVAL 3 MONTH) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' AND o.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL '1' MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL '1' MONTH) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1",
            "SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageSalesPerOrder FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
            "SELECT employees.EmployeeID, SUM([Order Details].Discount * [Order Details].UnitPrice * [Order Details].Quantity) AS TotalDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
            "SELECT orders.ShipCity, orders.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM orders GROUP BY orders.ShipCity, orders.EmployeeID ORDER BY OrderCount DESC LIMIT 1",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, DATEDIFF(CURRENT_DATE, e.HireDate) AS TenureDays, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName, e.HireDate ORDER BY TenureDays DESC LIMIT 1",
            "SELECT orders.ShipCountry, SUM(orders.Freight) AS TotalFreight FROM orders GROUP BY orders.ShipCountry",
            "SELECT employees.EmployeeID FROM employees LEFT JOIN (SELECT EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY EmployeeID) AS MonthlySalesData ON employees.EmployeeID = MonthlySalesData.EmployeeID WHERE MonthlySalesData.MonthlySales IS NULL OR MonthlySalesData.MonthlySales < 10000",
            "SELECT employees.EmployeeID, AVG([Order Details].Discount) AS AverageDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
            "SELECT DISTINCT employees.EmployeeID, employees.Region FROM employees;",
            "SELECT employees.EmployeeID, COUNT(DISTINCT orders.CustomerID) AS CustomerCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 5",
            "SELECT employees.EmployeeID, (SUM(CASE WHEN YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END) - SUM(CASE WHEN YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END)) / NULLIF(SUM(CASE WHEN YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END), 0) * 100 AS GrowthRate FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
            "SELECT employees.EmployeeID, COUNT(DISTINCT orders.ShipRegion) AS DistinctRegions FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY DistinctRegions DESC LIMIT 1",
            "SELECT employees.EmployeeID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgShippingTime FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID",
            "SELECT employees.EmployeeID, AVG([Order Details].Discount) AS LargestAvgDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY LargestAvgDiscount DESC LIMIT 1",
            "SELECT ShipCity, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales, employees.EmployeeID FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY ShipCity, employees.EmployeeID ORDER BY TotalSales DESC LIMIT 3",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE DATE_FORMAT(o.OrderDate, '%Y-%m') = '2022-05' GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2022 GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) as OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY OrderCount DESC LIMIT 5;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) WHERE o.OrderID IS NULL;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) as AvgDeliveryTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY AvgDeliveryTime ASC;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) as EarlyShipments FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate < o.RequiredDate GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY EarlyShipments DESC LIMIT 1;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(o.Freight) as TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, o.ShipVia, COUNT(o.OrderID) as ShipMethodCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, o.ShipVia ORDER BY ShipMethodCount DESC;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.Quantity) AS AvgQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY AvgQuantity DESC LIMIT 1;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(DISTINCT o.CustomerID) as UniqueCustomers FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY UniqueCustomers DESC;",
            "SELECT COUNT(*) FROM (SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 5000) AS employee_sales_above_threshold;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE e.ReportsTo = 5 GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as RecentSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE e.HireDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName HAVING COUNT(DISTINCT o.ShipRegion) > 1;",
            "SELECT e.Title, AVG(od.Discount) as AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Title;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalSales, EXTRACT(MONTH FROM o.OrderDate) as SalesMonth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -6, CURRENT_DATE) GROUP BY e.EmployeeID, SalesMonth ORDER BY e.EmployeeID, SalesMonth;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, (od.UnitPrice * od.Quantity * (1 - od.Discount)) AS SalesPerOrder FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE (od.UnitPrice * od.Quantity * (1 - od.Discount)) > (SELECT AVG(od2.UnitPrice * od2.Quantity * (1 - od2.Discount)) FROM [Order Details] od2) * 1.5 ORDER BY SalesPerOrder DESC;",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS PendingOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate IS NULL GROUP BY employees.EmployeeID ORDER BY PendingOrders DESC LIMIT 1",
            "SELECT employees.City, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CitySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.City",
            "SELECT employees.EmployeeID FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID AND YEAR(orders.OrderDate) = YEAR(CURDATE()) WHERE orders.OrderID IS NULL;",
            "SELECT EmployeeID, HireDate FROM employees ORDER BY HireDate ASC LIMIT 1",
            "SELECT employees.EmployeeID, COUNT(DISTINCT orders.CustomerID) AS UniqueCustomers FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID",
            "SELECT EmployeeID FROM employees WHERE HireDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
            "SELECT employees.City, COUNT(orders.OrderID) AS TotalOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.City ORDER BY TotalOrders DESC LIMIT 1",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS DiscountedOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE [Order Details].Discount > 0 GROUP BY employees.EmployeeID ORDER BY DiscountedOrders DESC LIMIT 1",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT EXTRACT(YEAR_MONTH FROM orders.OrderDate)) AS AvgMonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OnTimeOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY employees.EmployeeID",
            "SELECT employees.EmployeeID, orders.OrderID, MAX([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MaxSingleOrderValue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID, employees.EmployeeID ORDER BY MaxSingleOrderValue DESC LIMIT 1",
            "SELECT EmployeeID, LastName, FirstName FROM employees WHERE EmployeeID NOT IN (SELECT DISTINCT ReportsTo FROM employees WHERE ReportsTo IS NOT NULL)",
            "SELECT E.EmployeeID, AVG(OD.Discount) AS AverageDiscount FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY E.EmployeeID ORDER BY AverageDiscount DESC LIMIT 1;",
            "SELECT City, COUNT(EmployeeID) AS EmployeeCount FROM employees GROUP BY City;",
            "SELECT EmployeeID, FirstName, LastName FROM employees WHERE HireDate < DATE_SUB(CURDATE(), INTERVAL 5 YEAR);",
            "SELECT E.EmployeeID, SUM(O.Freight) AS TotalFreight FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID GROUP BY E.EmployeeID;",
            "SELECT E.EmployeeID, COUNT(O.OrderID) AS OrderCount FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID WHERE O.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND O.OrderDate < CURDATE() GROUP BY E.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT E.EmployeeID, DATE_FORMAT(O.OrderDate, '%Y-%m') AS Month, (SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) - LAG(SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount))) OVER (PARTITION BY E.EmployeeID ORDER BY DATE_FORMAT(O.OrderDate, '%Y-%m'))) / NULLIF(LAG(SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount))) OVER (PARTITION BY E.EmployeeID ORDER BY DATE_FORMAT(O.OrderDate, '%Y-%m')), 0) AS GrowthRate FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY E.EmployeeID, DATE_FORMAT(O.OrderDate, '%Y-%m') ORDER BY Month;",
            "SELECT E.EmployeeID, SUM(OD.Quantity) AS TotalUnits FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY E.EmployeeID ORDER BY TotalUnits DESC;",
            "SELECT E.EmployeeID, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales, E.Salary FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY E.EmployeeID, E.Salary ORDER BY (SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) - E.Salary) DESC;",
            "SELECT DATE_FORMAT(O.OrderDate, '%Y-%m') AS Month, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID JOIN employees E ON O.EmployeeID = E.EmployeeID GROUP BY Month ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT E.EmployeeID, AVG(DATEDIFF(O.ShippedDate, O.OrderDate)) AS AverageTimeGap FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID WHERE O.ShippedDate IS NOT NULL GROUP BY E.EmployeeID;",
            "SELECT E.EmployeeID, COUNT(DISTINCT OD.ProductID) AS UniqueProducts FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY E.EmployeeID;",
            "SELECT E.EmployeeID, COUNT(CASE WHEN O.RequiredDate < O.ShippedDate THEN 1 END) AS DelayedOrders FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID GROUP BY E.EmployeeID ORDER BY DelayedOrders DESC LIMIT 1;",
            "SELECT E.EmployeeID, AVG(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS AverageSalesPerOrder FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY E.EmployeeID;",
            "SELECT E.EmployeeID, SUM(OD.UnitPrice * OD.Quantity * OD.Discount) AS TotalDiscountValue FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY E.EmployeeID ORDER BY TotalDiscountValue DESC;",
            "SELECT E.EmployeeID, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE O.OrderDate >= DATE_TRUNC('quarter', CURDATE()) - INTERVAL '3 month' AND O.OrderDate < DATE_TRUNC('quarter', CURDATE()) GROUP BY E.EmployeeID ORDER BY TotalSales DESC;",
            "SELECT E.EmployeeID, (YEAR(CURDATE()) - YEAR(E.BirthDate)) AS Age, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY E.EmployeeID, Age ORDER BY TotalSales DESC;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE MONTH(orders.OrderDate) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURDATE() - INTERVAL 1 MONTH) GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 3;",
            "SELECT employees.City, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.City;",
            "SELECT employees.EmployeeID, COUNT(DISTINCT [Order Details].ProductID) AS ProductCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY ProductCount DESC LIMIT 1;",
            "SELECT employees.Region, AVG(employees.Salary) AS AvgSalary FROM employees GROUP BY employees.Region;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE QUARTER(orders.ShippedDate) = QUARTER(CURDATE()) - 1 AND YEAR(orders.ShippedDate) = YEAR(CURDATE());",
            "SELECT orders.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM orders WHERE orders.ShipCountry = 'USA' GROUP BY orders.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT employees.EmployeeID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgShipTime FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate IS NOT NULL GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(employees.HireDate) = YEAR(CURDATE()) - 1 GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderID IS NULL;",
            "SELECT employees.EmployeeID, AVG([Order Details].Discount) AS AvgDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, COUNT(*) AS LateShipmentCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE DATEDIFF(orders.ShippedDate, orders.RequiredDate) > 0 GROUP BY employees.EmployeeID ORDER BY LateShipmentCount DESC LIMIT 1;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY e.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT EmployeeID, FirstName, LastName FROM employees WHERE MONTH(BirthDate) = MONTH(CURRENT_DATE) AND YEAR(BirthDate) != YEAR(CURRENT_DATE);",
            "SELECT e.EmployeeID, AVG(od.Discount) AS AverageDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT City, MAX(Salary) AS MaxSalary, MIN(Salary) AS MinSalary FROM employees GROUP BY City;",
            "SELECT e.EmployeeID, AVG(OrderCount) AS AvgOrders FROM (SELECT EmployeeID, EXTRACT(YEAR FROM OrderDate) AS OrderYear, EXTRACT(MONTH FROM OrderDate) AS OrderMonth, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID, OrderYear, OrderMonth) AS MonthlyOrders GROUP BY EmployeeID;",
            "SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND o.OrderDate > CURRENT_DATE - INTERVAL '6 months' WHERE o.OrderID IS NULL;",
            "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.ShipRegion = 'YourRegion' GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT e.EmployeeID, COUNT(CASE WHEN o.ShippedDate > o.RequiredDate THEN o.OrderID END) AS LateOrders, (CAST(COUNT(CASE WHEN o.ShippedDate > o.RequiredDate THEN o.OrderID END) AS DECIMAL) / COUNT(o.OrderID)) * 100 AS LatePercentage FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(od.Quantity * od.UnitPrice * od.Discount) = 0;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT e.EmployeeID, MONTH(o.OrderDate) AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, MONTH(o.OrderDate);",
            "SELECT e.EmployeeID, COUNT(o.OrderID) FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE YEAR(CURRENT_DATE) - YEAR(e.HireDate) > 10 GROUP BY e.EmployeeID;",
            "SELECT EmployeeID, MAX(MonthlySales) - MIN(MonthlySales) AS SalesDifference FROM (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, YEAR(o.OrderDate), MONTH(o.OrderDate)) AS Sales GROUP BY EmployeeID;",
            "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN (SELECT EmployeeID, AVG(Freight) AS AvgFreight FROM orders GROUP BY EmployeeID) AS EmployeeFreight ON e.EmployeeID = EmployeeFreight.EmployeeID ORDER BY AvgFreight DESC LIMIT 1;",
            "SELECT e.EmployeeID, COUNT(DISTINCT o.CustomerID) AS UniqueCustomers FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY UniqueCustomers DESC;",
            "SELECT e.EmployeeID, SUM(od.Quantity) AS TotalQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY AvgShippingTime ASC LIMIT 1;",
            "SELECT e.HireDate, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE e.HireDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 YEAR) AND CURDATE() GROUP BY e.HireDate;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(QUARTER, -1, CURDATE()) AND o.OrderDate < CURDATE() GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT COUNT(*) FROM (SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 50000) AS employee_sales;",
            "SELECT e.EmployeeID, MONTH(o.OrderDate) AS Month, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, MONTH(o.OrderDate);",
            "SELECT e.EmployeeID, o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, o.OrderID ORDER BY OrderValue DESC LIMIT 10;",
            "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
            "SELECT e.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Region;",
            "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, MONTH(o.OrderDate) HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)), 1) OVER (PARTITION BY e.EmployeeID ORDER BY MONTH(o.OrderDate)) > 1.2;",
            "SELECT e.EmployeeID, COUNT(*) AS DiscountedOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0 GROUP BY e.EmployeeID ORDER BY DiscountedOrders DESC LIMIT 1;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE) WHERE o.OrderID IS NULL;",
            "SELECT e.EmployeeID, SUM(od.Quantity) AS TotalUnitsSold FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, COUNT(*) AS LateOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate > o.RequiredDate GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, COUNT(DISTINCT o.ShipCountry) AS Countries FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID HAVING Countries > 3;",
            "SELECT AVG(DATEDIFF(CURDATE(), e.HireDate)) AS AvgHireDuration, AVG(sales.TotalSales) AS AvgSales FROM employees e JOIN (SELECT o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID) sales ON e.EmployeeID = sales.EmployeeID;",
            "SELECT e.EmployeeID, e.Salary, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.Salary;",
            "SELECT e.EmployeeID, o.ShipVia, COUNT(*) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, o.ShipVia;",
            "SELECT MIN(HireDate) FROM employees WHERE EmployeeID IN (SELECT EmployeeID FROM (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID) AS Sales WHERE TotalSales >= (SELECT PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TotalSales) FROM (SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID) AS AllSales));",
            "SELECT EXTRACT(MONTH FROM e.BirthDate) AS BirthMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY BirthMonth;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderSize FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS OrdersCount, EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate);",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS OrdersCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY OrdersCount DESC LIMIT 1;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.Discount) AS AverageDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS OrdersCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.RequiredDate IS NOT NULL GROUP BY e.EmployeeID ORDER BY OrdersCount DESC;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, EXTRACT(YEAR_MONTH FROM o.OrderDate) AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, OrderMonth, e.FirstName, e.LastName ORDER BY OrderMonth;",
            "SELECT e.Region, e.EmployeeID, e.FirstName, e.LastName, AVG(TotalSales) OVER (PARTITION BY e.Region) AS AvgMonthlySales FROM (SELECT e.EmployeeID, e.Region, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.Region, e.FirstName, e.LastName, YEAR(o.OrderDate), MONTH(o.OrderDate)) AS MonthlySales;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, ((SUM(CASE WHEN QUARTER(o.OrderDate) = QUARTER(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER)) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - SUM(CASE WHEN QUARTER(o.OrderDate) = QUARTER(DATE_SUB(CURDATE(), INTERVAL 2 QUARTER)) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END))/NULLIF(SUM(CASE WHEN QUARTER(o.OrderDate) = QUARTER(DATE_SUB(CURDATE(), INTERVAL 2 QUARTER)) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END), 0)) * 100 AS SalesGrowth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER)) OR YEAR(o.OrderDate) = YEAR(DATE_SUB(CURDATE(), INTERVAL 2 QUARTER)) GROUP BY e.EmployeeID ORDER BY SalesGrowth DESC;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, YEAR(CURRENT_DATE) - YEAR(e.BirthDate) AS Age, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName, Age ORDER BY Age;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, DATEDIFF(CURDATE(), e.HireDate) / 365 AS YearsEmployed, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY YearsEmployed DESC;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) AND QUARTER(o.OrderDate) = QUARTER(CURDATE()) - 1 GROUP BY e.EmployeeID HAVING TotalSales > 10000;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / (SELECT SUM(UnitPrice * Quantity * (1 - Discount)) FROM [Order Details])) * 100 AS SalesContribution FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, od.Discount, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalDiscountSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0 GROUP BY e.EmployeeID, e.FirstName, e.LastName, od.Discount ORDER BY od.Discount DESC, TotalDiscountSales DESC;",
            "SELECT e.Title, AVG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) AS AvgSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Title;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(QUARTER, -1, CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL;"
        ],
        "reviews": [
            "The SQL query accurately calculates the total sales generated by each employee by joining 'employees', 'orders', and '[Order Details]' tables, and correctly applies the formula. The query is correct.",
            "The SQL query is correct. It correctly calculates the total sales for each employee by joining the employees, orders, and Order Details tables. It sums the sales amount for each employee and orders the result in descending order to find the employee who generated the most sales, limiting the result to one record.",
            "The SQL query is correct as written. It effectively joins the 'employees' and 'orders' tables on 'EmployeeID', filters for orders placed in the year 2022, and counts the total orders per employee grouped by 'EmployeeID'.",
            "The query correctly selects the employee with the earliest hire date by sorting the employees table by the HireDate in ascending order and limiting the result to one. Therefore, the query is correct.",
            "The query is correct. It calculates the average discount applied per order for each employee by joining the employees, orders, and [Order Details] tables and grouping the results by EmployeeID.",
            "The SQL query correctly calculates the total sales for each employee in 2021, groups by employee ID, orders by total sales in descending order, and limits the results to the top 5 employees. It accurately meets the business question requirements using the correct tables and columns.",
            "The SQL query correctly calculates the total freight cost managed by each employee. It appropriately joins the employees and orders tables on EmployeeID and uses SUM to aggregate the freight cost. The result is grouped by EmployeeID, which matches the business question requirements.",
            "The SQL query correctly calculates the average order value for each employee and orders the result to find the employee with the highest average. The use of GROUP BY, AVG, and the ORDER BY DESC LIMIT 1 clause is appropriate for answering the question.",
            "The original query incorrectly includes 'e.EmployeeID' in the SELECT and GROUP BY clauses when it should focus only on 'o.ShipCountry' to determine the country with the most sales. The corrected query groups by 'ShipCountry' and orders by 'CountrySales' in descending order to identify the country with the most sales.",
            "The SQL query correctly implements the business question by calculating the total sales for each employee and filtering with a HAVING clause to include only those with sales exceeding $100,000. It joins employees with orders and [Order Details] to calculate the sales.",
            "The SQL query is correct. It selects the employee ID, first name, last name, and hire date from the 'employees' table where the hire date is before January 1, 2010. The date format and comparison are correct.",
            "The SQL query correctly calculates the average salary for employees grouped by city. It uses the AVG function and groups by the City column as required.",
            "The SQL query correctly calculates the total quantity of products sold by each employee. It joins the employees, orders, and [Order Details] tables correctly and aggregates the quantity per employee using GROUP BY.",
            "The SQL query is correct. It calculates the total value of each order by employee and uses ORDER BY OrderValue DESC LIMIT 1 to find the largest order.",
            "The original query incorrectly includes EmployeeID in the SELECT clause, which will return multiple rows instead of a single count. The corrected query provides a count of employees with the title 'Sales Representative'.",
            "The original SQL query is mostly correct, but it fails when there's no sales for 2020 because of division by zero. To correct this, the division part should use NULLIF to prevent division by zero.",
            "The SQL query accurately retrieves employees who do not report to anyone, indicating they have no manager. The query is correct.",
            "The SQL query correctly calculates the average shipping time for orders handled by each employee. The query joins the employees and orders tables on EmployeeID, ensures that only shipped orders are considered by checking o.ShippedDate IS NOT NULL, and groups results by EmployeeID to calculate the average shipping time using DATEDIFF. The query is correct as written.",
            "The original query is missing the join with the employees table to correctly associate sales with the employees. The corrected query includes this join to ensure sales are attributed to employees correctly.",
            "The SQL query correctly lists employees who have not placed any orders by using a LEFT JOIN between employees and orders, checking for null OrderID.",
            "The SQL query is correct and follows the business metrics definition accurately. It correctly computes the total sales generated by each employee.",
            "The SQL query correctly joins the necessary tables ('employees', 'orders', and '[Order Details]') and calculates the total sales per employee for the previous year. It orders the results by TotalSales in descending order and limits the output to the top 5 employees, which aligns with the business question. The use of YEAR(CURDATE()) - 1 specifically targets the sales from the last year, which is also correct. Therefore, the query is accurate and effectively answers the business question.",
            "The query correctly identifies the employee with the most completed orders in June 2023. It counts the orders grouped by EmployeeID, orders by count in descending order, and limits the result to the top employee.",
            "The query correctly calculates the average freight cost per order for each employee. It appropriately joins the employees and orders tables on EmployeeID and uses AVG and GROUP BY to get the desired result.",
            "The original query retrieves employee IDs but doesn't count them. To answer the question, we should count the number of employees whose total sales exceed $10,000. The corrected query uses a subquery to calculate and check the sales for each employee, then counts the number of employees meeting the criteria.",
            "The original query uses `DATEDIFF` which returns the difference in days. While dividing by 365 approximates the year difference, it's not precise due to leap years. It's better to use `TIMESTAMPDIFF(YEAR, hire_date, CURDATE())` to accurately calculate the full years of difference.",
            "The query correctly identifies employees who have not made any sales in the current year by using a LEFT JOIN and filtering for NULL orders. The use of YEAR() function and CURDATE() to scope the current year is appropriate.",
            "The original query calculates the age by dividing the days difference by 365, which doesn't account for leap years. Using '365.25' provides a more accurate average age calculation over time.",
            "The SQL query correctly calculates the total sales by region. It joins the employees, orders, and [Order Details] tables based on the EmployeeID and OrderID, respectively, and groups the results by employees.Region to aggregate the sales. The query is accurate as per the business question.",
            "The initial query lists managers by their 'ReportsTo' ID and counts employees reporting to them, but it doesn't show the manager's name. The corrected query uses a self-join to map each manager's ID to their first and last name while counting how many employees report to them.",
            "The original query has an error in using the AVG function with SUM inside it and lacks correct partitioning for monthly aggregation. The corrected query uses both YEAR and MONTH for partitioning to achieve correct monthly sales aggregation per employee.",
            "The SQL query correctly identifies orders where the ShippedDate is later than the RequiredDate, matching the business question's requirement to find late shipments. The query is correct.",
            "The SQL query correctly identifies the employee with the largest average order size. It joins the required tables and calculates the average quantity of orders for each employee, ordering the result in descending order and limiting to one result. No changes are needed.",
            "The query is correct for calculating the total discounts given by each employee. It properly joins the necessary tables and calculates the sum of the discounts.",
            "The SQL query is correct. It retrieves employee IDs for those earning salaries above the average. It uses a subquery to calculate the average salary from the employees table, and compares each employee's salary against it.",
            "The SQL query correctly selects the 'TitleOfCourtesy' and counts the occurrences, grouping by 'TitleOfCourtesy', then orders by the count in descending order and limits the result to the top 3. The query is accurate and correctly answers the question.",
            "The SQL query correctly calculates the total sales for each employee and measures their experience in years since hire. The joins are accurately made between the tables 'employees', 'orders', and '[Order Details]'. The use of 'DATEDIFF' and 'SUM' functions are properly aligned with the business question.",
            "The original query used DATEDIFF and divided by 365 to calculate years, which could be inaccurate due to leap years. The corrected query uses TIMESTAMPDIFF with YEAR to accurately compute the years.",
            "The original query is almost correct. However, it should include the year to differentiate between different years in the monthly trend. The corrected query is: SELECT YEAR(orders.OrderDate) AS OrderYear, MONTH(orders.OrderDate) AS OrderMonth, employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY OrderYear, OrderMonth, employees.Region",
            "The initial query does not adequately group by the HireYear, which is essential to assess the impact of hiring date on sales performance. The corrected query adds YEAR(employees.HireDate) to the GROUP BY clause. This correctly associates sales performance with the year the employee was hired.",
            "The SQL query is mostly correct, but it used CURDATE() which is not standard ANSI SQL. The corrected function CURRENT_DATE is used instead.",
            "The SQL query correctly identifies the employee with the highest number of orders. It joins the 'employees' and 'orders' tables on 'EmployeeID', counts the orders for each employee, groups by 'EmployeeID', and orders the results in descending order by 'OrderCount'. The 'LIMIT 1' clause ensures only the top result is returned.",
            "The SQL query correctly calculates the average order value for each employee by joining the necessary tables and using the AVG function. No changes are needed.",
            "The original query did not correctly filter out employees with orders older than a year, as checking for orders.OrderDate IS NULL is insufficient without grouping and counting to ensure there are no orders within the last year.",
            "The SQL query is correct as it calculates the total discount given by each employee. It joins the employees, orders, and [Order Details] tables correctly and sums the discounts grouped by EmployeeID.",
            "The original query incorrectly uses a 3-month subtraction from CURDATE() to define the last quarter. The corrected query properly checks for the last quarter by using the QUARTER function and ensuring the year is correct.",
            "The SQL query correctly calculates the average age of employees based on their birth year using the current year and the year of birth. No corrections are needed.",
            "The SQL query correctly identifies the employee with the longest tenure by calculating the difference in days between the current date and the hire date, then ordering by this difference in descending order and limiting the result to 1. The query is correct.",
            "The query is correct. It properly joins the employees and orders tables on the EmployeeID and correctly calculates the total freight cost for each employee by using SUM on the Freight column and grouping by EmployeeID.",
            "The original query is almost correct, but it only extracts the month and not the year, which can lead to incorrect grouping across years. It should also use DATEADD for date subtraction according to the ANSI SQL standard. The corrected query groups by both year and month for accurate monthly segmentation.",
            "The SQL query is correct. It calculates the average order value for each employee by joining the 'employees', 'orders', and '[Order Details]' tables, grouping by the employee ID, and orders the results by average order value in descending order, returning the employee ID with the highest value.",
            "The SQL query correctly calculates the total sales generated by employees in each country by selecting the 'Country' from the 'employees' table and summing the sales value from the '[Order Details]' table. The 'JOIN' operations correctly associate employees with their orders and order details. The 'GROUP BY' clause is appropriately applied to group the results by 'Country'. The query is correct.",
            "The query correctly lists employees with their managers and calculates total sales. However, the GROUP BY clause was missing e1.FirstName, e1.LastName, e2.FirstName, and e2.LastName to match the SELECT clause.",
            "The original query correctly counts the unshipped orders per employee, but it should also check that the orders require shipping by confirming 'RequiredDate' is not NULL. Updated the query to include this condition.",
            "The original query is mostly correct. The use of `MONTH` and `YEAR` functions to calculate the previous month is appropriate. However, instead of using `DATE_SUB(CURDATE(), INTERVAL 1 MONTH)`, it is slightly clearer to use `CURRENT_DATE - INTERVAL 1 MONTH`, while both work correctly. The revised query aligns with standard practices for calculating the equivalent date and should yield correct results.",
            "The original query incorrectly checks the employee's own region rather than where they have delivered orders. The correction involves ensuring employees have orders only in a specified region, and grouping includes employee details.",
            "The provided SQL query correctly calculates the average salary of employees grouped by their title using the AVG() function and GROUP BY clause. The query aligns with the business question.",
            "The query correctly calculates the total sales for each employee grouped by their EmployeeID and HireDate, which is needed to find the correlation between hire date and sales performance. The query uses the appropriate JOINs between the 'employees', 'orders', and '[Order Details]' tables. The calculation of TotalSales aligns with the given formula in the metrics definition. Therefore, the query appears correct and suitable for the given business question.",
            "The SQL query correctly calculates the total sales contributed by employees for each region and orders the result to find the region with the highest sales. The JOIN operations are correct, and the ORDER BY clause ensures the highest sales total is selected with LIMIT 1. The query accurately answers the business question.",
            "The SQL query correctly calculates the total sales generated by each employee for the current month, using joins and the specified calculation for sales. The current month is correctly determined using MONTH() and YEAR() functions with CURRENT_DATE. The query applies a GROUP BY clause on EmployeeID to aggregate the results, adhering to the formula defined in the metrics.",
            "The original query incorrectly filters for the last 3 months instead of the last quarter. The corrected query identifies employees with no orders in the last quarter by adjusting the date range using DATE_SUB and MOD functions.",
            "The SQL query correctly calculates the average order value for each employee by joining the employees, orders, and [Order Details] tables. It uses AVG to compute the average, groups by EmployeeID, and sorts in descending order to get the highest average. The LIMIT 1 clause is used to return only the employee with the highest average order value. The query is correct as per the question requirements.",
            "The query is correct. It joins the employees and orders tables, checks for late shipments by comparing RequiredDate and ShippedDate, counts the late orders per employee, and limits the result to the employee with the most late orders.",
            "The SQL query is correct. It accurately joins the 'employees' and 'orders' tables on 'EmployeeID', filters orders from the past year, and groups by 'EmployeeID' to count total orders for each employee.",
            "The query correctly identifies employees with more than five years of employment by using DATEDIFF to calculate the difference in days between the current date and the hire date, then dividing by 365 to convert this to years. This approach is generally accurate but may have a slight variance due to leap years. Overall, the query is correct.",
            "The original query only sums up the discounts without considering the effect of discount on the actual sales amount. The correct approach involves multiplying the discount by the unit price and quantity to reflect the total discount effect.",
            "The original query incorrectly filters employees based on the ReportsTo field instead of looking for employees who do not manage others. The revised query finds employees who are not reported to by anyone and orders them by hire date to identify those with the longest employment.",
            "The query is correct in calculating the total earnings for each employee by summing up the sales, considering discounts, and ordering the results in descending order to find the top 10. No corrections needed.",
            "The SQL query correctly calculates the total discounts by multiplying the unit price, quantity, and discount for each product in the order details, grouped by each employee for the current year. Ensure that CURRENT_DATE is correctly interpreted by the SQL environment for the current year's calculation.",
            "The SQL query correctly identifies the employee who shipped orders to the most diverse range of countries. It computes the count of distinct shipping countries per employee, orders them in descending order, and limits the result to the top entry.",
            "The original query incorrectly places the LAG function with SUM inside it. The correct approach is to run LAG on the result of SUM by using a subquery or window function. The breakdown into Year and Month in the SELECT clause ensures correct output formatting.",
            "The query correctly calculates the total order value for each order and filters employees based on orders exceeding $10,000. The use of JOINs and the subquery for order values are accurate.",
            "The original query incorrectly uses MAX() on Freight to find the highest freight per employee. Instead, the query should first identify the highest Freight cost, then determine which employee has the most shipments using that method by counting their orders.",
            "The SQL query correctly joins the employees table to itself to find managers and their direct reports, then joins to the orders table to count the number of orders placed by employees under each manager. The query is correct and answers the business question as intended.",
            "The original query used an ORDER BY clause in a subquery, which isn't necessary for deriving results. The correct approach is restructuring the subquery to calculate the sales without an ORDER BY clause, and then using the LAG function correctly without specifying the step size (default is 1).",
            "The original query incorrectly counted orders instead of calculating sales. The corrected query calculates the total sales per city by joining the necessary tables and using the Employee Sales metric formula.",
            "The SQL query correctly calculates the average order processing time for each employee by taking the difference between 'ShippedDate' and 'OrderDate'. The query joins the 'employees' and 'orders' tables using the 'EmployeeID' and filters out records with NULL 'ShippedDate', then groups the results by 'EmployeeID' to compute the average processing time. The query is correct and follows ANSI SQL standards.",
            "The original query is conceptually correct but needed adjustment to correctly use LAG and to account for DISTINCT employees who have reduced discounts. The corrected query now selects employees who have shown a reduction in discount year over year by comparing the current year's average with the previous year's average discount.",
            "The original query is mostly correct, but DATE_SUB(CURDATE(), INTERVAL 1 MONTH) should be changed to DATEADD(MONTH, -1, CURRENT_DATE) for better ANSI SQL compatibility.",
            "The original query is mostly correct, but the function CURDATE() is replaced with CURRENT_DATE to align with ANSI SQL standards. The rest of the query is accurate and calculates the total sales for each employee in the current year, ordering the result by TotalSales in descending order and limiting the result to one employee, which correctly identifies the employee with the highest sales revenue.",
            "The original SQL query uses DATE_SUB(CURDATE(), INTERVAL 1 MONTH) which is not ANSI SQL. It should be replaced with DATEADD(MONTH, -1, CURRENT_DATE) for compatibility with the ANSI SQL standard.",
            "The SQL query is correct. It selects the Title and calculates the average Salary for each Title group in the employees table.",
            "The SQL query is correct. It correctly counts the number of orders for each employee using a LEFT JOIN and groups by EmployeeID.",
            "The SQL query is correct. It selects the city along with the count of employees, groups the result by city, orders by employee count in descending order, and limits the result to the top entry, effectively finding the city with the largest number of employees.",
            "The query is correct. It joins the employees table to itself to find employees who have other employees reporting to them, effectively listing managers and their reports.",
            "The SQL query is correct. It accurately calculates the total discount given on orders per employee by multiplying the unit price, quantity, and discount, then summing the results for each employee.",
            "The original query attempted to calculate a 'Hire to Sales Correlation' by subtracting years from order date and hire date, which does not compute correlation. Correct approach computes total sales and time since hire, enabling correlation analysis outside SQL.",
            "The query is correct. It joins the employees and orders tables, filters orders for the current year, groups by employee ID, counts the orders for each employee, and selects the one with the highest count.",
            "The query is mostly correct for calculating the monthly sales trend for each employee. However, it should also include the year in the GROUP BY clause to ensure the same month across different years is not aggregated together. Consider using YEAR(o.OrderDate) as well in both the SELECT and GROUP BY clauses.",
            "The given SQL query correctly finds the employee who handles orders with the maximum average freight cost. It joins the 'employees' and 'orders' tables on 'EmployeeID', calculates the average freight for each employee, and orders the results in descending order to find the maximum average. The use of 'LIMIT 1' ensures only the top record is returned.",
            "The SQL query correctly calculates the total sales for each employee grouped by their birth month, adhering to the business question and the provided schema.",
            "The SQL query is correct. It uses a LEFT JOIN to combine the employees with orders and filters for those where the order ID is NULL, indicating no orders are assigned to an employee.",
            "The SQL query correctly calculates the total revenue from orders shipped after the required date by joining the 'orders' and '[Order Details]' tables. No corrections are needed.",
            "The query correctly calculates total sales per employee in each country, but to identify top-performing employees in each country, it must be grouped by country and sorted within each group. Therefore, add sorting by Country before TotalSales for clarity.",
            "The SQL query is correct and calculates the employee longevity as the number of years since their hire date, dividing the day difference by 365.25 to account for leap years.",
            "The original query uses LAG incorrectly as it is an aggregate function applied without a suitable partition for each employee and year. We need to calculate total sales for each employee per year and find the difference between years outside SQL.",
            "The query correctly identifies employees with 'Manager' in their title and lists their direct subordinates from the 'employees' table. No corrections needed.",
            "The original query was almost correct but needed to ensure the total sales calculation in the subquery only considers sales associated with the orders table, which requires joining 'orders' in the subquery with '[Order Details]'.",
            "The original query includes DISTINCT in SELECT and resolves the employee and ship country grouping incorrectly by using HAVING with COUNT(DISTINCT ShipCountry) > 1. To correct the query, DISTINCT should be removed from SELECT and GROUP BY should include all selected columns except the aggregate function result.",
            "The SQL query is correct according to the business question and schema description. It accurately calculates the total sales revenue generated by each employee.",
            "The SQL query correctly retrieves the number of orders processed by each employee by counting OrderID in the orders table, groups the results by EmployeeID, and orders the results in descending order to show the employee with the most orders at the top. The query is correct.",
            "The SQL query incorrectly checks the year condition. It should be comparing the year of the OrderDate to the year of the previous month, not the current year.",
            "The SQL query correctly calculates total sales by region by joining the employees, orders, and [Order Details] tables. The calculation of total sales is correct as per the formula provided. The grouping and ordering are appropriately applied to answer the business question. The query is correct and needs no changes.",
            "The SQL query is mostly correct, but it might be beneficial to clarify the length of tenure in years for a more meaningful interpretation. Consider using `DATEDIFF(CURRENT_DATE, e.HireDate) / 365 AS TenureYears` instead of just days.",
            "The SQL query is correct. It joins the employees, orders, and [Order Details] tables to calculate total sales for each employee, orders by total sales in descending order, and limits the result to the top 5 employees.",
            "The SQL query correctly calculates the total sales by city using the provided formula. It joins the tables accurately and uses the correct GROUP BY clause on e.City. The query is correct.",
            "The SQL query is correct. It calculates the average difference in days between the 'ShippedDate' and 'OrderDate' for each employee, grouping by 'EmployeeID'.",
            "The SQL query is correct. It correctly calculates the total freight cost handled by each employee by joining the employees and orders tables on EmployeeID and grouping the results by EmployeeID.",
            "The original query incorrectly attempts to use a RANK function to determine the median value, which is not suitable for this question. Adjusting the query to calculate total sales for each employee, find the median using an OFFSET approach, and then count employees whose sales are above this median.",
            "The query provided is correct. It correctly calculates the average discount each employee provides by joining employees, orders, and [Order Details] tables, then groups the results by employee and orders them by the average discount in descending order.",
            "The query is mostly correct, but it should include the hire month in the GROUP BY clause to properly aggregate the orders per employee and hire month. The corrected addition to the GROUP BY clause ensures the output reflects how the number of orders is distributed across hiring months.",
            "The SQL query correctly calculates the growth rate of sales for each employee. It utilizes conditional aggregation to calculate the sales for the current and previous year, subtracts them, and divides by the previous year's sales to compute the growth rate. The use of NULLIF is appropriate to avoid division by zero errors. The query structure and joins are also correct.",
            "The current SQL query correctly calculates the sales increase for each employee but does not answer how many employees increased their sales. To address this, we need to count the number of employees where the SalesIncrease is greater than zero.",
            "The query is mostly correct. It joins the employees and orders tables and counts distinct regions for each employee, filtering those with count greater than one. No corrections needed.",
            "The SQL query is correct for the given business question. It calculates the total sales impact for employees reporting to the same manager by joining the employees, orders, and [Order Details] tables and grouping the results by manager (e.ReportsTo). The WHERE clause ensures that only employees who have a manager (ReportsTo IS NOT NULL) are considered.",
            "The original query incorrectly nests the SUM function within the AVG and STDDEV window functions. To correct this, a subquery should be used to calculate TotalSales, and then the AVG and STDDEV_SAMP functions should be applied outside that subquery. Also, changed STDDEV to STDDEV_SAMP for sample standard deviation.",
            "The SQL query correctly calculates the total sales amount generated by each employee as per the business metrics definition provided. It joins the employees, orders, and [Order Details] tables correctly and uses the appropriate formula in the SELECT clause. GROUP BY is used correctly to group the results by EmployeeID.",
            "The SQL query correctly calculates the total sales generated by each employee and retrieves the employee with the highest total sales by using ORDER BY TotalSales DESC LIMIT 1. The JOIN conditions are correct, and the aggregate function is applied as specified by the business metrics definition.",
            "The SQL query is correct. It accurately uses a LEFT JOIN to ensure each employee is listed with the count of orders processed, even if an employee has not processed any orders.",
            "The SQL query correctly uses a LEFT JOIN to find employees with no associated orders by checking where orders.OrderID is NULL. The query is accurate for the given question.",
            "The SQL query is correct for the given business question. It correctly joins the 'employees', 'orders', and '[Order Details]' tables to calculate the average discount given by each employee and groups the results by EmployeeID.",
            "The query is correct. It correctly joins the employees and orders tables on EmployeeID and calculates the total freight cost for each employee's orders, grouping by EmployeeID.",
            "The original query used OrderDate instead of ShippedDate, which does not align with the question asking for shipped orders. The corrected query uses ShippedDate to reflect the shipped orders accurately. Also, a condition WHERE ShippedDate IS NOT NULL is added to exclude orders that have not been shipped.",
            "The SQL query is correct. It selects employees' ID, first name, and last name from the employees table where the ReportsTo column matches the specified manager ID placeholder (?).",
            "The original query incorrectly uses the YEAR function, which simplifies the date to the year component only and could return incorrect results across different dates within a year. The corrected query uses DATE_SUB to accurately determine the hire date within the last 5 years.",
            "The query is mostly correct, but 'OrderYear' in the GROUP BY clause should specify YEAR(orders.OrderDate) again for clarity and correctness.",
            "The SQL query is correct. It successfully joins employees with orders using the EmployeeID, counts the orders for each city, and groups the results by the city of the employees.",
            "The SQL query is correct. It calculates the number of subordinates for each employee using a LEFT JOIN on the employees table and orders by the descending count of subordinates to identify the employee with the most subordinates. The LIMIT 1 ensures only the top result is returned.",
            "The SQL query correctly calculates the average salary for each job title. The GROUP BY clause is used appropriately to group the employees by their titles, and the AVG function computes the average salary. The query aligns with the business question.",
            "The original query did not account for the association with employees, which is crucial for determining sales generated by employees. Joining the 'orders' and 'employees' tables ensures that the query correctly evaluates the business question.",
            "The original query reversed the order of the dates in the DATEDIFF function. It should be RequiredDate minus ShippedDate to calculate the difference as requested.",
            "The query is mostly correct, but it needs to ensure the DATE_FORMAT function is applied specifically to the 'orders' table's OrderDate column to avoid ambiguity.",
            "The SQL query accurately reflects the business question. It joins the 'employees', 'orders', and '[Order Details]' tables correctly and calculates total sales for each region grouped by 'employees.Region'. This query is correct as per the given schema and business question.",
            "The SQL query correctly joins the tables 'employees', 'orders', and '[Order Details]' to calculate the total sales for each employee title. The query uses the formula defined for 'Employee Sales' and groups by 'employees.Title' to compare sales between different titles. The query is correct.",
            "The initial query uses DATEDIFF which is not necessary when calculating a simple difference between dates in years. The calculation of tenure as years is correct, but ensuring exact syntax depends on the SQL environment (e.g., use of CURDATE minus HireDate is simpler and supported in MySQL-like environments). However, if DATEDIFF is required, the original query is still valid.",
            "The original query did not correctly filter for the last month. The use of DATE_SUB(CURDATE(), INTERVAL 1 MONTH) was incorrect as it includes dates prior to the start of the last month. The correct approach is to use DATE_TRUNC to ensure only the previous full month is considered.",
            "The query correctly retrieves the count of orders placed by each employee by joining the 'employees' and 'orders' tables on EmployeeID and grouping by EmployeeID.",
            "The SQL query correctly finds the average order value for each employee by calculating the discounted price for each order detail and averaging it after grouping by EmployeeID. The query syntax and logic align with ANSI SQL standards and the question requirements.",
            "The SQL query correctly identifies employees whose birthdays are in the current month by comparing the month of the BirthDate to the month of the current date using MONTH(CURDATE()). This solution assumes the use of functions like MONTH and CURDATE() which are supported in most SQL dialects.",
            "The SQL query correctly lists all employees who report to a specific manager by using the 'ReportsTo' column in the 'employees' table. The placeholder '?' is intended for parameter binding in prepared statements. No corrections needed.",
            "The SQL query correctly calculates the total number of products sold by each employee by joining the employees, orders, and [Order Details] tables and using the SUM function on the Quantity column, grouped by EmployeeID. The query is accurate as per the business question.",
            "The SQL query is correct. It joins the employees, orders, and [Order Details] tables correctly and calculates the average discount for each employee, grouping by EmployeeID.",
            "The original query incorrectly uses employees.City instead of orders.ShipCity to find the most common shipped city. The corrected query groups by ShipCity to fulfill the business question.",
            "The SQL query is correct. It accurately counts the number of orders per employee and sorts the results in descending order to obtain the top three employees with the highest number of orders.",
            "The original query did not correctly handle date extraction and LAG function grouping. It also did not handle division by zero. The corrected query separates the year and month for proper grouping and uses NULLIF to prevent division by zero errors.",
            "The SQL query is correct. It joins the employees and orders tables on EmployeeID and filters for orders with freight costs greater than $500. The query correctly groups the results by EmployeeID and counts the qualifying orders for each employee.",
            "The original query uses DATE_SUB which is not ANSI SQL. Using DATE_ADD and CURRENT_DATE is more standard. This ensures compatibility with ANSI SQL.",
            "The SQL query is correct as per the given requirements. It calculates the total sales for each employee in a specific region using the provided metric formula and includes a parameterized region filter in the WHERE clause.",
            "The SQL query is correct. It calculates the average days between order placement and shipment for each employee by joining the employees and orders tables on the EmployeeID and using the DATEDIFF function to compute days between ShippedDate and OrderDate. It groups the results by EmployeeID to compute the average for each employee.",
            "The SQL query is mostly correct but is missing the grouping by 'FullName' along with 'EmployeeID'. The corrected query includes 'FullName' in the GROUP BY clause to align with SQL standards.",
            "The SQL query is correct. The query joins the employees and orders tables, using EmployeeID as the foreign key, then groups the results by EmployeeID and ShipVia to count the number of orders each employee shipped via each shipping method.",
            "The query correctly calculates the total sales with and without discounts for each employee, and then finds the impact of these discounts by subtracting the discounted total from the undiscounted total. The JOIN operations and GROUP BY clause ensure that the calculations are done per employee. The query is accurate and adheres to the business question requirements.",
            "The SQL query is correct. It correctly counts the number of orders managed by each employee by performing a LEFT JOIN on the employees and orders tables and grouping the results by EmployeeID.",
            "The original query incorrectly calculates the year for orders placed last month. It should adjust the year condition to ACCOUNT for the possibility that the last month might belong to a different year. The corrected query uses 'YEAR(CURRENT_DATE - INTERVAL 1 MONTH)' instead of 'YEAR(CURRENT_DATE)'.",
            "The SQL query is correct. It joins the 'employees' and 'orders' tables on 'EmployeeID' and calculates the total freight cost for orders handled by each employee, correctly grouping by 'EmployeeID'.",
            "The original query is mostly correct, but the calculation of 'last year' can be simplified by directly subtracting 1 from the current year in the WHERE clause. This ensures clarity and alignment with ANSI SQL standards.",
            "The original query correctly identifies employees with late orders and sorts them in descending order of count. Added LIMIT 1 to ensure only the employee with the most late orders is returned.",
            "The SQL query correctly calculates the total number of products sold by each employee by joining the employees, orders, and [Order Details] tables. It then sums the quantity of products sold grouped by EmployeeID. The query is correct as per the business question.",
            "The SQL query is correct for the given business question. It correctly calculates the total revenue by multiplying the unit price with the quantity, adjusting for any discount, and sums up the values across all orders.",
            "The original query used a non-standard SQL syntax for date addition. Replaced '+ INTERVAL 2 DAY' with 'DATEADD(DAY, 2, orders.OrderDate)' to comply with ANSI SQL standards.",
            "The SQL query is correctly written and calculates the top sales territory based on the sum of order quantities by region. It joins the 'orders' table with the '[Order Details]' table on 'OrderID' and groups by 'ShipRegion' to compute the total order quantity per region, ordering by this total in descending order and limiting the result to the top one.",
            "The query correctly joins the employees and orders tables on EmployeeID and counts the number of orders managed by employees grouped by country. The SQL query is correct.",
            "The SQL query accurately calculates the tenure of each employee by using DATEDIFF to determine the number of days since their HireDate. It orders the results by TenureDays in descending order and limits the output to the top result, which correctly answers the question of which employee has the longest tenure. The query is correct and follows the ANSI SQL standards.",
            "The SQL query correctly calculates the average order value handled by each employee by joining the employees, orders, and [Order Details] tables. It accurately uses the AVG function on the product of UnitPrice, Quantity, and the discount adjustment, grouped by EmployeeID.",
            "The query is correct. It selects EmployeeID and counts distinct CustomerIDs from orders, grouped by EmployeeID, order by customer count in descending order, and limits to the top result, which answers the question.",
            "The original query correctly implements the calculation but lacks the multiplication by 100 to convert the ratio to a percentage. Adding '* 100' to the expression for SalesPercentage will correct this. Additionally, using a subquery for total sales is appropriate but ensure the alias 'TotalSales' is correctly referenced.",
            "The SQL query is correct. It correctly computes the total sales for each employee by joining the employees, orders, and Order Details tables, calculates the total sales using the specified formula, groups by EmployeeID, and orders the result in descending order to retrieve the top 5 employees.",
            "The query counts ProductID occurrences for each employee. However, it should focus on product categories, which would require a Categories table. This table is missing in the schema; therefore, the query cannot accurately answer the question as intended. To proceed, ensure there is a relationship between ProductID and product categories.",
            "The original query attempts to filter employees by comparing their sales to the 75th percentile of employee sales. However, it incorrectly uses the raw expression in the HAVING clause and the subquery. I added a subquery to calculate EmployeeSales and adjusted the percent calculation to use sorted EmployeeSales instead.",
            "The query correctly joins the employees and orders tables, selects the EmployeeID, extracts the month from OrderDate, and counts the orders per employee per month. It uses GROUP BY appropriately for the required aggregation. The query is correct.",
            "The original query is incorrect in its calculation of the sales increase. It attempts to use a calculated flag to determine the year of sales, which is not accurate. A conditional aggregation approach is needed to compare current and previous year sales. The correct query subtracts last year's sales from the current year's sales for each employee using CASE statements.",
            "The original query used DATE_SUB(CURDATE(), INTERVAL 3 MONTH), which incorrectly checks for the last 3 months from the current date. This doesn't align with the standard way to calculate the last quarter. I've adjusted the query to use DATEADD(MONTH, -3, CURRENT_DATE) for better clarity and alignment with standard functions for date manipulation depending on SQL dialect.",
            "The SQL query is correct. It joins the 'employees', 'orders', and '[Order Details]' tables, calculates the total sales for each employee, groups by 'EmployeeID', and orders the results by 'TotalSales' in descending order with a limit of 5 to obtain the top 5 employees.",
            "The query is correct and retrieves each employee along with the count of orders they have handled, sorted in descending order to find who handled the most orders.",
            "The query correctly calculates the total sales for each employee per month. However, to analyze the monthly growth trend, additional steps such as calculating the percentage change or using a window function for computing growth rate might be needed, depending on further requirements.",
            "The query checks for orders that have a non-null 'ShippedDate' but a null 'RequiredDate'. This does not accurately reflect orders that have been shipped but not yet delivered. Instead, the logic should check for non-null 'ShippedDate' and null 'ShippedDate'. Correct SQL Query should be: SELECT COUNT(o.OrderID) AS ShippedNotDelivered FROM orders o WHERE o.ShippedDate IS NOT NULL AND o.RequiredDate IS NOT NULL AND (o.ShippedDate < o.RequiredDate OR o.ShippedDate IS NULL);",
            "The original query incorrectly uses MAX to find the largest single order value per employee. The task is to find employees based on total sales, so we should use SUM instead of MAX to calculate the total sales amount by each employee.",
            "The SQL query correctly calculates the average order value for each employee by multiplying the unit price with quantity and applying the discount, then averaging the result grouped by EmployeeID. The join conditions and groupings are appropriate, and the query aligns with the question.",
            "The SQL query is correct. It calculates the tenure by finding the difference between the current date and the hire date, and it computes the total sales per employee. The results are grouped by EmployeeID and ordered by tenure in descending order.",
            "The SQL query is correct. It correctly joins the employees and orders tables on EmployeeID, calculates the number of orders handled by each employee in the last year, and groups the results by EmployeeID.",
            "The query correctly calculates the average discount for each employee's orders and orders them in descending order to find the employee with the highest average discount.",
            "The query correctly calculates the total sales by each employee grouped by region. The JOIN conditions and the GROUP BY clause are appropriate for the required distribution of employee sales across different regions.",
            "The original query incorrectly checks if 'RequiredDate' is NULL to determine if an order is pending. Instead, you should verify the absence of 'ShippedDate'. Corrected the WHERE clause to check 'o.ShippedDate IS NULL'.",
            "The query correctly joins the 'orders' and '[Order Details]' tables to calculate total sales by month and year. It orders the results by descending total sales to identify peak months. The use of YEAR and MONTH functions aligns with the requirement to group by month and year, and the calculation of total sales correctly applies the discount before summing.",
            "The query correctly calculates the total sales for each employee and groups by employee and age group. However, the age group calculation is a continuous variable here. It may be more appropriate to define specific age groups (e.g., 20-29, 30-39) if necessary for clearer reporting, although the current granularity is valid for general purposes.",
            "The SQL query correctly calculates the average delivery time for orders handled by each employee. It joins the 'employees' and 'orders' tables on EmployeeID, filters out orders without a shipped date, and groups the results by EmployeeID to compute the average delivery time using DATEDIFF.",
            "The original query is almost correct, but it is important to include 'e.Salary' in the GROUP BY clause to ensure correct SQL syntax and semantics. Also, be consistent with table names; use double quotes for '[Order Details]' to adhere to SQL standards. The revised query correctly groups the data by employee ID and salary.",
            "The SQL query correctly identifies employees who have managed shipping to the most diverse set of countries by joining the employees and orders tables on EmployeeID and counting distinct ShipCountry values. The GROUP BY clause is correctly used to aggregate the data by each employee, and the results are ordered by the number of unique countries in descending order to show those with the most diversity first. The query is accurate and does not require any changes.",
            "The original query did not account for ensuring the products were sold by employees. The correction adds a JOIN with the orders table to ensure linkage with employees through the OrderID.",
            "The query correctly calculates the total sales and freight for each employee by joining the necessary tables and using appropriate aggregations. The grouping by EmployeeID is suitable for the question's requirement to evaluate impact at the employee level. The query correctly implements the defined metric for 'Employee Sales'.",
            "The original query uses LAG incorrectly by placing it outside of an aggregate function, which doesn't work because LAG cannot calculate over aggregated values without a subquery. The corrected query wraps the calculation in a subquery, assuring that LAG operates on pre-aggregated monthly sales data. Additionally, LAG's default parameters are set to handle NULL values.",
            "The SQL query is correct and matches the business question. It accurately calculates the total sales value for each employee by joining the necessary tables: employees, orders, and [Order Details]. The aggregation is done correctly using the SUM function and GROUP BY clause.",
            "The original query is mostly correct, but it should consider the year along with the month to ensure the sales are from the current year. I've added a condition to filter by the current year in the WHERE clause.",
            "The SQL query is correct. It joins the employees and orders tables, filters orders from the current year, and counts the orders grouped by employee.",
            "The original query checks for the current quarter instead of the last quarter. The corrected query adjusts the quarter logic to reference the last quarter, and also ensures the year is correct by subtracting three months from the current date.",
            "The original SQL query was mostly correct, but I replaced the 'MONTH' function with 'EXTRACT(MONTH FROM ...)' to adhere to the ANSI SQL standard.",
            "The original query finds the maximum discount for each employee, rather than identifying the single largest discount across all orders. The corrected query uses a subquery to find the largest discount and selects the employee associated with it.",
            "The SQL query is correct. It correctly joins the 'employees' and 'orders' tables on the EmployeeID, counts distinct CustomerIDs for each employee, and groups the results by EmployeeID to count the unique customers served by each employee.",
            "The query is correct. It accurately calculates the total freight cost for orders handled by each employee by joining the employees and orders tables on EmployeeID and grouping the results by EmployeeID.",
            "The original query counts orders per day but does not filter to find only the day with the maximum number for each employee. The corrected query uses ROW_NUMBER to rank order dates per employee by the number of orders and selects only the top-ranked results.",
            "The original query incorrectly computed distinct months using `MONTH(orders.OrderDate)`, which only extracts the month without considering the year. This can lead to incorrect results if the data spans multiple years. The corrected query uses `EXTRACT(YEAR_MONTH FROM orders.OrderDate)` to accurately calculate distinct year-month combinations.",
            "The query is correct. It properly counts employees with a hire date before January 1, 1995, using the correct comparison operation and date format.",
            "The SQL query correctly retrieves the highest salary from the employees table using the MAX aggregate function.",
            "The query is correct and retrieves the city with the highest number of employees by grouping employees by their city and counting them. It orders the results in descending order of the count and limits the result to the top city.",
            "The SQL query is correct. It joins the 'employees', 'orders', and '[Order Details]' tables appropriately and calculates the total sales using the given formula, grouping by employee countries.",
            "The SQL query correctly calculates the average sales for each employee title by joining the necessary tables: employees, orders, and [Order Details]. The query uses the correct formula for sales calculation and groups results by Title. There are no syntax errors or logic issues. The query is correct.",
            "The SQL query is correct. It correctly joins the employees table to itself to count the number of direct reports for each manager.",
            "The query is correct and answers the question as intended. It counts the number of orders per region, groups by ShipRegion, orders the results by NumOrders in descending order, and limits the result to the region with the most orders.",
            "The current query correctly joins the 'employees' and 'orders' tables and counts the number of shipments per 'EmployeeID' and 'ShipVia'. However, it does not return the most common shipment method per employee, just a list sorted by the total count. To find the most common shipment method per employee, we need a subquery or a different approach to limit the results to the top shipment method for each employee.",
            "The SQL query calculates the percentage of total sales contributed by employees with the title 'Manager' correctly. The subquery calculates the total sales, and the outer query focuses on the sales by 'Manager' titles.",
            "The SQL query correctly calculates the total monthly sales generated by each employee by joining the employees, orders, and [Order Details] tables. The grouping and aggregation align with the defined metrics and dataset schema.",
            "The SQL query is correct. It correctly joins the employees, orders, and [Order Details] tables, calculates the total sales per employee, filters for the current year, groups by employee, and limits the result to the highest sales.",
            "The query correctly calculates the average sales per employee by joining the employees, orders, and [Order Details] tables on the appropriate keys and averaging the sales formula across the grouped employee IDs.",
            "The original query calculates the sum of discounts per employee. However, the requirement is to find employees with orders having a total discount over 10 percent, not sum of discounts. Thus, the query should aggregate discounts per order and compare against 10 percent of total sales per order. This needs to be recalculated using order line specifics and adjusted through a percent calculation.",
            "The SQL query correctly identifies the top three employees with the fastest average shipping times. It joins the employees and orders tables on EmployeeID, calculates the average difference between OrderDate and ShippedDate, filters out orders that haven't been shipped, and orders the results by average shipping time in ascending order, limiting the output to the top three results.",
            "The SQL query correctly answers the business question. It joins the employees table with the orders table on EmployeeID and counts the number of OrderID entries for each employee, grouped by EmployeeID.",
            "The SQL query is correct. It correctly joins the 'employees' and 'orders' tables on 'EmployeeID', sums the 'Freight' column, and groups the results by 'EmployeeID'.",
            "The query finds the month with the highest total sales. However, it does not identify which employees contributed to it. To include the employees, a correction is needed.",
            "The query correctly calculates the average discount provided by each employee. It joins the employees, orders, and [Order Details] tables appropriately and uses the AVG function with GROUP BY on EmployeeID.",
            "The query calculates total sales per employee per country but does not determine which employee has the highest total sales in each country. To find the employees with the highest sales in each country, a subquery or window function should be used.",
            "The query is mostly correct, but to ensure clarity and comprehensiveness, consider checking for potential issues with date functions across different SQL dialects. This not only affects compatibility but can also have performance implications. The 'DATEDIFF' function usage assumes a specific SQL dialect; ensure it is compatible with the environment in use.",
            "The original query is mostly correct. The only issue is the typecasting syntax for the division operation in SQL. The syntax COUNT(orders.OrderID)::float is not standard ANSI SQL; instead, the correct ANSI SQL syntax is to use CAST(). The corrected query uses CAST(COUNT(orders.OrderID) AS FLOAT) to ensure the division is done as a floating point division.",
            "The original query was incorrect because it checks if orders were placed before six months from today, which includes all previous months and may include employees who have processed orders in the last six months. The corrected query properly checks for employees who have not processed orders for the last six months by filtering the order date range properly.",
            "The original query does not calculate differences in monthly sales; it only orders the sales by EmployeeID and monthly sales. To calculate differences, you need to derive the difference in sales between months per employee, which this query does not address. Consider adding a self-join or analytic functions to compute differences.",
            "The question asks for employees who managed orders with the longest shipping distances, but the query only extracts the maximum ShipCountry and ShipPostalCode for each employee without calculating any distances. To find the longest shipping distances, we need to perform calculations or have additional data to determine the distance between locations. The current query does not achieve the business question objective.",
            "The SQL query is correct and accurately answers the business question by counting distinct CustomerIDs per EmployeeID.",
            "The query correctly retrieves each employee's average unit price for processed orders, orders the results in descending order, and uses appropriate table joins and aggregations specific to the question.",
            "The original query attempts to use LAG directly in the HAVING clause, which is incorrect. LAG should be calculated in a subquery or CTE before filtering. The revised query correctly calculates YearlySales in a subquery and uses LAG within a WHERE clause to find growth trends.",
            "The original query includes all employees regardless of whether they are under direct supervision. Changed the LEFT JOIN to INNER JOIN and added a WHERE clause to filter employees who have a 'ReportsTo' value (i.e., they are supervised).",
            "The SQL query is correct. It calculates the total sales for each employee using the specified formula and computes the average discount applied to each order, grouping the results by EmployeeID.",
            "The SQL query is correct. It selects the employee with the highest number of orders by counting the number of OrderID per EmployeeID, ordering by the count in descending order, and limiting the result to the top 1.",
            "The original query is mostly correct, but the GROUP BY clause should include both e.FirstName and e.LastName to match the SELECT clause. I also replaced CURDATE() with CURRENT_DATE to conform to standard SQL.",
            "The original query does not account for the scenario where the current month is January, which could result in incorrect year calculation. Additionally, the query was missing grouping by FirstName and LastName, causing ambiguity in the aggregation. Here's the corrected query ensuring proper handling of months and grouping.",
            "The original query is mostly correct, but the GROUP BY clause should include e.FirstName and e.LastName instead of e.EmployeeID to match the columns in the SELECT clause.",
            "The original query is slightly incorrect. It groups by EmployeeID and ProductID, but it's not needed as the question is about the largest unit price. The corrected query removes the GROUP BY and directly orders by UnitPrice.",
            "The original query doesn't correctly address the requirement to find the most common shipment destination and compare it to the employee's country. It incorrectly groups by distinct ShipCountry instead of finding the most common one per employee. The revised query uses a subquery with RANK to determine the most common ShipCountry for each employee and checks if it differs from their country of residence.",
            "The original query is missing grouping by e.FirstName and e.LastName, which could lead to issues if employees share the same EmployeeID. Adding FirstName and LastName in the GROUP BY clause ensures correct results.",
            "The original query had a logical flaw: it incorrectly used WHERE clause to filter orders outside of this year. It should filter during the ON clause of the LEFT JOIN to account for orders only in the current year, and find employees with no such orders (i.e., where o.OrderID is NULL).",
            "The query correctly calculates the average number of products per order for each employee. It joins the employees, orders, and order details tables, groups by employee, and computes the average quantity. The SQL syntax and logic align with the question.",
            "The query correctly identifies orders with a discount greater than 20% and retrieves the manager's first and last name. The use of joins between 'orders', 'employees', and '[Order Details]' tables is properly implemented. The WHERE clause correctly filters records with a discount greater than 0.2.",
            "The initial query uses MAX incorrectly to determine overall team sales. SUM should be used to aggregate the total sales per manager's team. The subquery needs to group by o.EmployeeID instead of e.EmployeeID to ensure the correct aggregation of sales.",
            "The original query had a potential issue with the use of CURDATE() which is not universally supported in all SQL dialects under ANSI SQL standards. It has been replaced with CURRENT_DATE. Additionally, GROUP BY should include all selected fields (e.FirstName, e.LastName) to comply with ANSI standards.",
            "The original query is mostly correct. However, the SQL query should group by both FirstName and LastName to ensure distinct employee names are handled correctly. Additionally, an alias 'DelayedOrders' was added to the COUNT result for clarity.",
            "The original query is almost correct, but it needs to include e.FirstName, e.LastName, and o.ShipRegion in the GROUP BY clause to comply with ANSI SQL standards.",
            "The query calculates total sales per employee but doesn't address the correlation with average salary. To analyze correlation, it should compute the total sales and average salary for comparison or use statistical methods outside SQL.",
            "The original query is mostly correct, but grouping by only EmployeeID may lead to incorrect results if there are multiple employees with the same FirstName and LastName. It's better to group by both FirstName and LastName for clarity.",
            "The SQL query correctly computes the average shipping time between the order date and the shipped date for each employee, grouped by employee. The DATEDIFF function is appropriately used to calculate the difference, and the AVG function computes the average time. The query group by clause ensures results are shown per employee, which aligns with the business question.",
            "The provided query aims to calculate total sales over the past year, but it does not correctly address 'growth in sales'. To evaluate growth, a comparison between different time periods is needed. The provided SQL calculates total sales, but it should compare sales to an earlier period to determine growth.",
            "The original query incorrectly joins with a 'regions' table which is not defined in the schema. The GROUP BY clause should include e.FirstName, e.LastName, and e.Region to align with standard SQL practices. The ORDER BY clause needs 'DESC' for descending order of TotalSales.",
            "The original query is incorrect due to the window function usage and logic. Corrected to calculate the standard deviation of sales sums over the last six months. Adding WHERE clause to filter the orders within the last six months and using ASC order to get the minimum standard deviation.",
            "The SQL query is correct. It accurately calculates the total sales for each employee for June 2023 by joining the necessary tables and filtering by the correct date range.",
            "The SQL query correctly calculates the total sales for each employee and orders the results to find the employee with the highest total sales, limiting to one result. It correctly uses joins and aggregation functions to derive the desired result.",
            "The SQL query is correct and accurately calculates the average salary of employees in each city.",
            "The SQL query correctly identifies orders where the ShippedDate is later than the RequiredDate, which answers the business question accurately.",
            "The SQL query is correct. It accurately calculates the total freight cost for orders where the shipping country is USA.",
            "The original query uses a LEFT JOIN which may include employees who have not processed any orders. Since the question is about the employee who processed the maximum number of orders, a regular JOIN is sufficient. The corrected query achieves this by using an INNER JOIN.",
            "The query correctly calculates the average sales per order for each employee by joining the employees, orders, and [Order Details] tables. The use of AVG() over the sales calculation per order is appropriate, and the GROUP BY clause correctly groups results by EmployeeID. The ORDER BY clause is used to sort results in descending order to get the highest averages, and LIMIT 5 correctly restricts the output to the top 5 entries. The query is correct and requires no changes.",
            "The provided SQL query correctly calculates the total discount given on all orders for each employee by multiplying the unit price, quantity, and discount rate for each order detail. It joins the necessary tables (`employees`, `orders`, `[Order Details]`) and groups the results by `employees.EmployeeID`. The query is correct as per the business question.",
            "The original query was close, but it did not count unique managers. By adding DISTINCT to the COUNT function, we ensure we count each unique manager only once.",
            "The SQL query correctly retrieves employees whose birthdays fall in the current month. It uses the MONTH function to extract the month from the BirthDate and CURRENT_DATE, which aligns with the requirement.",
            "The SQL query correctly finds the earliest hire date among employees grouped by city using the MIN function and GROUP BY clause. The query is accurate and matches the business question.",
            "The query correctly joins the employees, orders, and [Order Details] tables to calculate total sales per region. However, the 'Region' should be taken from the 'orders' table (if it represents the sales region) or should be explicitly specified from the relevant table. If 'employees' table 'Region' refers to employee location and not the sales region, clarify which region is meant by the business question.",
            "The query correctly calculates the sales growth percentage for each employee from May to June. It uses CASE statements to sum sales for both May and June, handles division by zero using NULLIF, and group results by employee. The logic aligns with the business metric definition of 'Employee Sales.'",
            "The original query uses the YEAR function to filter employees hired in the last five years, which may misbehave if employees were hired throughout the year (it only considers the year part). Replaced with DATE_SUB function for correct date comparison.",
            "The SQL query is correct for the given business question. The left join ensures all employees are included, and the WHERE clause filters those with no orders.",
            "The SQL query accurately answers the business question by selecting the Region and calculating the average salary (AvgSalary) for employees in each region, grouping the results by Region. The query correctly uses the AVG() aggregate function and GROUP BY clause. It is correct as per the provided schema.",
            "The provided SQL query correctly uses a JOIN between the employees and orders tables on EmployeeID and calculates the total freight cost for each employee. The query groups the results by EmployeeID, orders them by the total freight cost in ascending order, and limits the results to the employee with the least freight cost. The query is correct and follows the intended logic.",
            "The SQL query is correct. It correctly joins the employees, orders, and order details tables, calculates the total sales for this year, groups by EmployeeID, and orders by TotalSales in descending order, limiting the results to the top employee.",
            "The query correctly calculates the average order value per employee by joining the employees, orders, and [Order Details] tables. It computes the average of the total amount per order after applying any discounts, grouped by employee ID. The syntax is correct according to the ANSI SQL standard.",
            "The query incorrectly calculates 'last quarter' as the last three months. Instead, it should define the quarter based on a standard fiscal or calendar quarter. To accurately reflect 'last quarter,' we need to adjust based on today's date. Here's the corrected SQL query for the relevant date range of the last completed quarter.",
            "The original query incorrectly assumes that the left join will return NULL in case OrderDate is older than 6 months. Adjusting WHERE clause to check if OrderID is NULL to ensure no orders in the join and appropriately grouping by all selected columns ensures correctness.",
            "The SQL query is correct. It calculates the total discount given by each employee for all their orders by multiplying the unit price, quantity, and discount for each order detail and summing it up, grouped by EmployeeID.",
            "The original query correctly calculates total sales per employee per month. However, it doesn't address finding the month with the highest sales and the contributing employee properly. The revised query calculates total sales per employee per month and orders the results by the highest sales, returning the top record, thus identifying the month and employee with the highest total sales.",
            "The SQL query is correct. It accurately counts the number of employees who were hired within the last year by using the DATE_SUB function with INTERVAL 1 YEAR.",
            "The original query incorrectly uses TIMESTAMPDIFF, which isn't part of the ANSI SQL standard. The revised query calculates age by subtracting the birth year from the current year and making an adjustment to account for whether the birthdate has occurred this year.",
            "The query correctly joins the employees table to itself to find employees who report to a manager located in the same city. The use of self-join and the WHERE clause are appropriate for this requirement. The fields selected provide the necessary details: the employee's ID, their first name, and the manager's first name. No corrections are needed.",
            "The SQL query correctly calculates the average shipping time for each employee by using the DATEDIFF function to find the difference between the ShippedDate and OrderDate. It joins the employees and orders tables using EmployeeID and groups the results by EmployeeID to get the average for each employee. The query is correct as per the requirements.",
            "The original query incorrectly groups by `e.EmployeeID` and checks the total value of each order within the `HAVING` clause. The corrected query ensures each `OrderID` is counted distinctively and considers discounts when calculating order totals, matching the defined metrics.",
            "The query is correct and aligns with the question. It calculates the total freight cost for each employee by joining the employees and orders tables and summing the Freight column grouped by EmployeeID.",
            "The original query doesn't ensure that employees only processed orders within the specific country. The corrected query uses HAVING to ensure the employee processed orders exclusively in that country.",
            "The query attempts to calculate total revenue for the last three months from the current date, but this does not account for the definition of a financial quarter. A financial quarter should cover a fixed three-month period. Adjustments are needed to reflect the last full quarter depending on the current date.",
            "The SQL query correctly calculates the sales for each product by employee. However, the query limits the overall results to five, rather than getting the top five products per employee. To get the top five products for each employee, a subquery or window function should be used. Here's how you can do it:\n\nSELECT EmployeeID, ProductID, ProductSales FROM (\n    SELECT e.EmployeeID, od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductSales, \n           ROW_NUMBER() OVER (PARTITION BY e.EmployeeID ORDER BY SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) DESC) AS rank\n    FROM employees e\n    JOIN orders o ON e.EmployeeID = o.EmployeeID\n    JOIN [Order Details] od ON o.OrderID = od.OrderID\n    GROUP BY e.EmployeeID, od.ProductID\n) AS ranked_products\nWHERE rank <= 5;",
            "The original query is mostly correct, but it uses TIMESTAMPDIFF which is not part of ANSI SQL. Using basic YEAR subtraction is sufficient for annual tenure as long as hire dates do not account for exact months and days.",
            "The SQL query correctly identifies the orders with a discount greater than 20% and the employees who processed them. However, it does not count the number of such orders, which is implied by the question. To address this, we can modify the query by adding a COUNT and GROUP BY clause.",
            "The SQL query is correct. It accurately calculates the average order quantity per transaction for each employee by joining the employees, orders, and [Order Details] tables and grouping by EmployeeID.",
            "The SQL query correctly calculates the total sales amount for each employee by joining the employees, orders, and order details tables and then summing up the sales amount for each employee, grouping the results by EmployeeID. The query is correct as per the schema and business metric definitions.",
            "The original query incorrectly uses the `MONTH` function which is non-standard. The corrected query uses the ANSI SQL `EXTRACT` function to extract the month from the date.",
            "The SQL query is correct. It selects the EmployeeID and counts the number of orders processed by each employee using a LEFT JOIN between the employees and orders tables, ensuring all employees are included, even those with no orders.",
            "The SQL query correctly identifies employees who have processed more than 100 orders by joining the 'employees' and 'orders' tables on 'EmployeeID', grouping results by 'EmployeeID', and filtering with 'HAVING COUNT(o.OrderID) > 100'. The query is correct and adheres to ANSI SQL standards.",
            "The SQL query correctly calculates the revenue generated by each employee after discounts, summing the product of UnitPrice, Quantity, and the adjusted Discount from the [Order Details] table, and grouping by EmployeeID.",
            "The original query correctly calculates the total sales for each employee and orders them in descending order. However, it could be improved by including the total sales in the SELECT clause for clarity.",
            "The original query was incorrect as it did not properly filter employees based on sales across multiple countries. The corrected query groups by employees and counts distinct shipping countries, using a HAVING clause to filter those with sales in more than one country.",
            "The SQL query correctly calculates the total freight cost associated with each employee's sales by summing the 'Freight' for each 'EmployeeID'. The JOIN between 'employees' and 'orders' on 'EmployeeID' is appropriate, and the GROUP BY clause ensures results are grouped correctly by each employee.",
            "The SQL query correctly calculates the average discount for each employee and identifies the employee with the highest average discount. There are no mistakes in the query, and it follows the correct logic by joining employees with orders and order details, grouping by employee, and ordering by average discount to get the top result.",
            "The provided SQL query correctly calculates the number of unique products sold by each employee by joining the employees, orders, and [Order Details] tables and grouping by EmployeeID. The use of COUNT(DISTINCT od.ProductID) is appropriate for this purpose. The query is correct and aligns well with the business question.",
            "The SQL query is correct. It selects employees based on the total number of units sold by joining the employees, orders, and order details tables, grouping by employee ID, and ordering by the total quantity sold in descending order, limiting the result to the top 3 employees.",
            "The original query is mostly correct but requires a minor change. The GROUP BY clause should list o.OrderID first to properly connect each sum to the correct order. Otherwise, the query functions as intended to find the most expensive single order.",
            "The original query only extracts the month from OrderDate, which can mix sales from different years together. Adding EXTRACT(YEAR FROM o.OrderDate) as OrderYear to the SELECT clause, GROUP BY clause, and ORDER BY clause ensures that sales are grouped and ordered by both year and month.",
            "The query returns the total sales per city for each employee, but does not answer which city has the most sales attributed to each employee. To find the city with the most sales for each employee, use a subquery or ranking approach.",
            "The original query is mostly correct; it accurately joins the necessary tables and calculates the total sales for subordinates of each manager. The only correction needed is in the aliasing which is already correctly done, and the logic is intact as per the schema.",
            "The SQL query is correct. It calculates the number of sales made by employees hired within the last year by counting the orders associated with each employee who satisfies the hire date condition.",
            "The original query did not properly restrict the denominator to only include the Order Details linked to Orders. This is corrected by joining [Order Details] and orders in the subquery.",
            "The original query incorrectly checks if orders are older than 6 months or null, which could include employees with older orders. Rewritten to exclude any employees with orders in the last 6 months.",
            "The correct query should ensure that the interval properly captures the last month by specifying both a start and end condition. The GROUP BY clause should include all non-aggregated fields.",
            "The query is mostly correct, but for accuracy and readability, I've explicitly included e.FirstName and e.LastName in the GROUP BY clause and used YEAR(CURRENT_DATE) instead of YEAR(CURDATE()).",
            "The SQL query is correct. It calculates the total sales for each employee for the current year and orders the results to determine which employee has the highest total sales, then limits the output to one result.",
            "The original query uses 'MONTH(o.OrderDate) = 12'. While this may work in some SQL implementations, the ANSI SQL standard prefers 'EXTRACT(MONTH FROM o.OrderDate) = 12'. The rest of the query is correct.",
            "The SQL query correctly calculates the average order value per employee by joining the necessary tables and applying the AVG function. The GROUP BY clause is used properly to aggregate results by EmployeeID. The query is correct.",
            "The query correctly calculates the distribution of employee hire dates by year. It selects the year from the HireDate and counts the number of EmployeeIDs for each year, grouping the results by the year. The query is accurate and follows the business question requirements.",
            "The SQL query is correct. It uses a LEFT JOIN to find employees who have not made any sales by checking for NULL in the joined 'orders' table.",
            "The SQL query is correct. It calculates the total freight cost for orders handled by each employee by joining the employees and orders tables on EmployeeID and then grouping by EmployeeID to sum up the freight costs.",
            "The SQL query is correct for the given business question. It correctly calculates the average discount for orders handled by each employee by joining the 'employees', 'orders', and 'Order Details' tables and grouping by 'EmployeeID'.",
            "The SQL query accurately answers the business question. It selects the ReportsTo field to identify each manager and counts the number of employees reporting to each manager. The use of WHERE e.ReportsTo IS NOT NULL ensures that only employees with a specified manager are counted. The GROUP BY clause correctly groups the data by manager.",
            "The query is correct. It calculates the tenure for each employee using DATEDIFF and sorts them in descending order to get the employee with the longest tenure.",
            "The query is correct. It calculates the total revenue from order details where a discount is applied, using an inner join with the orders table. The formula multiplies the unit price, quantity, and (1 - discount) for accurate revenue calculation, then sums the results.",
            "The original SQL query is correct and answers the business question. It correctly counts the number of orders per city and orders them in descending order to find the city with the highest number of orders.",
            "The SQL query is correct. It successfully calculates the distribution of sales by employee title by joining the necessary tables and grouping by the Title of the employees.",
            "The original query mistakenly counts each order detail line rather than distinct orders. The corrected query uses COUNT(DISTINCT od.OrderID) to ensure each order is counted only once.",
            "The given SQL query correctly identifies the employee who has handled the most diverse range of products by counting distinct ProductID values associated with each employee's orders. The logic is correct, and the use of DISTINCT and JOINs is appropriate. No changes needed.",
            "The SQL query is correct. It calculates the average shipping time for orders processed by each employee, considering only the orders with a non-null 'ShippedDate', and groups the results by 'EmployeeID'.",
            "The query correctly calculates total sales for employees grouped by country using the provided formula for employee sales.",
            "The SQL query is correct. It joins the 'employees', 'orders', and 'Order Details' tables, groups by EmployeeID, calculates the total quantity sold by each employee, and retrieves the employee with the highest total quantity.",
            "The SQL query correctly retrieves the most recently hired employee by ordering the 'HireDate' in descending order and limiting the result to the top entry.",
            "The SQL query is correct. It accurately counts the number of orders handled by each employee by joining the 'employees' and 'orders' tables on 'EmployeeID' and grouping the results by 'employees.EmployeeID'.",
            "The SQL query correctly calculates the total freight cost for all shipped orders by summing the Freight column where ShippedDate is not null. No corrections are needed.",
            "The SQL query is correct. It correctly counts the distinct EmployeeID for each city and orders the results to get the city with the most distinct employees, limiting the result to one.",
            "The original query uses NOW() - INTERVAL 1 YEAR which is not correct for obtaining the orders from the past year in a typical SQL context. Using DATE_SUB(CURDATE(), INTERVAL 1 YEAR) is more appropriate for getting the date exactly one year ago from the current date. Additionally, the table name 'orders' should be explicitly mentioned in the WHERE clause to avoid ambiguity.",
            "The query correctly calculates the tenure by subtracting the HireDate from the current date. It orders the results in descending order of tenure and limits the output to the top result, effectively finding the employee with the longest tenure. The query is correct.",
            "The original SQL query incorrectly calculates the delay using DATEDIFF(RequiredDate, ShippedDate) instead of DATEDIFF(ShippedDate, RequiredDate). The correction swaps the order of the dates in DATEDIFF to reflect the actual delay days.",
            "The SQL query correctly counts the number of employees grouped by country. However, the query does not check if the employees are active. Assuming 'active' refers to currently hired employees, there are no specific columns that indicate active status in the provided schema. Without a specific column or criteria for active status, the assumption is that all employees in the table are active.",
            "The SQL query correctly identifies the employee associated with the highest number of orders by joining the employees table with the orders table using EmployeeID, grouping by EmployeeID, and ordering by the count of orders in descending order.",
            "The SQL query accurately calculates the total revenue contributed by employees in each region. The joins between the tables are correctly applied, and the aggregation function properly computes the revenue. No corrections needed.",
            "The SQL query is correct. It uses a LEFT JOIN to match employees with their managers based on the ReportsTo field.",
            "The SQL query is correct. It correctly joins the employees and orders tables on EmployeeID, filters for late shipments where ShippedDate is greater than RequiredDate, groups by employees to count late orders per employee, and orders the results to find the employee with the most late orders, limiting the result to one.",
            "The query correctly retrieves the ProductID, total quantity, and associated EmployeeID. It joins the necessary tables and groups by ProductID and EmployeeID with order by TotalQuantity to get the top results. The use of LIMIT is appropriate for retrieving the top selling products.",
            "The query is attempting to calculate a turnover rate but is incorrectly using HireDate to determine turnover. Typically, employee turnover involves employees leaving, so the logic should check for departures within the last year. Since the schema does not provide a termination date, this query cannot accurately calculate turnover with the given information. If a termination date was available, the query would need to count employees who left in the past year and divide by the total number of employees.",
            "The SQL query is correct and follows the ANSI SQL standard. It accurately calculates the total value of unshipped orders by joining the 'orders' and '[Order Details]' tables and summing up the product of UnitPrice, Quantity, and (1 - Discount) where ShippedDate is NULL.",
            "The query correctly calculates the total sales per employee for the previous month using the required formula and restrictions. It correctly joins the necessary tables and applies the date filter to the previous month. The query then groups by EmployeeID and orders the results by TotalSales in descending order, using LIMIT 1 to find the employee with the highest sales.",
            "The query is correct. It accurately joins the employees and orders tables on EmployeeID, filters orders for the current year using the WHERE clause, and correctly groups and counts orders by EmployeeID to provide the number of orders handled by each employee this year.",
            "The query correctly calculates the average order value for each employee using the JOINs between the 'employees', 'orders', and '[Order Details]' tables. It properly uses AVG and groups by EmployeeID. The query is correct as per the given schema and business question.",
            "The query is correct. It selects the first name, last name, and hire date of employees, orders the results by hire date in ascending order, and limits the output to the first record, effectively returning the employee with the earliest hire date.",
            "The SQL query correctly finds the top 5 employees with the highest number of orders handled by joining the employees and orders tables on EmployeeID, grouping by EmployeeID, ordering by order count in descending order, and limiting the result to 5 entries. The query is correct and matches the business question precisely.",
            "The query is mostly correct, but it uses COUNT(od.ProductID), which assumes each ProductID corresponds to a unique sale. Using COUNT(*) would accurately count the number of sales regardless of ProductID value.",
            "The SQL query correctly retrieves the total sales for employees who report to a specific manager. It joins the 'employees', 'orders', and '[Order Details]' tables properly and groups the results by the EmployeeID. The use of placeholders for ReportsTo is appropriate for parameterized queries.",
            "The SQL query is correct. It uses a LEFT JOIN between employees and orders tables, selecting employees where the OrderID is NULL from the orders table. This correctly identifies employees who have never handled an order.",
            "The SQL query correctly identifies the employee with the most frequent orders by counting orders for each employee, grouping by EmployeeID, and ordering the results in descending order of order count. The use of LIMIT 1 ensures only the employee with the highest count is returned. The query is correct.",
            "The original query did not include grouping by EmployeeID, which is necessary to determine sales per employee within each region. The revised query now includes e.EmployeeID in the SELECT clause and GROUP BY clause to correctly calculate total sales by employee per region.",
            "The SQL query correctly computes total sales per employee and correlates it with their salary. The JOIN conditions and aggregation are appropriate based on the schema provided.",
            "The query correctly identifies employees who have been with the company for over 10 years by using DATEDIFF to calculate the difference between the current date and the hire date. The threshold of 3650 days is approximately equal to 10 years, assuming no leap years. However, for precision, you might consider using a more exact calculation for years, taking into account leap years, but for a simple requirement, this query is correct and sufficient.",
            "The original query does not include grouping by employee, which is required to list sales per employee per day. The corrected query groups by both EmployeeID and OrderDate.",
            "The original query calculates the maximum value of individual line items instead of the total order value. The revised query calculates the total order value per order and finds the order with the largest value.",
            "The original query calculates only the sales for the current year. To find the difference between current and previous year sales for each employee, we need to compute sales for both years and subtract them. The revised query uses a CASE statement to sum sales for the current year and the previous year and then calculates the difference.",
            "The original query incorrectly checks for orders exactly in the current year only. To address the question accurately, the WHERE clause should filter for orders made in the last year by using the DATE_SUB function.",
            "The original query incorrectly uses COUNT to measure sales impact instead of calculating total sales. The corrected query calculates total sales using the formula provided in the business metrics, ensuring accurate measurement of sales managed by each employee.",
            "The SQL query correctly calculates the total sales for each employee for orders made in the current year. It joins the necessary tables and applies the formula as defined for the 'Employee Sales' metric. The WHERE clause correctly filters for the current year based on the OrderDate. No corrections needed.",
            "The SQL query is incorrect because it groups by year of hire date, which is not relevant to the change in average salary over the past 5 calendar years. We should evaluate salaries based on the current date minus 5 years. The query also needs to consider the range of years correctly. Here is the corrected query:\n\nSELECT YEAR(CURDATE()) - INTERVAL (n-1) YEAR AS Year, AVG(Salary) AS AvgSalary\nFROM employees\nWHERE YEAR(HireDate) <= YEAR(CURDATE()) AND YEAR(HireDate) >= YEAR(CURDATE()) - 5\nGROUP BY YEAR(CURDATE()) - INTERVAL (n-1) YEAR\nORDER BY Year DESC;",
            "The SQL query is correct. It computes the total number of orders handled by each employee by counting the orders associated with each EmployeeID. The LEFT JOIN ensures that all employees are included, even if they have not handled any orders. The query correctly uses GROUP BY to aggregate the results by EmployeeID.",
            "The SQL query is correct. It accurately counts the number of employees hired before the year 2000 by using a correct comparison of the HireDate with '2000-01-01'.",
            "The original query incorrectly filters on the join condition, which results in fetching only rows for the current year, contrary to the need for a complete set of employees. By moving the year condition into the join part, the query correctly identifies employees with no sales in the current year.",
            "The SQL query is correct. It appropriately groups by the Title column and counts the number of employees with each title, accurately answering the business question.",
            "The original query finds the maximum discount per employee and returns the top one, which may not be the highest discount overall. The corrected query finds the highest discount across all orders and the employee responsible for it.",
            "The SQL query correctly counts the number of employees in each region and orders the results in descending order to find the region that hosts the most employees. This query is correct and matches the business question.",
            "The original query is mostly correct but included an unnecessary alias for the orders table. It effectively calculates the total number of sales per city by counting the OrderID for each ShipCity. The corrected query removes the alias to align with the simplicity and clarity of standard SQL.",
            "The SQL query correctly calculates the average freight cost per employee and orders the results to find the highest. The query groups by the EmployeeID and orders by the average freight in descending order, limiting the result to one, which accurately answers the business question.",
            "The SQL query correctly calculates the number of orders shipped late by counting orders where the ShippedDate is greater than the RequiredDate.",
            "The SQL query is correct and should return the average age of employees.",
            "Incorrect SQL query since it misses grouping by year for monthly granularity. Added EXTRACT to capture both year and month in the GROUP BY clause.",
            "The original query is mostly correct, but ensuring CONCAT is used properly to join FirstName and LastName makes it cleaner.",
            "The SQL query correctly identifies the most common shipping method by grouping orders by ShipVia and counting the usage. The query then orders the results by UsageCount in descending order and limits the output to the top result. The query is correct.",
            "The original query was mostly correct, but the order of columns in the select list should follow the order used in the grouping clause for clarity. Also, to ensure compatibility with engines that require it, the table name '[Order Details]' should be in double quotes or square brackets to handle the special characters.",
            "The SQL query is correct as it selects the EmployeeID with the highest number of distinct customers by using COUNT(DISTINCT o.CustomerID) and ordering the results in descending order, limiting the results to one.",
            "The original query groups by EmployeeID, which is correct for finding total sales per employee. However, to ensure correct selection of FirstName and LastName, the GROUP BY clause should explicitly include e.FirstName and e.LastName. The query logically calculates and retrieves the top employee based on total sales, and it is already correctly limited to only this year using the YEAR function.",
            "The query calculates average sales per employee correctly by joining the necessary tables and applying the AVG function. However, the WHERE clause needs to also consider the year to correctly filter orders from last month, especially around year boundaries.",
            "The original query is mostly correct, but it should group by both employees.EmployeeID and the concatenated name. To ensure clarity and correctness, I added employees.FirstName and employees.LastName to the GROUP BY clause.",
            "The SQL query correctly calculates the total sales revenue generated by each employee by multiplying unit price, quantity, and adjusting for any discount. It groups the results by EmployeeID and orders them in descending order to find the highest sales revenue, limiting the results to one employee, making it accurate for the business question.",
            "The original query is mostly correct, but it is essential to include the concatenated employee name in the GROUP BY clause to avoid potential SQL errors depending on the SQL dialect. Adding CONCAT(employees.FirstName, ' ', employees.LastName) to the GROUP BY clause ensures the query will work as intended.",
            "The provided SQL query correctly identifies the employee who has worked the longest by ordering employees in ascending order of their HireDate and limiting the results to the first entry. No changes are needed.",
            "The query calculates the average age by subtracting the birth year from the current year, which is not entirely accurate as it does not consider whether the birthday has occurred this year. A more precise calculation would take this into account.",
            "The original query correctly groups employees by their 'ReportsTo' manager, but it may include a group where ReportsTo is NULL (i.e., employees who do not report to anyone). Adding a WHERE clause to exclude rows where ReportsTo is NULL will ensure the query answers the business question accurately.",
            "The query correctly identifies employees with birthdays in the current month. However, it might mistakenly include employees with birthdays today but not this year. To ensure only upcoming birthdays are considered, explicitly check the year.",
            "The query correctly calculates the average time taken from order placement to shipping for each employee. It joins the 'employees' and 'orders' tables on 'EmployeeID', calculates the difference between 'ShippedDate' and 'OrderDate' using DATEDIFF, and averages this difference grouped by 'EmployeeID'. The query is correct.",
            "The query correctly calculates the total sales for the previous quarter and lists the top 5 employees by sales. The use of QUARTER and DATE_SUB functions is appropriate to filter the orders from the previous quarter. The GROUP BY clause is used correctly to sum sales by EmployeeID, and the ORDER BY and LIMIT clauses correctly identify the top 5 sales performances.",
            "The query correctly calculates the total freight cost for each employee's orders, but the EmployeeName should be included in the GROUP BY clause because it's a non-aggregated column in the SELECT statement.",
            "The SQL query is mostly correct but requires including all non-aggregated columns in the GROUP BY clause. Added employees.FirstName and employees.LastName to the GROUP BY clause for correctness.",
            "The query is correct. It selects the employee with the highest number of delayed orders by joining the employees and orders tables, filtering orders where the shipped date is greater than the required date, grouping by employee, and ordering by delayed orders in descending order. LIMIT 1 is used to find the employee with the highest count.",
            "The original query was mostly correct, but the concatenated employee name must also be included in the GROUP BY clause for the query to be valid.",
            "The SQL query correctly retrieves distinct titles from the employees table, which answers the question of identifying different titles held by employees.",
            "The SQL query is correct. It correctly uses a subquery to calculate the average salary and compares each employee's salary to this average, displaying employee ID and name for those with higher than average salaries.",
            "The original query does not filter by a specific territory. Added a WHERE clause to filter orders by 'ShipRegion'.",
            "The original query attempts to list the top 3 products based on quantity but uses LIMIT 3 incorrectly for this purpose. The LIMIT would apply to the entire result set rather than for each employee. Instead, a subquery or window function is needed to rank products per employee.",
            "The original query groups by EmployeeID and the extracted month but lacks grouping by employee first and last names used in the SELECT clause. To address this, 'employees.FirstName' and 'employees.LastName' should also be included in the GROUP BY clause to ensure correct aggregation.",
            "The original query was incorrect because AVG(COUNT(orders.OrderID)/4) is not a valid aggregation. The correct approach is to calculate the order count per week separately and then take the average of these weekly counts.",
            "The original query calculates the difference between RequiredDate and OrderDate, which measures the time between order placement and the required date, not the actual processing time. The correct logic is to calculate the difference between ShippedDate and OrderDate, ensuring ShippedDate is not NULL, as this measures the actual processing time. The corrected query reflects this.",
            "The query correctly calculates the average salary of employees grouped by country. There are no errors.",
            "The query is correct. It calculates total sales for each employee this year and orders the result to find the employee with the highest sales. The use of CURRENT_DATE and YEAR function aligns with the requirement to consider sales for the current year. The query uses proper joins and grouping.",
            "The original query calculates orders for the current year. To get last year's data, 'YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1' should be used in the WHERE clause.",
            "The original query correctly uses a LEFT JOIN to identify employees without orders in the current month. However, it only checks the month and not the year, which could cause issues if the dataset spans multiple years. Added a YEAR check in the ON clause.",
            "The query correctly calculates total sales revenue per city and lists the top 3 cities. However, aliasing the orders table as 'o' is optional, and improvements could be made for clarity. Additionally, ensure '[Order Details]' table is correctly formatted in your SQL environment.",
            "The SQL query is correct. It selects ProductID and calculates the average discount for each product, grouping by ProductID and ordering the result by average discount in descending order.",
            "The SQL query is correct and accurately calculates the total freight cost incurred for each shipping country by grouping by ShipCountry and summing the Freight column.",
            "The query is mostly correct, but the GROUP BY clause should include all non-aggregated columns from the SELECT statement to ensure ANSI SQL compliance.",
            "The original query is mostly correct, but the calculation of average sales is over-complicated. We can simplify it by directly calculating the total sales per employee in the 'AvgSales' CTE without requiring subqueries. The logic remains unchanged.",
            "The SQL query is mostly correct. However, we should group by e.FirstName and e.LastName in addition to e.EmployeeID to ensure proper aggregation of names with the EmployeeID.",
            "The SQL query is mostly correct. However, we should ensure that the calculations only include completed orders, which typically means checking for 'ShippedDate' to be not null. Assuming the metric needs shipped orders, if needed, add a filter in the WHERE clause: WHERE o.ShippedDate IS NOT NULL. Otherwise, the query correctly calculates sales growth and ranks employees.",
            "The original query incorrectly attempts to extract the year from OrderID instead of OrderDate. Additionally, it does not join the [Order Details] table with the orders table to access the OrderDate field.",
            "The SQL query correctly retrieves the employee with the earliest hire date by ordering the 'employees' table by 'HireDate' in ascending order and limiting the result to 1. The query is accurate and correctly formatted.",
            "The original query needs to include YEAR(o.OrderDate) in the subquery's GROUP BY clause to correctly group by both month and year. Also, it's a good practice to group the outer query by all selected non-aggregated columns: e.EmployeeID, e.FirstName, e.LastName.",
            "The SQL query correctly identifies employees living in the same city as their manager by joining the employees table with itself using the ReportsTo and EmployeeID columns. The WHERE clause filters results to match cities. No corrections are necessary.",
            "The original query is almost correct but lacks grouping by e.FirstName and e.LastName. To ensure accurate results, these fields should be added to the GROUP BY clause.",
            "The original query doesn't correctly identify the employee with the longest time since their last order because it doesn't handle employees with no orders efficiently. The corrected query orders by the maximum order date, accounting for nulls, and retrieves only the first result.",
            "The SQL query is correct for the given question. It properly identifies orders over $500 by summing the total sale using the correct formula, groups by shipping method, counts total orders per method, and then orders by total in descending order, limiting the result to the most common shipping method.",
            "The original query incorrectly filters for the year based on the current date instead of subtracting 1 month. The adjustment to 'YEAR(CURRENT_DATE - INTERVAL 1 MONTH)' corrects this.",
            "The original query was mostly correct. However, it used MySQL's DATE_SUB function, which is not ANSI SQL standard. I replaced it with DATEADD, which is more commonly supported in standard SQL implementations.",
            "The original query incorrectly uses ORDER BY and LIMIT 1 with MIN function. This misinterpretation can return multiple rows with the same hire date. The corrected query uses a subquery to find the minimum hire date where ReportsTo is not null, ensuring that the hire date is the earliest among those having a manager.",
            "The SQL query is correct as it accurately calculates the total freight cost for each employee by joining the 'employees' and 'orders' tables on 'EmployeeID', and then summing up the 'Freight' column grouped by 'EmployeeID.'",
            "The query correctly counts the number of orders placed by each employee in each city by joining the employees and orders tables on EmployeeID and grouping the results by EmployeeID and ShipCity.",
            "The SQL query is correct. It joins the employees, orders, and [Order Details] tables appropriately, counts distinct products per employee, groups by EmployeeID, orders by the count in descending order, and limits the result to 1 to find the employee with the largest number of distinct products sold.",
            "The SQL query is correct. It selects employees where the ReportsTo field is NULL, indicating they do not report to a manager.",
            "The SQL query correctly identifies employees with the title containing 'Manager' and calculates their total sales using the given formula. The JOINs and WHERE clause conditions are appropriately applied, and the grouping by EmployeeID is correct to aggregate the sales per employee.",
            "The query is correct. It joins the employees and orders tables on EmployeeID. It filters for orders where the ShippedDate is later than the RequiredDate, indicating a late shipment. It then counts the number of late shipments per employee, groups by EmployeeID, orders by the count of late shipments in descending order, and limits the result to just one record. This provides the employee with the highest number of late shipments.",
            "The SQL query is correct and accurately answers the business question. It correctly joins the tables and aggregates the total units sold per employee.",
            "The query is almost correct; however, the calculation of the previous month's year could be incorrect if the current month is January. Instead, we should handle the month and year calculation with DATE_TRUNC. Here\u2019s a revised query: \nSELECT e.EmployeeID\nFROM (\n    SELECT e.EmployeeID, \n           SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CurrentMonthSales\n    FROM employees e\n    JOIN orders o ON e.EmployeeID = o.EmployeeID\n    JOIN [Order Details] od ON o.OrderID = od.OrderID\n    WHERE DATE_TRUNC('month', o.OrderDate) = DATE_TRUNC('month', CURRENT_DATE)\n    GROUP BY e.EmployeeID\n) cm\nJOIN (\n    SELECT e.EmployeeID, \n           SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS PreviousMonthSales\n    FROM employees e\n    JOIN orders o ON e.EmployeeID = o.EmployeeID\n    JOIN [Order Details] od ON o.OrderID = od.OrderID\n    WHERE DATE_TRUNC('month', o.OrderDate) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month')\n    GROUP BY e.EmployeeID\n) pm ON cm.EmployeeID = pm.EmployeeID\nWHERE (cm.CurrentMonthSales - pm.PreviousMonthSales) / pm.PreviousMonthSales > 0.10;",
            "The SQL query is almost correct, but it mistakenly uses GROUP BY with HAVING without properly averaging salaries of employees satisfying the sales condition. The correct query should calculate the total sales for each employee first and then filter employees with sales over $50,000 before computing the average salary.",
            "The provided SQL query correctly calculates the total number of orders processed per employee, broken down by year. It joins the 'employees' and 'orders' tables on 'EmployeeID' and groups the results by 'EmployeeID' and the year of the 'OrderDate'. The SQL query is accurate and follows the ANSI SQL standard.",
            "The SQL query correctly calculates the sales to salary ratio for each employee. The join operations and group by clause align with the required calculation of total sales per employee divided by their salary.",
            "The query is mostly correct. However, it is always a good practice to ensure that the query accounts for the year to avoid potential issues with database settings. The query does so adequately since it only checks for the month, which is correct given the business question.",
            "The query is incorrect. MIN(o.OrderDate) should be used in a subquery because MIN should calculate the minimum order date for each employee individually before calculating the difference. Correct query: SELECT e.EmployeeID, DATEDIFF(first_order.MinOrderDate, e.HireDate) AS HireToFirstOrder FROM employees e JOIN (SELECT EmployeeID, MIN(OrderDate) AS MinOrderDate FROM orders GROUP BY EmployeeID) first_order ON e.EmployeeID = first_order.EmployeeID ORDER BY HireToFirstOrder DESC LIMIT 1;",
            "The SQL query correctly calculates the total discount given by each employee. The formula is accurate as it multiplies the discount rate by the quantity and unit price to find the total discount value. The use of JOIN to connect tables is appropriate, and the GROUP BY clause correctly groups the results by EmployeeID.",
            "The original query incorrectly uses 'TOP 1' which is not standard ANSI SQL. The corrected query uses 'LIMIT 1'. Additionally, 'GETDATE()' is replaced with 'CURRENT_DATE' to be compliant with ANSI SQL standards.",
            "The SQL query is correct and calculates the average order value for each employee properly by joining the appropriate tables. It sums and averages the order details correctly using the required fields and formula.",
            "The query selects the EmployeeID and total number of orders for each employee in 2022, grouped by EmployeeID and ordered by total orders in descending order. Adding LIMIT 1 ensures only the employee with the most orders is returned.",
            "The SQL query correctly calculates the total sales for each city by linking the 'employees', 'orders', and '[Order Details]' tables and grouping the results by 'employees.City'. It orders the results in descending order of total sales, which aligns with the business question.",
            "The query correctly calculates the number of orders processed by each employee by year by joining the 'employees' table with the 'orders' table and grouping the results by 'EmployeeID' and the year extracted from 'OrderDate'. The use of COUNT() function to count 'OrderID' is appropriate. No corrections needed.",
            "The original SQL query had an incorrect use of 'day' as a unit within the DATEDIFF function, which is not part of ANSI SQL. The corrected query removes 'day' and reorders the DATEDIFF parameters to DATEDIFF(orders.ShippedDate, orders.OrderDate), which is more typically implemented to return a positive difference when the first date is later than the second.",
            "Replaced 'TOP 5' with 'LIMIT 5' for ANSI SQL compliance.",
            "The SQL query is correct. It correctly aggregates the freight costs ('SUM(orders.Freight)') for each employee based on the 'EmployeeID'. The JOIN operation is properly used to connect 'employees' to 'orders', and the GROUP BY clause is correctly applied.",
            "The original query correctly counts late shipments per employee and orders the result by the number of late shipments in descending order. To answer the question 'which employee has the maximum number of late shipments?', we need to return only the top result, which can be achieved by adding 'LIMIT 1'.",
            "The original query does not group by EmployeeID, which is necessary for identifying trends by employee. The correction adds EmployeeID to the SELECT and GROUP BY clauses.",
            "The original SQL query is mostly correct, but to be precise, the HAVING clause should explicitly use the aggregated column SUM([Order Details].Quantity) rather than the alias TotalQuantity. This ensures ANSI SQL compliance.",
            "The SQL query correctly calculates the impact of discounts by multiplying UnitPrice, Quantity, and Discount for each order detail and aggregating this value for each employee. The JOINs between the employees, orders, and [Order Details] tables are properly set up to ensure the discounts are affiliated with the correct employee. The use of GROUP BY on employees.EmployeeID is also appropriate for aggregating the values at the employee level. Overall, the query correctly addresses the business question.",
            "The current query calculates the total sales per employee per region, but it doesn't identify the top employee for each region. To get the top employee in terms of sales for each region, you'll need to rank employees within each region and select the top one. This requires a subquery or a window function.",
            "The original query did not correctly group the results by 'employees.EmployeeID', which is necessary to calculate the sales for each employee. Also, it included 'employees.HireDate' in the GROUP BY clause, which led to incorrect grouping. The correction groups by both 'EmployeeID' and uses 'LIMIT 1' to find the hire date of the top-performing employee by sales.",
            "The original SQL query attempted to use AVG(SUM(...)) directly, which is incorrect. Instead, the query should first calculate the total sales for each employee, then compute the average of these totals grouped by employee title.",
            "The original query calculates monthly sales for each employee, but it doesn't calculate the sales growth and lacks the date filtering for the past year. It also uses DATE_FORMAT, which might not be portable. Instead, EXTRACT is used to ensure ANSI compatibility and a WHERE clause is added to filter orders from the last year.",
            "The original query counts the number of late orders by employee, but to find the proportion, it should divide by the total number of orders for each employee. This has been corrected in the new query by dividing the late order count by the total orders for each employee.",
            "The query correctly computes the total sales grouped by employee title, which allows for the comparison of total revenue across different titles.",
            "The original query attempts to find employees with consistent monthly sales by counting distinct order months, which does not capture sales growth. The revised query calculates monthly sales per employee. Further logic outside SQL is required to determine 'consistent growth' by checking if sales increase month over month. From SQL perspective, this is the correct preparation.",
            "The query is correct. It calculates the total sales for each employee for the current month by joining the employees, orders, and [Order Details] tables and filtering orders by the current month's date.",
            "The SQL query correctly calculates the total sales per employee for the current year, groups by EmployeeID, and orders by TotalSales in descending order to find the highest. It then limits the result to one. The query is correct as per the business question and schema. No changes needed.",
            "Corrected the date range to accurately represent the past quarter using DATE_TRUNC function and adjusted interval syntax for ANSI SQL compliance.",
            "The query is correct. It joins the employees with orders, checks for orders shipped on or before the required date, groups the results by EmployeeID, orders by the number of on-time orders in descending order, and limits the result to the top 5 employees.",
            "The SQL query correctly calculates the total freight cost for shipments handled by each employee by joining the employees and orders tables on EmployeeID and using SUM to aggregate the Freight costs. The query is correct and adheres to the business question.",
            "The original query is mostly correct, but it only checks the month. It needs to ensure the year is the previous month to properly filter for last month's orders. Added a year condition to the WHERE clause.",
            "The query correctly calculates the number of unique products handled by each employee by joining 'employees', 'orders', and '[Order Details]' tables. The use of COUNT(DISTINCT [Order Details].ProductID) ensures that the count is of unique products. No corrections are needed.",
            "The SQL query correctly calculates the average discount per employee and orders them to find the employee with the highest average discount. The use of JOINs between employees, orders, and [Order Details] tables are appropriate, and the ORDER BY with LIMIT 1 correctly identifies the employee with the highest average discount.",
            "The query correctly calculates the number of employees per country, matching the business question's focus on demographic distribution by country.",
            "The query correctly calculates the monthly sales for each employee for the past year. However, it does not calculate the growth in monthly sales. To calculate growth, you would need to compare each month's sales with the previous month's sales for each employee. This requires additional calculations or a separate query to handle the growth comparison.",
            "The provided query did not properly address the question. It focused on total sales per employee rather than average sales per manager. The corrected query calculates average sales per manager and then selects employees reporting to that manager.",
            "The query seems correct in logic. However, the subquery to find the ProductID with the highest UnitPrice doesn't handle ties (multiple products with the same highest price). If there are multiple products with the highest price, some records may not be considered. Consider modifying the subquery with MAX(UnitPrice) and possibly handling multiple results if necessary. Additionally, ensure that the database or SQL engine supports the LIMIT clause used in the subquery.",
            "The original query finds total sales by employee per region but doesn't identify the employee with the highest sales per region. The corrected query first calculates total sales by employee in each region and then uses another layer to filter for the highest sales in each region.",
            "The original query is mostly correct, but needs to include employees.HireDate in the GROUP BY clause to ensure ANSI compliance. Other than that, it correctly calculates total sales grouped by employee and orders by hire date.",
            "The SQL query is correct. It properly joins the tables 'employees', 'orders', and '[Order Details]' using the appropriate keys and correctly calculates the total value of orders managed by each employee, filtering those with a sum greater than $10,000.",
            "The query is almost correct, but it needs to use the 'ShipRegion' column from the 'orders' table as there is no 'Region' column in that table. The corrected query uses 'ShipRegion' to check the region of the orders.",
            "The original query is mostly correct but lacks clarity with table aliases. I have explicitly used 'od' instead of 'c' inside the subquery to avoid confusion. It's essential to clearly distinguish the inner subquery's tables and their aliases to prevent ambiguity.",
            "The query correctly calculates the total sales for each employee for the current year and orders the results to find the highest total sales. The use of JOINs and GROUP BY is appropriate, and the LIMIT 1 clause correctly returns just the top result. The query is correct and adheres to the business question and schema provided.",
            "The original SQL query uses 'SELECT TOP 1' which is not ANSI SQL standard. The correct syntax uses 'LIMIT 1'. The query correctly identifies the employee with the highest sales by summing the total sales per employee and ordering by the sales amount in descending order to get the top employee. It then groups by ProductID to sum the quantities for that employee and orders by total quantity to get the top three products.",
            "The original query was missing the year condition. Ensured that both year and month are considered for filtering the dates to accurately calculate orders from the last month.",
            "The original query incorrectly calculates the date range for the last quarter. Using 'INTERVAL 3 MONTH' does not correctly identify the previous quarter. The query needs to be revised to calculate the first and last day of the last quarter.",
            "The SQL query is correct. It selects the year from the HireDate column, counts the number of EmployeeID entries hired in each year, and groups the results by the year of hire.",
            "The original query selects details of employees with 'Manager' in their title, but the question asks for a count. I corrected it by using COUNT(*) to return the number of such employees.",
            "The SQL query correctly calculates the average age of employees in each city using the DATEDIFF function to find the difference in days between the current date and the employee's birth date. It then divides by 365.25 to account for leap years and groups the results by city. The query is correct as per the business question.",
            "The query correctly retrieves the employees who report to a specific manager by joining the employees table on the ReportsTo and EmployeeID fields. The use of a placeholder for the manager's EmployeeID is appropriate for parameterized queries.",
            "The SQL query correctly calculates the total discount amount granted by each employee by multiplying the UnitPrice, Quantity, and Discount for each order detail and summing these values. The grouping by EmployeeID, FirstName, and LastName is correct to ensure the totals are aggregated per employee.",
            "The original query is mostly correct but missing 'e.FirstName, e.LastName' in the GROUP BY clause as they are selected columns. This correction ensures compliance with SQL standards, which require all non-aggregated selected columns to appear in the GROUP BY clause.",
            "The query correctly identifies the employee responsible for orders with the highest freight costs by finding the maximum freight cost in the orders table and retrieving the corresponding employee details. No corrections needed.",
            "The query is correct. It selects employees who have handled orders with a shipping destination matching the specified country.",
            "The SQL query correctly calculates the total revenue contribution of employees grouped by their title. The JOIN operations between 'employees', 'orders', and '[Order Details]' are accurately performed, and the revenue is aggregated and ordered as required.",
            "The SQL query is correct and effectively calculates the average salary of employees grouped by region.",
            "The SQL query correctly joins the 'employees' and 'orders' tables on 'EmployeeID'. It applies the condition to check if 'Freight' is greater than a specified amount using a placeholder '?'. Finally, it groups the results by 'EmployeeID', 'FirstName', and 'LastName'. The query is correct as per the provided schema and requirement.",
            "The query is correct. It calculates the total sales per employee for orders placed in 2023 by joining the 'employees', 'orders', and '[Order Details]' tables, summing the product of 'UnitPrice', 'Quantity', and the discount factor, and grouping by 'EmployeeID'.",
            "The SQL query correctly calculates the total sales for each employee in the first quarter of 2023 and returns the employee with the highest total sales. The query uses the correct tables, applies the appropriate formula, and orders the results correctly. No corrections are needed.",
            "The query is correct. It correctly joins the `employees` and `orders` tables on `EmployeeID` and counts the orders within the specified date range, grouping by each `EmployeeID` to get the order count per employee in 2023.",
            "The SQL query is correct for calculating the average order value processed by each employee. It correctly joins the employees, orders, and [Order Details] tables and computes the average of the total order value per employee.",
            "The SQL query is correct. It correctly joins the employees and orders tables, filters orders by the specified date range, and groups the results by EmployeeID to calculate the total freight costs for each employee in 2023.",
            "The SQL query correctly calculates total sales revenue for each employee by joining the 'employees', 'orders', and '[Order Details]' tables. It uses the formula for total sales, groups by employee, orders by total sales in descending order, and correctly limits the results to the top 5 employees. The query is correct.",
            "The SQL query is correct. It calculates the average discount each employee gives by joining the 'employees', 'orders', and '[Order Details]' tables, grouping by 'EmployeeID'.",
            "The SQL query is correct. It calculates total sales for each city by joining the 'orders' and '[Order Details]' tables, groups by 'ShipCity', and orders the results in descending order to find the city with the highest total sales. LIMIT 1 ensures only the city with the highest sales is returned.",
            "The SQL query is correct as it joins the employees table with the orders table, counts the number of orders processed by each employee, groups by EmployeeID, and filters to include only those employees with more than 100 orders.",
            "The query is correct. It calculates the average delay in shipping date compared to the required date for each employee, considering only orders where the shipped date is later than the required date.",
            "The SQL query correctly identifies employees who have generated sales in each month of 2023 by counting distinct months in the order dates. The use of 'BETWEEN' ensures the correct date range, and 'EXTRACT(MONTH FROM o.OrderDate)' is used properly to isolate the month part of the date. The query is accurate and does not require changes.",
            "The original query uses the alias 'TotalSales' in the HAVING clause, which is not permitted in standard SQL. The calculation must be repeated in the HAVING clause.",
            "The original query is mostly correct. However, to ensure clarity in group by clause, it's best practice to repeat the full expression used in the select clause for 'OrderMonth', ensuring both consistency and readability.",
            "The query correctly joins the employees and orders tables, groups by EmployeeID and ShipRegion, and orders the result by OrderCount in descending order. No corrections needed.",
            "The query calculates total quantity sold per product for each employee, but it doesn't specify the top-selling product for each employee. To correct it, you need to partition by EmployeeID and rank the products sold: SELECT EmployeeID, ProductID, TotalSold FROM (SELECT e.EmployeeID, od.ProductID, SUM(od.Quantity) AS TotalSold, ROW_NUMBER() OVER (PARTITION BY e.EmployeeID ORDER BY SUM(od.Quantity) DESC) AS rank FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, od.ProductID) t WHERE rank = 1;",
            "The original query incorrectly calculates growth rate on a yearly basis instead of quarter over quarter. The provided corrected query aggregates sales per quarter per employee.",
            "The SQL query correctly calculates the average discount given by each employee and selects the employee with the highest average discount. It properly joins the 'employees', 'orders', and 'Order Details' tables using the right conditions and groups by 'EmployeeID'. The query is accurate as per the question.",
            "The query is correct. It joins the employees and orders tables on EmployeeID, groups by EmployeeID, and uses HAVING to filter employees who have shipped to more than three distinct countries.",
            "The original query incorrectly calculates average sales instead of summing total sales for each employee per hire year. AVG was used instead of SUM, which doesn't align with the 'Employee Sales' metric definition. Added EXTRACT(YEAR FROM e.HireDate) to both SELECT and GROUP BY clauses to analyze by hire year.",
            "The SQL query is correct and accurately calculates the average order amount per employee by joining the employees, orders, and [Order Details] tables and applying the average function to the total order amount. The GROUP BY clause is used properly to group the results by EmployeeID.",
            "The original query incorrectly calculates sales by ShipCity instead of the city where employees are located. The corrected query joins the employees table to use employees.City.",
            "The original query correctly calculates the number of on-time orders for each employee, but it does not identify the employee with the most on-time orders. The corrected query includes an ORDER BY clause to sort employees by the number of on-time orders in descending order, and uses LIMIT 1 to return the employee with the highest count.",
            "The SQL query correctly calculates the average discount rate per employee by joining the 'employees', 'orders', and 'Order Details' tables using appropriate keys and applying the AVG function to the 'Discount' column, then grouping by 'EmployeeID'. The query is accurate as written.",
            "The SQL query is correct. It selects all necessary fields from the employees table, orders them by the BirthDate in descending order, ensuring the youngest employee comes first. It then limits the result to just one record, which is exactly what's needed to answer the question of who the youngest employee is.",
            "The query is correct. It selects the employee with the earliest hire date by ordering the HireDate in ascending order and limiting the results to one.",
            "The SQL query correctly calculates the total sales for each product by summing up the revenue, adjusted for discounts, for each ProductID in the [Order Details] table. The query is correct and matches the given business question.",
            "The SQL query is correct. It properly joins the employees table with itself to count the number of direct reports each employee has, orders by the count in descending order, and limits the result to the top entry. This answers the business question appropriately.",
            "The SQL query is correct. It selects the 'Title' and counts the 'EmployeeID' for each distinct title, grouping the results by 'Title'.",
            "The SQL query correctly calculates the total sales by country using the provided formula. The JOIN on orders and [Order Details] using OrderID is accurate and groups the results by ShipCountry as required. The query is correct and follows the ANSI SQL standard.",
            "The SQL query correctly retrieves the distribution of employee salaries by counting the number of employees for each distinct salary. No corrections needed.",
            "The provided SQL query correctly calculates the monthly sales trend for each employee and aligns with the given schema and business metric definition for 'Employee Sales.' The query joins the necessary tables (employees, orders, [Order Details]), applies the correct formula for sales calculation, and groups the results by year, month, and employee ID to fulfill the requirements of the business question.",
            "The original query incorrectly filters by the last 3 months instead of the last quarter. The revised query correctly filters for sales in the last quarter by using the QUARTER and YEAR functions.",
            "The original query is mostly correct, but the GROUP BY clause should include e.FirstName and e.LastName to adhere to SQL standards. The revised query has been corrected to reflect this.",
            "The original query used DATE_SUB with CURDATE() to calculate the last 3 months, but this does not necessarily align with the last quarter. I revised it to calculate the start of the current quarter date and then adjust back one quarter. Also, added e.FirstName and e.LastName in GROUP BY to include all select fields except aggregates.",
            "The query is mostly correct. A minor adjustment is needed in the date calculation for ANSI SQL compliance: use an interval expression with quotes, e.g., INTERVAL '1' MONTH.",
            "The query correctly calculates the average sales amount per order for each employee by joining 'employees', 'orders', and '[Order Details]' tables. It uses AVG() on the sales formula and groups by 'EmployeeID', which aligns with the business question.",
            "Corrected the SQL query to calculate the total discount amount by multiplying the discount rate by the unit price and quantity.",
            "The original query incorrectly focuses on joining employees with orders, which is not necessary to answer the question. It aims to find the city with the highest number of orders and the employee handling them, so grouping by ShipCity and EmployeeID directly from the orders table suffices. The corrected query now returns the city, the employee ID, and the count of orders, ordered by the count in descending order and limited to one result.",
            "The original query is mostly correct but needs to include 'HireDate' in the GROUP BY clause since it's part of the SELECT statement with a calculated alias 'TenureDays'. The alias used for tables ('e', 'o', 'od') can enhance readability.",
            "The SQL query correctly calculates the total freight cost for each shipping country by grouping based on ShipCountry and summing up the Freight costs. The query aligns with the business question and the schema provided.",
            "The original query did not correctly compare the year of the previous month. The YEAR function needed to be applied to 'CURRENT_DATE - INTERVAL 1 MONTH' to ensure the previous month's year is checked correctly.",
            "The SQL query is correct. It accurately selects the average discount per order for each employee by joining the employees, orders, and [Order Details] tables and utilizing the AVG function on the Discount column, grouping the result by EmployeeID.",
            "The original query incorrectly used DISTINCT as a keyword for the Region only. It should be applied to the entire row, and since regions are part of the employees table, a join is unnecessary if we only want the regions tied to employees. Adjusted to select distinct employee-region pairs.",
            "The SQL query is correct. It retrieves the count of distinct customers handled by each employee by joining the employees and orders tables on EmployeeID and grouping by EmployeeID.",
            "The provided SQL query correctly identifies the top 5 employees in terms of sales for the current year. It joins the necessary tables, filters orders to the current year, groups by employee, calculates total sales using the given formula, and orders the results to get the top 5 employees.",
            "The original query uses the LAG function incorrectly, as it should calculate the sales for the current year and the previous year separately and then find the growth rate. The corrected query uses CASE expressions to break down the sales for the current year and the previous year, calculates the difference, and divides by the previous year's sales. The NULLIF function is used to avoid division by zero.",
            "The SQL query correctly identifies the employee serving the most diverse regions by counting distinct shipping regions served by each employee and ordering them in descending order of count, then limiting the result to one employee.",
            "The SQL query is correct. It calculates the average shipping time by taking the difference between the ShippedDate and OrderDate for each order and then averaging it per employee.",
            "The query is correct. It properly calculates the average discount for each employee and selects the employee with the largest average discount.",
            "The initial query is missing the grouping of employees.EmployeeID, which is necessary to identify the corresponding managing employees for each city. This correction groups by ShipCity and employees.EmployeeID to ensure both total sales by city and corresponding employee details.",
            "The original query was almost correct. The only issue is that it needs to include e.FirstName and e.LastName in the GROUP BY clause to conform with SQL standards, as all selected non-aggregate columns must be included in the GROUP BY clause.",
            "The original query is almost correct, but the `GROUP BY` clause is missing `e.FirstName` and `e.LastName`. These columns need to be included in the `GROUP BY` clause to prevent syntax errors.",
            "The query is almost correct, but it must include FirstName and LastName in the GROUP BY clause to comply with ANSI SQL standards.",
            "The original query is incorrect because it uses an OR condition incorrectly. We need a LEFT JOIN to see employees without sales in the last quarter by ensuring that the join condition includes 'o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)'. The WHERE clause should check for 'o.OrderID IS NULL' to filter out employees who did not make any sales during this time.",
            "The SQL query is correct for the given business question. It correctly calculates the average delivery time for each employee using the DATEDIFF function between the ShippedDate and OrderDate, and orders the results to find the employee with the shortest average delivery time.",
            "The original query did not include a LIMIT clause to find the top employee. It also missed grouping by e.FirstName and e.LastName, which is necessary for including them in the SELECT clause. The corrected query addresses these issues.",
            "The original query is mostly correct, but for proper grouping, 'FirstName' and 'LastName' should also be included in the GROUP BY clause. This ensures the query conforms to ANSI SQL standards by grouping on all selected columns besides the aggregated ones.",
            "The given SQL query does not directly answer the question as it lists all shipping methods with their counts per employee, ordered by the count. To identify the most common shipping method used by each employee, a subquery or a window function should be used to filter out only the top shipping method per employee. Here is the corrected query:\n\nSELECT EmployeeID, FirstName, LastName, ShipVia, ShipMethodCount FROM (\n  SELECT e.EmployeeID, e.FirstName, e.LastName, o.ShipVia, COUNT(o.OrderID) as ShipMethodCount, \n         ROW_NUMBER() OVER (PARTITION BY e.EmployeeID ORDER BY COUNT(o.OrderID) DESC) as rn\n  FROM employees e \n  JOIN orders o ON e.EmployeeID = o.EmployeeID \n  GROUP BY e.EmployeeID, e.FirstName, e.LastName, o.ShipVia\n) t\nWHERE rn = 1;",
            "The original query is almost correct, but the GROUP BY clause needs to include all selected columns except the aggregate functions. I added e.FirstName and e.LastName to the GROUP BY clause.",
            "The SQL query is correct. It selects the EmployeeID, FirstName, and LastName of employees and counts the distinct CustomerID associated with each employee in the orders table. The results are grouped by EmployeeID and ordered in descending order to find the employee with the most unique customers served.",
            "The original query does not correctly count the number of employees because it uses COUNT(e.EmployeeID) which would count the rows before applying the threshold. This subquery correctly groups employees and filters them by the sales threshold, counting the resulting employees.",
            "The original query is mostly correct but is missing grouping by e.FirstName and e.LastName. This is necessary because those columns are being selected. The corrected query adds those columns to the GROUP BY clause.",
            "The query correctly calculates sales for employees who joined in the last year. However, it does not compare these sales to those of employees who have been with the company longer. To do this, a UNION or separate query segment is needed for the comparison. Below is a revised version that includes both groups for comparison:\n\nSELECT e.EmployeeID, e.FirstName, e.LastName, 'Recent' AS Tenure, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as SaleAmount\nFROM employees e\nJOIN orders o ON e.EmployeeID = o.EmployeeID\nJOIN [Order Details] od ON o.OrderID = od.OrderID\nWHERE e.HireDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\nGROUP BY e.EmployeeID\n\nUNION ALL\n\nSELECT e.EmployeeID, e.FirstName, e.LastName, 'Longer' AS Tenure, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as SaleAmount\nFROM employees e\nJOIN orders o ON e.EmployeeID = o.EmployeeID\nJOIN [Order Details] od ON o.OrderID = od.OrderID\nWHERE e.HireDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\nGROUP BY e.EmployeeID;",
            "The original query checks if the ShipRegion is different from the employee's Region, which is incorrect. The correct approach is to count distinct ShipRegions per employee using HAVING COUNT(DISTINCT o.ShipRegion) > 1.",
            "The query correctly calculates the average discount for each department title. Each employee's title is used to distinguish departments, and the average discount is computed accordingly. The query is correct and adheres to the business question requirements.",
            "The original query is missing a filter to restrict the results to the last 6 months. Adding a WHERE clause with DATEADD function to include only orders in the last 6 months.",
            "The original query is mostly correct, but there is a minor mistake in the placement of the closing parenthesis for the subquery calculating the average sales per order. It should include the '* 1.5' inside the calculation for clarity. The corrected query maintains the intent of identifying significant outliers in sales per order.",
            "The original query correctly finds the number of pending orders by employee. Added 'LIMIT 1' to get only the employee with the most pending orders.",
            "The SQL query correctly calculates the total sales grouped by city where employees work. It joins the necessary tables 'employees', 'orders', and '[Order Details]' and properly uses the SUM aggregation to calculate total sales. The GROUP BY clause groups the result by city, which aligns with the business question.",
            "The original query does not correctly filter the orders for the current year. The condition for checking the year should be part of the LEFT JOIN, rather than using OR in the WHERE clause. This ensures that only orders from the current year are considered in the join, and employees with NULL order records will be those with no sales this year.",
            "The query is correct. It orders the employees by HireDate in ascending order and selects the first record, which corresponds to the employee who was hired the earliest and has therefore worked the longest.",
            "The SQL query correctly joins the employees and orders tables based on the EmployeeID, counts distinct CustomerID values for each employee, and groups the results by EmployeeID. The query correctly answers the business question by calculating the number of unique customers served by each employee.",
            "The query is correct and follows the ANSI SQL standard.",
            "The SQL query is correct. It joins the 'employees' and 'orders' tables using the 'EmployeeID', groups the results by 'City', counts the 'OrderID' for each city, and orders the results in descending order by 'TotalOrders' to find the city with the highest number of orders. The 'LIMIT 1' clause correctly restricts the output to the city with the highest count.",
            "The query correctly joins the employees, orders, and [Order Details] tables. It filters for orders with discounts and groups the data by EmployeeID to count the number of discounted orders per employee. Finally, it orders the results by the count of discounted orders in descending order and limits the result set to the top entry, which answers the business question as required. The query is correct.",
            "The query calculates the average sales per employee per month correctly. It uses a `SUM` to calculate the total sales for each employee and divides by the count of distinct year-month combinations of OrderDate to compute the average per month. The JOINs and GROUP BY clauses are consistent with the schema and business question.",
            "The SQL query is correct. It successfully joins the employees and orders tables on EmployeeID, filters orders where the ShippedDate is on or before the RequiredDate, and groups the results by EmployeeID to count the on-time orders.",
            "The original query incorrectly calculates the max order value for each employee rather than finding the overall most expensive single order across all employees. By grouping by orders.OrderID and employees.EmployeeID, the query finds the single most expensive order handled by any employee.",
            "The original query incorrectly uses a self-join to find non-managers, but the logic is flawed. It should select employees whose ID is not found in the 'ReportsTo' column of any employee. This revised query correctly finds all employees who have never managed anyone.",
            "The provided SQL query is correct. It joins the 'employees', 'orders', and '[Order Details]' tables correctly, calculates the average discount for each employee's orders, and sorts the results to find the employee with the highest average discount. Finally, it limits the result to the top entry, which answers the business question.",
            "The SQL query correctly retrieves the count of employees for each city by grouping employees based on their City. No changes are needed.",
            "The original query is mostly correct, but the subtraction operation is not standard SQL. Instead, use the DATE_SUB function to subtract the interval.",
            "The SQL query correctly calculates the total freight cost for orders processed by each employee by joining the employees and orders tables on the EmployeeID and summing the Freight for each employee. The query accurately groups the data by EmployeeID, matching the business question.",
            "The original query uses 'CURDATE() - INTERVAL 1 MONTH' which may include part of the current day from one month ago. The corrected query ensures the interval starts exactly one month ago and ends before the current date.",
            "The original query has a few issues: 1) It causes an error due to the use of window functions inside the GROUP BY aggregate function. The SUM() needs to be aggregated before the window function is applied. 2) NULL division needs to be handled, so using NULLIF is introduced to avoid division by zero errors.",
            "The SQL query correctly answers the business question by selecting the `EmployeeID` and summing the `Quantity` of units each employee processed, then ordering the result by total units in descending order.",
            "The original query was missing E.Salary in the GROUP BY clause. It is necessary to include all non-aggregated columns in the GROUP BY clause in SQL.",
            "The SQL query correctly calculates the total sales per month and orders the results to retrieve the month with the highest total sales. It joins the necessary tables and uses GROUP BY, ORDER BY, and LIMIT clauses appropriately. The order of joins is correct, matching the schema relationships.",
            "The SQL query correctly calculates the average time gap between order placement and shipping for each employee. It uses DATEDIFF to find the difference between ShippedDate and OrderDate and applies AVG to compute the average for each EmployeeID. The JOIN and GROUP BY clauses are properly used.",
            "The SQL query is correct. It correctly uses a join between the employees, orders, and [Order Details] tables to count distinct products sold by each employee. The use of GROUP BY to aggregate the results per EmployeeID is also accurate.",
            "The SQL query is correct. It counts the number of delayed orders for each employee by comparing the 'RequiredDate' to the 'ShippedDate'. It then groups the result by 'EmployeeID', orders by the number of delayed orders in descending order, and limits the result to the employee with the most delays.",
            "The query is correct. It calculates the average sales per order for each employee by joining the 'employees', 'orders', and 'Order Details' tables and using the AVG function on the calculated sales per order.",
            "The SQL query correctly calculates and ranks employees based on the total discount value. It joins the necessary tables and performs the aggregation and ordering as required by the business question.",
            "The original query uses 'CURDATE() - INTERVAL 3 MONTH' to filter the last three months, which may not align with the last quarter. The corrected query uses 'DATE_TRUNC' to ensure proper alignment with the start of the last quarter. Additionally, an interval of '3 month' is specified correctly.",
            "The original query didn't include 'Age' in the GROUP BY clause, which is necessary because 'Age' is a derived column in the SELECT list. Correct query adds 'Age' to the GROUP BY clause.",
            "The SQL query is correct. It accurately calculates the total sales for each employee using the specified formula, orders them by sales in descending order, and selects the top-performing employee with the highest total sales.",
            "The SQL query is correct. It accurately counts the number of orders handled by each employee by joining the employees and orders tables on EmployeeID and using COUNT with GROUP BY.",
            "The query incorrectly calculates the previous month using 'MONTH(CURDATE()) - 1'. This can lead to errors during January. Instead, 'CURDATE() - INTERVAL 1 MONTH' should be used to get the correct last month and year.",
            "The SQL query correctly calculates the total sales for each employee by joining the employees, orders, and [Order Details] tables. It then groups the results by EmployeeID, orders them by TotalSales in descending order, and limits the results to the top three employees. The query aligns with the business question and the schema provided.",
            "The query correctly calculates the total sales generated by employees in each city by joining the employees, orders, and [Order Details] tables. It groups the results by city, which aligns with the business question.",
            "The SQL query correctly identifies the employee who processed the most diverse range of products by counting distinct products per employee and ordering by that count in descending order. The LIMIT 1 ensures only the top result is returned. The query is correct with respect to the business question.",
            "The SQL query is correct and accurately calculates the average salary for employees grouped by region. No changes needed.",
            "The SQL query attempts to calculate the total sales for orders shipped last quarter. However, it incorrectly handles the logic for determining the last quarter. Specifically, when the current month is in the first quarter, subtracting one would result in a negative or zero value, which isn't aligned with valid quarter numbers (1-4). The correct logic should account for wrapping around the year boundary as follows: \n\nSELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales \nFROM orders \nJOIN [Order Details] ON orders.OrderID = [Order Details].OrderID \nWHERE (QUARTER(orders.ShippedDate) = IF(QUARTER(CURDATE()) = 1, 4, QUARTER(CURDATE()) - 1) \nAND YEAR(orders.ShippedDate) = IF(QUARTER(CURDATE()) = 1, YEAR(CURDATE()) - 1, YEAR(CURDATE())));",
            "The original query mistakenly joins the 'employees' table when there is no need to include employee details other than the ID. The EmployeeID from the 'orders' table can be used directly for counting orders shipped to 'USA'. The revised query simplifies by using only the 'orders' table.",
            "The query is correct. It calculates the average number of days each employee takes to ship an order, using the DATEDIFF function to find the difference between the 'ShippedDate' and 'OrderDate'. The query also correctly ensures 'ShippedDate' is not null before calculating the average.",
            "The query correctly calculates the total sales for employees hired last year. The join operations and WHERE clause are accurate, using the correct logic to filter employees based on the hire date.",
            "The query correctly uses a LEFT JOIN to determine which employees have never made a sale by checking for NULL OrderID values in the joined orders table. Hence, the query is accurate for the given question.",
            "The SQL query is correct. It calculates the average discount per employee by joining the employees, orders, and [Order Details] tables and grouping by EmployeeID.",
            "The SQL query correctly joins the employees and orders tables, checks for late shipments using DATEDIFF to compare ShippedDate and RequiredDate, and orders the results to find the employee with the highest number of late shipments. The usage of COUNT(*) and GROUP BY is appropriate for the task at hand. The query is correct and requires no changes.",
            "The query correctly calculates the total sales amount generated by each employee for the current year by using the join across the 'employees', 'orders', and '[Order Details]' tables. The aggregation with SUM and grouping by EmployeeID is correctly applied to meet the business question requirements.",
            "The original query used `DATEADD`, which is not a standard function in many SQL implementations. `DATE_SUB` with `INTERVAL 3 MONTH` is used to calculate the last quarter based on the current date, assuming a 3-month range for the quarter.",
            "The query correctly checks for employees with a birthday this month by comparing the month part of BirthDate with the current month. However, it also lists employees who are born in the current year, which is unlikely for regular employee data. To ensure we don't match the current year, we can add a condition to exclude current year birthdays. So, I added a condition to ensure we select employees born in months of non-current years.",
            "The SQL query correctly calculates the average discount applied by each employee across all orders. It correctly joins 'employees' with 'orders' and '[Order Details]', and groups the results by 'EmployeeID' to compute the average discount.",
            "The SQL query correctly calculates the highest and lowest salary for employees in each city by selecting City, applying MAX and MIN on the Salary column, and grouping the results by City.",
            "The original query lacks the extraction of the year from OrderDate, which could lead to incorrect monthly averaging across different years. Corrected by adding EXTRACT(YEAR FROM OrderDate).",
            "Corrected the query by moving the condition on OrderDate to the JOIN clause. This ensures that employees with no orders in the past six months are correctly identified.",
            "The SQL query correctly calculates the total freight costs per employee for the current year by joining the 'employees' and 'orders' tables, filtering by the current year, and grouping by 'EmployeeID'. No changes are necessary.",
            "The query correctly calculates the total sales for each employee filtered by the given region, and orders them to find the top performer. Ensure to replace 'YourRegion' with the actual region you are interested in.",
            "The original query incorrectly calculated the percentage. The 'LateOrders' should be the count of late orders, and the percentage should be calculated as the count of late orders divided by the total count of orders, all multiplied by 100.",
            "The original query attempts to compare the total value of orders after applying discounts to the total value without discounts, which doesn't pinpoint the highest total order value without discounts. Instead, it compares sums to check if the discounts were applied. The correct approach is to identify employees where the total order value's discounts amount to zero, ensuring no discounts were applied.",
            "The query correctly calculates the total sales for each employee for the last year and returns the top 5 employees by sales. It properly joins the necessary tables and applies the correct filter for the order date. The use of YEAR function and grouping is appropriate. No corrections needed.",
            "The SQL query is correct. It calculates the total sales for each employee by month, grouping by employee ID and the month of the order date. The usage of SUM and the multiplication formula handles the sales calculation as described in the business metrics.",
            "The original query uses TIMESTAMPDIFF, which is not ANSI SQL. The corrected query calculates the difference between the current year and the hire year to determine tenure.",
            "The original query did not consider the year for monthly sales comparison, which would group sales from different years in the same month together. Adding YEAR(o.OrderDate) ensures monthly sales are calculated separately for each year.",
            "The original query incorrectly computes the average freight per OrderID instead of per EmployeeID. The revised query calculates the average freight per employee to determine which employees manage orders with the highest average freight charges.",
            "The SQL query is correct. It joins the 'employees' and 'orders' tables on 'EmployeeID', counts distinct 'CustomerID' for each employee, and orders the results by the count of unique customers in descending order.",
            "The query correctly calculates the total quantity of products sold by each employee by joining the 'employees', 'orders', and '[Order Details]' tables and grouping by e.EmployeeID. No corrections needed.",
            "The original query calculates the average shipping time for each employee but does not find those with the shortest shipping time. I have corrected it by adding ORDER BY to sort by AvgShippingTime in ascending order and LIMIT 1 to get the employee with the shortest shipping time.",
            "The query logic is correct, but the condition on the `HireDate` should directly use dates three years back, not based on just the year. Also, aliasing the result as 'TotalSales' improves clarity.",
            "The original query incorrectly uses DATE_SUB(CURDATE(), INTERVAL 3 MONTH) which does not accurately reflect the 'last quarter'. Instead, use DATEADD to subtract a quarter and ensure the date range is correct.",
            "The original query attempted to count distinct EmployeeIDs while using a HAVING clause. To correctly count, there's a need to use a subquery that first identifies employees who meet the sales requirement, then count the results.",
            "The initial query does not include the employee granularity in the GROUP BY clause. To get average sales per employee per month, it should also group by employees.EmployeeID.",
            "The original query is almost correct but needs to include employees in the GROUP BY to correctly associate them with their orders.",
            "The SQL query correctly calculates the total freight cost incurred by each employee's orders. The JOIN between employees and orders on EmployeeID and the grouping by EmployeeID are appropriate, and the SUM aggregation is correctly applied to the Freight column.",
            "The SQL query is correct. It calculates the total sales for employees grouped by their working region using the correct formula and joins. The grouping and calculations align with the business metrics definition for Employee Sales.",
            "The original query incorrectly calculates the sales increase. The LAG function should be partitioned by EmployeeID and ordered by month to properly compare sales month-over-month. Additionally, it's necessary to divide the current month's sales by the previous month's sales directly to determine the percentage increase.",
            "The SQL query correctly identifies the employee with the most discounted orders. It joins the employees, orders, and [Order Details] tables, uses a WHERE clause to filter orders with a discount, and groups by EmployeeID to count the discounted orders. The ORDER BY and LIMIT clauses ensure the result is the top employee with the most discounted orders.",
            "The original query calculates average sales per order rather than total sales for each employee, which is inconsistent with the business metric definition of 'Employee Sales'. The corrected query calculates the total sales and average discount per employee.",
            "The original query fails to accurately find employees with no sales in the last month. The WHERE clause incorrectly checks for the absence of orders prior to the last month, rather than correctly filtering for the month itself. By using a LEFT JOIN and adjusting the date logic, the updated query ensures employees without sales in the relevant timeframe are identified by checking if no orders exist within the previous month.",
            "The SQL query correctly calculates the total units sold by each employee. The joins between employees, orders, and the Order Details tables are correct, and the aggregation of Quantity is correctly grouped by EmployeeID. The query aligns with the business question.",
            "The query is correct. It joins the employees and orders tables, checks if the ShippedDate is greater than the RequiredDate, and groups the results by EmployeeID to count the LateOrders.",
            "The SQL query is correct. It selects employees who have made sales in more than three distinct countries by counting unique 'ShipCountry' entries per employee in the 'orders' table.",
            "The original query incorrectly attempts to use AVG(SUM(...)) directly, which is not valid. Instead, a subquery is used to calculate total sales per employee, and then the average of these totals is taken.",
            "The original query is almost correct. The GROUP BY clause must include e.Salary to match the SELECT clause.",
            "The SQL query correctly answers the business question by joining the employees and orders tables on EmployeeID and grouping the results by EmployeeID and ShipVia to count the number of orders per employee for each shipping method.",
            "The original query incorrectly uses PERCENTILE_CONT, which needs correction for the context of subquery calculation. The use of PERCENTILE_CONT should be directly ordered by the aggregated TotalSales. The division of subquery into derived tables helps clarify and calculate the required results properly.",
            "The original query incorrectly used AVG(SUM()), which is not valid. Instead, calculate the total sales for each birth month and divide by the count of unique orders to find the average sales per order.",
            "The query correctly calculates the average order size per employee in terms of revenue. However, the original GROUP BY clause should include e.FirstName and e.LastName to match the SELECT statement.",
            "Revised the query to separate the extraction of year and month for clarity and correctness as grouping should be handled separately for year and month.",
            "The original query is mostly correct. Using CURRENT_DATE instead of CURDATE() maintains compatibility across different SQL systems that support ANSI SQL.",
            "The original query is almost correct, but it misses grouping by `e.FirstName` and `e.LastName`. This correction ensures that the query fully aggregates by all selected non-aggregated columns to comply with SQL standards.",
            "The query correctly identifies employees managing orders based on the required delivery date. It counts the number of orders per employee and orders the results by the count in descending order. The logic aligns with the business question, ensuring non-null required dates are considered.",
            "The original query is mostly correct but needs to include e.FirstName and e.LastName in the GROUP BY clause for ANSI SQL compliance since they are selected but not aggregated. This maintains consistency with the SELECT clause.",
            "The original query attempts to use AVG(SUM(...)) which is incorrect syntax. Aggregate operations like SUM must be performed in a subquery before applying window functions like AVG. Additionally, the original query doesn't consider the monthly granularity which should be accounted for by grouping by YEAR(o.OrderDate) and MONTH(o.OrderDate) to obtain monthly sales before calculating the average.",
            "The original query uses incorrect logic for determining the quarters. Also, it doesn't handle division by zero, which can be solved by using NULLIF. The revised query correctly calculates the sales growth by quarter and considers yearly adjustments if needed.",
            "The original query calculated 'BirthYear' instead of 'Age' which is not useful for the age distribution analysis. The corrected query computes the age of employees using the current date and groups by necessary fields for accurate aggregation before ordering by age.",
            "The SQL query was mostly correct. The only issue was with the GROUP BY clause, which should include all non-aggregated columns (e.FirstName and e.LastName) to comply with the SQL standard.",
            "The SQL query correctly calculates the total sales for each employee for the past quarter using the appropriate joins and filters. Additionally, it checks which employees have exceeded the sales target of 10000, using the HAVING clause. The query alignment with business metrics and granularity is accurate. The use of CURDATE() and QUARTER() functions appropriately identifies the last quarter.",
            "The original query was missing grouping on FirstName and LastName, which are also selected in the query. The subquery to calculate the total sales was using a join unnecessarily. This was simplified to just query [Order Details] directly.",
            "The original query groups by 'e.EmployeeID' and 'od.Discount' without including 'e.FirstName' and 'e.LastName', which causes syntax issues. These fields need to be part of the GROUP BY clause, as they are selected. The ORDER BY clause should first sort by the 'od.Discount' in descending order to show the highest discounts, then by 'TotalDiscountSales' to see the impact on sales.",
            "The original query contains an error in using the AVG function with SUM as a window function. Instead, calculate the total sales for each Title and then take the average directly without needing a window function.",
            "The original query uses GETDATE() and DATEADD, which are not ANSI SQL functions. Replaced GETDATE() with CURRENT_DATE and DATEADD with a correct ANSI equivalent.",
            "The SQL query is correct. It uses a LEFT JOIN to identify employees who are not associated with any orders, as indicated by checking for NULL in the OrderID field of the orders table."
        ],
        "difficulty": [
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "advanced",
            "easy",
            "advanced",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "advanced",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "easy",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "easy",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "advanced",
            "medium",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "easy",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "advanced",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "easy",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "advanced",
            "medium",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy"
        ]
    },
    "Supplier Analysis": {
        "questions": [
            "Which suppliers have delivered products with an average lead time of greater than 10 days?",
            "What is the total sales generated by each supplier?",
            "Which products have been ordered but are currently discontinued?",
            "What are the top 5 cities in terms of total order revenue?",
            "How many orders were placed but not yet shipped?",
            "What is the average discount applied to orders by each supplier?",
            "Which supplier provides the most number of different products?",
            "What is the total revenue for each month in 2023?",
            "Identify orders that were delivered late compared to the required date.",
            "What products have stock levels below their reorder level?",
            "Which suppliers have not been used in any orders in the past year?",
            "Calculate the average unit price of products supplied by each supplier.",
            "Determine the difference in shipment duration for each order (RequiredDate vs ShippedDate).",
            "List all orders with a freight cost above the average freight cost.",
            "Which supplier had the highest average product price in 2023?",
            "Identify the top 3 products by sales revenue.",
            "What is the trend of monthly total sales over the last two years?",
            "What is the correlation between unit price and quantity ordered for each product?",
            "Identify suppliers whose lead time is reducing over the last six months.",
            "Which orders have the highest discount applied?",
            "What is the average supplier lead time for each supplier?",
            "How much total sales revenue was generated in the last quarter?",
            "Which products are provided by more than one supplier?",
            "What is the total number of products shipped in the last month?",
            "Which suppliers have the highest number of discontinued products?",
            "What is the average discount applied to products in each order?",
            "Which orders have been delayed beyond the required date?",
            "What is the total freight cost for each shipping method?",
            "List the top 5 suppliers based on the value of products supplied.",
            "Which cities do the top three suppliers operate from?",
            "How many units of each product are currently in stock?",
            "Identify orders with more than five products that received a discount.",
            "How many products have a reorder level higher than current stock?",
            "Which supplier has the longest average lead time?",
            "What is the most sold product in terms of quantity?",
            "What percentage of products are discontinued?",
            "Which supplier has the most diverse product category offering?",
            "How does the average lead time compare in the current year vs. last year?",
            "What is the total revenue attributed to each supplier?",
            "Which orders have incurred the highest freight cost?",
            "What is the average lead time for each supplier over the past month?",
            "Which products are currently discontinued?",
            "Find the total sales for each product.",
            "List suppliers located in the same city.",
            "What is the total freight cost for shipped orders?",
            "Determine the supplier with the highest number of discontinued products.",
            "Identify orders that were shipped after the required date.",
            "Calculate the average unit price of all products per supplier.",
            "Which supplier has the lowest average lead time?",
            "Find out which products are below their reorder level.",
            "Which supplier provides the most products?",
            "Get the monthly sales trend for the past year.",
            "Find products that have no units on order.",
            "What is the total sales by country?",
            "Determine the percentage of products that are discontinued.",
            "List all orders by suppliers from a specific region.",
            "Identify the product with the maximum quantity ordered.",
            "Calculate the average discount rate for each product.",
            "What is the most ordered product per supplier?",
            "List the top 5 suppliers by total sales.",
            "What is the average time suppliers take to deliver products?",
            "Which supplier has the highest number of different products supplied?",
            "Calculate the total units on order for each supplier.",
            "Find the supplier with the largest revenue from sales.",
            "List all discontinued products along with their supplier names.",
            "What are the top 5 products with the highest sales?",
            "Identify suppliers with an average delivery lead time greater than 30 days.",
            "Calculate the total revenue for each supplier.",
            "Which city has the highest number of suppliers?",
            "What is the total freight cost for shipped orders last month?",
            "Find suppliers who supply more than 5 different categories.",
            "Which product has the highest reorder level?",
            "Find the order with the longest delay in shipping.",
            "Calculate the average discount applied across all orders.",
            "List products with zero units in stock along with the supplier name.",
            "Find out which regions have the most suppliers.",
            "Identify the suppliers with products having a unit price above the average unit price.",
            "Which suppliers have never supplied discontinued products?",
            "Determine the month with the highest number of orders shipped.",
            "Find the product with the highest difference between units in stock and units on order.",
            "What is the average lead time for each supplier?",
            "How much total revenue was generated last month?",
            "Which suppliers have the highest average delivery delay?",
            "Which product has the highest stock units and what is its supplier?",
            "What is the total number of products supplied by each supplier?",
            "Identify products that are low in stock and need reordering.",
            "Find the top three products with the highest sales last month.",
            "Calculate the total freight cost for shipments to each country.",
            "Determine the most frequent shipping method used.",
            "How many orders were shipped late last quarter?",
            "Which suppliers are located in 'USA' and how many products do they supply?",
            "What is the average discount given per order?",
            "Which products have been discontinued by their suppliers?",
            "Find the average unit price of products in each category.",
            "Calculate the total sales for each supplier.",
            "Which orders were never shipped?",
            "What is the most common region suppliers are from?",
            "Identify the countries with the highest number of orders.",
            "Find products with zero units on order but high demand.",
            "What are the top five countries by total sales revenue?",
            "What is the average lead time for each supplier to deliver products?",
            "How many discontinued products does each supplier have?",
            "What is the total sales revenue from each supplier?",
            "Which suppliers supply products that have never been ordered?",
            "What is the total value of products on backorder for each supplier?",
            "Identify the suppliers with the highest average unit price for their products.",
            "What is the total quantity of products ordered for each supplier?",
            "Which supplier has the highest number of backorders?",
            "Calculate the total freight costs for each supplier's products.",
            "What are the top 5 products by sales revenue, and which suppliers provide them?",
            "Determine the average discount offered on the products from each supplier.",
            "Which suppliers have shipped their orders past the required date?",
            "Identify the countries with the most suppliers.",
            "What is the average reorder level for products from each supplier?",
            "Which suppliers have not shipped any products in the last month?",
            "Determine the supplier with the longest average lead time for a specific product.",
            "Find the top 3 cities with the most suppliers.",
            "What is the overall percentage of discontinued products for each supplier?",
            "Identify any suppliers that have provided products with a zero discount.",
            "Which supplier has delivered the highest total number of product units?",
            "List the top 5 suppliers based on the total sales value of their products.",
            "Identify the countries with the most unique suppliers.",
            "Find suppliers whose products have not been discontinued.",
            "Calculate the total sales per month.",
            "Which products have a reorder level that has been reached?",
            "How many orders were shipped late by each supplier?",
            "List the most frequently ordered products.",
            "Determine the revenue generated by each product category.",
            "Find the supplier with the lowest average product price.",
            "How many unique products does each supplier offer?",
            "Get the top 3 cities with the highest number of suppliers.",
            "Find suppliers who have not shipped any orders in the past year.",
            "Which suppliers have products with zero stock available?",
            "List the suppliers whose average order lead time exceeds 20 days.",
            "Identify the most profitable supplier based on total revenue.",
            "How many products are supplied by more than one supplier?",
            "Calculate the average freight cost per country.",
            "What is the average lead time per supplier for delivering products?",
            "How much total sales revenue was generated last month?",
            "Which supplier has the highest number of discontinued products?",
            "List all orders where the freight cost exceeded $100.",
            "What is the total number of products on order for each supplier?",
            "Identify the top 5 suppliers by average lead time.",
            "How many products require reordering per supplier?",
            "Which product has the highest total revenue from sales?",
            "What is the average discount provided across all orders for a particular product?",
            "Find suppliers who have delivered orders with a lead time over a week.",
            "What are the total units sold for each product category?",
            "Discover the most frequently reordered product.",
            "Which orders had a shipped date later than the required date?",
            "Find the supplier with the most products currently in stock.",
            "Which supplier has the most units in stock across all their products?",
            "How many products have never been ordered?",
            "Identify the least frequently ordered product.",
            "What is the total freight cost per order?",
            "Which products have the highest unit price and which supplier provides them?",
            "What is the total sales revenue for each month?",
            "How many products are there with units in stock below reorder level?",
            "List all suppliers from a specific region along with their contact names.",
            "Which product has the highest total sales value?",
            "Determine the total number of orders for each product.",
            "Which cities have the most suppliers?",
            "What is the total quantity of products ordered per supplier?",
            "Find the orders that were shipped later than the required date.",
            "What is the total revenue for products that are not discontinued?",
            "List all orders with a freight cost above a certain threshold.",
            "Which supplier provides the maximum number of products?",
            "Find the total sales by supplier in a specific month.",
            "What is the average unit price of all products?",
            "Identify products with zero units on order.",
            "What is the total quantity of products sold per category?",
            "Find the percentage of orders shipped on time.",
            "What is the average lead time for suppliers to deliver products?",
            "Which supplier has the highest total sales?",
            "What is the total revenue generated from orders last month?",
            "How many units of each product are on order?",
            "What is the most frequently ordered product?",
            "Which supplier has the largest number of discontinued products?",
            "What is the average unit price of products supplied by each supplier?",
            "Which suppliers have shipped orders on time this year?",
            "What is the reorder level for each product that is currently out of stock?",
            "Which city has the most suppliers?",
            "How many orders were placed by each customer during the last quarter?",
            "What is the total freight cost of all shipped orders?",
            "What is the average discount applied to products in order details?",
            "Which supplier has the best delivery performance in terms of lead time?",
            "What are the top 5 products generating the highest revenue?",
            "What is the total number of orders shipped last month?",
            "Which suppliers have not had any orders this year?",
            "How many products have a unit price greater than the average unit price?",
            "What is the total quantity of all products shipped to each country?",
            "Which products have received the highest total discount amounts?",
            "What is the average lead time for each supplier over the past year?",
            "Which supplier has the highest total sales value?",
            "How many products from each supplier are currently discontinued?",
            "What are the top three products by sales revenue last month?",
            "Identify suppliers with average lead times above the overall average lead time.",
            "How many orders have been shipped late relative to the required date?",
            "What is the total sales revenue for each product category this year?",
            "Find the average discount given per order for each supplier.",
            "List the suppliers with products that have stock levels below their reorder level.",
            "What is the percentage of orders with products from multiple suppliers?",
            "Calculate the total units ordered for each product this year.",
            "Which suppliers have received the most customer orders?",
            "Find the order with the highest freight cost.",
            "List all products with zero units in stock and not discontinued.",
            "Calculate the total number of orders for each shipping country.",
            "Which supplier has the most diverse product range (based on product categories)?",
            "What is the correlation between the price of products and order quantities?",
            "Find the top three suppliers with the earliest average delivery times.",
            "What is the average lead time for each supplier in delivering products?",
            "How much total revenue has been generated from orders in the past month?",
            "Which supplier has the most products that are currently out of stock?",
            "What is the total quantity ordered for each product in the last quarter?",
            "Which products have been discontinued and who were their suppliers?",
            "How many orders have been shipped late compared to the required date?",
            "What is the total freight cost incurred for each shipping country?",
            "For each supplier, what are the top three products by sales revenue?",
            "Which orders had the highest discount applied, and what was the discount percentage?",
            "How many products have not reached their reorder level?",
            "What is the average unit price of products from each supplier?",
            "What are the total units ordered for products with stock less than 10?",
            "Who are the top five suppliers based on the total units of products supplied?",
            "Which order had the highest freight cost and what was the destination country?",
            "What is the longest lead time for any supplier, and for which product was it?",
            "How many unique products are ordered by each customer?",
            "What is the average discount given on products across all orders?",
            "Which supplier has the highest average product price?",
            "How many different shipping methods have been used to ship orders?",
            "Which supplier has the highest total sales revenue from their products?",
            "What is the average supplier lead time for each supplier over the last month?",
            "Which supplier has delivered the highest revenue during the past year?",
            "How many active suppliers are currently providing products?",
            "Which products have not been ordered in the past six months?",
            "What is the total sales value for each product category?",
            "Identify suppliers with an average lead time greater than two weeks.",
            "List all suppliers along with the total number of products they supply.",
            "Find out which supplier provides the highest number of discontinued products.",
            "What is the total number of units overdue for shipment?",
            "List the top 5 products by sales revenue in the last quarter.",
            "How many orders were shipped after the required date?",
            "Determine the country with the highest number of suppliers and their average lead time.",
            "Which supplier has the smallest average order discount applied to their orders?",
            "Identify orders with a shipping delay and calculate the average delay days.",
            "What is the total revenue contribution from each supplier?",
            "Determine the reorder level statuses for all products to identify which need immediate attention.",
            "How many orders have been placed but not yet shipped?",
            "Which city has the highest number of shipments and total shipment volume?",
            "Identify the top 3 suppliers by overall product quality and delivery speed.",
            "Find the average freight cost per shipping method over the last six months.",
            "What is the average lead time for each supplier for the delivery of products?",
            "Which supplier has provided the highest number of products currently in stock?",
            "What is the total sales revenue per month?",
            "How many products are discontinued from each supplier?",
            "What are the top 5 countries in terms of supplier presence?",
            "Which suppliers have the fastest average lead time?",
            "What are the top-selling products based on total sales quantity?",
            "How many orders have been fulfilled after the required date?",
            "What is the average order size in terms of quantity?",
            "Identify suppliers whose products are consistently reordered (reorder level greater than 50).",
            "List the suppliers and the total orders they are associated with.",
            "Find the products with the highest discount offered and which suppliers provide them.",
            "What is the average freight cost per supplier for orders they fulfill?",
            "Which product categories result in the highest sales revenue?",
            "Determine the variance in order fulfillment times across different suppliers.",
            "Find the top 3 cities for supplier location by the number of suppliers.",
            "How many suppliers have their contact details missing?",
            "Identify the trend in total sales over the last four quarters.",
            "What is the average unit price of products by category?",
            "What is the impact of different shipping methods on lead time across orders?",
            "Which supplier provides the highest total sales value?",
            "List all products supplied by suppliers located in Germany.",
            "How many products are discontinued?",
            "What is the total units on order for each supplier?",
            "List the top 5 products by total sales revenue.",
            "What is the average reorder level for products by each supplier?",
            "Identify the products with stock levels below their reorder level.",
            "What is the total sales for each month in 2022?",
            "Which suppliers have never had a product ordered?",
            "Find the total freight cost for orders shipped in the United States.",
            "Determine the total discount applied for each order.",
            "What is the total revenue from orders with a discount greater than 10%?",
            "How many different customers placed orders in January 2022?",
            "What percentage of products are provided by each supplier?",
            "List the products that have never been ordered.",
            "What is the total quantity ordered for products with discontinued status?",
            "What is the total sales revenue for the current month?",
            "Which products have sold the most this year?",
            "How many suppliers are located in each country?",
            "What is the total quantity of products in stock?",
            "Which supplier has the shortest delivery time?",
            "Which products need to be reordered?",
            "What is the total freight cost for each shipping country?",
            "How many orders have been placed by each customer?",
            "Which supplier offers the highest priced product?",
            "What is the average unit price of products per supplier?",
            "What is the total number of discontinued products?",
            "Which orders have been shipped late?",
            "How many units have been ordered by product category?",
            "What is the total sales revenue by country?",
            "Which product has the highest total discount applied?",
            "Which region has the fastest average supplier lead time?",
            "What is the average lead time for each supplier's deliveries?",
            "How much total revenue has each product generated?",
            "Which suppliers have products that are currently on order?",
            "What are the top 5 cities where suppliers are located?",
            "What products have a reorder level greater than their current stock?",
            "Which supplier provides the most discontinued products?",
            "How many unique products does each supplier provide?",
            "What is the total revenue generated by each supplier?",
            "Find suppliers with the highest unit price products.",
            "Determine the average discount applied per order.",
            "Which orders were shipped late, and by how many days?",
            "Identify the supplier with the longest average delivery time.",
            "Calculate total sales per month.",
            "Which suppliers have the most products on order?",
            "What is the total freight cost per shipping method?",
            "Find the most frequently ordered product.",
            "List suppliers who have not had any products ordered in the last year.",
            "Determine the top 3 countries by total supplier revenue.",
            "Which suppliers are based in a specific region or country?",
            "Identify products with the highest average discount.",
            "Which products are currently out of stock?",
            "Which suppliers have never been associated with a discontinued product?",
            "How many products have more units on order than in stock?",
            "What is the total freight cost for all shipped orders per country?",
            "Which supplier has the most delayed shipments?",
            "What is the average number of days between order date and required date?",
            "Which orders had the highest discounts applied?",
            "How many suppliers are based in each country?",
            "What is the total order quantity for each product?",
            "Which city has the highest number of supplier contacts?",
            "What is the average product price for each category?",
            "Which supplier's products generate the most revenue?",
            "How many orders have been shipped late?",
            "What is the total quantity of products ordered from each supplier?",
            "What are the top 5 most ordered products?",
            "Which countries have suppliers who also have fax numbers listed?",
            "What is the most common ship region among all orders?",
            "Which products have the highest total sales revenue?",
            "How many suppliers are there in each country?",
            "Which supplier has the most products discontinued?",
            "Calculate the total freight charges for all shipped orders.",
            "What are the top 5 cities with the most supplier companies?",
            "Which product has the highest units in stock but is on order?",
            "Name suppliers who have never been involved in any orders.",
            "Identify products with the highest discount applied in the order details.",
            "Determine the average discount given per supplier.",
            "Which suppliers have supplied products that are below the reorder level?",
            "What is the most common shipping method used for orders?",
            "Calculate the average order value per customer.",
            "Find suppliers whose products have received the highest number of order quantities.",
            "List orders shipped after the required date.",
            "Determine the total sales revenue by each category of products.",
            "Which supplier's products have the lowest average rating based on discounts given?",
            "What is the monthly trend of total sales over the past year?",
            "Which regions have suppliers with the shortest lead time?",
            "What is the average lead time per supplier in months?",
            "Which supplier provides the highest number of unique products?",
            "What is the product with the highest unit price for each supplier?",
            "Which products have stock levels below their reorder level?",
            "What is the total sales revenue for each supplier?",
            "Which suppliers have no discontinued products?",
            "How many orders were placed each month?",
            "What is the average discount applied to orders?",
            "How much revenue did each region generate?",
            "Which supplier has the fastest average delivery time?",
            "How many orders include products from multiple suppliers?",
            "Which customers placed orders for products from the most suppliers?",
            "What are the top 5 products by sales revenue?",
            "Which suppliers are located in the same city?",
            "What is the proportion of discontinued products for each supplier?",
            "What is the average freight cost per order?",
            "Which shipping method is used most frequently?",
            "What are the top 5 suppliers by total sales revenue?",
            "Which suppliers have the longest average lead time?",
            "Which supplier has the most products out of stock?",
            "What are the top 5 products by total sales revenue?",
            "How many orders include a discount and what is the average discount rate?",
            "Which country has the most suppliers?",
            "What is the total freight cost for shipped orders in the last year?",
            "Find the supplier with the highest average unit price for their products.",
            "Identify the orders that were shipped after the required date.",
            "Which product has the highest reorder level and how many units are currently on order?",
            "What is the total quantity of orders placed for each product category last year?",
            "Determine the supplier with the fastest average shipping time.",
            "How many orders were placed by each customer in the last quarter?",
            "What is the average discount offered on products that have been discontinued?",
            "Find all suppliers located in a specified city and list their contact details.",
            "Determine the month with the highest total sales revenue.",
            "What is the percentage of orders shipped on time versus late?",
            "List the top 3 suppliers by total number of units delivered.",
            "Which supplier delivers the most frequently ordered product?",
            "Calculate the total sales revenue per supplier for the last fiscal year.",
            "Identify which products have a reorder level higher than their current units in stock.",
            "What is the average lead time for each supplier in delivering their products?",
            "Which supplier has the highest total revenue from product sales?",
            "How many different products are supplied by each supplier?",
            "What is the total number of orders shipped by month?",
            "Which supplier's products are most frequently ordered?",
            "Calculate the total discount given to each customer by order.",
            "Which city has the most suppliers located in it?",
            "What is the average unit price for products from each supplier?",
            "How many orders were made from each country?",
            "Which products have reached their reorder level and need restocking?",
            "What is the average shipping time from order to shipment for each supplier?",
            "Which supplier has the greatest number of discontinued products?",
            "What is the most common quantity per unit for products?",
            "Which suppliers have orders that were delivered late?",
            "Find the top 3 suppliers with the fastest average delivery times.",
            "How much freight cost is incurred per supplier?",
            "Which product has the highest number of units on order?",
            "Calculate the total sales per category of products.",
            "What is the percentage of orders that include discounted products?",
            "Find the maximum single order value and the supplier involved.",
            "Which supplier has delivered the highest number of products?",
            "What is the average delivery time for each supplier?",
            "Which products have the highest number of units on order?",
            "What are the total sales for each supplier per month?",
            "Which suppliers are located in a specific region?",
            "What is the total number of orders for each product?",
            "Are there any suppliers with discontinued products only?",
            "Which supplier provides the most expensive products on average?",
            "How many products are out of stock for each supplier?",
            "What is the average discount given on orders for each supplier?",
            "Identify the suppliers with late shipments on orders.",
            "Which supplier has the most diverse product line?",
            "What is the average unit price of products supplied per country?",
            "How many orders are shipped within the same country as the supplier?",
            "What is the distribution of product categories for each supplier?",
            "Identify suppliers with orders that have not been shipped yet.",
            "Which suppliers have delivered products with high discounts?",
            "What is the correlation between supplier location and product price?",
            "Which products have the highest reorder levels?",
            "Find suppliers with a homepage listed in the suppliers table.",
            "Which supplier has the highest total sales revenue?",
            "How many products are currently discontinued?",
            "What is the most expensive product by unit price?",
            "How many units of each product are currently on order?",
            "Identify the supplier with the most products on reorder.",
            "Calculate the average discount provided for each product.",
            "Find the top three suppliers with the quickest average delivery times.",
            "How many orders have been shipped late (shipped date after required date)?",
            "Determine the total freight cost for each supplier.",
            "List all products with stock below their reorder level.",
            "What is the most popular product by quantity ordered?",
            "In which month did we have the highest total sales?",
            "How many products are supplied by each supplier?",
            "Identify suppliers who haven't supplied any products.",
            "Determine the total quantity ordered for each product category.",
            "Find the most frequently ordered product for each supplier.",
            "Calculate the revenue generated per region.",
            "Which suppliers have delivered discontinued products?",
            "List the top 5 suppliers by the number of products supplied.",
            "Which products have reached their reorder level?",
            "Identify the city with the highest number of orders shipped.",
            "Which supplier has the most diverse product range?",
            "What is the trend of total sales over each month?",
            "How many orders are shipped via each shipping method?",
            "Determine the total freight cost incurred for each supplier.",
            "What is the total quantity of products on order for each supplier?",
            "List the number of distinct countries suppliers are located in.",
            "Compute the average discount applied across all orders.",
            "Which suppliers have the highest unit price for their products?",
            "What percentage of products in stock are discontinued?",
            "How many units are on order but not yet shipped for each product?",
            "Find the month with the highest total sales.",
            "What is the average lead time for each supplier monthly?",
            "What is the total sales revenue for each product?",
            "What are the top five suppliers by total sales revenue?",
            "How many orders were placed by each customer monthly?",
            "Which products have the highest discount on average?",
            "What is the monthly order count for each country?",
            "Identify suppliers with average delivery times longer than 10 days.",
            "What is the total number of units ordered per product?",
            "Which supplier delivers the most variety of products?",
            "Find the supplier with the most frequent late deliveries.",
            "What is the reorder level for each product category?",
            "Determine the average freight cost per country.",
            "How many units are in stock for each supplier's products?",
            "Identify the average order quantity for each product.",
            "Which suppliers have not delivered any orders this month?",
            "What are the top three cities with the highest order shipment?",
            "Which orders have the highest total discount applied?",
            "Find the average unit price of all products supplied by each supplier.",
            "What is the total revenue per month for each product category?",
            "Find the total sales revenue for each supplier.",
            "Identify suppliers with an average lead time greater than 10 days.",
            "List the top 3 products in terms of units sold.",
            "What is the average order value per supplier?",
            "Find the product with the highest revenue from orders.",
            "Identify the top 5 suppliers based on total sales revenue.",
            "Which product categories require the most reordering?",
            "Calculate the total number of units on order for each supplier.",
            "Identify orders with the highest discount applied.",
            "What percentage of products from each supplier are currently discontinued?",
            "Find the average freight cost per order for each shipping method.",
            "Which suppliers have shipped products internationally?",
            "Determine the total quantity of each product sold across all orders.",
            "List the top 10 most expensive products available.",
            "Analyze the sales trend per month for each supplier.",
            "Find the supplier with the lowest total units in stock.",
            "Calculate the reorder frequency for each product.",
            "What is the total number of suppliers based in the USA?",
            "Which supplier has delivered the highest average lead time for orders?",
            "Find the product with the highest sales revenue.",
            "What is the most common postal code among suppliers?",
            "Determine the total sales generated for each product category.",
            "Find the average freight cost per order.",
            "Which supplier is used the least for orders based on total sales?",
            "List all suppliers who have never had a discontinuation in their products.",
            "Identify the top 5 suppliers by total sales revenue generated.",
            "What is the average delivery time for products in each region?",
            "List all products with stock levels below the reorder level.",
            "Find the supplier that offers the most products at a unit price above $20.",
            "Calculate the percentage of products shipped late relative to the required date.",
            "What is the distribution of suppliers per country?",
            "Which products have the highest discount applied on average?",
            "Identify suppliers whose average delivery time is less than 5 days.",
            "Find the most frequently ordered product along with its order count.",
            "What is the total value of all orders placed with discounts?",
            "How many products have been discontinued by each supplier?",
            "What is the total sales value for each product?",
            "Which supplier has the shortest average lead time?",
            "How many orders have been delayed beyond the required date?",
            "What is the most common shipping method used?",
            "Which product has the highest total quantity sold?",
            "What is the total sales revenue generated by each supplier?",
            "How many orders were placed in each month?",
            "What is the average order value?",
            "Which country receives the most shipments?",
            "How many units of products are on order for each supplier?",
            "What is the average lead time for each supplier to deliver their products?",
            "Which suppliers have the highest number of different products?",
            "Which product has the highest sales volume?",
            "How many products are currently on order from each supplier?",
            "What is the average unit price of products supplied by suppliers from the USA?",
            "Which suppliers have orders that are consistently shipped late?",
            "What is the total discount given on all orders?",
            "How many discontinued products are there for each supplier?",
            "Which suppliers have not been used in any orders?",
            "What is the highest freight cost recorded, and which supplier was it associated with?",
            "What is the total quantity of products in stock for each supplier?",
            "Which suppliers ship to the most diverse countries?",
            "What is the average reorder level for products provided by each supplier?",
            "Which orders had the largest discount applied?",
            "What is the total number of orders placed per month?",
            "Which supplier provides the largest number of units per product?",
            "Which supplier has the highest average lead time?",
            "What is the total sales revenue generated last quarter?",
            "Which supplier provided the highest number of products that have been discontinued?",
            "Which cities are served by more than 5 suppliers?",
            "What is the average discount offered per supplier?",
            "How many orders were made by each customer country?",
            "What is the average freight cost for shipped orders?",
            "What are the top 3 most ordered products?",
            "Which category has the highest sales revenue?",
            "Which supplier provides products with the lowest average unit price?",
            "Which supplier has delivered products the fastest on average in the last month?",
            "What is the total quantity of units on order for each supplier?",
            "What is the average units in stock per product category?",
            "Which products have never been ordered?",
            "What is the total discount amount applied across all orders?",
            "How many orders have incurred a freight cost over $100?",
            "Which supplier has the highest number of unique products?",
            "How many days late, on average, have orders been shipped past the required date?",
            "Which suppliers have the highest total sales revenue?",
            "What are the top 5 products by total units ordered?",
            "Which supplier delivers to the most diverse set of regions?",
            "What is the most shipped product in terms of quantity?",
            "How many orders were delayed beyond the required date?",
            "Which suppliers have the most discontinued products?",
            "What is the average freight cost of all orders?",
            "For each supplier, what is the total number of products they supply?",
            "What is the average discount applied to all orders?",
            "Which product has generated the highest total sales revenue?",
            "How many products have a stock level below their reorder level?",
            "What is the total sales revenue per country?",
            "What is the distribution of products in terms of quantity per unit?",
            "Which customers have placed the most orders with a discount?",
            "Which countries have the highest number of suppliers?",
            "How does supplier lead time vary by city?",
            "Which shipping methods have the lowest average freight costs?",
            "Which supplier has the highest total sales in terms of products supplied?",
            "List all suppliers who have delivered products in less than four days on average.",
            "Find the products that have been discontinued but had the highest number of orders previously.",
            "How many products require reordering immediately (stock level below reorder level)?",
            "Which suppliers have failed to deliver products on time based on the required and shipped dates?",
            "Identify the country that has the most number of suppliers.",
            "What is the total revenue generated from each supplier's products?",
            "Which city has the most suppliers, and how many suppliers are located there?",
            "What are the top five products by sales volume? Include the supplier's name.",
            "Calculate the average discount applied to products sold by each supplier.",
            "Find the average freight cost per order for each supplier.",
            "Which supplier has the most number of products that are currently on order?",
            "List all orders with a delivery lead time greater than 10 days.",
            "Determine the supplier with the highest average product price.",
            "How much revenue has been generated from products that have been discontinued?",
            "What is the total quantity ordered for each product supplied by a supplier?",
            "Identify the region with the highest average lead time for product delivery.",
            "Which supplier has the most diverse range of products (different categories)?",
            "Determine the percentage of discontinued products per supplier.",
            "What is the average lead time for each supplier on a monthly basis?",
            "What is the total number of discontinued products supplied by each supplier?",
            "List all suppliers who have not supplied any products.",
            "Find the top three products in terms of units on order.",
            "What is the total freight cost for each order?",
            "Which products have a reorder level less than their units in stock?",
            "Calculate the average discount provided per supplier.",
            "What is the percentage of discontinued products supplied?",
            "Identify suppliers who shipped orders later than the required date.",
            "What is the total revenue generated in the last six months?",
            "List the suppliers with products that are consistently ordered.",
            "Find the city with the highest number of suppliers.",
            "What is the average price of products supplied by each supplier?",
            "Identify products that have never been ordered.",
            "What is the total number of units in stock for all products?",
            "Find the top three suppliers with the fastest delivery times.",
            "Which order had the highest applied discount percentage?",
            "Which supplier supplies the most number of different products?",
            "What is the total sales revenue generated last month?",
            "What are the top five cities with the highest number of suppliers?",
            "How many products are currently out of stock?",
            "Which products have been discontinued?",
            "Which supplier has the highest average unit price for their products?",
            "Which orders were delivered later than the required date?",
            "What is the total quantity of products ordered in the last year?",
            "What is the reorder level for each product, and how many are below this level?",
            "Which supplier has the most orders with discounts applied?",
            "What are the top three products in terms of quantity ordered?",
            "Which suppliers have not shipped any orders this month?",
            "What are the top five most expensive products available?",
            "What is the total sales revenue for each supplier this quarter?",
            "Which supplier has the fastest average lead time?",
            "What is the average number of units in stock for each product category?",
            "Which supplier has the maximum total sales for their products?",
            "What are the top 5 products by total sales?",
            "How many discontinued products exist, and who are their suppliers?",
            "What is the average discount provided on all orders, and how does it vary by supplier?",
            "Which supplier has the most orders that have not yet been shipped?",
            "What is the total number of orders per supplier per month?",
            "Identify the cities with the highest number of suppliers.",
            "Which supplier supplies the most products, and what are those products?",
            "How many products are currently below their reorder level?",
            "What is the total freight cost for all orders from each supplier?",
            "What is the average number of days between the order date and the required date for orders?",
            "Which products have not been ordered in the last year?",
            "What is the revenue generated for each product category?",
            "Identify the suppliers with an average delivery lead time greater than 10 days.",
            "What is the most expensive product supplied by each supplier?",
            "Find the products with the highest and lowest unit prices.",
            "Determine the average unit price of products supplied by each supplier.",
            "Which suppliers deliver products to the most diverse set of countries?"
        ],
        "sql_queries": [
            "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID HAVING AvgLeadTime > 10;",
            "SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID, suppliers.CompanyName;",
            "SELECT ProductName FROM products WHERE Discontinued = 1 AND ProductID IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT ShipCity, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CityRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCity ORDER BY CityRevenue DESC LIMIT 5;",
            "SELECT COUNT(*) FROM orders WHERE ShippedDate IS NULL;",
            "SELECT products.SupplierID, AVG([Order Details].Discount) AS AvgDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID;",
            "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlyRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE EXTRACT(YEAR FROM OrderDate) = 2023 GROUP BY Year, Month;",
            "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT SupplierID, CompanyName FROM suppliers WHERE SupplierID NOT IN (SELECT products.SupplierID FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate > CURRENT_DATE - INTERVAL '1 YEAR');",
            "SELECT SupplierID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY SupplierID;",
            "SELECT OrderID, DATEDIFF(ShippedDate, RequiredDate) AS ShipmentDuration FROM orders WHERE ShippedDate IS NOT NULL;",
            "SELECT OrderID, Freight FROM orders WHERE Freight > (SELECT AVG(Freight) FROM orders);",
            "SELECT s.SupplierID, AVG(p.UnitPrice) AS AvgPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = 2023 GROUP BY s.SupplierID ORDER BY AvgPrice DESC LIMIT 1;",
            "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS ProductRevenue FROM [Order Details] GROUP BY ProductID ORDER BY ProductRevenue DESC LIMIT 3;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate BETWEEN DATE_ADD(CURRENT_DATE, INTERVAL -2 YEAR) AND CURRENT_DATE GROUP BY Year, Month ORDER BY Year, Month;",
            "SELECT ProductID, CORR(UnitPrice, Quantity) AS PriceQuantityCorrelation FROM [Order Details] GROUP BY ProductID;",
            "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN CURRENT_DATE - INTERVAL '6 MONTH' AND CURRENT_DATE GROUP BY suppliers.SupplierID HAVING AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) < (SELECT AVG(DATEDIFF(o2.ShippedDate, o2.OrderDate)) FROM orders o2 JOIN [Order Details] od2 ON o2.OrderID = od2.OrderID JOIN products p2 ON od2.ProductID = p2.ProductID WHERE p2.SupplierID = suppliers.SupplierID AND o2.OrderDate BETWEEN CURRENT_DATE - INTERVAL '1 YEAR' AND CURRENT_DATE - INTERVAL '6 MONTH');",
            "SELECT OrderID, Discount FROM [Order Details] ORDER BY Discount DESC LIMIT 10;",
            "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID, suppliers.CompanyName;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate BETWEEN DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' AND DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 day';",
            "SELECT ProductName FROM products GROUP BY ProductName HAVING COUNT(DISTINCT SupplierID) > 1;",
            "SELECT SUM([Order Details].Quantity) FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.ShippedDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE();",
            "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS DiscontinuedProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.Discontinued = 1 GROUP BY suppliers.CompanyName ORDER BY DiscontinuedProducts DESC;",
            "SELECT OrderID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY OrderID;",
            "SELECT OrderID, DATEDIFF(ShippedDate, RequiredDate) AS Delay FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;",
            "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity) AS TotalValue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY TotalValue DESC LIMIT 5;",
            "SELECT suppliers.City FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.City ORDER BY COUNT(DISTINCT products.SupplierID) DESC LIMIT 3;",
            "SELECT ProductName, UnitsInStock FROM products;",
            "SELECT OrderID FROM [Order Details] WHERE Discount > 0 GROUP BY OrderID HAVING COUNT(ProductID) > 5;",
            "SELECT COUNT(ProductID) AS ProductCount FROM products WHERE ReorderLevel > UnitsInStock;",
            "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID, suppliers.CompanyName ORDER BY AvgLeadTime DESC LIMIT 1;",
            "SELECT ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY TotalQuantity DESC LIMIT 1;",
            "SELECT (COUNT(CASE WHEN Discontinued = 1 THEN 1 END) * 100.0 / COUNT(*)) AS DiscontinuedPercentage FROM products;",
            "SELECT suppliers.CompanyName, COUNT(DISTINCT CategoryID) AS NumberOfCategories FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY NumberOfCategories DESC LIMIT 1;",
            "SELECT SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS CurrentYearLeadTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY products.SupplierID UNION SELECT SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS LastYearLeadTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY products.SupplierID;",
            "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID;",
            "SELECT OrderID, Freight FROM orders ORDER BY Freight DESC LIMIT 1;",
            "SELECT s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY s.SupplierID, s.CompanyName;",
            "SELECT ProductName FROM products WHERE Discontinued = 1;",
            "SELECT p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
            "SELECT DISTINCT s1.CompanyName, s2.CompanyName FROM suppliers s1 JOIN suppliers s2 ON s1.City = s2.City AND s1.SupplierID < s2.SupplierID;",
            "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShippedDate IS NOT NULL;",
            "SELECT s.CompanyName, COUNT(*) AS DiscontinuedCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1 GROUP BY s.SupplierID ORDER BY DiscontinuedCount DESC LIMIT 1;",
            "SELECT OrderID, OrderDate, RequiredDate, ShippedDate FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT s.CompanyName, AVG(p.UnitPrice) AS AvgUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName;",
            "SELECT s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID, s.CompanyName ORDER BY AvgLeadTime ASC LIMIT 1;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT s.CompanyName, COUNT(*) AS ProductCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY ProductCount DESC LIMIT 1;",
            "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY Month ORDER BY Month;",
            "SELECT ProductName FROM products WHERE UnitsOnOrder = 0;",
            "SELECT o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry;",
            "SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM products) AS DiscontinuedPercentage FROM products WHERE Discontinued = 1;",
            "SELECT o.OrderID, s.CompanyName FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE s.Region = 'SpecificRegion';",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC FETCH FIRST 1 ROW ONLY;",
            "SELECT p.ProductName, AVG(od.Discount) AS AvgDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
            "SELECT s.CompanyName, p.ProductName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID, p.ProductID ORDER BY SUM(od.Quantity) DESC;",
            "SELECT s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.CompanyName ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID;",
            "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1;",
            "SELECT SupplierID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY SupplierID;",
            "SELECT products.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT ProductName, CompanyName FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE Discontinued = 1;",
            "SELECT ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID HAVING AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) > 30;",
            "SELECT products.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID;",
            "SELECT City, COUNT(SupplierID) AS NumSuppliers FROM suppliers GROUP BY City ORDER BY NumSuppliers DESC LIMIT 1;",
            "SELECT SUM(Freight) AS TotalFreight FROM orders WHERE MONTH(ShippedDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(ShippedDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH);",
            "SELECT SupplierID, COUNT(DISTINCT CategoryID) AS CategoryCount FROM products GROUP BY SupplierID HAVING CategoryCount > 5;",
            "SELECT ProductName FROM products ORDER BY ReorderLevel DESC LIMIT 1;",
            "SELECT OrderID, DATEDIFF(ShippedDate, RequiredDate) AS Delay FROM orders WHERE ShippedDate > RequiredDate ORDER BY Delay DESC LIMIT 1;",
            "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
            "SELECT ProductName, CompanyName FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE UnitsInStock = 0;",
            "SELECT Region, COUNT(SupplierID) AS NumSuppliers FROM suppliers GROUP BY Region ORDER BY NumSuppliers DESC;",
            "SELECT CompanyName FROM suppliers WHERE SupplierID IN (SELECT SupplierID FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products));",
            "SELECT SupplierID FROM suppliers WHERE SupplierID NOT IN (SELECT SupplierID FROM products WHERE Discontinued = 1);",
            "SELECT MONTH(ShippedDate) AS ShipMonth, COUNT(OrderID) AS OrderCount FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipMonth ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT ProductName, (UnitsInStock - UnitsOnOrder) AS Difference FROM products ORDER BY Difference DESC LIMIT 1;",
            "SELECT SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM products JOIN orders ON products.ProductID = orders.OrderID GROUP BY SupplierID;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) AND MONTH(OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH);",
            "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN orders ON products.ProductID = orders.ProductID WHERE DATEDIFF(orders.ShippedDate, orders.OrderDate) > (SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) FROM orders) GROUP BY suppliers.CompanyName;",
            "SELECT products.ProductName, suppliers.CompanyName, products.UnitsInStock FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID ORDER BY products.UnitsInStock DESC LIMIT 1;",
            "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS TotalProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY products.ProductName ORDER BY TotalSales DESC LIMIT 3;",
            "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",
            "SELECT ShipVia, COUNT(*) AS frequency FROM orders GROUP BY ShipVia ORDER BY frequency DESC;",
            "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate AND OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND CURRENT_DATE;",
            "SELECT CompanyName, COUNT(ProductID) FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE Country = 'USA' GROUP BY CompanyName;",
            "SELECT AVG([Order Details].Discount) FROM [Order Details];",
            "SELECT p.ProductName, s.CompanyName FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.Discontinued = 1;",
            "SELECT CategoryID, AVG(UnitPrice) FROM products GROUP BY CategoryID;",
            "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName;",
            "SELECT OrderID FROM orders WHERE ShippedDate IS NULL;",
            "SELECT Region, COUNT(*) FROM suppliers GROUP BY Region ORDER BY COUNT(*) DESC;",
            "SELECT ShipCountry, COUNT(OrderID) FROM orders GROUP BY ShipCountry ORDER BY COUNT(OrderID) DESC;",
            "SELECT ProductName, UnitsOnOrder FROM products WHERE UnitsOnOrder = 0 AND UnitsInStock > 0 ORDER BY UnitsInStock DESC;",
            "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry ORDER BY TotalRevenue DESC LIMIT 5;",
            "SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM products p JOIN orders o ON p.ProductID = o.OrderID GROUP BY p.SupplierID;",
            "SELECT p.SupplierID, COUNT(*) AS DiscontinuedProductCount FROM products p WHERE p.Discontinued = 1 GROUP BY p.SupplierID;",
            "SELECT p.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;",
            "SELECT s.SupplierID, s.CompanyName FROM suppliers s LEFT JOIN products p ON s.SupplierID = p.SupplierID LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL AND p.ProductID IS NOT NULL;",
            "SELECT p.SupplierID, SUM(p.UnitPrice * p.UnitsOnOrder) AS BackorderValue FROM products p GROUP BY p.SupplierID;",
            "SELECT p.SupplierID, AVG(p.UnitPrice) AS AvgUnitPrice FROM products p GROUP BY p.SupplierID ORDER BY AvgUnitPrice DESC;",
            "SELECT p.SupplierID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;",
            "SELECT p.SupplierID, SUM(p.UnitsOnOrder) AS TotalBackorders FROM products p GROUP BY p.SupplierID ORDER BY TotalBackorders DESC;",
            "SELECT p.SupplierID, SUM(o.Freight) AS TotalFreight FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue, p.SupplierID FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY od.ProductID, p.SupplierID ORDER BY TotalRevenue DESC LIMIT 5;",
            "SELECT p.SupplierID, AVG(od.Discount) AS AvgDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;",
            "SELECT DISTINCT s.SupplierID, s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.ShippedDate > o.RequiredDate;",
            "SELECT Country, COUNT(*) AS SupplierCount FROM suppliers GROUP BY Country ORDER BY SupplierCount DESC;",
            "SELECT p.SupplierID, AVG(p.ReorderLevel) AS AvgReorderLevel FROM products p GROUP BY p.SupplierID;",
            "SELECT s.SupplierID, s.CompanyName FROM suppliers s LEFT JOIN products p ON s.SupplierID = p.SupplierID LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID LEFT JOIN orders o ON od.OrderID = o.OrderID WHERE o.ShippedDate IS NULL OR o.ShippedDate < CURRENT_DATE - INTERVAL '1 MONTH' GROUP BY s.SupplierID, s.CompanyName HAVING COUNT(o.OrderID) = 0;",
            "SELECT p.SupplierID, p.ProductID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.SupplierID, p.ProductID ORDER BY AvgLeadTime DESC LIMIT 1;",
            "SELECT City, COUNT(*) AS SupplierCount FROM suppliers GROUP BY City ORDER BY SupplierCount DESC LIMIT 3;",
            "SELECT p.SupplierID, (COUNT(CASE WHEN p.Discontinued = 1 THEN 1 END) / COUNT(*)::FLOAT) * 100 AS DiscontinuedPercentage FROM products p GROUP BY p.SupplierID;",
            "SELECT DISTINCT s.SupplierID, s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount = 0;",
            "SELECT s.SupplierID, SUM(od.Quantity) AS TotalUnits FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY TotalUnits DESC LIMIT 1;",
            "SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT Country, COUNT(DISTINCT SupplierID) AS UniqueSuppliers FROM suppliers GROUP BY Country ORDER BY UniqueSuppliers DESC;",
            "SELECT s.SupplierID, s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 0;",
            "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_FORMAT(o.OrderDate, '%Y-%m');",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
            "SELECT p.SupplierID, COUNT(o.OrderID) AS LateOrders FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.ShippedDate > o.RequiredDate GROUP BY p.SupplierID;",
            "SELECT od.ProductID, p.ProductName, COUNT(od.OrderID) AS OrderCount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY od.ProductID, p.ProductName ORDER BY OrderCount DESC LIMIT 5;",
            "SELECT p.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID;",
            "SELECT s.SupplierID, AVG(p.UnitPrice) AS AveragePrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY AveragePrice ASC LIMIT 1;",
            "SELECT p.SupplierID, COUNT(DISTINCT p.ProductID) AS UniqueProducts FROM products p GROUP BY p.SupplierID;",
            "SELECT City, COUNT(SupplierID) AS NumSuppliers FROM suppliers GROUP BY City ORDER BY NumSuppliers DESC LIMIT 3;",
            "SELECT s.SupplierID, s.CompanyName FROM suppliers s LEFT JOIN products p ON s.SupplierID = p.SupplierID LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID LEFT JOIN orders o ON od.OrderID = o.OrderID WHERE o.ShippedDate IS NULL OR o.ShippedDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY s.SupplierID, s.CompanyName HAVING COUNT(o.OrderID) = 0;",
            "SELECT s.SupplierID, s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.UnitsInStock = 0;",
            "SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID GROUP BY p.SupplierID HAVING AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) > 20;",
            "SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT COUNT(*) as NumberOfProducts FROM (SELECT ProductID, COUNT(DISTINCT SupplierID) AS SupplierCount FROM products GROUP BY ProductID) AS subquery WHERE SupplierCount > 1;",
            "SELECT ShipCountry, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipCountry;",
            "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN orders ON products.ProductID = [Order Details].ProductID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY suppliers.SupplierID;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL '1' MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL '1' MONTH);",
            "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS DiscontinuedProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.Discontinued = 1 GROUP BY suppliers.CompanyName ORDER BY DiscontinuedProducts DESC LIMIT 1;",
            "SELECT * FROM orders WHERE Freight > 100;",
            "SELECT suppliers.CompanyName, SUM(products.UnitsOnOrder) AS TotalUnitsOnOrder FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID;",
            "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN orders ON products.ProductID = (SELECT ProductID FROM [Order Details] WHERE orders.OrderID = [Order Details].OrderID) GROUP BY suppliers.SupplierID ORDER BY AverageLeadTime ASC LIMIT 5;",
            "SELECT suppliers.CompanyName, SUM(CASE WHEN products.UnitsInStock < products.ReorderLevel THEN 1 ELSE 0 END) AS ReorderCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
            "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT products.ProductName, AVG([Order Details].Discount) AS AverageDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;",
            "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN orders ON products.ProductID = [Order Details].ProductID AND orders.OrderID = [Order Details].OrderID WHERE DATEDIFF(orders.ShippedDate, orders.OrderDate) > 7 GROUP BY suppliers.SupplierID;",
            "SELECT categories.CategoryID, SUM([Order Details].Quantity) AS TotalUnitsSold FROM categories JOIN products ON categories.CategoryID = products.CategoryID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY categories.CategoryID;",
            "SELECT ProductID, COUNT(*) AS ReorderCount FROM products WHERE UnitsOnOrder > ReorderLevel GROUP BY ProductID ORDER BY ReorderCount DESC LIMIT 1;",
            "SELECT * FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT suppliers.CompanyName, SUM(products.UnitsInStock) AS TotalUnitsInStock FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY TotalUnitsInStock DESC LIMIT 1;",
            "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID ORDER BY SUM(products.UnitsInStock) DESC LIMIT 1;",
            "SELECT COUNT(products.ProductName) FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].ProductID IS NULL;",
            "SELECT ProductID, COUNT(*) AS OrderFrequency FROM [Order Details] GROUP BY ProductID ORDER BY OrderFrequency ASC LIMIT 1;",
            "SELECT OrderID, Freight AS TotalFreightCost FROM orders;",
            "SELECT products.ProductName, products.UnitPrice, suppliers.CompanyName FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID ORDER BY products.UnitPrice DESC LIMIT 5;",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN \"Order Details\" ON orders.OrderID = \"Order Details\".OrderID GROUP BY Month;",
            "SELECT COUNT(ProductID) FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT suppliers.CompanyName, suppliers.ContactName FROM suppliers WHERE suppliers.Region = 'specific region'",
            "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSalesValue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalSalesValue DESC LIMIT 1",
            "SELECT products.ProductName, COUNT(DISTINCT [Order Details].OrderID) AS TotalOrders FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName",
            "SELECT suppliers.City, COUNT(suppliers.SupplierID) AS NumberOfSuppliers FROM suppliers GROUP BY suppliers.City ORDER BY NumberOfSuppliers DESC",
            "SELECT suppliers.CompanyName, SUM([Order Details].Quantity) AS TotalQuantityOrdered FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName",
            "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE products.Discontinued = 0",
            "SELECT orders.OrderID, orders.Freight FROM orders WHERE orders.Freight > threshold",
            "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS TotalProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY TotalProducts DESC LIMIT 1",
            "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE DATE_FORMAT(orders.OrderDate, '%Y-%m') = 'specific month' GROUP BY suppliers.CompanyName",
            "SELECT AVG(UnitPrice) FROM products",
            "SELECT products.ProductName FROM products WHERE products.UnitsOnOrder = 0",
            "SELECT products.CategoryID, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.CategoryID",
            "SELECT (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / COUNT(*)) * 100.0 AS PercentageShippedOnTime FROM orders",
            "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS Avg_Lead_Time FROM orders JOIN products ON orders.OrderID = products.ProductID GROUP BY products.SupplierID",
            "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Total_Sales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY Total_Sales DESC LIMIT 1",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Total_Revenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH);",
            "SELECT ProductName, UnitsOnOrder FROM products",
            "SELECT products.ProductName, COUNT([Order Details].ProductID) AS Order_Count FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY Order_Count DESC LIMIT 1",
            "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS Discontinued_Count FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.Discontinued = 1 GROUP BY suppliers.CompanyName ORDER BY Discontinued_Count DESC LIMIT 1;",
            "SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS Average_Unit_Price FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName",
            "SELECT DISTINCT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.ShippedDate) = YEAR(CURRENT_DATE) AND orders.RequiredDate >= orders.ShippedDate;",
            "SELECT ProductName, ReorderLevel FROM products WHERE UnitsInStock = 0;",
            "SELECT City, COUNT(SupplierID) AS Supplier_Count FROM suppliers GROUP BY City ORDER BY Supplier_Count DESC LIMIT 1",
            "SELECT orders.CustomerID, COUNT(orders.OrderID) AS Order_Count FROM orders WHERE QUARTER(orders.OrderDate) = QUARTER(CURRENT_DATE) - 1 AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - IF(QUARTER(CURRENT_DATE) = 1, 1, 0) GROUP BY orders.CustomerID",
            "SELECT SUM(orders.Freight) AS Total_Freight_Cost FROM orders WHERE orders.ShippedDate IS NOT NULL",
            "SELECT AVG([Order Details].Discount) AS Average_Discount FROM [Order Details]",
            "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS Avg_Lead_Time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY Avg_Lead_Time ASC LIMIT 1;",
            "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Total_Revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY Total_Revenue DESC LIMIT 5",
            "SELECT COUNT(orders.OrderID) AS Shipped_Orders FROM orders WHERE MONTH(orders.ShippedDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.ShippedDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH);",
            "SELECT suppliers.CompanyName FROM suppliers LEFT JOIN products ON suppliers.SupplierID = products.SupplierID LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID LEFT JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) != YEAR(CURRENT_DATE) OR orders.OrderID IS NULL GROUP BY suppliers.CompanyName",
            "SELECT COUNT(ProductID) AS Product_Count FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
            "SELECT orders.ShipCountry, SUM([Order Details].Quantity) AS Total_Quantity FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.ShipCountry",
            "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Discount * [Order Details].Quantity) AS Total_Discount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY Total_Discount DESC LIMIT 1",
            "SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN orders o ON p.ProductID IN (SELECT od.ProductID FROM [Order Details] od WHERE od.OrderID = o.OrderID) WHERE o.OrderDate BETWEEN CURDATE() - INTERVAL 1 YEAR AND CURDATE() GROUP BY s.SupplierID;",
            "SELECT s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.CompanyName ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT s.CompanyName, COUNT(*) AS DiscontinuedProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1 GROUP BY s.CompanyName;",
            "SELECT p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS SalesRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURDATE()) - 1 AND YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY p.ProductName ORDER BY SalesRevenue DESC LIMIT 3;",
            "SELECT s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN orders o ON p.ProductID = o.OrderID GROUP BY s.CompanyName HAVING AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) > (SELECT AVG(DATEDIFF(o2.ShippedDate, o2.OrderDate)) FROM orders o2);",
            "SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT c.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalCategorySales FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY c.CategoryID;",
            "SELECT s.CompanyName, AVG(d.Discount) AS AverageDiscount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] d ON p.ProductID = d.ProductID JOIN orders o ON o.OrderID = d.OrderID GROUP BY s.CompanyName;",
            "SELECT s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.UnitsInStock < p.ReorderLevel;",
            "SELECT (COUNT(DISTINCT od.OrderID) - COUNT(DISTINCT single_supplier_orders.OrderID)) * 100.0 / COUNT(DISTINCT od.OrderID) AS PercentageOfMultiSupplierOrders FROM [Order Details] od LEFT JOIN (SELECT OrderID FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY OrderID HAVING COUNT(DISTINCT products.SupplierID) = 1) single_supplier_orders ON od.OrderID = single_supplier_orders.OrderID;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalUnitsOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY p.ProductName;",
            "SELECT s.CompanyName, COUNT(DISTINCT o.OrderID) AS NumberOfOrders FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.CompanyName ORDER BY NumberOfOrders DESC;",
            "SELECT OrderID, Freight FROM orders ORDER BY Freight DESC LIMIT 1;",
            "SELECT ProductName FROM products WHERE UnitsInStock = 0 AND Discontinued = 0;",
            "SELECT ShipCountry, COUNT(*) AS NumberOfOrders FROM orders GROUP BY ShipCountry;",
            "SELECT s.CompanyName, COUNT(DISTINCT p.CategoryID) AS NumberOfCategories FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName ORDER BY NumberOfCategories DESC LIMIT 1;",
            "SELECT p.ProductName, p.UnitPrice, AVG(od.Quantity) AS AverageQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName, p.UnitPrice ORDER BY p.UnitPrice;",
            "SELECT s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.CompanyName ORDER BY AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) ASC LIMIT 3;",
            "SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM products p INNER JOIN [Order Details] od ON p.ProductID = od.ProductID INNER JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.SupplierID;",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od INNER JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);",
            "SELECT s.CompanyName, COUNT(p.ProductID) AS OutOfStockProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.UnitsInStock = 0 GROUP BY s.CompanyName ORDER BY OutOfStockProducts DESC LIMIT 1;",
            "SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY od.ProductID;",
            "SELECT p.ProductName, s.CompanyName FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.Discontinued = 1;",
            "SELECT COUNT(o.OrderID) AS LateOrders FROM orders o WHERE o.ShippedDate > o.RequiredDate;",
            "SELECT o.ShipCountry, SUM(o.Freight) AS TotalFreight FROM orders o GROUP BY o.ShipCountry;",
            "SELECT p.SupplierID, p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID, p.ProductName ORDER BY Revenue DESC LIMIT 3;",
            "SELECT o.OrderID, od.ProductID, od.Discount * 100 AS DiscountPercentage FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE od.Discount = (SELECT MAX(Discount) FROM [Order Details]) ORDER BY DiscountPercentage DESC, o.OrderID LIMIT 1;",
            "SELECT COUNT(*) FROM products WHERE UnitsInStock >= ReorderLevel;",
            "SELECT s.CompanyName, AVG(p.UnitPrice) AS AveragePrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName;",
            "SELECT p.ProductID, SUM(od.Quantity) AS TotalUnitsOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.UnitsInStock < 10 GROUP BY p.ProductID;",
            "SELECT s.CompanyName, SUM(p.UnitsInStock + p.UnitsOnOrder) AS TotalUnitsSupplied FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName ORDER BY TotalUnitsSupplied DESC LIMIT 5;",
            "SELECT o.OrderID, o.Freight, o.ShipCountry FROM orders o ORDER BY o.Freight DESC LIMIT 1;",
            "SELECT p.ProductID, o.SupplierID, MAX(DATEDIFF(o.ShippedDate, o.OrderDate)) AS LongestLeadTime FROM orders o INNER JOIN [Order Details] od ON o.OrderID = od.OrderID INNER JOIN products p ON od.ProductID = p.ProductID WHERE o.ShippedDate IS NOT NULL GROUP BY p.ProductID, o.SupplierID ORDER BY LongestLeadTime DESC LIMIT 1;",
            "SELECT o.CustomerID, COUNT(DISTINCT od.ProductID) AS UniqueProductsOrdered FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID;",
            "SELECT AVG(od.Discount) * 100 AS AverageDiscount FROM [Order Details] od;",
            "SELECT s.CompanyName, AVG(p.UnitPrice) AS AvgPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName ORDER BY AvgPrice DESC LIMIT 1;",
            "SELECT COUNT(DISTINCT ShipVia) AS ShippingMethods FROM orders;",
            "SELECT p.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID WHERE o.OrderDate > DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY s.SupplierID;",
            "SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate > DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY s.SupplierID ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT COUNT(*) AS ActiveSuppliers FROM suppliers s WHERE EXISTS (SELECT 1 FROM products p WHERE s.SupplierID = p.SupplierID AND p.Discontinued = 0);",
            "SELECT p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID LEFT JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate IS NULL OR o.OrderDate < DATEADD(MONTH, -6, CURRENT_DATE);",
            "SELECT c.CategoryName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryName;",
            "SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID GROUP BY s.SupplierID HAVING AvgLeadTime > 14;",
            "SELECT s.SupplierID, COUNT(p.ProductID) AS TotalProducts FROM suppliers s LEFT JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
            "SELECT s.SupplierID, COUNT(p.ProductID) AS DiscontinuedProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1 GROUP BY s.SupplierID ORDER BY DiscontinuedProducts DESC LIMIT 1;",
            "SELECT SUM(od.Quantity) AS TotalOverdueUnits FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.RequiredDate < CURDATE() AND o.ShippedDate IS NULL;",
            "SELECT p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE() GROUP BY p.ProductName ORDER BY TotalRevenue DESC LIMIT 5;",
            "SELECT COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT s.Country, COUNT(DISTINCT s.SupplierID) AS NumSuppliers, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.Country ORDER BY NumSuppliers DESC LIMIT 1;",
            "SELECT s.SupplierID, AVG(od.Discount) AS AvgDiscount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY AvgDiscount ASC LIMIT 1;",
            "SELECT o.OrderID, DATEDIFF(o.ShippedDate, o.RequiredDate) AS DelayDays FROM orders o WHERE o.ShippedDate > o.RequiredDate;",
            "SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;",
            "SELECT p.ProductID, p.ProductName, p.UnitsInStock, p.ReorderLevel FROM products p WHERE p.UnitsInStock < p.ReorderLevel;",
            "SELECT COUNT(*) AS UnshippedOrders FROM orders o WHERE o.ShippedDate IS NULL;",
            "SELECT o.ShipCity, COUNT(o.OrderID) AS NumShipments, SUM(od.Quantity) AS TotalVolume FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCity ORDER BY NumShipments DESC, TotalVolume DESC LIMIT 1;",
            "SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime, COUNT(od.ProductID) AS QualityProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE p.Discontinued = 0 GROUP BY s.SupplierID ORDER BY QualityProducts DESC, AvgLeadTime ASC LIMIT 3;",
            "SELECT o.ShipVia, AVG(o.Freight) AS AvgFreightCost FROM orders o WHERE o.OrderDate > DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY o.ShipVia;",
            "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM products JOIN orders ON products.ProductID = orders.OrderID GROUP BY suppliers.SupplierID;",
            "SELECT s.SupplierID, s.CompanyName, SUM(p.UnitsInStock) AS TotalStock FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID, s.CompanyName ORDER BY TotalStock DESC LIMIT 1;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT SupplierID, COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1 GROUP BY SupplierID;",
            "SELECT Country, COUNT(DISTINCT SupplierID) AS SupplierCount FROM suppliers GROUP BY Country ORDER BY SupplierCount DESC LIMIT 5;",
            "SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM products p JOIN orders o ON p.ProductID = o.OrderID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY p.SupplierID ORDER BY AvgLeadTime ASC LIMIT 5;",
            "SELECT [Order Details].ProductID, p.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products p ON [Order Details].ProductID = p.ProductID GROUP BY [Order Details].ProductID, p.ProductName ORDER BY TotalQuantity DESC;",
            "SELECT COUNT(*) AS LateOrders FROM orders WHERE orders.ShippedDate > orders.RequiredDate;",
            "SELECT AVG([Order Details].Quantity) AS AvgOrderSize FROM [Order Details];",
            "SELECT s.SupplierID, s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.ReorderLevel > 50 GROUP BY s.SupplierID, s.CompanyName;",
            "SELECT s.SupplierID, s.CompanyName, COUNT(DISTINCT o.OrderID) AS TotalOrders FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID, s.CompanyName;",
            "SELECT p.ProductID, p.ProductName, s.SupplierID, s.CompanyName, od.Discount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE od.Discount = (SELECT MAX(Discount) FROM [Order Details]) ORDER BY od.Discount DESC;",
            "SELECT s.SupplierID, AVG(o.Freight) AS AvgFreightCost FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID;",
            "SELECT c.CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products p ON [Order Details].ProductID = p.ProductID GROUP BY c.CategoryID ORDER BY TotalSales DESC;",
            "SELECT products.SupplierID, VAR_SAMP(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS LeadTimeVariance FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.SupplierID;",
            "SELECT City, COUNT(DISTINCT SupplierID) AS NumberOfSuppliers FROM suppliers GROUP BY City ORDER BY NumberOfSuppliers DESC LIMIT 3;",
            "SELECT COUNT(*) AS MissingContacts FROM suppliers WHERE ContactName IS NULL OR Phone IS NULL;",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY OrderMonth ORDER BY OrderMonth DESC;",
            "SELECT CategoryID, AVG(UnitPrice) AS AvgPrice FROM products GROUP BY CategoryID;",
            "SELECT o.ShipVia, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM orders o GROUP BY o.ShipVia ORDER BY AvgLeadTime;",
            "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers INNER JOIN products ON suppliers.SupplierID = products.SupplierID INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT ProductName FROM products INNER JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE suppliers.Country = 'Germany';",
            "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
            "SELECT suppliers.CompanyName, SUM(products.UnitsOnOrder) FROM suppliers INNER JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
            "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalRevenue DESC LIMIT 5;",
            "SELECT suppliers.CompanyName, AVG(products.ReorderLevel) FROM suppliers INNER JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = 2022 GROUP BY Month;",
            "SELECT suppliers.CompanyName FROM suppliers LEFT JOIN products ON suppliers.SupplierID = products.SupplierID LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].OrderID IS NULL;",
            "SELECT SUM(Freight) FROM orders WHERE ShipCountry = 'United States';",
            "SELECT orders.OrderID, SUM([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount) AS TotalDiscount FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.OrderID;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] WHERE [Order Details].Discount > 0.1;",
            "SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate BETWEEN '2022-01-01' AND '2022-01-31';",
            "SELECT suppliers.CompanyName, COUNT(products.ProductID) * 100.0 / (SELECT COUNT(*) FROM products) AS ProductShare FROM products INNER JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName;",
            "SELECT ProductName FROM products LEFT JOIN \"Order Details\" ON products.ProductID = \"Order Details\".ProductID WHERE \"Order Details\".OrderID IS NULL;",
            "SELECT SUM(Quantity) FROM [Order Details] INNER JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE);",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalSold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY products.ProductName ORDER BY TotalSold DESC;",
            "SELECT suppliers.Country, COUNT(suppliers.SupplierID) AS SupplierCount FROM suppliers GROUP BY suppliers.Country ORDER BY SupplierCount DESC;",
            "SELECT SUM(products.UnitsInStock) AS TotalUnitsInStock FROM products;",
            "SELECT suppliers.CompanyName, MIN(AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate))) AS ShortestLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID WHERE orders.ShippedDate IS NOT NULL AND orders.OrderDate IS NOT NULL GROUP BY suppliers.CompanyName ORDER BY ShortestLeadTime ASC LIMIT 1;",
            "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
            "SELECT orders.ShipCountry, SUM(orders.Freight) AS TotalFreight FROM orders GROUP BY orders.ShipCountry;",
            "SELECT orders.CustomerID, COUNT(orders.OrderID) AS OrderCount FROM orders GROUP BY orders.CustomerID;",
            "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitPrice = (SELECT MAX(UnitPrice) FROM products);",
            "SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AvgUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
            "SELECT COUNT(ProductID) AS DiscontinuedCount FROM products WHERE Discontinued = 1;",
            "SELECT orders.OrderID FROM orders WHERE orders.RequiredDate < orders.ShippedDate;",
            "SELECT products.CategoryID, SUM([Order Details].Quantity) AS TotalUnitsOrdered FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.CategoryID;",
            "SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipCountry;",
            "SELECT products.ProductName, SUM([Order Details].Discount * [Order Details].Quantity * [Order Details].UnitPrice) AS TotalDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalDiscount DESC LIMIT 1;",
            "SELECT suppliers.Region, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.Region ORDER BY AvgLeadTime ASC;",
            "SELECT s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.CompanyName;",
            "SELECT products.ProductID, products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName;",
            "SELECT DISTINCT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsOnOrder > 0;",
            "SELECT suppliers.City, COUNT(*) AS SupplierCount FROM suppliers GROUP BY suppliers.City ORDER BY SupplierCount DESC LIMIT 5;",
            "SELECT ProductID, ProductName FROM products WHERE ReorderLevel > UnitsInStock;",
            "SELECT suppliers.CompanyName, COUNT(*) AS DiscontinuedProductCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.Discontinued = 1 GROUP BY suppliers.CompanyName ORDER BY DiscontinuedProductCount DESC LIMIT 1;",
            "SELECT suppliers.CompanyName, COUNT(DISTINCT products.ProductID) AS UniqueProductCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
            "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SupplierRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName;",
            "SELECT suppliers.CompanyName, MAX(products.UnitPrice) AS MaxUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY MaxUnitPrice DESC;",
            "SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT orders.OrderID, DATEDIFF(orders.ShippedDate, orders.RequiredDate) AS DaysLate FROM orders WHERE orders.ShippedDate > orders.RequiredDate;",
            "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageDeliveryTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY suppliers.CompanyName ORDER BY AverageDeliveryTime DESC LIMIT 1;",
            "SELECT EXTRACT(MONTH FROM orders.OrderDate) AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EXTRACT(MONTH FROM orders.OrderDate);",
            "SELECT suppliers.CompanyName, SUM(products.UnitsOnOrder) AS TotalUnitsOnOrder FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY TotalUnitsOnOrder DESC;",
            "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
            "SELECT ProductID, COUNT(*) AS OrderCount FROM [Order Details] GROUP BY ProductID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT suppliers.CompanyName FROM suppliers LEFT JOIN products ON suppliers.SupplierID = products.SupplierID LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID LEFT JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate IS NULL OR orders.OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
            "SELECT suppliers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CountryRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.Country ORDER BY CountryRevenue DESC LIMIT 3;",
            "SELECT * FROM suppliers WHERE Region = 'SpecificRegion' OR Country = 'SpecificCountry';",
            "SELECT products.ProductID, AVG([Order Details].Discount) AS AverageDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID ORDER BY AverageDiscount DESC LIMIT 1;",
            "SELECT ProductName FROM products WHERE UnitsInStock = 0;",
            "SELECT suppliers.CompanyName FROM suppliers WHERE suppliers.SupplierID NOT IN (SELECT DISTINCT products.SupplierID FROM products WHERE products.Discontinued = 1);",
            "SELECT COUNT(*) FROM products WHERE UnitsOnOrder > UnitsInStock;",
            "SELECT orders.ShipCountry, SUM(orders.Freight) AS TotalFreight FROM orders WHERE orders.ShippedDate IS NOT NULL GROUP BY orders.ShipCountry;",
            "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.RequiredDate)) AS AvgDelay FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.ShippedDate > orders.RequiredDate GROUP BY suppliers.SupplierID ORDER BY AvgDelay DESC LIMIT 1;",
            "SELECT AVG(DATEDIFF(orders.RequiredDate, orders.OrderDate)) AS AvgOrderToRequired FROM orders;",
            "SELECT orders.OrderID, SUM([Order Details].Discount) AS TotalDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID ORDER BY TotalDiscount DESC LIMIT 1;",
            "SELECT Country, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY Country;",
            "SELECT products.ProductID, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID;",
            "SELECT City, COUNT(ContactName) AS ContactCount FROM suppliers GROUP BY City ORDER BY ContactCount DESC LIMIT 1;",
            "SELECT CategoryID, AVG(UnitPrice) AS AvgPrice FROM products GROUP BY CategoryID;",
            "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT COUNT(*) FROM orders WHERE orders.ShippedDate > orders.RequiredDate;",
            "SELECT suppliers.SupplierID, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID;",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS OrderQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID ORDER BY OrderQuantity DESC LIMIT 5;",
            "SELECT DISTINCT Country FROM suppliers WHERE Fax IS NOT NULL;",
            "SELECT ShipRegion, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipRegion ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY TotalSales DESC;",
            "SELECT Country, COUNT(DISTINCT SupplierID) AS SupplierCount FROM suppliers GROUP BY Country;",
            "SELECT products.SupplierID, COUNT(*) AS DiscontinuedCount FROM products WHERE products.Discontinued = 1 GROUP BY products.SupplierID ORDER BY DiscontinuedCount DESC;",
            "SELECT SUM(orders.Freight) AS TotalFreight FROM orders WHERE orders.ShippedDate IS NOT NULL;",
            "SELECT City, COUNT(DISTINCT SupplierID) AS SupplierCount FROM suppliers GROUP BY City ORDER BY SupplierCount DESC LIMIT 5;",
            "SELECT ProductID FROM products WHERE UnitsInStock > 0 AND UnitsOnOrder > 0 ORDER BY UnitsOnOrder DESC LIMIT 1;",
            "SELECT suppliers.CompanyName FROM suppliers WHERE suppliers.SupplierID NOT IN (SELECT DISTINCT products.SupplierID FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID);",
            "SELECT [Order Details].ProductID, MAX([Order Details].Discount) AS MaxDiscount FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY MaxDiscount DESC;",
            "SELECT products.SupplierID, AVG([Order Details].Discount) AS AverageDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.SupplierID;",
            "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsInStock < products.ReorderLevel;",
            "SELECT ShipVia, COUNT(*) AS Frequency FROM orders GROUP BY ShipVia ORDER BY Frequency DESC LIMIT 1;",
            "SELECT orders.CustomerID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.CustomerID;",
            "SELECT products.SupplierID, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.SupplierID ORDER BY TotalQuantity DESC;",
            "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT categories.CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID;",
            "SELECT products.SupplierID, AVG([Order Details].Discount) AS AverageDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.SupplierID ORDER BY AverageDiscount ASC LIMIT 1;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT suppliers.Region, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY suppliers.Region ORDER BY AverageLeadTime ASC LIMIT 1;",
            "SELECT suppliers.SupplierID, EXTRACT(YEAR_MONTH FROM orders.OrderDate) AS Month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY suppliers.SupplierID, Month;",
            "SELECT SupplierID, COUNT(DISTINCT ProductID) AS UniqueProducts FROM products GROUP BY SupplierID ORDER BY UniqueProducts DESC LIMIT 1;",
            "SELECT p.SupplierID, p.ProductName, p.UnitPrice FROM products p JOIN (SELECT SupplierID, MAX(UnitPrice) AS MaxPrice FROM products GROUP BY SupplierID) mp ON p.SupplierID = mp.SupplierID AND p.UnitPrice = mp.MaxPrice;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT suppliers.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID;",
            "SELECT s.SupplierID FROM suppliers s WHERE NOT EXISTS (SELECT 1 FROM products p WHERE p.SupplierID = s.SupplierID AND p.Discontinued = 1);",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Revenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion;",
            "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS FastestDelivery FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY suppliers.SupplierID ORDER BY FastestDelivery ASC LIMIT 1;",
            "SELECT COUNT(*) FROM (SELECT OrderID, COUNT(DISTINCT SupplierID) AS SupplierCount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY OrderID) AS OrderSupplierCount WHERE SupplierCount > 1;",
            "SELECT CustomerID, COUNT(DISTINCT suppliers.SupplierID) AS UniqueSuppliers FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY CustomerID ORDER BY UniqueSuppliers DESC LIMIT 1;",
            "SELECT ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SalesRevenue FROM [Order Details] GROUP BY ProductID ORDER BY SalesRevenue DESC LIMIT 5;",
            "SELECT City, STRING_AGG(DISTINCT SupplierID, ', ') AS SupplierIDs FROM suppliers GROUP BY City HAVING COUNT(DISTINCT SupplierID) > 1;",
            "SELECT SupplierID, CAST(SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(ProductID) AS DiscontinuedRatio FROM products GROUP BY SupplierID;",
            "SELECT AVG(Freight) AS AverageFreight FROM orders;",
            "SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
            "SELECT s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.CompanyName ORDER BY TotalRevenue DESC LIMIT 5;",
            "SELECT s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.CompanyName ORDER BY AverageLeadTime DESC;",
            "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsInStock = 0 GROUP BY suppliers.CompanyName ORDER BY COUNT(products.ProductID) DESC LIMIT 1;",
            "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT COUNT(DISTINCT OrderID) AS OrderCount, AVG(Discount) AS AverageDiscount FROM [Order Details] WHERE Discount > 0;",
            "SELECT Country, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY Country ORDER BY SupplierCount DESC LIMIT 1;",
            "SELECT SUM(Freight) AS TotalFreight FROM orders WHERE YEAR(ShippedDate) = YEAR(CURRENT_DATE) - 1;",
            "SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AveragePrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY AveragePrice DESC LIMIT 1;",
            "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT ProductName, ReorderLevel, UnitsOnOrder FROM products ORDER BY ReorderLevel DESC LIMIT 1;",
            "SELECT products.CategoryID, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY products.CategoryID;",
            "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS FastestShippingTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN orders ON orders.OrderID = (SELECT od.OrderID FROM [Order Details] od WHERE od.ProductID = products.ProductID LIMIT 1) GROUP BY suppliers.CompanyName ORDER BY FastestShippingTime ASC LIMIT 1;",
            "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE QUARTER(OrderDate) = QUARTER(CURRENT_DATE - INTERVAL 1 QUARTER) AND YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY CustomerID;",
            "SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1;",
            "SELECT ContactName, ContactTitle, Phone FROM suppliers WHERE City = 'specified city';",
            "SELECT MONTH(OrderDate) AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY OrderMonth ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0) / COUNT(*) AS OnTimePercentage FROM orders;",
            "SELECT suppliers.CompanyName, SUM([Order Details].Quantity) FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY SUM([Order Details].Quantity) DESC LIMIT 3;",
            "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.ProductID = (SELECT ProductID FROM [Order Details] GROUP BY ProductID ORDER BY SUM(Quantity) DESC LIMIT 1);",
            "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SupplierRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY suppliers.CompanyName ORDER BY SupplierRevenue DESC;",
            "SELECT ProductName FROM products WHERE ReorderLevel > UnitsInStock;",
            "SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID;",
            "SELECT s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.CompanyName ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT s.SupplierID, COUNT(DISTINCT p.ProductID) AS ProductCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
            "SELECT DATE_FORMAT(o.ShippedDate, '%Y-%m') AS ShipMonth, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE o.ShippedDate IS NOT NULL GROUP BY ShipMonth;",
            "SELECT s.SupplierID, COUNT(od.ProductID) AS OrderFrequency FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY OrderFrequency DESC LIMIT 1;",
            "SELECT o.CustomerID, od.OrderID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID, od.OrderID;",
            "SELECT s.City, COUNT(s.SupplierID) AS SupplierCount FROM suppliers s GROUP BY s.City ORDER BY SupplierCount DESC LIMIT 1;",
            "SELECT s.SupplierID, AVG(p.UnitPrice) AS AverageUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
            "SELECT o.ShipCountry, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipCountry;",
            "SELECT p.ProductID, p.ProductName FROM products p WHERE p.UnitsInStock <= p.ReorderLevel AND p.Discontinued = 0;",
            "SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageShippingTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID;",
            "SELECT s.SupplierID, COUNT(p.ProductID) AS DiscontinuedCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1 GROUP BY s.SupplierID ORDER BY DiscontinuedCount DESC LIMIT 1;",
            "SELECT p.QuantityPerUnit, COUNT(p.ProductID) AS Frequency FROM products p GROUP BY p.QuantityPerUnit ORDER BY Frequency DESC LIMIT 1;",
            "SELECT DISTINCT s.SupplierID FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE o.RequiredDate < o.ShippedDate;",
            "SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageDeliveryTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID ORDER BY AverageDeliveryTime ASC LIMIT 3;",
            "SELECT s.SupplierID, SUM(o.Freight) AS TotalFreight FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID;",
            "SELECT p.ProductID, p.ProductName, p.UnitsOnOrder FROM products p ORDER BY p.UnitsOnOrder DESC LIMIT 1;",
            "SELECT p.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID;",
            "SELECT 100.0 * COUNT(DISTINCT CASE WHEN od.Discount > 0 THEN o.OrderID END) / COUNT(DISTINCT o.OrderID) AS DiscountedOrderPercentage FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID;",
            "SELECT MAX(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MaxOrderValue, s.CompanyName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.CompanyName ORDER BY MaxOrderValue DESC LIMIT 1;",
            "SELECT suppliers.CompanyName, SUM([Order Details].Quantity) AS ProductCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID ORDER BY ProductCount DESC LIMIT 1;",
            "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgDeliveryTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName;",
            "SELECT ProductName, UnitsOnOrder FROM products ORDER BY UnitsOnOrder DESC;",
            "SELECT suppliers.CompanyName, TO_CHAR(orders.OrderDate, 'YYYY-MM') AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName, OrderMonth;",
            "SELECT CompanyName FROM suppliers WHERE Region = 'specific_region';",
            "SELECT ProductID, COUNT(DISTINCT OrderID) AS TotalOrders FROM [Order Details] GROUP BY ProductID;",
            "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID HAVING COUNT(products.ProductID) = COUNT(CASE WHEN products.Discontinued = 1 THEN 1 END);",
            "SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AvgPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID ORDER BY AvgPrice DESC LIMIT 1;",
            "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS OutOfStockCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsInStock = 0 GROUP BY suppliers.CompanyName;",
            "SELECT suppliers.CompanyName, AVG([Order Details].Discount) AS AvgDiscount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName;",
            "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.RequiredDate < orders.ShippedDate GROUP BY suppliers.CompanyName;",
            "SELECT suppliers.CompanyName, COUNT(DISTINCT products.CategoryID) AS CategoryCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY CategoryCount DESC LIMIT 1;",
            "SELECT suppliers.Country, AVG(products.UnitPrice) AS AvgPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.Country;",
            "SELECT COUNT(*) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE o.ShipCountry = s.Country;",
            "SELECT suppliers.CompanyName, COUNT(DISTINCT products.CategoryID) AS CategoryDistribution FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
            "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.ShippedDate IS NULL GROUP BY suppliers.CompanyName;",
            "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount > 0.2 GROUP BY suppliers.SupplierID;",
            "SELECT suppliers.Region, AVG(products.UnitPrice) AS AvgPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.Region;",
            "SELECT ProductName, ReorderLevel FROM products ORDER BY ReorderLevel DESC;",
            "SELECT CompanyName FROM suppliers WHERE HomePage IS NOT NULL;",
            "SELECT p.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.SupplierID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
            "SELECT ProductName FROM products ORDER BY UnitPrice DESC LIMIT 1;",
            "SELECT ProductName, UnitsOnOrder FROM products WHERE UnitsOnOrder > 0;",
            "SELECT SupplierID FROM products WHERE UnitsInStock < ReorderLevel GROUP BY SupplierID ORDER BY COUNT(*) DESC LIMIT 1;",
            "SELECT ProductID, AVG(Discount) FROM [Order Details] GROUP BY ProductID;",
            "SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgDeliveryTime FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.SupplierID ORDER BY AvgDeliveryTime ASC LIMIT 3;",
            "SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT p.SupplierID, SUM(o.Freight) AS TotalFreight FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.SupplierID;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY SUM(od.Quantity) DESC LIMIT 1;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY OrderMonth ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT SupplierID, COUNT(*) FROM products GROUP BY SupplierID;",
            "SELECT SupplierID FROM suppliers WHERE SupplierID NOT IN (SELECT DISTINCT SupplierID FROM products);",
            "SELECT c.CategoryID, SUM(od.Quantity) FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
            "SELECT SupplierID, ProductID, MAX(OrderFrequency) AS MaxOrderFrequency FROM (SELECT p.SupplierID, od.ProductID, COUNT(*) AS OrderFrequency FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID, od.ProductID) AS ProductOrders GROUP BY SupplierID;",
            "SELECT ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipRegion;",
            "SELECT DISTINCT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE products.Discontinued = 1;",
            "SELECT suppliers.SupplierID, COUNT(products.ProductID) AS NumberOfProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID ORDER BY NumberOfProducts DESC LIMIT 5;",
            "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
            "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT SupplierID, COUNT(DISTINCT CategoryID) AS ProductRange FROM products GROUP BY SupplierID ORDER BY ProductRange DESC LIMIT 1;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month ORDER BY Month;",
            "SELECT ShipVia, COUNT(OrderID) FROM orders GROUP BY ShipVia;",
            "SELECT suppliers.SupplierID, SUM(orders.Freight) AS TotalFreight FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY suppliers.SupplierID;",
            "SELECT suppliers.SupplierID, SUM(products.UnitsOnOrder) AS TotalUnitsOnOrder FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID;",
            "SELECT COUNT(DISTINCT Country) AS NumberOfCountries FROM suppliers;",
            "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
            "SELECT suppliers.SupplierID, products.UnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitPrice = (SELECT MAX(UnitPrice) FROM products) ORDER BY products.UnitPrice DESC;",
            "SELECT COUNT(ProductID) * 100.0 / NULLIF((SELECT COUNT(*) FROM products WHERE UnitsInStock > 0), 0) AS DiscontinuedPercentage FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
            "SELECT p.ProductID, SUM(od.Quantity) AS UnitsOnOrderNotShipped FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID JOIN products p ON od.ProductID = p.ProductID WHERE o.ShippedDate IS NULL GROUP BY p.ProductID;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT products.SupplierID, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM orders INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID INNER JOIN products ON products.ProductID = [Order Details].ProductID GROUP BY products.SupplierID, OrderMonth",
            "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName",
            "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT orders.CustomerID, EXTRACT(YEAR FROM orders.OrderDate) AS OrderYear, EXTRACT(MONTH FROM orders.OrderDate) AS OrderMonth, COUNT(orders.OrderID) AS TotalOrders FROM orders GROUP BY orders.CustomerID, OrderYear, OrderMonth",
            "SELECT products.ProductName, AVG([Order Details].Discount) AS AvgDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY AvgDiscount DESC",
            "SELECT orders.ShipCountry, EXTRACT(MONTH FROM orders.OrderDate) AS OrderMonth, COUNT(orders.OrderID) AS OrderCount FROM orders GROUP BY orders.ShipCountry, OrderMonth",
            "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgDeliveryDays FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID HAVING AvgDeliveryDays > 10",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalUnitsOrdered FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
            "SELECT suppliers.CompanyName, COUNT(DISTINCT products.ProductID) AS ProductVariety FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY ProductVariety DESC LIMIT 1",
            "SELECT suppliers.CompanyName, COUNT(*) AS LateDeliveries FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID WHERE orders.ShippedDate > orders.RequiredDate GROUP BY suppliers.CompanyName ORDER BY LateDeliveries DESC LIMIT 1",
            "SELECT products.CategoryID, AVG(products.ReorderLevel) AS AvgReorderLevel FROM products GROUP BY products.CategoryID",
            "SELECT orders.ShipCountry, AVG(orders.Freight) AS AvgFreight FROM orders GROUP BY orders.ShipCountry;",
            "SELECT suppliers.CompanyName, SUM(products.UnitsInStock) AS TotalUnitsInStock FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName",
            "SELECT products.ProductName, AVG([Order Details].Quantity) AS AvgOrderQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName",
            "SELECT suppliers.CompanyName FROM suppliers WHERE NOT EXISTS (SELECT 1 FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID WHERE products.SupplierID = suppliers.SupplierID AND MONTH(orders.OrderDate) = MONTH(CURRENT_DATE()) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE()))",
            "SELECT orders.ShipCity, COUNT(orders.OrderID) AS TotalOrders FROM orders GROUP BY orders.ShipCity ORDER BY TotalOrders DESC LIMIT 3",
            "SELECT orders.OrderID, SUM([Order Details].Discount * [Order Details].UnitPrice * [Order Details].Quantity) AS TotalDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID ORDER BY TotalDiscount DESC LIMIT 1",
            "SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AvgUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName",
            "SELECT products.CategoryID, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY products.CategoryID, OrderMonth",
            "SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;",
            "SELECT s.SupplierID FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID HAVING AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) > 10;",
            "SELECT p.ProductName, SUM(od.Quantity) AS UnitsSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY UnitsSold DESC LIMIT 3;",
            "SELECT s.SupplierID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;",
            "SELECT p.ProductID, p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT CategoryID, SUM(ReorderLevel) AS TotalReorders FROM products GROUP BY CategoryID ORDER BY TotalReorders DESC;",
            "SELECT s.SupplierID, SUM(p.UnitsOnOrder) AS TotalUnitsOnOrder FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
            "SELECT od.OrderID, od.Discount FROM [Order Details] od WHERE od.Discount = (SELECT MAX(od2.Discount) FROM [Order Details] od2) ORDER BY od.OrderID;",
            "SELECT s.SupplierID, COUNT(CASE WHEN p.Discontinued = 1 THEN p.ProductID END) * 100.0 / COUNT(p.ProductID) AS DiscontinuedPercentage FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
            "SELECT o.ShipVia, AVG(o.Freight) AS AvgFreightCost FROM orders o GROUP BY o.ShipVia;",
            "SELECT DISTINCT s.SupplierID FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.ShipCountry <> s.Country;",
            "SELECT p.ProductID, SUM(od.Quantity) AS TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
            "SELECT ProductName, UnitPrice FROM products ORDER BY UnitPrice DESC LIMIT 10;",
            "SELECT s.SupplierID, EXTRACT(YEAR FROM o.OrderDate) AS OrderYear, EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN \"Order Details\" od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID, OrderYear, OrderMonth;",
            "SELECT s.SupplierID, s.CompanyName, SUM(p.UnitsInStock) AS TotalUnitsInStock FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID, s.CompanyName ORDER BY TotalUnitsInStock ASC LIMIT 1;",
            "SELECT p.ProductID, p.ProductName, COUNT(*) AS ReorderCount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID WHERE od.Quantity >= p.ReorderLevel GROUP BY p.ProductID, p.ProductName ORDER BY ReorderCount DESC;",
            "SELECT COUNT(*) FROM suppliers WHERE Country = 'USA';",
            "SELECT suppliers.SupplierID, CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID, CompanyName ORDER BY AvgLeadTime DESC LIMIT 1;",
            "SELECT ProductID, ProductName, SUM([Order Details].UnitPrice * Quantity * (1 - Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductID, ProductName ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT PostalCode, COUNT(*) AS PostalCodeCount FROM suppliers GROUP BY PostalCode ORDER BY PostalCodeCount DESC LIMIT 1;",
            "SELECT CategoryID, SUM([Order Details].UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY CategoryID;",
            "SELECT AVG(Freight) AS AvgFreight FROM orders;",
            "SELECT suppliers.SupplierID, CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID, CompanyName ORDER BY TotalSales ASC LIMIT 1;",
            "SELECT SupplierID, CompanyName FROM suppliers WHERE SupplierID NOT IN (SELECT DISTINCT SupplierID FROM products WHERE Discontinued = 1);",
            "SELECT suppliers.SupplierID, CompanyName, SUM([Order Details].UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID, CompanyName ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT suppliers.Region, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgDeliveryTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY suppliers.Region;",
            "SELECT ProductID, ProductName, UnitsInStock, ReorderLevel FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT suppliers.SupplierID, CompanyName, COUNT(products.ProductID) AS ProductCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitPrice > 20 GROUP BY suppliers.SupplierID, suppliers.CompanyName ORDER BY ProductCount DESC LIMIT 1;",
            "SELECT (SUM(CASE WHEN orders.ShippedDate > orders.RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS LateShipmentPercentage FROM orders;",
            "SELECT Country, COUNT(*) AS SupplierCount FROM suppliers GROUP BY Country;",
            "SELECT ProductID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY ProductID ORDER BY AvgDiscount DESC LIMIT 1;",
            "SELECT suppliers.SupplierID, CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID, CompanyName HAVING AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) < 5;",
            "SELECT od.ProductID, p.ProductName, COUNT(*) AS OrderCount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY od.ProductID, p.ProductName ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalValue FROM [Order Details];",
            "SELECT SupplierID, COUNT(ProductID) AS DiscontinuedCount FROM products WHERE Discontinued = 1 GROUP BY SupplierID;",
            "SELECT products.ProductID, ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID, ProductName ORDER BY TotalSales DESC;",
            "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS ShortestLeadTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID ORDER BY ShortestLeadTime ASC LIMIT 1;",
            "SELECT COUNT(OrderID) AS DelayedCount FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od INNER JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalQuantity DESC LIMIT 1;",
            "SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID, suppliers.CompanyName;",
            "SELECT EXTRACT(MONTH FROM OrderDate) AS OrderMonth, COUNT(OrderID) AS OrderCount FROM orders GROUP BY OrderMonth;",
            "SELECT AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID;",
            "SELECT ShipCountry, COUNT(OrderID) AS ShipmentCount FROM orders GROUP BY ShipCountry ORDER BY ShipmentCount DESC LIMIT 1;",
            "SELECT SupplierID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY SupplierID;",
            "SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM products p JOIN orders o ON p.SupplierID = o.OrderID GROUP BY p.SupplierID;",
            "SELECT p.SupplierID, COUNT(DISTINCT p.ProductID) AS NumberOfProducts FROM products p GROUP BY p.SupplierID ORDER BY NumberOfProducts DESC;",
            "SELECT od.ProductID, SUM(od.Quantity) AS SalesVolume FROM [Order Details] od GROUP BY od.ProductID ORDER BY SalesVolume DESC LIMIT 1;",
            "SELECT p.SupplierID, SUM(p.UnitsOnOrder) AS TotalUnitsOnOrder FROM products p GROUP BY p.SupplierID;",
            "SELECT s.Country, AVG(p.UnitPrice) AS AveragePrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE s.Country = 'USA' GROUP BY s.Country;",
            "SELECT p.SupplierID, COUNT(*) AS LateOrders FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.ShippedDate > o.RequiredDate GROUP BY p.SupplierID;",
            "SELECT SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM [Order Details] od;",
            "SELECT p.SupplierID, COUNT(*) AS DiscontinuedProducts FROM products p WHERE p.Discontinued = 1 GROUP BY p.SupplierID;",
            "SELECT s.SupplierID FROM suppliers s LEFT JOIN products p ON s.SupplierID = p.SupplierID LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL;",
            "SELECT o.Freight AS MaxFreight, s.CompanyName FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE o.Freight = (SELECT MAX(Freight) FROM orders) LIMIT 1;",
            "SELECT p.SupplierID, SUM(p.UnitsInStock) AS TotalStock FROM products p GROUP BY p.SupplierID;",
            "SELECT s.SupplierID, COUNT(DISTINCT o.ShipCountry) AS DiverseCountries FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID ORDER BY DiverseCountries DESC;",
            "SELECT p.SupplierID, AVG(p.ReorderLevel) AS AverageReorderLevel FROM products p GROUP BY p.SupplierID;",
            "SELECT od.OrderID, od.Discount FROM [Order Details] od WHERE od.Discount = (SELECT MAX(Discount) FROM [Order Details]) ORDER BY od.OrderID;",
            "SELECT TO_CHAR(o.OrderDate, 'YYYY-MM') AS Month, COUNT(o.OrderID) AS NumberOfOrders FROM orders o GROUP BY TO_CHAR(o.OrderDate, 'YYYY-MM');",
            "SELECT p.SupplierID, MAX(CAST(SUBSTRING_INDEX(p.QuantityPerUnit, ' ', 1) AS UNSIGNED)) AS MaxQuantityPerUnit FROM products p GROUP BY p.SupplierID ORDER BY MaxQuantityPerUnit DESC;",
            "SELECT s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID, s.CompanyName ORDER BY AvgLeadTime DESC LIMIT 1;",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(DATE_SUB(CURDATE(), INTERVAL MOD(MONTH(CURDATE()) - 1, 3) MONTH), INTERVAL 3 MONTH) AND o.OrderDate < DATE_SUB(CURDATE(), INTERVAL MOD(MONTH(CURDATE()) - 1, 3) MONTH);",
            "SELECT s.CompanyName, COUNT(p.ProductID) AS DiscontinuedProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1 GROUP BY s.SupplierID ORDER BY DiscontinuedProducts DESC LIMIT 1;",
            "SELECT City, COUNT(DISTINCT SupplierID) AS NumberOfSuppliers FROM suppliers GROUP BY City HAVING COUNT(DISTINCT SupplierID) > 5;",
            "SELECT s.CompanyName, AVG(od.Discount) AS AvgDiscount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.CompanyName;",
            "SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCountry;",
            "SELECT AVG(Freight) AS AvgFreight FROM orders WHERE ShippedDate IS NOT NULL;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalOrdered DESC LIMIT 3;",
            "SELECT p.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.CategoryID ORDER BY Revenue DESC LIMIT 1;",
            "SELECT s.CompanyName, AVG(p.UnitPrice) AS AvgUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName ORDER BY AvgUnitPrice ASC LIMIT 1;",
            "SELECT s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE() GROUP BY s.CompanyName ORDER BY AvgLeadTime ASC LIMIT 1;",
            "SELECT s.CompanyName, SUM(p.UnitsOnOrder) AS TotalUnitsOnOrder FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName;",
            "SELECT CategoryID, AVG(UnitsInStock) AS AvgUnitsInStock FROM products GROUP BY CategoryID;",
            "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM [Order Details] od;",
            "SELECT COUNT(OrderID) AS HighFreightOrders FROM orders WHERE Freight > 100;",
            "SELECT s.CompanyName, COUNT(DISTINCT p.ProductID) AS UniqueProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY UniqueProducts DESC LIMIT 1;",
            "SELECT AVG(DATEDIFF(o.ShippedDate, o.RequiredDate)) AS AvgDaysLate FROM orders o WHERE DATEDIFF(o.ShippedDate, o.RequiredDate) > 0;",
            "SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY TotalSales DESC;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalUnitsOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalUnitsOrdered DESC LIMIT 5;",
            "SELECT s.SupplierID, COUNT(DISTINCT o.ShipRegion) AS RegionCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID GROUP BY s.SupplierID ORDER BY RegionCount DESC;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 1;",
            "SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT s.SupplierID, COUNT(*) AS DiscontinuedCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1 GROUP BY s.SupplierID ORDER BY DiscontinuedCount DESC;",
            "SELECT AVG(o.Freight) AS AvgFreightCost FROM orders o;",
            "SELECT s.SupplierID, COUNT(p.ProductID) AS TotalProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
            "SELECT AVG(od.Discount) AS AvgDiscount FROM [Order Details] od;",
            "SELECT p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT COUNT(*) FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry;",
            "SELECT QuantityPerUnit, COUNT(*) AS ProductCount FROM products GROUP BY QuantityPerUnit ORDER BY ProductCount DESC;",
            "SELECT o.CustomerID, COUNT(DISTINCT o.OrderID) AS DiscountedOrders FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0 GROUP BY o.CustomerID ORDER BY DiscountedOrders DESC;",
            "SELECT Country, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY Country ORDER BY SupplierCount DESC;",
            "SELECT s.City, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID GROUP BY s.City;",
            "SELECT o.ShipVia, AVG(o.Freight) AS AvgFreightCost FROM orders o GROUP BY o.ShipVia ORDER BY AvgFreightCost ASC;",
            "SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT s.SupplierID FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID HAVING AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) < 4;",
            "SELECT p.ProductName, COUNT(od.OrderID) AS OrderCount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1 GROUP BY p.ProductName ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT COUNT(*) AS ProductsToReorder FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT s.SupplierID FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.RequiredDate < o.ShippedDate GROUP BY s.SupplierID;",
            "SELECT s.Country, COUNT(*) AS SupplierCount FROM suppliers s GROUP BY s.Country ORDER BY SupplierCount DESC LIMIT 1;",
            "SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;",
            "SELECT s.City, COUNT(*) AS SupplierCount FROM suppliers s GROUP BY s.City ORDER BY SupplierCount DESC LIMIT 1;",
            "SELECT p.ProductName, s.CompanyName, SUM(od.Quantity) AS SalesVolume FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY p.ProductID, s.CompanyName ORDER BY SalesVolume DESC LIMIT 5;",
            "SELECT s.SupplierID, AVG(od.Discount) AS AverageDiscount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;",
            "SELECT s.SupplierID, AVG(o.Freight) AS AverageFreight FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID;",
            "SELECT s.SupplierID, COUNT(p.ProductID) AS OnOrderCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.UnitsOnOrder > 0 GROUP BY s.SupplierID ORDER BY OnOrderCount DESC LIMIT 1;",
            "SELECT o.OrderID FROM orders o WHERE DATEDIFF(o.ShippedDate, o.OrderDate) > 10;",
            "SELECT s.SupplierID, AVG(p.UnitPrice) AS AveragePrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY AveragePrice DESC LIMIT 1;",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1;",
            "SELECT p.ProductName, s.CompanyName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY p.ProductName, s.CompanyName;",
            "SELECT o.ShipRegion, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM orders o GROUP BY o.ShipRegion ORDER BY AverageLeadTime DESC LIMIT 1;",
            "SELECT s.SupplierID, COUNT(DISTINCT p.CategoryID) AS CategoryCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY CategoryCount DESC LIMIT 1;",
            "SELECT s.SupplierID, (SUM(CASE WHEN p.Discontinued = 1 THEN 1 ELSE 0 END) / COUNT(p.ProductID) * 100.0) AS DiscontinuedPercentage FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
            "SELECT products.SupplierID, MONTH(orders.OrderDate) AS Month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.ShippedDate IS NOT NULL GROUP BY products.SupplierID, MONTH(orders.OrderDate);",
            "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS DiscontinuedProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.Discontinued = 1 GROUP BY suppliers.CompanyName;",
            "SELECT suppliers.CompanyName FROM suppliers LEFT JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.ProductID IS NULL;",
            "SELECT ProductName FROM products ORDER BY UnitsOnOrder DESC LIMIT 3;",
            "SELECT OrderID, Freight FROM orders;",
            "SELECT ProductName FROM products WHERE ReorderLevel < UnitsInStock;",
            "SELECT suppliers.CompanyName, AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName;",
            "SELECT (SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END) / COUNT(*)::DECIMAL) * 100 AS PercentageDiscontinued FROM products;",
            "SELECT suppliers.CompanyName, orders.OrderID FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.ShippedDate > orders.RequiredDate;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= CURRENT_DATE - INTERVAL '6 MONTH';",
            "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName HAVING COUNT(DISTINCT [Order Details].OrderID) > 1;",
            "SELECT City, COUNT(*) AS NumberOfSuppliers FROM suppliers GROUP BY City ORDER BY NumberOfSuppliers DESC LIMIT 1;",
            "SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AveragePrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
            "SELECT ProductName FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].OrderID IS NULL;",
            "SELECT SUM(UnitsInStock) AS TotalUnitsInStock FROM products;",
            "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName ORDER BY AverageLeadTime ASC LIMIT 3;",
            "SELECT OrderID FROM [Order Details] WHERE Discount = (SELECT MAX(Discount) FROM [Order Details]) LIMIT 1;",
            "SELECT s.SupplierID, s.CompanyName, COUNT(DISTINCT p.ProductID) AS NumberOfProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY NumberOfProducts DESC LIMIT 1;",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(LAST_DAY(CURDATE()), INTERVAL 1 MONTH) + INTERVAL 1 DAY AND o.OrderDate <= LAST_DAY(CURDATE() - INTERVAL 1 MONTH);",
            "SELECT City, COUNT(*) AS NumberOfSuppliers FROM suppliers GROUP BY City ORDER BY NumberOfSuppliers DESC LIMIT 5;",
            "SELECT COUNT(*) AS OutOfStockProducts FROM products WHERE UnitsInStock = 0;",
            "SELECT ProductName FROM products WHERE Discontinued = 1;",
            "SELECT s.SupplierID, s.CompanyName, AVG(p.UnitPrice) AS AvgUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID, s.CompanyName ORDER BY AvgUnitPrice DESC LIMIT 1;",
            "SELECT o.OrderID, o.RequiredDate, o.ShippedDate FROM orders o WHERE o.ShippedDate > o.RequiredDate;",
            "SELECT SUM(od.Quantity) AS TotalQuantityOrdered FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
            "SELECT ProductID, ProductName, ReorderLevel, UnitsInStock FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT s.SupplierID, s.CompanyName, COUNT(DISTINCT od.OrderID) AS DiscountedOrders FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0 GROUP BY s.SupplierID ORDER BY DiscountedOrders DESC LIMIT 1;",
            "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalQuantity DESC LIMIT 3;",
            "SELECT s.SupplierID, s.CompanyName FROM suppliers s LEFT JOIN products p ON s.SupplierID = p.SupplierID LEFT JOIN orders o ON p.ProductID = o.ProductID WHERE o.ShippedDate IS NULL AND MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY s.SupplierID, s.CompanyName HAVING COUNT(o.OrderID) = 0;",
            "SELECT ProductName, UnitPrice FROM products ORDER BY UnitPrice DESC LIMIT 5;",
            "SELECT s.SupplierID, s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY s.SupplierID, s.CompanyName;",
            "SELECT s.SupplierID, s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID ORDER BY AvgLeadTime ASC LIMIT 1;",
            "SELECT p.CategoryID, AVG(p.UnitsInStock) AS AvgUnitsInStock FROM products p GROUP BY p.CategoryID;",
            "SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON od.ProductID = p.ProductID GROUP BY s.SupplierID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT p.ProductID, p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT p.ProductID, p.ProductName, s.SupplierID, s.CompanyName FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.Discontinued = 1;",
            "SELECT s.SupplierID, s.CompanyName, AVG(od.Discount) AS AvgDiscount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON od.ProductID = p.ProductID GROUP BY s.SupplierID, s.CompanyName;",
            "SELECT s.SupplierID, s.CompanyName, COUNT(o.OrderID) AS UnshippedOrders FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.ShippedDate IS NULL GROUP BY s.SupplierID, s.CompanyName ORDER BY UnshippedOrders DESC;",
            "SELECT p.SupplierID, EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, COUNT(o.OrderID) AS TotalOrders FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID, OrderMonth;",
            "SELECT City, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY City ORDER BY SupplierCount DESC;",
            "SELECT s.SupplierID, s.CompanyName, p.ProductID, p.ProductName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE s.SupplierID = (SELECT SupplierID FROM (SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1) subquery);",
            "SELECT COUNT(ProductID) AS BelowReorderLevelCount FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT p.SupplierID, SUM(o.Freight) AS TotalFreight FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",
            "SELECT AVG(DATEDIFF(o.RequiredDate, o.OrderDate)) AS AvgDays FROM orders o;",
            "SELECT p.ProductID, p.ProductName FROM products p WHERE NOT EXISTS (SELECT 1 FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE p.ProductID = od.ProductID AND o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR));",
            "SELECT c.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryID;",
            "SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON od.ProductID = p.ProductID JOIN orders o ON o.OrderID = od.OrderID WHERE o.ShippedDate IS NOT NULL GROUP BY s.SupplierID HAVING AvgLeadTime > 10;",
            "SELECT s.SupplierID, s.CompanyName, p.ProductName, p.UnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.UnitPrice = (SELECT MAX(p2.UnitPrice) FROM products p2 WHERE p2.SupplierID = s.SupplierID);",
            "SELECT ProductName, UnitPrice FROM products ORDER BY UnitPrice DESC LIMIT 1 UNION ALL SELECT ProductName, UnitPrice FROM products ORDER BY UnitPrice ASC LIMIT 1;",
            "SELECT s.SupplierID, AVG(p.UnitPrice) AS AvgUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
            "SELECT s.SupplierID, COUNT(DISTINCT o.ShipCountry) AS CountryCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID ORDER BY CountryCount DESC;"
        ],
        "reviews": [
            "Corrected the JOIN condition to connect 'orders' and '[Order Details]' tables directly, which allows calculating the average lead time correctly. Also corrected the alias reference in the HAVING clause to match the column alias 'AvgLeadTime'.",
            "The query correctly calculates the total sales generated by each supplier by joining the suppliers, products, and [Order Details] tables. The GROUP BY clause is appropriately applied on SupplierID and CompanyName, and the SUM calculation aligns with the Total Sales metric definition.",
            "The query is correct. It selects ProductName from the products table where Discontinued is true and the ProductID exists in the Order Details table.",
            "The SQL query is correct for the given question. It calculates the total revenue for each ShipCity and orders the results to obtain the top 5 cities in terms of total order revenue.",
            "The SQL query is correct. It counts the number of orders where the 'ShippedDate' is NULL, indicating that they have not yet been shipped.",
            "The original query is correct. It properly calculates the average discount applied to orders for each supplier by joining the 'Order Details' table with the 'products' table using the 'ProductID' and grouping by 'SupplierID.'",
            "The query is correct. It counts distinct products per supplier and orders them to find the supplier with the most distinct products.",
            "The SQL query correctly calculates the total revenue for each month in 2023. The join between the 'orders' and '[Order Details]' tables is accurately implemented, and the revenue calculation formula is correctly applied. The query correctly filters for the year 2023 and groups by year and month.",
            "The query correctly identifies orders delivered late by comparing ShippedDate to RequiredDate. The logic and syntax are correct given the schema and question.",
            "The query correctly identifies products where the UnitsInStock are less than the ReorderLevel, which matches the business question requirements. The query is correct.",
            "The original query had some issues: the subquery did not join properly with the 'Order Details' and 'products' tables. The corrected query uses proper joins to ensure only products supplied by suppliers are considered in the last year.",
            "The SQL query correctly calculates the average unit price of products supplied by each supplier. The query is structured properly using GROUP BY on SupplierID with AVG() function to compute the average. No changes are needed.",
            "The original query calculates the shipment duration as the difference between ShippedDate and RequiredDate, which is incorrect. The correct calculation should be between RequiredDate and ShippedDate to find out if it was early or late. Correct query: SELECT OrderID, DATEDIFF(RequiredDate, ShippedDate) AS ShipmentDuration FROM orders WHERE ShippedDate IS NOT NULL;",
            "The query correctly lists all orders with a freight cost above the average freight cost by using a subquery to calculate the average and filtering with a WHERE clause. The output should be accurate according to the given schema and requirements.",
            "The original query incorrectly uses MAX instead of AVG and lacks a join with the orders table to filter by year. It assumes OrderDate is in the products table when it's actually in the orders table. The corrected query calculates the average UnitPrice per supplier, taking into account orders from 2023.",
            "The SQL query is correct. It selects the ProductID and calculates the total revenue by multiplying UnitPrice, Quantity, and the discount factor. It then groups by ProductID and orders the results by ProductRevenue in descending order, applying a limit to get the top 3 products.",
            "The query is mostly correct, but the use of the date subtraction syntax requires adjustment to ensure portability. Replaced 'CURRENT_DATE - INTERVAL 2 YEAR' with 'DATE_ADD(CURRENT_DATE, INTERVAL -2 YEAR)' for proper ANSI SQL compliance.",
            "The SQL query is correct and follows the ANSI SQL standard for calculating correlation using the CORR function. The query groups by ProductID and computes the correlation between UnitPrice and Quantity for each product.",
            "The original query has a subquery that incorrectly refers to the entire range for comparison without filtering by SupplierID. The corrected query includes correlating data in the subquery to ensure it compares lead time for each specific supplier.",
            "The original query incorrectly groups by OrderID while finding the maximum discount per order. It does not return the orders with the highest discounts across all records. The corrected query sorts directly by Discount to get the top 10.",
            "The original query incorrectly joins 'orders' with 'products' instead of '[Order Details]'. Additionally, it should include 'suppliers.CompanyName' in the GROUP BY clause to match the SELECT clause.",
            "The original query uses DATE_SUB(CURDATE(), INTERVAL 3 MONTH) and CURDATE() which does not accurately capture the last quarter. Using DATE_TRUNC and adjusting the INTERVAL ensures the query covers the correct range for the last quarter.",
            "The query correctly finds products provided by more than one supplier by grouping products and checking distinct SupplierID count. It is correct.",
            "The original query incorrectly uses OrderDate instead of ShippedDate to determine when the products were shipped. Adjusted the WHERE clause to use ShippedDate.",
            "The query is almost correct. The only change needed is to group by suppliers.CompanyName instead of suppliers.SupplierID for consistency with the SELECT clause.",
            "The SQL query is correct. It selects the OrderID and calculates the average Discount for each order from the [Order Details] table, which aligns with the business question.",
            "The SQL query correctly identifies orders that have been delayed beyond the required date by comparing the ShippedDate with the RequiredDate and calculating the delay duration. There are no mistakes in this query.",
            "The SQL query correctly calculates the total freight cost for each shipping method by grouping the rows in the 'orders' table by 'ShipVia' and summing the 'Freight' column for each group. The query is accurate as per the business question.",
            "The SQL query correctly calculates the total value of products supplied by each supplier. However, the GROUP BY clause should use suppliers.CompanyName instead of SupplierID for accuracy.",
            "The original query incorrectly uses `DISTINCT suppliers.City` which is unnecessary because we want to count distinct suppliers per city and not distinct cities. Additionally, we should group by `suppliers.City` to ensure we gather distinct supplier counts per city before ordering them. The corrected query groups by city and orders by the count of distinct suppliers.",
            "The query correctly retrieves the product names and the number of units in stock from the products table.",
            "The original query incorrectly uses 'Quantity > 5' which checks for quantity of a single product per order rather than total products. Instead, the query should use 'COUNT(ProductID) > 5' with GROUP BY and HAVING to ensure the entire order has more than five products with a discount.",
            "The original query retrieves the names of products, but the question asks for a count of such products. I corrected it to use COUNT to get the number of products.",
            "The original query did not correctly join the 'Order Details' table with the 'orders' table. I've corrected the join condition to link 'products' with 'Order Details' using 'ProductID' and then 'Order Details' with 'orders' using 'OrderID'. Also, grouped by 'suppliers.CompanyName' for clarity.",
            "The query is correct. It joins the products table with the [Order Details] table on ProductID, aggregates the quantities for each product, and orders them in descending order to get the most sold product. LIMIT 1 is used to return the top result.",
            "The original query divided two COUNT results without converting to a floating-point number, which could lead to integer division issues. Added '100.0' to ensure proper calculation of percentage as a decimal value.",
            "The original query correctly retrieves the supplier with the most diverse product category offering by counting distinct categories per supplier and ordering by the count in descending order. The correction ensures grouping by 'CompanyName' for clarity and alignment with the calculated value. The query uses LIMIT 1 for the top result.",
            "The original query was incorrect because it did not join '[Order Details]' with 'orders' and 'products' properly. It also failed to include the 'SupplierID' to associate lead times with specific suppliers.",
            "The SQL query correctly calculates the total revenue attributed to each supplier by joining the relevant tables and summing the revenue components. However, the GROUP BY clause should include 'suppliers.CompanyName' to ensure correct aggregation by company name. The corrected query is:\n\nSELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue \nFROM suppliers \nJOIN products ON suppliers.SupplierID = products.SupplierID \nJOIN [Order Details] ON products.ProductID = [Order Details].ProductID \nGROUP BY suppliers.CompanyName;",
            "The query correctly retrieves the order with the highest freight cost by ordering the 'orders' table by 'Freight' in descending order and limits the result to the top entry. No corrections are needed.",
            "The original query incorrectly used a subquery instead of joining the [Order Details] table. This has been corrected by adding the appropriate JOIN to link the tables.",
            "The query is correct and will return the names of products that are discontinued.",
            "The original query correctly calculates the total sales for each product but should group by p.ProductName instead of p.ProductID, as the ProductName is being selected.",
            "The original query is correct in terms of logic and output, but using JOIN syntax is generally clearer for understanding, as the intention of matching cities between the two suppliers is made explicit.",
            "The SQL query is correct. It calculates the total freight cost for orders that have been shipped by summing the 'Freight' column where the 'ShippedDate' is not null.",
            "The SQL query is correct. It correctly joins the 'suppliers' and 'products' tables on 'SupplierID', filters for discontinued products, groups by 'SupplierID', orders by the count of discontinued products in descending order, and limits the result to the top supplier.",
            "The SQL query correctly identifies orders where the ShippedDate is later than the RequiredDate. No corrections are needed.",
            "The original query correctly calculates the average unit price of all products per supplier but groups by SupplierID. It is better to group by CompanyName to ensure the output is per supplier name, matching the intent of the question.",
            "The original query incorrectly attempts to use a subquery for joining the products and order details tables. The corrected query explicitly joins the [Order Details] table with both products and orders to compute the average lead time for each supplier.",
            "The SQL query is correct. It selects the 'ProductName' from the 'products' table where the 'UnitsInStock' is less than the 'ReorderLevel'. This accurately answers the business question.",
            "The query correctly joins the suppliers and products tables using SupplierID and counts the products for each supplier. It also correctly orders the results in descending order of product count and limits the result to the top supplier. The query is accurate and does not require any changes.",
            "The query correctly calculates the total sales on a monthly basis. However, it lacks a condition to limit the results to the past year. Added a WHERE clause to filter 'OrderDate' for the past year.",
            "The SQL query correctly retrieves the 'ProductName' of products that have 'UnitsOnOrder' equal to zero. The query aligns with the business question.",
            "The original SQL query is correct, but it's better to use table alias consistently by adding 'o' before 'ShipCountry' in SELECT and GROUP BY clauses.",
            "The SQL query correctly calculates the percentage of discontinued products. It counts the total number of discontinued products and divides it by the total number of products, then multiplies by 100 to get the percentage. The query is syntactically and logically correct based on the schema provided.",
            "The original query had an incorrect subquery in the JOIN condition for products. The correct approach is to use a direct JOIN between orders, [Order Details], products, and suppliers. This revision ensures correct retrieval of orders by suppliers from a specified region.",
            "Corrected the SQL query to use 'FETCH FIRST 1 ROW ONLY' for ANSI SQL compliance instead of 'LIMIT 1'. The query correctly calculates the total quantity for each ProductID and retrieves the product with the maximum quantity ordered.",
            "The SQL query correctly calculates the average discount rate for each product by joining the 'products' and 'Order Details' tables on 'ProductID'. The query groups by 'ProductID' and calculates the average discount, matching the business question requirements. The output format is also correct with the inclusion of 'ProductName'.",
            "The original query is not correct because LIMIT 1 returns only the top product overall, not per supplier. To get the most ordered product for each supplier, we can use a common table expression (CTE) or a SUBQUERY to first calculate the total quantity for each supplier-product pair, then find the maximum per supplier. Here is the corrected approach:",
            "The query correctly joins the tables and calculates the total sales. However, the GROUP BY clause should use s.CompanyName instead of s.SupplierID, as we're retrieving the CompanyName in the SELECT clause. The corrected query groups by the company name and orders by total sales to get the top 5 suppliers.",
            "The original query incorrectly joins orders and products directly. It should join orders with [Order Details] first, and then [Order Details] with products based on ProductID.",
            "The query is correct. It uses COUNT(DISTINCT ProductID) to find the number of different products supplied by each supplier and orders the results to find the supplier with the highest count. It limits the results to one, which answers the business question.",
            "The SQL query is correct. It correctly calculates the total units on order for each supplier by grouping the 'products' table by 'SupplierID' and summing the 'UnitsOnOrder' column.",
            "The original query is correct except for the GROUP BY clause, which should specify `products.SupplierID` instead of `SupplierID` to avoid ambiguity and ensure it aligns with the JOIN clause. The provided correction aligns with ANSI SQL standards.",
            "The SQL query is correct. It correctly joins the 'products' table with the 'suppliers' table using the 'SupplierID' and filters the products by the 'Discontinued' status set to 1 (true).",
            "The SQL query is mostly correct and will return the top 5 products with the highest sales. It correctly calculates total sales using the given formula and orders the result in descending order.",
            "The original query incorrectly joined orders with products. The correct join should be between orders and [Order Details], and then [Order Details] with products. The corrected query ensures the calculation of lead time by linking orders to products through [Order Details].",
            "The SQL query is mostly correct, but the GROUP BY clause should specify products.SupplierID instead of just SupplierID.",
            "The SQL query is correct. It selects the city and counts the number of suppliers grouped by city, then orders the results by number of suppliers in descending order, and limits the results to the top city.",
            "The query is correct and retrieves the total freight cost for orders shipped in the previous month.",
            "The provided SQL query correctly finds suppliers who supply more than 5 different categories by grouping the products by SupplierID, counting distinct CategoryID, and applying the HAVING clause to filter the results.",
            "Correct. The query selects the product with the highest reorder level by ordering the products by 'ReorderLevel' in descending order and limiting the result to 1.",
            "The query is correct. It calculates the delay using DATEDIFF between ShippedDate and RequiredDate, filters for delays where ShippedDate is after RequiredDate, and retrieves the order with the longest delay using ORDER BY and LIMIT 1.",
            "The SQL query correctly calculates the average discount applied across all orders by using the AVG function on the Discount column in the [Order Details] table.",
            "The query is correct. It joins the products and suppliers tables on SupplierID and filters for products with UnitsInStock equal to 0.",
            "The SQL query is correct. It selects the Region and counts the number of distinct suppliers in each region, ordering the results by the count in descending order to show regions with the most suppliers first.",
            "The SQL query is correct. It selects the 'CompanyName' from the 'suppliers' table where 'SupplierID' has a product with 'UnitPrice' greater than the average 'UnitPrice' of all products.",
            "The SQL query is correct. It selects SupplierIDs from the suppliers table where the SupplierID does not appear in the list of SupplierIDs from the products table that have discontinued products. This correctly identifies suppliers who have never supplied discontinued products.",
            "The original query is mostly correct but should include a filter to ensure 'ShippedDate' is not null, as orders without a shipped date shouldn't be counted.",
            "The query is correct as it selects the product with the highest difference by calculating UnitsInStock minus UnitsOnOrder, orders them in descending order, and limits the result to the first entry.",
            "The SQL query is incorrect because it joins the 'products' table with 'orders' using 'ProductID' and 'OrderID', which don't have a direct relationship. The correct query should join 'products' with [Order Details] on 'ProductID' and then join 'orders' with [Order Details] on 'OrderID'.",
            "The initial query did not account for the year when filtering for the last month. The corrected query includes both year and month to ensure the correct time frame is selected.",
            "Corrected the join condition. Use products.ProductID = orders.ProductID instead of products.ProductID = orders.OrderID.",
            "The query correctly selects the product name, supplier company name, and units in stock. It also correctly orders by descending stock units and limits the result to 1 record, which aligns with the question. However, ensure the column `UnitsInStock` is prefixed with `products` for clarity.",
            "The SQL query is correct. It successfully joins the 'suppliers' and 'products' tables on 'SupplierID' and groups the results by 'CompanyName' to count the number of products for each supplier.",
            "The SQL query correctly identifies products with units in stock less than the reorder level, hence indicating a need for reordering. No corrections needed.",
            "The original query missed a few critical points: it didn't account for the discount in calculating TotalSales, didn't join with the 'orders' table to access 'OrderDate', and used a non-standard SQL 'TOP 3' syntax instead of 'LIMIT 3'. The corrected query addresses these issues.",
            "The SQL query is correct. It selects the total freight cost grouped by country, which matches the business question.",
            "The SQL query correctly identifies the most frequent shipping method by counting the occurrences of each 'ShipVia' value in the 'orders' table. To improve clarity, the COUNT(*) should be aliased as 'frequency'.",
            "The SQL query incorrectly identifies the time frame for 'last quarter'. It should compare the shipped date with the required date, and the quarter calculation needs to be fixed to capture the last full quarter. A corrected query is: SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate AND QUARTER(OrderDate) = QUARTER(DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)) AND YEAR(OrderDate) = YEAR(DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH));",
            "The SQL query correctly identifies suppliers located in 'USA' and counts the number of products they supply. The query joins the 'suppliers' and 'products' tables on SupplierID, filters by Country = 'USA', and groups by CompanyName to count the products for each supplier.",
            "The provided query calculates the average discount per item, not per order. To find the average discount per order, calculate the average discount for each order individually and then take the average of these results.",
            "The original query only checks if a product is discontinued. It's missing the context of the supplier. The corrected query joins the products and suppliers tables to include supplier information.",
            "The SQL query is correct as it selects the CategoryID and calculates the average UnitPrice, grouping by CategoryID to ensure averages are calculated for each category.",
            "The original query was missing the discount in the calculation of total sales. The corrected query now includes multiplying by (1 - [Order Details].Discount) to account for discounts.",
            "The SQL query correctly retrieves the 'OrderID' for orders that were never shipped by checking for a NULL value in the 'ShippedDate' column.",
            "The SQL query is correct. It groups by the 'Region' field in the 'suppliers' table and orders the results by the count in descending order, effectively finding the most common region.",
            "The SQL query correctly identifies the countries with the highest number of orders by counting the 'OrderID' for each 'ShipCountry' and ordering the results in descending order. This query is correct and adheres to the business question.",
            "Corrected the query to match the demand requirement by checking UnitsOnOrder = 0 and sort by UnitsInStock for high demand indication.",
            "The SQL query is correct. It calculates the total sales revenue per country, orders the countries by total revenue in descending order, and limits the results to the top five.",
            "The query incorrectly joins 'orders' and 'products' using 'OrderID' and 'ProductID', which do not have a direct relationship. The correct join should be between 'orders' and '[Order Details]' using 'OrderID', and then join 'products' on 'ProductID'. The corrected query is:\nSELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;",
            "The query is correct. It selects supplier IDs from the 'products' table where the products are marked as discontinued and counts these products for each supplier.",
            "The SQL query correctly calculates the total sales revenue for each supplier by summing the discounted prices of the products in the Order Details table, grouped by Supplier ID from the products table. The query appears correct based on the provided schema and business question.",
            "The original query did not account for the case where suppliers might not supply any products. This can lead to incorrect results. Adding 'AND p.ProductID IS NOT NULL' ensures only suppliers that have products but no orders are returned.",
            "The SQL query correctly calculates the total value of products on backorder for each supplier by multiplying the unit price by the units on order and grouping the results by SupplierID. No corrections are needed.",
            "The SQL query correctly calculates the average unit price for each supplier and orders the results in descending order by the average unit price. The query is accurate for the given question.",
            "The SQL query correctly calculates the total quantity of products ordered for each supplier by joining the [Order Details] and products tables on ProductID and then grouping by SupplierID. No corrections needed.",
            "The provided SQL query correctly calculates the total backorders for each supplier by summing up 'UnitsOnOrder' for each supplier. It uses GROUP BY on 'SupplierID' and orders the results in descending order of 'TotalBackorders' to identify the supplier with the highest number of backorders. The query is correct and aligns with the business question.",
            "The query incorrectly calculates the total freight costs for each supplier's products. Freight costs are associated with the entire order, not per product. The query would incorrectly count the freight cost multiple times if an order includes multiple products from different suppliers. Instead, you should calculate the total freight costs associated with each supplier by considering orders as a whole, not product-wise splits. Here's a correct version: SELECT p.SupplierID, SUM(o.Freight) AS TotalFreight FROM orders o JOIN (SELECT DISTINCT OrderID, ProductID FROM [Order Details]) od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;",
            "The query correctly calculates the total revenue for each product and associates it with the correct supplier. The use of SUM and GROUP BY with the correct columns ensures that the revenues are aggregated by product and supplier. The ORDER BY TotalRevenue DESC LIMIT 5 part correctly retrieves the top 5 products by total revenue. The query is correct as written and adheres to the business question.",
            "The SQL query correctly calculates the average discount offered on products from each supplier by joining the [Order Details] table with the products table on ProductID, and then grouping by SupplierID. The query is accurate and adheres to the schema provided.",
            "The original query incorrectly joins 'products' to 'orders' directly on ProductID and OrderID, which should instead be joined through '[Order Details]'. The corrected query properly joins the related tables and uses DISTINCT to avoid duplicate entries.",
            "The SQL query is correct. It correctly counts the number of suppliers per country and orders the results in descending order to identify the countries with the most suppliers.",
            "The SQL query correctly calculates the average reorder level for products for each supplier by grouping the results by SupplierID and calculating the average of ReorderLevel.",
            "The original query incorrectly checks 'o.OrderDate' instead of 'o.ShippedDate' for shipments in the last month. It also does not handle suppliers without shipped orders properly. The corrected query uses LEFT JOIN and checks for orders never shipped or shipped before the last month, ensuring suppliers with no shipments are included.",
            "The original query incorrectly joins 'products' and 'orders' tables directly on 'ProductID' and 'OrderID'. The correct approach is to join 'products' with '[Order Details]' on 'ProductID' and then join '[Order Details]' with 'orders' on 'OrderID.' This ensures that the calculation of average lead time is associated with the correct product orders.",
            "The SQL query is correct. It selects the City and counts the number of suppliers in each city, groups by City, orders by SupplierCount in descending order, and limits the results to the top 3 cities.",
            "The original query did not account for integer division, which would result in an inaccurate percentage. By casting COUNT(*) to FLOAT, we ensure decimal division.",
            "The original query correctly identifies suppliers with zero discount products, but adding DISTINCT ensures elimination of duplicate supplier entries.",
            "The SQL query is correct. It properly joins the suppliers, products, and order details tables, calculates the total units delivered per supplier using SUM, and orders the result by TotalUnits in descending order to find the supplier with the highest total. The LIMIT 1 clause ensures only the top supplier is returned.",
            "The SQL query is correct and answers the business question appropriately. It correctly calculates the total sales by summing the revenue from orders for each supplier's products. It joins the 'suppliers', 'products', and '[Order Details]' tables correctly and groups the results by 'SupplierID' to get the total sales per supplier. Finally, it orders the results in descending order of total sales and limits the output to the top 5 suppliers.",
            "The SQL query is correct. It correctly selects the 'Country', counts distinct 'SupplierID' in each country, groups the results by 'Country', and orders them in descending order of unique suppliers.",
            "The SQL query is correct. It successfully joins the 'suppliers' and 'products' tables and filters for products that have not been discontinued, matching the business question.",
            "The original query is mostly correct, but for proper ANSI SQL compatibility, it's important to ensure that the expression in SELECT used with an alias (Month) is repeated exactly in the GROUP BY clause. I've adjusted it accordingly. The use of DATE_FORMAT in a standard SQL environment may need to be replaced with the appropriate function based on the SQL dialect used.",
            "The SQL query is correct and accurately identifies products where the reorder level has been reached by comparing UnitsInStock to ReorderLevel.",
            "The original query incorrectly joins the 'products' and 'orders' tables directly using SupplierID and ShipVia, which is not related. Instead, it should join the 'products' table with '[Order Details]' through ProductID and then join '[Order Details]' with 'orders' using OrderID.",
            "The original query is mostly correct, but the GROUP BY clause should include both od.ProductID and p.ProductName for completeness and correctness. The rest of the query is accurate.",
            "The SQL query is correct. It correctly joins the 'products' and '[Order Details]' tables on 'ProductID' and calculates the TotalRevenue for each CategoryID by grouping on 'CategoryID'. The formula used for calculating revenue is accurate, as it accounts for the quantity, unit price, and discount.",
            "The SQL query is correct. It appropriately joins the 'suppliers' and 'products' tables, calculates the average product price per supplier, and selects the supplier with the lowest average. Overall, the syntax and logic align with the question's requirements.",
            "The query correctly calculates the number of unique products each supplier offers by counting distinct product IDs and grouping by supplier IDs. The query is correct.",
            "The provided SQL query is correct and accurately retrieves the top 3 cities with the highest number of suppliers by counting the SupplierID for each city and ordering the results in descending order by the count.",
            "The original query incorrectly joined suppliers with orders using 'ShipVia', which should refer to a shipping method, not a supplier. The correct join requires linking 'suppliers' to 'products', 'Order Details', and then 'orders' to check if any of their products have been shipped in the past year. 'HAVING COUNT(o.OrderID) = 0' ensures there are no orders in the past year.",
            "The provided SQL query correctly identifies suppliers that have products with zero stock available. It performs a join between the 'suppliers' and 'products' tables on 'SupplierID' and filters where 'UnitsInStock' is zero. No corrections needed.",
            "The initial SQL query incorrectly joined the 'orders' table with 'suppliers' using the 'ShipVia' column. The correct join should be on 'products' tied to 'suppliers' and then link 'Order Details' to 'orders' to calculate the lead time.",
            "The query correctly joins suppliers, products, and order details to calculate total revenue for each supplier. It groups by SupplierID and orders by TotalRevenue in descending order, correctly using LIMIT 1 to get the most profitable supplier. The query is correct.",
            "The original query selects ProductID but does not count them. The revised query counts products supplied by more than one supplier.",
            "The provided SQL query correctly calculates the average freight cost per country by grouping the data by ShipCountry and applying the AVG function to the Freight column. There are no mistakes in the query.",
            "The original query incorrectly joined products to orders using 'products.SupplierID = orders.CustomerID'. Correct joins should match products to [Order Details] using ProductID, and [Order Details] to orders using OrderID.",
            "Corrected the query to ensure the YEAR condition aligns with the previous month calculation.",
            "The query is mostly correct. The GROUP BY clause should group by suppliers.CompanyName instead of suppliers.SupplierID to align with the selected fields and prevent SQL errors.",
            "The SQL query correctly retrieves all orders with a freight cost exceeding $100. There are no mistakes in the query.",
            "The query correctly finds the total number of units on order for each supplier by joining the suppliers and products tables on the SupplierID, and then grouping by SupplierID. The aggregation function SUM is correctly used for UnitsOnOrder. The query is correct.",
            "The original query incorrectly joined orders and products on SupplierID and CustomerID. Instead, it should join via the Order Details table to relate orders to products. The corrected query now uses a subquery to properly link orders to products, which ensures accurate supplier analysis.",
            "The query is mostly correct, but the GROUP BY should use suppliers.CompanyName instead of suppliers.SupplierID.",
            "The original query is mostly correct, but it should include 'products.ProductName' in the GROUP BY clause to match selected fields. Other than that, the query accurately computes total revenue and returns the product with the highest total.",
            "The query is correct and calculates the average discount for each product correctly by joining the products table with the Order Details table and using the AVG function to compute the average discount, grouping by ProductID.",
            "The original query had an error in the JOIN condition between products and orders. It incorrectly joined on products.SupplierID = orders.CustomerID. The correct join should involve the [Order Details] table to link products and orders properly.",
            "The SQL query is correct. It properly joins the categories, products, and [Order Details] tables to compute the total units sold for each category.",
            "The query incorrectly uses UnitsOnOrder > ReorderLevel to determine frequently reordered products. This logic implies that only when a product exceeds its reorder level should it be counted, which isn't the correct measure of frequency. Instead, to find the most frequently reordered product, you should take into account the total number of reorders. We should check the number of times a product has been ordered overall, irrespective of the current status compared to the reorder level. Here's the corrected query using [Order Details] to count the frequency of orders for each product:\n\nSELECT ProductID, COUNT(*) AS ReorderCount\nFROM [Order Details]\nGROUP BY ProductID\nORDER BY ReorderCount DESC\nLIMIT 1;",
            "The SQL query correctly retrieves the orders where the shipped date is later than the required date by simply comparing the ShippedDate and RequiredDate columns in the orders table. No corrections are necessary.",
            "The original query was almost correct. The only change needed was in the GROUP BY clause, where it should group by suppliers.CompanyName instead of suppliers.SupplierID, for consistency in selecting the CompanyName.",
            "The SQL query is mostly correct. However, it's better to include suppliers.CompanyName in the GROUP BY clause to adhere strictly to SQL standards. Here's the revised query: SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID, suppliers.CompanyName ORDER BY SUM(products.UnitsInStock) DESC LIMIT 1;",
            "The original query lists product names that have never been ordered. Since the question asks for the number of such products, we need to use COUNT instead of listing product names.",
            "The provided SQL query correctly identifies the least frequently ordered product by grouping the Order Details by ProductID and counting the occurrences. The query then orders the results ascending by OrderFrequency and limits the output to one result, which accurately answers the business question.",
            "The original query incorrectly summed the freight costs, which are already provided per order in the 'orders' table. The corrected query selects the OrderID and the Freight column directly as there is no need for aggregation.",
            "The SQL query is correct. It retrieves product names along with their unit prices and the corresponding supplier companies. It orders the results by unit price in descending order and limits the output to the top 5 products, which aligns with the business question.",
            "The query is mostly correct, but the table name \"Order Details\" should be enclosed in double quotes or backticks as it's a reserved name. Additionally, ensure the SQL dialect supports DATE_FORMAT. Otherwise, use a suitable alternative like EXTRACT(YEAR from OrderDate) and EXTRACT(MONTH from OrderDate).",
            "The query is correct. It properly counts the number of products where the units in stock are less than the reorder level.",
            "The SQL query correctly lists all suppliers from a specific region along with their contact names. The 'WHERE' clause filters by the specified region, ensuring the correct results are returned.",
            "The query correctly joins the 'products' table with the '[Order Details]' table using the 'ProductID' as the key. It sums up the sales value for each product and orders the results in descending order of total sales value. The LIMIT 1 clause correctly fetches the product with the highest sales value. The query is correct as per the given requirements.",
            "The original query is mostly correct, but it does not use COUNT(DISTINCT [Order Details].OrderID), which ensures unique orders are counted. The corrected query uses DISTINCT to count unique orders for each product.",
            "The SQL query is correct. It accurately counts the number of suppliers per city and orders the results in descending order by the number of suppliers.",
            "The SQL query is correct. It correctly joins the suppliers, products, and [Order Details] tables to calculate the total quantity of products ordered per supplier by summing the quantities and grouping the results by the supplier company name.",
            "The original query is correct. It appropriately selects orders where the shipped date is later than the required date.",
            "The SQL query is correct and accurately calculates the total revenue for products that are not discontinued by joining the 'products' and '[Order Details]' tables and applying the correct filter for discontinued products.",
            "The SQL query is incorrect because it uses 'threshold' as a placeholder. In ANSI SQL, placeholders for parameters must be replaced by actual values or handled using a parameterized query technique specific to the environment. Replace 'threshold' with a specific numeric value or use a parameterized method in your application code.",
            "The SQL query is correct. It joins the suppliers and products tables on SupplierID and uses COUNT and GROUP BY to find the supplier with the maximum number of products, then orders by TotalProducts in descending order and limits the result to 1, correctly answering the business question.",
            "The query is mostly correct, but there is no DATE_FORMAT function in ANSI SQL. Instead, you can use the EXTRACT function to compare the year and month separately. Also, 'specific month' needs to be replaced with actual values for year and month to work properly. Here's the corrected query:\n\nSELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales \nFROM suppliers \nJOIN products ON suppliers.SupplierID = products.SupplierID \nJOIN [Order Details] ON products.ProductID = [Order Details].ProductID \nJOIN orders ON [Order Details].OrderID = orders.OrderID \nWHERE EXTRACT(YEAR FROM orders.OrderDate) = specific_year AND EXTRACT(MONTH FROM orders.OrderDate) = specific_month \nGROUP BY suppliers.CompanyName;",
            "The SQL query is correct. It calculates the average unit price of all products by using AVG on the UnitPrice column in the products table.",
            "The SQL query is correct and matches the business question. It retrieves the product names from the 'products' table where 'UnitsOnOrder' equals zero.",
            "Corrected to use 'products.CategoryID' instead of 'categories.CategoryID' as 'categories' table isn't referenced in the schema.",
            "The provided query is almost correct but needs a slight adjustment for accurate division and return a decimal value. Multiplying by 100.0 ensures decimal arithmetic, giving the correct percentage format.",
            "The SQL query is incorrect. The JOIN condition is wrong. It should join the 'products' table using the 'SupplierID' from the 'products' table and not the 'OrderID'. Also, it should join with the '[Order Details]' table to correctly map orders to products. Here is the corrected query: SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS Avg_Lead_Time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID.",
            "The query correctly calculates the total sales for each supplier using the formula provided in the business metrics definition. It joins the necessary tables: suppliers, products, and [Order Details]. The GROUP BY clause is correctly used to aggregate the sales per supplier, and the ORDER BY clause sorts the results by total sales in descending order. The LIMIT 1 clause ensures that only the supplier with the highest total sales is returned. Therefore, the query is correct and requires no changes.",
            "The SQL query is mostly correct but the use of INTERVAL in the MONTH and YEAR functions is incorrect according to ANSI SQL standards. Correct it to use DATEADD or similar approach in standard SQL.",
            "Correct query. It retrieves the product name and the number of units on order for each product from the products table.",
            "The SQL query is correct. It joins the 'Order Details' table with the 'products' table using the ProductID, counts the number of times each product is ordered, groups the results by product name, orders by the order count in descending order, and limits the result to the most frequently ordered product.",
            "The original query is mostly correct but it should count the number of distinct products by counting ProductID, not just checking the Discontinued field. This ensures we calculate the number of discontinued products correctly.",
            "The SQL query is correct. It accurately retrieves the average unit price of products supplied by each supplier by joining the 'suppliers' and 'products' tables on 'SupplierID' and calculating the average unit price with a GROUP BY clause on 'CompanyName'.",
            "The original query used subqueries and JOINs in an inefficient manner, potentially missing records. The corrected query uses proper JOINs across all necessary tables and DISTINCT to ensure uniqueness.",
            "The SQL query is correct. It correctly selects the product name and reorder level for products that have zero units in stock.",
            "The SQL query correctly answers the question by counting the number of suppliers in each city, ordering the results by the count in descending order, and limiting the output to the top result. The query is correct as per the ANSI SQL standard.",
            "The original query fails to correctly determine the last quarter when the current month is in the first quarter of the year. The correction accounts for the year adjustment necessary when dealing with the first quarter.",
            "The SQL query is correct and aligns with the business question. It correctly sums up the freight costs from the orders where the ShippedDate is not null, indicating the orders that have been shipped.",
            "The query is correct. It correctly calculates the average discount from the [Order Details] table.",
            "The initial query incorrectly joins the 'orders' and 'products' tables. It should join 'orders' to '[Order Details]', and then '[Order Details]' to 'products'. This correction ensures the calculation of average lead time is accurate based on orders linked through order details.",
            "The SQL query is correct. It selects product names and calculates total revenue by multiplying unit price, quantity, and the discount factor from the [Order Details] table. It joins with the products table to access product names. The query groups by product names, orders by total revenue in descending order, and limits the results to the top 5 products.",
            "The SQL query correctly counts the number of orders shipped last month by comparing the month and year of the ShippedDate to the previous month. This is accurate and follows the ANSI SQL standard, assuming the use of appropriate date functions. Ensure that the database being used supports the syntax for date manipulation, such as CURRENT_DATE and INTERVAL. The logic is sound and will produce the correct result.",
            "The current query does not correctly identify suppliers with no orders this year. The condition 'YEAR(orders.OrderDate) != YEAR(CURRENT_DATE)' may incorrectly exclude orders from other years, as it checks for inequality. Also, since we want suppliers with no orders at all this year, we should specifically look for records that do not exist this year. The correct query should examine suppliers that have no matching orders within the current year. Here's the corrected query: SELECT suppliers.CompanyName FROM suppliers LEFT JOIN products ON suppliers.SupplierID = products.SupplierID LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID LEFT JOIN orders ON [Order Details].OrderID = orders.OrderID AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) WHERE orders.OrderID IS NULL GROUP BY suppliers.CompanyName",
            "The provided SQL query is correct. It calculates the count of products with a unit price greater than the average unit price.",
            "The SQL query correctly retrieves the total quantity of products shipped to each country. The JOIN between 'Order Details' and 'orders' on 'OrderID' and the grouping by 'ShipCountry' are appropriate for the question.",
            "The SQL query is correct. It calculates the total discount for each product by multiplying the product's unit price, discount, and quantity. It joins the '[Order Details]' and 'products' tables on ProductID, groups by product name, orders by the total discount in descending order, and limits the result to the product with the highest discount.",
            "The original query failed to join the orders table correctly with the products table. The corrected query ensures that the link between products and orders is made via the [Order Details] table.",
            "The SQL query correctly calculates the total sales for each supplier by joining the 'suppliers', 'products', and '[Order Details]' tables. It then orders the results by 'TotalSales' in descending order and limits the output to the top supplier, which aligns with the business question. No changes are necessary.",
            "The SQL query correctly counts the number of discontinued products for each supplier. It joins the suppliers and products tables on SupplierID, filters products where Discontinued is 1, and groups the results by CompanyName. No corrections are needed.",
            "The original query incorrectly references 'Order Details' without joining to the 'orders' table, which contains 'OrderDate'. Also, 'OrderDate' should be accessed from the 'orders' table. The corrected query includes a join to 'orders' and filters by both month and year to accurately capture last month's data.",
            "The original query is incorrect because p.ProductID should be linked to the order details and not directly to orders. There is a mismatch in the JOIN criteria, 'p.ProductID = o.ProductID' should be corrected to a link via '[Order Details]' to match the order and product IDs.",
            "The SQL query is correct. It counts the number of orders where the ShippedDate is later than the RequiredDate, which matches the business question.",
            "Added a necessary JOIN between [Order Details] and orders to access the OrderDate for filtering by year.",
            "The original query does not account for averaging the discount per order. The inclusion of the orders table is necessary to accurately average discounts per order for each supplier.",
            "The SQL query correctly selects the names of suppliers who have products with stock levels below their reorder level by joining the 'suppliers' and 'products' tables on 'SupplierID' and applying the specified condition in the WHERE clause. The query is correct and adheres to the business question.",
            "The original query had an issue where it attempted to subtract entire subqueries directly and failed to address division to ensure proper precision. It also neglected joining the products table to access SupplierID. This revised query correctly calculates the percentage of orders from multiple suppliers by finding total distinct OrderIDs, subtracting those with a single supplier, and appropriately multiplying by 100.0 for decimal accuracy.",
            "The original query incorrectly references 'od.OrderDate', which does not exist in the [Order Details] table. The 'OrderDate' should be taken from the 'orders' table. The corrected query joins the 'orders' table and filters based on 'o.OrderDate'.",
            "The query is correct. It joins the necessary tables to count distinct orders for each supplier and sorts the result by the number of orders in descending order.",
            "The query is correct and retrieves the order with the highest freight cost by ordering the 'orders' table by 'Freight' in descending order and limiting the result to 1.",
            "The SQL query correctly selects products where the UnitsInStock is zero and the product is not discontinued. There are no syntax or logical errors.",
            "The SQL query correctly calculates the total number of orders for each shipping country by using GROUP BY on the 'ShipCountry' field and counting the orders. The query is accurate and adheres to the business question.",
            "The provided SQL query correctly joins the suppliers and products tables, groups by the supplier's company name, and counts distinct product categories to determine diversity. It orders the results in descending order and limits the output to the top supplier, which answers the business question accurately.",
            "The original query mistakenly calculated total revenue rather than analyzing the correlation between UnitPrice and Quantity. The corrected query includes both UnitPrice and the average Quantity ordered, enabling an analysis of their relationship.",
            "The original query incorrectly joins 'products' directly with 'orders', but it should join 'products' with '[Order Details]' to obtain the correct 'OrderID' before joining with 'orders'. Otherwise, it fails to calculate the supplier's delivery times accurately. The corrected query fixes this join issue.",
            "Corrected the SQL query by properly joining 'Order Details' to 'products' and 'orders'. The original query incorrectly joined 'products' to 'orders' directly using ProductID and OrderID.",
            "The SQL query is almost correct, but the use of CURDATE() depends on the SQL dialect. In ANSI SQL, using CURRENT_DATE is more universal. The corrected query uses CURRENT_DATE instead of CURDATE().",
            "The query is correct; it accurately counts products with UnitsInStock equal to zero, groups and orders suppliers by this count, and limits the result to the supplier with the highest count.",
            "The query calculates the total quantity ordered for each product in the last three months, which may not align with 'last quarter' that typically refers to the strict calendar quarters. Consider adjusting the query to match fiscal quarters, such as using a date range specific to Q1, Q2, Q3, or Q4. The current implementation uses a rolling 3-month window.",
            "The query is correct. It correctly selects the names of products that have been discontinued and their corresponding supplier companies by joining the products and suppliers tables on SupplierID and filtering for discontinued products.",
            "The SQL query correctly counts the number of orders where the ShippedDate is later than the RequiredDate. It aligns with the business question as it queries the orders table, filtering for late shipments, and counts them using COUNT(OrderID). No corrections are needed.",
            "The SQL query correctly answers the business question. It selects the shipping country and calculates the total freight cost incurred for each shipping country by summing the Freight column from the orders table, grouping by ShipCountry.",
            "The original query does not correctly calculate the top three products by sales revenue for each supplier, because it applies LIMIT 3 globally across all results instead of within each supplier group. Here is the corrected query:\n\nSELECT SupplierID, ProductName, Revenue FROM (SELECT p.SupplierID, p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue, ROW_NUMBER() OVER (PARTITION BY p.SupplierID ORDER BY SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) DESC) AS rn FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID, p.ProductName) subquery WHERE rn <= 3;",
            "The original query used MAX function incorrectly with GROUP BY. To find the highest discount, you need to check which rows have the maximum discount value. The revised query uses a subquery to get the maximum discount and filters the results accordingly.",
            "The original query incorrectly uses '<' instead of '>=' to find products that have not reached their reorder level. Also, it didn't count the number of products; it listed their names and stock.",
            "The SQL query is correct. It accurately calculates the average unit price of products for each supplier by joining the suppliers and products tables on SupplierID and grouping the results by supplier company name.",
            "The provided SQL query correctly answers the business question. It joins the products table with the [Order Details] table on ProductID, filters for products with UnitsInStock less than 10, and groups the results by ProductID to calculate the total units ordered for each product. The query is correct as per the requirements.",
            "The original query incorrectly calculates 'TotalUnitsSupplied' by summing only 'UnitsInStock'. It should include both 'UnitsInStock' and 'UnitsOnOrder' to accurately reflect all units supplied. Corrected query is provided.",
            "The query correctly retrieves the order with the highest freight cost and the destination country using ORDER BY and LIMIT 1. No corrections needed.",
            "The original query is incorrect because it incorrectly joins products with orders using ProductID and OrderID. It also doesn't consider SupplierID. The corrected query joins the orders with [Order Details] to get the ProductID, then joins with products, and uses SupplierID with a condition for shipped dates.",
            "Correct. The query accurately counts the unique ProductIDs for each CustomerID.",
            "The query correctly calculates the average discount percentage by multiplying the average Discount by 100. It uses the correct table and column. The query is syntactically and logically correct.",
            "The original query incorrectly used MAX instead of AVG to find the average product price. I corrected the function and the ORDER BY clause to properly determine the supplier with the highest average product price.",
            "The original query is correct. It correctly counts the distinct values of ShipVia from the orders table to determine how many different shipping methods have been used.",
            "The SQL query is correct. It calculates the total sales revenue for each supplier and orders the results to find the supplier with the highest revenue.",
            "The original query incorrectly joins 'orders' using 'ProductID' which doesn't exist directly in 'orders'. The correct join path is through '[Order Details]' to 'orders' using 'OrderID'.",
            "The original query is mostly correct, but there is a small issue. The function DATE_SUB and CURDATE() are not part of standard ANSI SQL. For broader compatibility, use a DATE function like CURRENT_DATE and interval notation. Here\u2019s the revised version: SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate > CURRENT_DATE - INTERVAL '1 YEAR' GROUP BY s.SupplierID ORDER BY TotalRevenue DESC LIMIT 1;",
            "The query correctly counts the number of active suppliers by checking for products that are not discontinued. The EXISTS clause ensures that only suppliers with active products are considered, which accurately addresses the business question.",
            "The query correctly attempts to find products not ordered in the past six months using LEFT JOIN to allow for products without orders. However, it incorrectly uses DATE_SUB, which is not ANSI SQL. DATEADD should be used instead to subtract six months from the current date. Also, ensure CURRENT_DATE is utilized in place of CURDATE for ANSI compatibility.",
            "The SQL query is correct. It properly joins the categories, products, and order details tables, and calculates the total sales for each product category as required by the business question.",
            "The original query incorrectly joined 'orders' table directly to 'products' table using 'OrderID' and 'ProductID'. The correct join should be between 'products' and '[Order Details]' on 'ProductID', and then '[Order Details]' with 'orders' on 'OrderID'.",
            "The SQL query correctly lists all suppliers with the total number of products they supply. The LEFT JOIN ensures that suppliers with no products are still included, and the use of COUNT aggregates the products per supplier accurately.",
            "The SQL query is correct. It selects the SupplierID from the suppliers table and counts the number of discontinued products by joining on the products table with a condition checking for discontinued products. It groups by SupplierID, orders by the count in descending order, and limits the result to the top entry, which answers the business question accurately.",
            "The initial query incorrectly joins products and orders on ProductID and OrderID, which are unrelated. The correct join should be between [Order Details] and orders on OrderID. We sum the Quantity from [Order Details] for orders where the RequiredDate is past and ShippedDate is null.",
            "The query incorrectly calculates the 'last quarter' as the last 3 months from the current date. Instead of using DATE_SUB with INTERVAL 3 MONTH, the query should align with the calendar quarter. It should identify the start and end dates of the last quarter. Here's the corrected query: \n\nSELECT p.ProductName, \n       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue \nFROM products p \nJOIN [Order Details] od ON p.ProductID = od.ProductID \nJOIN orders o ON od.OrderID = o.OrderID \nWHERE o.OrderDate BETWEEN DATE_SUB(LAST_DAY(DATE_SUB(CURDATE(), INTERVAL EXTRACT(MONTH FROM CURDATE()) - 1 MONTH)), INTERVAL 3 MONTH) \nAND LAST_DAY(DATE_SUB(CURDATE(), INTERVAL EXTRACT(MONTH FROM CURDATE()) - 1 MONTH)) \nGROUP BY p.ProductName \nORDER BY TotalRevenue DESC \nLIMIT 5;",
            "The original query is mostly correct, but the alias 'o' is unnecessary in this context. The table name 'orders' can be used directly without an alias.",
            "Corrected the join on orders table via [Order Details]. Used COUNT(DISTINCT s.SupplierID) to avoid duplicate counting due to multiple products per supplier.",
            "The original query incorrectly calculates the minimum discount for each supplier, whereas the question asks for the smallest average discount. The corrected query calculates the average discount and orders by this average, selecting the supplier with the smallest value.",
            "The query correctly identifies orders with a shipping delay by checking if ShippedDate is greater than RequiredDate. It calculates the delay days using DATEDIFF. However, to find the average delay days, we need to use an aggregate function. Here's the corrected query:\n\nSELECT AVG(DATEDIFF(o.ShippedDate, o.RequiredDate)) AS AverageDelayDays\nFROM orders o\nWHERE o.ShippedDate > o.RequiredDate;",
            "The SQL query is correct. It joins the suppliers, products, and [Order Details] tables to calculate the total revenue for each supplier by summing up the product of order details unit price, quantity, and discount. Grouping by SupplierID ensures the revenue is calculated for each supplier separately.",
            "The SQL query is correct. It selects ProductID, ProductName, UnitsInStock, and ReorderLevel for products where the UnitsInStock is less than the ReorderLevel, indicating they need immediate attention.",
            "The SQL query is correct. It accurately counts the number of orders with a null ShippedDate, indicating they have not yet been shipped.",
            "The query correctly joins the 'orders' and '[Order Details]' tables and groups by 'ShipCity'. It correctly counts the number of shipments and sums the order quantities to determine the total shipment volume. Adding 'TotalVolume DESC' in the ORDER BY clause ensures the city with the highest shipment volume is considered in case of ties in 'NumShipments'.",
            "The original query was incorrect because it joined the products table with orders using an incorrect condition. It should join with the [Order Details] table to count products and calculate lead time. Use 'LIMIT 3' instead of 'TOP 3' as ANSI SQL.",
            "The SQL query correctly calculates the average freight cost per shipping method for orders placed within the last six months. No corrections are needed.",
            "The SQL query has an error in the JOIN. It should join the products table with the orders table based on a different relationship. The correct join should be with [Order Details] on products.ProductID and [Order Details].ProductID, then join orders on [Order Details].OrderID and orders.OrderID. Also, SELECT using suppliers.SupplierID needs to be corrected by joining suppliers table and grouping correctly. Here is the corrected query:\n\nSELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.ShippedDate IS NOT NULL GROUP BY suppliers.SupplierID;",
            "The SQL query correctly finds the supplier with the highest total stock by summing 'UnitsInStock' from the 'products' table, joining with the 'suppliers' table, and ordering the results in descending order. The use of LIMIT 1 ensures only the top result is returned, which answers the business question accurately.",
            "The query is mostly correct, but for clarity and correctness, it should use DATE_FORMAT within the GROUP BY clause as well.",
            "The SQL query is correct. It selects the SupplierID and counts the number of discontinued products for each supplier by grouping by SupplierID where Discontinued is 1.",
            "The SQL query is correct. It accurately counts the distinct suppliers per country, groups the results by country, orders them in descending order by the count of suppliers, and limits the result to the top 5 countries.",
            "Corrected the JOIN condition by referencing the correct columns and added join with suppliers table.",
            "The SQL query is correct. It selects the product ID and product name along with the total quantity sold, grouping by ProductID and ProductName. It then orders the results by total quantity in descending order, accurately answering the business question.",
            "The SQL query correctly counts the number of orders where the ShippedDate is later than the RequiredDate. The query is accurate per the business question.",
            "The SQL query is correct. It accurately calculates the average order size in terms of quantity using the 'Order Details' table.",
            "The query correctly joins the suppliers and products tables and filters products with a reorder level greater than 50. The grouping by SupplierID and CompanyName ensures only distinct suppliers are returned for the filtered products. The query is correct as written.",
            "The SQL query is correct. It accurately joins all necessary tables and groups the results by SupplierID and CompanyName to count the distinct orders associated with each supplier.",
            "The original query used MAX in the SELECT clause, which gives the highest discount per group, not across all records. The corrected query fetches products with the absolute highest discount using a subquery to compare each record's discount against the maximum discount across the table.",
            "The query is generally correct, as it finds the average freight cost per supplier based on the orders they fulfill. It joins the suppliers table with the products and order details to ensure products are related back to the supplier and orders respectively, and group by SupplierID to calculate the average freight per supplier properly.",
            "The query is mostly correct but the 'categories' table is not defined in the schema. To fix this, ensure the 'categories' table exists and is included when joining. If the table exists, the query is correct except for that reference oversight.",
            "The original query incorrectly joins `products` and `orders` directly on `ProductID` and `OrderID`, which do not correspond. The correct connection is through the `Order Details` table. Also, using `VAR_SAMP` instead of `VARIANCE` is necessary for standard SQL variance calculation.",
            "The SQL query is correct and effectively finds the top 3 cities with the highest number of suppliers by counting distinct SupplierIDs and ordering the results in descending order.",
            "The query correctly counts the number of suppliers with missing ContactName or Phone information. It accurately answers the business question.",
            "The query needs to filter the orders to include only those from the last four quarters using a WHERE clause. The DATE_FORMAT should be correct as it displays the date in 'YYYY-MM' format. 'LIMIT 12' is incorrect for quarters.",
            "The SQL query correctly calculates the average unit price of products grouped by category. It uses the AVG function on the UnitPrice and groups the results by CategoryID, which matches the business question.",
            "The SQL query is correct. It calculates the average lead time for each shipping method by grouping orders by 'ShipVia' and ordering results by the average lead time.",
            "The SQL query correctly joins the tables to calculate total sales for each supplier and orders the result to find the highest sales value. The LIMIT 1 correctly limits the result to the top supplier. The query is accurate and aligns with the business question.",
            "The SQL query is correct. It joins the products and suppliers tables on SupplierID and filters suppliers located in Germany to list the products they supply.",
            "The SQL query is correct. It counts the number of discontinued products using the condition WHERE Discontinued = 1.",
            "The given SQL query correctly joins the suppliers and products tables, summing the UnitsOnOrder for each supplier as requested. The GROUP BY clause appropriately groups the results by each Supplier's CompanyName. The query is correct and does not require any changes.",
            "The SQL query correctly calculates the total sales revenue for each product by joining the products table with the [Order Details] table. It then groups by the product name, calculates the total revenue, orders the results in descending order based on revenue, and limits the output to the top 5 products. The query aligns with the business question requirements and is correctly written according to the ANSI SQL standard.",
            "The SQL query correctly answers the business question. It joins the 'suppliers' and 'products' tables on 'SupplierID' and calculates the average 'ReorderLevel' for each supplier. The query is syntactically and semantically correct based on the provided schema.",
            "The SQL query correctly identifies products with stock levels below their reorder levels by selecting ProductName from the products table where UnitsInStock is less than ReorderLevel. The query is accurate and aligned with the business question.",
            "The SQL query is correct. It calculates total sales for each month in 2022 using a JOIN between the orders and [Order Details] tables and aggregates the sales per month.",
            "The SQL query correctly follows the logic needed to identify suppliers whose products have never been ordered. The LEFT JOIN ensures all suppliers are included, and the NULL check on [Order Details].OrderID effectively filters those without orders. The query is correct as written.",
            "The SQL query is correct. It sums the Freight column from the orders table where ShipCountry is 'United States'.",
            "The given SQL query is correct. It calculates the total discount for each order by summing the product of Quantity, UnitPrice, and Discount for each item in '[Order Details]' associated with each 'OrderID' from 'orders', and groups the results by 'OrderID'.",
            "The original query did not account for the discount in the total revenue calculation. The corrected query includes the (1 - Discount) factor to calculate the discounted price correctly.",
            "The original query correctly utilizes `COUNT(DISTINCT CustomerID)` to count unique customers. However, using `MONTH` and `YEAR` functions is not the most efficient or standard approach in ANSI SQL. Instead, using a date range with `BETWEEN` ensures compliance with date standards and improves performance across different SQL implementations.",
            "The SQL query correctly calculates the percentage of products provided by each supplier. It joins the 'products' and 'suppliers' tables on 'SupplierID' and calculates the share of products for each supplier by dividing the count of products per supplier by the total number of products, then multiplying by 100 to get a percentage. The use of COUNT(*) in a subquery to get the total product count is appropriate, and the query correctly uses GROUP BY to calculate the share per supplier.",
            "The original query is correct in terms of logic. However, I corrected the syntax by using double quotes for the table name 'Order Details', as it contains a space, which may require specific delimiters depending on the SQL dialect.",
            "The SQL query is correct. It calculates the total quantity ordered for discontinued products by joining the 'Order Details' and 'products' tables and summing the 'Quantity' where 'Discontinued' equals 1.",
            "The original SQL query is correct. It calculates the total sales for the current month by summing the revenue from order details updated with the current month's date logic using ANSI SQL standard functions.",
            "The original query is mostly correct. The only adjustment is using 'CURRENT_DATE' instead of 'CURDATE()', which is the standard ANSI SQL function. The logic and structure are otherwise correct.",
            "The SQL query is correct. It selects the 'Country' column from the 'suppliers' table, counts the number of 'SupplierID' in each country, groups the results by 'Country', and orders the output by 'SupplierCount' in descending order.",
            "The SQL query is correct for the given question.",
            "The original query incorrectly computes the shortest delivery time by using MIN directly on DATEDIFF, which measures each order individually, without properly grouping and averaging lead times by supplier. Also, it mistakenly joins orders directly with products instead of using the [Order Details] table. I corrected this by calculating the average lead time first, filtering out orders with null dates, before determining the supplier with the shortest average.",
            "The SQL query is correct. It selects products where the units in stock are less than or equal to the reorder level, indicating that they need to be reordered.",
            "The query correctly calculates the total freight cost for each shipping country by grouping the results based on 'ShipCountry' and summing the 'Freight' values. It matches the requirements of the business question.",
            "The SQL query is correct. It selects the CustomerID from the orders table and counts the number of OrderID for each customer, grouping the results by CustomerID.",
            "The original query incorrectly uses MAX within the SELECT clause with GROUP BY, which gives the maximum price per supplier rather than the single highest price across all suppliers. The corrected query finds the supplier with the absolute highest priced product.",
            "The query is correct. It calculates the average unit price of products grouped by supplier using the AVG function and a JOIN between suppliers and products tables.",
            "The SQL query is correct. It accurately counts the number of discontinued products by filtering where the Discontinued flag is set to 1.",
            "The SQL query is correct. It selects orders where the 'RequiredDate' is earlier than the 'ShippedDate', indicating the shipment was late.",
            "The SQL query correctly calculates the total number of units ordered by product category by joining the products table with the Order Details table and summarizing the quantity ordered by CategoryID.",
            "The SQL query correctly calculates the total sales revenue by country. It joins the 'orders' and '[Order Details]' tables using the OrderID, applies the correct formula for total sales, and groups results by ShipCountry. No changes are necessary.",
            "The original query incorrectly sums only the discounts and doesn't account for the discount being applied per product unit price multiplied by quantity. The corrected query multiplies the discount by the unit price and quantity to accurately reflect the total monetary discount applied.",
            "The original query incorrectly joins the 'orders' and 'products' tables directly using 'ProductID'. This should actually be a join through the '[Order Details]' table, as the 'ProductID' resides there. The corrected query properly joins 'orders' to '[Order Details]' and uses the correct table relationships.",
            "The original query incorrectly joins the 'products' table with the 'orders' table. The correct join should be between 'products' and 'Order Details' on 'ProductID', and then 'Order Details' to 'orders' on 'OrderID'. This ensures the calculation of lead times is correctly associated with the products and their suppliers.",
            "The original query is mostly correct, but it is missing `products.ProductName` in the GROUP BY clause. Adding `products.ProductName` to the GROUP BY clause ensures the query aligns with SQL standards.",
            "The SQL query is correct. It successfully selects distinct company names of suppliers who have products with units on order greater than zero.",
            "The SQL query correctly identifies the top 5 cities based on the number of suppliers located in each city. It groups the suppliers by city, counts the number of suppliers in each city, orders the results in descending order, and limits the output to the top 5 results. The query is accurate and well-written according to the given schema.",
            "The SQL query correctly identifies products where the reorder level is greater than the current stock. No corrections are needed.",
            "The SQL query correctly joins the 'suppliers' and 'products' tables on 'SupplierID', filters products where 'Discontinued' is 1, groups by 'CompanyName', and orders by the count of discontinued products in descending order, limiting the result to the top supplier. The query is correct.",
            "The SQL query is correct. It joins the suppliers and products tables on SupplierID and counts the number of distinct ProductID entries for each supplier, grouping by the company name.",
            "The query is correct. It calculates the total revenue generated by each supplier by joining the suppliers, products, and [Order Details] tables and correctly summing the revenue from each sale, grouped by the supplier's company name.",
            "The query correctly retrieves the company name of each supplier and the maximum unit price of the products they supply. It uses a JOIN between suppliers and products tables on SupplierID, and appropriately groups by CompanyName to find the maximum UnitPrice per supplier. The ORDER BY correctly sorts the result in descending order of the maximum unit price. The query is correct.",
            "The SQL query calculates the average discount per order detail line, not per order. To find the average discount applied per order, you need to calculate the average discount for each order separately, then average those results. Correct query: SELECT AVG(OrderDiscount) AS AverageDiscount FROM (SELECT OrderID, AVG(Discount) AS OrderDiscount FROM [Order Details] GROUP BY OrderID) AS OrderDiscounts;",
            "The SQL query correctly identifies orders that were shipped late and calculates the number of days late. It uses DATEDIFF to compute the difference between ShippedDate and RequiredDate, and filters rows where ShippedDate is greater than RequiredDate. The query is correct.",
            "The original query was missing the correct join to the 'Order Details' table. The corrected query properly joins 'Order Details' to 'orders' using the OrderID.",
            "The original query uses a non-standard function MONTH(). Replaced it with EXTRACT(MONTH FROM orders.OrderDate) to adhere to the ANSI SQL standard. Also, use EXTRACT(MONTH FROM orders.OrderDate) in the GROUP BY clause for consistency.",
            "The SQL query correctly joins the 'suppliers' and 'products' tables using the SupplierID field. It accurately calculates the total units on order for each supplier and orders the results in descending order of total units on order. There are no mistakes in the query.",
            "The SQL query is correct. It calculates the total freight cost for each shipping method by grouping records by 'ShipVia' and summing the 'Freight' values.",
            "The query correctly finds the most frequently ordered product by counting how many times each ProductID appears in the [Order Details] table and ordering them to find the one with the highest count. The SQL query is correct as per the business question.",
            "The original query incorrectly used a condition for a NULL check and date comparison without joining the 'orders' table. The corrected query now includes a LEFT JOIN to the 'orders' table and appropriately checks for a NULL 'OrderDate' to find suppliers with no orders in the last year.",
            "The initial query was using 'orders.ShipCountry' to group the revenue, but the question is about supplier revenue, which would be associated with the supplier's country. Therefore, the correct query links 'suppliers' with 'products' and '[Order Details]' to calculate the revenue based on the supplier's country.",
            "The SQL query is correct. It properly filters suppliers based on the specified region or country.",
            "The SQL query correctly calculates the average discount per product and orders the results to identify the product with the highest average discount. The query appears to be correct and is appropriate for the given question.",
            "The SQL query is correct. It selects the ProductName from the products table where UnitsInStock is equal to 0, indicating that the product is out of stock.",
            "The query correctly retrieves suppliers whose SupplierID does not appear in the list of SupplierIDs from products where the product is discontinued. It correctly uses a subquery to filter out those related to discontinued products and employs the NOT IN operator for exclusion. The query is correct.",
            "The SQL query is correct. It accurately counts the number of products where the units on order are greater than the units in stock.",
            "The SQL query is correct. It selects the country of shipment and sums the freight cost for orders that have been shipped, grouping by country.",
            "The original query mistakenly joins 'orders' on 'products.ProductID' instead of using 'Order Details'. The correction includes joining '[Order Details]' with the appropriate keys.",
            "The SQL query is correct for the given question. It calculates the average number of days between the order date and the required date using DATEDIFF and AVG on the orders table.",
            "The query correctly joins 'orders' and '[Order Details]' tables and calculates the total discount by summing the 'Discount' column for each order. It then orders the result by 'TotalDiscount' in descending order and uses LIMIT 1 to fetch the order with the highest total discount. The query is correct as per the given business question.",
            "The SQL query correctly calculates the number of suppliers based in each country. It selects the 'Country' column and uses COUNT(SupplierID) to count suppliers, grouping by 'Country', which aligns with the business question.",
            "The query is correct and accurately retrieves the total order quantity for each product using a JOIN between the 'Order Details' and 'products' tables, grouping by ProductID.",
            "The SQL query is correct and answers the question by counting the number of contacts per city and ordering by descending count to get the city with the highest number of contacts. The use of LIMIT 1 correctly returns the top result.",
            "The SQL query correctly calculates the average product price for each category by selecting the CategoryID and computing the average UnitPrice, grouping by CategoryID. No corrections are needed.",
            "The original query incorrectly groups by SupplierID instead of CompanyName. Adjusted the GROUP BY clause to use suppliers.CompanyName.",
            "The SQL query correctly counts the number of orders where the ShippedDate is later than the RequiredDate, which indicates late shipments. The query is correct.",
            "The SQL query correctly answers the business question. It joins the 'Order Details' table with the 'products' table to determine the supplier for each product and then sums the quantities of products ordered, grouped by SupplierID.",
            "The original query is almost correct, but there's a mistake in the GROUP BY clause. It should group by 'products.ProductName', not 'products.ProductID'. Here's the corrected query: SELECT products.ProductName, SUM([Order Details].Quantity) AS OrderQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY OrderQuantity DESC LIMIT 5;",
            "The query is correct and retrieves a distinct list of countries where suppliers have fax numbers listed.",
            "The SQL query correctly identifies the most common ship region by counting the number of orders for each region, ordering the results in descending order by count, and limiting the output to the top result. The query is correct as written.",
            "The SQL query is correct for the given business question. It calculates the total sales revenue per product by multiplying the unit price, quantity, and discount factor, then groups by ProductID and orders the results by TotalSales in descending order.",
            "The SQL query is correct. It selects the distinct count of SupplierID for each Country from the suppliers table and groups the results by Country.",
            "The existing SQL query correctly identifies the supplier with the most discontinued products by counting the discontinued products for each supplier, using GROUP BY on SupplierID and ordering the results in descending order of the count. Therefore, the query is correct.",
            "The SQL query correctly calculates the total freight charges for orders that have been shipped, which is determined by checking that `ShippedDate` is not NULL. The query is accurate and follows the business question appropriately.",
            "The SQL query correctly identifies the top 5 cities with the most supplier companies by counting distinct SupplierIDs, grouping by City, and ordering by SupplierCount in descending order, with a limit of 5. The query is accurate and correctly structured.",
            "The SQL query is correct. It selects the ProductID of the product with the highest UnitsOnOrder where UnitsInStock is greater than zero.",
            "The SQL query correctly identifies suppliers who have never had any of their products ordered. It joins the 'products' table with the 'Order Details' table to find all suppliers with orders and then selects suppliers whose IDs are not in that list.",
            "The SQL query is correct. It selects each ProductID along with the maximum discount applied from the Order Details table, groups by ProductID, and orders the results by maximum discount in descending order.",
            "The SQL query correctly calculates the average discount given per supplier by joining the products and [Order Details] tables on ProductID and grouping by SupplierID. It accurately uses AVG to find the average discount for each supplier.",
            "The original query does not select suppliers, which is necessary to answer the question. It only selects products. The corrected query joins suppliers and products to list the company names of suppliers who have products below the reorder level.",
            "The SQL query is correct. It accurately selects the most common shipping method by counting occurrences of 'ShipVia', grouping by 'ShipVia', and ordering the results in descending order by frequency, then limiting the results to the top one.",
            "The SQL query correctly computes the average order value per customer by joining the 'orders' and '[Order Details]' tables and grouping by 'CustomerID'. The calculation of order value is correctly handled with the product of 'UnitPrice', 'Quantity', and the factor for 'Discount'.",
            "The SQL query correctly selects the SupplierID and calculates the total order quantities by summing the Quantity column for each supplier. The query correctly joins the products and [Order Details] tables on ProductID and groups the results by suppliers to find the total quantities, ordering them in descending order to identify the suppliers with the highest order quantities. The query is correct and aligns with the business question.",
            "The SQL query is correct. It selects OrderID from the orders table where the ShippedDate is later than the RequiredDate.",
            "The SQL query is incorrect because the 'categories' table is not defined in the schema provided. To determine the total sales revenue by each category, ensure that the 'categories' table is indeed present in the schema. If it was omitted by mistake, add it to the schema with appropriate columns like 'CategoryID'. If categories don't exist, revise the business question to ask for a granularity that matches the existing schema, such as by supplier or product.",
            "The query correctly identifies the SupplierID with the lowest average discount by joining products with [Order Details] and calculating the average discount per supplier. The use of ORDER BY and LIMIT 1 effectively selects the supplier with the lowest average discount.",
            "The original query is mostly correct, but it's better to use the same expression for grouping as used in the SELECT clause to avoid potential aliasing issues. This has been corrected in the revised query.",
            "Corrected the JOIN condition to include [Order Details] table for associating orders with products.",
            "The original SQL query had a missing JOIN with the [Order Details] table for linking it to the orders table. The corrected query includes this join to ensure all tables are properly connected.",
            "The SQL query correctly finds the supplier with the highest number of unique products. It groups products by SupplierID, counts distinct ProductID values, and orders by the count in descending order, selecting the top result. The query is correct.",
            "The original query only grouped by SupplierID and returned the product name, which is incorrect. We need to join the result of the MAX(UnitPrice) for each SupplierID with the products table to get the correct ProductName.",
            "The SQL query correctly retrieves the names of products where the stock levels are below their reorder level. No changes are needed.",
            "The original query didn't include a join with the 'orders' table for calculating sales that are only from placed orders. The corrected query adds this join.",
            "The original query incorrectly checks individual products instead of ensuring no discontinued products exist for a supplier. The corrected query uses a subquery with NOT EXISTS to confirm this condition.",
            "The original query uses non-standard syntax 'EXTRACT(YEAR_MONTH FROM OrderDate)', which is not valid. The corrected query uses DATE_FORMAT to extract the year and month in the format 'YYYY-MM'.",
            "The SQL query is correct. It accurately calculates the average discount applied to orders as specified in the business question.",
            "The SQL query is correct. It calculates the total revenue generated by each region using the SUM function on the relevant revenue calculation and groups the results by ShipRegion, which aligns with the question.",
            "Corrected the order of JOINs to ensure proper table relationship and join conditions. Specifically, [Order Details] should be joined before orders to connect to orders table via OrderID.",
            "The original query retrieves the OrderID of orders with products from multiple suppliers. To answer 'how many' such orders exist, we need to return a count of these OrderIDs.",
            "The query correctly calculates the number of unique suppliers for each customer by joining the necessary tables and counting distinct SupplierID for each CustomerID. The results are ordered by the count in descending order, and the limit clause ensures that only the customer with the most unique suppliers is returned. The query is correct and efficiently answers the business question.",
            "The SQL query correctly calculates the total sales revenue for each product using the SUM function and applies the necessary discount. It groups the results by ProductID and orders them in descending order by SalesRevenue, limiting the results to the top 5 products. The query is correct and follows the business question's requirements.",
            "The original query used GROUP_CONCAT, which is not part of the ANSI SQL standard. I corrected it by replacing it with STRING_AGG, which is the equivalent ANSI SQL function. The rest of the query logic is correct for finding cities with more than one supplier.",
            "The original query is almost correct. However, to ensure accurate division in SQL, it's a good practice to cast the count to a FLOAT before division to avoid integer division which can lead to inaccurate ratios.",
            "The SQL query is correct and accurately calculates the average freight cost per order, as it selects the average of the Freight column from the orders table.",
            "The SQL query is correct. It calculates the count of orders for each shipping method and orders the results in descending order by count, then limits the output to the top result. No corrections needed.",
            "The SQL query correctly calculates the total sales revenue for each supplier, orders them by descending revenue, and limits the results to the top 5 suppliers. The query matches the business question and follows the schema provided.",
            "The original query was missing a join between the 'Order Details' and 'orders' tables, which is necessary to access 'orders'. The corrected query includes this join.",
            "The query is correct. It joins the 'suppliers' and 'products' tables, filters for products that are out of stock, groups by supplier, and orders by the count of products out of stock in descending order, returning only the supplier with the most out-of-stock products.",
            "The query is correct. It calculates the total sales revenue for each product by joining the products table with the [Order Details] table and then ordering the results by TotalSales in descending order. It limits the results to the top 5 products.",
            "The SQL query correctly answers the business question. It counts distinct OrderIDs where Discount is greater than 0 to find the number of orders with a discount, and calculates the average discount rate for those orders.",
            "The query correctly selects the country with the most suppliers by counting SupplierID grouped by country and ordering the results in descending order of supplier count. The LIMIT 1 clause is correctly used to return only the top country.",
            "The SQL query is mostly correct, but to ensure we only consider orders that have actually been shipped, we should add a condition to check that ShippedDate is not NULL. The corrected query is: SELECT SUM(Freight) AS TotalFreight FROM orders WHERE YEAR(ShippedDate) = YEAR(CURRENT_DATE) - 1 AND ShippedDate IS NOT NULL;",
            "The SQL query correctly selects the supplier with the highest average unit price for their products by joining the suppliers and products tables on SupplierID, calculating the average unit price grouped by supplier, and ordering by the average price in descending order. The use of LIMIT 1 ensures that only the top supplier is returned. The query is correct as written.",
            "The SQL query correctly identifies orders where the ShippedDate is later than the RequiredDate. No corrections are needed.",
            "The SQL query correctly finds the product with the highest reorder level and displays the number of units on order. It sorts the products by ReorderLevel in descending order and retrieves the top result with LIMIT 1.",
            "The original query was incorrect because it attempted to filter by the year of OrderID, which is an integer, not a date. The correct approach is to filter using the OrderDate from the orders table.",
            "The original query incorrectly joins suppliers on orders using SupplierID and OrderID, which are unrelated. The corrected query joins suppliers to products using SupplierID, and then associates orders with products via the orders and [Order Details] tables.",
            "The original query didn't handle the transition between years correctly. The revised query subtracts one quarter from the current date and ensures it checks the correct year.",
            "The SQL query correctly calculates the average discount on discontinued products by joining the 'Order Details' table with the 'products' table on ProductID and filtering for products where Discontinued equals 1. The query is correct.",
            "The SQL query correctly retrieves the contact details of suppliers located in the specified city. The conditional filter on the 'City' column matches the business question.",
            "The original query did not account for the discount in the total sales calculation. The formula should include the term (1 - Discount).",
            "The SQL query was missing explicit conversion to a decimal calculation for the percentage, which can lead to integer division issues. Adding * 100.0 ensures correct floating-point arithmetic.",
            "The query is correct. It joins the necessary tables (suppliers, products, and [Order Details]), groups by the supplier's CompanyName, and sums the Quantity from [Order Details] to get the total number of units delivered per supplier. It then orders the results in descending order and limits the output to the top 3 suppliers.",
            "The query mistakenly uses LIMIT 1, which is not standard ANSI SQL, and the subquery is incorrect. Instead, use a CTE or subquery to find the most ordered product ID and join this with the suppliers. Here is the corrected query:\n\nWITH MostOrderedProduct AS (\n    SELECT ProductID \n    FROM [Order Details] \n    GROUP BY ProductID \n    ORDER BY SUM(Quantity) DESC \n    FETCH FIRST 1 ROW ONLY\n)\nSELECT suppliers.CompanyName \nFROM suppliers \nJOIN products ON suppliers.SupplierID = products.SupplierID \nWHERE products.ProductID = (SELECT ProductID FROM MostOrderedProduct);",
            "The initial query attempted to filter by OrderID assuming it contains a date, but the date should be derived from the orders table using the OrderDate column. The JOIN with the orders table is necessary for accessing the OrderDate column to filter by year.",
            "The query is correct. It selects products where the reorder level is higher than the units currently in stock, accurately reflecting the business question.",
            "The original query incorrectly joined 'products' to 'orders'. It should join '[Order Details]' to 'products' and 'orders'. This correction ensures that the lead time is calculated for each order related to a product from a specific supplier.",
            "The SQL query correctly calculates the total revenue by joining the suppliers, products, and [Order Details] tables. It rightly groups by CompanyName and orders by TotalRevenue in descending order to find the supplier with the highest revenue. The LIMIT 1 is correctly used to return only the top supplier. The query is correct.",
            "The SQL query is correct. It correctly counts distinct products for each supplier and groups the results by SupplierID.",
            "The original query used OrderDate instead of ShippedDate. Corrected to calculate orders that have actually been shipped and added a WHERE clause to ensure ShippedDate is not NULL, as we only want to count shipped orders.",
            "The query correctly calculates the frequency of products ordered from each supplier and returns the supplier with the highest frequency, using a COUNT on od.ProductID and ordering by OrderFrequency in descending order. The LIMIT 1 ensures that only the top supplier is returned, which matches the question.",
            "The query correctly joins 'orders' and '[Order Details]' on 'OrderID', aggregates by 'CustomerID' and 'OrderID', and calculates the total discount using 'SUM(od.UnitPrice * od.Quantity * od.Discount)'. The SQL query is correct.",
            "The SQL query is correct and accurately answers the business question by selecting the city with the highest count of suppliers. The query correctly groups suppliers by city, counts them, orders the result in descending order, and limits the result to the top city.",
            "The query correctly joins the 'suppliers' and 'products' tables on 'SupplierID' and calculates the average unit price for products from each supplier using 'AVG(p.UnitPrice)'. The use of 'GROUP BY s.SupplierID' is appropriate for this aggregation. The SQL query is correct as per the question.",
            "The query is correct. It selects the country from which the order was shipped and counts the number of orders shipped to each country, grouping the results by country.",
            "The query is correct as it selects products whose UnitsInStock are less than or equal to the ReorderLevel and are not discontinued.",
            "Corrected the join condition as the orders should be connected to products through [Order Details] and not directly by OrderID.",
            "The SQL query is correct. It joins the suppliers table with the products table, filters for discontinued products, groups by SupplierID, counts the number of discontinued products for each supplier, and orders the results in descending order to find the supplier with the greatest number of discontinued products. The LIMIT 1 clause ensures only the top result is returned.",
            "The given SQL query correctly answers the question by counting the number of products for each 'QuantityPerUnit', grouping by 'QuantityPerUnit', and then ordering by the count in descending order to find the most common. The use of LIMIT 1 ensures only the most common result is returned.",
            "The original query incorrectly includes GROUP BY with columns not needed for the question. Instead, we should use DISTINCT to find unique SupplierIDs with late deliveries.",
            "The original query incorrectly joins orders with products using the ProductID to OrderID, which is not valid. The correction joins 'Order Details' to 'products' and 'orders'. This improves the calculation of delivery times per supplier.",
            "Corrected the JOIN condition. Join [Order Details] on ProductID to link it to orders and products correctly.",
            "The SQL query correctly retrieves the product with the highest number of units on order by sorting the 'UnitsOnOrder' in descending order and limiting the result to 1. The query is correct and meets the requirements of the business question.",
            "The query correctly calculates total sales per product category by joining the products table with the 'Order Details' table. The use of SUM with properly adjusted prices for discounts is correct. The GROUP BY clause is appropriately used to aggregate results by CategoryID. No changes are needed.",
            "The SQL query is correct. It calculates the percentage of orders that include discounted products by checking if the Discount is greater than 0 in the Order Details table, counting distinct OrderIDs where this condition is true and dividing by the total number of distinct OrderIDs.",
            "The original query is missing a GROUP BY and ORDER BY clause to correctly identify the supplier associated with the maximum order value. Adding GROUP BY s.CompanyName, ORDER BY MaxOrderValue DESC, and LIMIT 1 will ensure only the supplier with the maximum order value is returned.",
            "The original query incorrectly counts the number of product IDs rather than the total quantity delivered. Updated to join with Order Details and aggregate the total quantity.",
            "The original query incorrectly joins the 'orders' table directly to 'products' using 'ProductID' and 'OrderID'. It should join 'products' to '[Order Details]' using 'ProductID', then '[Order Details]' to 'orders' using 'OrderID'. The GROUP BY needs to use 'suppliers.CompanyName'.",
            "The original SQL query correctly addresses the business question by sorting products by the number of units on order in descending order. No changes needed.",
            "The query is mostly correct but 'DATE_FORMAT' is not part of the ANSI SQL standard. Use 'TO_CHAR' in ANSI-compliant systems to handle date formatting. Also, ensure 'suppliers.CompanyName' is in the GROUP BY clause instead of 'suppliers.SupplierID'.",
            "The SQL query is correct for the given question. It retrieves the CompanyName of suppliers located in the specified region. Ensure 'specific_region' is replaced with the actual region name when executing the query.",
            "Corrected the query to use COUNT(DISTINCT OrderID) to ensure each order is counted once per product. The original query might double count if the same order includes the same product multiple times, which is typically not the case but is a good practice for clarity.",
            "The initial query was almost correct but it had a redundant WHERE clause that should be removed. By removing 'WHERE products.Discontinued = 1', we ensure that we count all products and compare them to the count of discontinued products only.",
            "The query correctly joins the 'suppliers' and 'products' tables on 'SupplierID', calculates the average unit price for each supplier, orders the results by average price in descending order, and limits the result to the top record, which aligns well with the question.",
            "The SQL query correctly counts the number of out-of-stock products for each supplier by ensuring that products with UnitsInStock = 0 are counted and aggregated by CompanyName.",
            "The original query is mostly correct. It calculates the average discount per supplier. However, the GROUP BY clause should use 'suppliers.CompanyName' instead of 'suppliers.SupplierID' since CompanyName is selected. This does not change functionality in most conditions but aligns better with selected columns.",
            "The original query incorrectly joined orders directly with products, using OrderID instead of ProductID. The correct join should be through the [Order Details] table, linking products to orders. GROUP BY should be on suppliers.CompanyName for correct aggregation.",
            "The original query is mostly correct, but the GROUP BY should use 'suppliers.CompanyName' instead of 'suppliers.SupplierID' to work with the selected field.",
            "The SQL query correctly calculates the average unit price of products supplied per country. The JOIN operation between suppliers and products on SupplierID is appropriate, and the GROUP BY operation on suppliers.Country is correctly applied. The query aligns with the business question.",
            "The original query did not correctly join the tables to relate orders to suppliers via products. The revised query includes necessary joins to connect orders to suppliers using the Order Details and products tables.",
            "The original query is correct in counting distinct categories for each supplier, but it's preferable to group by CompanyName, as it aligns better with the desired output format.",
            "The initial query incorrectly joined products to orders directly using ProductID to OrderID, which doesn't reflect their relationships. Instead, [Order Details] must be used to join products to orders. Also, the GROUP BY should use suppliers.CompanyName as it's what is being selected.",
            "The query is mostly correct. However, it should include DISTINCT in the select clause to avoid duplicate company names if a supplier delivers multiple products with high discounts. The corrected query is: SELECT DISTINCT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount > 0.2;",
            "The query correctly calculates the average product price for each supplier region by joining the 'suppliers' and 'products' tables on the 'SupplierID'. The use of aggregation with 'AVG' and grouping by 'Region' achieves the aim of analyzing product prices by location. However, the correlation analysis itself is not conducted within SQL; additional statistical analysis beyond this query would be needed to determine the actual correlation between supplier location and product price.",
            "The SQL query correctly retrieves the product names and reorder levels from the products table and orders them in descending order of reorder level. No corrections needed for this query.",
            "The query is correct. It selects suppliers with a non-null homepage.",
            "The original query is missing the join with the 'orders' table, which provides necessary context for the 'Order Details' table. Added a join on orders o ON od.OrderID = o.OrderID.",
            "The SQL query is correct. It counts the number of products where the 'Discontinued' flag is set to 1, which indicates these products are discontinued.",
            "The SQL query correctly selects the most expensive product by ordering the product list by UnitPrice in descending order and limiting the result to the top entry. The query is correct as per the business question.",
            "The query correctly retrieves the product name and the number of units on order for products that have units on order greater than zero.",
            "The query correctly filters products where the stock is below the reorder level and groups by SupplierID to find the supplier with the most products on reorder. No changes are needed.",
            "The SQL query is correct. It accurately calculates the average discount for each product by selecting the ProductID and averaging the Discount from the [Order Details] table, grouped by ProductID.",
            "Corrected the joins to connect products to orders via [Order Details] table using the common fields ProductID and OrderID.",
            "The SQL query is correct for the provided question. It correctly counts the number of orders where the shipped date is later than the required date.",
            "The original query incorrectly joined products and orders tables directly on unrelated columns. The correction involves joining products to [Order Details] on ProductID and then [Order Details] to orders on OrderID. This links products correctly to the freight cost per order and groups by SupplierID to calculate total freight per supplier.",
            "The SQL query correctly retrieves all products where the units in stock are below the reorder level. The query is correct as it matches the business question precisely.",
            "The original query misses the table alias for `Quantity` in `SUM(Quantity)`. It should be `SUM(od.Quantity)` to ensure reference is clear and correct.",
            "The original query was close but didn't format the month correctly. Using DATE_FORMAT(OrderDate, '%Y-%m') specifies the granularity and ensures consistent results.",
            "The SQL query correctly groups the products by SupplierID and counts the number of products supplied by each supplier using COUNT(*). The query is correct for the given business question.",
            "The query is correct. It selects SupplierID from suppliers where SupplierID is not present in the distinct list of SupplierIDs from the products table. This correctly identifies suppliers who haven't supplied any products.",
            "The query is mostly correct, but to ensure compliance with the ANSI SQL standard, it's important to verify that the 'categories' table exists in the schema, as it wasn't listed. Assuming it does, the query is correct.",
            "The original query correctly joins the products and [Order Details] tables. However, it does not identify the most frequently ordered product for each supplier. The revised query first calculates the order frequency for each product by each supplier and then determines the maximum frequency per supplier.",
            "The provided SQL query correctly calculates the revenue generated per region by joining the 'orders' and '[Order Details]' tables, grouping by 'ShipRegion', and summing the revenue based on UnitPrice, Quantity, and Discount. The query is correct as per the given requirements.",
            "The original query only checks if the supplier provided discontinued products, not if they were delivered via an order. A JOIN with the [Order Details] table is necessary to ensure the products were part of an order.",
            "The SQL query is correct. It joins the 'suppliers' and 'products' tables on 'SupplierID', counts the products per supplier, groups by 'SupplierID', orders by the count in descending order, and limits the result to the top 5 suppliers. The query correctly answers the business question.",
            "The SQL query correctly identifies products that have reached or fallen below their reorder level by comparing UnitsInStock with ReorderLevel in the products table.",
            "The SQL query is correct. It selects the city with the highest number of orders by counting orders grouped by ShipCity, ordering the results in descending order, and limiting the output to 1 row.",
            "The SQL query correctly calculates the diversity of the product range for each supplier by counting distinct categories. The query properly groups by SupplierID and orders the result to find the supplier with the most diverse product range. The LIMIT 1 ensures only the top supplier is selected. The query is correct and meets the business question requirements.",
            "The SQL query is correct, assuming the DATE_FORMAT function is supported. It correctly calculates total sales per month by joining 'orders' and '[Order Details]' tables, grouping by month, and ordering the results by month. No changes needed.",
            "The query is correct. It counts the number of orders for each shipping method (ShipVia) using a GROUP BY clause.",
            "The query correctly calculates the total freight cost for each supplier. However, the JOIN order in the original query was incorrect, leading to potential mismatches, and the field reference 'Freight' should be explicitly referenced from the 'orders' table.",
            "The SQL query correctly calculates the total quantity of products on order for each supplier by joining the 'suppliers' table with the 'products' table on 'SupplierID' and summing the 'UnitsOnOrder'. No corrections needed.",
            "The query is correct and accurately retrieves the number of distinct countries from the suppliers table.",
            "The SQL query correctly computes the average discount applied across all orders using the AVG function on the Discount column in the [Order Details] table. The query is correct and requires no changes.",
            "The original query finds the maximum unit price per supplier, but to find the suppliers with the absolute highest unit price, you must compare against the global maximum. The corrected query filters products with the maximum unit price and retrieves corresponding suppliers.",
            "The original query calculated the percentage of discontinued products out of all products, not just those in stock. The corrected query includes 'UnitsInStock > 0' to ensure only products in stock are counted. Also, 'NULLIF' is used to handle division by zero.",
            "The original query only selected from the 'products' table and considered 'UnitsOnOrder', which does not account for whether the units have been shipped or not. The corrected query checks for unshipped orders by joining 'Order Details', 'orders', and 'products', and ensures the 'ShippedDate' is NULL, providing the correct result.",
            "The original query was mostly correct but needed a correction in the GROUP BY clause to ensure it matched the selected date format.",
            "The original query incorrectly joins products to orders using SupplierID. Instead, it should join orders to [Order Details] using OrderID, then join to products using ProductID.",
            "The SQL query correctly calculates the total sales revenue for each product by joining the 'products' table with the '[Order Details]' table and grouping by product name. The formula for total sales revenue is correctly applied. Thus, the query is correct.",
            "The SQL query correctly calculates the total sales revenue for each supplier by joining the suppliers, products, and [Order Details] tables. It then groups by supplier company names, orders the result by descending total sales, and limits the output to the top five suppliers. The query properly addresses the business question and does not have any mistakes.",
            "The original query is almost correct, but it's missing the year extraction to ensure the monthly grouping is separated by year. The corrected query includes both year and month extraction from the OrderDate for proper grouping.",
            "The SQL query is correct. It correctly joins the 'products' table with the '[Order Details]' table to calculate the average discount for each product. The grouping and ordering logic is appropriate for determining which products have the highest average discount.",
            "The original query uses a non-standard function 'MONTH'. Replaced it with 'EXTRACT(MONTH FROM ...)' to adhere to ANSI SQL standards.",
            "The original query had a few issues: 1) The formula for Supplier Lead Time is the average difference between ShippedDate and OrderDate, not RequiredDate. 2) The join condition should be between products and [Order Details].ProductID, then from [Order Details] to orders using OrderID. 3) 'HAVING AvgLateDays > 10' should be 'HAVING AvgDeliveryDays > 10'.",
            "The query is correct. It selects the product names and sums the quantities ordered for each product, grouping by product name.",
            "The original query incorrectly grouped by SupplierID instead of CompanyName. Changed GROUP BY clause from suppliers.SupplierID to suppliers.CompanyName to reflect correct grouping.",
            "The original query was missing a correct join between orders and [Order Details] on OrderID. Additionally, the table joins needed to be adjusted to include [Order Details].",
            "The SQL query correctly calculates the average reorder level for each product category by selecting CategoryID and using AVG on ReorderLevel, grouping the results by CategoryID. No changes are needed.",
            "The SQL query correctly calculates the average freight cost per country by selecting the ShipCountry and using the AVG function on the Freight column, grouping the results by ShipCountry. The query aligns with the business question intention.",
            "The SQL query correctly calculates the total units in stock for each supplier by joining the suppliers and products tables on SupplierID and summing the UnitsInStock for each supplier's products. The use of GROUP BY ensures that the results are aggregated by each supplier's CompanyName. Query is correct as per the requirements.",
            "The SQL query is correct. It selects the product name and the average order quantity by joining the 'products' table with the 'Order Details' table on 'ProductID' and groups the results by 'ProductName'.",
            "The original query mistakenly joins orders and products based on OrderID instead of using the [Order Details] table to link products and orders. It also overlooks checking the current year.",
            "The SQL query is correct. It selects the top three cities based on the total number of orders shipped. The use of GROUP BY, COUNT, and ORDER BY is appropriate for answering the question.",
            "The original query incorrectly summed just the Discount percentages rather than the total discounted amount. The corrected query multiplies the discount by the unit price and quantity to calculate the total discounted amount.",
            "The SQL query correctly retrieves the average unit price of products for each supplier by joining the suppliers and products tables on SupplierID and grouping by CompanyName. The query is accurate and follows the business question requirements.",
            "The original query refers to a 'categories' table, which isn't defined in the schema. The 'products' table should be used to get the 'CategoryID'. The corrected query retains the intended functionality.",
            "The SQL query is correct. It joins the suppliers, products, and [Order Details] tables to calculate the total sales revenue for each supplier by summing up the revenue generated from each product order, taking into account the discounts. The GROUP BY clause correctly groups the results by SupplierID.",
            "Correct the JOIN condition to properly link the tables using the [Order Details] table to connect products and orders.",
            "The original query is mostly correct. However, it should group by p.ProductName instead of p.ProductID to ensure the correct display of product names.",
            "The query is correct. It calculates the average order value per supplier by joining suppliers, products, and order details tables correctly. The calculation uses the provided formula for average order value, correctly aggregating the results by SupplierID.",
            "The SQL query is correct. It correctly joins the 'products' and '[Order Details]' tables based on 'ProductID', calculates the total revenue for each product, groups the results by 'ProductID', and orders the results by 'TotalRevenue' in descending order to find the product with the highest revenue.",
            "The SQL query correctly calculates the total sales by joining the suppliers, products, and order details tables. The grouping, ordering, and limiting by top 5 suppliers are correctly implemented.",
            "The query is incorrect because it assumes that 'CategoryID' exists in the 'products' table, but the schema provided does not include details of the 'categories' table, and 'CategoryID' is a foreign key. Without joining it to the 'categories' table, the query cannot answer the business question. Please ensure there's a join to a 'categories' table and provide the necessary table information if available.",
            "The provided SQL query correctly answers the business question. It joins the suppliers and products tables using SupplierID and calculates the sum of UnitsOnOrder for each supplier, grouping the results by SupplierID.",
            "The original query calculates the maximum discount for each order, but the goal is to find orders with the highest discount overall. The corrected query filters rows where the discount is equal to the maximum discount found in the table, ensuring we retrieve orders with the highest discount applied across all records.",
            "The original query incorrectly attempted to calculate the percentage of discontinued products globally instead of per supplier. The revised query counts only discontinued products for the numerator within a CASE statement and uses the total products per supplier for the denominator.",
            "The SQL query correctly calculates the average freight cost per order for each shipping method by grouping the orders by the 'ShipVia' column and calculating the average of the 'Freight' column. The query aligns with the question requirements and is correct.",
            "The original query was incorrect because it joined the 'products' table with the 'orders' table on mismatched keys. The correct join should involve 'Order Details' as it links 'products' to 'orders'. The corrected query properly filters for international shipments by comparing 'ShipCountry' and 'Country'.",
            "The SQL query is correct for the given question. It joins the 'products' table with the 'Order Details' table using the ProductID, and calculates the total quantity sold for each product, grouping by ProductID.",
            "The SQL query correctly retrieves the top 10 most expensive products by ordering the products by their UnitPrice in descending order and limiting the results to 10. The query is accurate for the given schema and question.",
            "The original query correctly joins the necessary tables to calculate monthly sales per supplier, but misses extracting the year, which is necessary to accurately trend over months from different years. Using EXTRACT to get both year and month will allow differentiation of months across years.",
            "The original query incorrectly used MIN to find the minimum units in stock for individual products rather than the total units in stock per supplier. The corrected query SUMs the UnitsInStock for each supplier and then finds the supplier with the lowest total units.",
            "The original query was mostly correct but missed grouping by p.ProductName. It has been added to ensure that the query adheres to SQL standards requiring all selected fields that are not aggregated to be grouped.",
            "The SQL query is correct and returns the total number of suppliers based in the USA by counting the entries in the 'suppliers' table where the 'Country' is 'USA'.",
            "Corrected the JOIN condition to properly link the [Order Details] table with the orders table using OrderID.",
            "The original query is missing ProductName in the GROUP BY clause, which is required because it is selected without an aggregate function. The corrected query includes ProductName in the GROUP BY clause.",
            "The SQL query correctly counts the occurrences of each postal code in the suppliers table, groups them by PostalCode, and orders the result to find the most common one. The LIMIT 1 clause ensures only the most common postal code is returned. The query is correct.",
            "The SQL query correctly calculates the total sales for each product category by joining the [Order Details] table with the products table using ProductID and grouping the results by CategoryID. No corrections are needed.",
            "The SQL query is correct. It accurately calculates the average freight cost per order by taking the average of the 'Freight' column from the 'orders' table.",
            "The original query misses a join with the 'orders' table, which is necessary to ensure that only valid orders are considered. Additionally, 'CompanyName' should be included in the GROUP BY clause.",
            "The original SQL query is correct. However, adding DISTINCT in the subquery can improve efficiency by ensuring that unnecessary duplicates are not processed.",
            "The original query was missing a join to the 'orders' table, which is necessary for fetching all relevant order detail records. Additionally, CompanyName should be included in the GROUP BY clause.",
            "The original query incorrectly joins the 'orders' table on the 'products' table directly via 'ProductID'. Instead, it should join 'orders' through '[Order Details]' on 'OrderID'. This has been corrected in the revised query.",
            "The SQL query correctly lists all products where the stock levels are below the reorder level, according to the business question.",
            "The original query had a slight mistake as it did not include 'suppliers.CompanyName' in the GROUP BY clause. The corrected query groups by both 'suppliers.SupplierID' and 'suppliers.CompanyName'.",
            "The query correctly calculates the percentage of late shipments by dividing the number of late shipments by the total number of orders. The use of CASE, SUM, and COUNT functions is appropriate for this calculation.",
            "The SQL query is correct. It selects the country from the suppliers table and counts the number of suppliers per country. The grouping by Country is appropriate for this question.",
            "The query correctly identifies the ProductID with the highest average discount by using AVG(Discount) and orders the results in descending order of AvgDiscount. The use of LIMIT 1 ensures that only the product with the highest average discount is returned. The query is correct and matches the business question.",
            "Corrected the JOIN condition to include [Order Details] table. Also added CompanyName in the GROUP BY clause.",
            "The original query did not include a join to the products table to get the ProductName. The correct query includes a join with the products table and groups by both ProductID and ProductName.",
            "The SQL query is correct for the given business question. It calculates the total value of orders taking discounts into account, using the formula provided in the metrics.",
            "The query correctly retrieves the count of discontinued products for each supplier by grouping on SupplierID and filtering on products marked as discontinued (Discontinued = 1). The SQL query is correct.",
            "The query is mostly correct but should specify products.ProductID in the SELECT and GROUP BY clauses for clarity. The rest of the query aligns with the business question.",
            "Corrected the JOIN to connect orders with [Order Details] using OrderID and then [Order Details] with products using ProductID. Initially, the join was incorrectly made between orders and products directly on OrderID and ProductID.",
            "The SQL query is correct. It accurately counts the orders where the ShippedDate is later than the RequiredDate, indicating a delay.",
            "The SQL query correctly identifies the most common shipping method by counting orders grouped by ShipVia and ordering the result to get the top method. The use of LIMIT 1 ensures only the most common is selected. The query is correct and consistent with the business question.",
            "The initial query did not include a join with the 'products' table to retrieve the 'ProductName'. This correction includes an INNER JOIN with the 'products' table to correctly associate 'ProductName' with 'ProductID.'",
            "The original query calculates the total sales revenue per SupplierID, but it does not include a join to the suppliers table. The correct version includes a join to the suppliers table to associate SupplierID with the supplier name and ensures accurate grouping and aggregation.",
            "The SQL query correctly extracts the month from 'OrderDate' and counts the number of orders for each month. It uses the 'EXTRACT(MONTH FROM OrderDate)' function to group orders by month, which is appropriate for the question asked. The query correctly groups and counts records as required.",
            "The query is correct. It calculates the average order value by multiplying UnitPrice, Quantity, and the complement of Discount for each order detail, then averaging the results across all order details.",
            "The SQL query is correct. It groups the orders by ShipCountry, counts the number of orders for each country, orders the results in descending order by the count, and limits the result to the top entry. This correctly addresses the business question.",
            "The query correctly calculates the total units on order for each supplier by summing the 'UnitsOnOrder' for each 'SupplierID' in the 'products' table. No corrections are needed.",
            "The query is incorrect because the join condition between 'products' and 'orders' is wrong. It should join 'orders' to '[Order Details]' on 'OrderID' and 'products' to '[Order Details]' on 'ProductID'. Here's the corrected version.",
            "The SQL query correctly counts the number of distinct products for each supplier and orders them in descending order. It aligns with the business question.",
            "The query correctly calculates the total sales volume for each product by summing the ordered quantities and then orders the result to find the product with the highest sales volume. It is accurate as per the business question.",
            "The query is correct. It calculates the total units on order for each supplier by summing the 'UnitsOnOrder' column from the 'products' table, grouped by 'SupplierID'.",
            "The SQL query correctly calculates the average unit price of products supplied by suppliers from the USA. It joins the 'suppliers' and 'products' tables based on 'SupplierID' and filters results to only include suppliers from the USA. The query correctly groups by 's.Country' to calculate the average.",
            "The original query incorrectly joins the products table directly with orders on ProductID and OrderID. It should join products with [Order Details] on ProductID, and then [Order Details] with orders on OrderID.",
            "The query correctly calculates the total discount given on all orders by multiplying the unit price, quantity, and discount for each order detail and summing the result.",
            "The SQL query is correct. It calculates the count of discontinued products for each supplier by filtering on Discontinued = 1 and grouping by SupplierID.",
            "The original query does not correctly identify suppliers that have products but those products may not have been ordered. The correction involves joining the products table to the [Order Details] table to ensure that no products from the supplier have been used in any order.",
            "The original query incorrectly attempts to find the highest freight cost by aggregating with MAX and GROUP BY ProductID but doesn't relate Freight to suppliers. The corrected query finds the highest freight cost, associates it with the suppliers by joining the products and suppliers tables, and restricts the result to the highest freight.",
            "The SQL query correctly calculates the total quantity of products in stock for each supplier by summing up 'UnitsInStock' and grouping by 'SupplierID'. There are no errors in this query.",
            "The original query incorrectly joined 'products' and 'orders' tables using 'ProductID' and 'OrderID', respectively. Corrected by joining 'products' to '[Order Details]' on 'ProductID' and '[Order Details]' to 'orders' on 'OrderID'.",
            "The SQL query is correct and accurately calculates the average reorder level for products by each supplier.",
            "The original query mistakenly uses MAX(Discount) as an aggregation, which would return multiple orders with the same maximum discount incorrectly by 'GROUP BY'. The correct logic finds the maximum discount first and then retrieves all orders with that discount.",
            "The original query mistakenly used DATE_FORMAT which is not ANSI SQL. Corrected to use TO_CHAR for date formatting.",
            "The original query incorrectly assumes 'QuantityPerUnit' is numeric. It should parse the numeric part of the 'QuantityPerUnit' string before computing MAX.",
            "The original query has an error in the JOIN condition for linking the products and orders through the [Order Details] table. The correction involves explicitly joining [Order Details] with products using ProductID and with orders using OrderID.",
            "The original query uses `DATE_SUB(CURDATE(), INTERVAL 1 QUARTER)` which may not strictly align with standard quarterly calculations. Adjusted the query to calculate the start and end dates of the last quarter based on the current date.",
            "The query correctly counts the number of discontinued products for each supplier and orders them to find the supplier with the highest number. The use of LIMIT 1 ensures only the top supplier is returned. The query is correct.",
            "The original query is mostly correct. However, in the HAVING clause, it is better to use COUNT(DISTINCT SupplierID) directly rather than relying on the alias NumberOfSuppliers. This ensures clarity and potential compatibility with systems that may not recognize aliasing in HAVING clauses.",
            "The original query correctly calculates the average discount per supplier. The GROUP BY clause should use s.CompanyName instead of s.SupplierID to match the SELECT clause, since CompanyName is more informative for the output.",
            "The original query uses COUNT(DISTINCT OrderID), which is unnecessary as OrderID is the primary key in the orders table. The COUNT(OrderID) will produce the same result. Therefore, the corrected query is already presented as needed.",
            "The SQL query is correct and calculates the average freight cost for orders that have a shipped date, ensuring that only shipped orders are included.",
            "The SQL query correctly joins the 'products' and '[Order Details]' tables to calculate the total ordered quantity for each product. However, the GROUP BY clause should use 'p.ProductName' instead of 'p.ProductID' to align with the SELECT clause and provide clarity. The corrected query appropriately orders the results by 'TotalOrdered' in descending order and limits the results to the top 3.",
            "The query is mostly correct but didn't properly alias 'CategoryID' with the table. Added 'p.' to 'CategoryID' to indicate it belongs to 'products'.",
            "The query is mostly correct. The GROUP BY should use s.CompanyName instead of s.SupplierID to ensure the result is grouped by the supplier's name. This query will correctly return the supplier with the lowest average unit price.",
            "The original query was incorrect because it incorrectly used a subquery to filter products in '[Order Details]'. The join between '[Order Details]' and 'orders' was missing and should be established on 'OrderID'. The filtering by date should occur in the 'WHERE' clause directly for 'orders.OrderDate'.",
            "The original query groups by s.SupplierID, which should be corrected to group by s.CompanyName to match the select statement for the output to be accurate.",
            "The SQL query correctly calculates the average units in stock per product category by grouping the products table by CategoryID and computing the average of UnitsInStock.",
            "The query is correct. It selects products that have never been ordered by checking which ProductIDs are not present in the Order Details table.",
            "The SQL query correctly calculates the total discount amount by multiplying the unit price, quantity, and discount, and summing the results for all orders.",
            "The SQL query is correct. It accurately counts the number of orders with a freight cost greater than $100.",
            "The SQL query is correct for the given question. It joins the suppliers and products tables on the SupplierID, counts the distinct ProductID for each supplier, groups by SupplierID, and orders the results in descending order of unique products, returning the supplier with the highest count.",
            "The SQL query correctly calculates the average number of days orders were shipped past the required date by using the DATEDIFF function to identify orders shipped late and applying the AVG function. No corrections needed.",
            "The query correctly calculates the total sales revenue for each supplier by joining the suppliers, products, and order details tables. It groups by SupplierID and orders the results by total sales in descending order. No corrections needed.",
            "The SQL query correctly calculates the top 5 products by total units ordered. It joins the 'products' table with the 'Order Details' table on 'ProductID', groups by 'ProductName', and orders the results by total quantities in descending order, using LIMIT 5 to restrict the output. The query is valid and compliant with the ANSI SQL standard.",
            "The original query incorrectly attempts to relate orders to products using a subquery. This was corrected by using a proper JOIN between the 'orders' and 'Order Details' tables based on the OrderID.",
            "The query correctly joins the products and [Order Details] tables, calculates the total quantity for each product, groups the results by ProductName, and orders by TotalQuantity in descending order to find the most shipped product. The LIMIT 1 is used to select the product with the highest total quantity. The query is correct.",
            "The query correctly counts the number of orders where the ShippedDate is greater than the RequiredDate, indicating a delay. The query is accurate and correctly answers the business question.",
            "The SQL query correctly identifies suppliers with the most discontinued products by joining the suppliers and products tables, counting the discontinued products for each supplier, grouping by SupplierID, and ordering by the count in descending order. No changes are needed.",
            "The SQL query correctly calculates the average freight cost of all orders by selecting the AVG function on the Freight column of the orders table. The query is correct based on the provided schema and business question.",
            "The SQL query correctly calculates the total number of products supplied by each supplier. No changes are needed.",
            "The SQL query is correct. It calculates the average discount applied to all orders using the [Order Details] table.",
            "The SQL query is correct. It selects the product name and calculates the total sales revenue by multiplying the unit price by the quantity and adjusting for discounts. It joins the 'products' and '[Order Details]' tables on 'ProductID', groups by product name, orders by total revenue in descending order, and limits the result to one product with the highest revenue.",
            "The SQL query is correct as it accurately counts the number of products where the units in stock are less than the reorder level, aligning with the business question.",
            "The SQL query correctly calculates the total sales revenue per country by joining the orders and [Order Details] tables on OrderID and grouping by ShipCountry. No corrections are needed.",
            "The query correctly counts the number of products for each unique QuantityPerUnit, orders them by ProductCount in descending order, and accurately reflects the business question. No corrections are needed.",
            "The original query is mostly correct, but to ensure unique orders are counted, it is better to use COUNT(DISTINCT o.OrderID). Also, it maintains clarity by emphasizing unique orders counted per customer.",
            "The SQL query is correct. It selects the country and counts suppliers per country, groups by country, and orders the results by supplier count in descending order to find the countries with the highest number of suppliers.",
            "The original query incorrectly joins the orders table using a subquery on [Order Details]. Instead, it should directly join the orders table through [Order Details] using appropriate keys. The corrected query joins suppliers, products, [Order Details], and orders in the proper sequence, ensuring accurate calculation of the average lead time by city.",
            "The SQL query accurately addresses the business question. It correctly selects the shipping method (ShipVia) and calculates the average freight (Freight) for each shipping method. The results are grouped by ShipVia and ordered by AvgFreightCost in ascending order to show the lowest costs first. No changes needed.",
            "The query is correct. It calculates the total sales for each supplier based on the units they supplied, orders them by total sales in descending order, and limits the result to the top supplier.",
            "The original query incorrectly joins products directly to orders using ProductID and OrderID. The join should be from products to [Order Details] using ProductID, and then from [Order Details] to orders using OrderID.",
            "The query is mostly correct but should group by p.ProductName instead of p.ProductID since ProductName is selected.",
            "The original query retrieves the names of products that require reordering, but it does not return the count as the question asks. The revised query counts these products, as requested.",
            "The original SQL query incorrectly joined 'products' to 'orders' using 'ProductID' and 'OrderID', which does not establish the relationship. The query should join 'products' to '[Order Details]' on 'ProductID' and then '[Order Details]' to 'orders' on 'OrderID'. This corrected query establishes the right connections to identify suppliers who delivered late.",
            "The query correctly identifies the country with the most suppliers by counting the SupplierID for each country, grouping the results by country, and sorting the results in descending order to find the country with the highest count. The LIMIT 1 clause ensures only the top result is returned. No corrections are needed.",
            "The SQL query is correct. It calculates the total revenue generated from each supplier's products by joining the suppliers, products, and order details tables, and correctly applies the formula for Total Sales.",
            "The SQL query correctly computes the number of suppliers per city, orders the results in descending order, and limits the output to the top result. It is syntactically and logically correct.",
            "The original query did not include 's.CompanyName' in the GROUP BY clause, which is needed since aggregates are used with non-aggregated columns.",
            "The SQL query is correct and correctly calculates the average discount applied to products sold by each supplier. The query properly joins the suppliers, products, and [Order Details] tables and groups the results by supplier to calculate the average discount.",
            "The original query incorrectly joins the 'products' table directly to the 'orders' table on 'ProductID' and 'OrderID'. The correct join should include the '[Order Details]' table to properly connect 'products' and 'orders'.",
            "The SQL query is correct. It joins the suppliers table with the products table to count the number of products per supplier that have units on order. The query groups the data by SupplierID, orders the results by the count in descending order, and limits the result to the top entry, which answers the business question accurately.",
            "The query is correct. It selects orders where the difference between the ShippedDate and OrderDate is greater than 10 days.",
            "The SQL query correctly computes the average product price for each supplier, orders them in descending order, and returns the supplier with the highest average price. No corrections are needed.",
            "The SQL query correctly calculates the total revenue from discontinued products using the given formula for 'Total Sales'. The join between the 'products' and '[Order Details]' tables based on 'ProductID' and the condition 'p.Discontinued = 1' is appropriate.",
            "The original query didn't include the supplier's information, which is necessary to answer the question about total quantities ordered per product supplied by each supplier. The corrected query joins the 'suppliers' table and includes the 'CompanyName' of the supplier in the SELECT and GROUP BY clauses.",
            "The query correctly calculates the average lead time per shipping region and retrieves the region with the highest average lead time. However, since the business metric 'Supplier Lead Time' is defined in relation to suppliers, it might be beneficial to include supplier information in a more detailed analysis.",
            "The provided SQL query correctly answers the question by joining the suppliers and products tables on SupplierID and counting distinct CategoryIDs, grouped by SupplierID. The results are ordered by CategoryCount in descending order and limited to 1 to find the supplier with the most diverse range of products.",
            "The original query had a mistake in the calculation of the percentage. To ensure correct decimal multiplication, '100.0' is used instead of '100'.",
            "The SQL query incorrectly uses a join between 'orders' and 'products' without considering the 'Order Details' table. The correct query should join 'orders' to 'Order Details' first and then to 'products' using 'ProductID'.",
            "The SQL query correctly answers the question by selecting the supplier's company name and counting the number of discontinued products. The join between suppliers and products on SupplierID is correct, and the WHERE clause correctly filters discontinued products using 'products.Discontinued = 1'. The GROUP BY clause properly groups results by CompanyName.",
            "The SQL query correctly utilizes a LEFT JOIN between the suppliers and products tables and filters for suppliers where the ProductID is NULL, indicating that these suppliers have no associated products. The query is correct.",
            "The SQL query is correct and returns the top three products based on units on order. No changes are needed.",
            "The SQL query is correct. It selects the OrderID and Freight cost for each order from the orders table, which answers the question accurately.",
            "The SQL query is correct and accurately answers the business question.",
            "The SQL query correctly calculates the average discount provided per supplier by joining the 'Order Details' table with the 'products' and 'suppliers' tables. The GROUP BY clause is also correctly applied to 'suppliers.CompanyName'. The query is accurate and needs no changes.",
            "The original query is correct in logic but needs casting to handle integer division properly. Adding '::DECIMAL' ensures proper percentage calculation.",
            "The original query unnecessarily includes a GROUP BY clause. Since it doesn't involve any aggregation, the GROUP BY should be removed. The revised query efficiently joins the necessary tables to check the shipment dates against the required dates.",
            "The original query is mostly correct. The change to 'CURRENT_DATE' is to ensure ANSI SQL compliance. 'INTERVAL' requires specifying a string literal for the interval.",
            "The query is mostly correct. It checks for suppliers with products that appear in more than one distinct order. However, 'consistently ordered' could also imply a higher threshold for COUNT. If more specificity is required, the COUNT threshold should be adjusted accordingly. Additionally, it assumes that being part of multiple orders equates to being consistently ordered, which might not align with all interpretations of 'consistently.' If more context on 'consistently' means more frequent or regular orders, additional analysis or criteria might be necessary.",
            "The SQL query correctly finds the city with the highest number of suppliers by grouping the suppliers by city, counting the number of suppliers per city, and ordering the results in descending order to retrieve the top result. The query is correct as per the business question.",
            "The SQL query is correct. It calculates the average price of products supplied by each supplier by joining the 'suppliers' table with the 'products' table on the SupplierID column, then grouping by the supplier's company name and applying the AVG function to the UnitPrice column.",
            "The query is correct. It uses a LEFT JOIN to find products with no corresponding entries in the [Order Details] table, indicating they have never been ordered.",
            "The query correctly calculates the total units in stock by using the SUM function on the 'UnitsInStock' column of the 'products' table. No corrections are needed.",
            "The SQL query is correct. It correctly joins the necessary tables and calculates the average lead time per supplier. It then orders the results by the average lead time in ascending order and limits the output to the top three suppliers with the fastest delivery times.",
            "The original query finds the maximum discount per order, but we need the specific order with the overall highest discount. The corrected query identifies the single order with the maximum discount without grouping by OrderID.",
            "The SQL query is correct. It joins the 'suppliers' table with the 'products' table on 'SupplierID', counts distinct 'ProductID' for each supplier, groups the result by 'SupplierID', orders by the count in descending order, and limits the result to the top supplier.",
            "The original query uses DATE_SUB(CURDATE(), INTERVAL 1 MONTH) which incorrectly gets dates starting one month back from today. Adjusted to use LAST_DAY and INTERVAL to precisely capture last month's range.",
            "The SQL query is correct. It selects the city and counts the number of suppliers in each city, then orders the results in descending order by the number of suppliers, limiting the output to the top five cities. This aligns with the business question.",
            "The SQL query is correct. It accurately counts the number of products in the 'products' table where 'UnitsInStock' is equal to 0, which identifies products that are out of stock.",
            "The query correctly retrieves the names of discontinued products by selecting ProductName from the products table where the Discontinued flag is 1. The query is correct.",
            "The SQL query is mostly correct, but it is necessary to include 's.CompanyName' in the GROUP BY clause to match the SELECT clause. The corrected query is provided.",
            "The SQL query is correct. It selects the OrderID, RequiredDate, and ShippedDate from the orders table where the ShippedDate is greater than the RequiredDate, which identifies orders delivered later than the required date.",
            "The SQL query is correct and uses the appropriate JOIN between 'orders' and '[Order Details]' tables to calculate the total quantity of products ordered in the last year with the correct date filter.",
            "The SQL query correctly answers the question by selecting the products where the UnitsInStock is less than the ReorderLevel. It displays the ProductID, ProductName, ReorderLevel, and UnitsInStock, which aligns with the requirement to identify products below their reorder level.",
            "The original query did not account for distinct orders. The correction uses COUNT(DISTINCT od.OrderID) to ensure each order is only counted once per supplier.",
            "The original query is nearly correct but needs to include p.ProductName in the GROUP BY clause to comply with SQL standards.",
            "The original query incorrectly joins products to orders using 'p.ProductID = o.OrderID' instead of 'p.ProductID = o.ProductID'. Also, to ensure suppliers who haven't shipped any orders are correctly identified, a HAVING clause is used to filter suppliers with zero orders shipped. GROUP BY is added for correct aggregation.",
            "The SQL query correctly retrieves the top five most expensive products by ordering the products in descending order based on their UnitPrice and limiting the results to 5.",
            "The original query did not correctly filter orders to the current quarter. The correct approach uses DATE_TRUNC to filter orders from the start of the current quarter. Also, joining with the orders table directly is more efficient than using a subquery.",
            "The original query incorrectly joined the `orders` table directly on the `products` table using `ProductID` and `OrderID` fields which are not directly related. Instead, the `orders` table should be joined with the `[Order Details]` table using `OrderID` to get the products ordered. Additionally, use proper table and column references according to the schema.",
            "The original query refers to a 'categories' table, which is not defined in the schema provided. Instead, the query can be corrected by removing the JOIN with 'categories' and grouping directly by 'CategoryID' from the products table.",
            "The SQL query correctly calculates the total sales for each supplier by joining the relevant tables and uses aggregation to sum the sales. It orders the results to find the maximum and limits the result to one supplier as required by the question.",
            "The query was missing 'p.ProductName' in the GROUP BY clause. This has been corrected to ensure proper aggregation.",
            "The query correctly retrieves the discontinued products and their suppliers but does not count the discontinued products as required by the question. To get the number, use a COUNT clause.",
            "The original query is mostly correct but lacks the necessary grouping by 'CompanyName'. Adding 's.CompanyName' to the GROUP BY clause ensures correct aggregation per supplier.",
            "Corrected the join conditions to properly relate orders to suppliers through the products and order details tables. Added the 'JOIN [Order Details]' to match product and order IDs. Also included 's.CompanyName' in the GROUP BY clause.",
            "The original query incorrectly joins the 'orders' table with the 'products' table using 'OrderID' and 'ProductID' keys. Correctly joined 'orders' with '[Order Details]' on 'OrderID', and then joined '[Order Details]' with 'products' on 'ProductID'.",
            "The SQL query correctly counts the number of suppliers per city and orders the results in descending order to identify the cities with the highest number of suppliers.",
            "The original query only identifies the supplier with the most products but does not list their specific products. The corrected query first identifies the supplier with the most products and then retrieves all product details for that supplier.",
            "The original query returns the ProductID and ProductName, while the question asks for the count of products below their reorder level. The corrected query uses COUNT to return the number of such products.",
            "The original query incorrectly joins the orders and products tables directly, which causes mismatches. The correction involves using the [Order Details] table to properly link orders to products through their order and product IDs.",
            "The SQL query is correct and calculates the average number of days between the order date and the required date for orders using the DATEDIFF function.",
            "The original query uses nested subqueries, but the condition in the subquery checks for orders placed within the last year directly in the orders table join instead of a separate IN clause. This ensures the subquery correctly correlates the date with the product orders.",
            "The query is correct if the table 'categories' exists with the column 'CategoryID'. Since the schema provided does not mention a 'categories' table, its existence must be verified for the query to run successfully.",
            "The original query incorrectly joined 'orders' with 'products' on 'OrderID' and 'ProductID'. The correct join should involve the '[Order Details]' table to connect 'orders' and 'products'. The corrected query joins [Order Details] with 'products' using 'ProductID' and with 'orders' using 'OrderID'.",
            "The original query correctly finds the maximum price for products by each supplier but does not return the product name. The corrected query includes the product name and uses a subquery to get the most expensive product for each supplier.",
            "The original query uses UNION which removes duplicates. Using UNION ALL ensures both highest and lowest prices are returned, even if they are the same.",
            "The SQL query is correct and properly calculates the average unit price of products supplied by each supplier. It joins the 'suppliers' and 'products' tables on the 'SupplierID' and groups by 'SupplierID' to compute the average unit price.",
            "The original query incorrectly joins the 'orders' table directly with the 'products' table, which should actually be joined via the '[Order Details]' table. This correction involves adding a join on '[Order Details]' between 'products' and 'orders'."
        ],
        "difficulty": [
            "medium",
            "medium",
            "easy",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "easy",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "easy",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "advanced",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "easy",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "easy",
            "advanced",
            "medium",
            "medium",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "advanced",
            "easy",
            "medium",
            "easy",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "easy",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "easy",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "easy",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "advanced",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "easy",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced"
        ]
    },
    "Shipping Analysis": {
        "questions": [
            "What is the average shipping cost per order for each month?",
            "What percentage of orders have been delivered on or before the required date for each month?",
            "What is the average order fulfillment time for each month?",
            "Which shipping method has the highest average shipping cost?",
            "Which shipping method is the fastest on average to fulfill an order?",
            "How many orders were shipped late each month?",
            "Which month had the highest total freight cost?",
            "Which customer region has the highest on-time delivery rate?",
            "What is the average shipping cost per order for each shipping method?",
            "Which employee has processed the most orders?",
            "What is the total freight cost for each country?",
            "Which month has the highest on-time delivery percentage?",
            "What is the average order fulfillment time by shipping method?",
            "Which city has the highest number of orders shipped late?",
            "Which customers have the highest number of late deliveries?",
            "What is the difference in fulfillment time for on-time and late orders each month?",
            "Which region has the most orders with high freight costs?",
            "How many orders were shipped with each shipping method?",
            "What is the trend in average shipping costs over time?",
            "Which country has the lowest shipping costs on average?",
            "What is the average shipping cost per order each month?",
            "What is the on-time delivery rate for each month?",
            "How long does it take on average to fulfill an order each month?",
            "Which city has the highest average freight cost?",
            "What is the total number of orders shipped by each shipping method?",
            "How many orders were delivered late each month?",
            "What is the average freight cost broken down by shipping country?",
            "Which employee handled the most orders in a given month?",
            "How many orders are pending shipment as of today?",
            "What is the distribution of orders shipped per region each month?",
            "What percentage of orders are shipped to the USA?",
            "How does the shipping performance vary between different shipping methods?",
            "Which customer has the highest total shipping costs?",
            "What is the average order fulfillment time for domestic vs. international shipments?",
            "How many orders have a shipping cost greater than $100?",
            "What is the average time between the order date and the required date each month?",
            "Which shipping method has the fastest average delivery time?",
            "Identify any trends in shipping costs over the last year.",
            "What is the most common shipping method used by customers from Germany?",
            "How does employee efficiency vary based on the shipping regions they handle?",
            "What percentage of orders were delivered on or before the required date each month?",
            "How many days on average does it take to fulfill orders each month?",
            "Which shipping companies are used most frequently based on the ShipVia field?",
            "Which region has the highest average freight cost?",
            "What is the total number of orders shipped to each country?",
            "Which shipping company has the highest on-time delivery rate?",
            "What is the average number of days between order date and required date?",
            "Which month has the highest average order fulfillment time?",
            "What is the total freight cost for orders shipped in the last quarter?",
            "What is the total number of orders handled by each employee?",
            "Which city receives the most shipments?",
            "Identify orders that were shipped late and the shipping method used.",
            "Find the top 5 customers with the highest total freight costs.",
            "Determine the month with the most number of orders placed.",
            "What is the average shipping cost for each shipping company?",
            "Calculate the percentage of total orders delivered after the required date.",
            "Find the total freight cost by shipping company.",
            "How many orders were not shipped by the required date each month?",
            "Identify the countries with an on-time delivery rate above 90%.",
            "What percentage of orders were delivered on time each month?",
            "Which shipping method has the highest average freight cost?",
            "How many orders have been placed by each customer?",
            "What is the total freight cost for each shipping method?",
            "How many orders were shipped late every month?",
            "Which country has the highest average shipping cost?",
            "Which employee handled the most orders?",
            "What is the most common shipping city?",
            "What is the average shipping cost to each country?",
            "How many orders were shipped within two days of the order date?",
            "What is the average fulfillment time for orders shipped by each method?",
            "Which order took the longest to fulfill?",
            "How many orders have a freight cost above $50?",
            "What is the distribution of shipment destinations by country?",
            "What is the on-time delivery rate for each shipping method?",
            "What is the average freight cost for orders shipped to the USA?",
            "For each region, what is the average number of days between order and shipping?",
            "What is the average shipping cost for orders handled by each employee?",
            "What is the average freight cost per order per month?",
            "How much time on average does it take to fulfill an order each month?",
            "Which order had the highest freight cost, and what shipping method was used?",
            "Which city has the highest total freight cost for shipped orders?",
            "Identify the order with the highest shipping cost.",
            "How many orders are shipped to each country monthly?",
            "What is the average time difference between the required date and the shipped date for delayed orders?",
            "What is the distribution of shipping costs?",
            "How many orders are shipped via each shipping method?",
            "In which region is the average freight cost the highest?",
            "What is the trend in the number of orders over time?",
            "Identify the top customers by the number of orders placed.",
            "Which shipping method has the best on-time delivery rate?",
            "How many orders were shipped on weekends?",
            "What is the correlation between the order fulfillment time and shipping cost?",
            "Identify months with the most significant delays in shipping.",
            "What is the average order fulfillment time for each employee?",
            "How does the shipping cost vary by country?",
            "Which city has the highest number of late shipments?",
            "What is the average freight cost per month?",
            "How many orders were shipped on or before the required date each month?",
            "What is the monthly average time taken to fulfill an order?",
            "Which months had the highest on-time delivery rate?",
            "Which shipping method is used most frequently?",
            "What is the total freight cost by shipping company?",
            "How many orders were placed by each customer?",
            "What is the average order fulfillment time for orders shipped by each shipping method?",
            "What is the average freight cost by country?",
            "Which employees processed the most orders?",
            "What is the rate of orders with a fulfillment time under 5 days?",
            "Are there any regions with consistently higher freight costs?",
            "What is the trend of order placements over the past year?",
            "Identify any seasonal patterns in shipping times.",
            "What is the median freight cost per order?",
            "Which countries have the most delayed shipments?",
            "How does on-time delivery rate correlate with freight cost?",
            "Which ship cities have the longest average order fulfillment times?",
            "What percentage of orders are delivered on or before the required date each month?",
            "What is the total freight cost by shipping country?",
            "Which customer has the highest total freight cost?",
            "What is the average shipping cost per month for each shipping method?",
            "Find all orders shipped by a specific carrier within a certain date range.",
            "Identify cities with the highest average order fulfillment time.",
            "Which months have the highest on-time delivery rates?",
            "How many orders were shipped late by each shipping method?",
            "What is the average freight cost for orders shipped to each region?",
            "Which employees are responsible for orders with the highest shipping costs?",
            "Find the top three customers by the number of orders placed.",
            "Determine the variance in shipping costs per month.",
            "Calculate the correlation between order fulfillment time and freight cost.",
            "Determine which shipping country has the lowest on-time delivery rate.",
            "What is the maximum delay encountered for any order?",
            "List orders that were not shipped by the required date.",
            "Identify the most common shipping recipient names.",
            "What is the average shipping cost per order per month?",
            "How many orders were delivered on time each month?",
            "What is the average order fulfillment time per month?",
            "Which shipping method is the most frequently used?",
            "What is the total freight cost per shipping method?",
            "How many orders are shipped after the required date?",
            "Which customer has the most orders?",
            "Which employee is handling the most orders?",
            "What is the overall on-time delivery rate?",
            "What is the total number of orders per month?",
            "Which region has the highest number of delayed deliveries?",
            "How many unique customers placed orders each month?",
            "What is the average fulfillment time by shipping method?",
            "Which month has the highest number of orders?",
            "What is the average shipping cost per country?",
            "Which city receives the highest number of orders?",
            "What is the percentage of orders shipped using each method?",
            "How many orders were shipped but never reached the required date?",
            "What is the total freight cost for orders shipped in March 2023?",
            "Which shipping method delivers the highest number of on-time shipments?",
            "What is the average order fulfillment time per month for 2023?",
            "What is the percentage of on-time deliveries each month?",
            "What is the average order fulfillment time each month?",
            "Which month had the highest shipping cost on average?",
            "What is the total freight cost for orders shipped by each shipping method?",
            "Which city had the highest number of orders shipped to it in the last year?",
            "What is the percentage of orders shipped late for each month?",
            "Which employee has handled the most orders?",
            "What is the average shipping cost for each shipping method?",
            "What is the average time taken to ship orders after the required date when they are late?",
            "What is the variance in shipping costs across different regions?",
            "Which country has the highest on-time delivery rate?",
            "What is the average number of days between the order date and the required date?",
            "For orders shipped late, what is the average delay in days?",
            "How many orders were shipped on the weekend?",
            "Which customer has the highest shipping expenditure?",
            "What is the correlation between the freight cost and the fulfillment time?",
            "What is the total count of unique customers who have made orders?",
            "Which shipping method tends to have the fastest fulfillment time?",
            "What is the average order fulfillment time for each shipping method?",
            "Which country has the highest average freight cost?",
            "Which shipping method is most commonly used?",
            "What is the total freight cost for orders shipped to 'USA'?",
            "How many orders are shipped to each city?",
            "What is the average delivery time for orders shipped after the required date?",
            "Which employee handled the most orders in the last month?",
            "What is the percentage of orders requiring delivery within one week?",
            "Compare the average shipping cost between two specific regions.",
            "What is the maximum freight cost incurred for a single order?",
            "Which customer has the highest number of late deliveries?",
            "What is the month with the highest number of orders placed?",
            "How many orders were handled by each employee?",
            "Are there any orders with zero freight costs, and if so, how many?",
            "Which shipping company (ShipVia) has the best on-time delivery record?",
            "How many days on average do orders ship after the required date?",
            "What is the trend in total freight costs over the past year by month?",
            "Which orders have the longest delay from order to shipment?",
            "What is the average shipping cost per order on a monthly basis?",
            "What is the average order fulfillment time on a monthly basis?",
            "Which shipping method is most frequently used?",
            "Which month had the highest on-time delivery rate?",
            "Which customer places the most orders?",
            "What is the frequency of orders shipped versus not shipped by month?",
            "How many orders were shipped after the required date?",
            "What is the average freight cost by shipping method?",
            "Which region has the highest number of orders?",
            "What is the maximum order fulfillment time recorded?",
            "What is the average time between order date and required date?",
            "How does the average shipping cost compare between two specific countries?",
            "What is the distribution of orders by shipping city?",
            "Determine the impact of shipping cost on fulfillment time.",
            "How many orders have a shipping postal code starting with '1'?",
            "What is the correlation between order volume and shipping cost?",
            "How does on-time delivery rate vary by shipping method?",
            "How many orders were delivered on or before the required date each month?",
            "What is the average order fulfillment time (in days) per month?",
            "What percentage of orders were shipped late each month?",
            "What is the total freight cost for orders shipped to each country?",
            "How many orders were shipped by each shipping method?",
            "Identify the top 5 cities with the highest number of late deliveries.",
            "What is the average number of days an order takes from required date to shipped date for late deliveries?",
            "Which month had the highest average shipping cost?",
            "List the 3 employees with the fastest average order fulfillment time.",
            "What is the most common shipping destination country?",
            "How has the average shipping cost per order changed over the last year?",
            "What percentage of orders use each shipping method?",
            "Which orders took the longest time to ship?",
            "What is the monthly growth rate of total orders shipped?",
            "What percentage of freight costs come from orders shipped to Europe?",
            "Identify markets (country or region) with the highest average freight cost.",
            "What is the average number of orders shipped per customer each month?",
            "What are the top 3 regions with the slowest average shipping times?",
            "How long on average does it take to fulfill an order each month?",
            "What is the average shipping cost per order in each month of the year?",
            "What is the average time taken to fulfill orders each month?",
            "How many orders have been shipped by each shipping company per month?",
            "What is the total freight cost per country?",
            "What is the average time between the order date and the shipping date for each shipping method?",
            "Which month had the highest number of late deliveries?",
            "What is the total number of orders shipped to each region?",
            "Which employee handled the most number of orders in the past year?",
            "For orders with a shipping cost higher than the average, what is the average fulfillment time?",
            "What is the distribution of orders across different shipping companies?",
            "Which city has the highest number of orders that were shipped late?",
            "What is the trend in average freight cost over the past six months?",
            "What is the longest time it took for an order to be fulfilled in the last quarter?",
            "How does the average shipping cost compare between top two shipping methods?",
            "Which shipping company delivers the most to a specific country?",
            "What proportion of orders is delivered within three days of the order date?",
            "What is the average order fulfillment time for orders shipped during weekends?",
            "How does the on-time delivery rate vary by country?",
            "How many orders are shipped late each month?",
            "What is the average time taken to fulfill orders for each employee?",
            "Which regions have the longest order fulfillment times?",
            "What is the percentage of orders shipped within the same country?",
            "Which month has the highest number of late shipments?",
            "What is the trend in average shipping cost over the last year?",
            "How many orders are shipped using more than one shipping method?",
            "What is the average freight cost for orders shipped to each city?",
            "How many orders are fulfilled in less than a week?",
            "Which shipping methods result in the quickest delivery times?",
            "What percentage of orders are shipped internationally?",
            "What is the relationship between shipping cost and delivery speed?",
            "What is the percentage of orders delivered on or before the required date for each month?",
            "How many days on average does it take to fulfill an order for each month?",
            "Which month had the highest average shipping cost per order?",
            "What percentage of orders were not delivered on time each month?",
            "What is the total freight cost over all orders?",
            "Find the order with the maximum freight cost.",
            "Calculate the total number of orders shipped via each shipping method.",
            "Determine the country with the highest number of shipped orders.",
            "What is the average freight cost for each shipping method across all months?",
            "Identify the shipping method with the lowest average fulfillment time.",
            "Which city has the highest average shipping cost?",
            "Find orders that were shipped after the required date and provide their details.",
            "Calculate the total freight cost for each country.",
            "Determine the number of orders shipped to each region.",
            "What is the overall on-time delivery rate for all orders?",
            "Find the order with the shortest fulfillment time.",
            "Calculate the percentage of orders shipped late for each region.",
            "What is the median fulfillment time for all orders?",
            "How many orders are shipped per month?",
            "What is the on-time delivery rate by country?",
            "What was the longest order fulfillment time recorded?",
            "Are certain employees consistently involved with late shipments?",
            "Which shipping company has the highest average freight cost?",
            "How does the on-time delivery rate vary by region?",
            "What is the average order fulfillment time per shipping method?",
            "Does a higher freight cost correlate with faster delivery?",
            "What is the distribution of orders by shipping region?",
            "How many orders are still pending shipment?",
            "Which month experienced the highest shipping cost?",
            "What is the average shipping cost per order by country?",
            "Which shipping method has the shortest average fulfillment time?",
            "Is there a trend in shipping delays over the past year?",
            "What is the average time taken to fulfill an order each month?",
            "What is the total freight cost for each shipping country?",
            "How many orders were shipped late in each month?",
            "What percentage of orders were delivered on or before the required date for each month?",
            "Which employee handled the most on-time deliveries in the last year?",
            "What is the average order fulfillment time for orders shipped to each country?",
            "How many orders were shipped late in the last quarter?",
            "What is the total freight cost for orders delivered to each city?",
            "What is the average fulfillment time for orders with a freight cost greater than $50?",
            "What is the trend of shipping costs over the last six months?",
            "What is the average shipping cost for orders that were delivered late?",
            "How many orders used each shipping method in the last year?",
            "Which city had the most late deliveries in the past year?",
            "What is the longest order fulfillment time recorded?",
            "Which customer has the highest number of orders shipped on time?",
            "What is the correlation between freight cost and delivery time?",
            "Which region experiences the most delays in shipments?",
            "How many orders were placed on weekends?",
            "What is the average shipping cost per month?",
            "How many days on average does it take to fulfill an order each month?",
            "Which shipping company is used most frequently?",
            "Which country receives the most shipments?",
            "Identify the region with the highest on-time delivery rate.",
            "What is the average order fulfillment time for each shipping company?",
            "Which employee processes the most orders?",
            "What is the maximum freight cost for any single order?",
            "How does the shipping cost vary by region?",
            "Calculate the percentage of orders for each shipping method in the last month.",
            "Which city has the least number of orders shipped?",
            "Determine the month with the highest average shipping cost.",
            "Analyze the trend in on-time delivery rate over the past year.",
            "What is the distribution of shipping costs across different countries?",
            "How many unique customers placed orders last month?",
            "Identify the shipping method with the highest average cost.",
            "What is the percentage of orders delivered on or before the required date each month?",
            "Which city has the highest number of shipped orders?",
            "What is the maximum and minimum freight cost for an order each month?",
            "Which employee has handled the highest number of orders?",
            "What is the percentage of orders shipped within the specified region?",
            "For each customer, what is the average fulfillment time of their orders?",
            "How many distinct shipping recipients are there each month?",
            "What is the trend of shipping costs over the past six months?",
            "What is the distribution of orders by shipment city?",
            "Which shipping company provides the lowest average freight cost?",
            "How many orders exceed a freight cost of $100?",
            "What is the correlation between order fulfillment time and shipping cost?",
            "Which countries have the shortest average order fulfillment time?",
            "What are the top three regions with the highest on-time delivery rate?",
            "What percentage of orders were delivered on or before the required date every month?",
            "Which shipping company has the highest average cost per shipment?",
            "What is the total freight cost for each customer?",
            "Which employee processed the most orders?",
            "What is the total number of orders placed each month?",
            "How many shipments were sent to each country?",
            "What are the top 5 cities by number of shipments?",
            "For which orders was the shipping time more than 7 days?",
            "What is the average order processing time by employee?",
            "Which order took the longest to ship?",
            "What percentage of orders had a shipping cost above $100?",
            "Which regions receive the most shipments?",
            "What is the trend in shipping costs over the past year?",
            "How many orders were shipped using each shipping method?",
            "What is the distribution of shipment times across different regions?",
            "What is the average freight cost per order for each month?",
            "What is the average order fulfillment time in days for each month?",
            "Which shipping company (ShipVia) has the highest average shipping cost?",
            "How many orders were placed each month?",
            "What is the average freight cost for orders shipped after the required date?",
            "Which employee has handled the most shipments?",
            "What is the average shipping cost per order, aggregated monthly?",
            "What percentage of orders were delivered on or before the required date, aggregated monthly?",
            "What was the average time taken to fulfill orders each month?",
            "Which shipping method is most commonly used each month?",
            "What is the total freight cost incurred each month?",
            "What is the maximum shipping cost recorded for a single order each month?",
            "Which city had the highest number of orders shipped to it in the last quarter?",
            "What is the average fulfillment time for each shipping method?",
            "Which region has the lowest on-time delivery rate?",
            "How many orders were shipped by each employee each month?",
            "What is the average shipping cost per country each month?",
            "Which shipping company (ShipVia) had the highest on-time delivery rate last year?",
            "What is the distribution of shipping costs across different regions?",
            "How many orders were shipped after their required date during the holiday season?",
            "Which customer has incurred the highest total freight costs?",
            "What has been the month-over-month growth in the number of orders?",
            "What percentage of orders have a shipping cost greater than $100?",
            "What is the variance in shipping costs for orders shipped to Europe?",
            "How many orders did not have a shipped date, and thus could be delayed?",
            "What is the average shipping cost per order over the last month?",
            "What percentage of orders were delivered on time this month?",
            "What is the average order fulfillment time for the current month?",
            "Which shipping method has the lowest average cost per order?",
            "Which shipping country has the highest on-time delivery rate?",
            "What is the monthly trend of order fulfillment time over the past year?",
            "How many orders were shipped over the last month, grouped by shipping company?",
            "Which employee has handled the most orders successfully delivered on time?",
            "What is the correlation between freight cost and order fulfillment time?",
            "How does the average shipping cost differ across shipping regions?",
            "What is the busiest shipping month based on total orders shipped?",
            "Which city has the highest number of delayed shipments?",
            "How many orders have a shipping cost above the average for their shipping method?",
            "What is the median fulfillment time for orders shipped to each country?",
            "Which shipping company has the highest average delay in delivery?",
            "What is the average shipping cost for orders requiring quick delivery?",
            "How do on-time delivery rates vary by shipping city and region?",
            "What percentage of orders were shipped within two days of being placed?",
            "What is the total freight cost incurred in the past quarter?",
            "Which shipping postal code areas have the most irregular delivery times?",
            "How many orders are shipped with each shipping method?",
            "Which city has the most orders shipped to it?",
            "What is the total freight cost for orders shipped in 2023?",
            "What is the average fulfillment time for orders shipped to the USA?",
            "For which month did the shipping cost per order exceed $50 on average?",
            "Which customer placed the most orders?",
            "What is the average number of days between the order date and required date?",
            "How many orders were placed but not yet shipped?",
            "What is the average shipping cost to each region?",
            "How many orders are shipped more than a week late?",
            "What is the average freight cost for orders shipped in December?",
            "How many orders were made by customers from Germany?",
            "What is the average shipping cost per employee?",
            "What is the percentage of orders that were delivered on or before the required date each month?",
            "Which shipping method has the highest on-time delivery rate?",
            "What is the total freight cost incurred for each shipping country?",
            "Which city has the highest average shipping cost per order?",
            "How many orders were shipped each month?",
            "What is the average time between order placement and the required date?",
            "Which employee has handled the highest number of on-time deliveries?",
            "What is the most common shipping method for orders with late deliveries?",
            "What is the minimum, maximum, and average freight cost for orders shipped to 'USA'?",
            "Identify any orders that were shipped before they were ordered (data error check).",
            "What is the variance in shipping costs for each region?",
            "How many orders have not yet been shipped?",
            "What is the average number of days late for orders shipped past the required date?",
            "Find the shipping method with the highest total freight cost.",
            "Which shipping recipient name appears most frequently in orders?",
            "What percentage of orders have a shipping address in the 'California' region?",
            "What day of the week do most shipments occur?",
            "Compare the total freight cost for orders by week.",
            "Which orders were shipped after the required date?",
            "What percent of orders were delivered on time each month?",
            "Which city had the highest freight costs in the last year?",
            "What is the average order fulfillment time by shipping company?",
            "How many orders are shipped per shipping company each month?",
            "What is the total freight cost for orders shipped to a specific country?",
            "Which employee managed the most orders last month?",
            "Which month had the highest number of orders shipped?",
            "What is the average shipping delay for orders not delivered on time?",
            "Which region experiences the highest average shipping cost?",
            "What is the variance in shipping cost per order for the last quarter?",
            "How many unique customers placed orders in the last year?",
            "What is the average shipping cost for orders shipped to different countries?",
            "Which shipping method is the fastest on average?",
            "What is the most common shipping destination by city?",
            "How many orders were shipped after their required dates last quarter?",
            "What is the average number of days between order and shipping for each employee?",
            "Which country had the most on-time deliveries last year?",
            "How many orders exceed a shipping cost of $100?",
            "Which city has the highest average order fulfillment time?",
            "What is the order ID of the order with the lowest freight cost?",
            "Which employee handled the most orders last year?",
            "What percentage of orders are shipped to a different country than the order's origin?",
            "How many orders were shipped after their required date?",
            "What is the total freight cost per shipping company each year?",
            "Which shipping recipient received the most orders?",
            "What is the average order fulfillment time for orders shipped using each shipping method?",
            "Which country has the fastest average shipping time?",
            "Which month experiences the most delayed shipments?",
            "What is the highest freight cost recorded in the database?",
            "How many orders were handled by each employee each year?",
            "What is the total freight cost incurred by each shipping method?",
            "What percentage of orders were shipped after the required date?",
            "What is the peak month for order shipments?",
            "What is the average fulfillment time for orders shipped after the required date?",
            "How many orders were fulfilled by each employee?",
            "In which month was the freight cost the highest?",
            "Which country has the most orders shipped to?",
            "What is the average freight cost for orders shipped to each country?",
            "What is the fastest average shipping method based on fulfillment time?",
            "How many unique shipping recipients are there in the dataset?",
            "Which recipient received the highest number of shipments?",
            "What is the distribution of order fulfillment time across different regions?",
            "Are there any trends in shipping cost over time?",
            "What percentage of orders were delivered on or before their required dates for each month?",
            "Which shipping method has the lowest average shipping cost?",
            "What is the total freight cost incurred in each country?",
            "For each city, what is the average number of days an order takes from order date to ship date?",
            "What is the trend of average freight cost over the last year?",
            "Identify the top 5 customers by order count.",
            "Which region has the most expensive shipping on average?",
            "How many orders were fulfilled within two days of the order date?",
            "What are the top 3 shipping addresses based on frequency of deliveries?",
            "How many orders were shipped to a postal code starting with 'XYZ'?",
            "What is the monthly distribution of late deliveries?",
            "In which month did the highest average freight cost occur?",
            "Which employees have the best on-time delivery records?",
            "What is the average order fulfillment time by region?",
            "What is the average shipping cost per order for each month in the year 2023?",
            "What percentage of orders were delivered on or before the required date for January 2023?",
            "Which shipping method was used most frequently in Q1 of 2023?",
            "What is the total freight cost incurred by each shipping method for the month of March 2023?",
            "What is the average shipping cost per order during each month?",
            "How many orders were delivered on or before the required date for each month?",
            "What is the average time taken to fulfill an order for each month?",
            "What is the total freight cost for shipments handled by each shipping method?",
            "Which customer has the highest total freight cost over all their orders?",
            "Which month experienced the highest average shipping cost per order?",
            "Which city received the most shipments?",
            "How many orders were placed by each employee and what was their total freight?",
            "Which shipper had the least number of delayed orders?",
            "For each country, what is the average shipping cost per order?",
            "What is the median order fulfillment time across all orders?",
            "What are the top three customers with the fastest average order fulfillment time?",
            "How many orders did not have a shipped date?",
            "How does the average shipping cost for domestic orders compare to international orders?",
            "Which shipping region has the highest order volume?",
            "What percentage of orders are delivered on or before the required date?",
            "Which shipping company incurs the highest average shipping cost?",
            "How does the average order fulfillment time vary across different regions?",
            "What is the monthly trend of orders shipped late?",
            "What is the average shipping cost per order for each country?",
            "Which employee handles the most orders shipped late?",
            "What is the total freight cost for orders shipped within the last quarter?",
            "How many orders have a shipping delay longer than 5 days?",
            "What is the average time difference between order date and required date?",
            "Which country has the lowest on-time delivery rate?",
            "What is the maximum shipping delay recorded?",
            "How many orders have zero freight cost?",
            "What is the correlation between shipping cost and delivery time?",
            "In which month was the average order fulfillment time the shortest?",
            "What percentage of orders were delivered on or before the required date last month?",
            "What is the average order fulfillment time over the past year?",
            "Which shipping method had the highest number of delays in the last quarter?",
            "How many orders were shipped to each country in the current year?",
            "Which employee handled the most orders last month?",
            "What is the total freight cost by region over the last year?",
            "Which customers have placed orders with a total freight value higher than $500 this year?",
            "What is the average shipping time for orders shipped within the same country as the company?",
            "How does the shipping cost compare between different shipping methods?",
            "Which city has received the highest number of shipments year-to-date?",
            "What is the average fulfillment time for orders with freight costs above the monthly average?",
            "How many orders were shipped late by more than 3 days in the last quarter?",
            "Identify the month with the highest on-time delivery rate in the previous year.",
            "What is the distribution of freight costs for orders placed by customers in the 'North' region?",
            "How do shipment arrival times vary between domestic and international shipments?",
            "Which shipping company has the highest average shipping cost in the last year?",
            "What is the correlation between order size and shipping time for last month's orders?",
            "How many employees handled orders for customers in a particular city this year?",
            "What is the maximum, minimum, and average shipping cost for orders shipped within Europe?",
            "Which orders were shipped on or before their required date, and what is the percentage of such orders each month?",
            "How many orders were shipped from each shipping method?",
            "Find orders where the shipping date is after the required date.",
            "What is the average order fulfillment time by country?",
            "How many late shipments were there each month?",
            "Which shipping method has the lowest average freight cost?",
            "What is the variance in shipping costs for each month?",
            "Identify the top 5 orders with the highest freight costs.",
            "What percentage of orders had zero shipping cost each month?",
            "Which customers have made the most orders?",
            "What is the longest time taken to fulfill an order?",
            "How many orders were placed and shipped within the same city?",
            "What is the average shipping delay time for late shipments?",
            "Find the average order fulfillment time for each employee.",
            "What is the average shipping cost per order in the month of January 2023?",
            "What is the on-time delivery rate for March 2023?",
            "What is the average order fulfillment time in April 2023?",
            "What is the average shipping cost per order for the last month?",
            "What is the on-time delivery rate for the previous quarter?",
            "How many orders were shipped after the required date last year?",
            "What is the average order fulfillment time this month?",
            "Which country has the highest shipping cost on average?",
            "Who is the employee with the most on-time deliveries last year?",
            "How many orders have been placed but not yet shipped?",
            "What is the maximum freight cost recorded for a single order?",
            "Which city has received the highest number of shipments this year?",
            "Find the month with the highest average shipping cost in the last year.",
            "What is the total freight cost for all orders delivered on time this month?",
            "Which region has the lowest on-time delivery rate this quarter?",
            "Calculate the total number of days taken to fulfill orders this month.",
            "Find the shipping method used for the order with the largest delay from required date.",
            "What is the distribution of shipments among different countries last quarter?",
            "What is the trend of average shipping costs over the past six months?",
            "Which customer has placed the largest number of orders this year?",
            "What percentage of orders have a shipping cost over $100 this month?",
            "Identify the top 3 employees with the fastest average fulfillment time.",
            "What is the total freight cost for each shipping company?",
            "Which city has the fastest average order fulfillment time?",
            "What is the distribution of freight costs for each shipping method?",
            "What percentage of orders are shipped to each country?",
            "Which employee has the highest average shipping cost per order?",
            "What is the trend of the average shipping cost over the last year?",
            "How many orders are shipped per month per shipping company?",
            "How many orders have not been shipped yet?",
            "What is the variance in shipping costs per month?",
            "Which shipping region has the most on-time deliveries?",
            "What is the average number of days between the required date and the actual shipped date for late orders?",
            "How have shipping times changed over the years?",
            "What is the monthly average shipping cost per order?",
            "What is the on-time delivery rate across all orders?",
            "What is the total shipping cost for each shipping method?",
            "What is the average shipping cost per city?",
            "Which month experienced the highest number of late shipments?",
            "Which country has the best on-time delivery rate?",
            "What is the average delivery time across different regions?",
            "How does the average freight cost change over the months?",
            "What is the total number of orders shipped before the required date?",
            "What is the total freight cost per region?",
            "Which shipping company's method results in the shortest delivery time?",
            "What is the average number of days taken to ship an order after it's required date?",
            "Which customers have had all their orders delivered on time?",
            "Which employees are linked to the most orders?",
            "What is the distribution of orders by shipping country?",
            "What is the trend of average freight cost over the past year?",
            "What shipping method has the shortest average fulfillment time?",
            "How does the on-time delivery rate vary between regions?",
            "What is the correlation between freight cost and shipping time?",
            "What are the top three cities with the highest number of orders?",
            "What is the breakdown of orders by shipping company?",
            "Which customers have the highest average shipping costs?",
            "What is the average shipping time for orders shipped to each region?"
        ],
        "sql_queries": [
            "SELECT DATE_TRUNC('month', OrderDate) AS OrderMonth, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY OrderMonth;",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS OrderMonth, (CAST(SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) AS DECIMAL) / COUNT(*)) * 100 AS OnTimeDeliveryRate FROM orders GROUP BY OrderMonth;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY OrderMonth;",
            "SELECT ShipVia, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipVia ORDER BY AvgShippingCost DESC LIMIT 1;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia ORDER BY AvgFulfillmentTime ASC LIMIT 1;",
            "SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS ShipMonth, COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipMonth;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY Year, Month ORDER BY TotalFreightCost DESC LIMIT 1;",
            "SELECT ShipRegion, (SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS OnTimeDeliveryRate FROM orders GROUP BY ShipRegion ORDER BY OnTimeDeliveryRate DESC LIMIT 1;",
            "SELECT ShipVia, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipVia;",
            "SELECT EmployeeID, COUNT(OrderID) AS OrdersProcessed FROM orders GROUP BY EmployeeID ORDER BY OrdersProcessed DESC LIMIT 1;",
            "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS OrderMonth, (SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END)::DECIMAL / COUNT(*)::DECIMAL) * 100 AS OnTimeDeliveryPercentage FROM orders GROUP BY OrderMonth ORDER BY OnTimeDeliveryPercentage DESC LIMIT 1;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia;",
            "SELECT ShipCity, COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipCity ORDER BY LateOrders DESC LIMIT 1;",
            "SELECT CustomerID, COUNT(*) AS LateDeliveries FROM orders WHERE ShippedDate > RequiredDate GROUP BY CustomerID ORDER BY LateDeliveries DESC LIMIT 1;",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS OrderMonth, AVG(CASE WHEN ShippedDate <= RequiredDate THEN DATEDIFF(ShippedDate, OrderDate) END) AS OnTimeFulfillment, AVG(CASE WHEN ShippedDate > RequiredDate THEN DATEDIFF(ShippedDate, OrderDate) END) AS LateFulfillment FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');",
            "SELECT ShipRegion, COUNT(*) AS HighFreightOrders FROM orders WHERE Freight > 100 GROUP BY ShipRegion ORDER BY HighFreightOrders DESC LIMIT 1;",
            "SELECT ShipVia, COUNT(*) AS OrdersShipped FROM orders GROUP BY ShipVia;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY OrderMonth ORDER BY OrderMonth;",
            "SELECT ShipCountry, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipCountry ORDER BY AvgShippingCost ASC LIMIT 1;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY Month;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month;",
            "SELECT ShipCity, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipCity ORDER BY AvgFreightCost DESC LIMIT 1;",
            "SELECT ShipVia, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipVia;",
            "SELECT DATE_TRUNC('month', ShippedDate) AS Month, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY Month;",
            "SELECT ShipCountry, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipCountry;",
            "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) AND EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1;",
            "SELECT COUNT(OrderID) AS PendingOrders FROM orders WHERE ShippedDate IS NULL;",
            "SELECT DATE_TRUNC('month', ShippedDate) AS Month, ShipRegion, COUNT(OrderID) AS OrdersShipped FROM orders GROUP BY Month, ShipRegion;",
            "SELECT COUNT(OrderID) * 100.0 / (SELECT COUNT(*) FROM orders) AS PercentageToUSA FROM orders WHERE ShipCountry = 'USA';",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgDeliveryTime FROM orders GROUP BY ShipVia ORDER BY AvgDeliveryTime ASC;",
            "SELECT CustomerID, SUM(Freight) AS TotalShippingCosts FROM orders GROUP BY CustomerID ORDER BY TotalShippingCosts DESC LIMIT 1;",
            "SELECT CASE WHEN ShipCountry = 'USA' THEN 'Domestic' ELSE 'International' END AS ShipmentType, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipmentType;",
            "SELECT COUNT(OrderID) AS HighCostOrders FROM orders WHERE Freight > 100;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(CAST(RequiredDate AS DATE) - CAST(OrderDate AS DATE)) AS AvgRequiredTime FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgDeliveryTime FROM orders GROUP BY ShipVia ORDER BY AvgDeliveryTime ASC LIMIT 1;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgFreight FROM orders WHERE OrderDate >= DATEADD(year, -1, CURRENT_DATE) GROUP BY Month ORDER BY Month;",
            "SELECT ShipVia, COUNT(ShipVia) AS UsageCount FROM orders WHERE ShipCountry = 'Germany' GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
            "SELECT EmployeeID, ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EmployeeID, ShipRegion ORDER BY EmployeeID, AvgFulfillmentTime ASC;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, AVG(DATE_PART('day', ShippedDate - OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month;",
            "SELECT ShipVia, COUNT(*) AS Frequency FROM orders GROUP BY ShipVia ORDER BY Frequency DESC;",
            "SELECT ShipRegion, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipRegion ORDER BY AvgFreightCost DESC;",
            "SELECT ShipCountry, COUNT(*) AS TotalOrders FROM orders GROUP BY ShipCountry ORDER BY TotalOrders DESC;",
            "SELECT ShipVia, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*) AS OnTimeRate FROM orders GROUP BY ShipVia ORDER BY OnTimeRate DESC;",
            "SELECT AVG(DATEDIFF(RequiredDate, OrderDate)) AS AvgDaysRequired FROM orders;",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, AVG(DATE_PART('day', ShippedDate - OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month ORDER BY AvgFulfillmentTime DESC LIMIT 1;",
            "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShippedDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months';",
            "SELECT EmployeeID, COUNT(*) AS OrdersHandled FROM orders GROUP BY EmployeeID ORDER BY OrdersHandled DESC;",
            "SELECT ShipCity, COUNT(*) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC;",
            "SELECT OrderID, ShipVia FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT CustomerID, SUM(Freight) AS TotalFreight FROM orders GROUP BY CustomerID ORDER BY TotalFreight DESC LIMIT 5;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(*) AS TotalOrders FROM orders GROUP BY Month ORDER BY TotalOrders DESC LIMIT 1;",
            "SELECT ShipVia, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipVia;",
            "SELECT COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) * 100.0 / COUNT(*) AS LatePercentage FROM orders;",
            "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) AS LateOrders FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');",
            "SELECT ShipCountry, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipCountry HAVING COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) > 90;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, ROUND(100.0 * SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID), 2) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT ShipVia, AVG(Freight) AS AverageFreightCost FROM orders GROUP BY ShipVia ORDER BY AverageFreightCost DESC LIMIT 1;",
            "SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID;",
            "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
            "SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY Month;",
            "SELECT ShipCountry, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY ShipCountry ORDER BY AverageShippingCost DESC LIMIT 1;",
            "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT ShipCountry, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY ShipCountry;",
            "SELECT COUNT(OrderID) AS OrdersWithinTwoDays FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) <= 2;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY ShipVia;",
            "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTime FROM orders ORDER BY FulfillmentTime DESC LIMIT 1;",
            "SELECT COUNT(OrderID) AS OrdersAbove50 FROM orders WHERE Freight > 50;",
            "SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCountry ORDER BY NumberOfOrders DESC;",
            "SELECT ShipVia, ROUND(100.0 * SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID), 2) AS OnTimeDeliveryRate FROM orders GROUP BY ShipVia;",
            "SELECT AVG(Freight) AS AverageFreightToUSA FROM orders WHERE ShipCountry = 'USA';",
            "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageDaysToShip FROM orders GROUP BY ShipRegion;",
            "SELECT EmployeeID, AVG(Freight) AS AverageFreightCost FROM orders GROUP BY EmployeeID;",
            "SELECT DATE_TRUNC('month', OrderDate) AS month, AVG(Freight) AS avg_freight_cost FROM orders GROUP BY month;",
            "SELECT DATE_TRUNC('month', OrderDate) AS month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY month;",
            "SELECT OrderID, ShipVia, Freight FROM orders ORDER BY Freight DESC LIMIT 1;",
            "SELECT ShipCity, SUM(Freight) AS TotalFreightCost FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipCity ORDER BY TotalFreightCost DESC LIMIT 1;",
            "SELECT * FROM orders ORDER BY Freight DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', ShippedDate) AS Month, ShipCountry, COUNT(OrderID) AS OrderCount FROM orders GROUP BY Month, ShipCountry;",
            "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AverageDelay FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT Freight, COUNT(*) AS Frequency FROM orders GROUP BY Freight ORDER BY Frequency DESC;",
            "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia;",
            "SELECT ShipRegion, AVG(Freight) AS AverageFreightCost FROM orders GROUP BY ShipRegion ORDER BY AverageFreightCost DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY Month ORDER BY Month;",
            "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 5;",
            "SELECT ShipVia, 100.0 * COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipVia ORDER BY OnTimeRate DESC LIMIT 1;",
            "SELECT COUNT(OrderID) AS WeekendOrders FROM orders WHERE EXTRACT(DOW FROM ShippedDate) IN (0, 6);",
            "SELECT CORR(DATEDIFF(ShippedDate, OrderDate), Freight) AS Correlation FROM orders;",
            "SELECT DATE_TRUNC('month', ShippedDate) AS Month, AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AverageDelay FROM orders WHERE ShippedDate > RequiredDate GROUP BY Month ORDER BY AverageDelay DESC LIMIT 1;",
            "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY EmployeeID;",
            "SELECT ShipCountry, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipCountry ORDER BY AverageFreight;",
            "SELECT ShipCity, COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) AS LateShipments FROM orders GROUP BY ShipCity ORDER BY LateShipments DESC LIMIT 1;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AvgFreight FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT TO_CHAR(ShippedDate, 'YYYY-MM') AS Month, COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY TO_CHAR(ShippedDate, 'YYYY-MM');",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month;",
            "SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 1.0 / COUNT(OrderID)) * 100 AS OnTimeRate FROM orders GROUP BY Month ORDER BY OnTimeRate DESC;",
            "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;",
            "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia;",
            "SELECT ShipCountry, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipCountry;",
            "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC;",
            "SELECT (CAST(COUNT(CASE WHEN DATEDIFF(ShippedDate, OrderDate) < 5 THEN OrderID END) AS FLOAT) / COUNT(OrderID)) * 100 AS QuickFulfillmentRate FROM orders;",
            "SELECT ShipRegion, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipRegion ORDER BY AvgFreight DESC;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT EXTRACT(MONTH FROM ShippedDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM orders GROUP BY Month ORDER BY AvgShippingTime DESC;",
            "SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY Freight) AS MedianFreight FROM orders;",
            "SELECT ShipCountry, COUNT(OrderID) AS DelayedShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipCountry ORDER BY DelayedShipments DESC;",
            "SELECT Freight, (SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID)) * 100 AS OnTimeRate FROM orders GROUP BY Freight;",
            "SELECT ShipCity, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipCity ORDER BY AvgFulfillmentTime DESC;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID)) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
            "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;",
            "SELECT CustomerID, SUM(Freight) AS TotalFreight FROM orders GROUP BY CustomerID ORDER BY TotalFreight DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', ShippedDate) AS Month, ShipVia, AVG(Freight) AS AvgFreight FROM orders GROUP BY DATE_TRUNC('month', ShippedDate), ShipVia;",
            "SELECT * FROM orders WHERE ShipVia = ? AND ShippedDate BETWEEN ? AND ?;",
            "SELECT ShipCity, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipCity ORDER BY AvgFulfillmentTime DESC;",
            "SELECT DATE_TRUNC('month', ShippedDate) AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*)) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_TRUNC('month', ShippedDate) ORDER BY OnTimeDeliveryRate DESC LIMIT 3;",
            "SELECT ShipVia, COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) AS LateShipments FROM orders GROUP BY ShipVia;",
            "SELECT ShipRegion, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipRegion;",
            "SELECT EmployeeID, SUM(Freight) AS TotalFreight FROM orders GROUP BY EmployeeID ORDER BY TotalFreight DESC LIMIT 3;",
            "SELECT CustomerID, COUNT(*) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 3;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, VAR_SAMP(Freight) AS FreightVariance FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
            "SELECT CORR(DATEDIFF(ShippedDate, OrderDate), Freight) AS Correlation FROM orders;",
            "SELECT ShipCountry, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*)) AS OnTimeDeliveryRate FROM orders GROUP BY ShipCountry ORDER BY OnTimeDeliveryRate ASC LIMIT 1;",
            "SELECT MAX(DATEDIFF(ShippedDate, RequiredDate)) AS MaxDelay FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT * FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT ShipName, COUNT(*) AS Frequency FROM orders GROUP BY ShipName ORDER BY Frequency DESC LIMIT 5;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY Month;",
            "SELECT DATE_TRUNC('month', ShippedDate) AS Month, COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY Month;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(day, OrderDate, ShippedDate)) AS AverageFulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month;",
            "SELECT ShipVia, COUNT(*) AS Frequency FROM orders GROUP BY ShipVia ORDER BY Frequency DESC LIMIT 1;",
            "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
            "SELECT COUNT(*) AS LateDeliveries FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT CustomerID, COUNT(*) AS TotalOrders FROM orders GROUP BY CustomerID ORDER BY TotalOrders DESC LIMIT 1;",
            "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1;",
            "SELECT (COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID)) AS OnTimeDeliveryRate FROM orders;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
            "SELECT ShipRegion, COUNT(*) AS DelayedOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipRegion ORDER BY DelayedOrders DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders GROUP BY Month;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageTime FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipVia;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY Month ORDER BY TotalOrders DESC LIMIT 1;",
            "SELECT ShipCountry, AVG(Freight) AS AverageCost FROM orders GROUP BY ShipCountry;",
            "SELECT ShipCity, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipCity ORDER BY TotalOrders DESC LIMIT 1;",
            "SELECT ShipVia, (COUNT(OrderID) * 100.0 / (SELECT COUNT(*) FROM orders)) AS Percentage FROM orders GROUP BY ShipVia;",
            "SELECT COUNT(*) AS NeverOnTime FROM orders WHERE ShippedDate IS NOT NULL AND ShippedDate > RequiredDate;",
            "SELECT SUM(Freight) FROM orders WHERE MONTH(ShippedDate) = 3 AND YEAR(ShippedDate) = 2023;",
            "SELECT ShipVia, COUNT(OrderID) AS on_time_count FROM orders WHERE ShippedDate <= RequiredDate GROUP BY ShipVia ORDER BY on_time_count DESC LIMIT 1;",
            "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, AVG(DATEDIFF(day, OrderDate, ShippedDate)) AS AvgFulfillmentTime FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = 2023 GROUP BY Month;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY Month ORDER BY AvgShippingCost DESC LIMIT 1;",
            "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
            "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE OrderDate >= (CURRENT_DATE - INTERVAL '1 year') GROUP BY ShipCity ORDER BY NumberOfOrders DESC FETCH FIRST 1 ROW ONLY;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(CASE WHEN ShippedDate > RequiredDate THEN 1 ELSE 0 END) * 1.0 / COUNT(OrderID) AS LateDeliveryRate FROM orders GROUP BY Month;",
            "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT ShipVia, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipVia;",
            "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgDelay FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT ShipRegion, VAR_SAMP(Freight) AS FreightVariance FROM orders GROUP BY ShipRegion;",
            "SELECT ShipCountry, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipCountry ORDER BY OnTimeDeliveryRate DESC LIMIT 1;",
            "SELECT AVG(DATEDIFF(orders.RequiredDate, orders.OrderDate)) AS AvgDaysBetween FROM orders;",
            "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgDelayDays FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT COUNT(OrderID) AS WeekendOrders FROM orders WHERE EXTRACT(DOW FROM ShippedDate) IN (6, 0);",
            "SELECT CustomerID, SUM(Freight) AS TotalShippingCost FROM orders GROUP BY CustomerID ORDER BY TotalShippingCost DESC LIMIT 1;",
            "SELECT CORR(Freight, DATEDIFF(ShippedDate, OrderDate)) AS Correlation FROM orders;",
            "SELECT COUNT(DISTINCT CustomerID) FROM orders;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia ORDER BY AvgFulfillmentTime ASC LIMIT 1;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY ShipVia;",
            "SELECT ShipCountry, AVG(Freight) AS AverageFreightCost FROM orders GROUP BY ShipCountry ORDER BY AverageFreightCost DESC LIMIT 1;",
            "SELECT ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
            "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShipCountry = 'USA';",
            "SELECT ShipCity, COUNT(*) AS OrderCount FROM orders GROUP BY ShipCity;",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageDelay FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE DATE_TRUNC('month', OrderDate) = DATE_TRUNC('month', CURRENT_DATE - interval '1' month) GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT COUNT(OrderID) * 100.0 / (SELECT COUNT(*) FROM orders) AS Percentage FROM orders WHERE DATEDIFF(RequiredDate, OrderDate) <= 7;",
            "SELECT ShipRegion, AVG(Freight) AS AverageFreight FROM orders WHERE ShipRegion IN ('Region1', 'Region2') GROUP BY ShipRegion;",
            "SELECT MAX(Freight) AS MaxFreightCost FROM orders;",
            "SELECT CustomerID, COUNT(OrderID) AS LateDeliveries FROM orders WHERE ShippedDate > RequiredDate GROUP BY CustomerID ORDER BY LateDeliveries DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY DATE_TRUNC('month', OrderDate) ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID;",
            "SELECT COUNT(OrderID) FROM orders WHERE Freight = 0;",
            "SELECT ShipVia, COUNT(OrderID) * 100.0 / SUM(COUNT(OrderID)) OVER () AS OnTimePercentage FROM orders WHERE ShippedDate <= RequiredDate GROUP BY ShipVia;",
            "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AverageDelayAfterRequired FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(Freight) AS TotalFreightCost FROM orders WHERE OrderDate >= DATE_ADD('year', -1, CURRENT_DATE) GROUP BY Month ORDER BY Month;",
            "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS Delay FROM orders ORDER BY Delay DESC;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM') ORDER BY OnTimeDeliveryRate DESC LIMIT 1;",
            "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(*) FILTER (WHERE ShippedDate IS NOT NULL) AS Shipped, COUNT(*) FILTER (WHERE ShippedDate IS NULL) AS NotShipped FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');",
            "SELECT COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT ShipVia, AVG(Freight) AS AverageFreightCost FROM orders GROUP BY ShipVia;",
            "SELECT ShipRegion, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipRegion ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT MAX(DATEDIFF(ShippedDate, OrderDate)) AS MaxFulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL;",
            "SELECT AVG(DATEDIFF(RequiredDate, OrderDate)) AS AverageTimeBetween FROM orders;",
            "SELECT ShipCountry, AVG(Freight) AS AverageFreightCost FROM orders WHERE ShipCountry IN ('Country1', 'Country2') GROUP BY ShipCountry;",
            "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC;",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS FulfillmentTime, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipVia;",
            "SELECT COUNT(OrderID) FROM orders WHERE ShipPostalCode LIKE '1%';",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, COUNT(OrderID) AS OrderVolume, SUM(Freight) AS TotalShippingCost FROM orders GROUP BY OrderMonth;",
            "SELECT ShipVia, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipVia;",
            "SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, COUNT(OrderID) AS OnTimeDeliveries FROM orders WHERE ShippedDate <= RequiredDate GROUP BY DATE_FORMAT(ShippedDate, '%Y-%m');",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, (COUNT(OrderID) - COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END)) * 100.0 / COUNT(OrderID) AS LateDeliveryRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;",
            "SELECT ShipVia, COUNT(OrderID) AS NumOrders FROM orders GROUP BY ShipVia;",
            "SELECT ShipCity, COUNT(OrderID) AS LateDeliveries FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipCity ORDER BY LateDeliveries DESC LIMIT 5;",
            "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgLateDays FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY AvgShippingCost DESC LIMIT 1;",
            "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EmployeeID ORDER BY AvgFulfillmentTime ASC LIMIT 3;",
            "SELECT ShipCountry, COUNT(OrderID) AS NumOrders FROM orders GROUP BY ShipCountry ORDER BY NumOrders DESC LIMIT 1;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AvgShippingCost FROM orders WHERE OrderDate >= CURDATE() - INTERVAL 1 YEAR GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT ShipVia, COUNT(OrderID) * 100.0 / (SELECT COUNT(OrderID) FROM orders) AS Percentage FROM orders GROUP BY ShipVia;",
            "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS ShippingTime FROM orders ORDER BY ShippingTime DESC LIMIT 5;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) - LAG(COUNT(OrderID), 1) OVER (ORDER BY DATE_FORMAT(OrderDate, '%Y-%m')) AS Growth FROM orders WHERE ShippedDate IS NOT NULL GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT SUM(Freight) * 100.0 / (SELECT SUM(Freight) FROM orders) AS EuropeFreightPercentage FROM orders WHERE ShipCountry IN ('France', 'Germany', 'UK', 'Italy', 'Spain');",
            "SELECT COALESCE(ShipRegion, ShipCountry) AS Market, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY Market ORDER BY AvgFreightCost DESC LIMIT 1;",
            "SELECT CustomerID, DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) / COUNT(DISTINCT DATE_TRUNC('month', OrderDate)) AS AvgOrdersPerMonth FROM orders GROUP BY CustomerID, DATE_TRUNC('month', OrderDate);",
            "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM orders GROUP BY ShipRegion ORDER BY AvgShippingTime DESC LIMIT 3;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY Month ORDER BY Month;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month ORDER BY Month;",
            "SELECT DATE_TRUNC('month', ShippedDate) AS Month, ShipVia, COUNT(OrderID) AS OrderCount FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month, ShipVia ORDER BY Month, ShipVia;",
            "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry ORDER BY TotalFreightCost DESC;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgTime FROM orders GROUP BY ShipVia ORDER BY AvgTime;",
            "SELECT DATE_TRUNC('month', ShippedDate) AS Month, COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) AS LateDeliveries FROM orders GROUP BY Month ORDER BY LateDeliveries DESC LIMIT 1;",
            "SELECT ShipRegion, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipRegion ORDER BY TotalOrders DESC;",
            "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders WHERE OrderDate >= CURRENT_DATE - INTERVAL '1 year' GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1;",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE Freight > (SELECT AVG(Freight) FROM orders);",
            "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia ORDER BY OrderCount DESC;",
            "SELECT ShipCity, COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) AS LateOrders FROM orders GROUP BY ShipCity ORDER BY LateOrders DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgFreight FROM orders WHERE OrderDate >= DATEADD('month', -6, CURRENT_DATE) GROUP BY Month ORDER BY Month DESC;",
            "SELECT MAX(DATEDIFF(ShippedDate, OrderDate)) AS LongestFulfillmentTime FROM orders WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '1 quarter') AND OrderDate < DATE_TRUNC('quarter', CURRENT_DATE);",
            "SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders WHERE ShipVia IN (SELECT ShipVia FROM orders GROUP BY ShipVia ORDER BY COUNT(*) DESC LIMIT 2) GROUP BY ShipVia;",
            "SELECT ShipVia, COUNT(OrderID) AS TotalOrders FROM orders WHERE ShipCountry = 'Specific Country' GROUP BY ShipVia ORDER BY TotalOrders DESC LIMIT 1;",
            "SELECT COUNT(CASE WHEN DATEDIFF(ShippedDate, OrderDate) <= 3 THEN 1 END) * 100.0 / COUNT(*) AS ProportionWithinThreeDays FROM orders;",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE EXTRACT(ISODOW FROM ShippedDate) IN (6, 7);",
            "SELECT ShipCountry, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*) AS OnTimeRate FROM orders GROUP BY ShipCountry ORDER BY OnTimeRate DESC;",
            "SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, COUNT(OrderID) AS LateShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY Month;",
            "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EmployeeID;",
            "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipRegion ORDER BY AvgFulfillmentTime DESC;",
            "SELECT SUM(CASE WHEN ShipCountry = 'YourCountry' THEN 1 ELSE 0 END) / COUNT(OrderID) AS SameCountryShippingRate FROM orders;",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(OrderID) AS LateShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY TO_CHAR(OrderDate, 'YYYY-MM') ORDER BY LateShipments DESC LIMIT 1;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AvgShippingCost FROM orders WHERE OrderDate > CURRENT_DATE - INTERVAL 1 YEAR GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT COUNT(*) FROM (SELECT OrderID, COUNT(DISTINCT ShipVia) AS MethodCount FROM orders GROUP BY OrderID HAVING MethodCount > 1) AS MultiMethodOrders;",
            "SELECT ShipCity, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipCity;",
            "SELECT COUNT(OrderID) AS QuickFulfillmentOrders FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) < 7;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgDeliveryTime FROM orders GROUP BY ShipVia ORDER BY AvgDeliveryTime ASC;",
            "SELECT SUM(CASE WHEN ShipCountry <> 'YourCountry' THEN 1 ELSE 0 END) * 100.0 / COUNT(OrderID) AS InternationalShippingRate FROM orders;",
            "SELECT AVG(Freight), AVG(DATEDIFF(ShippedDate, OrderDate)) FROM orders;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / NULLIF(COUNT(OrderID), 0) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(CAST(ShippedDate AS DATE) - CAST(OrderDate AS DATE)) AS AvgFulfillmentTime FROM orders GROUP BY Month;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY Month ORDER BY AvgShippingCost DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) FILTER (WHERE ShippedDate > RequiredDate) * 100.0 / NULLIF(COUNT(OrderID), 0) AS LateDeliveryRate FROM orders GROUP BY Month;",
            "SELECT SUM(Freight) AS TotalFreightCost FROM orders;",
            "SELECT OrderID, Freight FROM orders ORDER BY Freight DESC LIMIT 1;",
            "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia;",
            "SELECT ShipCountry, COUNT(OrderID) AS OrderCount FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipCountry ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipVia;",
            "SELECT ShipVia, AVG(CAST((JulianDay(ShippedDate) - JulianDay(OrderDate)) AS INT)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia ORDER BY AvgFulfillmentTime ASC LIMIT 1;",
            "SELECT ShipCity, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipCity ORDER BY AvgShippingCost DESC LIMIT 1;",
            "SELECT * FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",
            "SELECT ShipRegion, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipRegion;",
            "SELECT COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) AS OverallOnTimeDelivery FROM orders;",
            "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL AND OrderDate IS NOT NULL ORDER BY FulfillmentTime ASC LIMIT 1;",
            "SELECT ShipRegion, COUNT(OrderID) FILTER (WHERE ShippedDate > RequiredDate) * 100.0 / COUNT(OrderID) AS LateDeliveryRate FROM orders GROUP BY ShipRegion;",
            "SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DATEDIFF(ShippedDate, OrderDate)) AS MedianFulfillmentTime FROM orders;",
            "SELECT DATE_TRUNC('month', ShippedDate) AS month, COUNT(*) AS orders_shipped FROM orders WHERE ShippedDate IS NOT NULL GROUP BY DATE_TRUNC('month', ShippedDate);",
            "SELECT ShipCountry, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(*)) * 100 AS on_time_delivery_rate FROM orders GROUP BY ShipCountry;",
            "SELECT MAX(DATEDIFF(ShippedDate, OrderDate)) AS longest_fulfillment_time FROM orders;",
            "SELECT EmployeeID, COUNT(*) AS late_shipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY EmployeeID HAVING COUNT(*) > 0;",
            "SELECT ShipVia, AVG(Freight) AS avg_freight FROM orders GROUP BY ShipVia ORDER BY avg_freight DESC LIMIT 1;",
            "SELECT ShipRegion, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID)) * 100 AS on_time_delivery_rate FROM orders GROUP BY ShipRegion;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY ShipVia;",
            "SELECT Freight, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY Freight ORDER BY Freight;",
            "SELECT ShipRegion, COUNT(*) AS orders_count FROM orders GROUP BY ShipRegion;",
            "SELECT COUNT(*) AS pending_shipments FROM orders WHERE ShippedDate IS NULL;",
            "SELECT EXTRACT(MONTH FROM OrderDate) AS month, SUM(Freight) AS total_shipping_cost FROM orders GROUP BY EXTRACT(MONTH FROM OrderDate) ORDER BY total_shipping_cost DESC LIMIT 1;",
            "SELECT ShipCountry, AVG(Freight) AS avg_shipping_cost FROM orders GROUP BY ShipCountry;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS shortest_fulfillment_time FROM orders GROUP BY ShipVia ORDER BY shortest_fulfillment_time ASC LIMIT 1;",
            "SELECT DATE_TRUNC('month', OrderDate) AS month, (COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) * 1.0 / COUNT(*)) * 100 AS delay_rate FROM orders WHERE OrderDate >= DATE_ADD(CURRENT_DATE, INTERVAL -1 YEAR) GROUP BY DATE_TRUNC('month', OrderDate);",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');",
            "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY DATE_TRUNC('month', OrderDate);",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT EmployeeID, COUNT(OrderID) AS OnTimeDeliveries FROM orders WHERE ShippedDate <= RequiredDate AND YEAR(OrderDate) = YEAR(CURDATE()) - 1 GROUP BY EmployeeID ORDER BY OnTimeDeliveries DESC LIMIT 1;",
            "SELECT ShipCountry, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipCountry;",
            "SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate AND QUARTER(OrderDate) = QUARTER(CURDATE()) - 1;",
            "SELECT ShipCity, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCity;",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE Freight > 50;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AvgShippingCost FROM orders WHERE OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT AVG(Freight) AS AvgFreightCost FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT ShipVia, COUNT(OrderID) AS NumOrders FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1 GROUP BY ShipVia;",
            "SELECT ShipCity, COUNT(OrderID) AS LateDeliveries FROM orders WHERE ShippedDate > RequiredDate AND YEAR(OrderDate) = YEAR(CURDATE()) GROUP BY ShipCity ORDER BY LateDeliveries DESC LIMIT 1;",
            "SELECT MAX(DATEDIFF(ShippedDate, OrderDate)) AS LongestFulfillmentTime FROM orders;",
            "SELECT CustomerID, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeOrders FROM orders GROUP BY CustomerID ORDER BY OnTimeOrders DESC LIMIT 1;",
            "SELECT CORR(Freight, DATEDIFF(ShippedDate, OrderDate)) AS Correlation FROM orders;",
            "SELECT ShipRegion, COUNT(OrderID) AS DelayedShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipRegion ORDER BY DelayedShipments DESC LIMIT 1;",
            "SELECT COUNT(OrderID) AS WeekendOrders FROM orders WHERE DAYOFWEEK(OrderDate) IN (1, 7);",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
            "SELECT ShipVia, COUNT(*) AS Frequency FROM orders GROUP BY ShipVia ORDER BY Frequency DESC LIMIT 1;",
            "SELECT ShipCountry, COUNT(*) AS ShipmentCount FROM orders GROUP BY ShipCountry ORDER BY ShipmentCount DESC LIMIT 1;",
            "SELECT ShipRegion, COUNT(OrderID) FILTER(WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipRegion ORDER BY OnTimeRate DESC LIMIT 1;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia;",
            "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT MAX(Freight) AS MaxFreightCost FROM orders;",
            "SELECT ShipRegion, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipRegion;",
            "SELECT ShipVia, COUNT(OrderID) * 100.0 / SUM(COUNT(OrderID)) OVER() AS Percentage FROM orders WHERE DATE_PART('month', OrderDate) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('year', OrderDate) = DATE_PART('year', CURRENT_DATE - INTERVAL '1 month') GROUP BY ShipVia;",
            "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount ASC LIMIT 1;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY DATE_TRUNC('month', OrderDate) ORDER BY AvgShippingCost DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders WHERE OrderDate >= DATEADD(year, -1, CURRENT_DATE) GROUP BY DATE_TRUNC('month', OrderDate) ORDER BY Month;",
            "SELECT ShipCountry, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipCountry;",
            "SELECT COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders WHERE EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE - INTERVAL '1 month') AND EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '1 month');",
            "SELECT ShipVia, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipVia ORDER BY AvgShippingCost DESC LIMIT 1;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 100.0 * COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT ShipCity, COUNT(*) AS TotalShipped FROM orders GROUP BY ShipCity ORDER BY TotalShipped DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, MAX(Freight) AS MaxFreight, MIN(Freight) AS MinFreight FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
            "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1;",
            "SELECT ShipRegion, 100.0 * COUNT(OrderID) / (SELECT COUNT(*) FROM orders WHERE ShipRegion IS NOT NULL) AS RegionShipmentPercentage FROM orders WHERE ShipRegion IS NOT NULL GROUP BY ShipRegion;",
            "SELECT CustomerID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY CustomerID;",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(DISTINCT ShipName) AS DistinctRecipients FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AvgShippingCost FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT ShipCity, COUNT(*) AS OrderCount FROM orders GROUP BY ShipCity;",
            "SELECT ShipVia, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipVia ORDER BY AvgFreightCost ASC LIMIT 1;",
            "SELECT COUNT(*) AS OrdersOver100 FROM orders WHERE Freight > 100;",
            "SELECT CORR(DATEDIFF(ShippedDate, OrderDate), Freight) AS Correlation FROM orders;",
            "SELECT ShipCountry, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipCountry ORDER BY AvgFulfillmentTime ASC;",
            "SELECT ShipRegion, 100.0 * COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipRegion ORDER BY OnTimeDeliveryRate DESC LIMIT 3;",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END)::DECIMAL / COUNT(OrderID) * 100 AS OnTimeDeliveryRate FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM')",
            "SELECT ShipVia, AVG(Freight) AS AverageCost FROM orders GROUP BY ShipVia ORDER BY AverageCost DESC LIMIT 1",
            "SELECT CustomerID, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY CustomerID",
            "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM')",
            "SELECT ShipCountry, COUNT(OrderID) AS NumberOfShipments FROM orders GROUP BY ShipCountry",
            "SELECT ShipCity, COUNT(OrderID) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 5",
            "SELECT OrderID FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) > 7",
            "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgProcessingTime FROM orders GROUP BY EmployeeID;",
            "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS ShippingTime FROM orders ORDER BY ShippingTime DESC LIMIT 1",
            "SELECT COUNT(CASE WHEN Freight > 100 THEN 1 END) * 100.0 / COUNT(OrderID) AS PercentageAbove100 FROM orders",
            "SELECT ShipRegion, COUNT(OrderID) AS Shipments FROM orders GROUP BY ShipRegion ORDER BY Shipments DESC",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AverageFreight FROM orders WHERE OrderDate >= DATEADD(year, -1, CURRENT_DATE) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY Month DESC",
            "SELECT ShipVia, COUNT(OrderID) AS Shipments FROM orders GROUP BY ShipVia",
            "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShipmentTime FROM orders GROUP BY ShipRegion;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(Freight) AS AvgFreight FROM orders GROUP BY Year, Month;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Year, Month;",
            "SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipVia ORDER BY AvgFreight DESC LIMIT 1;",
            "SELECT COUNT(OrderID) AS OrderCount, EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month FROM orders GROUP BY Year, Month;",
            "SELECT AVG(Freight) AS AvgFreight FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT EmployeeID, COUNT(OrderID) AS ShipmentsHandled FROM orders GROUP BY EmployeeID ORDER BY ShipmentsHandled DESC LIMIT 1;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(Freight) AS AvgFreight FROM orders GROUP BY Year, Month;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*) AS OnTimeDeliveryRate FROM orders GROUP BY Year, Month;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Year, Month;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY Year, Month, ShipVia ORDER BY Year, Month, UsageCount DESC;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, SUM(Freight) AS TotalFreight FROM orders GROUP BY Year, Month;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, MAX(Freight) AS MaxFreight FROM orders GROUP BY EXTRACT(YEAR FROM OrderDate), EXTRACT(MONTH FROM OrderDate);",
            "SELECT ShipCity, COUNT(*) AS OrderCount FROM orders WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '3 months') GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia;",
            "SELECT ShipRegion, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(*) AS OnTimeDeliveryRate FROM orders GROUP BY ShipRegion ORDER BY OnTimeDeliveryRate ASC LIMIT 1;",
            "SELECT EXTRACT(YEAR FROM ShippedDate) AS Year, EXTRACT(MONTH FROM ShippedDate) AS Month, EmployeeID, COUNT(*) AS OrderCount FROM orders GROUP BY Year, Month, EmployeeID;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, ShipCountry, AVG(Freight) AS AvgFreight FROM orders GROUP BY Year, Month, ShipCountry;",
            "SELECT ShipVia, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*)) AS OnTimeRate FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1 GROUP BY ShipVia ORDER BY OnTimeRate DESC LIMIT 1;",
            "SELECT ShipRegion, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipRegion;",
            "SELECT COUNT(*) AS LateOrders FROM orders WHERE (MONTH(OrderDate) IN (11, 12) OR MONTH(OrderDate) = 1) AND ShippedDate > RequiredDate;",
            "SELECT CustomerID, SUM(Freight) AS TotalFreight FROM orders GROUP BY CustomerID ORDER BY TotalFreight DESC LIMIT 1;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(*) AS OrderCount FROM orders GROUP BY Year, Month ORDER BY Year, Month;",
            "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM orders) AS Percentage FROM orders WHERE Freight > 100;",
            "SELECT VARIANCE(Freight) AS FreightVariance FROM orders WHERE ShipCountry IN ('Germany', 'France', 'UK');",
            "SELECT COUNT(*) AS DelayedOrders FROM orders WHERE ShippedDate IS NULL;",
            "SELECT AVG(Freight) FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month';",
            "SELECT COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE);",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE);",
            "SELECT ShipVia, AVG(Freight) FROM orders GROUP BY ShipVia ORDER BY AVG(Freight) ASC LIMIT 1;",
            "SELECT ShipCountry, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipCountry ORDER BY OnTimeRate DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE OrderDate >= DATE_ADD('year', -1, CURRENT_DATE) GROUP BY Month ORDER BY Month;",
            "SELECT ShipVia, COUNT(OrderID) FROM orders WHERE ShippedDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND ShippedDate < DATE_TRUNC('month', CURRENT_DATE) GROUP BY ShipVia;",
            "SELECT EmployeeID, COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY EmployeeID ORDER BY OnTimeOrders DESC LIMIT 1;",
            "SELECT CORR(Freight, DATEDIFF(ShippedDate, OrderDate)) FROM orders;",
            "SELECT ShipRegion, AVG(Freight) FROM orders GROUP BY ShipRegion;",
            "SELECT DATE_TRUNC('month', ShippedDate) AS Month, COUNT(OrderID) AS TotalOrders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month ORDER BY TotalOrders DESC LIMIT 1;",
            "SELECT ShipCity, COUNT(OrderID) AS DelayedShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipCity ORDER BY DelayedShipments DESC LIMIT 1;",
            "SELECT COUNT(OrderID) FROM orders o1 WHERE Freight > (SELECT AVG(Freight) FROM orders o2 WHERE o2.ShipVia = o1.ShipVia);",
            "SELECT ShipCountry, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DATEDIFF(ShippedDate, OrderDate)) AS MedianFulfillmentTime FROM orders GROUP BY ShipCountry;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AverageDelay FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipVia ORDER BY AverageDelay DESC LIMIT 1;",
            "SELECT AVG(Freight) FROM orders WHERE DATEDIFF(RequiredDate, OrderDate) <= 3;",
            "SELECT ShipCity, ShipRegion, COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipCity, ShipRegion;",
            "SELECT COUNT(OrderID) FILTER (WHERE DATEDIFF(ShippedDate, OrderDate) <= 2) * 100.0 / COUNT(OrderID) FROM orders;",
            "SELECT SUM(Freight) FROM orders WHERE OrderDate BETWEEN DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' AND DATE_TRUNC('quarter', CURRENT_DATE);",
            "SELECT ShipPostalCode, STDDEV(DATEDIFF(ShippedDate, RequiredDate)) AS Irregularity FROM orders GROUP BY ShipPostalCode ORDER BY Irregularity DESC LIMIT 5;",
            "SELECT ShipVia, COUNT(OrderID) AS OrdersCount FROM orders GROUP BY ShipVia",
            "SELECT ShipCity, COUNT(OrderID) AS OrdersCount FROM orders GROUP BY ShipCity ORDER BY OrdersCount DESC LIMIT 1",
            "SELECT SUM(Freight) FROM orders WHERE EXTRACT(YEAR FROM ShippedDate) = 2023",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders WHERE ShipCountry = 'USA'",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month FROM orders GROUP BY DATE_TRUNC('month', OrderDate) HAVING AVG(Freight) > 50",
            "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT AVG(DATEDIFF(RequiredDate, OrderDate)) AS AverageTimeToRequire FROM orders",
            "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate IS NULL",
            "SELECT ShipRegion, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipRegion",
            "SELECT COUNT(OrderID) FROM orders WHERE DATEDIFF(ShippedDate, RequiredDate) > 7;",
            "SELECT AVG(Freight) AS AverageFreightCost FROM orders WHERE EXTRACT(MONTH FROM ShippedDate) = 12",
            "SELECT COUNT(OrderID) FROM orders WHERE ShipCountry = 'Germany'",
            "SELECT EmployeeID, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY EmployeeID",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, (COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID)) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
            "SELECT ShipVia, (COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID)) AS OnTimeRate FROM orders GROUP BY ShipVia ORDER BY OnTimeRate DESC LIMIT 1;",
            "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;",
            "SELECT ShipCity, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipCity ORDER BY AverageFreight DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', ShippedDate) AS Month, COUNT(OrderID) AS OrderCount FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month;",
            "SELECT AVG(DATEDIFF(RequiredDate, OrderDate)) AS AverageTimeToRequired FROM orders;",
            "SELECT EmployeeID, COUNT(OrderID) AS OnTimeCount FROM orders WHERE ShippedDate <= RequiredDate GROUP BY EmployeeID ORDER BY OnTimeCount DESC LIMIT 1;",
            "SELECT ShipVia, COUNT(OrderID) AS LateCount FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipVia ORDER BY LateCount DESC LIMIT 1;",
            "SELECT MIN(Freight) AS MinFreight, MAX(Freight) AS MaxFreight, AVG(Freight) AS AvgFreight FROM orders WHERE ShipCountry = 'USA';",
            "SELECT OrderID FROM orders WHERE ShippedDate < OrderDate;",
            "SELECT ShipRegion, VARIANCE(Freight) AS FreightVariance FROM orders GROUP BY ShipRegion;",
            "SELECT COUNT(OrderID) AS UnshippedOrders FROM orders WHERE ShippedDate IS NULL;",
            "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgDaysLate FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia ORDER BY TotalFreight DESC LIMIT 1;",
            "SELECT ShipName, COUNT(OrderID) AS Frequency FROM orders GROUP BY ShipName ORDER BY Frequency DESC LIMIT 1;",
            "SELECT (COUNT(OrderID) FILTER (WHERE ShipRegion = 'California') * 100.0 / COUNT(OrderID)) AS PercentageInCalifornia FROM orders;",
            "SELECT TO_CHAR(ShippedDate, 'Day') AS Weekday, COUNT(OrderID) AS OrderCount FROM orders GROUP BY TO_CHAR(ShippedDate, 'Day') ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT DATE_TRUNC('week', OrderDate) AS Week, SUM(Freight) AS TotalFreight FROM orders GROUP BY DATE_TRUNC('week', OrderDate);",
            "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
            "SELECT ShipCity, SUM(Freight) AS TotalFreight FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1 GROUP BY ShipCity ORDER BY TotalFreight DESC LIMIT 1;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia;",
            "SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY Month, ShipVia;",
            "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders WHERE ShipCountry = 'Specific Country' GROUP BY ShipCountry;",
            "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE() - INTERVAL 1 MONTH, '%Y-%m') GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderCount FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgDelay FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT ShipRegion, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipRegion ORDER BY AvgFreight DESC LIMIT 1;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, VARIANCE(Freight) AS FreightVariance FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND OrderDate < CURDATE() GROUP BY Month;",
            "SELECT COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders WHERE OrderDate >= CURDATE() - INTERVAL 1 YEAR;",
            "SELECT ShipCountry, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipCountry;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia ORDER BY AvgFulfillmentTime LIMIT 1;",
            "SELECT ShipCity, COUNT(OrderID) AS DestCount FROM orders GROUP BY ShipCity ORDER BY DestCount DESC LIMIT 1;",
            "SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate AND QUARTER(OrderDate) = QUARTER(CURDATE() - INTERVAL 3 MONTH) AND YEAR(OrderDate) = YEAR(CURDATE() - INTERVAL 3 MONTH);",
            "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgProcessTime FROM orders GROUP BY EmployeeID;",
            "SELECT ShipCountry, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveries FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1 GROUP BY ShipCountry ORDER BY OnTimeDeliveries DESC LIMIT 1;",
            "SELECT COUNT(OrderID) FROM orders WHERE Freight > 100;",
            "SELECT ShipCity, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipCity ORDER BY AvgFulfillmentTime DESC LIMIT 1;",
            "SELECT OrderID FROM orders ORDER BY Freight ASC LIMIT 1;",
            "SELECT EmployeeID, COUNT(OrderID) AS OrdersHandled FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1 GROUP BY EmployeeID ORDER BY OrdersHandled DESC LIMIT 1;",
            "SELECT COUNT(CASE WHEN ShipCountry != '' THEN 1 END) * 100.0 / COUNT(OrderID) AS Percentage FROM orders;",
            "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT ShipVia, YEAR(OrderDate) AS Year, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia, YEAR(OrderDate);",
            "SELECT ShipName, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipName ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia;",
            "SELECT ShipCountry, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM orders GROUP BY ShipCountry ORDER BY AvgShippingTime ASC LIMIT 1;",
            "SELECT DATE_FORMAT(RequiredDate, '%Y-%m') AS Month, COUNT(OrderID) AS DelayedShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY DATE_FORMAT(RequiredDate, '%Y-%m') ORDER BY DelayedShipments DESC LIMIT 1;",
            "SELECT MAX(Freight) FROM orders;",
            "SELECT YEAR(OrderDate) AS Year, EmployeeID, COUNT(OrderID) AS OrdersHandled FROM orders GROUP BY YEAR(OrderDate), EmployeeID;",
            "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
            "SELECT COUNT(CASE WHEN ShippedDate > RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS LateShipmentPercentage FROM orders;",
            "SELECT DATE_TRUNC('month', ShippedDate) AS ShipmentMonth, COUNT(OrderID) AS NumOrders FROM orders GROUP BY ShipmentMonth ORDER BY NumOrders DESC LIMIT 1;",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT EmployeeID, COUNT(OrderID) AS NumOrders FROM orders GROUP BY EmployeeID;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(Freight) AS TotalFreight FROM orders GROUP BY Month ORDER BY TotalFreight DESC LIMIT 1;",
            "SELECT ShipCountry, COUNT(OrderID) AS NumOrders FROM orders GROUP BY ShipCountry ORDER BY NumOrders DESC LIMIT 1;",
            "SELECT ShipCountry, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipCountry;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia ORDER BY AvgFulfillmentTime ASC LIMIT 1;",
            "SELECT COUNT(DISTINCT ShipName) AS UniqueRecipients FROM orders;",
            "SELECT ShipName, COUNT(OrderID) AS NumShipments FROM orders GROUP BY ShipName ORDER BY NumShipments DESC LIMIT 1;",
            "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipRegion;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgFreight FROM orders GROUP BY Month ORDER BY Month;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(*)) * 100 AS OnTimeRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT ShipVia, AVG(Freight) AS AvgCost FROM orders GROUP BY ShipVia ORDER BY AvgCost ASC LIMIT 1;",
            "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;",
            "SELECT ShipCity, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgDays FROM orders GROUP BY ShipCity;",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, AVG(Freight) AS AvgFreight FROM orders WHERE OrderDate >= CURRENT_DATE - INTERVAL '1 year' GROUP BY Month ORDER BY Month DESC;",
            "SELECT CustomerID, COUNT(*) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 5;",
            "SELECT ShipRegion, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipRegion ORDER BY AvgFreight DESC LIMIT 1;",
            "SELECT COUNT(*) FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) <= 2;",
            "SELECT ShipAddress, COUNT(*) AS DeliveryCount FROM orders GROUP BY ShipAddress ORDER BY DeliveryCount DESC LIMIT 3;",
            "SELECT COUNT(*) FROM orders WHERE ShipPostalCode LIKE 'XYZ%';",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) AS LateDeliveries FROM orders GROUP BY Month;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(Freight) AS AvgFreight FROM orders GROUP BY Year, Month ORDER BY AvgFreight DESC LIMIT 1;",
            "SELECT EmployeeID, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(*)) * 100 AS OnTimeRate FROM orders GROUP BY EmployeeID ORDER BY OnTimeRate DESC;",
            "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipRegion;",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, AVG(Freight) AS Average_Shipping_Cost FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = 2023 GROUP BY TO_CHAR(OrderDate, 'YYYY-MM')",
            "SELECT ROUND(100.0 * SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID), 2) AS OnTime_Delivery_Rate FROM orders WHERE EXTRACT(YEAR FROM ShippedDate) = 2023 AND EXTRACT(MONTH FROM ShippedDate) = 1",
            "SELECT ShipVia, COUNT(OrderID) AS Order_Count FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = 2023 AND EXTRACT(QUARTER FROM OrderDate) = 1 GROUP BY ShipVia ORDER BY Order_Count DESC LIMIT 1;",
            "SELECT ShipVia, SUM(Freight) AS Total_Freight FROM orders WHERE EXTRACT(YEAR FROM ShippedDate) = 2023 AND EXTRACT(MONTH FROM ShippedDate) = 3 GROUP BY ShipVia",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY Year, Month;",
            "SELECT EXTRACT(YEAR FROM ShippedDate) AS Year, EXTRACT(MONTH FROM ShippedDate) AS Month, COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY Year, Month;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Year, Month;",
            "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;",
            "SELECT CustomerID, SUM(Freight) AS TotalFreight FROM orders GROUP BY CustomerID ORDER BY TotalFreight DESC LIMIT 1;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY Year, Month ORDER BY AvgShippingCost DESC LIMIT 1;",
            "SELECT ShipCity, COUNT(OrderID) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 1;",
            "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders, SUM(Freight) AS TotalFreight FROM orders GROUP BY EmployeeID;",
            "SELECT ShipVia, COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) AS DelayedOrders FROM orders GROUP BY ShipVia ORDER BY DelayedOrders ASC LIMIT 1;",
            "SELECT ShipCountry, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipCountry;",
            "SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DATEDIFF(DAY, OrderDate, ShippedDate)) AS MedianFulfillmentTime FROM orders;",
            "SELECT CustomerID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY CustomerID ORDER BY AvgFulfillmentTime ASC LIMIT 3;",
            "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate IS NULL;",
            "SELECT CASE WHEN ShipCountry = 'USA' THEN 'Domestic' ELSE 'International' END AS OrderType, AVG(Freight) AS AvgFreight FROM orders GROUP BY OrderType;",
            "SELECT ShipRegion, COUNT(OrderID) AS OrderVolume FROM orders GROUP BY ShipRegion ORDER BY OrderVolume DESC LIMIT 1;",
            "SELECT (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID)) AS OnTimeDeliveryRate FROM orders;",
            "SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipVia ORDER BY AvgFreight DESC LIMIT 1;",
            "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipRegion;",
            "SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY DATE_FORMAT(ShippedDate, '%Y-%m');",
            "SELECT ShipCountry, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipCountry;",
            "SELECT EmployeeID, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY EmployeeID ORDER BY LateOrders DESC LIMIT 1;",
            "SELECT SUM(Freight) AS TotalFreight FROM orders WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months';",
            "SELECT COUNT(OrderID) AS LongDelays FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) > 5;",
            "SELECT AVG(DATEDIFF(RequiredDate, OrderDate)) AS AvgOrderToRequiredDiff FROM orders;",
            "SELECT ShipCountry, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID)) * 100 AS OnTimeRate FROM orders GROUP BY ShipCountry ORDER BY OnTimeRate ASC LIMIT 1;",
            "SELECT MAX(DATEDIFF(ShippedDate, RequiredDate)) AS MaxDelay FROM orders;",
            "SELECT COUNT(OrderID) AS FreeShippingOrders FROM orders WHERE Freight = 0;",
            "SELECT CORR(Freight, DATEDIFF(ShippedDate, OrderDate)) AS CorrelationCostTime FROM orders;",
            "SELECT Month, AVG(FulfillmentTime) AS AvgFulfillmentTime FROM (SELECT DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTime, DATE_FORMAT(OrderDate, '%Y-%m') AS Month FROM orders) AS MonthlyFulfillment GROUP BY Month ORDER BY AvgFulfillmentTime ASC LIMIT 1;",
            "SELECT COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*) AS OnTimeDeliveryRate FROM orders WHERE TO_CHAR(OrderDate, 'YYYY-MM') = TO_CHAR(CURRENT_DATE - INTERVAL '1 month', 'YYYY-MM');",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE OrderDate >= CURRENT_DATE - INTERVAL '1 year';",
            "SELECT ShipVia, COUNT(*) AS Delays FROM orders WHERE ShippedDate > RequiredDate AND TO_CHAR(OrderDate, 'YYYY-Q') = TO_CHAR(DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months', 'YYYY-Q') GROUP BY ShipVia ORDER BY Delays DESC LIMIT 1;",
            "SELECT ShipCountry, COUNT(*) AS Orders FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY ShipCountry;",
            "SELECT EmployeeID, COUNT(*) AS OrderCount FROM orders WHERE TO_CHAR(OrderDate, 'YYYY-MM') = TO_CHAR(CURRENT_DATE - INTERVAL '1 month', 'YYYY-MM') GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT ShipRegion, SUM(Freight) AS TotalFreight FROM orders WHERE OrderDate >= DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '1 year' GROUP BY ShipRegion;",
            "SELECT CustomerID FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY CustomerID HAVING SUM(Freight) > 500;",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM orders WHERE ShipCountry = 'CompanyCountry';",
            "SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipVia;",
            "SELECT ShipCity, COUNT(*) AS Shipments FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 1;",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE Freight > (SELECT AVG(Freight) FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) AND EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE));",
            "SELECT COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > DATE_ADD(RequiredDate, INTERVAL 3 DAY) AND EXTRACT(YEAR_QUARTER FROM OrderDate) = EXTRACT(YEAR_QUARTER FROM CURRENT_DATE - INTERVAL 3 MONTH);",
            "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*) AS OnTimeRate FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '1 year') GROUP BY EXTRACT(MONTH FROM OrderDate) ORDER BY OnTimeRate DESC LIMIT 1;",
            "SELECT Freight, COUNT(*) FROM orders WHERE ShipRegion = 'North' GROUP BY Freight;",
            "SELECT ShipCountry = 'CompanyCountry' AS isDomestic, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY isDomestic;",
            "SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY ShipVia ORDER BY AvgFreight DESC LIMIT 1;",
            "SELECT CORR(Freight, DATEDIFF(ShippedDate, OrderDate)) AS Correlation FROM orders WHERE TO_CHAR(OrderDate, 'YYYY-MM') = TO_CHAR(CURRENT_DATE - INTERVAL '1 month', 'YYYY-MM');",
            "SELECT COUNT(DISTINCT EmployeeID) FROM orders WHERE ShipCity = 'TargetCity' AND YEAR(OrderDate) = YEAR(CURRENT_DATE);",
            "SELECT MAX(Freight) AS MaxCost, MIN(Freight) AS MinCost, AVG(Freight) AS AvgCost FROM orders WHERE ShipCountry IN ('France', 'Germany', 'Italy');",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY OrderMonth;",
            "SELECT ShipVia, COUNT(OrderID) AS NumOrders FROM orders GROUP BY ShipVia;",
            "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT ShipCountry, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipCountry;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, COUNT(OrderID) AS LateShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY OrderMonth;",
            "SELECT ShipVia, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipVia ORDER BY AvgFreightCost LIMIT 1;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, VARIANCE(Freight) AS FreightVariance FROM orders GROUP BY OrderMonth;",
            "SELECT OrderID, Freight FROM orders ORDER BY Freight DESC LIMIT 5;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, SUM(CASE WHEN Freight = 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(OrderID) AS ZeroCostPercentage FROM orders GROUP BY OrderMonth;",
            "SELECT CustomerID, COUNT(OrderID) AS NumOrders FROM orders GROUP BY CustomerID ORDER BY NumOrders DESC;",
            "SELECT MAX(DATEDIFF(ShippedDate, OrderDate)) AS LongestFulfillmentTime FROM orders;",
            "SELECT COUNT(OrderID) FROM orders WHERE ShipCity IS NOT NULL;",
            "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgShippingDelayTime FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EmployeeID;",
            "SELECT AVG(Freight) FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-01-31';",
            "SELECT (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 1.0 / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate FROM orders WHERE OrderDate BETWEEN '2023-03-01' AND '2023-03-31';",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE OrderDate BETWEEN '2023-04-01' AND '2023-04-30';",
            "SELECT AVG(Freight) FROM orders WHERE OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE);",
            "SELECT COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders WHERE OrderDate >= DATEADD(QUARTER, -1, DATE_TRUNC('QUARTER', CURRENT_DATE));",
            "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate AND YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1;",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS FulfillmentTime FROM orders WHERE OrderDate >= DATE_TRUNC('MONTH', CURRENT_DATE);",
            "SELECT ShipCountry, AVG(Freight) AS AvgCost FROM orders GROUP BY ShipCountry ORDER BY AvgCost DESC LIMIT 1;",
            "SELECT EmployeeID, COUNT(OrderID) AS OnTimeDeliveries FROM orders WHERE ShippedDate <= RequiredDate AND YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY EmployeeID ORDER BY OnTimeDeliveries DESC FETCH FIRST 1 ROWS ONLY;",
            "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate IS NULL;",
            "SELECT MAX(Freight) FROM orders;",
            "SELECT ShipCity, COUNT(OrderID) AS ShipmentsCount FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY ShipCity ORDER BY ShipmentsCount DESC FETCH FIRST 1 ROW ONLY;",
            "SELECT MONTH(OrderDate) AS OrderMonth, AVG(Freight) AS AvgFreight FROM orders WHERE OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) AND OrderDate < CURRENT_DATE GROUP BY MONTH(OrderDate) ORDER BY AvgFreight DESC LIMIT 1;",
            "SELECT SUM(Freight) FROM orders WHERE ShippedDate <= RequiredDate AND MONTH(ShippedDate) = MONTH(CURRENT_DATE) AND YEAR(ShippedDate) = YEAR(CURRENT_DATE);",
            "SELECT ShipRegion, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY ShipRegion ORDER BY OnTimeRate ASC LIMIT 1;",
            "SELECT SUM(DATEDIFF(day, OrderDate, ShippedDate)) FROM orders WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE) AND YEAR(OrderDate) = YEAR(CURRENT_DATE);",
            "SELECT ShipVia FROM orders ORDER BY DATEDIFF(ShippedDate, RequiredDate) DESC LIMIT 1;",
            "SELECT ShipCountry, COUNT(OrderID) AS Shipments FROM orders WHERE OrderDate >= DATEADD(QUARTER, -1, CURRENT_DATE) GROUP BY ShipCountry ORDER BY Shipments DESC;",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, AVG(Freight) AS AvgFreight FROM orders WHERE OrderDate >= DATEADD(MONTH, -6, CURRENT_DATE) GROUP BY TO_CHAR(OrderDate, 'YYYY-MM') ORDER BY Month;",
            "SELECT CustomerID, COUNT(OrderID) AS OrdersCount FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY CustomerID ORDER BY OrdersCount DESC LIMIT 1;",
            "SELECT COUNT(CASE WHEN Freight > 100 THEN 1 END) * 100.0 / COUNT(OrderID) AS PercentageOver100 FROM orders WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE) AND YEAR(OrderDate) = YEAR(CURRENT_DATE);",
            "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL GROUP BY EmployeeID ORDER BY AvgFulfillmentTime ASC LIMIT 3;",
            "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
            "SELECT ShipCity, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY ShipCity ORDER BY AverageFulfillmentTime ASC LIMIT 1;",
            "SELECT ShipVia, Freight, COUNT(*) AS Frequency FROM orders GROUP BY ShipVia, Freight;",
            "SELECT ShipCountry, COUNT(OrderID) * 100.0 / (SELECT COUNT(*) FROM orders) AS PercentageOfOrders FROM orders GROUP BY ShipCountry;",
            "SELECT EmployeeID, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY EmployeeID ORDER BY AverageShippingCost DESC LIMIT 1;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AverageShippingCost FROM orders WHERE OrderDate >= DATEADD(YEAR, -1, CURDATE()) GROUP BY Month ORDER BY Month DESC;",
            "SELECT EXTRACT(YEAR_MONTH FROM ShippedDate) AS Month, ShipVia, COUNT(OrderID) AS OrdersShipped FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month, ShipVia;",
            "SELECT COUNT(*) AS NotShippedOrders FROM orders WHERE ShippedDate IS NULL;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, VARIANCE(Freight) AS FreightVariance FROM orders GROUP BY Month;",
            "SELECT ShipRegion, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipRegion ORDER BY OnTimeDeliveryRate DESC LIMIT 1;",
            "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AverageLateDays FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT YEAR(OrderDate) AS Year, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders GROUP BY Year ORDER BY Year;",
            "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY EXTRACT(MONTH FROM OrderDate);",
            "SELECT COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate)::float / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders;",
            "SELECT ShipVia, SUM(Freight) AS TotalShippingCost FROM orders GROUP BY ShipVia;",
            "SELECT ShipCity, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipCity;",
            "SELECT EXTRACT(MONTH FROM ShippedDate) AS Month, COUNT(*) AS LateShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY EXTRACT(MONTH FROM ShippedDate) ORDER BY LateShipments DESC LIMIT 1;",
            "SELECT ShipCountry, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END)::float / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipCountry ORDER BY OnTimeDeliveryRate DESC LIMIT 1;",
            "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgDeliveryTime FROM orders GROUP BY ShipRegion;",
            "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY EXTRACT(MONTH FROM OrderDate);",
            "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate < RequiredDate;",
            "SELECT ShipRegion, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipRegion;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgDeliveryTime FROM orders GROUP BY ShipVia ORDER BY AvgDeliveryTime ASC LIMIT 1;",
            "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgLateDays FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) = COUNT(*) FILTER (WHERE ShippedDate <= RequiredDate);",
            "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT ShipCountry, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCountry ORDER BY OrderCount DESC;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgFreightCost FROM orders WHERE OrderDate >= NOW() - INTERVAL '1 year' GROUP BY DATE_TRUNC('month', OrderDate);",
            "SELECT ShipVia, AVG(DATEDIFF(day, OrderDate, ShippedDate)) AS AvgShipTime FROM orders GROUP BY ShipVia ORDER BY AvgShipTime LIMIT 1;",
            "SELECT ShipRegion, COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipRegion;",
            "SELECT CORR(Freight, DATE_PART('day', ShippedDate - OrderDate)) AS CorrFreightShipTime FROM orders WHERE ShippedDate IS NOT NULL;",
            "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 3;",
            "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia ORDER BY OrderCount DESC;",
            "SELECT CustomerID, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY CustomerID ORDER BY AvgShippingCost DESC LIMIT 1;",
            "SELECT ShipRegion, AVG(DATE_PART('day', ShippedDate - OrderDate)) AS AvgShipTime FROM orders GROUP BY ShipRegion;"
        ],
        "reviews": [
            "The original query uses DATE_FORMAT which is not a part of ANSI SQL standard. Instead, DATE_TRUNC is used to truncate the date to the month. Everything else in the query is correct.",
            "The original query uses DATE_FORMAT, which is not ANSI SQL. I replaced it with TO_CHAR for date formatting. Additionally, casting the SUM to DECIMAL ensures correct percentage calculation in SQL.",
            "The SQL query is almost correct, but ANSI SQL does not support the DATE_FORMAT function used here. Instead, we can extract the month and year using the EXTRACT function or use the FORMAT function if supported. Here is the corrected query: SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Year, Month;",
            "The SQL query correctly calculates the average shipping cost per shipping method and orders the results to return the method with the highest average cost. No corrections are needed.",
            "The SQL query correctly calculates the average fulfillment time for each shipping method and orders them to find the fastest. The DATEDIFF function and GROUP BY are used correctly. The LIMIT 1 ensures only the fastest shipping method is selected. The query is correct and aligned with the business question.",
            "The original query incorrectly uses OrderDate to determine the monthly grouping for late orders. It should use ShippedDate to accurately reflect the month in which the orders were shipped late.",
            "The original query used DATE_FORMAT which is not ANSI SQL standard. I've replaced it with EXTRACT to get the year and month, dividing them into two columns for clarity in the group by clause, ensuring compatibility with most SQL databases.",
            "The original query correctly calculates the on-time delivery rate using a CASE statement and grouping by ShipRegion. However, to ensure proper calculation and avoid integer division, multiplying by 100.0 ensures that the result is a decimal rather than an integer.",
            "The SQL query is correct. It groups orders by ShipVia and calculates the average freight for each group, which corresponds to the average shipping cost per order for each shipping method.",
            "The SQL query correctly selects the EmployeeID and counts the number of orders processed by each employee. It groups by EmployeeID and orders by the count in descending order, limiting the result to one, which identifies the employee who has processed the most orders. The query is correct.",
            "The SQL query is correct. It accurately calculates the total freight cost for each country by summing the 'Freight' column and grouping by 'ShipCountry.'",
            "The original query uses DATE_FORMAT function, which is not ANSI SQL standard. Instead, I've used TO_CHAR function for formatting the date. Additionally, I've cast the division to DECIMAL to ensure accurate percentage calculation.",
            "The query correctly calculates the average order fulfillment time grouped by shipping method (ShipVia). The use of AVG and DATEDIFF between ShippedDate and OrderDate aligns with the defined metric for 'Order Fulfillment Time'. The SQL query is correct.",
            "The SQL query correctly selects the city with the highest number of late orders by counting the orders where the ShippedDate is after the RequiredDate and grouping by ShipCity. The use of ORDER BY LateOrders DESC LIMIT 1 ensures only the city with the most late orders is returned.",
            "The SQL query correctly identifies customers with the highest number of late deliveries by counting orders where the ShippedDate is greater than the RequiredDate, grouping them by CustomerID, and then ordering by the count of late deliveries in descending order. The use of LIMIT 1 ensures only the customer with the highest number is returned. The query is correct.",
            "The original query is almost correct, but it uses MySQL's DATE_FORMAT function which is specific to MySQL. To adhere to ANSI SQL, I've used TO_CHAR for date formatting, and removed unnecessary ELSE NULL in the CASE expressions as it's implicit.",
            "The SQL query is correct. It selects the region with the most orders where the freight cost is over 100, groups the results by ShipRegion, and orders them in descending order to select the top result. No changes needed.",
            "The SQL query is correct. It retrieves the count of orders grouped by the shipping method as specified by the business question.",
            "The query is mostly correct, but DATE_FORMAT is not an ANSI SQL function. It should be replaced with an equivalent such as using EXTRACT(YEAR FROM OrderDate) and EXTRACT(MONTH FROM OrderDate) for ANSI SQL compliance.",
            "The SQL query correctly selects the country with the lowest average shipping cost. It calculates the average freight per country, groups the results by country, and orders them in ascending order, limiting the results to the top one.",
            "The SQL query correctly calculates the average shipping cost per month by truncating the OrderDate to the month level and using AVG(Freight) with GROUP BY Month. It matches the business requirement to calculate the 'Shipping Cost per Order' metric at a monthly granularity.",
            "The SQL query is almost correct. However, the function DATE_TRUNC('month', OrderDate) should be applied to the ShippedDate instead of OrderDate to group orders by the shipping month for the on-time delivery rate. Here's the corrected query: SELECT DATE_TRUNC('month', ShippedDate) AS Month, COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
            "The query is correct as it calculates the average time taken to fulfill an order each month using the DATEDIFF function to find the difference between ShippedDate and OrderDate, grouped by month extracted from OrderDate.",
            "The SQL query is correct. It calculates the average freight cost per city and returns the city with the highest average freight cost. The use of GROUP BY, AVG, and ORDER BY is appropriate.",
            "The SQL query correctly counts the total number of orders shipped by each shipping method using 'ShipVia'. No corrections are needed.",
            "Correct the DATE_TRUNC to use ShippedDate instead of OrderDate to ensure you're aggregating based on the actual shipping date.",
            "The SQL query is correct. It calculates the average freight cost grouped by shipping country as required by the business question.",
            "The original query is mostly correct, but DATE_TRUNC is not standard ANSI SQL. It has been replaced with EXTRACT to ensure it conforms to ANSI SQL standards.",
            "The SQL query correctly counts the number of orders that have not been shipped yet, which means their ShippedDate is NULL. The query is accurate for the business question.",
            "The original query incorrectly uses OrderDate instead of ShippedDate for calculating monthly distribution. Corrected the query to use ShippedDate.",
            "The query correctly calculates the percentage of orders shipped to the USA by dividing the count of orders with 'ShipCountry' as 'USA' by the total count of orders. The multiplication by 100.0 ensures the result is a percentage. This query is correct as per the given schema and question.",
            "The provided SQL query correctly calculates the average delivery time per shipping method by using the 'DATEDIFF' function on 'ShippedDate' and 'OrderDate', grouping by 'ShipVia', and ordering the results by the average delivery time in ascending order.",
            "The SQL query correctly calculates the total shipping costs for each customer and selects the customer with the highest total shipping costs. No corrections are needed.",
            "The SQL query correctly calculates the average order fulfillment time for domestic vs. international shipments, as defined by the shipping country being 'USA'. The use of CASE to determine ShipmentType and grouping by ShipmentType aligns with the business question.",
            "The SQL query correctly answers the business question by counting orders with a Freight cost greater than $100.",
            "The query intends to calculate the average number of days between the OrderDate and RequiredDate for each month. The function DATE_TRUNC('month', OrderDate) is appropriately used to group by month. The DATEDIFF used in the original query is not ANSI SQL compliant; instead, subtracting dates directly is correct for calculating the difference in days.",
            "The SQL query is correct. It calculates the average delivery time for each shipping method and orders them ascendingly, which allows selecting the fastest method with LIMIT 1.",
            "The SQL query is mostly correct but missing a filter to limit the data to the last year. Added a WHERE clause to filter OrderDate to the last year.",
            "The SQL query is correct. It selects the shipping method (ShipVia) and counts the instances of each method used for orders shipped to Germany. It then groups the results by ShipVia, orders them by count in descending order, and limits the result to the most common method. No changes are necessary.",
            "The query correctly calculates the average order fulfillment time by employee and shipping region, grouped by EmployeeID and ShipRegion. The use of DATEDIFF to calculate the fulfillment time is consistent with the metric description. The query is correct given the business question.",
            "The SQL query is correct for the given question. It appropriately calculates the percentage of orders delivered on or before the required date for each month by using a CASE statement within COUNT to conditionally count on-time deliveries, then divides by the total count of orders to get the percentage. The use of DATE_FORMAT to extract the month is also correct.",
            "The original query uses DATE_FORMAT which is not part of ANSI SQL. Replaced it with TO_CHAR in combination with BIGINT to extract the month part as a string. Also, DATE_PART('day', ...) is used to calculate the difference in days in a manner consistent with ANSI SQL.",
            "The query correctly counts the number of orders for each shipping method and orders them by frequency in descending order. No changes are necessary.",
            "The SQL query is correct. It selects the ShipRegion and calculates the average freight cost for each region, then orders the results by AvgFreightCost in descending order to find the region with the highest average freight cost.",
            "The SQL query correctly counts the total number of orders grouped by ShipCountry and orders the result in descending order. The query is accurate and needs no changes.",
            "The SQL query is mostly correct. It correctly calculates the on-time delivery rate as the percentage of on-time orders out of total orders for each shipping company (ShipVia). However, it assumes that ShipVia represents distinct shipping companies, which is necessary for the query to answer the business question. The query calculates the rate correctly using the CASE statement within the COUNT function.",
            "The SQL query is correct. It calculates the average number of days between the order date and the required date by using the DATEDIFF function with the correct arguments and averaging the results.",
            "Corrected SQL query to use ANSI SQL standard functions for date formatting and date difference calculation. Ensured compatibility with ANSI SQL regarding function usage and formatting.",
            "The original query incorrectly uses the OrderDate instead of the ShippedDate. It also doesn't accurately capture the last quarter. The corrected query uses ShippedDate and calculates the last quarter correctly.",
            "The SQL query correctly answers the business question by counting the total number of orders handled by each employee, grouping the results by EmployeeID, and ordering them in descending order by the count of orders. No corrections are needed.",
            "The SQL query correctly answers the question by grouping shipments by city and counting them, then ordering the results by the number of shipments in descending order to identify the city with the most shipments.",
            "The query is correct. It selects orders where the ShippedDate is later than the RequiredDate, identifying late shipments and the shipping method used.",
            "The query is correct. It calculates the total freight cost for each customer, orders the results in descending order, and limits the output to the top 5 customers with the highest total freight costs.",
            "The original query uses non-ANSI SQL function DATE_FORMAT, which is not standard. Replaced with DATE_TRUNC to ensure ANSI SQL compatibility.",
            "The SQL query correctly calculates the average shipping cost for each shipping company by grouping the results by the 'ShipVia' column and applying the AVG function on the 'Freight' column. No corrections are needed.",
            "The SQL query correctly calculates the percentage of orders delivered after the required date. It uses a conditional COUNT to determine the number of late orders and divides by the total count of orders, then multiplies by 100 to obtain a percentage. The syntax and logic are correct.",
            "The query is correct. It selects the shipping method (ShipVia) and calculates the total freight cost by summing the Freight column, grouped by ShipVia.",
            "The original query used DATE_FORMAT which is not part of ANSI SQL. I replaced it with TO_CHAR for date formatting and ensured proper usage in the GROUP BY clause. The logic for counting late orders is correct.",
            "The initial query correctly calculates the on-time delivery rate using a CASE statement, but there was a slight ambiguity in the COUNT() function without specifying a column. It's clearer to specify COUNT(OrderID) to match the metric definition. The adjusted query maintains correct logic and addresses clarification.",
            "The original query correctly calculates the on-time delivery rate per month, but the GROUP BY clause should explicitly use the same date formatting as in the SELECT clause to ensure proper grouping.",
            "The SQL query is correct. It selects the shipping method with the highest average freight cost by grouping by ShipVia and ordering by the calculated average in descending order. The LIMIT 1 restricts the result to the top value.",
            "The query correctly calculates the number of orders placed by each customer by grouping orders based on CustomerID and counting the OrderID. It is accurate and follows the business question requirements.",
            "The SQL query correctly calculates the total freight cost for each shipping method by grouping on 'ShipVia' and using the SUM function on 'Freight'. The query matches the business question and uses the correct SQL syntax.",
            "Corrected the use of OrderDate to ShippedDate for determining the month of late shipments. The original query mistakenly used OrderDate to group by month, which is not appropriate for determining late shipments based on the ShippedDate.",
            "The SQL query is correct. It calculates the average shipping cost per country and orders the results to find the country with the highest average. The use of 'LIMIT 1' ensures only the top result is returned, which matches the business question.",
            "The SQL query is correct. It counts the number of orders for each employee, groups by EmployeeID, orders the results in descending order based on the count, and limits the result to 1 to find the employee with the most orders.",
            "The SQL query correctly answers the question by selecting ShipCity and counting the number of orders for each city. It orders the results by the number of orders in descending order and limits the output to the top entry, which is the most common shipping city. The query is correct as per the given schema.",
            "The SQL query is correct. It calculates the average shipping cost per country using AVG(Freight) and groups the results by ShipCountry.",
            "The SQL query is correct. It accurately counts orders where the difference between ShippedDate and OrderDate is 2 days or less.",
            "The SQL query is correct. It calculates the average fulfillment time for orders grouped by shipping method using the DATEDIFF function, which is appropriate for the question.",
            "The query correctly finds the order that took the longest to fulfill by calculating the difference between ShippedDate and OrderDate, orders by this duration in descending order, and limits the result to the top 1 record.",
            "The SQL query is correct for the given question. It accurately counts the number of orders where the freight cost is greater than $50.",
            "The SQL query correctly answers the business question. It selects the ShipCountry and counts the number of OrderID for each ShipCountry, grouping by ShipCountry and ordering by the number of orders in descending order. This aligns with the intention to find the distribution of shipment destinations by country.",
            "The SQL query correctly calculates the on-time delivery rate for each shipping method by using a CASE statement to count orders shipped on or before the required date, then dividing by total orders for each shipping method. The use of ROUND is appropriate to format the percentage to two decimal places. Therefore, the query is correct.",
            "The SQL query is correct. It properly calculates the average freight cost by filtering orders where the ShipCountry is 'USA' and applying the AVG function to the Freight column.",
            "The SQL query is correct. It calculates the average number of days between the OrderDate and ShippedDate for each ShipRegion using the DATEDIFF function and groups the results by ShipRegion.",
            "The SQL query is correct. It selects the EmployeeID and calculates the average freight cost per employee by grouping orders based on EmployeeID.",
            "The query correctly calculates the average freight cost per order per month using 'DATE_TRUNC' to group by month and 'AVG(Freight)' to find the average cost. The query is correct.",
            "The SQL query is correct. It aligns with the 'Order Fulfillment Time' metric by calculating the average time taken to fulfill an order on a monthly basis using the DATEDIFF function and grouping by the month of the order date.",
            "The SQL query correctly retrieves the OrderID, ShipVia, and Freight for the order with the highest freight cost by ordering the results by Freight in descending order and limiting the result to the top entry.",
            "The original query does not filter out unshipped orders. Adding 'WHERE ShippedDate IS NOT NULL' ensures only shipped orders are considered.",
            "The SQL query is correct. It selects all columns from the 'orders' table, orders the results by 'Freight' in descending order, and limits the output to 1 record, which will be the order with the highest shipping cost.",
            "The query should use the ShippedDate instead of OrderDate to ensure that it counts orders based on when they were shipped, aligning with the notion of tracking shipments per month.",
            "The provided SQL query is correct. It calculates the average time difference between the 'ShippedDate' and the 'RequiredDate' for orders that are delayed, which is defined by the condition 'ShippedDate > RequiredDate'.",
            "The SQL query correctly computes the distribution of shipping costs by counting the frequency of each distinct freight cost value. It uses GROUP BY to aggregate the frequency and orders the results by frequency in descending order. No corrections needed.",
            "The SQL query is correct. It selects the shipping method 'ShipVia' and counts the number of 'OrderID' for each method, grouping the results by 'ShipVia'.",
            "The SQL query correctly calculates the average freight cost per region and sorts the results in descending order to get the region with the highest average freight cost. The use of LIMIT 1 ensures that only the region with the highest cost is returned. The query is correct.",
            "The SQL query is correct. It calculates the number of orders per month by truncating the 'OrderDate' to the month level, counts the orders, groups by this truncated value, and orders the results by month.",
            "The query correctly identifies the top customers by the number of orders placed. It groups by 'CustomerID', counts 'OrderID', and orders the result in descending order to get the top 5. The SQL query is correct.",
            "The SQL query correctly calculates the on-time delivery rate by dividing the count of orders shipped on or before the required date by the total number of orders. It groups the results by the shipping method and orders them in descending order to find the method with the best rate, limiting the result to the top method. The query is correct according to ANSI SQL standards and the definitions provided.",
            "The query correctly calculates the number of orders shipped on weekends using `EXTRACT(DOW FROM ShippedDate)`. Day of the week (DOW) extraction is accurate if it considers Sunday as 0 and Saturday as 6, which matches ANSI SQL standards. Ensure the SQL dialect used supports this function.",
            "The SQL query is correct. It calculates the correlation between the order fulfillment time and shipping cost using the DATEDIFF function to get the fulfillment time and the CORR function to find the correlation.",
            "The query is mostly correct but should group by the month of the 'ShippedDate' instead of 'OrderDate' to align with the timing of shipping delays. The adjusted SQL query now correctly calculates the delay based on the shipped month, addressing the business question accurately.",
            "The SQL query correctly calculates the average order fulfillment time for each employee by grouping on EmployeeID and applying the DATEDIFF function between ShippedDate and OrderDate. The use of GROUP BY is appropriate here to generate averages for each employee. The query is correct.",
            "The SQL query correctly calculates the average freight for each country and orders the result by average freight. The query is aligned with the business question and schema provided.",
            "The SQL query is correct and accurately calculates the number of late shipments per city, orders them in descending order, and limits the output to the city with the highest count. No changes are needed.",
            "The query is almost correct. To ensure correct grouping, the GROUP BY should match the SELECT clause using the same DATE_FORMAT expression.",
            "The original query uses DATE_FORMAT with MySQL syntax, which is not ANSI SQL standard. It is corrected using TO_CHAR for ANSI SQL compatibility.",
            "The original query uses DATE_FORMAT which is not standard in ANSI SQL. Instead, DATE_TRUNC should be used to truncate the date to the month level.",
            "The original query has an incorrect use of the COUNT function with a WHERE clause inside it. The correct approach is to use a CASE statement inside COUNT to filter the specific condition.",
            "The SQL query correctly retrieves the most frequently used shipping method by counting the number of orders for each shipping method, grouping by ShipVia, and ordering the results in descending order. The LIMIT 1 clause ensures only the most frequent method is returned. The query is correct and adheres to the ANSI SQL standard.",
            "The SQL query correctly calculates the total freight cost by each shipping company using 'SUM(Freight)' and groups the results by 'ShipVia'. The query is accurate as per the question's requirement.",
            "The SQL query is correct. It accurately counts the number of orders placed by each customer using the orders table, grouping by CustomerID.",
            "The SQL query correctly calculates the average order fulfillment time for each shipping method using DATEDIFF to find the difference between ShippedDate and OrderDate. The GROUP BY clause correctly groups the data by ShipVia, allowing the AVG function to compute the average fulfillment time per shipping method. No corrections are needed.",
            "The SQL query correctly calculates the average freight cost by country based on the schema provided. No changes are needed.",
            "The query correctly selects EmployeeID and counts the number of orders each employee processed. It groups by EmployeeID and orders the results in descending order by the count. The query is correct as per the business question.",
            "The original query incorrectly uses COUNT with a WHERE clause. This should be replaced with a CASE statement inside COUNT to properly calculate conditional counts.",
            "The query correctly computes the average freight cost by region and orders the results in descending order, identifying regions with higher average costs. However, the term 'consistently' may imply a need for time-based analysis or comparison over specific periods, which the query does not address. If a time-based consistency is required, additional context or time period data would be necessary.",
            "The original query is missing a filter to only include data from the past year. Added a WHERE clause to filter OrderDate to the past year and ensure consistent grouping and ordering by DATE_FORMAT(OrderDate, '%Y-%m').",
            "The function DATE_FORMAT is not a standard ANSI SQL function. Instead, use EXTRACT(MONTH FROM ShippedDate) to obtain the month. The rest of the query is correct and uses DATEDIFF and AVG to calculate average shipping time.",
            "The query correctly uses PERCENTILE_CONT to calculate the median freight cost per order, which aligns with the business question. No corrections needed.",
            "The original query had a syntax error in the WHERE clause placement. It should be after the FROM clause and before the GROUP BY clause. The alias 'AS DelayedShipments' should also be placed directly after the COUNT function.",
            "The original query incorrectly used a WHERE clause within an aggregate function. Corrected by using CASE WHEN structure within SUM to conditionally count on-time orders.",
            "The SQL query correctly calculates the average order fulfillment time for each ship city and orders them in descending order to find the cities with the longest times. The query aligns with the business question and uses the correct columns and functions.",
            "The original query is correct. It properly calculates the percentage of on-time deliveries per month by comparing the shipped date and required date, using COUNT with a CASE statement. Changing COUNT(*) to COUNT(OrderID) provides consistency in counting rows accurately.",
            "The SQL query is correct and matches the business question. It calculates the total freight cost by each shipping country using GROUP BY.",
            "The SQL query is correct. It calculates the total freight cost for each customer, orders the results in descending order, and limits the output to the customer with the highest total freight cost.",
            "The original query uses OrderDate for determining the month, but it should use ShippedDate to accurately reflect shipping costs for the month an order was shipped, not ordered. Corrected by replacing OrderDate with ShippedDate in DATE_TRUNC.",
            "The SQL query correctly retrieves all orders shipped by a specified carrier and within a given date range by using placeholders for the carrier ('ShipVia') and the date range ('ShippedDate BETWEEN ? AND ?').",
            "The SQL query is correct as per the given question. It calculates the average fulfillment time for each city and orders the results in descending order to find the cities with the highest average.",
            "Corrected the SQL query to group by the 'ShippedDate' to reflect the on-time delivery rate more effectively. Also corrected the grouping column in the SELECT clause accordingly.",
            "The SQL query is correct. It counts the late shipments for each shipping method by using a CASE statement to evaluate if the ShippedDate is greater than the RequiredDate.",
            "The SQL query is correct as it calculates the average freight cost for each region by grouping the orders by 'ShipRegion' and computing the average of the 'Freight' column.",
            "The query correctly calculates the total freight cost per employee, orders the results in descending order of total freight cost, and limits the output to the top 3 employees. It accurately answers the question as given.",
            "The SQL query correctly finds the top three customers by the number of orders placed. It groups the orders by CustomerID and orders them in descending order of count, limiting the result to three customers. No corrections needed.",
            "The original query uses VARIANCE, which is a valid alias but the actual ANSI SQL function should be VAR_SAMP for sample variance or VAR_POP for population variance. Assuming sample variance is intended here, the corrected query uses VAR_SAMP.",
            "The provided SQL query correctly calculates the correlation between the order fulfillment time and the freight cost using the CORR function and DATEDIFF to determine the duration. The query is valid according to the ANSI SQL standard.",
            "Corrected the query to calculate the on-time delivery rate instead of the late delivery rate. The query now orders by OnTimeDeliveryRate in ascending order to find the lowest rate.",
            "The provided SQL query is correct. It calculates the maximum delay by finding the difference between ShippedDate and RequiredDate for orders where the ShippedDate is later than the RequiredDate.",
            "The query correctly identifies orders where the shipped date is later than the required date, which answers the question accurately.",
            "The provided SQL query correctly identifies the most common shipping recipient names by counting the occurrences of each unique ShipName in the orders table, ordering them by frequency in descending order, and limiting the results to the top 5. The query is accurate and follows the requirements.",
            "The SQL query correctly calculates the average shipping cost per month by truncating the OrderDate to the month level and grouping by it. The calculation of AVG(Freight) aligns with the metric 'Shipping Cost per Order'. The query is correct.",
            "The original SQL query incorrectly uses OrderDate to group by month instead of ShippedDate. The updated query groups by the month of ShippedDate to correctly calculate on-time deliveries.",
            "The SQL query is mostly correct. However, ANSI SQL uses DATEDIFF with three arguments: the date part (e.g., day), start date, and end date. Ensure the correct syntax by specifying 'day' as the date part in DATEDIFF.",
            "The query correctly identifies the most frequently used shipping method by counting the occurrences of each shipping method and ordering by frequency in descending order. The LIMIT 1 clause ensures only the highest frequency method is returned, which answers the business question accurately.",
            "The SQL query is correct. It properly calculates the total freight cost per shipping method by using the SUM function and grouping by ShipVia.",
            "The SQL query correctly counts the number of orders where the ShippedDate is after the RequiredDate. It accurately answers the business question.",
            "The SQL query correctly identifies the customer with the most orders. It groups by CustomerID, counts the orders per customer, and orders the result in descending order, limiting the output to the top result.",
            "The SQL query correctly selects the EmployeeID and counts the total number of orders for each employee, then orders the result to find the employee with the most orders. The use of LIMIT 1 is appropriate to return only the top result. Therefore, the SQL query is correct.",
            "The query is correct. It calculates the percentage of orders delivered on or before the required date using the FILTER clause, as specified in the business metrics definitions.",
            "The original query is almost correct. However, for clarity and consistency, the GROUP BY clause should use the exact same expression as the select list, which is DATE_TRUNC('month', OrderDate).",
            "The SQL query correctly identifies regions with delayed deliveries by counting entries where the ShippedDate is later than the RequiredDate, grouping by ShipRegion, and ordering by the count of delayed orders. The use of LIMIT 1 ensures it finds the region with the highest number. The query is correct and aligns with the business question.",
            "The SQL query correctly calculates the number of unique customers who placed orders each month by using DATE_TRUNC to group orders by month and COUNT(DISTINCT CustomerID) to count unique customers. The query is accurate for the given question and schema.",
            "The SQL query correctly calculates the average fulfillment time by shipping method. It properly uses DATEDIFF to compute the difference between ShippedDate and OrderDate, filters out records with a NULL ShippedDate, and groups the results by ShipVia.",
            "The SQL query is correct. It calculates the total number of orders per month and retrieves the month with the highest number of orders using the DATE_TRUNC function for monthly grouping, COUNT for counting orders, and it limits the result to the highest count.",
            "The SQL query is correct and accurately computes the average shipping cost per country by grouping the orders by ShipCountry and calculating the average of the Freight column.",
            "The SQL query is correct. It groups the orders by ShipCity, counts the total number of orders per city, and then orders the results in descending order to find the city with the highest number of orders, limiting the result to the top one.",
            "The SQL query is correct. It accurately calculates the percentage of orders shipped using each method by grouping the orders based on 'ShipVia' and dividing the count of orders for each shipping method by the total count of orders.",
            "The original query incorrectly included orders that were never shipped (ShippedDate IS NULL) as never reaching the required date. The condition should only consider orders where ShippedDate is greater than RequiredDate, ensuring that only shipped orders that missed the deadline are counted.",
            "The query mistakenly uses the OrderDate column, but it should use ShippedDate to calculate the freight for orders shipped in March 2023.",
            "The original query is mostly correct, but it lacks an alias for the count to improve readability. Added 'AS on_time_count' to make it clear what the COUNT represents.",
            "The original query is mostly correct but uses the function 'MONTH' which may not be supported universally in ANSI SQL. Instead, I used 'EXTRACT'. Also, I explicitly named the result columns for clarity.",
            "The original query incorrectly uses COUNT(OrderID WHERE ShippedDate <= RequiredDate), which is not valid SQL syntax. It should use COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) to correctly count the on-time deliveries.",
            "The original query accurately captures the intent to calculate the average order fulfillment time each month. However, to ensure consistency in the GROUP BY clause, it's better to use the same DATE_TRUNC expression directly, rather than relying on the alias 'Month'. The revised query corrects this.",
            "The SQL query is correct and accurately calculates the month with the highest average shipping cost by grouping and averaging the Freight column by month. It uses DATE_TRUNC to extract the monthly granularity from OrderDate, groups the data, orders it by the average shipping cost in descending order, and limits the result to the top entry, which precisely answers the question.",
            "The query correctly calculates the total freight cost for each shipping method by grouping the records in the 'orders' table based on 'ShipVia' and summing the 'Freight' column. No changes needed.",
            "The original SQL query has a mistake in the date calculation for the 'last year'. The DATEADD function is not standard in ANSI SQL, and the query instead requires the use of INTERVAL to subtract one year. Additionally, 'LIMIT 1' is not part of the ANSI SQL standard. The correct clause is 'FETCH FIRST 1 ROW ONLY.'",
            "The original query incorrectly uses COUNT with a condition inside it. The correct approach is to use a SUM with a CASE statement to count only the orders shipped late.",
            "The SQL query correctly counts orders handled by each employee, groups by EmployeeID, orders the results in descending order by the number of orders, and limits the result to the employee with the most orders, which is correct according to the business question. There are no mistakes in the query.",
            "The SQL query correctly calculates the average shipping cost for each shipping method by grouping the data using the ShipVia column and applying the AVG function on the Freight column. No corrections are needed.",
            "The SQL query is correct. It calculates the average delay for orders that were shipped after the required date by taking the difference between the ShippedDate and RequiredDate for only those orders satisfying the ShippedDate > RequiredDate condition.",
            "The SQL query correctly calculates the sample variance of shipping costs per region using VAR_SAMP and groups by ShipRegion. The query is accurate and needs no correction.",
            "The original query attempted to use a WHERE clause inside COUNT, which is incorrect. The corrected query uses a CASE statement inside COUNT to filter the orders that were shipped on time.",
            "The SQL query is correct as it calculates the average number of days between the order date and the required date using the DATEDIFF function.",
            "The SQL query is correct. It calculates the average delay in days for orders shipped late by using DATEDIFF on ShippedDate and RequiredDate, and filtering orders where ShippedDate is greater than RequiredDate.",
            "The SQL query is correct. It correctly counts the number of orders shipped on the weekend by extracting the day of the week (`DOW`) from the `ShippedDate` and checking for Saturday (6) and Sunday (0).",
            "The SQL query correctly calculates the total shipping expenditure per customer and returns the customer with the highest total. No changes needed.",
            "The SQL query correctly calculates the correlation between freight cost and fulfillment time using the CORR function.",
            "The query correctly counts the distinct CustomerID, which represents unique customers. The query is correct.",
            "The SQL query is correct for the given question. It calculates the average fulfillment time for each shipping method and orders them in ascending order to find the fastest one.",
            "The SQL query is correct. It correctly calculates the average order fulfillment time grouped by each shipping method using the DATEDIFF function.",
            "The SQL query correctly calculates the average freight cost for each country and selects the country with the highest average freight cost. The use of GROUP BY to aggregate data by ShipCountry and the ORDER BY clause to sort the results are appropriate. Finally, LIMIT 1 ensures only the top result is returned. The query is correct.",
            "The query correctly identifies the most commonly used shipping method by counting occurrences of each 'ShipVia' value, ordering them by count in descending order, and selecting the top result with 'LIMIT 1'. The query is correct.",
            "The query is correct. It accurately calculates the total freight cost for orders shipped to 'USA' by summing the 'Freight' column where 'ShipCountry' is 'USA'.",
            "The SQL query correctly answers the question by counting the number of orders shipped to each city using the COUNT function and grouping by ShipCity.",
            "The SQL query correctly calculates the average delivery time for orders shipped after the required date using `DATEDIFF` between `ShippedDate` and `OrderDate` and filtering with `WHERE ShippedDate > RequiredDate`. The query meets the requirements of the business question.",
            "The query is correct. It selects the employee who handled the most orders by counting the OrderID for each EmployeeID for the previous month. It groups by EmployeeID, orders by the count in descending order, and limits the result to the top employee.",
            "The original query incorrectly used COUNT(*) OVER (), which is not needed when calculating a percentage of a total count. The correct approach is to use a subquery to count the total orders and divide the count of orders requiring delivery within a week by this total.",
            "The SQL query correctly computes the average shipping cost per region for the specified regions 'Region1' and 'Region2'. The query groups the results by ShipRegion and calculates the average freight for each region using AVG(Freight). It seems to match the business requirement correctly, so no changes are needed.",
            "The SQL query correctly calculates the maximum freight cost for a single order using the MAX function on the Freight column. The query is accurate according to the provided business question.",
            "The SQL query correctly identifies the customer with the highest number of late deliveries by counting the orders where ShippedDate is greater than RequiredDate, grouping by CustomerID, and ordering the results by the count of late deliveries in descending order. The LIMIT 1 correctly limits the result to the top customer. The query is correct.",
            "The query is mostly correct, but it should use the same expression in the GROUP BY clause as in the SELECT clause. Changed GROUP BY to use DATE_TRUNC('month', OrderDate).",
            "The SQL query correctly calculates the number of orders handled by each employee, grouped by EmployeeID. The syntax and logic are correct according to the business question and schema provided.",
            "The SQL query correctly counts the number of orders with zero freight costs by filtering records where Freight equals zero. The query is accurate for the given question.",
            "The original query is almost correct but uses COUNT(*) in the window function, which could lead to incorrect results if there are null values. Use SUM(COUNT(OrderID)) OVER () to ensure aggregation within the context of ShipVia.",
            "The SQL query correctly calculates the average days orders are shipped after the required date by applying a filter where ShippedDate is greater than RequiredDate, and then calculating the average difference using DATEDIFF function. This aligns with the business question.",
            "Added WHERE clause to filter orders from the past year.",
            "The original query correctly calculates the delay and orders by descending delay, but to find the orders with the longest delay, all such orders should be retrieved, not just one. The LIMIT clause is removed to return all orders with the same longest delay.",
            "The SQL query is correct, assuming that 'DATE_FORMAT' is a valid function in the SQL dialect being used. If not, an alternative for extracting the year and month might be needed. Additionally, ensure the date format string matches the requirement of your SQL dialect for monthly grouping.",
            "The query correctly calculates the average order fulfillment time on a monthly basis using AVG and DATEDIFF functions. However, DATE_FORMAT is not part of the ANSI SQL standard, which may not be supported in all SQL environments. Instead, you can use EXTRACT to achieve a similar result, though format might be slightly different depending on your SQL environment.",
            "The SQL query correctly retrieves the most frequently used shipping method by counting occurrences of each 'ShipVia' and ordering the results in descending order of 'UsageCount'. The use of 'LIMIT 1' ensures only the most frequently used method is shown. The query is correct.",
            "Replaced DATE_FORMAT with TO_CHAR for ANSI SQL compliance and used CASE WHEN for conditional counting.",
            "The SQL query is correct. It selects CustomerID and counts OrderID for each customer, groups by CustomerID, orders by the count in descending order, and limits the result to one, which correctly identifies the customer with the most orders.",
            "The original query uses DATE_FORMAT, which is not part of the ANSI SQL standard. I replaced it with TO_CHAR, which is ANSI compliant, to format the date. The rest of the query correctly uses conditional aggregation to count shipped and not shipped orders.",
            "The SQL query correctly counts the number of orders where 'ShippedDate' is later than 'RequiredDate'.",
            "The SQL query correctly calculates the average freight cost for each shipping method using the AVG function and groups the results by ShipVia. No corrections are needed.",
            "The SQL query is correct. It groups the orders by ShipRegion, counts the number of orders per region, and orders them in descending order, returning the region with the highest order count.",
            "The provided SQL query correctly calculates the maximum order fulfillment time by using the DATEDIFF function to find the difference between the ShippedDate and OrderDate. The query appropriately filters out records where ShippedDate is NULL. No corrections are needed.",
            "The SQL query is correct and accurately calculates the average time between the order date and the required date using the DATEDIFF function.",
            "The original query attempted to compute averages for two countries using separate calculations but did not use correct SQL syntax for this purpose. The corrected query groups the results by 'ShipCountry' to calculate average freight costs separately for each country.",
            "The original SQL query correctly retrieves the count of orders per shipping city and orders the results in descending order. No corrections are needed.",
            "The SQL query groups results by ShipVia, which may not directly address the impact of shipping cost on fulfillment time. However, it calculates the average fulfillment time and average freight cost for each shipping method. This can provide insights if different shipping methods have varying costs and fulfillment times. If this aligns with the intended analysis, the query is correct.",
            "The SQL query is correct and accurately reflects the business question. It counts the number of orders with a shipping postal code starting with '1'.",
            "The initial query intends to find order volume and total shipping cost by month, but it lacks a properly formatted GROUP BY clause. Corrected by using DATE_FORMAT as an alias and using it in GROUP BY.",
            "The original query uses a FILTER clause which is not standard for all SQL implementations. The use of CASE WHEN within COUNT provides broader compatibility and achieves the same goal.",
            "The original query incorrectly groups by OrderDate instead of ShippedDate. The grouping should be based on the month of the ShippedDate to accurately reflect when the orders were delivered on or before the required date.",
            "The SQL query correctly calculates the average order fulfillment time per month by averaging the difference in days between the shipped date and the order date, grouped by the year and month of the order date. However, the DATE_FORMAT function is not standard SQL. Using ANSI SQL, consider using EXTRACT(YEAR FROM OrderDate) and EXTRACT(MONTH FROM OrderDate) for grouping.",
            "The original query incorrectly uses 'COUNT(OrderID WHERE ...)', which is not valid SQL syntax. It should use 'COUNT(CASE WHEN ... THEN ... END)' to conditionally count and calculate orders shipped late.",
            "The SQL query correctly calculates the total freight cost for orders shipped to each country. It accurately uses the SUM function to aggregate Freight costs and groups the results by ShipCountry. The query aligns with the business question without any mistakes.",
            "The SQL query correctly aggregates the number of orders for each shipping method using COUNT(OrderID) and GROUP BY ShipVia. No changes are needed.",
            "The SQL query correctly identifies the top 5 cities with the highest number of late deliveries by selecting cities where the shipped date is greater than the required date, grouping by city, and ordering by the count of late deliveries in descending order. The use of LIMIT 5 is appropriate to limit the results to the top 5. The query is correct and adheres to the requirements.",
            "The SQL query correctly calculates the average number of days from required date to shipped date for late deliveries using the DATEDIFF function and the condition ShippedDate > RequiredDate.",
            "The query is correct. It groups the orders by month and calculates the average freight cost, ordering by the highest average to find the correct answer.",
            "The SQL query correctly calculates the average order fulfillment time for each employee by using the DATEDIFF function and groups by EmployeeID. It then orders the results by the average fulfillment time in ascending order and limits the output to the top 3 employees, which matches the business question.",
            "The provided SQL query correctly answers the business question. It selects the shipping country with the highest number of orders by grouping the orders by shipping country, counting the number of orders in each group, sorting the results in descending order of the number of orders, and limiting the results to the top one.",
            "The SQL query correctly calculates the average shipping cost per month for the last year using DATE_FORMAT for grouping. However, DATE_FORMAT is not ANSI SQL. To ensure ANSI SQL compliance, we can use EXTRACT for getting year and month separately.",
            "Correct except for the ORDERID count in the subquery. Use COUNT(OrderID) instead of COUNT(*) for consistency.",
            "The SQL query is correct. It calculates the shipping time using the DATEDIFF function and orders the results in descending order to find the longest shipping times, limiting the result to the top 5.",
            "The original query counts orders based on OrderDate, not on when they were shipped. It should consider orders with a ShippedDate to calculate growth rate for shipped orders. The corrected query filters using WHERE ShippedDate IS NOT NULL.",
            "The SQL query correctly calculates the percentage of freight costs from orders shipped to European countries listed. It uses a subquery to calculate the total freight and divides the freight sum for specified countries by this total. The logic is correct.",
            "The original query only considers 'ShipRegion' for grouping and does not account for the possibility that some records may not have a region. To address this, we should consider 'ShipCountry' as well when 'ShipRegion' is NULL, ensuring all orders are included in the analysis. The updated query uses COALESCE to achieve this and groups by the derived 'Market' column.",
            "The original query calculates the total number of orders per customer per month but does not average these counts across the months. To get the average number of orders shipped per customer each month, it\u2019s necessary to divide the total orders by the number of months.",
            "The provided SQL query is correct. It calculates the average shipping time for each region and retrieves the top 3 regions with the highest average shipping times, indicating the slowest times.",
            "The query is correct, assuming the SQL dialect supports DATE_FORMAT and DATEDIFF functions. The aggregation by month and calculation of average fulfillment time is accurate as per the schema and metrics definition.",
            "The provided SQL query is correct. The query correctly uses DATE_TRUNC to group the orders by month and calculates the average shipping cost (Freight) per order for each month. The use of GROUP BY and ORDER BY ensures the results are organized by month.",
            "The query correctly calculates the average fulfillment time per month. However, DATEDIFF function's style may vary between SQL databases. In ANSI SQL, you might need to use a workaround like TIMESTAMPDIFF. If using a specific SQL dialect, ensure DATEDIFF is supported and used correctly. Otherwise, the query is correct as per ANSI standards.",
            "The original query used OrderDate to group by month, but it should use ShippedDate to correctly answer the question regarding shipped orders. Also, added a condition to ensure only shipped orders are counted.",
            "The SQL query correctly calculates the total freight cost per country. It uses SUM to aggregate the Freight column, groups the results by ShipCountry, and orders the results by TotalFreightCost in descending order. The query is correct and matches the business question.",
            "The SQL query is correct and aligned with the business question. It calculates the average time between the order date and the shipping date for each shipping method by using the DATEDIFF function, grouping by ShipVia, and ordering the results by the average time.",
            "The SQL query is correct. It accurately calculates the number of late deliveries per month and returns the month with the highest count by using DATE_TRUNC to group by month, a CASE WHEN statement to count late deliveries, and orders the results in descending order with a limit of 1 to return the required month.",
            "The SQL query correctly calculates the total number of orders shipped to each region. It groups the data by ShipRegion and counts the OrderID for each region. The ORDER BY clause sorts the results in descending order based on TotalOrders. The query is correct.",
            "The original query used DATEADD(year, -1, CURRENT_DATE), which is not ANSI SQL standard. Replaced with CURRENT_DATE - INTERVAL '1 year'.",
            "The SQL query is correct. It calculates the average fulfillment time for orders where the freight cost is greater than the average freight cost. The use of a subquery to find the average freight is appropriate.",
            "The SQL query is correct. It counts the number of orders for each shipping method (ShipVia) and orders the results by the number of orders in descending order.",
            "The provided SQL query is correct. It counts the number of late shipments per city, orders by the highest number, and limits the result to one city, which answers the business question accurately.",
            "The original query did not limit the data to the past six months. I added a WHERE clause to filter orders in the past six months based on the OrderDate.",
            "The original query had an incorrect condition to filter the last quarter's orders. Corrected by adjusting the date range using 'DATE_TRUNC' and 'INTERVAL'.",
            "The query is incorrect due to the use of a subquery with LIMIT in a WHERE clause. ANSI SQL does not support this. Use a CTE or derived table.",
            "The SQL query correctly counts the number of orders per shipping method (ShipVia) for the specified country and returns the one with the highest count. No corrections are needed.",
            "The SQL query correctly calculates the proportion of orders delivered within three days of the order date by using a CASE statement within the COUNT function to filter orders where the difference between ShippedDate and OrderDate is three days or less. The calculation is then converted to a percentage. The query is accurate as per the business question.",
            "The original query incorrectly checks the weekend condition on OrderDate instead of ShippedDate. The correct query evaluates the weekend condition on ShippedDate.",
            "The SQL query correctly calculates the on-time delivery rate by country. It uses a CASE statement within COUNT to determine the number of on-time shipments and divides by the total number of orders per country to compute the percentage, followed by ordering the results in descending order. The query adheres to the schema and metric definitions.",
            "The query incorrectly used OrderDate to determine the month. It should use ShippedDate, as we are analyzing late shipments based on when they were shipped.",
            "The SQL query correctly calculates the average fulfillment time for orders grouped by EmployeeID. The DATEDIFF function provided aligns with ANSI SQL standards.",
            "The SQL query is correct. It calculates the average fulfillment time by region and orders the regions by the longest fulfillment time.",
            "The query assumes 'YourCountry' is a placeholder and the correct country code should be used instead. Ensure the correct country is specified for accurate results. If 'ShipCountry' is meant to be dynamic based on a specific country variable, replace 'YourCountry' accordingly. The logic of the query is otherwise correct.",
            "The original query uses DATE_FORMAT which is not part of ANSI SQL. I've replaced it with TO_CHAR to format the date. Additionally, the GROUP BY should explicitly match the SELECT clause expression.",
            "The function DATE_FORMAT() is not part of ANSI SQL and is specific to certain SQL dialects like MySQL. The logic for grouping and filtering is otherwise correct for determining the monthly average shipping cost over the last year.",
            "The query attempts to count orders using more than one shipping method. However, per standard database normalization, each order typically has a single ShipVia. The query will likely return zero unless the schema or data is non-standard. The query itself is syntactically correct, but the logical premise of more than one shipping method per order should be validated against the business rules and data constraints.",
            "The SQL query correctly calculates the average freight cost for each shipping city by grouping the data by ShipCity and using the AVG(Freight) function. It matches the business question requirements.",
            "The query correctly counts the number of orders fulfilled in less than a week by using DATEDIFF to calculate the difference between ShippedDate and OrderDate.",
            "The SQL query is correct. It calculates the average delivery time for each shipping method by grouping the records based on 'ShipVia' and orders the results in ascending order of the average delivery time.",
            "The original query correctly calculates the ratio of international orders by checking if 'ShipCountry' is not equal to 'YourCountry'. However, to express the result as a percentage, it should multiply the result by 100.0.",
            "The query correctly calculates the average shipping cost and the average delivery speed (fulfillment time) by using AVG on Freight and DATEDIFF between ShippedDate and OrderDate, respectively. However, to understand the relationship, consider further analysis. For example, you might want to segment by different shipping methods or time periods if needed.",
            "The original query was mostly correct, but it's important to handle division by zero with NULLIF to avoid errors. This is added to ensure there are no calculations if COUNT(OrderID) is zero for any month.",
            "The SQL query is almost correct. However, ANSI SQL does not have a DATEDIFF function. You can subtract the dates directly to get the difference in days. Additionally, ensure the dates are cast if needed.",
            "The SQL query correctly calculates the average shipping cost per order by month and orders the results to find the month with the highest average. However, the ANSI SQL equivalent of DATE_TRUNC can be achieved using EXTRACT(YEAR FROM OrderDate), EXTRACT(MONTH FROM OrderDate). The query could be written as: SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY Year, Month ORDER BY AvgShippingCost DESC LIMIT 1;",
            "The original query correctly calculates the percentage of late deliveries, but it should handle division by zero cases using NULLIF to avoid potential errors in months with no orders. The updated query includes this adjustment.",
            "The SQL query correctly sums the Freight column from the orders table to calculate the total freight cost over all orders. The query is accurate and follows the business question appropriately.",
            "The SQL query correctly selects the OrderID and Freight from the orders table, orders them by Freight in descending order, and limits the result to 1. This correctly identifies the order with the maximum freight cost.",
            "The SQL query is correct for the given question. It correctly counts the number of orders for each shipping method using the GROUP BY clause.",
            "The original query does not check if the orders were actually shipped. Adding a condition to filter only the shipped orders by ensuring ShippedDate is not NULL addresses this oversight.",
            "The query correctly calculates the average freight cost for each shipping method by using AVG(Freight) and grouping by ShipVia. The query matches the business question and does not require any corrections.",
            "The original query is mostly correct but must account for the method in which dates are handled. Depending on the SQL dialect, DATE arithmetic might need function calls or casting. The AVG(DATEDIFF(ShippedDate, OrderDate)) assumes availability of DATEDIFF function, which is absent in ANSI SQL. If using a compatible SQL system with functions for date differences, this adjustment to computing the difference might be unnecessary.",
            "The query correctly finds the city with the highest average shipping cost by grouping the data by 'ShipCity', calculating the average 'Freight' cost for each city, and ordering the results in descending order while limiting the output to the top result.",
            "The SQL query correctly identifies orders that were shipped after the required date by filtering records where ShippedDate is greater than RequiredDate. The query accurately retrieves all columns for these orders, which aligns with the business question.",
            "The query is correct and calculates the total freight cost for each country by summing up the 'Freight' column and grouping by 'ShipCountry.'",
            "The provided SQL query is correct. It correctly aggregates the number of orders by ShipRegion using COUNT(OrderID) and GROUP BY ShipRegion.",
            "The provided SQL query is correct and properly calculates the on-time delivery rate using the FILTER clause to count only orders shipped on or before the required date, then divides by the total number of orders.",
            "The original query does not account for the possibility of NULL values in 'ShippedDate' or 'OrderDate', which could lead to incorrect results. The corrected query adds a WHERE clause to filter out orders with NULL 'ShippedDate' and 'OrderDate' to accurately calculate fulfillment time.",
            "The SQL query is correct. It uses a filter to count only the late orders and divides by the total count to calculate the percentage of late deliveries for each region. The use of FILTER is appropriate for this calculation.",
            "The SQL query correctly calculates the median fulfillment time using PERCENTILE_CONT function, which is appropriate for finding the median.",
            "The original query groups by OrderDate, but the question is about shipped orders. The correct column to group by is ShippedDate. Also, it's important to include WHERE ShippedDate IS NOT NULL to exclude orders that haven't been shipped.",
            "The SQL query correctly calculates the on-time delivery rate by country using a CASE statement to count on-time deliveries. The division by COUNT(*) ensures that the rate is calculated as a percentage. The query is accurate and does not require changes.",
            "The provided SQL query correctly calculates the longest order fulfillment time by using the MAX function on the DATEDIFF between ShippedDate and OrderDate, which is the intended measure for fulfillment time. The query is correct and adheres to the task requirements.",
            "The SQL query is correct. It counts shipments where the ShippedDate is later than the RequiredDate for each EmployeeID and filters employees with at least one late shipment using HAVING COUNT(*) > 0.",
            "The SQL query correctly calculates the average freight cost for each shipping method (ShipVia) and returns the one with the highest average. It uses GROUP BY to aggregate the data by shipping method and orders the results by average freight in descending order, limiting the output to one record, which is correct as per the business question.",
            "The original query is mostly correct, but specifying the column explicitly in COUNT(OrderID) ensures that it counts only the rows where an OrderID is present, which is safer if there are any nulls.",
            "The SQL query is correct. It accurately calculates the average fulfillment time grouped by the shipping method using the DATEDIFF function to find the difference between ShippedDate and OrderDate.",
            "The SQL query is mostly correct, but a small improvement is to alias the AVG function for clarity. It calculates the average order fulfillment time for each freight cost, which is appropriate for analyzing if higher freight costs correlate with faster delivery.",
            "The query correctly calculates the distribution of orders by shipping region by counting the number of orders for each ShipRegion. No corrections are needed.",
            "The SQL query correctly selects the count of orders where the ShippedDate is NULL, which indicates pending shipments. The query is correct.",
            "The query correctly calculates the total shipping cost per month using EXTRACT(MONTH FROM OrderDate) and sums the Freight column. It groups results by month and orders by total_shipping_cost in descending order, using LIMIT 1 to identify the month with the highest shipping cost. The query is correct.",
            "The SQL query is correct and accurately calculates the average shipping cost per order grouped by country. The query makes use of the AVG function to determine the average freight cost for each country, which aligns with the business question.",
            "The SQL query correctly selects the shipping method with the shortest average fulfillment time using the DATEDIFF function to calculate the days between ShippedDate and OrderDate. The query groups by ShipVia and orders by the shortest_fulfillment_time in ascending order, retrieving the top one entry. The query is correct as per ANSI SQL standards.",
            "The query correctly calculates the delay rate by month. However, it lacks a filter to limit the analysis to the past year. To fix this, a WHERE clause is added to filter OrderDate to the past year.",
            "Corrected the use of DATE_FORMAT to TO_CHAR for ANSI SQL. The GROUP BY should match the date transformation function used in the SELECT clause.",
            "The SQL query is correct as it accurately calculates the total freight cost for each shipping country by grouping the orders.",
            "The original query uses DATE_FORMAT, which is not part of the ANSI SQL standard. Instead, DATE_TRUNC should be used to truncate dates to the month level. The corrected query properly truncates OrderDate to a monthly granularity and groups by it.",
            "The SQL query is correct. It calculates the percentage of orders delivered on time for each month by comparing the ShippedDate with the RequiredDate and grouping by the month part of the OrderDate.",
            "The original query mistakenly filters for the current year instead of the last year. The corrected query changes the filter to 'YEAR(OrderDate) = YEAR(CURDATE()) - 1' to ensure it is fetching data from the last year.",
            "The query correctly calculates the average order fulfillment time by country. No corrections are needed.",
            "The query attempts to find orders shipped later than their required dates for the last quarter. However, it does not correctly identify the last quarter due to missing year consideration, which might impact correctness around year boundaries. Adjust to consider both year and quarter: SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate AND (YEAR(OrderDate) = YEAR(CURDATE()) OR (YEAR(OrderDate) = YEAR(CURDATE()) - 1 AND QUARTER(CURDATE()) = 1)) AND QUARTER(OrderDate) = QUARTER(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER));",
            "The SQL query is correct. It accurately aggregates the total freight cost for each city by grouping the results based on ShipCity.",
            "The SQL query is correct and aligns with the business question. It correctly calculates the average fulfillment time for orders with a freight cost greater than $50 using the DATEDIFF function.",
            "The original query uses the MySQL-specific function DATE_FORMAT and CURDATE(). In ANSI SQL, you would use EXTRACT(YEAR_MONTH FROM OrderDate) and CURRENT_DATE respectively. If targeting a system that supports DATE_FORMAT, then the provided query would be correct.",
            "The query is correct as it calculates the average freight cost for orders where the shipped date is later than the required date.",
            "The original query incorrectly filters for the current year. To find orders from the last year, 'YEAR(OrderDate) = YEAR(CURDATE()) - 1' should be used instead.",
            "The query assumes 'past year' refers to the current calendar year. If 'past year' refers to the last 12 months from today, revise the query to compare order dates within the last 12 months. Use DATE_SUB and CURDATE to filter accordingly.",
            "The SQL query correctly calculates the longest order fulfillment time by using the DATEDIFF function and finding the maximum difference between ShippedDate and OrderDate.",
            "The query correctly counts the number of on-time shipments for each customer and orders by count in descending order to find the top customer. It is correct.",
            "The SQL query correctly calculates the correlation between freight cost and delivery time. It uses the CORR function to compute the correlation coefficient between Freight and the difference in days between ShippedDate and OrderDate using the DATEDIFF function. No changes are needed.",
            "The query correctly identifies regions with delayed shipments by checking where ShippedDate is greater than RequiredDate. It groups results by ShipRegion and orders them to find the region with the most delays, which is correct as per the question asked.",
            "The SQL query is incorrect. The DAYOFWEEK function returns 1 for Sunday and 7 for Saturday, not 1 and 7 for weekend days. The correct values for the weekend are 1 for Sunday and 7 for Saturday in a SQL standard context, some systems might use 1 as Monday and 7 as Sunday, so verify with the specific SQL server being used.",
            "The SQL query is correct. It calculates the average shipping cost per month by truncating the OrderDate to the month level and grouping the results.",
            "The query correctly computes the average fulfillment time by month, using DATE_TRUNC to group by month and DATEDIFF to calculate the difference between ShippedDate and OrderDate. However, DATE_TRUNC and DATEDIFF functions are not part of the ANSI SQL standard. Use EXTRACT and subtract the dates inside AVG instead. Here is the corrected query: SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(CAST(ShippedDate - OrderDate AS INTEGER)) AS AvgFulfillmentTime FROM orders GROUP BY EXTRACT(YEAR FROM OrderDate), EXTRACT(MONTH FROM OrderDate);",
            "The SQL query correctly identifies the most frequently used shipping company by counting the number of times each 'ShipVia' appears and ordering them by frequency in descending order. Then, it returns the top result. This query is correct for the given question.",
            "The SQL query is correct. It groups the orders by ShipCountry, counts the ShipCountry occurrences, orders the results by ShipmentCount in descending order, and limits the output to the top country with the most shipments.",
            "The SQL query correctly calculates the on-time delivery rate by using a filtered COUNT to count orders shipped on or before the required date, divided by the total order count. The usage of 'FILTER' is valid, assuming the SQL database supports it (common in SQL systems like PostgreSQL). The query groups by 'ShipRegion' and selects the region with the highest rate using 'ORDER BY' and 'LIMIT'. The query is correct for identifying the region with the highest on-time delivery rate.",
            "The query is correct. It calculates the average fulfillment time for each shipping company using the ShipVia identifier and follows the business metric definition for Order Fulfillment Time.",
            "The SQL query is correct as it selects EmployeeID and counts the number of orders processed by each employee, ordering the results in descending order by the count, and limiting the result to the top employee with the most orders.",
            "The query correctly calculates the maximum freight cost from the 'orders' table. It is accurate and follows the business question requirements.",
            "The SQL query is correct. It calculates the average shipping cost per region by grouping orders by the 'ShipRegion' column and computing the average of 'Freight'. The query aligns with the business question of analyzing shipping costs by region.",
            "The original query doesn't account for the year and incorrectly calculates the last month by using the current month's date part. The corrected query now accurately filters orders from the previous month.",
            "The query correctly identifies the city with the least number of orders by grouping the 'orders' table by 'ShipCity', counting the 'OrderID', and ordering the results in ascending order based on 'OrderCount'. It then limits the result to the city with the smallest count, fulfilling the business question accurately.",
            "The SQL query is correct. It calculates the average shipping cost per month, orders by average shipping cost in descending order, and limits the result to the highest average shipping cost.",
            "The original query lacks a filter to only consider orders from the past year. Added a WHERE clause to filter OrderDate to the last year using DATEADD.",
            "The query correctly calculates the average shipping cost for each country by grouping the orders by 'ShipCountry' and applying the AVG function on the 'Freight' column. This aligns with the business question to determine the distribution of shipping costs across different countries. Therefore, the query is accurate and does not contain any mistakes.",
            "The original query did not account for the year when checking for the previous month, which could lead to incorrect results at year boundaries. Adding year comparison ensures accuracy.",
            "The SQL query correctly identifies the shipping method with the highest average cost by grouping the orders by ShipVia, calculating the average Freight for each shipping method, and ordering the results in descending order by average cost, with a limit of 1 to return the highest. The query appears correct and follows the business question accurately.",
            "The original query is almost correct but the GROUP BY clause should match the SELECT clause. It should group by DATE_FORMAT(OrderDate, '%Y-%m') instead of using the alias 'Month'.",
            "The query is correct. It selects the city with the most shipped orders by grouping the orders by 'ShipCity', counting the number of orders per city, and ordering the result in descending order, limiting the result to one city.",
            "The original query used DATE_FORMAT, which is not ANSI SQL. DATE_TRUNC is used to extract the monthly period in ANSI SQL.",
            "The query correctly finds the employee with the highest number of orders by counting the OrderID for each EmployeeID, grouping by EmployeeID, sorting by the count in descending order, and limiting the result to the top one.",
            "The original query does not account for regions with NULL values, which could skew percentage calculations. The corrected query filters out rows where ShipRegion is NULL in both the main COUNT and the subquery COUNT.",
            "The SQL query correctly calculates the average fulfillment time for each customer by using the DATEDIFF function to compute the difference between the ShippedDate and the OrderDate, grouping the results by CustomerID, and then averaging those differences.",
            "The initial query uses DATE_FORMAT, which is not part of standard ANSI SQL. Instead, TO_CHAR is used to format the date in ANSI SQL.",
            "The original query is mostly correct, but using an alias like 'Month' in the GROUP BY clause might lead to errors in some SQL databases. It's better to repeat the DATE_FORMAT function directly in the GROUP BY clause.",
            "The SQL query correctly addresses the business question. It counts the number of orders grouped by the shipment city, which matches the requirement. The query is accurate and in compliance with the specified schema.",
            "The SQL query is correct. It calculates the average freight cost for each shipping method and returns the one with the lowest average cost.",
            "The SQL query is correct and matches the business question.",
            "The SQL query correctly computes the correlation between the order fulfillment time and the shipping cost using the CORR function on DATEDIFF(ShippedDate, OrderDate) and Freight from the orders table. The syntax and logic align with the question and metric definitions.",
            "The SQL query is correct. It calculates the average order fulfillment time for each country by using the DATEDIFF function to determine the difference between the ShippedDate and OrderDate, then groups the results by ShipCountry and orders them in ascending order by AvgFulfillmentTime.",
            "The SQL query correctly calculates the on-time delivery rate by dividing the count of orders shipped on time by the total count of orders for each region. The result is then multiplied by 100 to convert it to a percentage. The query groups the results by ShipRegion and orders them by OnTimeDeliveryRate in descending order, limiting the output to the top three regions. The query is correctly formulated.",
            "The original query has a small mistake with the date formatting function DATE_FORMAT, which is not part of ANSI SQL. Replaced with TO_CHAR and applied CAST to ensure proper decimal division.",
            "The SQL query accurately calculates the average cost for each shipping method (ShipVia) and orders by descending average cost to find the highest. It uses a LIMIT 1 clause to return only the shipping company with the highest average cost, which is correct as per the business question.",
            "The SQL query correctly calculates the total freight cost for each customer by grouping the data by CustomerID and summing the Freight column. It is accurate and meets the business question requirements.",
            "The SQL query correctly retrieves the EmployeeID of the employee who processed the most orders. It uses COUNT(OrderID) and groups by EmployeeID, ordering by OrderCount in descending order and limits the result to only one entry. The query is correct.",
            "The original SQL query uses DATE_FORMAT, which is not ANSI SQL standard. The correct function to use is TO_CHAR for formatting dates in the 'YYYY-MM' format.",
            "The query is correct. It selects the ShipCountry and counts the number of OrderID per country, which answers the question accurately.",
            "The SQL query is correct for the given question. It correctly groups the orders by ShipCity, counts the number of OrderIDs for each city, orders the results by the number of shipments in descending order, and limits the results to the top 5 cities.",
            "The SQL query is correct. It calculates the difference in days between the 'ShippedDate' and the 'OrderDate' and filters the orders where this difference is greater than 7.",
            "The SQL query correctly calculates the average order processing time by employee by grouping the data based on EmployeeID and using the DATEDIFF function to determine the processing time between OrderDate and ShippedDate.",
            "The SQL query is correct. It calculates the time it took for each order to ship and sorts the results in descending order of shipping time, returning the order with the longest shipping time.",
            "The query calculates the percentage of orders with Freight over $100. The multiplication by 100.0 ensures a floating-point division for a percentage.",
            "The SQL query is correct. It counts the number of orders per region and orders the result by shipment count in descending order.",
            "The query should filter orders from the past year, which was missing in the original query. I added a WHERE clause to restrict the OrderDate to the past year.",
            "The SQL query is correct and accurately answers the business question by counting the number of orders for each shipping method using GROUP BY ShipVia.",
            "The SQL query correctly computes the average shipment time for each shipping region. It uses DATEDIFF to calculate the difference between the ShippedDate and OrderDate, and groups results by ShipRegion to find the average for each region.",
            "The SQL query correctly answers the business question by extracting year and month from OrderDate and calculating the average freight per month. The query uses the correct aggregation functions and grouping to provide the monthly breakdown as required.",
            "The original query had an incorrect DATEDIFF function syntax. ANSI SQL uses DATEDIFF with only two arguments: the end date followed by the start date.",
            "The SQL query is correct. It correctly calculates the average freight cost for each shipping company (ShipVia) and orders the results in descending order to find the highest average shipping cost.",
            "The SQL query is correct. It correctly counts the number of orders for each month by using the EXTRACT function to separate the year and month components from the OrderDate. It groups the results by Year and Month, which aligns with the business question.",
            "The provided SQL query correctly addresses the business question by selecting the average freight cost (`AVG(Freight)`) where the `ShippedDate` is greater than the `RequiredDate`.",
            "The SQL query correctly identifies the employee who has handled the most shipments by counting the number of orders associated with each EmployeeID and ordering them in descending order to find the highest count. The query is accurate and requires no changes.",
            "The SQL query is correct for calculating the average shipping cost per order aggregated by year and month using OrderDate.",
            "The query is correct. It calculates the on-time delivery rate per month by counting the orders where the ShippedDate is on or before the RequiredDate and dividing by the total number of orders, then multiplying by 100 to get a percentage.",
            "The SQL query is correct and accurately calculates the average fulfillment time per month.",
            "The original query correctly extracts the year and month from the OrderDate and counts the usages by ShipVia. However, the ORDER BY clause should prioritize sorting first by Year and Month, and then by UsageCount in descending order to identify the most commonly used method per month. The corrected query reflects this ordering.",
            "The SQL query is correct. It groups the total freight cost by year and month, which matches the business question's requirement to calculate the total freight cost incurred each month.",
            "The original query was mostly correct. However, when using EXTRACT(), you must ensure that the 'GROUP BY' clause matches the 'SELECT' fields. Here, EXTRACT(YEAR FROM OrderDate) and EXTRACT(MONTH FROM OrderDate) should be used in the 'GROUP BY' clause explicitly.",
            "The original query inaccurately determines the last quarter by subtracting 3 months from the current date, which may not always align with the start of a quarter. The corrected query uses DATE_TRUNC to capture the start of the last quarter accurately.",
            "The SQL query is correct. It correctly calculates the average fulfillment time for each shipping method by grouping the data by 'ShipVia' and using the DATEDIFF function to find the difference between 'ShippedDate' and 'OrderDate'.",
            "The original query calculated the late delivery rate, aiming to identify the lowest, which is the opposite of the business question. The revised query computes the on-time delivery rate correctly and orders it in ascending order to find the region with the lowest rate.",
            "The original query used OrderDate instead of ShippedDate. To find out how many orders were shipped, it should group by the ShippedDate.",
            "The SQL query correctly extracts the year and month from OrderDate, groups by year, month, and ShipCountry to calculate the average freight per country each month. It aligns with the question and the schema definition.",
            "The original query correctly calculates the on-time delivery rate for each shipping company but had an issue with the date range. Changed 'OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)' to 'YEAR(OrderDate) = YEAR(CURDATE()) - 1' to filter for the last year.",
            "The query correctly calculates the average freight (shipping cost) for each shipping region, matching the business question related to the distribution of shipping costs across regions. The SQL syntax and logic align with the need to group by regions and compute the average freight cost, so there are no errors to correct.",
            "The SQL query correctly counts orders shipped after their required date during November, December, or January. The use of MONTH(OrderDate) to identify holiday season months is accurate. The WHERE clause correctly filters for orders shipped after their required date.",
            "The SQL query correctly calculates the total freight cost per customer and retrieves the customer with the highest total freight cost. No corrections needed.",
            "The query correctly counts the number of orders per month and orders the results by year and month. However, it doesn't calculate the month-over-month growth. To calculate growth, you'd typically compare the current month's OrderCount with the previous month's OrderCount.",
            "The SQL query correctly calculates the percentage of orders with a shipping cost greater than $100. It uses a subquery to get the total number of orders and divides the count of orders with Freight over 100 by this total, multiplying by 100 to get a percentage.",
            "The SQL query is correct if Germany, France, and the UK are considered part of 'Europe' for the business context. The query correctly calculates the variance of freight costs for orders shipped to these countries using the VARIANCE function.",
            "The query is correct. It counts the number of orders where 'ShippedDate' is NULL, indicating potential delays.",
            "The SQL query incorrectly interprets 'last month' as including the current month. It should only include the full previous month. The correct SQL query should be: SELECT AVG(Freight) FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 month' AND OrderDate < DATE_TRUNC('month', CURRENT_DATE);",
            "The SQL query correctly calculates the percentage of on-time deliveries for the current month using the FILTER clause. It does this by filtering orders where the ShippedDate is less than or equal to the RequiredDate, dividing by the total number of orders placed this month. The use of DATE_TRUNC to find the start of the current month is also correct.",
            "The SQL query is almost correct but it should also ensure that only shipped orders are considered by including a condition to check ShippedDate is not NULL. Additionally, the function `DATEDIFF` should be used according to the system being used. In standard SQL, date subtraction can be achieved with simple subtraction if the system supports it. An example correct query is: SELECT AVG(CAST(ShippedDate - OrderDate AS INTERVAL)) FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) AND ShippedDate IS NOT NULL;",
            "The SQL query correctly selects the shipping method (ShipVia) with the lowest average freight cost by grouping the orders and ordering them by the average freight cost in ascending order. The use of LIMIT 1 ensures that only the shipping method with the lowest average cost is returned. The query is correct and adheres to the business question.",
            "The original query uses a FILTER clause that is not supported in all database systems following the ANSI SQL standard. It has been corrected to use a CASE statement within the COUNT function to achieve the desired result.",
            "The original query does not filter data for the past year. Added a WHERE clause to ensure only orders from the past year are considered.",
            "The original query needed an additional condition to ensure that orders are only counted for the previous month by excluding the current month's dates. The WHERE clause should include a condition to check that ShippedDate is less than the start of the current month to properly filter to the last month.",
            "The original query used a FILTER clause which is not a part of the standard SQL. Instead, the WHERE clause should be used to filter orders delivered on time before aggregation. The corrected query uses WHERE to filter and then counts the on-time orders for each employee correctly.",
            "The SQL query correctly calculates the correlation between freight cost and order fulfillment time. It uses the CORR function to find the correlation coefficient between the Freight column and the difference between ShippedDate and OrderDate.",
            "The SQL query is correct. It groups by 'ShipRegion' and calculates the average 'Freight' cost, aligning with the business question of comparing average shipping costs across regions.",
            "The original query incorrectly uses OrderDate instead of ShippedDate. To determine the busiest shipping month, the query needs to group by the month of the ShippedDate. Additionally, it's important to exclude orders where ShippedDate is NULL to ensure only shipped orders are counted.",
            "The original query incorrectly uses the FILTER clause instead of a WHERE clause within the COUNT function. It should use WHERE to filter out only delayed shipments before counting them.",
            "The SQL query is correct. It selects the count of orders where the Freight cost is greater than the average Freight cost for the same shipping method, which matches the business question.",
            "The query is correct. It calculates the median fulfillment time for orders shipped to each country using the PERCENTILE_CONT function, which is appropriate for obtaining the median in SQL.",
            "The SQL query is generally correct in logic for finding the highest average delay, given the assumption that 'ShipVia' represents the shipping company. It correctly averages the delay where 'ShippedDate' is greater than 'RequiredDate', groups by 'ShipVia', and returns the shipping company with the highest delay. If further clarification on 'ShipVia' is needed, or any joins are required to identify the shipping company, these should be considered.",
            "The SQL query correctly calculates the average shipping cost for orders where the required delivery time is 3 days or less. The use of DATEDIFF with RequiredDate and OrderDate is appropriate for determining quick deliveries.",
            "The SQL query correctly calculates the on-time delivery rate by dividing the count of on-time orders by the total count of orders, grouping by ShipCity and ShipRegion. The use of the FILTER clause is correct for conditional aggregation.",
            "The SQL query is correct as it accurately calculates the percentage of orders shipped within two days by using a FILTER clause with DATEDIFF and performs division to get the percentage.",
            "The query incorrectly defines the date range for the past quarter. It should sum the Freight for the entire past quarter, not just the previous three months. Correcting the query to accurately compute the total freight cost for the last completed quarter is necessary.",
            "The query calculates the standard deviation of the difference between the 'ShippedDate' and 'RequiredDate' to determine irregular delivery times. This approach is valid for assessing variability. However, consider using 'OrderDate' instead of 'RequiredDate' for evaluating variations from when the order is placed. If the goal is to measure delivery variability against the required delivery timeline then this query is correct.",
            "The SQL query is correct and accurately retrieves the number of orders shipped with each shipping method.",
            "The SQL query correctly calculates the number of orders shipped to each city and orders them in descending order to identify the city with the most orders. It uses LIMIT 1 to select the top city, aligning perfectly with the business question.",
            "Corrected the query to use ShippedDate instead of OrderDate to match the question.",
            "The SQL query is correct. It calculates the average time taken to fulfill orders specifically shipped to the USA by using the DATEDIFF function to find the difference between the ShippedDate and OrderDate and then averaging these differences.",
            "The initial query is almost correct, but the GROUP BY clause should match the SELECT clause's alias or expression. Changed GROUP BY Month to GROUP BY DATE_TRUNC('month', OrderDate).",
            "The query is correct. It selects the CustomerID and counts the number of OrderIDs, groups the data by CustomerID, and orders the results by OrderCount in descending order, limiting the output to 1 to find the customer with the most orders.",
            "The provided SQL query correctly calculates the average number of days between the order date and the required date using the DATEDIFF function. No corrections are needed.",
            "The SQL query is correct. It accurately counts the number of orders that have been placed but not yet shipped by checking for NULL values in the ShippedDate column.",
            "The SQL query is correct. It accurately calculates the average shipping cost for each region by grouping the data on 'ShipRegion' and computing the average of 'Freight' for each group.",
            "The original SQL query is correct. It accurately counts the number of orders where the difference between the ShippedDate and RequiredDate is greater than 7 days, which aligns with the business question.",
            "The original query filters based on 'OrderDate' instead of 'ShippedDate'. Corrected the query to use 'ShippedDate' for December shipments.",
            "The SQL query correctly counts the number of orders where the shipping country is Germany. It matches the business question as the 'ShipCountry' in the 'orders' table is used to filter orders shipped to Germany.",
            "The SQL query correctly calculates the average shipping cost per employee by grouping the records in the orders table by EmployeeID and then taking the average of the Freight column. The query matches the business question.",
            "The SQL query correctly calculates the percentage of orders delivered on or before the required date each month by using the DATE_TRUNC function to group by month and the FILTER clause to count only the on-time deliveries.",
            "The SQL query is correct. It uses a filtered COUNT to compute the on-time delivery rate per shipping method, orders by this rate in descending order, and limits the result to the top shipping method.",
            "The SQL query correctly calculates the total freight cost for each shipping country by using SUM on the Freight column and grouping by ShipCountry. No corrections are needed.",
            "The SQL query correctly calculates the average freight cost per city, groups by ShipCity, and orders the result to find the city with the highest average freight cost. The use of LIMIT 1 ensures that only the city with the highest average is returned. No corrections needed.",
            "The original query grouped by 'OrderDate' instead of 'ShippedDate', which does not accurately reflect the number of orders shipped per month. Additionally, orders without a 'ShippedDate' (null values) should be excluded to accurately count shipped orders.",
            "The query is mostly correct, but `DATEDIFF` syntax in ANSI SQL does not include a 'DAY' parameter. The correct syntax is: DATEDIFF(end_date, start_date). Adjusted the function accordingly.",
            "The SQL query is correct. It calculates the number of on-time deliveries for each employee and returns the one with the highest count.",
            "The SQL query is correct. It groups the orders by 'ShipVia' where 'ShippedDate' is greater than 'RequiredDate' (indicative of late delivery), counts the occurrences for each shipping method, orders by descending count to find the most common method, and limits the result to the top one entry.",
            "The SQL query is correct and accurately answers the business question using the orders table to filter by ShipCountry 'USA' and then calculating the minimum, maximum, and average freight costs.",
            "The SQL query is correct. It checks for orders where the ShippedDate is before the OrderDate, indicating a potential data error.",
            "The query correctly calculates the variance of shipping costs by region using the VARIANCE function and groups by ShipRegion. This matches the business question.",
            "The SQL query is correct and accurately counts the number of orders where the ShippedDate is NULL, indicating they have not yet been shipped.",
            "The original query is mostly correct, but 'DATEDIFF' function in ANSI SQL does not require the 'DAY' parameter as the difference is inherently in days. The corrected query omits this parameter.",
            "The SQL query correctly retrieves the shipping method with the highest total freight cost by grouping the data by 'ShipVia' and summing the 'Freight'. It then orders the results in descending order based on the total freight cost and limits the result to the top entry. The query is correct.",
            "The SQL query is correct. It selects the ShipName and the count of OrderID occurrences grouped by ShipName, orders them by frequency in descending order, and limits the result to the top one.",
            "The SQL query correctly calculates the percentage of orders with a shipping address in the 'California' region by using a filtered COUNT. The query is correctly structured and follows ANSI SQL standards.",
            "The original query incorrectly tries to group by the alias 'Weekday'. It should group by TO_CHAR(ShippedDate, 'Day') instead.",
            "The original query is mostly correct, but the GROUP BY clause should explicitly use DATE_TRUNC('week', OrderDate) for consistency.",
            "The SQL query is correct. It selects the OrderID from the orders table where the ShippedDate is later than the RequiredDate, which answers the question accurately.",
            "The original query lacks precision in division, which could lead to integer division causing incorrect results. It's corrected by using a decimal for the division.",
            "The original query incorrectly filters records based on the current year. To get the data for the last year, we need to subtract one from the current year.",
            "The query correctly calculates the average order fulfillment time grouped by ShipVia using the DATEDIFF function. This is aligned with the business metric definition for order fulfillment time.",
            "The original query uses OrderDate instead of ShippedDate to determine the month, which may not accurately reflect the shipping activity for that month. Updated to use ShippedDate.",
            "The SQL query is correct and aligns with the business question. It calculates the total freight cost for orders shipped to the specified country by aggregating the 'Freight' column for records where the 'ShipCountry' matches 'Specific Country'. The query appropriately groups the results by 'ShipCountry'.",
            "The query is mostly correct. However, the use of DATE_FORMAT with the WHERE clause relies on non-standard SQL functions. If sticking to ANSI SQL, consider using EXTRACT or an equivalent method, or ensure the database supports these functions. The logic is correct for determining the employee managing the most orders last month.",
            "The original query incorrectly uses OrderDate for determining the month of shipment. It should use ShippedDate to accurately reflect when orders were actually shipped. Additionally, a WHERE clause is used to ensure ShippedDate is not NULL to count only shipped orders.",
            "The original query was almost correct but reversed the dates in the DATEDIFF function. It should be 'ShippedDate - RequiredDate' to correctly calculate the delay for late shipments.",
            "The SQL query correctly calculates the average freight cost per shipping region, orders the results in descending order, and limits the output to the top result. No changes are needed.",
            "The query aims to calculate the variance of the shipping cost for each month in the last quarter. However, the use of 'BETWEEN' with 'CURDATE() - INTERVAL 3 MONTH' is incorrect because it includes the current date range incorrectly. The corrected interval checks 'OrderDate' using '>=' for starting and '<' for ending to accurately capture the last 3 months. GROUP BY Month to group results by month based on 'OrderDate'.",
            "The original query checks for the current year rather than the last year from today. The corrected query filters orders to those placed in the last 365 days using the 'INTERVAL 1 YEAR' with the 'CURDATE()' function.",
            "The SQL query correctly calculates the average shipping cost per country by grouping the data by 'ShipCountry' and finding the average 'Freight' for each group. The query aligns with the business question as specified and meets the requirements of calculating the average shipping cost per country.",
            "The SQL query is correct. It calculates the average fulfillment time for each shipping method and retrieves the one with the shortest average. The use of GROUP BY, AVG, and ORDER BY is appropriate.",
            "The SQL query is correct. It selects the ShipCity and counts the number of orders for each city, then orders the results in descending order to find the city with the most orders, limiting the result to the top one.",
            "The original query incorrectly calculates the date range for the last quarter. It should determine the correct quarter of the current date minus three months, rather than simply using an interval of three months.",
            "The SQL query correctly calculates the average number of days between the order date and shipping date for each employee. It properly uses the DATEDIFF function and groups by EmployeeID.",
            "The original query calculates the on-time delivery rate incorrectly and uses the current year instead of the last year. The COUNT in the original query was missing the partitioning for on-time deliveries, and the filtering was set to the current year. The revised query correctly calculates the count of on-time deliveries per country for the last year.",
            "The SQL query correctly counts the number of orders with a shipping cost greater than $100 using COUNT(OrderID) with the condition WHERE Freight > 100. The query is correct.",
            "The SQL query correctly calculates the average order fulfillment time by city using the DATEDIFF function. It groups the results by ShipCity and orders them in descending order to find the city with the highest average fulfillment time, limiting the result to the top entry. The query is correct.",
            "The SQL query is correct. It selects the OrderID from the 'orders' table, orders the results by 'Freight' in ascending order, and limits the results to show only the first entry, which is the order with the lowest freight cost.",
            "The SQL query is correct and should return the employee who handled the most orders in the previous year by counting the orders for each EmployeeID, grouping them, and then ordering in descending order of OrdersHandled.",
            "The query does not correctly calculate the percentage of orders shipped to a different country. It checks if 'ShipCountry' is not empty but doesn't compare it with the origin country (assuming origin country is a given, but not part of provided schema). Check if there's an 'OriginCountry' or similar field and compare 'ShipCountry' to it. Here's the correct query assuming such a column called 'OriginCountry': SELECT COUNT(CASE WHEN ShipCountry != OriginCountry THEN 1 END) * 100.0 / COUNT(OrderID) AS Percentage FROM orders; Modify based on actual origin country column if available in your schema.",
            "The SQL query correctly answers the business question by counting the number of orders where the ShippedDate is greater than the RequiredDate.",
            "The SQL query correctly answers the business question. It calculates the total freight cost for each shipping company per year by grouping the records based on ShipVia and the year of the OrderDate. The SUM function aggregates the freight cost as required.",
            "The SQL query is correct. It selects the shipping recipient with the most orders by counting the OrderID and grouping by ShipName, then orders the results by OrderCount in descending order and limits the result to 1.",
            "The query is correct. It calculates the average time taken to fulfill an order for each shipping method by grouping by 'ShipVia' and using the 'DATEDIFF' function to find the difference between 'ShippedDate' and 'OrderDate'.",
            "The SQL query correctly calculates the average shipping time per country and selects the country with the fastest average. No corrections needed.",
            "The query is correct in fetching the month with the most delayed shipments by counting orders where the ShippedDate is after the RequiredDate, grouping by month, and ordering by the count of delayed shipments in descending order, returning the top result.",
            "The SQL query is correct and accurately retrieves the highest freight cost from the orders table.",
            "The SQL query correctly retrieves the number of orders handled by each employee for each year. The use of YEAR(OrderDate) and GROUP BY is appropriate for the question. No corrections needed.",
            "The SQL query is correct. It correctly calculates the total freight cost for each shipping method by grouping the data based on the 'ShipVia' column and summing the 'Freight' values.",
            "The SQL query correctly calculates the percentage of orders shipped after the required date by using a CASE statement to count late shipments and dividing by the total number of orders. It is accurate and matches the business question.",
            "The SQL query is correct. It correctly aggregates the number of orders by month, orders them in descending order by the number of shipments, and limits the result to the peak month.",
            "The SQL query correctly calculates the average fulfillment time for orders shipped after the required date using the DATEDIFF function to find the fulfillment time for each order.",
            "The SQL query is correct for the given business question. It selects the EmployeeID and counts the number of orders (OrderID) each employee is responsible for, grouping by EmployeeID to summarize the data per employee, as intended by the question.",
            "The SQL query correctly calculates the total freight cost per month and orders the results to select the month with the highest freight cost. It uses DATE_TRUNC to group by month, which is appropriate for the given task. No changes are needed.",
            "The query correctly identifies the country with the most orders by grouping orders by ShipCountry, counting them, and sorting the result in descending order to limit the output to the top result.",
            "The SQL query is correct. It calculates the average freight cost for orders shipped to each country by grouping the results by 'ShipCountry' and using AVG(Freight).",
            "The SQL query is correct and effectively finds the fastest shipping method by calculating the average fulfillment time per shipping method, ordering them in ascending order, and limiting the result to the fastest one.",
            "The SQL query correctly uses the COUNT(DISTINCT ShipName) function to calculate the number of unique shipping recipients in the 'orders' table. The query is accurate and aligned with the business question.",
            "The provided SQL query correctly counts the number of shipments per recipient (ShipName) and orders the results to get the recipient with the highest number of shipments. The use of GROUP BY, ORDER BY, and LIMIT 1 is appropriate for this task.",
            "The SQL query correctly computes the average order fulfillment time (difference between ShippedDate and OrderDate) grouped by ShipRegion. This aligns with the business question of analyzing the distribution across different regions. It uses the DATEDIFF function correctly and applies the group by clause on ShipRegion.",
            "The query is correct. It calculates the average freight cost per month, which aligns with the metric 'Shipping Cost per Order' with monthly granularity. The use of DATE_TRUNC to group by month is appropriate for identifying trends over time.",
            "The SQL query is mostly correct, but for clarity and uniformity, the GROUP BY should use the same expression as the SELECT clause to ensure consistent grouping.",
            "The SQL query is correct for the given question. It calculates the average freight cost grouped by the shipping method and orders the result to find the method with the lowest average cost.",
            "The SQL query correctly calculates the total freight cost for each country by grouping the results by ShipCountry and summing the Freight values. The query is correct and aligns with the business question.",
            "The SQL query correctly calculates the average number of days from order date to ship date for each city by using the DATEDIFF function and grouping the results by ShipCity. The query is correct.",
            "The original query does not filter the orders to the last year. The modified query includes a filter for OrderDate to be within the last year using a date interval.",
            "The SQL query correctly calculates the top 5 customers by order count, grouped and ordered accordingly. It accurately uses GROUP BY, ORDER BY, and LIMIT. No corrections are necessary.",
            "The query correctly calculates the average freight cost per region and returns the region with the highest average shipping cost. The SQL query is accurate and does not require any changes.",
            "The SQL query correctly counts the number of orders fulfilled within two days of the order date by using the DATEDIFF function to calculate the difference between the shipped date and order date, and compares it to 2.",
            "The SQL query is correct and follows the ANSI SQL standard. It correctly groups the records by ShipAddress, counts the number of deliveries for each address, and then orders the results in descending order by DeliveryCount to return the top 3 addresses.",
            "The SQL query is correct and accurately counts the number of orders shipped to a postal code starting with 'XYZ'.",
            "The query is mostly correct, but DATE_FORMAT is not ANSI SQL. Use EXTRACT(YEAR FROM OrderDate) and EXTRACT(MONTH FROM OrderDate) instead to conform to ANSI SQL standards.",
            "The original query uses DATE_FORMAT which is not ANSI SQL standard. Instead, EXTRACT is used to get the year and month. The query groups by both year and month to correctly calculate the monthly averages.",
            "The original query is almost correct. It uses integer division, which can potentially lead to incorrect results if not careful. By multiplying the numerator by 1.0, we ensure that the division is performed as a floating-point operation, which provides a more accurate percentage calculation.",
            "The SQL query correctly calculates the average order fulfillment time by region, as required by the business question. The syntax is correct, and it accurately uses the DATEDIFF function and GROUP BY clause to achieve the desired result.",
            "The query is correct for calculating the average shipping cost per month in 2023. The use of TO_CHAR to format the date and EXTRACT to filter by year is appropriate.",
            "The SQL query is almost correct but the WHERE clause should filter by ShippedDate instead of OrderDate to ensure we are evaluating the correct month of actual deliveries. The corrected query now filters orders shipped in January 2023.",
            "The SQL query is correct. It extracts the year and quarter from the OrderDate, groups by ShipVia, counts the orders, and orders the result to return the shipping method used most frequently in Q1 of 2023.",
            "The original query uses OrderDate, but it should use ShippedDate to reflect the actual shipping month for calculating the freight.",
            "The SQL query correctly calculates the average shipping cost per order per month by extracting the year and month from the 'OrderDate' and grouping by these. The use of 'AVG(Freight)' is appropriate for the metric definition.",
            "The original query extracts the year and month from OrderDate instead of ShippedDate. It should use ShippedDate for proper grouping by the month of shipment.",
            "The SQL query is mostly correct, but 'DATEDIFF' may not directly work in some SQL environments following standard ANSI SQL. Instead, the correct approach is to use 'ShippedDate - OrderDate'. Here is the revised query: SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(CAST(ShippedDate - OrderDate AS INTEGER)) AS AvgFulfillmentTime FROM orders GROUP BY Year, Month;",
            "The SQL query is correct. It calculates the total freight cost for each shipping method by grouping the data by 'ShipVia' and summing the 'Freight' values, which aligns with the business question.",
            "The SQL query correctly answers the business question by calculating the total freight cost for each customer, ordering the results in descending order of total freight cost, and selecting the top customer with the highest total.",
            "The provided SQL query correctly calculates the average shipping cost per order for each month and orders the results in descending order to find the highest average. It correctly uses the EXTRACT function to get the year and month and applies GROUP BY to aggregate the monthly averages. The LIMIT 1 clause ensures only the month with the highest average is returned.",
            "The SQL query correctly selects the city that received the most shipments by counting the number of orders per city, grouping by the ShipCity, and ordering the result in descending order by the count of shipments. It limits the result to 1 to get the city with the highest shipment count. The query is correct.",
            "The query is correct. It calculates the total number of orders and total freight per employee by grouping the results by EmployeeID.",
            "The original query incorrectly calculates the number of delayed orders. It should count orders where ShippedDate is greater than RequiredDate. The correction involves only counting cases where ShippedDate > RequiredDate.",
            "The query correctly calculates the average shipping cost per order for each country by using AVG(Freight) and grouping by ShipCountry. It aligns with the business question and the provided schema.",
            "The SQL query is almost correct, but there is a small adjustment needed. The correct function for computing the difference between dates in ANSI SQL is using DATEDIFF with the unit of difference specified. Here we specify 'DAY' to get the correct median calculation.",
            "The SQL query is correct. It calculates the average order fulfillment time per customer, orders them by the fastest times, and limits the results to the top three customers.",
            "The SQL query is correct. It counts the number of orders where the ShippedDate is NULL, which answers the question accurately.",
            "The original SQL query assumes a fixed value for 'Domestic'. You need to replace 'Domestic' with an actual country name such as 'USA'. Adjust the case statement to use the correct condition based on the business logic for identifying domestic orders.",
            "The query is correct. It groups the orders by ShipRegion and counts the number of orders for each region, then orders the results by the order volume in descending order, and limits the output to the region with the highest order volume.",
            "The original query correctly counts the orders delivered on or before the required date, but divides this count by the total number of OrderIDs without considering integer division, which can result in truncation to an integer percentage. By multiplying the result by 100.0, the division becomes floating-point, ensuring the percentage is accurate.",
            "The query correctly calculates the average shipping cost per shipping method (ShipVia) and orders the results to find the one with the highest average. However, to more accurately reflect 'which company', assuming ShipVia is mapped to specific companies elsewhere, a join might be necessary if a corresponding table exists to map ShipVia to company names.",
            "The SQL query is correct as it calculates the average order fulfillment time for each shipping region by grouping the results by ShipRegion and using the AVG() function on the DATEDIFF between ShippedDate and OrderDate.",
            "The query correctly calculates the monthly count of late orders by comparing ShippedDate with RequiredDate. DATE_FORMAT usage is correct, but GROUP BY should exactly match the select statement to avoid ambiguity.",
            "The SQL query correctly answers the business question by calculating the average shipping cost per order for each ShipCountry using the AVG function and grouping results by ShipCountry. No corrections are needed.",
            "The SQL query correctly answers the question by counting orders with ShippedDate later than RequiredDate, grouping by EmployeeID, ordering by the count in descending order, and limiting the result to the top one.",
            "The original query incorrectly uses the OrderDate to determine orders shipped within the last quarter, and it uses the non-standard NOW() function and interval syntax. Instead, use DATE_TRUNC to get the start of the current quarter and subtract 3 months to cover the last quarter, checking against ShippedDate.",
            "The query incorrectly calculates the delay based on the difference between ShippedDate and OrderDate. It should compare the difference between ShippedDate and RequiredDate to determine shipping delays. Correct query: SELECT COUNT(OrderID) AS LongDelays FROM orders WHERE DATEDIFF(ShippedDate, RequiredDate) > 5;",
            "The SQL query correctly calculates the average time difference between the order date and required date using the DATEDIFF function. It selects the average of the differences and names the result as AvgOrderToRequiredDiff, which is accurate for the business question provided.",
            "The query calculates the On-time Delivery Rate correctly using a CASE statement to count on-time deliveries and divides by the total orders. Multiplication by 1.0 is added to ensure the division yields a decimal result. The ORDER BY clause correctly orders the countries by OnTimeRate in ascending order, and LIMIT 1 ensures only the country with the lowest rate is returned.",
            "The query calculates the maximum shipping delay by taking the difference between 'ShippedDate' and 'RequiredDate'. However, the logic should capture delays as positive values, so the calculation needs to consider when 'ShippedDate' is later than 'RequiredDate'. The correct query should be SELECT MAX(DATEDIFF(ShippedDate, RequiredDate)) AS MaxDelay FROM orders WHERE ShippedDate > RequiredDate;",
            "The SQL query correctly counts the number of orders where the freight cost is zero. The query is accurate and follows the required syntax.",
            "The SQL query is correct. It calculates the correlation between the shipping cost (Freight) and delivery time (calculated using DATEDIFF on ShippedDate and OrderDate). The usage of the CORR function is appropriate for this analysis.",
            "The original query incorrectly used MIN with AVG, which is not valid. The corrected query calculates the average fulfillment time per month and then retrieves the month with the shortest average fulfillment time by ordering by the average and limiting to one result.",
            "The query correctly calculates the percentage of on-time deliveries by comparing ShippedDate and RequiredDate, but the filtering condition is incorrect. It should filter based on ShippedDate in the last month, not OrderDate.",
            "The SQL query is mostly correct but requires a slight modification to comply with ANSI SQL. Replace 'CURRENT_DATE - INTERVAL '1 year'' with 'CURRENT_DATE - INTERVAL 1 YEAR' to ensure correct syntax. Here's the corrected query: SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE OrderDate >= CURRENT_DATE - INTERVAL 1 YEAR;",
            "There is an error in the original query with the date calculation for the last quarter. It should use DATE_TRUNC to correctly calculate the start of the current quarter before subtracting 3 months.",
            "The original query used TO_CHAR to extract the year, which is not part of ANSI SQL. The corrected query uses EXTRACT to retrieve the year from the date fields.",
            "The SQL query is mostly correct. However, usage of `TO_CHAR` and `INTERVAL` depends on the SQL dialect and may not be ANSI SQL compliant. In ANSI SQL, it would be better to calculate dates using `DATEADD` and `FORMAT`. Here's how the query could look in ANSI SQL:\n\nSELECT EmployeeID, COUNT(*) AS OrderCount \nFROM orders \nWHERE FORMAT(OrderDate, 'yyyy-MM') = FORMAT(CURRENT_DATE + INTERVAL '-1' MONTH, 'yyyy-MM') \nGROUP BY EmployeeID \nORDER BY OrderCount DESC \nLIMIT 1;",
            "The SQL query is almost correct, but INTERVAL '1 year' subtraction from CURRENT_DATE doesn't ensure it's within the entire previous year. Using DATE_TRUNC with interval adjustment is more reliable.",
            "Corrected the date extraction logic. Used EXTRACT(YEAR FROM date) instead of TO_CHAR for better compatibility with ANSI SQL.",
            "The query incorrectly uses 'CompanyCountry' as a placeholder string. It should be replaced with the actual country name of the company. The rest of the query is correct if the field represents the correct company country.",
            "The query correctly calculates the average shipping cost by each shipping method using the AVG function on the Freight column and grouping by ShipVia. It aligns with the business question and the metric definition of 'Shipping Cost per Order.' The query is correct and requires no changes.",
            "The original query uses TO_CHAR to extract the year, which may not be supported in all SQL dialects as per the ANSI SQL standard. It's corrected to use EXTRACT(YEAR FROM OrderDate).",
            "The original query uses TO_CHAR for date comparison, which is not standard in ANSI SQL. Instead, EXTRACT is used to compare year and month parts.",
            "Corrected SQL query to use DATE_ADD and EXTRACT for quarter comparison to align with standard SQL.",
            "The original query incorrectly used TO_CHAR for extracting the year, which may not be supported in every SQL implementation. Using EXTRACT(YEAR FROM OrderDate) provides a more consistent approach according to the ANSI SQL standard.",
            "The query correctly fetches the distribution of freight costs for orders in the 'North' region by grouping the results by 'Freight' and counting them. No changes are needed.",
            "The original query used 'WHERE ShipCountry = 'CompanyCountry' - ShipCountry != 'CompanyCountry'' which is incorrect syntax for comparing and differentiating between domestic and international shipments. Additionally, the use of a minus sign doesn't serve the intended logic. The correct way is to use a conditional statement to distinguish domestic shipments from international ones using a CASE or directly in SELECT statement, then group and calculate the average fulfillment time for each group.",
            "The original query does not filter for the last year. Changed TO_CHAR to EXTRACT and adjusted year calculation. Added ORDER BY and LIMIT to find the highest average shipping cost shipping company.",
            "The SQL query is incorrect because the ANSI SQL standard does not support the CORR function or TO_CHAR function for date formatting. These are specific to certain database systems like PostgreSQL. Instead, you can use alternative methods supported by standard SQL.",
            "The original SQL query is mostly correct, but it uses the TO_CHAR function which is not part of the ANSI SQL standard for extracting the year. Instead, using the YEAR function to get the year from the OrderDate and CURRENT_DATE is recommended.",
            "The SQL query correctly selects the maximum, minimum, and average freight costs for orders shipped to France, Germany, and Italy, which are part of Europe. If additional European countries need to be considered, they should be added to the IN clause.",
            "The original query correctly calculates the percentage of orders shipped on time. However, it's important to ensure that the division for the percentage is done using a float by multiplying by 100.0 to avoid integer division issues.",
            "The query is correct. It accurately counts the number of orders for each shipping method by grouping the results based on the `ShipVia` column.",
            "The SQL query correctly identifies orders where the shipping date is after the required date. No changes are needed.",
            "The query correctly calculates the average order fulfillment time by country using the DATEDIFF function and grouping by ShipCountry.",
            "The SQL query correctly calculates the number of late shipments by counting orders where ShippedDate is later than RequiredDate. The results are grouped by month extracted from OrderDate, which aligns with the business question.",
            "The SQL query is correct. It calculates the average freight cost for each shipping method and returns the one with the lowest cost.",
            "The query incorrectly uses DATE_FORMAT, which is not part of standard SQL. Instead, use EXTRACT or a combination of YEAR and MONTH functions for compliance with ANSI SQL. The corrected query is: SELECT EXTRACT(YEAR FROM OrderDate) AS OrderYear, EXTRACT(MONTH FROM OrderDate) AS OrderMonth, VARIANCE(Freight) AS FreightVariance FROM orders GROUP BY OrderYear, OrderMonth;",
            "The SQL query is correct and retrieves the top 5 orders based on the highest freight costs by ordering the orders in descending order of Freight and using LIMIT 5.",
            "The original query multiplies by 100 after the integer division, which could lead to zero results. To fix this, multiply by 100.0 to ensure floating-point division and correct percentage calculation.",
            "The SQL query correctly counts the number of orders for each customer and orders the results in descending order of the number of orders. No corrections needed.",
            "The SQL query correctly calculates the longest time taken to fulfill an order by using the MAX function on the difference between the ShippedDate and OrderDate.",
            "The original query's subquery is incorrect because it compares OrderID to itself and doesn't ensure that orders are placed and shipped within the same city. For this question, each order has its shipping address recorded in the orders table, so we just need to count all orders that have a non-null ShipCity.",
            "The SQL query is correct. It calculates the average delay for late shipments by finding the difference between the shipped date and the required date for orders that are shipped late.",
            "The query is correct and matches the business question. It calculates the average fulfillment time for each employee using the appropriate formula with grouping by EmployeeID.",
            "Correct SQL query. It calculates the average shipping cost per order for January 2023 by filtering orders placed within this date range.",
            "Replaced incorrect WHERE clause within COUNT() with a CASE WHEN statement to correctly count on-time deliveries.",
            "The SQL query is almost correct, but to accurately calculate the average fulfillment time for orders that were shipped in April 2023, the `ShippedDate` should also be considered. The corrected query should ensure that `ShippedDate` is within April 2023, as follows: SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE ShippedDate BETWEEN '2023-04-01' AND '2023-04-30';",
            "The original query uses GETDATE(), which is not part of ANSI SQL. Replaced GETDATE() with CURRENT_DATE for standard compliance.",
            "The original query incorrectly calculates the on-time delivery rate by reversing the division. The correct formula is to divide the number of on-time orders by the total number of orders. Additionally, the date filter needed correction to cover the entire previous quarter from the start to the end.",
            "The original query uses DATEADD and GETDATE(), which are not part of ANSI SQL standard. These have been replaced with CURRENT_DATE and simple arithmetic to extract the year.",
            "The original query used DATEADD and GETDATE, which are not standard SQL functions. Replaced with DATE_TRUNC and CURRENT_DATE for ANSI SQL compliance.",
            "The SQL query correctly calculates the average shipping cost per country and orders the results to show the country with the highest average shipping cost. The use of LIMIT 1 ensures only the top country is returned. The query aligns with the business question and the provided schema.",
            "The original query used non-ANSI functions DATEADD and GETDATE. Replaced with ANSI SQL standard CURRENT_DATE and simple subtraction for year calculation. Used FETCH FIRST 1 ROWS ONLY to limit the result to one row.",
            "The SQL query is correct. It accurately counts the number of orders where 'ShippedDate' is NULL, indicating orders that have been placed but not yet shipped.",
            "The SQL query is correct. It properly uses the MAX function to find the highest freight cost from the 'orders' table.",
            "The original query used GETDATE(), which is not ANSI SQL standard. I replaced it with CURRENT_DATE. Additionally, LIMIT 1 is not ANSI standard, so I used FETCH FIRST 1 ROW ONLY for limiting the results.",
            "The original query used non-ANSI function GETDATE() and did not correctly filter the last year range. I've corrected it by using CURRENT_DATE and filtering for the past year properly.",
            "The original query incorrectly filters by the order date instead of the shipped date. It should check if the shipped date falls within the current month and year.",
            "The original query uses `DATEADD(QUARTER, -1, GETDATE())`, which is not ANSI SQL standard. Replaced it with `DATE_TRUNC('quarter', CURRENT_DATE)`. This ensures the query calculates the current quarter correctly.",
            "The original query is mostly correct, but the DATEDIFF function needs the correct syntax. It should specify the 'day' as the first argument. Also, CURRENT_DATE is more standard than GETDATE() in ANSI SQL.",
            "The query correctly finds the shipping method (ShipVia) for the order with the largest delay by ordering the differences between ShippedDate and RequiredDate in descending order and limiting the result to one. The query is correct as per the given business question.",
            "The original query uses GETDATE(), which is not standard ANSI SQL. It should be replaced with CURRENT_DATE. The use of DATEADD with QUARTER might not be supported in some systems; a more ANSI-compatible way would involve calculating the start date of the last quarter.",
            "The original query uses DATE_FORMAT and GETDATE(), which are not ANSI SQL functions. Corrected it using TO_CHAR for date formatting and CURRENT_DATE to get today's date per ANSI SQL standards.",
            "The original query is almost correct, but GETDATE() is specific to SQL Server. For ANSI SQL, CURRENT_DATE should be used instead.",
            "The original query had the numerator and denominator reversed in the calculation. The numerator should be the count of orders with Freight > 100, and the denominator should be the total count of orders to get the correct percentage. Additionally, CURRENT_DATE is used for ANSI SQL to get the current date.",
            "The SQL query is correct. It calculates the average fulfillment time by using the DATEDIFF function on ShippedDate and OrderDate, groups the results by EmployeeID, orders the results by average fulfillment time in ascending order, and limits the output to the top 3 employees.",
            "The SQL query correctly calculates the total freight cost for each shipping company by grouping by 'ShipVia'. It sums up the 'Freight' for each shipping method, which aligns with the given question.",
            "The query correctly calculates the average order fulfillment time per city by using DATEDIFF to find the time difference between ShippedDate and OrderDate, grouping by ShipCity, and ordering the results in ascending order to find the fastest. There are no issues with the logic or syntax. The query is correct.",
            "The query correctly groups the distribution of freight costs by shipping method. No changes are necessary.",
            "The SQL query is correct and provides the percentage of orders shipped to each country by dividing the count of orders per country by the total count of orders across all countries. The use of COUNT(OrderID) * 100.0 ensures a floating-point division, which correctly calculates the percentage.",
            "The SQL query is correct. It selects the EmployeeID with the highest average shipping cost per order by calculating the average of the Freight column, grouping by EmployeeID, and ordering the result in descending order before limiting the output to the top result.",
            "The original query does not filter orders from the last year. Added a WHERE clause to include only orders placed in the last year.",
            "The original query uses OrderDate instead of ShippedDate for monthly grouping, which may not reflect actual shipping. Replaced DATE_FORMAT with EXTRACT to ensure ANSI SQL compliance. Added WHERE clause to exclude orders not yet shipped.",
            "The SQL query is correct. It accurately counts the number of orders where the ShippedDate is null, indicating they have not been shipped.",
            "The query correctly calculates the monthly variance of shipping costs using the function 'VARIANCE'. This aligns with the business question and the schema provided. Ensure that the SQL syntax matches the database in use, as 'DATE_FORMAT' might vary across databases.",
            "The query correctly calculates the on-time delivery rate for each ShipRegion, and orders the regions to find the one with the highest rate. The use of CASE WHEN with COUNT to calculate the on-time deliveries is accurate. The LIMIT 1 clause ensures that only the region with the most on-time deliveries is returned. The query is correct.",
            "The SQL query is correct. It calculates the average number of days for late shipments by using DATEDIFF between ShippedDate and RequiredDate where ShippedDate is greater than RequiredDate.",
            "The SQL query is correct. It calculates the average shipping time by year, utilizing the DATEDIFF function to find the time difference between the ShippedDate and OrderDate for each order.",
            "The SQL query calculates the average shipping cost per month correctly, but this averages each month across all years. To ensure it aggregates costs monthly by year, we should include the year in the grouping. The correct query should be: SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY EXTRACT(YEAR FROM OrderDate), EXTRACT(MONTH FROM OrderDate);",
            "The original query attempted to use the FILTER clause, but it did not cast the filtered count to a float before division. By using '::float' on the result of the FILTER, the division will work correctly by returning a floating-point number.",
            "The SQL query is correct as it calculates the total shipping cost for each shipping method by summing up the 'Freight' column and grouping the results by 'ShipVia'.",
            "The SQL query is correct. It calculates the average shipping cost per city by grouping the results by the ShipCity column and applying the AVG function to the Freight column.",
            "The query correctly extracts the month from the ShippedDate, counts the number of late shipments, and orders the results to find the month with the highest number. The query is correct as it stands.",
            "The original query uses the FILTER clause incorrectly. Rewriting it using a CASE statement makes the calculation clear in most SQL implementations. The division should ensure we use a float to avoid integer division issues.",
            "The SQL query is correct for the given question. It calculates the average delivery time by region, using the DATEDIFF function to find the difference between the 'ShippedDate' and 'OrderDate'. The results are grouped by 'ShipRegion', which matches the requirement to analyze delivery times across different regions.",
            "The SQL query is correct in extracting the month from OrderDate and calculating the average freight cost per month. However, to capture changes over different years as well, it may be helpful to extract both year and month. Here's the revised query:\n\nSELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY EXTRACT(YEAR FROM OrderDate), EXTRACT(MONTH FROM OrderDate);",
            "The query should count orders strictly shipped before the required date, not on or before. Change <= to < to ensure only those shipped before the required date are counted.",
            "The SQL query provided is correct and accurately calculates the total freight cost per region by using the SUM function and grouping results by ShipRegion.",
            "The SQL query is correct. It calculates the average delivery time for each shipping method (ShipVia) and orders the results in ascending order of average delivery time, returning the top record. However, ensure that the ShipVia corresponds directly to a shipping company, otherwise a join with a separate shipping companies table might be necessary for precise company names.",
            "The SQL query correctly calculates the average number of days taken to ship an order after the required date using the DATEDIFF function constrained to orders where ShippedDate is later than RequiredDate. It accurately answers the business question as posed.",
            "The original query is almost correct, but it uses COUNT with a FILTER clause. I corrected it to wrap the FILTER inside COUNT correctly.",
            "The SQL query correctly identifies the employee linked to the most orders by counting the number of orders per EmployeeID and then ordering by that count in descending order. However, if multiple employees have the same highest number of orders, only one will be returned. If you want all employees with the highest count, consider removing the LIMIT clause and handling ties, possibly using a subquery or a different approach.",
            "The SQL query is correct. It appropriately selects the ShipCountry and counts the number of orders per country, grouping by ShipCountry and ordering the results by OrderCount in descending order.",
            "The SQL query is correct and follows the schema and metric definitions. It calculates the average freight cost per month over the past year by grouping by month.",
            "The query uses DATE_PART which is not standard ANSI SQL. The correct function to calculate the difference between two dates in days is typically DATEDIFF, but ANSI SQL uses direct subtraction for dates. Since ANSI SQL doesn't have a DATEDIFF function, systems like PostgreSQL or MySQL would directly perform date subtraction to get the interval between two dates. Please ensure compatibility with your specific SQL implementation.",
            "The SQL query correctly calculates the on-time delivery rate for each region using the FILTER clause, which is appropriate for the ANSI SQL standard. The logic of counting orders delivered on or before the required date and dividing by the total count of orders is correctly implemented, and the grouping by 'ShipRegion' is accurate for the intended comparison. No corrections needed.",
            "The query is mostly correct, but the use of DATE_PART is not necessary. Ensure a direct subtraction of dates is supported by your SQL database. If not, date functions like DATEDIFF or equivalent should be used. For ANSI SQL, TIMESTAMPDIFF could be considered if applicable.",
            "The SQL query correctly selects the top three cities with the highest number of orders by counting OrderIDs, grouping by ShipCity, and ordering the results in descending order by OrderCount. The use of LIMIT 3 accurately restricts the result to the top three.",
            "The query correctly groups orders by `ShipVia` and counts the number of orders for each shipping method, ordering the result by the count in descending order. It properly addresses the business question.",
            "The SQL query correctly finds the customer with the highest average shipping cost by averaging the 'Freight' column and ordering the results in descending order by that average. The use of 'LIMIT 1' ensures that only the top customer is returned. The query is accurate and correct as per the given business question.",
            "The query is mostly correct, but 'DATE_PART' function is not standard ANSI SQL. Instead, the DATEDIFF function can be used to calculate the difference in days. Here's the corrected query: SELECT ShipRegion, AVG(DATEDIFF(day, OrderDate, ShippedDate)) AS AvgShipTime FROM orders GROUP BY ShipRegion;"
        ],
        "difficulty": [
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "easy",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "easy",
            "easy",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced"
        ]
    },
    "Inventory Management": {
        "questions": [
            "What are the products that need to be reordered immediately based on their reorder levels?",
            "Which products have been discontinued but still have stock available?",
            "Find the total sales for each product category.",
            "What is the Inventory Turnover Ratio for each product last month?",
            "Which products have the highest sales performance this year?",
            "How many units were sold for each product last quarter?",
            "Identify suppliers with the most products below the reorder level.",
            "Calculate the total revenue generated from orders, including discounts.",
            "List the top 5 products with the highest stock levels.",
            "Determine the average unit price for products in each category.",
            "Find the products that have not been ordered in the past 6 months.",
            "What is the total quantity ordered for each supplier last month?",
            "Identify the products that are both discontinued and below the reorder level.",
            "Calculate the year-to-date average stock levels for each product category.",
            "What is the average discount applied across all orders?",
            "Determine the most frequently ordered product this year.",
            "Identify products with zero units in stock but pending orders.",
            "Calculate the Product Performance for each product over the last year.",
            "Find products with the highest discrepancy between units in stock and units on order.",
            "List the products with a unit price greater than the average for their category.",
            "What is the total number of units in stock for each product category?",
            "Which products have a unit price greater than the average unit price of all products?",
            "Identify products that need to be reordered based on their reorder level.",
            "Calculate the Inventory Turnover Ratio for the previous month.",
            "What is the total sales amount per product, including applicable discounts?",
            "List products with the highest total sales value.",
            "Which suppliers provide products that are currently discontinued?",
            "What are the top 5 products based on sales quantity in the last quarter?",
            "Find the difference between units on order and units in stock for each product.",
            "Determine the average discount given to products per month.",
            "Which products have been ordered more than 100 times?",
            "What is the relationship between unit price and sales quantities?",
            "Identify months when inventory turnover was below target.",
            "Find products with units in stock less than the reorder level.",
            "Which products have not been ordered in the past six months?",
            "Calculate the contribution of each product category to total sales.",
            "List all products with a reorder point higher than their units in stock.",
            "Identify products with a declining trend in sales over the past year.",
            "What is the average quantity per order for each product category?",
            "Which product categories have the highest average unit price?",
            "What are the total sales for each product in the last month?",
            "Which products need to be reordered and who are their suppliers?",
            "What is the average discount provided on products in order history?",
            "How many products are currently being discontinued?",
            "Which suppliers provide the most products?",
            "What is the sales trend for each category over the past year?",
            "Identify products with the highest turnover rate last quarter.",
            "What are the top five best-selling products this year?",
            "How many units of each product are currently on order?",
            "What is the average units in stock for all products?",
            "Which products have sales exceeding their reorder levels?",
            "What is the overall inventory turnover ratio for the company?",
            "Which products have the largest difference between units in stock and units on order?",
            "How does the stock level of products change month over month?",
            "Calculate the total revenue generated by top three suppliers.",
            "Which products had the highest discount applied last month?",
            "What is the average unit price of products in each category?",
            "Which discontinued products have pending orders?",
            "Find low-performing products based on sales and stock levels.",
            "What is the most common quantity per unit across all products?",
            "What is the total unit price for each product that is currently discontinued?",
            "Which products have inventory levels below their reorder point?",
            "What is the average discount applied on each product in order details?",
            "List all products with zero units in stock and not on order.",
            "Which products have the highest turnover rate on a monthly basis?",
            "What are the top 5 performing products in terms of quantity sold?",
            "How many products are ordered but not yet delivered?",
            "Find the products with the highest price variation between stock and order.",
            "What is the total quantity of all products sold in the last month?",
            "Which suppliers provide the most products that are currently not discontinued?",
            "Calculate the overall inventory turnover ratio.",
            "List all products with more units on order than in stock.",
            "Which product categories have the highest aggregate sales?",
            "What is the total revenue generated from all products?",
            "Find products with the highest unit price to average discount ratio.",
            "Identify suppliers who provide more than 10 different discontinued products.",
            "How does the average price of products relate to their sales performance?",
            "Which specific products need to be reordered immediately?",
            "Calculate the total value of the current inventory for each product.",
            "List the products with the most significant differences between units in stock and reorder levels.",
            "What is the total inventory value for each product?",
            "Which products need to be reordered based on the reorder level?",
            "What is the average discount given on products?",
            "How many products have been discontinued?",
            "What is the monthly inventory turnover ratio?",
            "Which product categories have the highest inventory levels?",
            "What is the total revenue generated from each product?",
            "Which suppliers are providing the most expensive products?",
            "What is the total quantity of products sold each month?",
            "Identify the top-performing products based on sales.",
            "Calculate the average unit price of products sold.",
            "Find products with inventory levels below a specific threshold.",
            "Which orders include products that are currently out of stock?",
            "What is the total number of different products sold to date?",
            "Determine the effect of discounts on total sales revenue.",
            "Identify suppliers who have products that are frequently reordered.",
            "Calculate the average time between reordering and restocking.",
            "Which products have the highest reorder levels?",
            "How does the inventory turnover ratio compare across suppliers?",
            "What are the top 5 products with the highest inventory turnover ratio this month?",
            "Which suppliers provide the most products that are currently low in stock?",
            "What is the total revenue generated from orders last month?",
            "List all products that are discontinued but still have units in stock.",
            "Which product categories have the highest total sales revenue?",
            "Identify products due for reorder based on their reorder level and current stock.",
            "What is the average discount applied to orders per supplier?",
            "How many units of each product were sold last quarter?",
            "Find suppliers with the lowest product prices.",
            "What is the total number of discontinued products?",
            "Determine the product with the highest sales revenue to date.",
            "Show the most popular product based on quantity sold.",
            "Which products have yet to be ordered this year?",
            "What percentage of products are currently on order?",
            "Identify trends in product sales over the last year using monthly data.",
            "Which products exceeded the reorder point most frequently this year?",
            "What is the most ordered product category this year?",
            "How many orders have been placed with more than 20% discount?",
            "Calculate the average inventory level for each product category.",
            "What is the net profit margin for each product type?",
            "What is the average unit price of products from each supplier?",
            "Which products have stock levels below the reorder level?",
            "Calculate the total value of products currently in stock.",
            "Identify the top 5 products with the highest sales revenue.",
            "Determine the products that have not been sold at all.",
            "Find out how many units are currently on order for discontinued products.",
            "Which categories have the highest number of discontinued products?",
            "Calculate the Inventory Turnover Ratio for each month.",
            "List suppliers with more than three discontinued products.",
            "Identify products with the highest discount offered historically.",
            "What is the total sales revenue per category in the last month?",
            "Calculate the average discount received on product sales.",
            "Find the most frequently ordered product.",
            "Calculate the difference between units in stock and units on order for each product.",
            "Which month had the highest Inventory Turnover Ratio?",
            "Identify products that have been reordered more than twice their reorder level.",
            "Find the average inventory level for products in each category.",
            "Determine the total number of products that are overstocked.",
            "Identify the product with the highest performance metric based on sales.",
            "Find the proportion of discontinued products to total products available.",
            "What is the total number of units on order for each product category?",
            "Which products have less stock than their reorder level?",
            "What is the average unit price of products by supplier?",
            "Which products have the highest inventory turnover ratio?",
            "What is the total sales revenue for each product?",
            "Which products have the highest sales quantity this month?",
            "What is the total discount given for each product?",
            "What is the total number of products in stock by category?",
            "Which suppliers provide products that are currently reordered the most?",
            "What is the difference between units in stock and reorder level for each product?",
            "How many products have a stock level higher than their reorder level?",
            "What is the total value of current inventory for each supplier?",
            "What is the daily average quantity ordered for discontinued products?",
            "Which categories have the highest sales revenue?",
            "What is the average discount offered across all products?",
            "Which products have not been ordered in the last month?",
            "What is the most ordered product by quantity?",
            "How frequently is each product ordered?",
            "Which product category has the most units on order?",
            "What are the top 5 products with the highest inventory turnover ratio?",
            "Which products are below their reorder level and need immediate restocking?",
            "How many units of discontinued products are still in stock?",
            "What is the total revenue generated by each supplier?",
            "Which category of products has the highest average unit price?",
            "What is the total discount given on all orders?",
            "List products that have never been ordered.",
            "Identify products with more units on order than in stock.",
            "Which month had the highest sales in quantity?",
            "Find the top 3 products with the most significant increase in order quantities month-over-month.",
            "How many unique products have been ordered in the last year?",
            "Determine the average reorder level by category.",
            "What is the total value of all products currently in stock?",
            "List the top 10 best-selling products by sales revenue.",
            "What is the total number of discontinued products by category?",
            "Which supplier provides the most variety of products?",
            "Calculate the total sales amount for each product, considering discounts.",
            "Which products have a decreasing trend in sales over the last six months?",
            "Identify any orders with an unusually high discount (more than 50%).",
            "What percentage of products are discontinued?",
            "What is the total value of products currently in stock?",
            "Which products need to be reordered, and how many units are necessary to reach the reorder level?",
            "Find the top 5 products by sales revenue.",
            "How many products are currently discontinued?",
            "What are the total sales by supplier?",
            "Which category of products generates the most revenue?",
            "What is the average discount given on orders?",
            "Identify the product with the highest inventory turnover ratio.",
            "Which products have never been ordered?",
            "How many units of each product are on order?",
            "Find products with a sales decline over the past three months.",
            "Calculate the average unit price of all products across categories.",
            "Which products have been ordered but are now discontinued?",
            "What is the total number of units sold for each product?",
            "Find the percentage of total sales for each product.",
            "Which suppliers provide more than 1000 units of products currently in stock?",
            "How many products have never been reordered?",
            "Find the difference between units in stock and reorder level for each product.",
            "Which products have an inventory turnover ratio greater than the average ratio?",
            "What is the correlation between product price and units sold?",
            "What are the total sales for each product this month?",
            "Which products have stock levels below their reorder points?",
            "Identify the top 5 products by sales quantity.",
            "Calculate the average inventory turnover ratio for the last three months.",
            "List products that are discontinued but still have stock remaining.",
            "What is the total revenue for products that are not discontinued?",
            "Find the products with the highest discounts applied.",
            "How many products have never been ordered?",
            "Get the supplier details for products with the lowest units in stock.",
            "What is the average discount given per order?",
            "Identify products with above-average sales performance.",
            "Compute the difference in units between stock and order for each product.",
            "Which categories have the most products at reorder level?",
            "List products with a price higher than the average price of all products.",
            "Find the ratio of on-order units to in-stock units per product.",
            "Determine which products have not been ordered in the past six months.",
            "Calculate the total number of units sold for non-discontinued products.",
            "What is the total value of inventory currently in stock?",
            "Find out which products have been ordered with a discount greater than 20%.",
            "Which products have a unit price lower than their category's average unit price?",
            "What is the total inventory value across all products?",
            "Which products are currently below their reorder level?",
            "What is the average price of products per supplier?",
            "How many discontinued products do we have?",
            "What is the inventory turnover ratio for the last month?",
            "Which products have the highest sales volume?",
            "What is the average discount offered on products?",
            "How many units are currently on order for each product?",
            "What is the total revenue generated by each product category?",
            "What is the monthly trend in sales for each product?",
            "What is the average units in stock for each category?",
            "Which products have the lowest sales performance?",
            "What is the relationship between unit price and sales quantity?",
            "How many products need to be reordered within the next month?",
            "What is the effect of discount on product sales?",
            "What is the [Order Details] table's contribution to the total revenue?",
            "What is the monthly revenue growth rate?",
            "What are the names and stock levels of products that need to be reordered?",
            "What is the total inventory value based on the current stock levels?",
            "Which products have more units on order than units in stock?",
            "What is the inventory turnover ratio for the current month?",
            "List the top 5 best-selling products based on quantity ordered.",
            "What is the average reorder level across all products?",
            "Find discontinued products that still have units in stock.",
            "Calculate the total discounts given on all orders.",
            "Identify products that need to be reordered (units in stock are below reorder level).",
            "What is the performance of products in terms of sales quantity for the current month?",
            "Which category has the highest number of discontinued products?",
            "Determine the most frequently applied discount rate.",
            "What is the most expensive product sold?",
            "Analyze the correlation between product price and the number of orders received.",
            "Which product has the highest stock-to-order ratio?",
            "Find the average unit price of discontinued products.",
            "How many products have stock levels equal to their reorder levels?",
            "What is the average quantity per unit for products that are not discontinued?",
            "Identify the top 3 suppliers based on the number of products supplied.",
            "What is the total inventory value for each product category?",
            "Which products need to be reordered based on their current stock and reorder level?",
            "How many units and which products have been sold the most this month?",
            "What is the average discount provided on products sold?",
            "Which supplier provides the most products?",
            "What is the total revenue generated by each product?",
            "Identify the top 5 products by sales revenue.",
            "Compare the inventory turnover ratio between various products.",
            "Which product category has the highest average unit price?",
            "What is the percentage of discontinued products?",
            "What is the average order value?",
            "Find the products with the highest and lowest Unit Prices and their associated stock levels.",
            "How has the inventory turnover ratio trended over the past six months?",
            "Which product generates the highest profit margin?",
            "Identify any products with no current orders.",
            "What is the distribution of discounts provided across different product categories?",
            "Calculate the overall product performance score using a composite measure of sales and inventory levels.",
            "What are the average units in stock for each supplier?",
            "How many products fall below their reorder level across all categories?",
            "What are the top 5 products based on sales quantity?",
            "Calculate the inventory turnover ratio for the last month.",
            "Identify the most frequently ordered product and its total order quantity.",
            "What is the average discount given on products in the last quarter?",
            "List all suppliers and the count of products they supply.",
            "Determine the total revenue from discontinued products.",
            "Find the product with the highest unit price and its supplier.",
            "How many products have more units on order than in stock?",
            "What percentage of products are currently discontinued?",
            "Calculate the total discounted amount given across all products.",
            "Identify all products that have never been ordered.",
            "Which supplier provides the most products that are currently in stock?",
            "What is the total quantity of products sold this year?",
            "Find the product with the largest discrepancy between units in stock and on order.",
            "List the products ordered last month that are now discontinued.",
            "How many distinct categories are in the products table?",
            "Which orders had the highest total discount applied?",
            "Determine the average units in stock for products, grouped by category.",
            "What are the total sales for each product?",
            "Which products have stock levels below their reorder level?",
            "Which suppliers provide the most different products?",
            "What is the total revenue for each category of products?",
            "How many discontinued products are there?",
            "What are the top 5 best-selling products by quantity?",
            "What is the overall discount given for each product?",
            "Which products have not been ordered yet?",
            "How many units are on order for each product?",
            "What is the average discount percentage given on orders?",
            "What is the performance of each product in terms of sales?",
            "How does the stock level compare to the reorder level for each product?",
            "Which products have the highest quantities on order?",
            "Calculate the total number of units sold per supplier.",
            "Identify products with low performance based on sales.",
            "How many products have a unit price above the average?",
            "What are the monthly sales for each product?",
            "Which category has the highest number of products on order?",
            "What are the product names with less stock than their reorder level?",
            "Which products are discontinued?",
            "What is the average unit price of products per supplier?",
            "Which products have a stock level below their reorder level?",
            "Which products have the highest number of units on order?",
            "What's the average discount applied to product orders?",
            "What is the total inventory turnover ratio on a monthly basis?",
            "Which product categories have the highest inventory turnover ratio?",
            "Identify products that are both in stock and on order.",
            "What's the performance of each product based on sales quantity this month?",
            "Which products have a discount greater than 0.2 applied?",
            "Find the total number of products ordered per category.",
            "What is the revenue contribution of each supplier?",
            "Which products have not reached their reorder level but are discontinued?",
            "Calculate the total order quantity for each product over the past year.",
            "Which products are being ordered at a rate that suggests they should be reordered?",
            "Identify any correlation between unit prices and discounts on products.",
            "Which products have inventory levels below their reorder level?",
            "Identify products that have not been reordered despite low stock levels.",
            "List the top 5 products by sales quantity.",
            "Find all products that are currently discontinued.",
            "Calculate the average discount given on all products.",
            "Determine the total sales value by category.",
            "What are the product names with zero units in stock?",
            "Identify the products with the highest and lowest unit price.",
            "How many products are there in each category?",
            "What is the total sales quantity for products that are discontinued?",
            "Calculate the stock optimization efficiency by comparing units in stock and units on order.",
            "What is the monthly trend in product performance?",
            "Find the relationship between unit price and sales quantity.",
            "Which products have the highest reorder level?",
            "What is the average units on order for each supplier?",
            "Identify seasonal trends in orders for products.",
            "What are the top 5 products that have the highest inventory turnover ratio?",
            "Which products are below their reorder level and need to be restocked?",
            "What is the total value of the current inventory for each category?",
            "Identify discontinued products that still have units in stock.",
            "What is the average discount applied to products in the order details?",
            "Which suppliers provide the most expensive products on average?",
            "How does the product performance vary by category on a monthly basis?",
            "What are the top-selling products based on total sales in the last month?",
            "Which products have the highest units on order but are still in stock?",
            "Determine the product with the lowest unit price that is not discontinued.",
            "Calculate monthly revenue generated from products sold at a discount.",
            "Find the average units ordered per product per order in the last year.",
            "Identify products that have never been ordered.",
            "Which products have a high quantity per unit but low turnover ratio?",
            "What is the ratio of discontinued to active products in stock?",
            "Calculate the total sales revenue for each supplier for the last quarter.",
            "Which products have the highest reorder level and are currently low in stock?",
            "Find products with unusually high discounts applied to them.",
            "Identify the trend of inventory turnover ratio over the past six months.",
            "How many products are currently at or above their reorder level?",
            "What is the current total inventory value?",
            "Which products are low on stock and need to be reordered?",
            "What is the monthly inventory turnover ratio for each product?",
            "Identify the top 5 best-selling products based on order quantity.",
            "List all products supplied by a specific supplier.",
            "Calculate the average discount given on orders involving a specific product.",
            "Find the total sales revenue generated by products in a specific category.",
            "How many discontinued products are still in stock?",
            "Identify products that have both low units in stock and high units on order.",
            "What is the total number of units ordered for all products in the last month?",
            "Which products have exceeded their reorder level?",
            "Find out the suppliers that provide the most variety of products.",
            "Determine the effect of discount on total sales revenue.",
            "Analyze the monthly sales trend for a particular product.",
            "Which categories have the highest average unit price?",
            "Identify the correlation between product price and reorder level.",
            "Calculate the contribution of each category to total sales.",
            "Which product had the highest inventory turnover ratio last month?",
            "Find the percentage of discontinued products in inventory.",
            "What are the names and prices of all discontinued products?",
            "What are the top 5 products with the highest unit price?",
            "Which products have less than 10 units in stock and need reordering?",
            "How many discontinued products are currently in the inventory?",
            "What is the average discount applied across all order details?",
            "Which supplier provides the most expensive product?",
            "List all the products that have never been ordered.",
            "Find the product with the highest inventory turnover ratio.",
            "Which category of products has the highest units on order?",
            "What is the total inventory value for all products that are not discontinued?",
            "Identify products where reorder levels need to be increased, based on current stock.",
            "How many orders include more than 100 units of products?",
            "Which supplier has the most products that are discontinued?",
            "What is the most frequently ordered product?",
            "Determine the product with the best performance based on sales.",
            "What is the total number of units ordered for each product with a discount greater than 10%?",
            "Analyze the sales trend for products over the last quarter.",
            "Which products have sales exceeding $5000?",
            "How does the stock level correlate with the order quantity for each product?",
            "What is the inventory turnover ratio for each product?",
            "What is the average unit price of products per category?",
            "Identify the top 5 products with the highest sales quantities.",
            "Calculate the total discount given on all products.",
            "List products with no current stock and no orders.",
            "Determine the average reorder level for each category.",
            "How many products have a stock higher than their reorder level?",
            "Find products that have been heavily discounted (more than 20%).",
            "What's the total value of the current stock for each product?",
            "Identify the products with the most stock variability (highest fluctuation).",
            "How often are products reordered compared to their reorder level?",
            "Determine the category with the highest number of discontinued products.",
            "What is the sales performance of products grouped by supplier?",
            "Calculate the monthly product performance over the past year.",
            "What is the financial impact of discounts on total sales?",
            "What is the current stock level for each product?",
            "Which products have the highest turnover rates?",
            "What are the top 5 performing products based on sales quantity?",
            "How many products are discontinued?",
            "What is the average discount given on products across all orders?",
            "How many units are on order for each product category?",
            "What products have never been sold?",
            "What percentage of products are below reorder level?",
            "How does the average price of products vary by category?",
            "What is the reorder level distribution across all products?",
            "Which products have been ordered with a discount?",
            "What is the product with the highest unit price currently in stock?",
            "What was the total quantity of products ordered last month?",
            "How many orders included at least one product with a discount?",
            "What is the average turnover ratio across all products?",
            "Which product categories have the most units in stock?",
            "List all products that have stock levels below their reorder level.",
            "Identify the average order quantity for discontinued products.",
            "Find the total revenue generated by each category based on sales.",
            "Which suppliers provide products that are currently out of stock?",
            "Calculate the inventory turnover ratio for the current month.",
            "Determine the product with the highest sales quantity in the last month.",
            "How many products have a discount applied in their orders?",
            "Find products that have never been ordered.",
            "Identify the products with a reorder level higher than 10 and currently discontinued.",
            "What is the average unit price of orders with more than 100 units?",
            "How many active products have stock quantities between their reorder level and maximum?",
            "Calculate the monthly product performance for each product.",
            "Find the total number of units ordered per supplier.",
            "List all products with a unit price greater than the average unit price of all products.",
            "Find the percentage of discontinued products in relation to total products.",
            "What is the average quantity ordered per product category in the last quarter?",
            "What is the total number of units of each product currently in stock?",
            "Which products have been discontinued?",
            "What is the average unit price of products by category?",
            "Which supplier provides the most number of products?",
            "What are the total sales for each product in the current month?",
            "What is the total discount given per product?",
            "Which products need to be reordered based on current levels?",
            "What is the monthly sales performance of each product?",
            "Which category has the highest average units on order?",
            "Which products have sold the most units in the last quarter?",
            "What is the total number of products supplied by each supplier?",
            "What is the monthly trend of inventory turnover ratio?",
            "What are the top-selling products by each category?",
            "Which products have the highest unit price?",
            "What is the total quantity sold for each product?",
            "What is the average discount given on products in the last month?",
            "What are the names of all products currently in stock?",
            "Which products have reached their reorder level?",
            "What is the total value of products in stock?",
            "How many discontinued products are still in inventory?",
            "What is the average unit price of products that are on order?",
            "Which categories have the most units on order?",
            "What is the total discount provided on all orders?",
            "Calculate the Inventory Turnover Ratio for the past month.",
            "Identify the top 5 best-selling products last month.",
            "What is the total revenue generated from each product category?",
            "Find products with a unit price lower than the average unit price of all products.",
            "List all products with a reorder level higher than 20 but less than 100.",
            "Identify the products that have never been ordered.",
            "Determine the monthly sales performance for each product.",
            "Which products have the highest revenue across all orders?",
            "Calculate the average discount given per product in the last year.",
            "Identify products with stock levels below 10% of their reorder level.",
            "What is the difference in stock levels for products from last month to this month?",
            "Which products have the most significant price increase over the past year?",
            "What are the total units ordered for each product?",
            "Which products are running below their reorder level?",
            "Which products have the highest units on order?",
            "What are the details of orders where a discount was applied?",
            "Which product has the least units in stock?",
            "What is the reorder status of each product based on current stock?",
            "What is the total discount applied across all orders?",
            "Which product categories are the most frequently ordered?",
            "What is the total stock value of all products combined?",
            "How does the product performance vary month by month?",
            "What is the average discount rate applied to orders?",
            "Which products have the highest sales revenue?",
            "Are there any suppliers with only discontinued products?",
            "How many products have both no stock and no orders?",
            "What is the total number of products that are discontinued?",
            "Which suppliers provide products that need to be reordered?",
            "List the top 5 products with the highest inventory levels.",
            "Calculate the average unit price of all products.",
            "Find the total sales amount for each product category.",
            "Identify the products with the highest sales volume in the last month.",
            "What is the average discount given on each product?",
            "Determine the products with the greatest difference between units in stock and units on order.",
            "Calculate the monthly inventory turnover ratio for each product.",
            "For each supplier, list all products along with their sales quantity.",
            "Calculate the total revenue generated by each product, factoring in discounts.",
            "Identify which products have never been ordered.",
            "List the three categories with the most products.",
            "Find out which products have the highest reorder level.",
            "Calculate the variance in unit prices for each category of products.",
            "Determine which products have had discounts applied most frequently.",
            "Assess the overall performance of products based on sales volume and reorder frequency.",
            "What are the names of discontinued products that have a stock level lower than the reorder level?",
            "Which suppliers supply the highest number of different products?",
            "Which suppliers are providing products that need reordering?",
            "What are the top 5 products by units sold?",
            "How many products are below their reorder level?",
            "Which category has the highest average unit price?",
            "What is the average discount applied per order?",
            "How does the performance of products vary by month?",
            "Which products have both a positive stock and are discontinued?",
            "Which products have the highest unit prices in each category?",
            "What is the average number of units on order across products?",
            "What is the unit price of the most frequently ordered product?",
            "How many products have a reorder level greater than their stock?",
            "What are the top 3 suppliers by the number of products supplied?",
            "Which products are generating the most revenue after discounts?",
            "What is the average quantity per order per product?",
            "Which products have an inventory turnover ratio below the average?",
            "What are the top 5 products with the highest inventory levels?",
            "Which products need to be reordered based on their reorder level?",
            "Identify products with the highest sales volume over the past month.",
            "Calculate the total revenue generated by each product.",
            "Which suppliers are associated with out-of-stock products?",
            "Find the product with the highest discount applied in the last month.",
            "Determine the monthly Inventory Turnover Ratio.",
            "Identify products with low inventory turnover.",
            "Which products have seen the most significant stock reduction in the last month?",
            "How many products have zero units on order?",
            "Find products with below-average unit prices.",
            "Determine the top 3 performing products based on sales volume.",
            "Calculate the total discounts given for each product.",
            "Identify products whose sales volume exceeds 100 units in the past month.",
            "Find the most and least expensive products in stock.",
            "What is the current stock level of each product?",
            "What is the average price of products per category?",
            "How many units of each product have been sold in the current month?",
            "What is the total revenue generated from sales this month?",
            "Which category has the highest number of products in stock?",
            "Which product had the highest sales volume in the last month?",
            "What is the Inventory Turnover Ratio for the current month?",
            "List all products that have never been ordered.",
            "Which products have higher units on order than units in stock?",
            "Identify the products with zero inventory and no pending orders.",
            "What is the percentage of products that are currently discontinued?",
            "How are the products performing based on sales in the last quarter?",
            "Which suppliers have provided products that are no longer in stock?",
            "What is the total quantity of products ordered, grouped by supplier?",
            "Find products where reorder level is more than double the units in stock.",
            "What is the total value of the inventory currently in stock?",
            "Which products need to be reordered based on current stock levels?",
            "List all discontinued products and their stock levels.",
            "What are the top 5 products by sales quantity?",
            "Calculate the total discount given on products sold in the last month.",
            "Which products are sold below their reorder level and need to be prioritized for restocking?",
            "Find products with the highest number of units on order.",
            "Determine the average unit price of products sold in the last quarter.",
            "Identify suppliers with the most products that have been discontinued.",
            "How has the sales performance of each product changed over the past three months?",
            "What is the most common quantity per unit for products in inventory?",
            "Which products have the highest average discount applied?",
            "Find the product with the lowest inventory turnover ratio.",
            "List the top 3 categories by total sales revenue.",
            "Calculate the monthly change in total units in stock for each product.",
            "What is the total number of discontinued products currently in inventory?",
            "Determine if any product category consistently exceeds its reorder levels.",
            "How many orders include products that are currently discontinued?",
            "What is the total value of current inventory?",
            "What is the current inventory turnover ratio for each month?",
            "What is the total quantity sold for each product this month?",
            "Which products have the highest unit price and are currently discontinued?",
            "Identify the top 5 best-selling products based on quantity sold.",
            "How many products have zero units in stock?",
            "What is the average unit price of products supplied by each supplier?",
            "Find out which products have more units on order than units in stock.",
            "List all products that have never been included in any order.",
            "Which category of products has generated the most revenue?",
            "Identify products that need to be reordered based on current stock and reorder level.",
            "What is the total discount offered across all orders this month?",
            "How many products have been sold at different discount tiers?",
            "What is the overall average inventory turnover for the current year?",
            "Which products have the highest and lowest product performance scores?",
            "Determine the monthly trend of quantities sold for each product.",
            "List suppliers with the most products under reorder.",
            "What is the total inventory value for each supplier?",
            "How many different products are discontinued?",
            "What is the average unit price of all products in each category?",
            "Which product has the highest number of units on order?",
            "Which suppliers have products nearing their reorder level?",
            "Which product categories have the highest average units in stock?",
            "What is the total discount applied for all orders of each product?",
            "What is the current stock status of products by category?",
            "How much revenue is generated from orders placed in the last month?",
            "What is the average discount applied per unit across all orders?",
            "How many units of each product have been sold in the last year?",
            "What is the percentage of products that are discontinued?",
            "Which product has the greatest total sales value?",
            "How many products from each supplier are on order?",
            "What is the performance trend for each product over the last six months?",
            "Which products are currently at or below their reorder level?",
            "What is the average unit price of all products?",
            "Identify the top 5 products with the highest inventory turnover ratio.",
            "Which suppliers have the most products on order?",
            "Calculate the total discount applied across all orders.",
            "Which products have not been ordered?",
            "Identify the product with the lowest stock but not discontinued.",
            "Find products with the highest reorder levels.",
            "Determine the total revenue for each supplier.",
            "What is the average discount for each order?",
            "Find categories with the highest number of discontinued products.",
            "What is the total value of the current inventory?",
            "How many products have sales exceeding $10,000?",
            "What is the performance ranking of products based on quantity sold?",
            "Retrieve products with the highest price-to-quantity ratio per unit.",
            "Which products have more units on order than units currently in stock?",
            "What is the total quantity ordered for each product?",
            "Find the average unit price of products supplied by each supplier.",
            "Identify the top 5 products with the highest sales performance based on quantity sold.",
            "Find the average inventory turnover ratio for each category of products.",
            "Find the total number of discontinued products.",
            "Calculate the total discount given on each product.",
            "What is the total value of inventory currently in stock for each category?",
            "Identify the product with the highest difference between unit price and reorder level.",
            "Determine the average quantity per unit for products in each category.",
            "List the products that have been sold at a discount of more than 20%.",
            "Which suppliers provide products that have been ordered more than 100 times?",
            "Determine the total units ordered for products that are not discontinued.",
            "Find the maximum reorder level for products from each supplier.",
            "What is the lowest unit price for products with units on order?",
            "What are the top 5 products by sales revenue?"
        ],
        "sql_queries": [
            "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;",
            "SELECT ProductName, UnitsInStock FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
            "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
            "SELECT p.ProductID, (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) AS InventoryTurnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate BETWEEN DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 second' GROUP BY p.ProductID;",
            "SELECT p.ProductID, SUM(od.Quantity) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE YEAR(od.OrderDate) = YEAR(CURDATE()) GROUP BY p.ProductID ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT p.ProductID, SUM(od.Quantity) AS TotalSold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE() GROUP BY p.ProductID;",
            "SELECT SupplierID, COUNT(*) AS ReorderCount FROM products WHERE UnitsInStock <= ReorderLevel GROUP BY SupplierID ORDER BY ReorderCount DESC;",
            "SELECT SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od;",
            "SELECT ProductName, UnitsInStock FROM products ORDER BY UnitsInStock DESC LIMIT 5;",
            "SELECT CategoryID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY CategoryID;",
            "SELECT p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL OR od.OrderDate < DATE_SUB(CURDATE(), INTERVAL 6 MONTH);",
            "SELECT s.SupplierID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE YEAR(od.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) AND MONTH(od.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY s.SupplierID;",
            "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock <= ReorderLevel;",
            "SELECT c.CategoryID, AVG(p.UnitsInStock) AS AvgStock FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
            "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
            "SELECT p.ProductID, COUNT(od.OrderID) AS OrderFrequency FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE YEAR(CURDATE()) = YEAR(CURDATE()) GROUP BY p.ProductID ORDER BY OrderFrequency DESC LIMIT 1;",
            "SELECT p.ProductName FROM products p WHERE p.UnitsInStock = 0 AND p.UnitsOnOrder > 0;",
            "SELECT p.ProductID, SUM(od.Quantity) AS TotalPerformance FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY p.ProductID;",
            "SELECT ProductID, ABS(UnitsInStock - UnitsOnOrder) AS Discrepancy FROM products ORDER BY Discrepancy DESC;",
            "SELECT p.ProductName FROM products p WHERE p.UnitPrice > (SELECT AVG(p2.UnitPrice) FROM products p2 WHERE p2.CategoryID = p.CategoryID);",
            "SELECT CategoryID, SUM(UnitsInStock) AS TotalUnitsInStock FROM products GROUP BY CategoryID;",
            "SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
            "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
            "SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= DATEADD(month, -1, DATEFROMPARTS(YEAR(GETDATE()), MONTH(GETDATE()) - 1, 1)) AND od.OrderDate < DATEFROMPARTS(YEAR(GETDATE()), MONTH(GETDATE()), 1);",
            "SELECT od.ProductID, SUM(od.Quantity * (od.UnitPrice * (1 - od.Discount))) AS TotalSalesAmount FROM [Order Details] od GROUP BY od.ProductID;",
            "SELECT ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY ProductName ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT DISTINCT SupplierID FROM products WHERE Discontinued = 1;",
            "SELECT P.ProductID, P.ProductName, SUM(OD.Quantity) AS SalesQuantity FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID WHERE OD.OrderDate BETWEEN DATEADD(quarter, -1, CURRENT_DATE) AND CURRENT_DATE GROUP BY P.ProductID, P.ProductName ORDER BY SalesQuantity DESC FETCH FIRST 5 ROWS ONLY;",
            "SELECT ProductID, (UnitsOnOrder - UnitsInStock) AS Difference FROM products;",
            "SELECT MONTH(OrderDate) AS Month, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY MONTH(OrderDate);",
            "SELECT ProductID, COUNT(OrderID) AS OrderCount FROM [Order Details] GROUP BY ProductID HAVING COUNT(OrderID) > 100;",
            "SELECT ProductName, (SUM(od.Quantity * od.UnitPrice) / SUM(od.Quantity)) AS AverageSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY AverageSales DESC;",
            "SELECT DATE_TRUNC('month', o.OrderDate) AS OrderMonth, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY DATE_TRUNC('month', o.OrderDate) HAVING InventoryTurnover < TARGET_VALUE;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL OR od.OrderDate < DATEADD(month, -6, CURRENT_DATE);",
            "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
            "SELECT ProductName FROM products WHERE ReorderLevel > UnitsInStock;",
            "SELECT ProductName, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= DATEADD(year, -1, GETDATE()) GROUP BY ProductName HAVING SUM(CASE WHEN YEAR(od.OrderDate) = YEAR(GETDATE()) THEN od.Quantity ELSE 0 END) < SUM(CASE WHEN YEAR(od.OrderDate) = YEAR(GETDATE()) - 1 THEN od.Quantity ELSE 0 END);",
            "SELECT CategoryID, AVG(od.Quantity) AS AvgQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY CategoryID;",
            "SELECT CategoryID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY CategoryID ORDER BY AvgUnitPrice DESC;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate >= DATEADD(month, -1, CURRENT_DATE) GROUP BY p.ProductName",
            "SELECT p.ProductName, s.SupplierName FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.UnitsInStock <= p.ReorderLevel",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT COUNT(*) FROM products WHERE Discontinued = 1",
            "SELECT s.SupplierName, COUNT(*) AS ProductCount FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierName ORDER BY ProductCount DESC",
            "SELECT c.CategoryName, MONTH(od.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) AS MonthlySales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID WHERE od.OrderDate >= DATEADD(year, -1, GETDATE()) GROUP BY c.CategoryName, MONTH(od.OrderDate)",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS TurnoverRate FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate >= DATEADD(quarter, -1, CURRENT_DATE) AND od.OrderDate < CURRENT_DATE GROUP BY p.ProductName ORDER BY TurnoverRate DESC;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE YEAR(od.OrderDate) = YEAR(CURRENT_DATE) GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 5",
            "SELECT ProductName, UnitsOnOrder FROM products;",
            "SELECT AVG(UnitsInStock) AS AverageUnitsInStock FROM products",
            "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity) > p.ReorderLevel",
            "SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID",
            "SELECT p.ProductName, p.UnitsInStock - p.UnitsOnOrder AS StockDifference FROM products p ORDER BY StockDifference DESC",
            "SELECT MONTH(CAST(CURRENT_TIMESTAMP AS DATE)) AS Month, SUM(UnitsInStock) AS MonthlyStock FROM products GROUP BY MONTH(CAST(CURRENT_TIMESTAMP AS DATE))",
            "SELECT s.SupplierName, SUM(od.Quantity * od.UnitPrice) AS Revenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierName ORDER BY Revenue DESC LIMIT 3;",
            "SELECT p.ProductName, od.Discount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate >= DATEADD(month, -1, CURRENT_DATE) AND od.OrderDate < CURRENT_DATE ORDER BY od.Discount DESC",
            "SELECT c.CategoryName, AVG(p.UnitPrice) AS AveragePrice FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryName",
            "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1 AND od.Quantity > 0 GROUP BY p.ProductName",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalSales, p.UnitsInStock FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName, p.UnitsInStock HAVING SUM(od.Quantity) < p.UnitsInStock",
            "SELECT QuantityPerUnit, COUNT(*) AS Frequency FROM products GROUP BY QuantityPerUnit ORDER BY Frequency DESC LIMIT 1",
            "SELECT ProductName, SUM(UnitPrice) FROM products WHERE Discontinued = 1 GROUP BY ProductName;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT ProductID, AVG(Discount) FROM [Order Details] GROUP BY ProductID;",
            "SELECT ProductName FROM products WHERE UnitsInStock = 0 AND UnitsOnOrder = 0;",
            "SELECT p.ProductID, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS Turnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 0 GROUP BY p.ProductID ORDER BY Turnover DESC;",
            "SELECT ProductID, SUM(Quantity) AS TotalSold FROM [Order Details] GROUP BY ProductID ORDER BY TotalSold DESC LIMIT 5;",
            "SELECT COUNT(ProductID) AS NumberOfProducts FROM products WHERE UnitsOnOrder > 0 AND UnitsInStock = 0;",
            "SELECT ProductName, (UnitsOnOrder - UnitsInStock) AS Variation FROM products ORDER BY Variation DESC;",
            "SELECT SUM(Quantity) FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate > DATEADD(MONTH, -1, CURRENT_DATE));",
            "SELECT SupplierID, COUNT(ProductID) AS NumProducts FROM products WHERE Discontinued = 0 GROUP BY SupplierID ORDER BY NumProducts DESC;",
            "SELECT SUM(od.Quantity * od.UnitPrice) / AVG(CAST(p.UnitsInStock AS DECIMAL)) AS InventoryTurnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID;",
            "SELECT ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;",
            "SELECT CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY CategoryID ORDER BY TotalSales DESC;",
            "SELECT SUM(Quantity * UnitPrice) AS TotalRevenue FROM [Order Details];",
            "SELECT ProductID, UnitPrice / AVG(Discount) AS PriceDiscountRatio FROM [Order Details] GROUP BY ProductID ORDER BY PriceDiscountRatio DESC;",
            "SELECT SupplierID FROM products WHERE Discontinued = 1 GROUP BY SupplierID HAVING COUNT(DISTINCT ProductID) > 10;",
            "SELECT P.ProductID, AVG(OD.UnitPrice) AS AvgPrice, SUM(OD.Quantity) AS TotalSold FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID GROUP BY P.ProductID ORDER BY AvgPrice DESC;",
            "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;",
            "SELECT ProductName, (UnitPrice * UnitsInStock) AS TotalValue FROM products;",
            "SELECT ProductName, (UnitsInStock - ReorderLevel) AS Difference FROM products ORDER BY ABS(Difference) DESC;",
            "SELECT ProductName, UnitsInStock * UnitPrice AS InventoryValue FROM products;",
            "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT CategoryID, SUM(UnitsInStock) AS TotalInventory FROM products GROUP BY CategoryID;",
            "SELECT ProductName, SUM(Quantity * UnitPrice * (1 - Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName;",
            "SELECT products.SupplierID, suppliers.SupplierName, products.UnitPrice FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE products.UnitPrice = (SELECT MAX(UnitPrice) FROM products);",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Quantity) AS TotalQuantitySold FROM Orders INNER JOIN [Order Details] ON Orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT ProductName, SUM(Quantity) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 0 GROUP BY ProductName ORDER BY TotalSales DESC LIMIT 10;",
            "SELECT AVG(UnitPrice) AS AverageUnitPrice FROM [Order Details];",
            "SELECT ProductName FROM products WHERE UnitsInStock < 10;",
            "SELECT DISTINCT OrderID FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.UnitsInStock = 0;",
            "SELECT COUNT(DISTINCT ProductID) AS UniqueProductsSold FROM [Order Details];",
            "SELECT SUM(Quantity * UnitPrice * (1 - Discount)) AS TotalSalesRevenueWithDiscount FROM [Order Details];",
            "SELECT suppliers.SupplierID, suppliers.SupplierName FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE UnitsInStock <= ReorderLevel GROUP BY suppliers.SupplierID, suppliers.SupplierName;",
            "SELECT AVG(DATEDIFF(RestockDate, ReorderDate)) AS AverageTime FROM ReorderHistory;",
            "SELECT ProductName, ReorderLevel FROM products ORDER BY ReorderLevel DESC LIMIT 5;",
            "SELECT suppliers.SupplierID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE products.UnitsInStock > 0 GROUP BY suppliers.SupplierID;",
            "SELECT products.ProductID, products.ProductName, COALESCE(SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0), 0) AS InventoryTurnover FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE DATEPART(MONTH, [Order Details].OrderDate) = DATEPART(MONTH, CURRENT_DATE) AND DATEPART(YEAR, [Order Details].OrderDate) = DATEPART(YEAR, CURRENT_DATE) GROUP BY products.ProductID, products.ProductName ORDER BY InventoryTurnover DESC LIMIT 5;",
            "SELECT suppliers.SupplierID, suppliers.SupplierName, COUNT(products.ProductID) AS LowStockProducts FROM suppliers INNER JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsInStock < products.ReorderLevel GROUP BY suppliers.SupplierID, suppliers.SupplierName;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN Orders ON [Order Details].OrderID = Orders.OrderID WHERE YEAR(Orders.OrderDate) = YEAR(GETDATE()) AND MONTH(Orders.OrderDate) = MONTH(GETDATE()) - 1;",
            "SELECT ProductID, ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
            "SELECT categories.CategoryID, categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM categories INNER JOIN products ON categories.CategoryID = products.CategoryID INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY categories.CategoryID, categories.CategoryName ORDER BY TotalSales DESC;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
            "SELECT suppliers.SupplierID, suppliers.SupplierName, AVG([Order Details].Discount) AS AverageDiscount FROM suppliers INNER JOIN products ON suppliers.SupplierID = products.SupplierID INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID, suppliers.SupplierName;",
            "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS UnitsSold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE DATEPART(QUARTER, od.OrderDate) = DATEPART(QUARTER, GETDATE()) - 1 AND DATEPART(YEAR, od.OrderDate) = DATEPART(YEAR, GETDATE()) GROUP BY p.ProductID, p.ProductName;",
            "SELECT suppliers.SupplierID, suppliers.SupplierName, MIN(products.UnitPrice) AS LowestPrice FROM suppliers INNER JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID, suppliers.SupplierName ORDER BY LowestPrice;",
            "SELECT COUNT(ProductID) AS DiscontinuedProducts FROM products WHERE Discontinued = TRUE;",
            "SELECT TOP 1 products.ProductID, products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName ORDER BY TotalRevenue DESC;",
            "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS QuantitySold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY QuantitySold DESC;",
            "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details] WHERE DATEPART(YEAR, OrderDate) = DATEPART(YEAR, CURRENT_DATE));",
            "SELECT COUNT(DISTINCT ProductID) * 100.0 / (SELECT COUNT(ProductID) FROM products) AS PercentageOnOrder FROM [Order Details] WHERE Quantity > 0;",
            "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, ProductID, SUM(Quantity) AS TotalSold FROM [Order Details] WHERE OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY EXTRACT(MONTH FROM OrderDate), ProductID ORDER BY Month;",
            "SELECT ProductID, ProductName, COUNT(*) AS ReorderCount FROM products WHERE UnitsInStock <= ReorderLevel GROUP BY ProductID, ProductName ORDER BY ReorderCount DESC;",
            "SELECT categories.CategoryID, categories.CategoryName, SUM([Order Details].Quantity) AS TotalOrdered FROM categories INNER JOIN products ON categories.CategoryID = products.CategoryID INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY categories.CategoryID, categories.CategoryName ORDER BY TotalOrdered DESC;",
            "SELECT COUNT(DISTINCT OrderID) FROM [Order Details] WHERE Discount > 0.20;",
            "SELECT categories.CategoryID, categories.CategoryName, AVG(UnitsInStock) AS AverageInventory FROM categories INNER JOIN products ON categories.CategoryID = products.CategoryID GROUP BY categories.CategoryID, categories.CategoryName;",
            "SELECT ProductID, ProductName, (SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) - SUM([Order Details].Quantity * products.UnitPrice)) / NULLIF(SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)), 0) AS NetProfitMargin FROM [Order Details] INNER JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductID, ProductName;",
            "SELECT SupplierID, AVG(UnitPrice) AS AverageUnitPrice FROM products GROUP BY SupplierID;",
            "SELECT ProductID, ProductName, UnitsInStock, ReorderLevel FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT SUM(UnitsInStock * UnitPrice) AS TotalStockValue FROM products;",
            "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS SalesRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY SalesRevenue DESC LIMIT 5;",
            "SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;",
            "SELECT SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products WHERE Discontinued = 1;",
            "SELECT CategoryID, COUNT(*) AS DiscontinuedCount FROM products WHERE Discontinued = 1 GROUP BY CategoryID ORDER BY DiscontinuedCount DESC;",
            "SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY Month;",
            "SELECT SupplierID FROM products WHERE Discontinued = 1 GROUP BY SupplierID HAVING COUNT(*) > 3;",
            "SELECT ProductID, MAX(Discount) AS MaxDiscount FROM [Order Details] GROUP BY ProductID ORDER BY MaxDiscount DESC LIMIT 1;",
            "SELECT c.CategoryName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN categories c ON p.CategoryID = c.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE EXTRACT(MONTH FROM od.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE - INTERVAL '1 MONTH') AND EXTRACT(YEAR FROM od.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '1 MONTH') GROUP BY c.CategoryName;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT ProductID, SUM(Quantity) AS TotalOrdered FROM [Order Details] GROUP BY ProductID ORDER BY TotalOrdered DESC LIMIT 1;",
            "SELECT ProductID, ProductName, (UnitsInStock - UnitsOnOrder) AS StockDifference FROM products;",
            "SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY Month ORDER BY InventoryTurnoverRatio DESC LIMIT 1;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsOnOrder > ReorderLevel * 2;",
            "SELECT CategoryID, AVG(UnitsInStock) AS AverageInventory FROM products GROUP BY CategoryID;",
            "SELECT COUNT(*) AS OverstockedCount FROM products WHERE UnitsInStock > (ReorderLevel + UnitsOnOrder);",
            "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT (COUNT(*) FILTER (WHERE Discontinued = 1) * 1.0 / COUNT(*)) AS DiscontinuedProportion FROM products;",
            "SELECT categories.CategoryID, SUM(products.UnitsOnOrder) FROM products JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT SupplierID, AVG(UnitPrice) FROM products GROUP BY SupplierID;",
            "SELECT products.ProductID, (SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0)) AS InventoryTurnoverRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID ORDER BY InventoryTurnoverRatio DESC;",
            "SELECT [Order Details].ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM [Order Details] GROUP BY [Order Details].ProductID;",
            "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m') GROUP BY products.ProductID, products.ProductName ORDER BY TotalQuantity DESC;",
            "SELECT ProductID, SUM(Discount * Quantity * UnitPrice) AS TotalDiscount FROM [Order Details] GROUP BY ProductID;",
            "SELECT CategoryID, SUM(UnitsInStock) FROM products GROUP BY CategoryID;",
            "SELECT SupplierID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products WHERE UnitsOnOrder > 0 GROUP BY SupplierID ORDER BY TotalUnitsOnOrder DESC;",
            "SELECT ProductID, (UnitsInStock - ReorderLevel) AS Difference FROM products;",
            "SELECT COUNT(*) FROM products WHERE UnitsInStock > ReorderLevel;",
            "SELECT SupplierID, SUM(UnitsInStock * UnitPrice) AS InventoryValue FROM products GROUP BY SupplierID;",
            "SELECT ProductID, AVG(Quantity) FROM [Order Details] WHERE ProductID IN (SELECT ProductID FROM products WHERE Discontinued = 1) GROUP BY ProductID;",
            "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS Revenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID ORDER BY Revenue DESC;",
            "SELECT AVG(Discount) FROM [Order Details];",
            "SELECT ProductID FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details] WHERE DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 1 MONTH), '%Y-%m'));",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 1;",
            "SELECT ProductID, COUNT(OrderID) AS OrderFrequency FROM [Order Details] GROUP BY ProductID;",
            "SELECT CategoryID, SUM(UnitsOnOrder) FROM products GROUP BY CategoryID ORDER BY SUM(UnitsOnOrder) DESC LIMIT 1;",
            "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(NULLIF(p.UnitsInStock, 0)), 0) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY InventoryTurnover DESC LIMIT 5;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock + UnitsOnOrder <= ReorderLevel AND Discontinued = 0;",
            "SELECT SUM(UnitsInStock) FROM products WHERE Discontinued = 1;",
            "SELECT p.SupplierID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",
            "SELECT CategoryID, AVG(UnitPrice) AS AverageUnitPrice FROM products GROUP BY CategoryID ORDER BY AverageUnitPrice DESC LIMIT 1;",
            "SELECT SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscount FROM [Order Details] od;",
            "SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;",
            "SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS TotalSales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY EXTRACT(MONTH FROM o.OrderDate) ORDER BY TotalSales DESC LIMIT 1;",
            "WITH MonthlySales AS (SELECT DATE_TRUNC('month', o.OrderDate) AS Month, od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY Month, od.ProductID), MonthOverMonthChange AS (SELECT a.ProductID, a.Month, a.TotalQuantity, a.TotalQuantity - COALESCE(b.TotalQuantity, 0) AS Increase FROM MonthlySales a LEFT JOIN MonthlySales b ON a.ProductID = b.ProductID AND a.Month = b.Month + INTERVAL '1 month') SELECT ProductID FROM MonthOverMonthChange ORDER BY Increase DESC LIMIT 3;",
            "SELECT COUNT(DISTINCT ProductID) FROM [Order Details] o JOIN orders ON o.OrderID = orders.OrderID WHERE EXTRACT(YEAR FROM orders.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1;",
            "SELECT p.CategoryID, AVG(p.ReorderLevel) AS AverageReorderLevel FROM products p GROUP BY p.CategoryID;",
            "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
            "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS SalesRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY SalesRevenue DESC LIMIT 10;",
            "SELECT CategoryID, COUNT(*) AS TotalDiscontinued FROM products WHERE Discontinued = 1 GROUP BY CategoryID;",
            "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductVariety FROM products GROUP BY SupplierID ORDER BY ProductVariety DESC LIMIT 1;",
            "SELECT od.ProductID, SUM(od.Quantity * (od.UnitPrice - od.UnitPrice * od.Discount)) AS TotalSales FROM [Order Details] od GROUP BY od.ProductID;",
            "WITH MonthlySales AS (\n    SELECT EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, od.ProductID, SUM(od.Quantity) AS TotalQuantity \n    FROM [Order Details] od \n    JOIN orders o ON od.OrderID = o.OrderID \n    GROUP BY Year, Month, od.ProductID\n), \nSalesTrend AS (\n    SELECT ProductID, \n    TotalQuantity, \n    LAG(TotalQuantity, 1) OVER (PARTITION BY ProductID ORDER BY Year, Month) AS PreviousMonthQuantity, \n    LAG(TotalQuantity, 2) OVER (PARTITION BY ProductID ORDER BY Year, Month) AS TwoMonthsAgoQuantity, \n    LAG(TotalQuantity, 3) OVER (PARTITION BY ProductID ORDER BY Year, Month) AS ThreeMonthsAgoQuantity, \n    LAG(TotalQuantity, 4) OVER (PARTITION BY ProductID ORDER BY Year, Month) AS FourMonthsAgoQuantity, \n    LAG(TotalQuantity, 5) OVER (PARTITION BY ProductID ORDER BY Year, Month) AS FiveMonthsAgoQuantity\n    FROM MonthlySales\n)\nSELECT DISTINCT ProductID \nFROM SalesTrend \nWHERE TotalQuantity < PreviousMonthQuantity AND PreviousMonthQuantity < TwoMonthsAgoQuantity AND \n      TwoMonthsAgoQuantity < ThreeMonthsAgoQuantity AND ThreeMonthsAgoQuantity < FourMonthsAgoQuantity AND \n      FourMonthsAgoQuantity < FiveMonthsAgoQuantity;",
            "SELECT * FROM [Order Details] WHERE Discount > 0.5;",
            "SELECT (COUNT(*) FILTER (WHERE Discontinued = 1) / COUNT(*)) * 100 AS DiscontinuedPercentage FROM products;",
            "SELECT SUM(UnitPrice * UnitsInStock) AS TotalStockValue FROM products;",
            "SELECT ProductID, ProductName, (ReorderLevel - UnitsInStock) AS UnitsToReorder FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS SalesRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY SalesRevenue DESC LIMIT 5;",
            "SELECT COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1;",
            "SELECT p.SupplierID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",
            "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) DESC LIMIT 1;",
            "SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL;",
            "SELECT ProductID, ProductName, UnitsOnOrder FROM products WHERE UnitsOnOrder > 0;",
            "SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IN (SELECT OrderID FROM orders WHERE OrderDate BETWEEN DATEADD(MONTH, -3, CURRENT_DATE) AND CURRENT_DATE) GROUP BY p.ProductID, p.ProductName HAVING SUM(CASE WHEN OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) THEN od.Quantity ELSE 0 END) < SUM(CASE WHEN OrderDate < DATEADD(MONTH, -1, CURRENT_DATE) THEN od.Quantity ELSE 0 END) ORDER BY SUM(od.Quantity) DESC;",
            "SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID;",
            "SELECT DISTINCT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1;",
            "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalUnitsSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
            "SELECT p.ProductID, p.ProductName, (SUM(od.Quantity * od.UnitPrice) / (SELECT SUM(od1.Quantity * od1.UnitPrice) FROM [Order Details] od1)) * 100 AS PercentageOfTotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
            "SELECT SupplierID FROM products WHERE UnitsInStock > 1000 GROUP BY SupplierID;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsOnOrder = 0;",
            "SELECT ProductID, ProductName, (UnitsInStock - ReorderLevel) AS StockDifference FROM products;",
            "SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName HAVING (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) > (SELECT AVG(subquery.turnover_ratio) FROM (SELECT SUM(od1.Quantity * od1.UnitPrice) / AVG(p1.UnitsInStock) AS turnover_ratio FROM products p1 JOIN [Order Details] od1 ON p1.ProductID = od1.ProductID GROUP BY p1.ProductID) subquery);",
            "SELECT CORR(p.UnitPrice, od.Quantity) AS PriceVsSalesCorrelation FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE YEAR(od.OrderID) = YEAR(CURRENT_DATE) AND MONTH(od.OrderID) = MONTH(CURRENT_DATE) GROUP BY p.ProductName;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY SUM(od.Quantity) DESC LIMIT 5;",
            "SELECT AVG(turnover) AS AvgInventoryTurnover FROM (SELECT SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS turnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderID IN (SELECT DISTINCT OrderID FROM [Order Details] WHERE MONTH(CURRENT_DATE) - MONTH(OrderDate) BETWEEN 1 AND 3) GROUP BY MONTH(OrderDate)) AS monthly_turnover;",
            "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
            "SELECT SUM(od.Quantity * od.UnitPrice) FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 0;",
            "SELECT p.ProductName, od.Discount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID ORDER BY od.Discount DESC;",
            "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT p.ProductName, s.SupplierID FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.UnitsInStock = (SELECT MIN(UnitsInStock) FROM products);",
            "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
            "SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID HAVING SUM(od.Quantity) > (SELECT AVG(total_sales) FROM (SELECT SUM(Quantity) AS total_sales FROM [Order Details] GROUP BY ProductID) AS subquery);",
            "SELECT ProductName, (UnitsInStock - UnitsOnOrder) AS StockOrderDifference FROM products;",
            "SELECT CategoryID, COUNT(ProductID) AS Count FROM products WHERE UnitsInStock <= ReorderLevel GROUP BY CategoryID;",
            "SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
            "SELECT ProductName, (UnitsOnOrder / UnitsInStock) AS OnOrderToStockRatio FROM products WHERE UnitsInStock > 0;",
            "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= DATEADD(MONTH, -6, CURRENT_DATE));",
            "SELECT SUM(od.Quantity) FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 0;",
            "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
            "SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.Discount > 0.2;",
            "SELECT ProductName FROM products WHERE UnitPrice < (SELECT AVG(UnitPrice) FROM products p2 WHERE p2.CategoryID = products.CategoryID);",
            "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 0;",
            "SELECT SupplierID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY SupplierID;",
            "SELECT COUNT(*) AS DiscontinuedProductsCount FROM products WHERE Discontinued = 1;",
            "SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE YEAR(od.sale_date) = YEAR(CURRENT_DATE) AND MONTH(od.sale_date) = MONTH(CURRENT_DATE) - 1;",
            "SELECT ProductID, SUM(Quantity) AS TotalSalesVolume FROM [Order Details] GROUP BY ProductID ORDER BY TotalSalesVolume DESC;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT ProductID, UnitsOnOrder FROM products WHERE UnitsOnOrder > 0;",
            "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
            "SELECT ProductID, DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Quantity * UnitPrice) AS MonthlySales FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ProductID, Month ORDER BY ProductID, Month;",
            "SELECT CategoryID, AVG(UnitsInStock) AS AverageUnitsInStock FROM products GROUP BY CategoryID;",
            "SELECT ProductID, SUM(Quantity) AS TotalSales FROM [Order Details] GROUP BY ProductID HAVING SUM(Quantity) = (SELECT MIN(TotalSales) FROM (SELECT SUM(Quantity) AS TotalSales FROM [Order Details] GROUP BY ProductID) AS SubQuery);",
            "SELECT CORR(UnitPrice, Quantity) AS Correlation FROM [Order Details];",
            "SELECT COUNT(ProductID) FROM products WHERE (UnitsInStock + UnitsOnOrder) < ReorderLevel;",
            "SELECT Discount, SUM(Quantity) AS TotalSales FROM [Order Details] GROUP BY Discount ORDER BY Discount DESC;",
            "SELECT SUM(Quantity * UnitPrice) AS TotalOrderDetailsRevenue FROM [Order Details];",
            "SELECT YEAR(sale_date) AS Year, MONTH(sale_date) AS Month, SUM(Quantity * UnitPrice) AS MonthlyRevenue FROM [Order Details] GROUP BY Year, Month HAVING Year = YEAR(CURRENT_DATE) OR (Year = YEAR(CURRENT_DATE) - 1 AND Month >= MONTH(CURRENT_DATE));",
            "SELECT ProductName, UnitsInStock FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
            "SELECT ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;",
            "SELECT SUM(OD.Quantity * OD.UnitPrice) / AVG(P.UnitsInStock) AS InventoryTurnover FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID WHERE MONTH(CURRENT_DATE) = MONTH(OD.OrderDate) AND YEAR(CURRENT_DATE) = YEAR(OD.OrderDate);",
            "SELECT P.ProductName FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID GROUP BY P.ProductName ORDER BY SUM(OD.Quantity) DESC LIMIT 5;",
            "SELECT AVG(ReorderLevel) AS AverageReorderLevel FROM products;",
            "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
            "SELECT SUM(UnitPrice * Quantity * Discount) AS TotalDiscounts FROM [Order Details];",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT P.ProductName, SUM(OD.Quantity) AS TotalQuantitySold FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID WHERE MONTH(CURRENT_DATE) = MONTH(OD.OrderDate) AND YEAR(CURRENT_DATE) = YEAR(OD.OrderDate) GROUP BY P.ProductID;",
            "SELECT CategoryID, COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1 GROUP BY CategoryID ORDER BY DiscontinuedProducts DESC;",
            "SELECT Discount, COUNT(*) AS Frequency FROM [Order Details] GROUP BY Discount ORDER BY Frequency DESC LIMIT 1;",
            "SELECT products.ProductName FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID ORDER BY [Order Details].UnitPrice DESC LIMIT 1;",
            "SELECT P.ProductName, P.UnitPrice, COUNT(OD.OrderID) AS OrderCount FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID GROUP BY P.ProductID, P.ProductName, P.UnitPrice ORDER BY OrderCount DESC;",
            "SELECT ProductName, (UnitsInStock / NULLIF(UnitsOnOrder, 0)) AS StockToOrderRatio FROM products ORDER BY StockToOrderRatio DESC LIMIT 1;",
            "SELECT AVG(UnitPrice) AS AverageUnitPrice FROM products WHERE Discontinued = 1;",
            "SELECT COUNT(*) AS ProductsAtReorderLevel FROM products WHERE UnitsInStock = ReorderLevel;",
            "SELECT AVG(CAST(SUBSTR(QuantityPerUnit, 1, INSTR(QuantityPerUnit, ' ') - 1) AS DECIMAL)) FROM products WHERE Discontinued = 0;",
            "SELECT SupplierID, COUNT(ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID ORDER BY NumberOfProducts DESC LIMIT 3;",
            "SELECT c.CategoryID, SUM(p.UnitsInStock * p.UnitPrice) AS TotalInventoryValue FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 0;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalUnitsSold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE DATE_FORMAT(od.OrderDate, 'YYYY-MM') = DATE_FORMAT(CURDATE(), 'YYYY-MM') GROUP BY p.ProductName ORDER BY TotalUnitsSold DESC;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT SupplierID, COUNT(ProductID) AS TotalProducts FROM products GROUP BY SupplierID ORDER BY TotalProducts DESC;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalRevenue DESC LIMIT 5;",
            "SELECT p.ProductName, (SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0)) AS InventoryTurnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;",
            "SELECT c.CategoryID, AVG(p.UnitPrice) AS AverageUnitPrice FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID ORDER BY AverageUnitPrice DESC LIMIT 1;",
            "SELECT (SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END) / COUNT(*)) * 100.0 AS DiscontinuedPercentage FROM products;",
            "SELECT AVG(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS AverageOrderValue FROM [Order Details] od;",
            "SELECT ProductName, UnitsInStock FROM products WHERE UnitPrice = (SELECT MAX(UnitPrice) FROM products) UNION SELECT ProductName, UnitsInStock FROM products WHERE UnitPrice = (SELECT MIN(UnitPrice) FROM products);",
            "SELECT DATE_FORMAT(order_date, 'YYYY-MM') AS Month, (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) AS InventoryTurnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY Month ORDER BY Month DESC LIMIT 6;",
            "SELECT p.ProductName, ((od.UnitPrice - p.UnitPrice) / od.UnitPrice) AS ProfitMargin FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID ORDER BY ProfitMargin DESC LIMIT 1;",
            "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT c.CategoryID, AVG(od.Discount) AS AverageDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
            "SELECT p.ProductID, p.ProductName, (SUM(od.Quantity) * (1 - p.Discontinued)) / (p.UnitsInStock + 1) AS ProductPerformanceScore FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID;",
            "SELECT SupplierID, AVG(UnitsInStock) AS AverageUnitsInStock FROM products GROUP BY SupplierID;",
            "SELECT p.CategoryID, COUNT(*) AS ProductsBelowReorder FROM products p WHERE p.UnitsInStock < p.ReorderLevel GROUP BY p.CategoryID;",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
            "SELECT (SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock)) AS InventoryTurnoverRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE EXTRACT(MONTH FROM CURRENT_DATE) - 1 = EXTRACT(MONTH FROM [Order Details].OrderDate) AND EXTRACT(YEAR FROM CURRENT_DATE) = EXTRACT(YEAR FROM [Order Details].OrderDate);",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalQuantity DESC LIMIT 1;",
            "SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details] WHERE EXTRACT(QUARTER FROM CURRENT_DATE) - 1 = EXTRACT(QUARTER FROM TIMESTAMP '2023-01-01 00:00:00');",
            "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID;",
            "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE products.Discontinued = 1;",
            "SELECT products.ProductName, products.SupplierID FROM products ORDER BY products.UnitPrice DESC LIMIT 1;",
            "SELECT COUNT(ProductID) FROM products WHERE UnitsOnOrder > UnitsInStock;",
            "SELECT (COUNT(ProductID) * 100.0 / (SELECT COUNT(*) FROM products)) AS DiscontinuedPercentage FROM products WHERE Discontinued = 1;",
            "SELECT SUM((Discount * UnitPrice * Quantity)) AS TotalDiscountedAmount FROM [Order Details];",
            "SELECT products.ProductName FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].ProductID IS NULL;",
            "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products WHERE UnitsInStock > 0 GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1;",
            "SELECT SUM([Order Details].Quantity) FROM [Order Details] WHERE EXTRACT(YEAR FROM [Order Details].OrderID) = EXTRACT(YEAR FROM CURRENT_DATE);",
            "SELECT ProductName FROM products ORDER BY ABS(UnitsInStock - UnitsOnOrder) DESC LIMIT 1;",
            "SELECT p.ProductName FROM products p WHERE p.Discontinued = 1 AND p.ProductID IN (SELECT od.ProductID FROM [Order Details] od WHERE EXTRACT(MONTH FROM OrderID) = EXTRACT(MONTH FROM CURRENT_DATE) - 1 AND EXTRACT(YEAR FROM OrderID) = EXTRACT(YEAR FROM CURRENT_DATE));",
            "SELECT COUNT(DISTINCT CategoryID) FROM products;",
            "SELECT OrderID, SUM(Discount * UnitPrice * Quantity) AS TotalDiscount FROM [Order Details] GROUP BY OrderID ORDER BY TotalDiscount DESC LIMIT 1;",
            "SELECT products.CategoryID, AVG(products.UnitsInStock) AS AverageUnitsInStock FROM products GROUP BY products.CategoryID;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT SupplierID, COUNT(DISTINCT ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID ORDER BY NumberOfProducts DESC;",
            "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN categories c ON p.CategoryID = c.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryID;",
            "SELECT COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantitySold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantitySold DESC LIMIT 5;",
            "SELECT p.ProductName, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
            "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT ProductID FROM [Order Details]);",
            "SELECT ProductID, ProductName, UnitsOnOrder FROM products WHERE UnitsOnOrder > 0;",
            "SELECT AVG(Discount * 100) AS AverageDiscountPercentage FROM [Order Details];",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSales DESC;",
            "SELECT ProductName, UnitsInStock, ReorderLevel FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT ProductName, UnitsOnOrder FROM products ORDER BY UnitsOnOrder DESC;",
            "SELECT s.SupplierName, SUM(od.Quantity) AS TotalUnitsSold FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierName;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity) < 100;",
            "SELECT COUNT(*) FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
            "SELECT MONTH(o.OrderDate) AS SaleMonth, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS MonthlySales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY MONTH(o.OrderDate), p.ProductName;",
            "SELECT c.CategoryName, SUM(p.UnitsOnOrder) AS TotalOnOrder FROM categories c JOIN products p ON c.CategoryID = p.CategoryID GROUP BY c.CategoryName ORDER BY TotalOnOrder DESC;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT ProductName FROM products WHERE Discontinued = 1;",
            "SELECT SupplierID, AVG(UnitPrice) FROM products GROUP BY SupplierID;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsOnOrder = (SELECT MAX(UnitsOnOrder) FROM products);",
            "SELECT AVG(Discount) FROM [Order Details];",
            "SELECT EXTRACT(YEAR FROM od.OrderDate) AS Year, EXTRACT(MONTH FROM od.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.UnitsInStock > 0 GROUP BY EXTRACT(YEAR FROM od.OrderDate), EXTRACT(MONTH FROM od.OrderDate);",
            "SELECT CategoryID, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS CategoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY CategoryID ORDER BY CategoryTurnoverRatio DESC LIMIT 1;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock > 0 AND UnitsOnOrder > 0;",
            "SELECT ProductID, SUM(Quantity) AS TotalSalesQuantity FROM [Order Details] WHERE EXTRACT(YEAR FROM CURRENT_DATE) = EXTRACT(YEAR FROM OrderDate) AND EXTRACT(MONTH FROM CURRENT_DATE) = EXTRACT(MONTH FROM OrderDate) GROUP BY ProductID;",
            "SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0.2;",
            "SELECT CategoryID, SUM(Quantity) AS TotalOrderQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID;",
            "SELECT SupplierID, SUM(od.Quantity * od.UnitPrice) AS SupplierRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY SupplierID;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 1;",
            "SELECT ProductID, SUM(Quantity) AS AnnualOrderQuantity FROM [Order Details] WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY ProductID;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsOnOrder > 0 AND UnitsInStock < ReorderLevel;",
            "SELECT p.ProductID, p.ProductName, CORR(p.UnitPrice, od.Discount) AS PriceDiscountCorrelation FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel AND UnitsOnOrder = 0;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
            "SELECT ProductName FROM products WHERE Discontinued = 1;",
            "SELECT AVG(Discount) FROM [Order Details];",
            "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN Categories c ON p.CategoryID = c.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryID;",
            "SELECT ProductName FROM products WHERE UnitsInStock = 0;",
            "SELECT ProductName FROM products ORDER BY UnitPrice DESC LIMIT 1; SELECT ProductName FROM products ORDER BY UnitPrice ASC LIMIT 1;",
            "SELECT CategoryID, COUNT(ProductID) AS NumberOfProducts FROM products GROUP BY CategoryID;",
            "SELECT SUM(od.Quantity) FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 1;",
            "SELECT ProductName, (UnitsInStock - UnitsOnOrder) AS StockOptimization FROM products;",
            "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY Month, od.ProductID;",
            "SELECT p.ProductName, p.UnitPrice, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName, p.UnitPrice ORDER BY SUM(od.Quantity);",
            "SELECT ProductName FROM products WHERE ReorderLevel = (SELECT MAX(ReorderLevel) FROM products);",
            "SELECT SupplierID, AVG(UnitsOnOrder) FROM products GROUP BY SupplierID;",
            "SELECT DATE_PART('month', o.OrderDate) AS Month, SUM(od.Quantity) FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY Month;",
            "SELECT products.ProductID, (SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0)) AS InventoryTurnoverRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE products.Discontinued = 0 GROUP BY products.ProductID ORDER BY InventoryTurnoverRatio DESC LIMIT 5;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT CategoryID, SUM(UnitsInStock * UnitPrice) AS TotalValue FROM products GROUP BY CategoryID;",
            "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT SupplierID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY SupplierID ORDER BY AveragePrice DESC;",
            "SELECT CategoryID, MONTH(OrderDate), SUM([Order Details].Quantity) FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY CategoryID, MONTH(OrderDate);",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE) - 1 AND YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY od.ProductID, p.ProductName ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT ProductName FROM products WHERE UnitsOnOrder > 0 AND UnitsInStock > 0 ORDER BY UnitsOnOrder DESC;",
            "SELECT ProductName, UnitPrice FROM products WHERE Discontinued = 0 ORDER BY UnitPrice ASC LIMIT 1;",
            "SELECT MONTH(OrderDate), SUM(Quantity * (UnitPrice - (Discount * UnitPrice))) AS DiscountedRevenue FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE Discount > 0 GROUP BY MONTH(OrderDate);",
            "SELECT AVG(od.Quantity) AS AverageUnitsOrdered FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY od.ProductID;",
            "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT p.ProductName, p.QuantityPerUnit FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName, p.QuantityPerUnit HAVING (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) < 1;",
            "SELECT COUNT(*) AS DiscontinuedCount, (SELECT COUNT(*) FROM products WHERE Discontinued = 0) AS ActiveCount FROM products WHERE Discontinued = 1;",
            "SELECT SupplierID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE QUARTER(OrderDate) = QUARTER(CURDATE()) - 1 GROUP BY SupplierID;",
            "SELECT ProductName FROM products WHERE ReorderLevel > 0 AND UnitsInStock < ReorderLevel;",
            "SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.Discount > 0.25;",
            "SELECT MONTH(OrderDate), (SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock)) AS InventoryTurnoverRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID WHERE OrderDate >= DATEADD(MONTH, -6, GETDATE()) GROUP BY MONTH(OrderDate);",
            "SELECT COUNT(*) AS AtOrAboveReOrder FROM products WHERE UnitsInStock >= ReorderLevel;",
            "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 0;",
            "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) AS MonthlyInventoryTurnover FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName;",
            "SELECT ProductID, ProductName, SUM(Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductID, ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
            "SELECT ProductID, ProductName FROM products WHERE SupplierID = YOUR_SUPPLIER_ID;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details] WHERE ProductID = YOUR_PRODUCT_ID;",
            "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE CategoryID = YOUR_CATEGORY_ID GROUP BY CategoryID;",
            "SELECT COUNT(*) AS DiscontinuedInStock FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < 10 AND UnitsOnOrder > 20;",
            "SELECT SUM(Quantity) AS TotalUnitsOrdered FROM [Order Details] WHERE OrderDate >= DATEADD(month, -1, CURRENT_DATE);",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductVariety FROM products GROUP BY SupplierID ORDER BY ProductVariety DESC;",
            "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS RevenueWithDiscount, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS RevenueWithoutDiscount FROM [Order Details];",
            "SELECT DATE_TRUNC('month', OrderDate) AS OrderMonth, SUM(Quantity) AS TotalQuantity FROM [Order Details] WHERE ProductID = YOUR_PRODUCT_ID GROUP BY OrderMonth ORDER BY OrderMonth;",
            "SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID ORDER BY AveragePrice DESC;",
            "SELECT ProductID, ProductName, (CAST(UnitPrice AS DOUBLE) / ReorderLevel) AS PriceToReorderRatio FROM products;",
            "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF((SELECT SUM(Quantity * UnitPrice) FROM [Order Details]), 0) * 100 AS CategoryContribution FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY CategoryID;",
            "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) AS InventoryTurnover FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE DATE_TRUNC('month', orders.OrderDate) = DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' GROUP BY products.ProductID, products.ProductName ORDER BY InventoryTurnover DESC LIMIT 1;",
            "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM products) AS PercentageDiscontinued FROM products WHERE Discontinued = 1;",
            "SELECT ProductName, UnitPrice FROM products WHERE Discontinued = 1;",
            "SELECT ProductName FROM products ORDER BY UnitPrice DESC LIMIT 5;",
            "SELECT ProductName FROM products WHERE UnitsInStock < 10 AND UnitsInStock <= ReorderLevel;",
            "SELECT COUNT(*) FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
            "SELECT AVG(Discount) FROM [Order Details];",
            "SELECT SupplierID FROM products ORDER BY UnitPrice DESC LIMIT 1;",
            "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT ProductName, (SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(UnitsInStock), 0)) AS InventoryTurnoverRatio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName ORDER BY InventoryTurnoverRatio DESC LIMIT 1;",
            "SELECT CategoryID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY CategoryID ORDER BY TotalUnitsOnOrder DESC LIMIT 1;",
            "SELECT SUM(UnitPrice * UnitsInStock) FROM products WHERE Discontinued = 0;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT COUNT(DISTINCT OrderID) FROM [Order Details] WHERE Quantity > 100;",
            "SELECT SupplierID, COUNT(*) FROM products WHERE Discontinued = 1 GROUP BY SupplierID ORDER BY COUNT(*) DESC LIMIT 1;",
            "SELECT ProductName, COUNT([Order Details].OrderID) AS OrderCount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName ORDER BY OrderCount DESC FETCH FIRST 1 ROW ONLY;",
            "SELECT ProductName, SUM(Quantity) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 0 GROUP BY ProductName ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalUnitsOrdered FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE Discount > 0.1 GROUP BY products.ProductName;",
            "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, SUM(Quantity * UnitPrice) AS TotalSales FROM [Order Details] WHERE OrderDate >= DATEADD(MONTH, -3, CURRENT_DATE) GROUP BY EXTRACT(MONTH FROM OrderDate);",
            "SELECT ProductName FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName HAVING SUM([Order Details].Quantity * [Order Details].UnitPrice) > 5000;",
            "SELECT ProductName, UnitsInStock - SUM(Quantity) AS StockToOrderDifference FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(CAST(p.UnitsInStock AS FLOAT)), 0) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName;",
            "SELECT c.CategoryName, AVG(p.UnitPrice) AS AveragePrice FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryName;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
            "SELECT SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscount FROM [Order Details] od;",
            "SELECT ProductName FROM products WHERE UnitsInStock = 0 AND UnitsOnOrder = 0;",
            "SELECT c.CategoryName, AVG(p.ReorderLevel) AS AverageReorderLevel FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryName;",
            "SELECT COUNT(*) FROM products WHERE UnitsInStock > ReorderLevel;",
            "SELECT DISTINCT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0.2;",
            "SELECT ProductName, UnitsInStock * UnitPrice AS StockValue FROM products;",
            "SELECT ProductName, MAX(UnitsInStock) - MIN(UnitsInStock) AS StockVariance FROM products GROUP BY ProductName ORDER BY StockVariance DESC;",
            "SELECT ProductName, (UnitsOnOrder - ReorderLevel) AS ReorderDifference FROM products WHERE (UnitsOnOrder - ReorderLevel) > 0;",
            "SELECT c.CategoryName, COUNT(p.ProductID) AS DiscontinuedCount FROM products p JOIN categories c ON p.CategoryID = c.CategoryID WHERE p.Discontinued = 1 GROUP BY c.CategoryName ORDER BY DiscontinuedCount DESC LIMIT 1;",
            "SELECT s.SupplierName, SUM(od.Quantity) AS SalesPerformance FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierName;",
            "SELECT p.ProductName, SUM(od.Quantity) AS MonthlyPerformance, EXTRACT(MONTH FROM o.OrderDate) AS Month FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATEADD(year, -1, CURRENT_DATE) GROUP BY p.ProductName, Month;",
            "SELECT SUM(od.Quantity * od.UnitPrice * od.Discount) AS DiscountImpact FROM [Order Details] od;",
            "SELECT ProductID, UnitsInStock FROM products;",
            "SELECT ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS TurnoverRatio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductID ORDER BY TurnoverRatio DESC;",
            "SELECT ProductID, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 5;",
            "SELECT COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT CategoryID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY CategoryID;",
            "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM products) AS PercentageBelowReorderLevel FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID;",
            "SELECT ReorderLevel, COUNT(*) AS NumberOfProducts FROM products GROUP BY ReorderLevel;",
            "SELECT DISTINCT ProductID FROM [Order Details] WHERE Discount > 0;",
            "SELECT ProductID, ProductName, UnitPrice FROM products WHERE UnitsInStock > 0 ORDER BY UnitPrice DESC LIMIT 1;",
            "SELECT SUM(Quantity) AS TotalQuantityOrderedLastMonth FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE order_date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) AND CURRENT_DATE);",
            "SELECT COUNT(DISTINCT OrderID) AS NumberOfOrdersWithDiscount FROM [Order Details] WHERE Discount > 0;",
            "SELECT AVG(SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0)) AS AverageTurnoverRatio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID;",
            "SELECT CategoryID, SUM(UnitsInStock) AS TotalUnitsInStock FROM products GROUP BY CategoryID ORDER BY TotalUnitsInStock DESC;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT AVG([Order Details].Quantity) FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1;",
            "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY CategoryID;",
            "SELECT DISTINCT SupplierID FROM products WHERE UnitsInStock = 0;",
            "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE) AND YEAR(OrderDate) = YEAR(CURRENT_DATE);",
            "SELECT ProductID FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE) - 1 AND YEAR(OrderDate) = YEAR(CURRENT_DATE) ORDER BY SUM(Quantity) DESC LIMIT 1;",
            "SELECT COUNT(DISTINCT ProductID) FROM [Order Details] WHERE Discount > 0;",
            "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT ProductName FROM products WHERE ReorderLevel > 10 AND Discontinued = 1;",
            "SELECT AVG(UnitPrice) FROM [Order Details] WHERE Quantity > 100;",
            "SELECT COUNT(ProductID) FROM products WHERE UnitsInStock > ReorderLevel AND Discontinued = 0;",
            "SELECT products.ProductID, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID;",
            "SELECT SupplierID, SUM([Order Details].Quantity) FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY SupplierID;",
            "SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
            "SELECT (COUNT(CASE WHEN Discontinued = 1 THEN 1 END) * 100.0) / COUNT(*) FROM products;",
            "SELECT CategoryID, AVG([Order Details].Quantity) FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND CURRENT_DATE GROUP BY CategoryID;",
            "SELECT ProductName, UnitsInStock FROM products;",
            "SELECT ProductName FROM products WHERE Discontinued = 1;",
            "SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID;",
            "SELECT SupplierID, COUNT(ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID ORDER BY NumberOfProducts DESC LIMIT 1;",
            "SELECT P.ProductName, SUM(OD.Quantity * OD.UnitPrice) AS TotalSales FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID WHERE DATE_FORMAT(CURDATE(), '%Y-%m') = DATE_FORMAT(CURRENT_DATE(), '%Y-%m') GROUP BY P.ProductName;",
            "SELECT P.ProductName, SUM(OD.Discount * OD.Quantity * OD.UnitPrice) AS TotalDiscount FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID GROUP BY P.ProductName;",
            "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
            "SELECT P.ProductName, SUM(OD.Quantity) AS TotalSales FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID GROUP BY P.ProductName;",
            "SELECT CategoryID, AVG(UnitsOnOrder) AS AverageOnOrder FROM products GROUP BY CategoryID ORDER BY AverageOnOrder DESC LIMIT 1;",
            "SELECT P.ProductName, SUM(OD.Quantity) AS QuantitySold FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID WHERE QUARTER(OD.OrderID) = QUARTER(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER)) AND YEAR(OD.OrderID) = YEAR(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER)) GROUP BY P.ProductName ORDER BY QuantitySold DESC;",
            "SELECT SupplierID, COUNT(ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID;",
            "SELECT DATE_TRUNC('month', O.OrderDate) AS Month, SUM(OD.Quantity * OD.UnitPrice) / AVG(P.UnitsInStock) AS InventoryTurnover FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID JOIN orders O ON OD.OrderID = O.OrderID GROUP BY Month ORDER BY Month;",
            "SELECT CategoryID, P.ProductName, SUM(OD.Quantity) AS TotalSales FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID GROUP BY CategoryID, P.ProductName ORDER BY CategoryID, TotalSales DESC;",
            "SELECT ProductName, UnitPrice FROM products WHERE UnitPrice = (SELECT MAX(UnitPrice) FROM products);",
            "SELECT P.ProductName, SUM(OD.Quantity) AS TotalQuantity FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID GROUP BY P.ProductName;",
            "SELECT P.ProductName, AVG(OD.Discount) AS AverageDiscount FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID WHERE MONTH(OD.OrderID) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(OD.OrderID) = YEAR(CURDATE() - INTERVAL 1 MONTH) GROUP BY P.ProductName;",
            "SELECT ProductName FROM products WHERE UnitsInStock > 0;",
            "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
            "SELECT SUM(UnitPrice * UnitsInStock) FROM products;",
            "SELECT COUNT(*) FROM products WHERE UnitsInStock > 0 AND Discontinued = 1;",
            "SELECT AVG(UnitPrice) FROM products WHERE UnitsOnOrder > 0;",
            "SELECT CategoryID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY CategoryID ORDER BY TotalUnitsOnOrder DESC;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM [Order Details];",
            "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderDate BETWEEN '2023-09-01' AND '2023-09-30';",
            "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderDate BETWEEN '2023-09-01' AND '2023-09-30' GROUP BY products.ProductID, products.ProductName ORDER BY TotalQuantity DESC FETCH FIRST 5 ROWS ONLY;",
            "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY CategoryID;",
            "SELECT ProductName FROM products WHERE UnitPrice < (SELECT AVG(UnitPrice) FROM products);",
            "SELECT ProductName FROM products WHERE ReorderLevel > 20 AND ReorderLevel < 100;",
            "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderDate >= DATEADD(month, -1, GETDATE()) GROUP BY products.ProductID, products.ProductName;",
            "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID, products.ProductName ORDER BY TotalRevenue DESC;",
            "SELECT products.ProductID, products.ProductName, AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY products.ProductID, products.ProductName;",
            "SELECT ProductName FROM products WHERE UnitsInStock < 0.1 * ReorderLevel;",
            "SELECT p.ProductID, p.ProductName, (p.UnitsInStock - COALESCE(l.UnitsInStock, 0)) AS StockDifference FROM products p LEFT JOIN (SELECT ProductID, UnitsInStock FROM products WHERE OrderDate = '2023-08-01') AS l ON p.ProductID = l.ProductID WHERE OrderDate = '2023-09-01';",
            "SELECT products.ProductID, products.ProductName, MAX([Order Details].UnitPrice) - MIN([Order Details].UnitPrice) AS PriceIncrease FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderDate >= DATEADD(year, -1, CURRENT_DATE) GROUP BY products.ProductID, products.ProductName;",
            "SELECT ProductID, SUM(Quantity) AS TotalUnitsOrdered FROM [Order Details] GROUP BY ProductID;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 0;",
            "SELECT ProductID, UnitsOnOrder FROM products ORDER BY UnitsOnOrder DESC LIMIT 5;",
            "SELECT * FROM [Order Details] WHERE Discount > 0;",
            "SELECT ProductID, ProductName FROM products ORDER BY UnitsInStock ASC LIMIT 1;",
            "SELECT ProductID, (UnitsInStock - ReorderLevel) AS ReorderStatus FROM products;",
            "SELECT SUM(Discount * Quantity * UnitPrice) AS TotalDiscount FROM [Order Details];",
            "SELECT CategoryID, COUNT(*) AS OrderCount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY CategoryID ORDER BY OrderCount DESC;",
            "SELECT SUM(UnitPrice * UnitsInStock) AS TotalStockValue FROM products;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, ProductID, SUM(Quantity) AS TotalPerformance FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY Month, ProductID;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT ProductID, SUM(Quantity * UnitPrice) AS HighestSalesRevenue FROM [Order Details] GROUP BY ProductID ORDER BY HighestSalesRevenue DESC LIMIT 5;",
            "SELECT SupplierID FROM products GROUP BY SupplierID HAVING COUNT(CASE WHEN Discontinued = 0 THEN 1 END) = 0;",
            "SELECT COUNT(ProductID) AS NumberOfProducts FROM products WHERE UnitsInStock = 0 AND UnitsOnOrder = 0;",
            "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
            "SELECT DISTINCT SupplierID FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 0;",
            "SELECT ProductName FROM products ORDER BY UnitsInStock DESC LIMIT 5;",
            "SELECT AVG(UnitPrice) FROM products;",
            "SELECT c.CategoryName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryName;",
            "SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE order_date > DATEADD(MONTH, -1, CURRENT_DATE) GROUP BY p.ProductID, p.ProductName ORDER BY SUM(od.Quantity) DESC LIMIT 1;",
            "SELECT p.ProductName, AVG(od.Discount) AS AverageDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;",
            "SELECT ProductName FROM products WHERE UnitsInStock - UnitsOnOrder = (SELECT MAX(UnitsInStock - UnitsOnOrder) FROM products);",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID;",
            "SELECT s.SupplierName, p.ProductName, SUM(od.Quantity) FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierName, p.ProductName;",
            "SELECT p.ProductName, SUM(od.Quantity * (1 - od.Discount) * od.UnitPrice) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;",
            "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT c.CategoryName, COUNT(p.ProductID) AS ProductCount FROM categories c JOIN products p ON c.CategoryID = p.CategoryID GROUP BY c.CategoryName ORDER BY ProductCount DESC FETCH FIRST 3 ROWS ONLY;",
            "SELECT ProductName FROM products WHERE ReorderLevel = (SELECT MAX(ReorderLevel) FROM products);",
            "SELECT c.CategoryName, VARIANCE(p.UnitPrice) FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryName;",
            "SELECT p.ProductName, COUNT(od.Discount) AS DiscountCount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.Discount > 0 GROUP BY p.ProductName ORDER BY DiscountCount DESC;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalSalesVolume, COUNT(od.OrderID) AS OrderCount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalSalesVolume DESC, OrderCount DESC;",
            "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock < ReorderLevel;",
            "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC;",
            "SELECT SupplierID, ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalSold DESC LIMIT 5;",
            "SELECT COUNT(*) FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT CategoryID, AVG(UnitPrice) FROM products GROUP BY CategoryID ORDER BY AVG(UnitPrice) DESC LIMIT 1;",
            "SELECT AVG(Discount) FROM [Order Details];",
            "SELECT p.ProductName, EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, COUNT(*) AS OrderCount, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, EXTRACT(MONTH FROM o.OrderDate);",
            "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
            "SELECT p.CategoryID, p.ProductName, p.UnitPrice FROM products p JOIN (SELECT CategoryID, MAX(UnitPrice) AS MaxPrice FROM products GROUP BY CategoryID) pm ON p.CategoryID = pm.CategoryID AND p.UnitPrice = pm.MaxPrice;",
            "SELECT AVG(UnitsOnOrder) FROM products;",
            "SELECT p.ProductName, od.UnitPrice FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, od.UnitPrice ORDER BY COUNT(od.ProductID) DESC LIMIT 1;",
            "SELECT ProductName FROM products WHERE ReorderLevel > UnitsInStock;",
            "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 3;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS Revenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY Revenue DESC;",
            "SELECT p.ProductName, AVG(od.Quantity) AS AvgQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;",
            "SELECT ProductName FROM (SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS TurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName) AS Turnover WHERE TurnoverRatio < (SELECT AVG(TurnoverRatio) FROM (SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS TurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID) AS AvgTurnover);",
            "SELECT ProductName FROM products ORDER BY UnitsInStock DESC LIMIT 5;",
            "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;",
            "SELECT products.ProductName, SUM([Order Details].Quantity) as TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) GROUP BY products.ProductName ORDER BY TotalSales DESC;",
            "SELECT ProductName, SUM([Order Details].UnitPrice * Quantity) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName;",
            "SELECT SupplierID, ProductName FROM products WHERE UnitsInStock = 0;",
            "SELECT products.ProductName, [Order Details].Discount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) ORDER BY [Order Details].Discount DESC LIMIT 1;",
            "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE OrderDate >= CURDATE() - INTERVAL '1' MONTH;",
            "SELECT ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) as InventoryTurnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY products.ProductID HAVING InventoryTurnover < 1;",
            "SELECT ProductName, (UnitsInStock - (SELECT SUM(Quantity) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE [Order Details].ProductID = products.ProductID AND orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH))) as StockReduction FROM products;",
            "SELECT COUNT(*) FROM products WHERE UnitsOnOrder = 0;",
            "SELECT ProductName FROM products WHERE UnitPrice < (SELECT AVG(UnitPrice) FROM products);",
            "SELECT ProductName, SUM(Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID ORDER BY TotalQuantity DESC LIMIT 3;",
            "SELECT ProductName, SUM(Discount * Quantity * UnitPrice) as TotalDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName;",
            "SELECT products.ProductName FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderDate >= DATEADD(month, -1, CURRENT_DATE) GROUP BY products.ProductName HAVING SUM([Order Details].Quantity) > 100;",
            "SELECT ProductName, UnitPrice FROM products WHERE UnitsInStock > 0 AND UnitPrice = (SELECT MAX(UnitPrice) FROM products WHERE UnitsInStock > 0) UNION SELECT ProductName, UnitPrice FROM products WHERE UnitsInStock > 0 AND UnitPrice = (SELECT MIN(UnitPrice) FROM products WHERE UnitsInStock > 0);",
            "SELECT ProductName, UnitsInStock FROM products;",
            "SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE EXTRACT(MONTH FROM o.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) AND EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY p.ProductName;",
            "SELECT SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od WHERE od.OrderID IN (SELECT OrderID FROM orders WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE) AND YEAR(OrderDate) = YEAR(CURRENT_DATE));",
            "SELECT CategoryID, SUM(UnitsInStock) AS TotalStock FROM products GROUP BY CategoryID ORDER BY TotalStock DESC;",
            "SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE EXTRACT(MONTH FROM od.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE - INTERVAL '1 month') AND EXTRACT(YEAR FROM od.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '1 month') GROUP BY p.ProductName ORDER BY SUM(od.Quantity) DESC FETCH FIRST 1 ROW ONLY;",
            "SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE MONTH(CURRENT_DATE) = MONTH(od.OrderDate) AND YEAR(CURRENT_DATE) = YEAR(od.OrderDate);",
            "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;",
            "SELECT ProductName FROM products WHERE UnitsInStock = 0 AND UnitsOnOrder = 0;",
            "SELECT (CAST(SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(ProductID)) * 100 AS DiscontinuedPercentage FROM products;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE EXTRACT(QUARTER FROM o.OrderDate) = EXTRACT(QUARTER FROM CURRENT_DATE) - 1 AND EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY p.ProductName ORDER BY TotalSales DESC;",
            "SELECT DISTINCT SupplierID FROM products WHERE UnitsInStock = 0;",
            "SELECT SupplierID, SUM(od.Quantity) AS TotalOrdered FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY SupplierID;",
            "SELECT ProductName FROM products WHERE ReorderLevel > 2 * UnitsInStock;",
            "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
            "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;",
            "SELECT ProductName, UnitsInStock FROM products WHERE Discontinued = 1;",
            "SELECT ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName ORDER BY TotalQuantity DESC FETCH FIRST 5 ROWS ONLY;",
            "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount) AS TotalDiscount FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE());",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 0 ORDER BY UnitsInStock, UnitsOnOrder ASC;",
            "SELECT ProductName, UnitsOnOrder FROM products ORDER BY UnitsOnOrder DESC LIMIT 1;",
            "SELECT AVG([Order Details].UnitPrice) AS AvgUnitPrice FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE());",
            "SELECT SupplierID, COUNT(ProductID) AS DiscontinuedCount FROM products WHERE Discontinued = 1 GROUP BY SupplierID ORDER BY DiscontinuedCount DESC;",
            "SELECT o.ProductID, SUM(o.Quantity) AS SalesLastThreeMonths FROM [Order Details] o JOIN orders od ON o.OrderID = od.OrderID WHERE od.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE() GROUP BY o.ProductID ORDER BY SalesLastThreeMonths DESC;",
            "SELECT QuantityPerUnit, COUNT(*) AS Count FROM products WHERE UnitsInStock > 0 GROUP BY QuantityPerUnit ORDER BY Count DESC LIMIT 1;",
            "SELECT ProductName, AVG(Discount) AS AvgDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName ORDER BY AvgDiscount DESC;",
            "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) AS InventoryTurnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID, products.ProductName ORDER BY InventoryTurnover ASC LIMIT 1;",
            "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY CategoryID ORDER BY TotalRevenue DESC LIMIT 3;",
            "SELECT ProductName, SUM(UnitsInStock) AS TotalStock FROM products GROUP BY ProductName ORDER BY SUM(UnitsInStock) DESC;",
            "SELECT COUNT(ProductID) AS DiscontinuedCount FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
            "SELECT CategoryID, COUNT(*) AS ExceedCount FROM products WHERE UnitsInStock > ReorderLevel GROUP BY CategoryID HAVING COUNT(*) > 0;",
            "SELECT COUNT(DISTINCT OrderID) AS OrdersWithDiscontinued FROM [Order Details] WHERE ProductID IN (SELECT ProductID FROM products WHERE Discontinued = 1);",
            "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
            "SELECT DATE_TRUNC('month', od.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY DATE_TRUNC('month', od.OrderDate);",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE DATE_TRUNC('month', CURRENT_DATE) = DATE_TRUNC('month', od.OrderDate) GROUP BY p.ProductName;",
            "SELECT ProductName FROM products WHERE Discontinued = 1 ORDER BY UnitPrice DESC LIMIT 5;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC FETCH FIRST 5 ROWS ONLY;",
            "SELECT COUNT(ProductID) AS NumberOfProductsWithZeroStock FROM products WHERE UnitsInStock = 0;",
            "SELECT SupplierID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY SupplierID;",
            "SELECT ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;",
            "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY CategoryID ORDER BY TotalRevenue DESC;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT SUM(od.Discount) AS TotalDiscount FROM [Order Details] od WHERE DATE_TRUNC('month', CURRENT_DATE) = DATE_TRUNC('month', OrderDate);",
            "SELECT od.Discount, COUNT(DISTINCT od.ProductID) AS ProductCount FROM [Order Details] od GROUP BY od.Discount;",
            "SELECT AVG(turnover) AS YearlyInventoryTurnover FROM (SELECT SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS turnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE EXTRACT(YEAR FROM CURRENT_DATE) = EXTRACT(YEAR FROM OrderDate) GROUP BY od.ProductID) AS turnovers;",
            "SELECT p.ProductName, SUM(od.Quantity) AS ProductPerformance FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY ProductPerformance DESC LIMIT 1 UNION ALL SELECT p.ProductName, SUM(od.Quantity) AS ProductPerformance FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY ProductPerformance ASC LIMIT 1;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, p.ProductName, SUM(od.Quantity) AS MonthlyQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY DATE_TRUNC('month', OrderDate), p.ProductName;",
            "SELECT SupplierID, COUNT(*) AS ProductsUnderReorder FROM products WHERE UnitsInStock < ReorderLevel GROUP BY SupplierID ORDER BY ProductsUnderReorder DESC;",
            "SELECT p.SupplierID, SUM(p.UnitPrice * p.UnitsInStock) AS TotalInventoryValue FROM products p GROUP BY p.SupplierID;",
            "SELECT COUNT(DISTINCT ProductID) AS DiscontinuedCount FROM products WHERE Discontinued = 1;",
            "SELECT p.CategoryID, AVG(p.UnitPrice) AS AverageUnitPrice FROM products p GROUP BY p.CategoryID;",
            "SELECT p.ProductID, p.UnitsOnOrder FROM products p ORDER BY p.UnitsOnOrder DESC LIMIT 1;",
            "SELECT DISTINCT SupplierID FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT p.CategoryID, AVG(p.UnitsInStock) AS AverageUnitsInStock FROM products p GROUP BY p.CategoryID ORDER BY AverageUnitsInStock DESC;",
            "SELECT od.ProductID, SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscount FROM [Order Details] od GROUP BY od.ProductID;",
            "SELECT p.CategoryID, p.ProductID, p.ProductName, p.UnitsInStock FROM products p ORDER BY p.CategoryID;",
            "SELECT SUM(od.Quantity * od.UnitPrice) AS Revenue FROM [Order Details] od WHERE od.OrderID IN (SELECT o.OrderID FROM orders o WHERE o.OrderDate >= DATEADD(month, -1, CURRENT_DATE));",
            "SELECT AVG(od.Discount) AS AverageDiscount FROM [Order Details] od;",
            "SELECT od.ProductID, SUM(od.Quantity) AS UnitsSold FROM [Order Details] od WHERE od.OrderID IN (SELECT o.OrderID FROM orders o WHERE YEAR(o.OrderDate) = YEAR(GETDATE()) - 1) GROUP BY od.ProductID;",
            "SELECT (COUNT(CASE WHEN Discontinued = 1 THEN 1 END) * 100.0 / COUNT(*)) AS DiscontinuedPercentage FROM products;",
            "SELECT od.ProductID, SUM(od.Quantity * od.UnitPrice) AS TotalSalesValue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalSalesValue DESC LIMIT 1;",
            "SELECT p.SupplierID, COUNT(*) AS ProductsOnOrder FROM products p WHERE p.UnitsOnOrder > 0 GROUP BY p.SupplierID;",
            "SELECT od.ProductID, DATE_FORMAT(o.OrderDate, '%Y-%m') AS OrderMonth, SUM(od.Quantity) AS MonthlySales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -6, GETDATE()) GROUP BY od.ProductID, OrderMonth ORDER BY OrderMonth DESC;",
            "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
            "SELECT AVG(UnitPrice) FROM products;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY InventoryTurnover DESC FETCH FIRST 5 ROWS ONLY;",
            "SELECT s.SupplierID, COUNT(p.ProductID) AS ProductsOnOrder FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.UnitsOnOrder > 0 GROUP BY s.SupplierID ORDER BY ProductsOnOrder DESC;",
            "SELECT SUM(Quantity * UnitPrice * Discount) FROM [Order Details];",
            "SELECT p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;",
            "SELECT ProductName FROM products WHERE UnitsInStock > 0 AND Discontinued = 0 ORDER BY UnitsInStock ASC LIMIT 1;",
            "SELECT ProductName, ReorderLevel FROM products ORDER BY ReorderLevel DESC;",
            "SELECT p.SupplierID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",
            "SELECT OrderID, AVG(Discount) AS AverageDiscount FROM [Order Details] GROUP BY OrderID;",
            "SELECT c.CategoryID, COUNT(p.ProductID) AS DiscontinuedCount FROM products p JOIN categories c ON p.CategoryID = c.CategoryID WHERE p.Discontinued = 1 GROUP BY c.CategoryID ORDER BY DiscontinuedCount DESC;",
            "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
            "SELECT COUNT(*) FROM (SELECT p.ProductID FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID HAVING SUM(od.Quantity * od.UnitPrice) > 10000) AS subquery;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC;",
            "SELECT ProductName, UnitPrice / CAST(SUBSTRING_INDEX(QuantityPerUnit, ' ', 1) AS DECIMAL) AS PriceToQuantityRatio FROM products ORDER BY PriceToQuantityRatio DESC;",
            "SELECT ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantityOrdered FROM [Order Details] GROUP BY ProductID;",
            "SELECT SupplierID, AVG(UnitPrice) AS AverageUnitPrice FROM products GROUP BY SupplierID;",
            "SELECT p.ProductID, SUM(od.Quantity) AS TotalQuantitySold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY TotalQuantitySold DESC LIMIT 5;",
            "SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.CategoryID;",
            "SELECT COUNT(*) AS TotalDiscontinued FROM products WHERE Discontinued = 1;",
            "SELECT ProductID, SUM(Quantity * UnitPrice * Discount) AS TotalDiscount FROM [Order Details] GROUP BY ProductID;",
            "SELECT c.CategoryID, SUM(p.UnitPrice * p.UnitsInStock) AS TotalInventoryValue FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
            "SELECT ProductName, (UnitPrice - ReorderLevel) AS PriceReorderDifference FROM products ORDER BY PriceReorderDifference DESC LIMIT 1;",
            "SELECT CategoryID, AVG(CAST(QuantityPerUnit AS DECIMAL)) AS AverageQuantityPerUnit FROM products GROUP BY CategoryID;",
            "SELECT DISTINCT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.Discount > 0.20;",
            "SELECT SupplierID FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY SupplierID HAVING COUNT(od.ProductID) > 100;",
            "SELECT p.ProductID, SUM(od.Quantity) AS TotalUnitsOrdered FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 0 GROUP BY p.ProductID;",
            "SELECT SupplierID, MAX(ReorderLevel) AS MaxReorderLevel FROM products GROUP BY SupplierID;",
            "SELECT MIN(UnitPrice) FROM products WHERE UnitsOnOrder > 0;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) as TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalRevenue DESC LIMIT 5;"
        ],
        "reviews": [
            "The SQL query is correct. It selects the product names from the products table where the units in stock are less than or equal to the reorder level and the product is not discontinued.",
            "The SQL query is correct. It correctly retrieves the products that are discontinued (Discontinued = 1) and still have units in stock (UnitsInStock > 0).",
            "The query appears to be correct assuming the 'categories' table exists and is not included in the provided schema. Ensure the 'categories' table and 'CategoryID' column exists. Otherwise, the logic and syntax meet the business question requirements.",
            "The original query incorrectly calculates the date range for the previous month. It should use DATE_TRUNC to ensure it targets the start of the month and the end of the month properly. Additionally, the column 'OrderDate' was not present in the schema provided. If 'OrderDate' is correct, it should be included in '[Order Details]' or another table.",
            "The query uses a 'YEAR(od.OrderDate)' clause, but the 'Order Details' table does not contain an 'OrderDate' column according to the schema provided. Therefore, the query is incorrect as it references a non-existent column. Adjustments need to be made based on available data, or alternatively, include the appropriate date information in the schema.",
            "The query contains an error: there is no 'OrderDate' column specified in the 'Order Details' table. Assuming 'OrderDate' exists in another related table, this needs to be joined. Additionally, last quarter should be defined accurately instead of using DATE_SUB default. Here is a corrected version: \n\nSELECT p.ProductID, SUM(od.Quantity) AS TotalSold \nFROM [Order Details] od \nJOIN products p ON od.ProductID = p.ProductID \n-- Add appropriate join for orders table to get the OrderDate\nWHERE -- assuming OrderDate is available in a separate table, e.g., 'orders' as ord\n  ord.OrderDate BETWEEN DATE_SUB(LAST_DAY(CURDATE() - INTERVAL 3 MONTH), INTERVAL 2 MONTH) AND LAST_DAY(CURDATE() - INTERVAL 1 MONTH) \nGROUP BY p.ProductID;",
            "The SQL query is correct. It selects the SupplierID and counts the products where the units in stock are less than or equal to the reorder level, groups by SupplierID, and orders by the count in descending order.",
            "The SQL query correctly calculates the total revenue by considering the discount on each product order. The formula multiplies the quantity, unit price, and the discount factor (1 - Discount), which is accurate for finding the revenue post-discount.",
            "The query is correct. It selects the product names and units in stock, ordering by stock levels in descending order, and limits the result to the top 5.",
            "The provided query incorrectly joins a 'categories' table that is not defined in the schema. The correct query can be formed directly from the 'products' table, assuming 'CategoryID' is available for aggregation.",
            "The query contains a mistake: the 'OrderDate' column does not exist in the '[Order Details]' table based on the provided schema. A correct approach would be to ensure that the 'OrderDate' field is used correctly from the corresponding 'orders' table, assuming it is linked via an 'Order' table that is not shown in the schema. Additionally, the logic for finding products not ordered in the past 6 months should focus just on checking absence in the recent 6 months rather than using 'IS NULL' with the 'LEFT JOIN' without proper filtering mechanism. Therefore, the SQL logic needs to reflect these considerations, but due to missing complete schema, the exact correct query can't be determined from the provided information.",
            "The original query used DATE_SUB with CURDATE() to filter the last month, but it did not consider the proper handling to ensure the entire last month is captured correctly. The corrected query uses YEAR and MONTH functions to filter the last month reliably.",
            "The SQL query is correct. It selects products that are discontinued and have stock less than or equal to the reorder level.",
            "The query is incorrect because the WHERE clause condition 'YEAR(CURDATE()) = YEAR()' is invalid. If date filtering is needed, it must include a valid date comparison column. Since there's no timeline specified for stock levels in the schema, the WHERE clause has been removed.",
            "The SQL query is correct. It calculates the average discount applied across all orders by using AVG function on the Discount column in the [Order Details] table.",
            "The original query is incorrect because 'OrderDate' is missing from the provided schema. Without an 'OrderDate' column, the filtering condition is invalid and should be removed. Additionally, because there should be a mechanism to determine the scope of the orders by year, here\u2019s what should be done: If 'OrderDate' was expected, it should be reviewed and added accordingly. Otherwise, clarify the context or expected timeframe for the orders.",
            "The query is correct and accurately identifies products with zero units in stock but with pending orders.",
            "The original query incorrectly uses YEAR(od.OrderDate) = YEAR(CURDATE()) which checks for the current year only. Modified to use od.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) to include the last year from the current date.",
            "The SQL query correctly calculates the discrepancy between units in stock and units on order using the ABS function and sorts the results in descending order. The query is correct.",
            "The original query incorrectly joins to a 'categories' table, which is not provided in the schema. The corrected query properly calculates the average unit price for each category using a subquery within the WHERE clause and compares it against each product's unit price.",
            "The SQL query is correct and accurately answers the business question by summing the UnitsInStock for each CategoryID in the products table.",
            "The SQL query correctly retrieves the names of products with a unit price greater than the average unit price of all products. The use of a subquery to calculate the average is appropriate here.",
            "The SQL query correctly identifies products that need to be reordered by checking if the UnitsInStock is less than or equal to the ReorderLevel. The query is accurate and adheres to the requirements.",
            "The original query incorrectly calculates the date range to include the entire last month. The revised query now correctly selects all dates from the first to the last day of the previous month, and ensures the correct use of DATEADD and DATEFROMPARTS to get the date range.",
            "The SQL query is correct. It calculates the total sales amount per product, accounting for discounts by multiplying the UnitPrice by (1 - Discount) and then multiplying by the Quantity. The results are grouped by ProductID to give the total sales per product.",
            "The SQL query is correct. It joins the 'products' and '[Order Details]' tables, aggregates the total sales value per product, groups by 'ProductName', and orders by 'TotalSales' in descending order, limiting the results to 5. The query aligns with the business question.",
            "The query is correct. It selects distinct SupplierIDs from the products table where the products are marked as discontinued.",
            "Fixed the date function to use 'CURRENT_DATE'. Added join with 'products' table for product names. Used 'FETCH FIRST 5 ROWS ONLY' for ANSI SQL compliance.",
            "The given SQL query correctly calculates the difference between 'UnitsOnOrder' and 'UnitsInStock' for each product using data from the 'products' table. The SQL query is accurate and matches the business question requirements.",
            "The query attempts to calculate the average discount per month, but it references 'OrderDate' which is not present in the '[Order Details]' table. The query needs additional context, such as an 'orders' table, to access the 'OrderDate'. Without available schema that includes 'OrderDate', this query cannot be corrected as it stands. Please check for the correct table containing 'OrderDate' and join it appropriately.",
            "The original query works correctly with a slight adjustment. COUNT(OrderID) should be used in the HAVING clause instead of the alias 'OrderCount'. The rest of the query is correct.",
            "The original query incorrectly calculates AverageSales by dividing total sales by the count of orders, rather than dividing by the total quantity to correctly reflect average unit price based on quantities sold.",
            "The original query lacks a proper reference to the OrderDate, which should be derived from an 'orders' table, assuming it exists. A monthly granularity requires truncating the date to the month level. Ensure TARGET_VALUE is defined or replaced before executing the query.",
            "The SQL query is correct. It selects the product names from the 'products' table where 'UnitsInStock' is less than 'ReorderLevel', which accurately answers the business question.",
            "The original query uses 'GETDATE()' which is not ANSI SQL. It should be replaced with 'CURRENT_DATE'. Additionally, ensure that the 'OrderDate' field exists in the '[Order Details]' table and that the logic correctly identifies products not ordered in the last six months.",
            "The query correctly calculates the total sales for each product category by joining the products table with the 'Order Details' table on ProductID, and then joining with a categories table (which needs to exist as assumed by the description) on CategoryID. The query groups the results by CategoryID to aggregate the total sales for each category.",
            "The SQL query is correct as it accurately selects all products where the reorder level is greater than the current units in stock, focusing only on the ProductName column from the products table.",
            "The original query needed consideration of order dates to assess trends. It should compare sales from the current year to the previous year to analyze the declining trend within the past year. Additionally, the OrderDate column was missing in the provided schema, so it should logically be present for this query to work.",
            "The query correctly calculates the average quantity per order for each product category by joining the products and [Order Details] tables on ProductID. It groups the result by CategoryID, which fulfills the business question requirement. The query is correct.",
            "The query correctly calculates the average unit price for each category using the AVG function and groups the results by CategoryID. It then orders the results in descending order to show categories with the highest average unit price first. The SQL query appears to be correct.",
            "The original query had a couple of issues. The function GETDATE() is typically used in SQL Server to get the current date and time, but it was missing in the schema definition that 'OrderDate' is a column. If 'OrderDate' doesn't exist, the query will fail. Assuming 'OrderDate' is valid, the usage should be adjusted based on the SQL dialect to use CURRENT_DATE to match ANSI SQL. Additionally, ensure 'OrderDate' exists in the '[Order Details]' table.",
            "The SQL query is almost correct, but it assumes that there is a suppliers table. The schema does not mention a suppliers table or SupplierName. If such a table exists, the query is correct. Otherwise, information about the suppliers cannot be retrieved as intended.",
            "The query is correct. It calculates the average discount from the [Order Details] table using the AVG function on the Discount column.",
            "The SQL query is correct. It counts the number of products where the 'Discontinued' flag is set to 1, which indicates they are discontinued.",
            "The query is mostly correct, but since the 'suppliers' table is not defined in the schema, the query assumes its existence and column details such as SupplierName. Ensure that the 'suppliers' table exists with a 'SupplierID' and 'SupplierName'. Otherwise, the logic for counting products per supplier is correct.",
            "The query is mostly correct, but there are some issues to address: 1. The query assumes the existence of a 'categories' table, which is not present in the schema provided. 2. The 'OrderDate' column is used, but it's not defined in the '[Order Details]' table in the given schema. 3. The DATEADD and GETDATE functions are SQL Server specific. ANSI SQL uses INTERVAL and CURRENT_DATE instead. Here's a corrected version assuming necessary columns and tables exist:\n\nSELECT p.CategoryID, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) AS MonthlySales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= CURRENT_DATE - INTERVAL '1 year' GROUP BY p.CategoryID, EXTRACT(MONTH FROM o.OrderDate)",
            "Corrected the use of GETDATE() to CURRENT_DATE for compliance with ANSI SQL standard. Added a NULLIF to prevent division by zero when calculating the turnover rate. Fixed the WHERE clause to ensure we only consider the previous quarter by ensuring od.OrderDate is less than the current date.",
            "The original query had some issues: (1) 'TOP 5' is not ANSI SQL standard. Instead, use 'LIMIT 5'. (2) 'od.OrderDate' was not a column in the '[Order Details]' table based on the provided schema. If 'OrderDate' is meant to be a filter, assuming it belongs to another table like 'orders', the SQL would need adjustment accordingly. Also, 'DATEADD' and 'GETDATE()' are SQL Server specific functions. Use 'YEAR(CURRENT_DATE)' to filter the current year in ANSI SQL.",
            "The query correctly retrieves the product name and the units on order for each product. It is correctly implemented according to the schema provided.",
            "Correct query. The SQL query accurately calculates the average units in stock from the 'products' table.",
            "The query is incorrect. The HAVING clause cannot directly compare aggregated quantities to the non-aggregated reorder level since it cannot access non-aggregated columns directly. Correct it by calculating SUM of quantities per product and joining with the products table again.",
            "The query calculates the Inventory Turnover Ratio using the formula provided. However, ensure that the UnitsInStock is averaged correctly across the products. The current query assumes a simple average, which may be sufficient depending on the context. Consider verifying if any specific time period constraints, such as monthly granularity, should be applied here as per business requirements. Overall, the query seems correct for calculating the overall ratio without additional constraints.",
            "The SQL query correctly calculates the difference between units in stock and units on order for each product, and orders the results by this difference in descending order. There are no mistakes in the query.",
            "The original query uses 'Date', which is not present in the schema. It should be modified to use a timestamp function for a current date context or join with a date-related table. Since monthly stock changes usually require historical stock data, additional historical records or a proper date field for stock records are needed.",
            "The original query is almost correct but missing a LIMIT clause to restrict the result to the top three suppliers by revenue. Added LIMIT 3 to the query.",
            "The initial query used MAX(od.Discount) but did not include a correct filter for the last month. Additionally, the OrderDate field was missing from the schema. Assuming its presence, used CURRENT_DATE and corrected the date range to ensure last month's data is selected correctly.",
            "The SQL query is mostly correct, but the 'categories' table is missing in the schema provided. The query assumes 'categories' table exists with at least 'CategoryID' and 'CategoryName' columns, which are not defined in the given schema. Please ensure this table exists or adjust the schema accordingly.",
            "The SQL query correctly identifies discontinued products with pending orders by checking for products where 'Discontinued' is 1 and there is an order quantity greater than 0. The GROUP BY clause is unnecessary since we are just selecting product names without any aggregation function. Here is a simplified version: SELECT DISTINCT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1 AND od.Quantity > 0.",
            "The SQL query correctly finds low-performing products by comparing total sales to units in stock. However, it might be more intuitive to include a condition for products that are not discontinued. Consider adding 'WHERE p.Discontinued = 0' after the JOIN clause. Also, ensure proper table naming for consistency, aligning with 'Order Details' format.",
            "The query correctly aggregates and orders by frequency, but it should include a LIMIT 1 to return only the most common quantity per unit.",
            "The SQL query aims to find the total 'UnitPrice' for each discontinued product. However, 'SUM(UnitPrice)' does not provide meaningful information because 'UnitPrice' is already a single value per product. The correct approach is to retrieve individual 'UnitPrice' values for each product that is discontinued. Hence, the revised query should be: SELECT ProductName, UnitPrice FROM products WHERE Discontinued = 1;",
            "The SQL query is correct. It selects the ProductName from the products table where the UnitsInStock is less than the ReorderLevel, accurately answering the business question.",
            "The SQL query correctly calculates the average discount for each product using the 'Order Details' table and appropriately groups by ProductID.",
            "The SQL query is correct. It correctly fetches the product names from the products table where both UnitsInStock and UnitsOnOrder are zero.",
            "The original query correctly calculates the turnover rate using the given formula but lacks monthly granularity. However, the database lacks a time component to split the calculation monthly, assuming data is pre-sorted or other tables exist. Additionally, a division by zero check is implemented using NULLIF to avoid errors if UnitsInStock is zero.",
            "The SQL query is correct. It accurately selects the ProductID and the total quantity sold, grouped by ProductID, and orders the results by total quantity sold in descending order, limiting the results to the top 5.",
            "The original query selects `ProductName`, which is not necessary for counting the products. The corrected query counts the number of products where there are units on order but no units in stock, which answers the business question correctly.",
            "The SQL query provided calculates the difference between UnitsOnOrder and UnitsInStock, which represents the quantity difference, not price variation. The question might need clarification if 'price variation' between stock and order is intended. To directly address price variation, metrics involving UnitPrice would be needed, but as written, the query does not answer the question correctly.",
            "The SQL query was correct, but DATEADD and GETDATE() are not standard SQL functions. Corrected with ANSI SQL using INTERVAL and CURRENT_DATE.",
            "The SQL query correctly addresses the business question. It selects SupplierID and counts ProductID for non-discontinued products, groups by SupplierID, and orders the result in descending order by the number of products. No changes needed.",
            "The original query is mostly correct, but to ensure accurate division, it's best to cast 'UnitsInStock' to a DECIMAL type in the AVG function. This handles any potential issues with division of smallint.",
            "The SQL query is correct, as it selects the product names from the products table where the units on order are greater than the units in stock. No corrections needed.",
            "The SQL query correctly joins 'Order Details' and 'products' to compute the total sales for each product category. It correctly uses SUM to calculate aggregate sales and groups by CategoryID. The ORDER BY clause ensures the results are sorted by TotalSales in descending order. Therefore, the query is accurate for the given question.",
            "The SQL query correctly computes the total revenue by multiplying the quantity by the unit price for all order details. The query is accurate and needs no alteration.",
            "The query incorrectly uses UnitPrice from [Order Details] which may not relate to products uniquely due to multiple entries. To correct this, join with the products table to use UnitPrice accurately and group by a combination that includes UnitPrice. Here's a better approach: SELECT od.ProductID, p.ProductName, p.UnitPrice / AVG(od.Discount) AS PriceDiscountRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY od.ProductID, p.ProductName, p.UnitPrice ORDER BY PriceDiscountRatio DESC;",
            "The original query did not use DISTINCT, which could lead to counting duplicated ProductIDs erroneously. The corrected query includes DISTINCT to ensure each product is counted only once.",
            "The original query does not join the 'products' table, which means it won't consider all products unless there are entries in '[Order Details]'. Added a JOIN on 'ProductID' to include product names or other relevant details if needed.",
            "The original query does not account for discontinued products. The corrected query includes a condition to exclude discontinued products by checking Discontinued = 0.",
            "The query is correct. It selects the product name and calculates the total value of current inventory by multiplying the unit price with the units in stock for each product.",
            "The original query orders by Difference in ascending order. To find the most significant differences, the absolute value should be used and ordered in descending order.",
            "The SQL query is correct. It calculates the inventory value for each product by multiplying the UnitsInStock by UnitPrice, which aligns with the business question.",
            "The original query is mostly correct. However, it should also consider whether products are not discontinued by adding 'AND Discontinued = 0' to the WHERE clause.",
            "The SQL query correctly computes the average discount from the [Order Details] table, and since all necessary data is present, the query is correct.",
            "The SQL query is correct. It accurately counts the number of discontinued products by filtering with 'WHERE Discontinued = 1'.",
            "The query incorrectly references OrderDate, which does not exist in the '[Order Details]' table. A corresponding 'orders' table is required to obtain order dates. Assuming 'orders' table with 'OrderDate' and 'OrderID', the query should join with the 'orders' table and correctly utilize the 'OrderDate'. The corrected query is: SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m');",
            "The SQL query correctly answers the business question by aggregating the units in stock for each product category. However, to find those with the highest inventory levels, you may want to add an ORDER BY clause to sort the results. For example: SELECT CategoryID, SUM(UnitsInStock) AS TotalInventory FROM products GROUP BY CategoryID ORDER BY TotalInventory DESC;",
            "The SQL query is correct. It calculates the total revenue for each product by joining the 'Order Details' table with the 'products' table, and multiplies the quantity, unit price, and discount. The results are correctly grouped by ProductName to get the total revenue for each product.",
            "The original query grouped by SupplierID and SupplierName but used MAX(UnitPrice) which does not address which supplier provides the single most expensive product across all suppliers. The corrected query finds the global maximum priced product and matches it to the supplier.",
            "The original query misses joining the Orders table to access the OrderDate field. The corrected query includes an INNER JOIN between Orders and [Order Details] on OrderID.",
            "The original query is mostly correct. However, it doesn't exclude discontinued products, which may be irrelevant for identifying top performers. Adding `WHERE products.Discontinued = 0` ensures only active products are considered.",
            "The query is correct for calculating the average unit price of products sold, as it correctly averages the 'UnitPrice' column from the '[Order Details]' table.",
            "The query is correct for the given question. It selects products with UnitsInStock less than 10, which matches the requirement to find products with inventory levels below a specific threshold.",
            "The SQL query is correct. It selects distinct OrderIDs from 'Order Details' where the corresponding products have zero units in stock.",
            "The SQL query correctly calculates the total number of different products sold to date by counting distinct ProductIDs in the Order Details table. The query is correct and requires no changes.",
            "The initial query was attempting to calculate the total effect of the discount incorrectly. The correct query should calculate the total sales revenue considering the applied discount by using (1 - Discount) instead of just Discount.",
            "The query correctly identifies suppliers who have products with stock levels below or equal to the reorder level, suggesting frequent reordering. The query assumes that 'frequent reordering' is indicated by stock levels reaching or falling below reorder levels. This assumption should be validated with business stakeholders if 'frequent reordering' has a different business meaning. Additionally, the suppliers table, which is necessary for the JOIN operation, must be included in the schema.",
            "The query uses hypothetical columns 'RestockDate' and 'ReorderDate' from a non-existent 'ReorderHistory' table. The schema provided does not support this query. To calculate average time between reordering and restocking, additional schema with relevant date information is required.",
            "The SQL query correctly retrieves the products with the highest reorder levels by ordering the 'ReorderLevel' column in descending order and limiting the results to 5, which is an appropriate approach to answer the given business question.",
            "The original query is incorrect because the aggregation function AVG(SUM(...)) is improperly used. The calculation should be a direct division of total sales by average inventory for each supplier, not averaged sums. Also, ensuring products with UnitsInStock is greater than zero avoids division by zero errors.",
            "1. The SQL uses `TOP` which is not standard ANSI SQL; use `LIMIT` instead.\n2. `GETDATE()` is specific to some SQL dialects; use `CURRENT_DATE` for ANSI SQL.\n3. The `NULLIF` function is used to handle division by zero by ignoring cases where `UnitsInStock` is zero.\n4. Ensure the aggregation and ordering logic correctly identifies the top performing products based on the current month.",
            "The SQL query correctly finds suppliers with products low in stock by joining the suppliers and products tables, filtering for products where UnitsInStock is less than ReorderLevel, and counting the products grouped by SupplierID and SupplierName. The query is accurate as per the given question.",
            "The query was missing a join between the [Order Details] and Orders tables to access the OrderDate column. Additionally, the query did not consider the change of year, which could cause issues in January. The corrected query includes a JOIN and checks both the year and month to handle these cases appropriately.",
            "The SQL query is correct. It selects products where 'Discontinued' is true and 'UnitsInStock' is greater than zero.",
            "The original query did not consider the 'Discount' column from the '[Order Details]' table, which affects the total sales calculation. The query should multiply the 'UnitPrice' and 'Quantity' by (1 - Discount) to correctly calculate the total sales revenue accounting for any discounts applied.",
            "The query correctly identifies products that need reordering by checking if the stock is less than or equal to the reorder level. The SQL query is correct and aligned with the business question.",
            "The SQL query is correct. It properly joins the suppliers, products, and [Order Details] tables to calculate the average discount per supplier using an inner join and grouping by SupplierID and SupplierName.",
            "The original query lacked a JOIN to connect [Order Details] with products, which is required to select ProductName. Additionally, the YEAR should be considered to ensure the correct quarter is being queried.",
            "The SQL query is correct for the business question. It selects suppliers with the lowest product prices by joining the suppliers and products tables, grouping by the supplier, and ordering by the lowest product price.",
            "The original query used 1 to filter discontinued products, which may vary between databases. ANSI SQL uses TRUE for BIT fields to represent a true value.",
            "The query is correct in terms of logic and syntax for retrieving the product with the highest sales revenue. It correctly joins the products and [Order Details] tables, calculates total revenue for each product, groups by ProductID and ProductName, and orders the results by TotalRevenue in descending order, selecting the top result.",
            "The original query omitted a join between the 'Order Details' and 'products' tables to get the 'ProductName'. Corrected by joining with 'products' table using 'ProductID'.",
            "The original query uses GETDATE() which may not be ANSI SQL compliant. Replacing it with CURRENT_DATE to adhere to ANSI SQL standards, assuming OrderDate exists in the [Order Details] table.",
            "The SQL query accurately calculates the percentage of distinct products currently on order against the total number of products. It uses a subquery to retrieve the total count of products from the 'products' table, and divides the count of distinct 'ProductID' with quantities greater than zero in the '[Order Details]' table by this total count, multiplying by 100 to get the percentage form. The query is correct as per the given schema and business question.",
            "The original query does not filter for the last year and uses DATEPART, which may not be ANSI SQL standard. EXTRACT is more appropriate for ANSI SQL. Added a WHERE clause to ensure data is from the last year.",
            "The query does not consider the time frame 'this year'. It should be filtered by orders from the current year to ensure the count reflects this year's data. However, the current schema does not provide sufficient data to capture time-based inventories, which makes it impossible to track reorder points throughout the year. Without a 'date' column in the 'products' table or a relationship to time-sensitive data, the query cannot be accurately corrected for this requirement. Consider including a suitable time dimension or additional tables.",
            "The SQL query does not filter by the current year. You need to join with the orders table to filter orders by date. The query lacks the orders table in the schema given, so I'm assuming it has an OrderDate column. Here is the corrected query:\n\nSELECT categories.CategoryID, categories.CategoryName, SUM([Order Details].Quantity) AS TotalOrdered FROM categories INNER JOIN products ON categories.CategoryID = products.CategoryID INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID INNER JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY categories.CategoryID, categories.CategoryName ORDER BY TotalOrdered DESC;",
            "The original query does not correctly calculate the number of distinct orders. It counts all order details with a discount greater than 20%, which could lead to overcounting if multiple products are ordered within the same order. Adding DISTINCT ensures that each order is counted only once.",
            "The query correctly calculates the average inventory level for each product category by joining the products and categories tables. There are no issues with the query as written.",
            "The original SQL query calculates the net profit margin correctly by subtracting the cost of goods sold from the revenue and dividing it by the revenue. However, to prevent division by zero, the denominator should use NULLIF.",
            "The SQL query is correct. It selects the SupplierID and calculates the average UnitPrice for each supplier, grouping by SupplierID as required.",
            "The SQL query is correct and retrieves the products where the stock levels are below the reorder level. The query correctly selects the necessary columns and applies the appropriate condition.",
            "The SQL query is correct. It accurately calculates the total value of products currently in stock by multiplying the UnitsInStock by the UnitPrice for each product and summing the results.",
            "The original query is mostly correct but is missing ProductName in the GROUP BY clause. Adding p.ProductName to the GROUP BY clause resolves this issue.",
            "The SQL query is correct. It properly uses a LEFT JOIN to find products with no corresponding entries in the [Order Details] table, and the WHERE clause correctly filters for products that haven't been sold.",
            "The original query lists each discontinued product with its units on order, but doesn't sum them. The revised query correctly calculates the total units on order for all discontinued products.",
            "The SQL query correctly finds the categories with the highest number of discontinued products by counting the discontinued products grouped by CategoryID and ordering the results in descending order of the count.",
            "The original query is missing a join with the 'orders' table to access 'OrderDate'. The revised query includes this join.",
            "The SQL query is correct. It selects SupplierID from the products table, filters for discontinued products, groups the results by SupplierID, and checks for those with more than three discontinued products.",
            "The query is correct. It selects the product with the highest historical discount by grouping the products and ordering by the maximum discount in descending order, then limits the result to one product.",
            "The query is almost correct, but the year extraction condition should reference the adjusted date to correctly capture the transactions from the last month, including the transition to the previous year if applicable.",
            "The SQL query correctly calculates the average discount received on product sales using the 'Discount' column from the '[Order Details]' table. No changes are needed.",
            "The query is correct in terms of finding the most frequently ordered product by summing the quantities and ordering the results in descending order to get the top product. However, since the query uses 'LIMIT 1', it assumes that the SQL dialect supports this syntax for limiting results. ANSI SQL does not have 'LIMIT', so consider using 'FETCH FIRST 1 ROWS ONLY' if an ANSI-compatible query is needed.",
            "The SQL query is correct. It accurately calculates the difference between units in stock and units on order for each product by using the appropriate columns and arithmetic operations.",
            "The original query is missing a join between [Order Details] and the orders table to access the OrderDate column. I've added this join to calculate the Inventory Turnover Ratio by month correctly.",
            "The SQL query correctly identifies products that have been reordered more than twice their reorder level by selecting from the 'products' table based on the condition 'UnitsOnOrder > ReorderLevel * 2'. The query is accurate and requires no changes.",
            "The SQL query is correct. It accurately calculates the average inventory level for products grouped by CategoryID.",
            "The SQL query correctly counts the products that are overstocked by checking if UnitsInStock is greater than the sum of ReorderLevel and UnitsOnOrder. The logic and SQL syntax are both correct.",
            "The original query is almost correct, but 'p.ProductName' should be included in the GROUP BY clause to ensure compliance with SQL standards, as it appears in the SELECT list without aggregation. I have corrected this by adding 'p.ProductName' to the GROUP BY clause.",
            "The SQL query is correct and will calculate the proportion of discontinued products to total products by using conditional aggregation and the FILTER clause.",
            "The query is structured correctly but there is no 'categories' table defined in the provided schema. Assuming 'categories' table exists with 'CategoryID', the SQL query is correct. If not, further information is needed to identify where 'CategoryID' is sourced.",
            "The SQL query is correct. It selects ProductName from the products table where the UnitsInStock are less than the ReorderLevel.",
            "The SQL query correctly calculates the average unit price of products by each supplier using the GROUP BY clause. The schema indicates that SupplierID and UnitPrice columns are available in the products table, so the query is accurate.",
            "The SQL query correctly calculates the inventory turnover ratio for each product using a join between the 'products' and '[Order Details]' tables. A modification is made to handle potential division by zero using NULLIF in the AVG function.",
            "The SQL query is correct. It accurately calculates the total sales revenue for each product by grouping by ProductID and summing the product of Quantity and UnitPrice from the Order Details table.",
            "The original query correctly sums the quantity of products sold this month but fails to join with the 'products' table to provide product details like ProductName. It is important to include a JOIN between '[Order Details]' and 'products' on 'ProductID'. Additionally, the query should select 'ProductName' along with 'ProductID'. The corrected query is now properly displaying the highest sales quantities with appropriate product details.",
            "The query correctly calculates the total discount for each product. It multiplies the discount rate by the quantity and unit price to compute the discounted amount.",
            "The SQL query correctly calculates the total number of products in stock by category using the SUM and GROUP BY functions on the CategoryID.",
            "The original query does not filter products with UnitsOnOrder greater than zero, which is necessary to identify products currently being reordered.",
            "The query is correct as it accurately calculates the difference between 'UnitsInStock' and 'ReorderLevel' for each product.",
            "The SQL query is correct. It accurately counts the number of products where the UnitsInStock is greater than the ReorderLevel.",
            "The SQL query is correct. It correctly calculates the total value of current inventory for each supplier by grouping on SupplierID and summing the product of UnitsInStock and UnitPrice.",
            "The current query calculates the average quantity ordered per product. However, it does not take into account the daily aspect mentioned in the question. Assuming the 'Order Details' table has a date column for orders, the query needs to be adjusted. If we assume there's a column like 'OrderDate', the updated query should calculate the daily average. Example correction:\n\nSELECT ProductID, AVG(DailyQuantity) AS DailyAvgQuantity\nFROM (\n    SELECT ProductID, CAST(OrderDate AS DATE) AS OrderDay, SUM(Quantity) AS DailyQuantity\n    FROM [Order Details]\n    WHERE ProductID IN (SELECT ProductID FROM products WHERE Discontinued = 1)\n    GROUP BY ProductID, CAST(OrderDate AS DATE)\n) AS DailyOrders\nGROUP BY ProductID;",
            "The query correctly calculates the sales revenue per category using the joined tables, grouping by CategoryID and ordering by revenue in descending order. The use of SUM and GROUP BY with the join condition is appropriate for this question. The query appears to be correct.",
            "The SQL query is correct and appropriately calculates the average discount across all products using the 'Order Details' table.",
            "Corrected the subquery to check orders from the last month instead of the current month by using DATE_SUB with INTERVAL 1 MONTH.",
            "The SQL query is correct. It correctly calculates the total quantity ordered for each product and orders the results in descending order to select the top product with the highest total quantity. The use of LIMIT 1 ensures only the most ordered product is returned.",
            "The query is correct. It counts the number of orders for each product by grouping the records in the [Order Details] table by ProductID, which is appropriate for determining the order frequency of each product.",
            "The SQL query correctly answers the business question. It sums the UnitsOnOrder for each CategoryID, groups by CategoryID, orders the results in descending order by the sum, and limits the result to the top entry. This accurately identifies the category with the most units on order.",
            "The original query correctly calculates the inventory turnover ratio but did not handle the case where UnitsInStock might be zero. Added NULLIF to prevent division by zero errors.",
            "The SQL query is mostly correct, but the logic for determining restock needs should involve UnitsInStock only. A product needs restocking if UnitsInStock is less than ReorderLevel and it is not discontinued. Updated query: SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 0;",
            "The query correctly calculates the total units in stock for discontinued products by filtering with the 'Discontinued = 1' condition. The query is correct.",
            "The original query did not account for the discount applied to each order, which affects the total revenue calculation. The corrected query includes the discount in the calculation.",
            "The provided SQL query included a join with a 'categories' table, which was not part of the schema provided. The correct query only involves the 'products' table and calculates the average UnitPrice for each CategoryID, ordering the results by average price in descending order to get the highest.",
            "The query correctly calculates the total discount by multiplying the quantity, unit price, and discount for each order and summing them up.",
            "The SQL query correctly uses a LEFT JOIN to find products without matching entries in [Order Details], ensuring that only products with no orders are listed. The query is correct.",
            "The SQL query is correct according to the question. It correctly selects the ProductID and ProductName from the products table where the UnitsOnOrder is greater than UnitsInStock.",
            "The query correctly calculates the total sales per month and orders by descending total sales to find the month with the highest sales. The only correction needed is to ensure the grouping uses the full EXTRACT function to avoid ambiguity.",
            "The original query does not correctly reference the month-over-month comparison logic and lacks a proper join to compare the quantities. It also does not handle handling months properly. The corrected query introduces a CTE to calculate monthly sales and then calculates the increase month-over-month.",
            "The original query did not join the '[Order Details]' table with the 'orders' table to access 'OrderDate'. The corrected query includes a join on the 'OrderID' field.",
            "The SQL query attempts to join with a 'categories' table which does not exist in the provided schema. The 'products' table already contains the 'CategoryID', so we can directly perform the aggregation on it without a join.",
            "The query correctly calculates the total value of all products currently in stock by multiplying the UnitPrice by UnitsInStock for each product and summing the result. The query is correct.",
            "The SQL query is correct. It properly calculates the sales revenue for each product by joining the products table and the Order Details table, and it orders the results by SalesRevenue in descending order to get the top 10 products.",
            "The original query attempts to join with a 'categories' table which is not provided in the schema. Therefore, the join is unnecessary, and we can directly query the 'products' table to get the total number of discontinued products by category.",
            "The SQL query correctly identifies the supplier providing the most variety of products by counting distinct ProductIDs for each SupplierID, grouping by SupplierID, and selecting the top one based on the count in descending order. The query is accurate as written.",
            "The SQL query correctly calculates the total sales amount for each product, considering the discounts. It uses the correct formula to apply the discount and aggregate the sales by ProductID.",
            "The original query was missing a proper mechanism to check the decreasing trend over the last six months. The corrected query uses `LAG` to compare monthly sales trends for each product, checking that each month's sales are less than the previous month's sales consistently for six months.",
            "The SQL query correctly identifies orders with a discount greater than 50%. It accurately selects from the '[Order Details]' table and applies the appropriate condition on the 'Discount' column.",
            "The SQL query is mostly correct, but FILTER is not a standard SQL clause available in all databases. To ensure ANSI SQL compatibility, we should use a CASE statement.",
            "The SQL query correctly calculates the total value of products currently in stock by multiplying the UnitPrice by UnitsInStock for each product and summing the result. There are no errors.",
            "The query correctly identifies products that need to be reordered by checking if the UnitsInStock is less than the ReorderLevel. It calculates the required units by subtracting UnitsInStock from ReorderLevel. There are no errors in the query.",
            "The SQL query is correct. It correctly calculates the sales revenue by multiplying the quantity and unit price from the [Order Details] table, groups the results by product ID and product name, and orders them in descending order to fetch the top 5 products. \"LIMIT 5\" is used appropriately for this purpose.",
            "The SQL query is correct as it accurately counts the number of discontinued products by filtering on the 'Discontinued' column.",
            "The SQL query correctly calculates the total sales by supplier by joining the 'products' table with the '[Order Details]' table on 'ProductID' and then grouping by 'SupplierID' to aggregate the sales total.",
            "The SQL query is mostly correct, except for the reference to the 'categories' table, which is not included in the given schema. Remove the join with 'categories' as it doesn't exist in the schema. Also, the query requires a calculation of revenue considering discounts, which should be incorporated in the SUM aggregation. Here is the corrected query: SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID ORDER BY TotalRevenue DESC LIMIT 1;",
            "The SQL query is correct. It calculates the average discount given on orders by selecting the average of the Discount column from the [Order Details] table.",
            "The SQL query is mostly correct, but it's important to handle cases where AVG(p.UnitsInStock) might be zero to avoid division by zero errors. This is achieved using NULLIF which returns NULL if AVG(p.UnitsInStock) evaluates to zero.",
            "The SQL query correctly identifies products that have never been ordered by using a LEFT JOIN and checking for NULL values in the OrderID column of the '[Order Details]' table. The query is correct and requires no changes.",
            "The query correctly retrieves the ProductID, ProductName, and UnitsOnOrder for products that have units on order (UnitsOnOrder > 0). The SQL query accurately addresses the business question.",
            "The original query is incorrect as it does not properly compare sales over time intervals. The revised query considers quantities from the last month and compares them to the previous two months to identify a decline.",
            "The query correctly calculates the average unit price for each category by grouping products by CategoryID and using AVG on UnitPrice. The SQL query appears to be accurate given the question.",
            "The original query is mostly correct but may return duplicate rows if a product has multiple order records. Adding DISTINCT ensures unique products are returned.",
            "The SQL query is correct. It selects the total number of units sold for each product by joining the 'products' table with the '[Order Details]' table on 'ProductID', and groups the results by 'ProductID' and 'ProductName' to get the sum of 'Quantity' for each product.",
            "The SQL query correctly calculates the percentage of total sales for each product by joining the products and [Order Details] tables, calculating the total sales for each product, dividing by the total sales for all products, and then multiplying by 100 to get the percentage. The use of a subquery to calculate the total sales in the denominator is appropriate. The GROUP BY clause correctly groups the results by product to achieve the desired granularity.",
            "The original query wrongly counted the number of product types rather than just checking if the supplier provides any product with more than 1000 units in stock. The corrected query directly lists SupplierIDs without counting ProductIDs.",
            "The original query incorrectly included a condition on UnitsInStock and ReorderLevel. The correct query should only check for UnitsOnOrder = 0 to find products that have never been reordered.",
            "The SQL query is correct as it accurately calculates the difference between units in stock and reorder level for each product by subtracting ReorderLevel from UnitsInStock for every entry in the products table.",
            "The original query incorrectly calculates the average turnover ratio by attempting to use AVG directly on the aggregated turnover ratios. A subquery is needed to first calculate turnover ratios for each product, then find their average.",
            "The original query incorrectly includes a GROUP BY clause, which is not needed for a correlation calculation between two numeric values. Additionally, the function CORR should be used directly without grouping by product details.",
            "The original query calculates total quantities, not sales. Corrected to multiply quantity by unit price for sales. Also, added YEAR check for completeness, assuming OrderID acts as order date.",
            "The SQL query correctly retrieves the product names for which the stock levels are below their reorder points. It uses the correct condition to compare 'UnitsInStock' with 'ReorderLevel'. The query is accurate as per the business question.",
            "The original query uses 'TOP 5', which is not standard ANSI SQL. Replacing it with 'LIMIT 5' correctly limits the result to the top 5 records.",
            "The original query has a few issues. Firstly, it calculates SUM and AVG directly inside AVG, which is incorrect because AVG can't take an aggregate within it without using grouping or subqueries. Additionally, the method of filtering the last three months needs refinement, since using OrderID with MONTH(CURRENT_DATE) doesn't clearly define recent months. The revised query uses a subquery to handle monthly turnover averages and considers correct date filtering.",
            "The SQL query is correct. It selects products from the 'products' table where the product is discontinued and there are still units in stock.",
            "The SQL query correctly calculates the total revenue for products that are not discontinued. It performs a join between the [Order Details] and products tables using the ProductID and filters for products where Discontinued is 0.",
            "The SQL query correctly selects product names and discounts, joining the 'Order Details' table with the 'products' table on ProductID and orders the results by Discount in descending order. The query fulfills the business question's requirement to find products with the highest discounts applied.",
            "The query correctly identifies products that have never been ordered by checking ProductID against those present in the [Order Details] table. The SQL query is correct.",
            "The query references a 'suppliers' table, which is not present in the provided schema. Assuming the 'suppliers' table exists with a 'SupplierID' column, the query is otherwise correct. If a correction is needed due to missing schema details, please provide additional schema information.",
            "The SQL query is correct and properly calculates the average discount given per order using the AVG function on the Discount column in the [Order Details] table.",
            "The original query attempts to compare the sum of quantities directly with the average of sums, which is incorrect in the current form. A subquery should calculate and return the average of total sales first, then be used in the HAVING clause correctly. This has been corrected in the revised query.",
            "The SQL query correctly computes the difference in units between stock and order for each product by selecting ProductName and calculating the difference between UnitsInStock and UnitsOnOrder. The query is accurate as per the given business question and schema.",
            "The SQL query correctly identifies the categories with the most products at reorder level by grouping the products table by CategoryID and filtering products where UnitsInStock is less than or equal to ReorderLevel. The COUNT function is correctly used to count the number of such products per category.",
            "The SQL query is correct. It retrieves product names where the unit price is higher than the average unit price of all products.",
            "The SQL query correctly calculates the ratio of on-order units to in-stock units per product, filtering out products with zero stock to avoid division by zero.",
            "The original query does not account for the orders table to obtain the order date. Corrected by joining with the orders table and filtering using OrderDate.",
            "The SQL query correctly calculates the total number of units sold for non-discontinued products by joining the 'Order Details' and 'products' tables on 'ProductID' and filtering with 'Discontinued = 0'. The query is correct.",
            "The SQL query is correct. It calculates the total value of the inventory in stock by multiplying the UnitPrice by UnitsInStock for each product and summing up the values. No changes are needed.",
            "The SQL query correctly selects the product names from the 'products' table where the corresponding 'Order Details' record has a discount greater than 20%. The use of JOIN between '[Order Details]' and 'products' is correct, and the where clause appropriately filters for discounts greater than 0.2. The query is correct as per the business question.",
            "The query is almost correct, but it should reference the table alias in the subquery to avoid ambiguity. Added alias 'p2' to the subquery.",
            "The SQL query correctly calculates the total inventory value by multiplying the UnitPrice by UnitsInStock and summing the result across all products.",
            "The SQL query is correct. It selects the product names where the number of units in stock is less than the reorder level and the product is not discontinued.",
            "The SQL query correctly calculates the average price of products per supplier by grouping the products table by SupplierID and using the AVG function on the UnitPrice column. The query is accurate and follows the ANSI SQL standard.",
            "The SQL query correctly counts the number of discontinued products in the 'products' table by checking where the 'Discontinued' column is 1. The query is accurate and needs no corrections.",
            "The original query did not reference the 'sale_date' correctly, assuming the column 'sale_date' exists in the '[Order Details]' table. Added table alias 'od' before 'sale_date'.",
            "The query is correct. It selects ProductID and calculates the total sales volume by summing the Quantity from [Order Details]. The results are grouped by ProductID and ordered by TotalSalesVolume in descending order, which answers the business question appropriately.",
            "The SQL query is correct. It calculates the average discount from the 'Order Details' table using the AVG function on the Discount column.",
            "The query correctly selects the ProductID and UnitsOnOrder from the products table where UnitsOnOrder is greater than 0, which matches the business question. The query is correct.",
            "The query assumes the existence of a 'categories' table which is not defined in the provided schema. Assuming the 'categories' table exists with necessary columns, the SQL query is correct for calculating the total revenue by category.",
            "The original query did not account for extracting the date of order correctly, as there was no 'sale_date' in the schema. A join with the 'orders' table, which is presumably the location of the 'OrderDate', is needed.",
            "The SQL query correctly calculates the average units in stock for each category by grouping the products table on CategoryID and applying the AVG function on the UnitsInStock column. The query is correct.",
            "The original query had an issue where it referred to TotalSales directly in the HAVING clause without recalculating it. The corrected query recalculates SUM(Quantity) before comparing it to the minimum.",
            "The original query incorrectly uses GROUP BY ProductID. The correlation should be computed over all data without grouping by ProductID.",
            "The original query should count the number of products, not just display their names. Changed to COUNT(ProductID) for the correct metric.",
            "The SQL query correctly calculates the total sales quantity for each discount level by grouping the data from '[Order Details]' based on the 'Discount' column. It then orders the results in descending order of 'Discount'. The query correctly answers the question by showing how different discount levels affect total product sales.",
            "The SQL query correctly calculates the [Order Details] table's contribution to the total revenue by summing the products of Quantity and UnitPrice. No changes are needed.",
            "The query correctly calculates the monthly revenue, but it does not calculate the revenue growth rate. The growth rate requires comparing revenues across periods (e.g., current month vs previous month). Additionally, there is an issue with 'sale_date' not being defined in the schema. Assuming there's a date column like 'OrderDate' in an 'orders' table, the query should be reviewed and updated accordingly.",
            "The query correctly selects the names and stock levels of products that need to be reordered based on the condition where the UnitsInStock is less than the ReorderLevel. The query is accurate and aligns with the defined requirements.",
            "The SQL query is correct. It calculates the total inventory value by multiplying the UnitPrice by UnitsInStock for all products and sums the result to provide the total inventory value.",
            "The SQL query is correct. It selects products where the units on order exceed the units in stock, matching the business question.",
            "The original query does not account for the year in the WHERE clause, which could lead to incorrect results if there are orders from previous years in the same month. The corrected query adds a condition to check the year as well.",
            "The original query grouped by P.ProductID, but to select P.ProductName, you must group by P.ProductName instead. The LIMIT clause is correct for getting the top 5 products.",
            "The SQL query correctly calculates the average reorder level across all products using the products table. It does not need any corrections.",
            "The SQL query correctly retrieves the names of discontinued products that still have units in stock. The logical conditions in the WHERE clause are accurate and appropriately use the correct column names. No correction is needed.",
            "The query correctly calculates the total discounts by multiplying the UnitPrice, Quantity, and Discount for each order detail. It then sums these values to get the TotalDiscounts. The SQL query is correct.",
            "The SQL query correctly identifies products that need to be reordered by checking if the units in stock are below the reorder level. The query is written correctly for the given question.",
            "The initial query was almost correct but it missed filtering by the current year which could lead to incorrect results when querying for the current month. Added YEAR comparison to ensure it only includes orders from the current month and year.",
            "The query correctly selects the CategoryID and counts the number of discontinued products per category. It groups the results by CategoryID and orders them in descending order to show the category with the highest count first. The query is correct.",
            "The SQL query is correct. It selects the discount and counts the frequency of each discount rate. It then orders the results by frequency in descending order and limits the result to the top one, which gives the most frequently applied discount rate.",
            "The original query only considers the product list and their prices, not what was actually sold. By joining with the [Order Details] table, we ensure that we consider only products that have been sold and their transaction prices.",
            "The original query did not include the product price, which is essential for analyzing the correlation between product price and the number of orders. Added 'P.UnitPrice' to the SELECT and GROUP BY clauses.",
            "The original query did not handle the division by zero when UnitsOnOrder is zero. The corrected query uses NULLIF to prevent division by zero.",
            "The SQL query is correct. It calculates the average unit price of products where the 'Discontinued' column is true (1), matching the business question.",
            "The SQL query correctly implements the business question by counting products where the stock equals the reorder level.",
            "The original query incorrectly calculates the average length of the string 'QuantityPerUnit' rather than parsing the actual quantity value before averaging, which may be necessary if the quantities are stored as strings with units (e.g., '10 units'). The corrected query assumes quantities are numeric values at the start of the string before a space. This will need adjustment depending on the actual format of 'QuantityPerUnit'.",
            "The query is correct. It correctly selects the SupplierID and counts the number of products supplied by each supplier, groups by SupplierID, and orders the results to find the top 3 suppliers based on the number of products supplied.",
            "The SQL query is correct based on the schema provided. It correctly calculates the total inventory value by multiplying the UnitsInStock with UnitPrice for each category and grouping by CategoryID.",
            "The SQL query is correct. It accurately selects products where the current stock is less than the reorder level and checks that the product is not discontinued.",
            "The original query had an issue: 'order_date' was not defined in the schema. I assumed the correct column to be 'OrderDate' in the '[Order Details]' table, which needs to be consistent with the table aliases. Additionally, I corrected the GROUP BY clause to use 'p.ProductName' instead of 'p.ProductID' to align with the SELECT clause.",
            "The SQL query correctly calculates the average discount provided on products sold by using the AVG function on the Discount column from the [Order Details] table. The table is correctly referenced with square brackets.",
            "The query correctly calculates the count of products grouped by SupplierID and orders the result in descending order to identify the supplier providing the most products. No changes are needed.",
            "The SQL query is mostly correct, but it should group by p.ProductName instead of p.ProductID to align with the SELECT clause and avoid ambiguity. This ensures that each product's name along with its total revenue is displayed.",
            "The original query is almost correct, but the GROUP BY clause should include both p.ProductID and p.ProductName to avoid any ambiguity and align with ANSI SQL standards.",
            "The original query was mostly correct but needed to handle division by zero. The NULLIF function ensures we do not divide by zero in the AVG(p.UnitsInStock). The GROUP BY clause is adjusted to p.ProductName to match the SELECT clause.",
            "The query was mostly correct, but it needed an ORDER BY clause to sort by AverageUnitPrice in descending order and a LIMIT 1 to get the category with the highest average unit price.",
            "The original query is almost correct, but dividing integers can result in integer division. To ensure accurate percentage calculation, I added '100.0' to ensure floating-point division.",
            "The SQL query correctly calculates the average order value by finding the average of the total price for each order line, considering the applied discount. The query is correct.",
            "The original query attempts to find the highest and lowest priced products but uses 'ORDER BY' with 'LIMIT 1', which may not work as expected in a 'UNION' query due to incorrect ordering application per subset. The correct approach is to use subqueries to determine the MAX and MIN prices and filter the results accordingly.",
            "The query is missing the 'order_date' field; it should be specified in the FROM clause, but there is no such column in the provided schema. Also, to calculate the turnover, you should include the 'UnitsInStock' average considering only the period queried. The tables lack a date dimension, but assuming there's an Orders table, the query would need that in the join. The corrected SQL query should incorporate the Orders table, assuming it contains the 'order_date'.",
            "The query calculates the profit margin by comparing the order detail price to the product price. However, the logic seems incorrect as it doesn't account for discounts or total quantities sold. Correcting the margin formula to take the discount into account: (od.UnitPrice * (1 - od.Discount) - p.UnitPrice) / (od.UnitPrice * (1 - od.Discount)) gives a more accurate profit margin. So the corrected SQL is:\nSELECT p.ProductName, ((od.UnitPrice * (1 - od.Discount) - p.UnitPrice) / (od.UnitPrice * (1 - od.Discount))) AS ProfitMargin FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID ORDER BY ProfitMargin DESC LIMIT 1;",
            "The SQL query is correct. It selects products that do not have a corresponding ProductID in the [Order Details] table, meaning there are no current orders for these products.",
            "The SQL query is mostly correct but assumes the existence of a 'categories' table which was not provided in the schema. If 'categories' indeed exists and contains the 'CategoryID' column, the query is correct. Otherwise, additional context is needed.",
            "The query calculates a composite score based on sales (SUM of quantities ordered) and inventory levels (UnitsInStock). The use of '1 - p.Discontinued' effectively zeroes the score for discontinued products. However, the GROUP BY clause should also include p.ProductName because it appears in the SELECT clause. Here's the correct query: SELECT p.ProductID, p.ProductName, (SUM(od.Quantity) * (1 - p.Discontinued)) / (p.UnitsInStock + 1) AS ProductPerformanceScore FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName;",
            "The original query references a 'suppliers' table, which is not defined in the schema, and an unnecessary join is used. The corrected query directly computes the average units in stock per supplier from the 'products' table without the join.",
            "The query correctly counts the number of products below the reorder level and groups them by CategoryID. The only thing missing was the table alias for UnitsInStock and ReorderLevel in the WHERE clause. Added 'p.' to specify the table for clarity and correctness.",
            "The SQL query is mostly correct, but 'LIMIT' is not part of the ANSI SQL standard. Instead, use 'FETCH FIRST 5 ROWS ONLY'.",
            "The original SQL query used OrderID for date filtering, which is incorrect. The correct approach is to use the actual order date column, which I assumed to be OrderDate based on context, for filtering the last month's data.",
            "The SQL query correctly identifies the most frequently ordered product by summing the order quantities and ordering them in descending order, then limits the result to one entry. This query is valid and matches the business question.",
            "The original SQL query is incorrect due to the misuse of EXTRACT on OrderID, which seems to be an integer. Instead, there should be a condition to filter records from the last quarter based on a valid date field (e.g., OrderDate if it existed). Since the schema doesn't mention a date field, the query should assume the correct handling by using Order Dates.",
            "The SQL query correctly lists all suppliers and counts the products they supply by grouping the results by SupplierID. No changes are needed.",
            "The SQL query is correct. It accurately calculates the total revenue by joining the products and [Order Details] tables and filtering for discontinued products using the condition WHERE products.Discontinued = 1. The multiplication of Quantity and UnitPrice correctly computes the revenue for each order, and the SUM function aggregates this into a total revenue figure for the discontinued products.",
            "The query correctly finds the product with the highest unit price and its supplier by ordering the products by UnitPrice in descending order and limiting to the first result. However, ensure that 'LIMIT 1' is supported by the database being used, as it is not part of the ANSI SQL standard.",
            "The SQL query correctly answers the business question by counting the number of products where the units on order are greater than the units in stock. The use of COUNT and the appropriate WHERE clause is correct.",
            "The query is correct. It calculates the percentage of products by counting the discontinued products and dividing by the total count of products, correctly using the condition 'Discontinued = 1'.",
            "The original query calculates the discounted amount by multiplying Discount, Quantity, and UnitPrice directly. This is incorrect. The discount is applied as a percentage of the UnitPrice. The correct formula is: Discount * UnitPrice * Quantity.",
            "The SQL query is correct. It uses a LEFT JOIN to find products that are not present in the [Order Details] table by checking where [Order Details].ProductID IS NULL.",
            "The SQL query correctly identifies the supplier with the most products currently in stock by filtering products with UnitsInStock greater than 0, grouping by SupplierID, counting the number of distinct products per supplier, and ordering the result in descending order to find the top supplier with LIMIT 1.",
            "The query attempts to calculate the total quantity of products sold this year by extracting the year from the OrderID. However, OrderID is an integer and not a date field, so extracting the year from it is incorrect. Instead, this should be done on a date field, likely from an Orders table (not provided in the schema). Without the specific date field, the correction cannot be fully implemented. Ensure to use a date column for year extraction.",
            "The query is correct. It selects the product name with the largest absolute difference between UnitsInStock and UnitsOnOrder, ordering in descending order and limiting the result to one.",
            "The original query mistakenly uses OrderID to extract the month, but OrderID should be related to a date column in the orders table, which is missing in the schema. Assuming there should be an OrderDate field, the logic has been corrected for month and year subtraction.",
            "The SQL query is correct. It selects the count of distinct CategoryID values from the products table, which answers the business question accurately.",
            "The original query incorrectly sums only the 'Discount' field without considering the order quantity and unit price. The total discount should be calculated as 'Discount * UnitPrice * Quantity' for each order.",
            "The original SQL query included a JOIN with the 'categories' table, but the 'categories' table was not defined in the schema. Hence, to correct the query, this JOIN was removed. The modified query calculates the average units in stock for products, grouped by ProductID as required by the question, without relying on an undefined table.",
            "The SQL query is correct. It accurately calculates the total sales for each product by multiplying the quantity by the unit price for each order detail, and then summing this for each product. The query correctly groups by ProductName to achieve this.",
            "The SQL query is correct. It correctly selects ProductName from the products table where UnitsInStock is less than ReorderLevel. No changes are needed.",
            "The original query is mostly correct, but the HAVING clause filtering for suppliers providing more than one product was unnecessary for answering the question as it implies minimal constraint instead of finding those providing the most. It has been removed for clarity.",
            "The original query incorrectly calculated total revenue by not accounting for any discounts applied to the products. The revised query includes the discount factor in the revenue calculation by multiplying by (1 - od.Discount).",
            "The query is correct. It accurately counts the number of discontinued products by filtering the 'products' table where the 'Discontinued' column is equal to 1.",
            "The SQL query correctly identifies the top 5 best-selling products by quantity. The use of JOIN, GROUP BY, ORDER BY, and LIMIT clauses is appropriate for the question. The query accurately aggregates the quantity for each product and orders the results in descending order to find the top 5 products.",
            "The query correctly calculates the total discount for each product by multiplying the discount percentage by the quantity and unit price, summing up the result for each product. As such, the SQL query is correct.",
            "The query is mostly correct, but using DISTINCT in the subquery is unnecessary. It does not impact the result because the NOT IN clause already inherently works with unique values.",
            "The original query correctly retrieves product names and units on order, but it may be beneficial to include ProductID for clarity, as the question emphasizes 'each product'. The existing query does fetch products with UnitsOnOrder greater than zero, aligning with the question's intent.",
            "The original query calculates the average discount as a fraction. To find the percentage, multiply the discount by 100.",
            "The SQL query is correct and accurately answers the business question by aggregating total sales for each product based on quantity from the Order Details table, grouped and ordered by product name.",
            "The SQL query correctly answers the question by selecting products where the stock level is less than the reorder level. It appropriately selects ProductName, UnitsInStock, and ReorderLevel from the 'products' table, and the filter condition aligns with the business question.",
            "The SQL query correctly selects 'ProductName' and 'UnitsOnOrder' from the 'products' table and orders the results in descending order of 'UnitsOnOrder'. There are no apparent mistakes in the query.",
            "The SQL query is correct. It joins the suppliers table with the products table using SupplierID and then joins the result with the Order Details table using ProductID. It correctly sums the Quantity from Order Details to calculate the total units sold per supplier and groups the results by SupplierName.",
            "The query is mostly correct, but in the HAVING clause, the alias 'TotalSales' cannot be used directly because it's defined in the same SELECT clause. The correct approach is to use HAVING SUM(od.Quantity) < 100.",
            "The original query selected product names but the question asks for a count of products. Using COUNT(*) will return the number of such products.",
            "The SQL query assumes the existence of an 'OrderDate' field in the 'orders' table, which is not defined in the provided schema. If such a column exists in the actual database, the query is otherwise structured correctly to calculate monthly sales for each product. Ensure 'OrderDate' exists in the 'orders' table.",
            "The query references a 'categories' table which is not present in the provided schema. The schema includes a 'CategoryID' in the 'products' table, but the actual 'categories' table is missing from the schema. The query assumes the existence of this table without the schema details. Assuming the query logic and table presence is correct outside the given schema, the SQL syntax looks correct for achieving the desired result.",
            "The SQL query correctly identifies the product names with less stock than their reorder level by querying the 'products' table and applying the condition 'UnitsInStock < ReorderLevel'. The query is correct and aligns with the business question.",
            "The SQL query is correct. It accurately selects the ProductName from products where the Discontinued field is set to 1.",
            "The query is correct. It correctly calculates the average unit price of products for each supplier by grouping the data based on SupplierID and using the AVG function on UnitPrice.",
            "The SQL query correctly selects products with stock levels below their reorder level by checking if 'UnitsInStock' is less than 'ReorderLevel'. The query is correct and adheres to the requirements.",
            "The query correctly identifies products with the highest number of units on order by selecting the maximum UnitsOnOrder from the products table. It then retrieves the ProductID and ProductName for those products where the UnitsOnOrder matches this maximum value. The query is correct as it stands.",
            "The SQL query correctly calculates the average discount from the [Order Details] table. No changes are needed.",
            "The original query contained an error because 'OrderDate' was being used but not present in the '[Order Details]' table. I added an assumption to filter by year and month for grouping but removed the absence of 'OrderDate.' Ensure that the 'OrderDate' is correctly linked or present in the data schema for further use. Additionally, I added 'EXTRACT(YEAR / MONTH FROM od.OrderDate)' to correctly group by months, assuming 'OrderDate' is implicitly available or intended to be handled in the larger context.",
            "The SQL query is mostly correct but lacks the complexity required to accurately represent the business metric if considering all historical data and different stock levels. It assumes a direct relationship without considering time frames for the 'Inventory Turnover Ratio'. However, based on the provided formula, the query correctly calculates the ratio. Consider validating with appropriate data context and time constraints in an actual scenario.",
            "The SQL query correctly identifies products that are both in stock and on order. No corrections are needed.",
            "The SQL query is mostly correct, but it is missing a join to the 'products' table to include the ProductName for better understanding of product performance. Also, the OrderDate column is not specified in the schema of '[Order Details]'. Assuming OrderDate exists in an 'orders' table, or defined appropriately, the query could be revised as follows:\n\nSELECT P.ProductName, OD.ProductID, SUM(OD.Quantity) AS TotalSalesQuantity\nFROM [Order Details] OD\nJOIN products P ON OD.ProductID = P.ProductID\n-- Join 'orders' table if necessary\n-- JOIN orders O ON OD.OrderID = O.OrderID\nWHERE EXTRACT(YEAR FROM CURRENT_DATE) = EXTRACT(YEAR FROM OrderDate) \nAND EXTRACT(MONTH FROM CURRENT_DATE) = EXTRACT(MONTH FROM OrderDate)\nGROUP BY P.ProductName, OD.ProductID;",
            "The original query only selects ProductID and ProductName from '[Order Details]', which doesn't directly have these columns. A JOIN is needed with the 'products' table to obtain ProductName associated with each ProductID that has a discount greater than 0.2.",
            "The SQL query correctly joins the 'products' table with the '[Order Details]' table on 'ProductID' and aggregates the 'Quantity' per 'CategoryID'. The query is correct.",
            "The SQL query is correct. It joins the 'products' and '[Order Details]' tables using 'ProductID', and calculates the total revenue for each supplier by grouping by 'SupplierID'.",
            "The original query checks for products where 'UnitsInStock' is greater than or equal to 'ReorderLevel'. This is incorrect because it should check for products where 'UnitsInStock' is less than 'ReorderLevel'. Therefore, the condition 'UnitsInStock >= ReorderLevel' has been changed to 'UnitsInStock < ReorderLevel'.",
            "The query is incorrect because the 'OrderDate' column is not defined in the '[Order Details]' table. You need to join with the 'orders' table and include the 'OrderDate' in the selection conditions.",
            "The query is correct. It identifies products with current orders (UnitsOnOrder > 0) and stock levels below the reorder point (UnitsInStock < ReorderLevel), which meets the criteria for suggesting a reorder.",
            "The query mistakenly groups by ProductID and ProductName, which is not suitable for CORR as it needs a single correlation value across the dataset, not per product. CORR should be calculated over the entire dataset without grouping: 'SELECT CORR(p.UnitPrice, od.Discount) AS PriceDiscountCorrelation FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID;'",
            "The SQL query is correct. It selects the `ProductName` from the `products` table where the `UnitsInStock` are less than the `ReorderLevel`.",
            "The SQL query correctly identifies products that have not been reordered despite having stock levels below the reorder level. The condition checks if the stock is below the reorder level and if no new units have been ordered, which aligns with the business question.",
            "The SQL query is correct and retrieves the top 5 products by sales quantity. It correctly joins the products and [Order Details] tables, groups by ProductName, orders by TotalQuantity in descending order, and limits the results to 5.",
            "The SQL query is correct and properly retrieves the names of all products that are currently discontinued.",
            "The original query is correct. It calculates the average discount on all products using the AVG function on the Discount column in the [Order Details] table.",
            "The SQL query is correct and aligns with the business question to determine the total sales value by category. Make sure the 'Categories' table exists and has a 'CategoryID' column as required.",
            "The SQL query correctly identifies product names with zero units in stock by selecting from the 'products' table where 'UnitsInStock' equals zero. The query is syntactically correct and matches the business question.",
            "The SQL query is mostly correct but needs to be combined into one query to avoid running two separate queries. The correct query is:\nSELECT ProductName, UnitPrice FROM products WHERE UnitPrice = (SELECT MAX(UnitPrice) FROM products) OR UnitPrice = (SELECT MIN(UnitPrice) FROM products);",
            "The SQL query is correct and accurately answers the business question by counting the number of products within each category.",
            "The query is correct. It correctly joins the 'Order Details' table with the 'products' table on 'ProductID' and filters for products where 'Discontinued' is true. The query then calculates the total quantity of these discontinued products, which matches the business question.",
            "The SQL query correctly calculates the difference between UnitsInStock and UnitsOnOrder for each product, which measures stock optimization efficiency.",
            "The original query did not include the grouping by ProductID. The correct query now groups by both Month and ProductID to reflect product performance trends monthly.",
            "The original query did not include 'UnitPrice' in the SELECT clause, which is necessary to examine the relationship between unit price and sales quantity. Additionally, 'UnitPrice' should be added to the GROUP BY clause for correctness.",
            "The original query incorrectly limits the results to only one product, which may not be sufficient if multiple products share the highest reorder level. The corrected query ensures all products with the highest reorder level are returned.",
            "The query correctly calculates the average 'UnitsOnOrder' for each supplier by grouping the 'products' table by 'SupplierID' and using the AVG aggregation function. The query is correct.",
            "The given SQL query assumes the existence of an 'orders' table with an 'OrderDate' column, which is not specified in the provided schema. If the 'orders' table with 'OrderDate' exists, the query correctly identifies seasonal trends by calculating the total quantity ordered per month. Ensure the 'orders' table exists; otherwise, the query will not execute correctly.",
            "The original query needs to handle division by zero by using NULLIF for AVG(products.UnitsInStock) and ensure only active products by filtering out discontinued products with WHERE products.Discontinued = 0.",
            "The SQL query is correct. It retrieves the product names where the units in stock are less than the reorder level, which aligns with the business question.",
            "The query correctly calculates the total value of the current inventory for each category by multiplying the units in stock by the unit price and grouping the results by CategoryID. The logic and syntax align with the schema provided.",
            "The SQL query is correct. It selects products where 'Discontinued' is true and 'UnitsInStock' is greater than zero, which answers the business question accurately.",
            "The SQL query is correct for the given question. It calculates the average discount applied to products in the 'Order Details' table.",
            "The SQL query is correct. It calculates the average price of products for each supplier and orders the results in descending order to identify the suppliers with the most expensive products on average.",
            "There is an assumption that the 'orders' table exists and that it contains the 'OrderDate' column, but this is not specified in the schema. The query assumes the existence of these elements. If these assumptions hold true, the query seems mostly correct otherwise; however, it's beneficial to specify table aliases and ensure column names are precise. Correcting with assumption: SELECT products.CategoryID, EXTRACT(MONTH FROM orders.OrderDate) AS Month, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.CategoryID, EXTRACT(MONTH FROM orders.OrderDate);",
            "There were a few issues with the original query: 1) The query did not join the 'products' table, hence it could not retrieve the product names. 2) There was no check for the year, which could potentially miscount when transitioning years. 3) 'OrderDate' was not specified in the schema, assuming it should be referenced but with added context. Along with these changes, the additional group of 'ProductName' allows for enhanced readability.",
            "The query correctly identifies products that are on order and still in stock. However, to find those with the highest units on order, an ORDER BY clause is needed.",
            "The SQL query is correct as it retrieves the product name and unit price for the product with the lowest unit price among those that are not discontinued.",
            "The original query is missing the join to the 'orders' table to access 'OrderDate'. I've corrected it by adding an INNER JOIN between 'Order Details' and 'orders' on 'OrderID'.",
            "The original query does not join with the orders table to access the OrderDate column. It also does not calculate the average per product per order, which requires grouping by ProductID.",
            "The SQL query is correct. It retrieves all products from the products table where the ProductID does not appear in the Order Details table, effectively identifying products that have never been ordered.",
            "The original query is incorrect because it uses an aggregate function without a GROUP BY clause and mismatches usage of the turnover ratio formula. The corrected query properly joins the 'products' and '[Order Details]' tables, groups by necessary columns, and appropriately uses aggregate functions to calculate the turnover ratio.",
            "The original query consists of two separate SELECT statements which do not allow for a direct calculation of the ratio. A single query should be used to calculate and return both the discontinued and active product counts in a manner that allows for ratio calculation.",
            "The query contains an error. The OrderDate column is missing from the '[Order Details]' table in the schema. It needs to be included in the schema definition to use it in the WHERE clause for quarterly filtering. If OrderDate were available, the logic would be correct. Also, ensure that CURDATE() correctly provides the current date context. If OrderDate exists, a correction would be: SELECT SupplierID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE QUARTER([Order Details].OrderDate) = QUARTER(CURDATE()) - 1 AND YEAR([Order Details].OrderDate) = YEAR(CURDATE()) GROUP BY SupplierID;",
            "The SQL query correctly answers the business question. It selects ProductName from the products table where the products have a non-zero ReorderLevel and the UnitsInStock is less than the ReorderLevel, indicating that they are low in stock and need to be reordered.",
            "The original query does not join the [Order Details] table with the products table, so it cannot retrieve the ProductName. The corrected query includes the necessary JOIN to access the ProductName.",
            "The original query did not account for the OrderDate which was not specified in the schema, hence it must be retrieved from an assumed orders table. I added a JOIN to the 'orders' table and included a WHERE clause to filter the last six months. 'MONTH(OrderDate)' is used for grouping.",
            "The SQL query correctly counts the number of products where the units in stock are greater than or equal to the reorder level. The query is accurate as written.",
            "The SQL query is correct. It calculates the total inventory value by multiplying the UnitPrice by the UnitsInStock for each product and summing the results.",
            "The SQL query is correct. It selects products with UnitsInStock lower than the ReorderLevel and ensures that the products are not discontinued.",
            "The original query is mostly correct. However, it's important to fully qualify ProductName with the 'products' table in the SELECT and GROUP BY clauses. This is necessary since it's good practice to avoid ambiguity even though the query might run fine in this context.",
            "The SQL query is correct and matches the business question. It successfully joins the '[Order Details]' table with the 'products' table to calculate the total quantity ordered for each product. It then orders the results in descending order of total quantity and limits the results to the top 5 products.",
            "The SQL query is mostly correct, but 'YOUR_SUPPLIER_ID' should be replaced with the actual supplier ID value you want to filter by. Replace YOUR_SUPPLIER_ID with an actual integer value to complete the query. Example: WHERE SupplierID = 123.",
            "The SQL query is correct. It calculates the average discount for a specified product by ProductID. Replace YOUR_PRODUCT_ID with the actual ProductID value.",
            "The SQL query is mostly correct, but 'YOUR_CATEGORY_ID' should be replaced with an actual category ID value. For accuracy, ensure that the 'UnitPrice' from '[Order Details]' is used to calculate the sales revenue. The GROUP BY clause is appropriate if the goal is to summarize per category. Example replacement could be 'WHERE CategoryID = 1' or any specific ID.",
            "The query is correct. It correctly counts the number of discontinued products that have units in stock greater than 0.",
            "The SQL query correctly selects products with UnitsInStock less than 10 and UnitsOnOrder greater than 20, fulfilling the business question requirements. It correctly queries the 'products' table and retrieves 'ProductID' and 'ProductName' satisfying the conditions specified.",
            "The query is incorrect because the 'Order Details' table does not have an 'OrderDate' column. To fix this, we need to join with the 'orders' table that presumably contains 'OrderDate.' Assuming there is an 'orders' table with 'OrderDate,' the query should be updated as follows.",
            "The SQL query correctly identifies products where the UnitsInStock is less than the ReorderLevel, meaning they have exceeded their reorder threshold.",
            "The SQL query is correct. It selects the SupplierID and counts the distinct products provided by each supplier, grouping by SupplierID and ordering the result in descending order to find the suppliers with the most variety of products.",
            "The original query is mostly correct. However, it is a good practice to prefix the columns with the table name or alias in case of any ambiguity. The query already does this, and it correctly calculates the revenue with and without the discount.",
            "The query is attempting to analyze monthly sales trends, but there is no 'OrderDate' column specified in the '[Order Details]' table according to the provided schema. The query needs to join with the 'orders' table to access the 'OrderDate' column, if it exists. This requires a schema with 'orders' having 'OrderDate'. Here's a corrected version assuming 'orders' table exists:\n\nSELECT DATE_TRUNC('month', orders.OrderDate) AS OrderMonth, SUM([Order Details].Quantity) AS TotalQuantity\nFROM [Order Details]\nJOIN orders ON [Order Details].OrderID = orders.OrderID\nWHERE [Order Details].ProductID = YOUR_PRODUCT_ID\nGROUP BY OrderMonth\nORDER BY OrderMonth;",
            "The provided SQL query correctly calculates the average unit price for each category and orders the results in descending order. No changes are needed.",
            "The query calculates a ratio of UnitPrice to ReorderLevel. However, this does not establish a correlation statistically. To assess correlation, data analysis tools or additional statistical functions are needed beyond basic SQL. The query correctly calculates the ratio but does not measure correlation.",
            "The original query mistakenly divides by the sum of unit prices instead of the total sales value. A subquery should be used to calculate the total sales value for the entire dataset.",
            "The original query is missing a join to the 'orders' table to reference 'OrderDate'. The corrected query includes this join.",
            "The SQL query is correct. It calculates the percentage by dividing the count of discontinued products by the total number of products, multiplying by 100.",
            "The SQL query is correct. It selects the ProductName and UnitPrice from the products table where the Discontinued column is set to 1, indicating that the product is discontinued.",
            "The SQL query is correct. It selects ProductName from the products table, orders the records by UnitPrice in descending order, and limits the result to the top 5 products, which answers the business question accurately.",
            "The SQL query correctly identifies products with less than 10 units in stock and needing reorder by checking if UnitsInStock is both less than 10 and less than or equal to the ReorderLevel. This logic is accurate given the business context. No changes are necessary.",
            "The original query did not account for the current inventory levels. Adding 'AND UnitsInStock > 0' ensures we are only counting products that are discontinued and still in stock.",
            "The SQL query is correct for the given question and accurately calculates the average discount from the [Order Details] table.",
            "The original query retrieves only the product name without including supplier information. To find the supplier providing the most expensive product, the SupplierID should be selected instead.",
            "The original query correctly identifies products that have never been ordered by checking for ProductIDs that do not appear in the [Order Details]. The use of DISTINCT is an improvement for clarity, though it is not strictly necessary for correctness in this case.",
            "The original query might cause a division by zero error if UnitsInStock is zero. To address this, I've added NULLIF to prevent division by zero. Everything else in the query is correct with respect to the schema and requirements.",
            "The given SQL query is correct. It correctly calculates the sum of 'UnitsOnOrder' for each 'CategoryID' and orders the results in descending order to find the category with the highest units on order.",
            "The SQL query is correct. It calculates the total inventory value for all products that are not discontinued by multiplying the unit price by the units in stock and summing up the results where the product is not discontinued.",
            "The SQL query correctly identifies products where the current stock (UnitsInStock) is less than the reorder level (ReorderLevel), which suggests that reorder levels might need to be increased. The query accurately reflects the business question.",
            "The original query counts the number of line items with a quantity greater than 100. Instead, we need to count the distinct orders that have any product with a quantity more than 100 to address the question.",
            "The SQL query correctly selects the SupplierID and counts the products that are discontinued, grouping by SupplierID and ordering by the count in descending order to find the supplier with the most discontinued products. This aligns with the question. The query should work as expected.",
            "The query is mostly correct. However, since 'OrderID' is ambiguous, we should fully qualify it with '[Order Details]'. Additionally, 'LIMIT' is not standard ANSI SQL, so we use 'FETCH FIRST 1 ROW ONLY'.",
            "The query is mostly correct, but it should exclude discontinued products by adding a WHERE clause to filter products where Discontinued is 0.",
            "The original query did not join the 'products' table to get 'ProductName'. The corrected query includes a JOIN between '[Order Details]' and 'products' on 'ProductID' and groups by 'ProductName'.",
            "The query is almost correct, but there are a couple of issues. The DATEADD function should use 'MONTH' instead of 'month'. The GROUP BY clause should also use EXTRACT(MONTH FROM OrderDate) consistently. Additionally, the OrderDate column is missing in the schema, so ensure the correct column and table are used.",
            "The query is correct. It calculates the total sales per product by multiplying quantity and unit price, and then filters those products where sales exceed $5000.",
            "The query is mostly correct, but ensure logical correctness. 'UnitsInStock' is not aggregated, so it should be included in the GROUP BY clause. Here's the revised query:\n\nSELECT ProductName, UnitsInStock - SUM(Quantity) AS StockToOrderDifference FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName, UnitsInStock;",
            "The original query does not handle the potential division by zero when the average UnitsInStock is zero. Adding NULLIF ensures that we avoid division by zero issues. AVG should also cast UnitsInStock to FLOAT for precision. Correct the GROUP BY to ensure it is by ProductID and ProductName.",
            "The query is incorrect because the 'categories' table is not defined in the schema provided. To properly construct the query, we need to utilize only the given tables. If the 'categories' table exists externally or is assumed, the implementation could work. However, based on the provided schema, the query cannot be executed as there is no 'categories' table mentioned.",
            "The SQL query is mostly correct. However, 'LIMIT 5' is not part of the ANSI SQL standard, though it is supported by some SQL dialects like MySQL. A standard alternative using ANSI SQL would be to use the FETCH FIRST 5 ROWS ONLY clause. Here's the revised query: SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC FETCH FIRST 5 ROWS ONLY;",
            "The SQL query is correct. It accurately calculates the total discount by multiplying the quantity, unit price, and discount for each order detail and then summing these values across all records.",
            "The SQL query is correct. It correctly selects products that have no units in stock and no units on order by checking that both 'UnitsInStock' and 'UnitsOnOrder' are equal to 0.",
            "The query is mostly correct but there appears to be a missing 'categories' table in the initial schema. Assuming its structure is valid, the query should work as expected, calculating the average reorder level for each category based on the 'CategoryID' relationship between 'products' and the presumed 'categories' table.",
            "The original query lists product names, but the question asks for a count. Corrected the query to count the products with stock higher than the reorder level.",
            "Added DISTINCT to ensure each product is listed only once if it meets the discount condition.",
            "The SQL query correctly calculates the total value of the current stock for each product by multiplying UnitsInStock with UnitPrice. The query is correct.",
            "The original query incorrectly joined 'products' and 'Order Details' tables, but 'UnitsInStock' is only in the 'products' table, so the join is unnecessary. The revised query calculates stock variability using only the 'products' table.",
            "The original query used HAVING instead of WHERE, which is incorrect since HAVING is typically used with GROUP BY. The corrected query includes a WHERE clause to filter products with a reorder difference greater than zero.",
            "The provided query was missing an ORDER BY clause and a LIMIT clause to ensure that only the category with the highest count is returned. The corrected query adds ORDER BY DiscontinuedCount DESC and LIMIT 1 to address this.",
            "The query is correct. It joins the suppliers, products, and [Order Details] tables to calculate the sales performance grouped by supplier. The SUM function is used to aggregate the quantity of products sold per supplier. The GROUP BY clause appropriately groups the results by supplier name.",
            "The original query didn't account for the need to filter orders from the past year and missed joining the 'orders' table to access 'OrderDate'. The corrected query addresses these issues.",
            "The query correctly calculates the total impact of discounts on sales by summing the product of quantity, unit price, and discount for each order detail. No corrections needed.",
            "The SQL query correctly retrieves the current stock level for each product by selecting the 'ProductID' and 'UnitsInStock' columns from the 'products' table. The query aligns with the business question and uses the correct columns in the schema, so it is correct.",
            "The query correctly calculates the turnover ratio by summing the product of ordered quantities and unit prices, then dividing by the average units in stock. However, ensure that units in stock are calculated over a relevant time frame, as aggregation functions need context in a real-world scenario. There is no visible mistake in the syntax, assuming the schema is adhered to.",
            "The SQL query is correct and meets the requirement of finding the top 5 performing products based on sales quantity. However, to be fully aligned with the schema, it's a good practice to qualify the ProductID with the correct table name. No change is required in the logic.",
            "The SQL query is correct. It accurately counts the number of discontinued products by filtering where the Discontinued column is equal to 1, representing true.",
            "The SQL query is correct. It calculates the average discount from the [Order Details] table, which aligns with the business question.",
            "The query is correct. It sums up the 'UnitsOnOrder' for each 'CategoryID' from the 'products' table.",
            "The query correctly identifies products that have never been sold by checking if their ProductID is not present in the [Order Details] table. The use of SELECT DISTINCT ensures only unique ProductIDs are considered. The query is correct and follows ANSI SQL standards.",
            "The SQL query correctly calculates the percentage of products below the reorder level by comparing UnitsInStock with ReorderLevel. The subquery accurately computes the total number of products.",
            "The query correctly calculates the average price of products by category using GROUP BY on CategoryID. The AVG function is correctly applied to UnitPrice. The SQL query is correct.",
            "The query is correct and accurately answers the question by counting the number of products for each reorder level.",
            "The query correctly identifies products from the [Order Details] table that have been ordered with a discount by checking if the Discount is greater than 0. It uses SELECT DISTINCT to ensure each ProductID is listed only once.",
            "The SQL query is correct and will return the product with the highest unit price that is currently in stock. The use of ORDER BY UnitPrice DESC and LIMIT 1 is appropriate for retrieving the desired result.",
            "The original query uses DATEADD which is not standard in ANSI SQL. I have replaced it with DATE_SUB. Also, ensure 'orders' table exists with 'order_date' column.",
            "The query is correct. It accurately counts the distinct OrderIDs where any products have a discount greater than zero.",
            "Correct the calculation by ensuring the division doesn't produce an error for zero inventory. Use NULLIF to avoid division by zero. Additionally, ensure proper grouping by products.",
            "The query correctly aggregates the total units in stock for each product category and orders the results in descending order to identify which categories have the most units in stock. The SQL query is correct as per the business question and schema provided.",
            "The SQL query is correct. It correctly selects the 'ProductName' from the 'products' table where 'UnitsInStock' is less than 'ReorderLevel'.",
            "The query is correct. It correctly joins the 'Order Details' and 'products' tables on the ProductID and calculates the average Quantity for products that are discontinued.",
            "The SQL query is correct. It correctly joins the 'Order Details' table with the 'products' table using ProductID and calculates the total revenue by summing up the product of Quantity and UnitPrice, grouped by CategoryID.",
            "The original query is almost correct but may return duplicate SupplierIDs if a supplier has multiple out-of-stock products. Using DISTINCT ensures only unique SupplierIDs are returned.",
            "The query is missing the 'OrderDate' column in the '[Order Details]' table definition. Also, the query assumes that 'OrderDate' exists in '[Order Details]' without ensuring it. Ensure the column exists or adjust accordingly. Otherwise, the formula and join logic are correct.",
            "The query is incomplete; it lacks the necessary JOIN with the orders table to access the OrderDate column. Added JOIN and ensured correct month and year filtering.",
            "The SQL query is correct. It retrieves the count of distinct ProductIDs from the 'Order Details' table where the Discount is greater than zero, which answers the business question.",
            "The query is correct. It selects the product names from the products table where the ProductID does not appear in the [Order Details] table.",
            "The SQL query correctly identifies products with a reorder level higher than 10 and that are currently discontinued. The use of 'ReorderLevel > 10' and 'Discontinued = 1' is correct, as it effectively filters the intended products. No changes needed.",
            "The SQL query correctly calculates the average unit price for orders with more than 100 units by selecting the AVG(UnitPrice) from the '[Order Details]' table where the Quantity is greater than 100. The query is accurate and follows the given business question.",
            "The SQL query checks for products with UnitsInStock greater than ReorderLevel and not discontinued. The query currently only checks if UnitsInStock is greater than ReorderLevel, but doesn\u2019t check whether UnitsInStock is less than or equal to any defined maximum (like UnitsInStock + UnitsOnOrder). If 'maximum' refers to UnitsOnOrder, then the query should also include this condition.",
            "The SQL query correctly joins 'Order Details' and 'products' tables using the ProductID, then calculates the sum of Quantity for each ProductID, grouping by ProductID. However, since it specifies 'monthly' granularity, if there is a need to segment by month, a date field would be needed, which is absent in the schema. As it stands, the query will provide an overall performance without a monthly breakdown.",
            "The SQL query correctly calculates the total number of units ordered per supplier. It joins the 'Order Details' table with the 'products' table on ProductID and groups by SupplierID to sum the quantity.",
            "The SQL query is correct. It retrieves product names with a unit price greater than the average unit price of all products.",
            "The SQL query is correct. It calculates the percentage of discontinued products by counting the discontinued products and dividing by the total number of products, then multiplying by 100.",
            "The query is almost correct, but it assumes that 'OrderDate' is a column within '[Order Details]', which is not specified in the schema. Without 'OrderDate', we cannot filter the data for the last quarter. The query must include the 'orders' table, assuming there's a relationship through 'OrderID' or a similar field. Here's a corrected query, assuming an 'orders' table exists with an 'OrderDate' column:\n\nSELECT products.CategoryID, AVG([Order Details].Quantity) \nFROM [Order Details] \nJOIN products ON [Order Details].ProductID = products.ProductID \nJOIN orders ON [Order Details].OrderID = orders.OrderID \nWHERE orders.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND CURRENT_DATE \nGROUP BY products.CategoryID;",
            "The SQL query correctly retrieves the product name and the number of units in stock from the products table. No changes are needed.",
            "The SQL query is correct as it selects the names of products that have been discontinued from the products table where the 'Discontinued' column is set to 1.",
            "The SQL query is correct for the given business question. It correctly selects the CategoryID and calculates the average UnitPrice, grouping by CategoryID.",
            "The SQL query correctly counts the number of products provided by each supplier using the COUNT function on ProductID and groups the results by SupplierID. It then orders the results in descending order to find the supplier with the most products and limits the output to 1 to get the top supplier. Therefore, the query is accurate.",
            "The original query incorrectly compares dates using DATE_FORMAT(NOW(), '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m'), which does not filter by order date. It should filter using an order date column from a relevant orders table. Assuming there is a column like 'OrderDate', the correct filter would be DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m'). However, the Order Details table does not include dates, so the query is incomplete without additional tables.",
            "The initial query calculates the sum of discounts directly, but the discount needs to be applied to the total price of the products sold. Therefore, the correct calculation is the sum of 'Discount * Quantity * UnitPrice' for each product.",
            "The SQL query accurately answers the business question by selecting products where the UnitsInStock are less than or equal to the ReorderLevel, identifying products that need to be reordered. The query is correct.",
            "The original query attempted to filter by the current month using the OrderID, which is not meant to store date information. If a datetime column related to orders is present in another table, use it to filter by month. The query as given does not effectively achieve the desired result since OrderID isn't related to dates.",
            "The SQL query accurately addresses the business question by computing the average units on order for each category and sorting them to find the highest, with the use of LIMIT 1 to get the top category. No corrections are needed.",
            "The original query used QUARTER(CURDATE()) to filter for the current quarter. Since the question asks for the last quarter, the query should use QUARTER(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER)) instead. Additionally, a check on OrderID is not appropriate for date operations; it should relate to a date column instead.",
            "The SQL query is correct. It counts the number of products for each supplier, grouped by SupplierID, as requested in the business question.",
            "The original query was incorrect as it lacked the 'orders' table to access order dates, causing 'DATE_FORMAT(OD.OrderID, '%Y-%m')' to fail. The corrected query uses 'DATE_TRUNC' to extract the month from the 'OrderDate' in the 'orders' table.",
            "The query correctly retrieves the top-selling products by each category by summing the quantity of orders for each product within each category. The GROUP BY clause ensures that the results are aggregated both by CategoryID and ProductName, allowing the ORDER BY to sort within each category by TotalSales in descending order. However, if the goal is to only show the top product per category, further refinement with a window function or subquery may be required to achieve this top-selling aspect specifically.",
            "The original query only selects one product with the highest unit price due to the LIMIT 1 clause. To find all products with the highest unit price, we need to compare each product's UnitPrice to the maximum UnitPrice.",
            "The SQL query is correct. It properly joins the products and [Order Details] tables on ProductID and calculates the total quantity sold for each product using SUM and groups by ProductName.",
            "The query was corrected to calculate the average discount for the previous month by adjusting the WHERE clause to compare against OD.OrderID properly using DATE functions.",
            "The query correctly selects product names from the 'products' table where the stock is greater than zero. It accurately addresses the business question described.",
            "The SQL query correctly identifies products with UnitsInStock less than or equal to their ReorderLevel. The query is accurate and consistent with the schema provided.",
            "The SQL query correctly calculates the total value of products in stock by multiplying the UnitPrice by UnitsInStock and summing the results. The query is accurate and aligns with the business question.",
            "The SQL query is correct and aligns with the business question by selecting the count of products that are discontinued and have units in stock.",
            "The SQL query is correct. It calculates the average unit price for products where UnitsOnOrder is greater than 0, matching the business question.",
            "The query is correct for the given question. It sums the UnitsOnOrder for each CategoryID and orders the results in descending order to find the categories with the most units on order.",
            "The SQL query is correct. It calculates the total discount by multiplying the unit price, quantity, and discount for each order and summing the results.",
            "The query is mostly correct but it is missing the 'OrderDate' column definition, which would usually be found in an 'orders' table rather than '[Order Details]'. Assuming 'OrderDate' is in a table such as 'orders', you need to join '[Order Details]' with 'orders'. Correct the SQL query to include the necessary joins.",
            "The original query uses 'LIMIT 5', which is not part of the ANSI SQL standard. Instead, 'FETCH FIRST 5 ROWS ONLY' should be used to limit the number of results to 5 in a standard-compliant manner. Additionally, the 'OrderDate' column must exist in the '[Order Details]' table for the query to work; otherwise, the query will fail if the column is not part of the schema.",
            "The SQL query is correct. It correctly calculates the total revenue for each category by joining the products table with the [Order Details] table and grouping by CategoryID.",
            "The SQL query is correct and accurately answers the business question. It selects products with a unit price lower than the average unit price.",
            "The SQL query correctly retrieves all product names where the reorder level is greater than 20 and less than 100. It matches the business question accurately.",
            "The query is correct. It selects products from the 'products' table that have a 'ProductID' not present in the 'Order Details' table's 'ProductID', effectively finding products that have never been ordered.",
            "The provided SQL query has an issue because the 'OrderDate' column does not exist in the '[Order Details]' table as per the given schema. To determine monthly sales performance, the 'OrderDate' would likely be needed from the related 'orders' table, which is not provided in the schema. However, assuming we had access to an 'orders' table with an 'OrderDate', the structure of the query could be correct if we JOIN '[Order Details]' with 'orders' on 'OrderID'. As it stands, the query cannot function without 'OrderDate'. Further schema details are needed to complete the correction.",
            "The SQL query correctly calculates the total revenue for each product by summing the product of quantity and unit price. It also correctly groups by ProductID and ProductName and orders the results by TotalRevenue in descending order. No corrections are needed.",
            "The original query used DATEADD and GETDATE, which are not part of the ANSI SQL standard. I replaced them with DATE_SUB and CURRENT_DATE to calculate the date from one year ago.",
            "The SQL query is correct. The condition accurately checks if the stock levels are below 10% of the reorder level using the specified columns and logic.",
            "The original query is incorrect because it doesn't properly handle the date comparison or include specific monthly filtering in the 'products' table. The query should join 'products' for the respective months and compute the difference. Assuming 'OrderDate' is added to 'products', the corrected query calculates the difference by joining tables filtered by the specified months.",
            "The initial query is mostly correct, but changes were made to use `CURRENT_DATE` instead of `GETDATE()` for ANSI SQL compatibility. The MAX and MIN functions should apply to `[Order Details].UnitPrice`, assuming the prices vary by order.",
            "The SQL query is correct and accurately answers the business question by summing the quantity of orders for each product.",
            "The SQL query is correct. It selects non-discontinued products whose stock is below the reorder level.",
            "The SQL query is correct and retrieves the products with the highest units on order, limited to the top 5 results.",
            "The SQL query correctly retrieves all details from the [Order Details] table where a discount greater than zero was applied.",
            "The SQL query correctly identifies the product with the least units in stock by ordering the products by the 'UnitsInStock' column in ascending order and limiting the result to one record. The query is correct as per the given schema and business question.",
            "The query correctly calculates the reorder status by subtracting the ReorderLevel from the UnitsInStock for each product. It returns the ProductID and the calculated ReorderStatus. The SQL is correct according to the given schema and requirements.",
            "The query incorrectly calculates the total discount. The discount needs to be applied to the product of Quantity and UnitPrice, not multiplied together directly as Discount. Correct calculation: Discounted amount for each order = Quantity * UnitPrice * Discount, and the total discount should be SUM of these amounts.",
            "The SQL query correctly answers the question by counting the orders per category. The query joins the '[Order Details]' table with the 'products' table on 'ProductID', then groups the results by 'CategoryID' and orders them by 'OrderCount' in descending order, which offers the most frequently ordered categories as intended. The SQL syntax is correct as per the ANSI SQL standard.",
            "The SQL query is correct. It correctly calculates the total stock value by multiplying the UnitPrice with UnitsInStock for each product and then summing them up.",
            "The SQL query is incorrect because the table 'orders' is not defined in the provided database schema. Additionally, there is no 'OrderDate' column mentioned. Assuming 'OrderDate' should be included in the orders table, the query should also join the 'products' table to identify products correctly by ProductID, and you need to ensure 'OrderDate' is indeed a valid column. Here's a corrected query assuming 'OrderDate' is available and 'orders' table should be defined:\n\n1. Correct the schema to ensure 'orders' table is present or 'OrderDate' exists in '[Order Details]'.\n2. The revised SQL query:\n\nSELECT DATE_TRUNC('month', orders.OrderDate) AS Month, [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalPerformance\nFROM [Order Details]\nJOIN orders ON [Order Details].OrderID = orders.OrderID\nJOIN products ON [Order Details].ProductID = products.ProductID\nGROUP BY Month, [Order Details].ProductID;\n\nIf 'OrderDate' is not available, consider how to obtain monthly grouping from the data provided.",
            "The query correctly calculates the average discount rate by using the AVG function on the Discount column in the [Order Details] table. No corrections needed.",
            "The SQL query correctly selects the ProductID and calculates the total sales revenue by multiplying Quantity and UnitPrice from the [Order Details] table. It then groups by ProductID, orders the results by sales revenue in descending order, and limits the output to the top 5 products. The query is correct and adheres to the business question requirements.",
            "The original query incorrectly checks that the count of products equals the count of discontinued products. Instead, it should ensure there are no non-discontinued products for suppliers. The corrected query groups by SupplierID and uses HAVING to ensure there are no products with Discontinued set to 0.",
            "The original query retrieves the product details, but the question asks for a count of such products. The corrected query uses COUNT to return the number of products with no stock and no orders.",
            "The SQL query is correct. It correctly counts the number of discontinued products by filtering where 'Discontinued' equals 1.",
            "The original query does not account for the 'Discontinued' status of products, which should be excluded. Added a condition to filter out discontinued products by checking 'Discontinued = 0'.",
            "The SQL query is correct. It properly selects the ProductName from the products table and orders the results by UnitsInStock in descending order to get the top 5 products with the highest inventory levels.",
            "The SQL query is correct and calculates the average unit price of all products from the 'products' table.",
            "The query correctly calculates the total sales amount for each product category by joining the products, order details, and categories tables. It correctly groups the results by category name and sums up the sales amount for each category. Assuming the 'categories' table exists with a 'CategoryName' column, the query is correct.",
            "The original query missed grouping by 'ProductName' and used 'NOW() - INTERVAL' which is not standard. I've corrected it to use 'DATEADD' and 'CURRENT_DATE'.",
            "The original query is mostly correct. However, for clarity, it's good to alias the AVG result and ensure proper usage of table aliases.",
            "The query is correct. It accurately calculates the difference between UnitsInStock and UnitsOnOrder for each product and selects the ProductName(s) where this difference is the maximum.",
            "The query calculates the inventory turnover ratio but doesn't account for the granularity of 'monthly'. To calculate this accurately on a monthly basis, a date or time dimension must be included, which is missing in the given schema. Without a date field, we cannot modify the query to achieve monthly granularity. The schema needs to be updated with a date field in [Order Details] to support this calculation.",
            "The query is mostly correct. However, the 'suppliers' table is not defined in the schema provided. Assuming 'suppliers' is an appropriate table name, the query is correct regarding the logic to join products with their corresponding suppliers and order quantities.",
            "The original query correctly calculates the total revenue by including discounts, but the GROUP BY clause should reference p.ProductName rather than p.ProductID to align with the SELECT clause.",
            "The SQL query is correct. It selects product names from the 'products' table where the ProductID does not exist in the distinct set of ProductIDs from the 'Order Details' table, thereby identifying products that have never been ordered.",
            "The original query uses 'LIMIT 3' which is not ANSI SQL compliant. The correct ANSI SQL syntax to limit results is 'FETCH FIRST 3 ROWS ONLY'. I've corrected the query to use this syntax.",
            "The SQL query is correct. It selects the product names with the maximum reorder level by using a subquery to determine the highest ReorderLevel from the products table.",
            "The given SQL query is mostly correct. However, under ANSI SQL standard, VARIANCE() might not be directly supported as a function. Instead, you would typically use a database vendor-specific function or calculate variance using other functions. Assuming the database supports a VARIANCE function, the query is correct for calculating the variance in unit prices for each product category. Otherwise, consider checking your specific SQL dialect for the correct variance function or using AVG and other mathematical operations to compute variance manually.",
            "The original query is mostly correct, but adding an alias 'AS DiscountCount' for COUNT(od.Discount) improves readability.",
            "The original query didn't alias the aggregated columns for readability and didn't include 'p.ProductName' in the GROUP BY clause, which is required for grouping by a non-aggregated column. These issues have been corrected.",
            "The SQL query is correct and accurately answers the question using appropriate conditions for Discontinued products and stock levels.",
            "Corrected the original query to count distinct ProductID to ensure it counts different products for each supplier.",
            "The query is correct in listing suppliers providing products that need reordering by checking if UnitsInStock are less than or equal to ReorderLevel. However, it does not distinguish whether products are discontinued or active. To refine the results, one might consider adding a condition to exclude discontinued products: SELECT SupplierID, ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;",
            "The query is correct. It joins the '[Order Details]' table with the 'products' table, computes the total quantity sold for each product, and orders by this total in descending order. The LIMIT 5 correctly returns only the top 5 products.",
            "The original query retrieves the names of products below their reorder level, but the question asks for the count of such products. The corrected query counts the number of products where UnitsInStock is less than ReorderLevel.",
            "The SQL query is correct for fetching the category with the highest average unit price. It groups by CategoryID and orders by the average UnitPrice in descending order, returning the top category.",
            "The query correctly calculates the average discount across all order details, which answers the question accurately.",
            "The original query did not include the orders table to access the month information. I added a join with the orders table and used EXTRACT(MONTH FROM o.OrderDate) to group by month.",
            "The SQL query is correct. It selects products with a positive stock and are marked as discontinued.",
            "The original query is missing the reference to the correct product attributes in the outer query. The corrected query properly joins the tables on both the CategoryID and UnitPrice, fetching the products with the highest prices in each category.",
            "The SQL query correctly computes the average number of units on order across all products. No changes are necessary.",
            "The original query was mostly correct but needed a minor adjustment. The GROUP BY clause should include p.ProductID instead of p.ProductName to properly align with the key that's being counted. This ensures accuracy in identifying the most frequently ordered product, not just by name.",
            "The query correctly selects products where the reorder level is greater than the units in stock, but to get the count of such products, the SQL query should be updated as follows: SELECT COUNT(*) FROM products WHERE ReorderLevel > UnitsInStock;",
            "The SQL query is correct. It selects the SupplierID and counts the number of products for each supplier, groups by SupplierID, orders the results by the product count in descending order, and limits the output to the top 3 suppliers.",
            "The initial query incorrectly handles the discount calculation. Instead of subtracting the discount portion, it should multiply the total by (1 - Discount) to directly compute the discounted revenue. The revised query corrects this issue.",
            "The SQL query correctly calculates the average quantity per order per product by joining the 'Order Details' table with the 'products' table based on ProductID and grouping by ProductName. The query is correct.",
            "The original SQL query has an incorrect use of AVG with SUM directly, which is not advisable. Subqueries are corrected to determine the average turnover ratio first. The query retrieves products whose turnover ratio is below this average.",
            "The SQL query is correct. It selects the product names from the 'products' table, ordering by 'UnitsInStock' in descending order, and limits the result to the top 5 products with the highest inventory levels.",
            "The original query does not consider whether the product is discontinued. This correction adds a condition to exclude discontinued products, ensuring that only active products are considered for reorder.",
            "The original query is missing the selection of OrderDate from the [Order Details] table, which is necessary for the WHERE clause condition. Additionally, DATE_SUB is not ANSI SQL standard; instead, use DATEADD with the correct syntax for obtaining the date from a month ago.",
            "The original query incorrectly refers to UnitPrice without specifying the table, which can lead to ambiguity. Modified the query to specifically use [Order Details].UnitPrice.",
            "The query correctly selects suppliers with out-of-stock products, but it could be improved for clarity or additional context. If additional details were needed, such as SupplierName, a join with a suppliers table would be required.",
            "The original query incorrectly uses MAX(Discount) in the SELECT clause and GROUP BY ProductName. To find the product with the highest discount, there should be no aggregation or grouping on ProductName. Instead, use ORDER BY [Order Details].Discount DESC and LIMIT 1 to retrieve the highest discount.",
            "The query is missing the 'OrderDate' column in the 'Order Details' table from the schema, assuming its existence. Correct usage of date subtraction is applied with 'INTERVAL' directly, assuming compatibility with the SQL dialect being used.",
            "The SQL query has a couple of issues. First, the 'OrderDate' column is not mentioned in the schema provided. If 'OrderDate' exists in another table, it should be included in the query through JOIN, or the schema might be missing the 'orders' table with an 'OrderDate' column. Second, DATE_SUB and CURDATE are MySQL functions; if ANSI SQL compliance is needed, use a different function based on the SQL engine. Third, 'Inventory Turnover Ratio' was intended to be calculated using 'SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock)', but SUM within a date range makes this ratio incorrect if not filtered properly in a joined date column. Assuming 'OrderDate' exists and adjustments for date functions are permitted, the right query might look like this:\n\nSELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) as InventoryTurnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= CURRENT_DATE - INTERVAL '1 MONTH' GROUP BY products.ProductID HAVING InventoryTurnover < 1;",
            "The query incorrectly assumes that the 'OrderDate' field is part of the '[Order Details]' table. The query needs to reference an 'orders' table to filter by 'OrderDate'. The corrected query joins '[Order Details]' with 'orders' to apply the date filter.",
            "The original query retrieves product names with zero units on order, but the question asks for a count. The corrected query uses COUNT(*) to get the number of such products.",
            "The query is correct. It selects products whose UnitPrice is below the average UnitPrice of all products.",
            "The query is mostly correct, but it needs to GROUP BY ProductName instead of ProductID to ensure aggregation per product name. Here is the corrected query: SELECT ProductName, SUM(Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName ORDER BY TotalQuantity DESC LIMIT 3;",
            "The query requires grouping by ProductName instead of ProductID to avoid any potential mismatches when displaying product names alongside the discount totals.",
            "The original query was missing a filter for the past month's data. Also, it's important to group by 'ProductName' to match the SELECT clause.",
            "The original query incorrectly uses MAX and MIN in a UNION which does not give the ProductName for the specific max and min prices. The corrected query uses subqueries to find the max and min UnitPrice for products with UnitsInStock greater than zero and fetches the corresponding ProductName.",
            "The SQL query correctly retrieves the current stock level of each product by selecting the 'ProductName' and 'UnitsInStock' columns from the 'products' table. No corrections are needed.",
            "The SQL query is correct. It calculates the average unit price of products grouped by category, matching the business question.",
            "The original query incorrectly used DATEPART and GETDATE functions, which are not ANSI SQL compliant. The corrected query now uses EXTRACT with CURRENT_DATE to ensure it checks both the month and the year of the order date.",
            "The original query does not account for the year, leading to incorrect results if run across multiple years. I corrected this by ensuring both the month and year match the current date.",
            "The SQL query accurately calculates the total number of units in stock for each category, groups the results by CategoryID, and orders them in descending order to determine the category with the highest number of products in stock. The query is correct.",
            "The original query lacks handling for the year in the date filtering, which could cause issues at year boundaries. I corrected this by explicitly comparing both month and year. Additionally, replaced vendor-specific functions with ANSI SQL expressions and used FETCH FIRST 1 ROW ONLY for portability.",
            "The original query is missing a filter to calculate the metric for the current month. I've added a WHERE clause to filter orders for the current month and year using OrderDate, which should be a column in the Order Details table.",
            "The query is correct. It selects products whose ProductID does not appear in the Order Details table, effectively identifying products that have never been ordered.",
            "The SQL query correctly answers the question. It selects the 'ProductName' from 'products' where 'UnitsOnOrder' is greater than 'UnitsInStock', which is accurate given the schema.",
            "The SQL query is correct and follows the business question accurately. It selects products where both UnitsInStock and UnitsOnOrder are zero, which matches the requirement to find products with zero inventory and no pending orders.",
            "The SQL query is correct as it accurately calculates the percentage of products that are discontinued by dividing the count of discontinued products by the total count of products and multiplying by 100.",
            "The original query is missing the 'orders' table join to access 'OrderDate'. It also improperly uses DATEPART and GETDATE(). 'EXTRACT' and 'CURRENT_DATE' are used instead, assuming ANSI SQL compliance. Additionally, ensure handling the year's change when subtracting quarters.",
            "The original query correctly identifies suppliers with products that are no longer in stock, but adding DISTINCT ensures each SupplierID appears only once.",
            "The SQL query correctly joins the 'Order Details' table with the 'products' table using ProductID, groups the results by SupplierID, and calculates the total quantity ordered for each supplier. The query is correct as per the question.",
            "The SQL query correctly implements the business question. It selects the 'ProductName' from the 'products' table where the 'ReorderLevel' is more than double the 'UnitsInStock.' The logic and syntax of the query are correct and align with the given schema.",
            "The query correctly calculates the total value of the inventory in stock by multiplying each product's unit price by the number of units in stock and summing the result. No corrections needed.",
            "The SQL query is correct. It checks for products where the units in stock are less than or equal to the reorder level and ensures the product is not discontinued.",
            "The SQL query is correct. It properly selects the ProductName and UnitsInStock from the products table where the Discontinued field is set to 1, indicating the product is discontinued.",
            "The original query uses 'LIMIT 5', which is not part of the ANSI SQL standard. It has been corrected to use 'FETCH FIRST 5 ROWS ONLY' for ANSI compliance.",
            "The query contains valid logic but is missing the 'orders' table in the schema provided. Therefore, the query cannot be verified against the schema accurately. Ensure the 'orders' table exists with the column 'OrderDate'. If it does, the SQL query is correct for calculating the total discount based on the products sold in the last month.",
            "The SQL query is correct. It selects products where the UnitsInStock are below the ReorderLevel and the product is not discontinued. It orders the results by UnitsInStock and UnitsOnOrder in ascending order.",
            "The SQL query is correct. It selects ProductName and UnitsOnOrder from the products table, orders the result by UnitsOnOrder in descending order, and limits the result to 1, which answers the business question.",
            "The query correctly calculates the average unit price from the 'Order Details' table for orders placed in the last three months. Ensure the 'OrderDate' column in the 'orders' table is of a date type. There's no syntax issue if the columns and subquery logic align with your database.",
            "The SQL query is correct. It selects the SupplierID and counts the number of discontinued products for each supplier, then groups them by SupplierID and orders the results by the discontinued product count in descending order.",
            "The original query only calculates the sales for the last month. To address the business question, the date range should cover the past three months, and the 'orders' table should be joined to filter the 'OrderDate' directly. This ensures the products are grouped by their sales quantities over the three-month period.",
            "The original query does not filter for products actually in inventory. Adding 'WHERE UnitsInStock > 0' ensures only products currently in stock are considered.",
            "The SQL query is correct. It joins '[Order Details]' with 'products' on the 'ProductID', calculates the average discount for each product, groups by 'ProductName', and orders the results in descending order of average discount.",
            "The initial query did not handle division by zero when calculating the Inventory Turnover Ratio. Added NULLIF to prevent division by zero error. Also included products.ProductName in the GROUP BY clause for correctness.",
            "The SQL query is correct. It calculates the total sales revenue by category, orders them in descending order, and limits the results to the top 3 categories by total revenue.",
            "The query does not calculate the 'monthly change' in total units in stock; it only aggregates current units in stock. To calculate monthly changes, a historical record of stock levels over time is needed, which is not available in the given schema.",
            "The original query didn't account for products that are in inventory (UnitsInStock > 0). The corrected query includes this condition to ensure only discontinued products that are still in inventory are counted.",
            "The SQL query is mostly correct. However, the HAVING clause should reference the aggregate as COUNT(*) directly rather than using the alias ExceedCount, since aliases are not recognized in the HAVING clause. This query will determine the number of products in each category that exceed their reorder level. If you need consistency over time, additional temporal analysis would be needed.",
            "The SQL query correctly counts the number of distinct orders that include discontinued products. It uses a subquery to filter ProductIDs from the 'products' table where 'Discontinued' is 1 and checks for these in 'Order Details'. The query is correct.",
            "The SQL query correctly calculates the total inventory value by multiplying the unit price with units in stock for each product and summing up the total. No corrections needed.",
            "The query is mostly correct but there is a missing field: 'OrderDate' in '[Order Details]' table. Assuming it exists in the context of the problem. Check 'OrderDate' and modify accordingly.",
            "The original query is missing the 'OrderDate' field reference within the '[Order Details]' table. Ensure that 'OrderDate' is part of the '[Order Details]' table and correct the table alias accordingly. The corrected query positions 'od.OrderDate' in the WHERE clause.",
            "The SQL query correctly retrieves the product names of discontinued products with the highest unit prices in descending order, limiting the results to the top five. The syntax and logic correspond to the business question, so the query is correct.",
            "The SQL query is mostly correct, but 'LIMIT 5' is not part of the ANSI SQL standard. The correct ANSI SQL syntax uses 'FETCH FIRST 5 ROWS ONLY' instead of 'LIMIT 5' for limiting the number of result rows.",
            "The original query was selecting product names, but to answer how many products have zero stock, we need to count the products. The revised query uses COUNT to return the number of products with zero units in stock.",
            "The SQL query is correct. It accurately calculates the average unit price of products per supplier by grouping the results by SupplierID and using the AVG function on UnitPrice.",
            "The SQL query correctly identifies products where the units on order exceed the units in stock by comparing the 'UnitsOnOrder' and 'UnitsInStock' fields from the 'products' table.",
            "The SQL query is correct. It selects ProductName from the products table where ProductID is not found in the Order Details table.",
            "The SQL query is correct. It selects the CategoryID and calculates the total revenue by summing the product of Quantity and UnitPrice from the Order Details table, joining with the Products table on ProductID. The results are grouped by CategoryID and ordered by TotalRevenue in descending order.",
            "The SQL query is correct. It selects products where the current units in stock are less than the reorder level, which matches the business question's requirement to identify products that need reordering.",
            "The query is incorrect. The 'OrderDate' column is not present in the '[Order Details]' table based on the provided schema. The query should include a join with the 'orders' table to access the 'OrderDate' field. However, the 'orders' table is not defined in the given schema. Assuming 'OrderDate' is available, ensure correct referencing in the future for accurate querying.",
            "The original query was counting distinct discount values per product, not how many products are sold at different discount tiers. The corrected query counts distinct products for each discount tier.",
            "The original query incorrectly nests aggregate functions, which is not valid syntax. Each calculation of the turnover should be done in a subquery to compute turnovers on a product basis, and then the average turnover is calculated. Also, ensure non-null average inventory with the use of NULLIF to avoid division by zero errors.",
            "The original query only retrieves the product with the highest performance. To get both the highest and lowest, I've added a UNION ALL with a separate sorting step.",
            "The query is missing the 'OrderDate' field in the '[Order Details]' table schema, which is necessary for the DATE_TRUNC function. Also, ensure that the 'OrderDate' column exists in the actual database. The GROUP BY clause's 'Month' alias should be replaced with 'DATE_TRUNC('month', OrderDate)' for SQL standard compliance.",
            "The SQL query is correct. It correctly identifies suppliers with products under reorder by checking if UnitsInStock is less than ReorderLevel. It groups by SupplierID to count these products and orders the result by the count in descending order.",
            "The SQL query correctly calculates the total inventory value for each supplier by multiplying the unit price by the units in stock for each product, and then summing these values grouped by SupplierID. This matches the business question accurately.",
            "The original query was counting all rows where products are discontinued, but not distinct products. The corrected query ensures only distinct 'ProductID' values are counted.",
            "The SQL query is correct. It selects the CategoryID and calculates the average UnitPrice for each category, grouping by CategoryID.",
            "The original query attempts to find the product with the highest units on order, but the use of MAX() along with ORDER BY MAX(p.UnitsOnOrder) DESC LIMIT 1 is incorrect. Removing MAX() and ordering directly by UnitsOnOrder gives the desired result.",
            "The original query is correct and returns the list of suppliers whose products have stock levels below their reorder points.",
            "The SQL query is correct. It selects the category ID and calculates the average units in stock, grouping by category and ordering the results in descending order of the average units in stock.",
            "The original query incorrectly calculated the total discount by multiplying Quantity with Discount directly. Instead, it should calculate the discount as Quantity multiplied by UnitPrice and then by the Discount rate, to reflect the correct monetary value of the discount.",
            "The SQL query is correct and matches the business question requirements. It retrieves the CategoryID, ProductID, ProductName, and UnitsInStock from the products table and orders the results by CategoryID.",
            "The query was mostly correct but used GETDATE() which is not ANSI SQL standard. I replaced it with CURRENT_DATE which conforms to the ANSI SQL standard.",
            "The query correctly calculates the average discount column from the [Order Details] table. It is correct in its current form, assuming the Discount column represents the per unit discount applicable to each order detail.",
            "The query correctly calculates the total units sold per product for the last year. Ensure the 'orders' table exists and 'OrderDate' is a valid column. Also, make sure the GETDATE() function retrieves the current date in your system.",
            "The SQL query is correct. It accurately calculates the percentage of products that are discontinued.",
            "The SQL query correctly calculates the total sales value for each product and orders the results in descending order to find the product with the greatest total sales value. The use of LIMIT 1 ensures that only the product with the highest total sales value is returned. The query is correct and compliant with the business question.",
            "The SQL query correctly answers the business question. It selects the SupplierID and counts the number of products with UnitsOnOrder greater than zero, grouped by each SupplierID. There are no mistakes in this query.",
            "The original query lacks a filter for the 'last six months'. This is corrected by adding a WHERE clause to filter orders based on their date to include only the last six months.",
            "The query is correct. It selects product names where the units in stock are less than or equal to the reorder level, matching the given business question.",
            "The SQL query is correct for the given business question. It correctly calculates the average unit price from the 'products' table.",
            "The original query is mostly correct, but it needs to handle the possible division by zero error when calculating the Inventory Turnover. Using NULLIF may help to avoid this issue. Additionally, LIMIT is more commonly associated with MySQL rather than standard SQL, so I used 'FETCH FIRST 5 ROWS ONLY' for ANSI SQL compliance.",
            "The query seems correct if a 'suppliers' table exists with a 'SupplierID'. However, based on the provided schema, there is no mention of a 'suppliers' table. The query should consider checking for the existence of the 'suppliers' table or substitute it with a relevant join if missing from the schema. Assuming 'suppliers' is meant to exist, the logic for selecting suppliers with products on order is correctly implemented.",
            "The original query only sums the 'Discount' column, which stores the discount percentage. To find the total discount applied, we must calculate the discount amount for each order by multiplying Quantity, UnitPrice, and Discount, and then sum these values.",
            "The SQL query correctly identifies products that have not been ordered by performing a LEFT JOIN between the 'products' table and the '[Order Details]' table and filtering for NULLs in 'od.ProductID', indicating no matching orders. The query is correct.",
            "The query is correct. It selects the product name from products that are not discontinued and have an inventory greater than zero, ordering by UnitsInStock in ascending order and limiting the result to one product with the lowest stock.",
            "The SQL query correctly finds products with the highest reorder levels by selecting the 'ProductName' and 'ReorderLevel' columns from the 'products' table and ordering the results in descending order by 'ReorderLevel'. The query is correct and does not require any modifications.",
            "The SQL query is correct. It calculates the total revenue for each supplier by joining the products and [Order Details] tables and grouping the results by SupplierID.",
            "The SQL query correctly calculates the average discount for each order by grouping on OrderID and using AVG on the Discount column.",
            "The SQL query provided is incorrect because the `categories` table does not exist in the given schema. The query needs to be modified to properly retrieve category information from the available data. Since only the `CategoryID` is present in the `products` table, the modified query will use CategoryID directly from this table. The WHERE clause correctly filters discontinued products, and the GROUP BY and ORDER BY logic are appropriate for the question.",
            "The SQL query correctly calculates the total value of the current inventory by multiplying the UnitPrice by UnitsInStock for each product and summing the result. This query is accurate and aligned with the business question.",
            "The original query correctly calculates which products have sales exceeding $10,000, but it returns the product names rather than a count. To answer 'how many products,' we need to wrap the query in a subquery and count the results.",
            "The SQL query is correct. It joins the products and [Order Details] tables, calculates the total quantity sold for each product, groups by product name, and orders the results by total quantity in descending order.",
            "Corrected the query to handle the conversion of QuantityPerUnit from VARCHAR to a numeric type for accurate calculation. Used CAST and SUBSTRING_INDEX to extract numeric value before the first space.",
            "The SQL query correctly retrieves the products that have more units on order than units in stock by comparing the UnitsOnOrder and UnitsInStock fields in the products table. No corrections are needed.",
            "The SQL query correctly calculates the total quantity ordered for each product. The query groups data by ProductID and sums the Quantity column, which matches the business question.",
            "The SQL query correctly calculates the average unit price of products supplied by each supplier by grouping the products table by SupplierID and calculating the average of UnitPrice for each group.",
            "The SQL query correctly identifies the top 5 products with the highest sales performance based on quantity sold. The JOIN between the 'Order Details' and 'products' tables is correctly executed using the 'ProductID' key. The aggregation, ordering, and limit operation are performed properly to obtain the desired results.",
            "The SQL query calculates the inventory turnover ratio by dividing the sum of sales by the average of units in stock, grouped by CategoryID. However, using AVG(p.UnitsInStock) directly in the denominator may not correctly reflect the monthly granularity mentioned in the metric definition. It is important to consider the time frame (e.g., month) for average stock levels to match the granularity. If stock levels fluctuate significantly, further refinement may be needed, like using a time-based approach. Assuming each transaction in 'Order Details' represents sales within the same timeframe, the structure seems correct. Validate this assumption or adjust accordingly.",
            "The SQL query is correct given the schema. It correctly counts the number of discontinued products by checking the 'Discontinued' column for a value of 1.",
            "The query correctly calculates the total discount for each product by multiplying the Quantity, UnitPrice, and Discount values. No changes are necessary.",
            "The SQL query is close to correct, but the 'categories' table is not mentioned in the schema provided. Assuming the correct category table or reference exists, ensure its existence and structure. Otherwise, consider modifying the query to use available tables.",
            "The SQL query is correct. It calculates the difference between UnitPrice and ReorderLevel for each product, orders the results in descending order, and limits the output to the top entry, which corresponds to the highest difference.",
            "The initial query is incorrect because the 'QuantityPerUnit' is of type VARCHAR and needs to be cast to a numeric type to calculate average. The corrected query casts 'QuantityPerUnit' to DECIMAL.",
            "The original query incorrectly used GROUP BY when the goal was to simply find distinct product names. Replacing GROUP BY with DISTINCT achieves the desired outcome.",
            "The query counts od.OrderID instead of od.ProductID. This might miss products ordered multiple times in a single order. Corrected it to COUNT(od.ProductID).",
            "The query correctly joins the 'Order Details' and 'products' tables, checks for non-discontinued products, calculates the sum of quantities ordered, and groups by ProductID. The query is correct.",
            "The SQL query is correct. It selects the SupplierID and computes the maximum ReorderLevel for each supplier using the GROUP BY clause.",
            "The query is correct since it selects the minimum UnitPrice from the products table where the UnitsOnOrder is greater than 0.",
            "The SQL query correctly calculates the total sales revenue for each product by summing the product of 'Quantity' and 'UnitPrice' from the [Order Details] table, joining it with the 'products' table based on 'ProductID'. It then groups the results by 'ProductName', orders them by 'TotalRevenue' in descending order, and uses LIMIT 5 to return the top 5 products. This correctly answers the business question."
        ],
        "difficulty": [
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "easy",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "easy",
            "easy",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "easy",
            "easy",
            "easy",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "easy",
            "easy",
            "easy",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "advanced",
            "medium",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "easy",
            "easy",
            "advanced",
            "medium",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "easy",
            "easy",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "easy",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "advanced",
            "easy",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "advanced",
            "easy",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium"
        ]
    },
    "cross_scenario": {
        "questions": [
            "What is the total sales revenue for the year 2023?",
            "What is the average order value for January 2023?",
            "Which customer has the highest lifetime value?",
            "Which product has the highest sales quantity in March 2023?",
            "How much sales revenue was generated by each employee in Q1 2023?",
            "What is the average order fulfillment time for the last 6 months?",
            "What is the customer retention rate for 2023?",
            "What is the average supplier lead time in May 2023?",
            "What is the inventory turnover ratio for February 2023?",
            "What is the average shipping cost per order in April 2023?",
            "What percentage of orders were delivered on time in June 2023?",
            "Which products are below their reorder level as of now?",
            "Who are the top 3 suppliers in terms of delivery speed?",
            "What is the number of returning customers each month in 2023?",
            "Which city has placed the most orders in 2023?",
            "Which product category generates the highest revenue?",
            "How many orders placed in Q2 2023 used expedited shipping?",
            "What is the total sales by product category in 2023?",
            "Which employee made the highest sales in July 2023?",
            "What is the trend in order fulfillment time over the past year?",
            "What is the total sales revenue for each month in 2023?",
            "What are the top 5 products by sales volume in the last year?",
            "Which customers have generated the most revenue lifetime?",
            "What is the average time taken to fulfill orders per month?",
            "What percentage of orders were delivered on or before the required date in the last quarter?",
            "Which employees have the highest sales performance this year?",
            "What are the top 3 regions with the highest order volumes?",
            "How has the customer retention rate changed quarter over quarter in 2023?",
            "What are the monthly shipping costs across different shipping methods?",
            "Which suppliers have the best lead time performance over the past 6 months?",
            "What is the inventory turnover ratio by category in the current year?",
            "How does the average order value differ among different customer demographics?",
            "What is the seasonal trend of product sales over the last two years?",
            "Which products are frequently bought together based on order history?",
            "What is the performance of discontinued products compared to active ones?",
            "How does the performance of sales territories differ in terms of revenue?",
            "What are the monthly order fulfillment times, and how do they correlate with customer satisfaction?",
            "What are the trends in shipping costs related to different shippers?",
            "How effective is the reorder level set for products in maintaining inventory levels?",
            "Which employee territories are underperforming in terms of sales?",
            "What is the total sales revenue generated in the year 2023?",
            "Which product had the highest sales quantity last month?",
            "How many orders were fulfilled on time this quarter?",
            "What is the average order value for each month in 2022?",
            "Which employee achieved the highest sales in the first quarter of 2023?",
            "What is the customer lifetime value for each customer?",
            "How many customers placed more than five orders last year?",
            "What is the average time taken to fulfill orders in the last six months?",
            "Which product categories had the best performance in sales in January 2023?",
            "Which suppliers have the fastest average lead time?",
            "What is the average shipping cost per order by shipping company?",
            "Which region has the highest customer retention rate in 2023?",
            "What is the inventory turnover ratio for each product in Q2 2023?",
            "Which products are nearing their reorder level?",
            "What is the percentage of orders delivered before the required date for the last three months?",
            "How do employee sales compare across different territories?",
            "Which supplier contributed the most to total sales this year?",
            "What is the average discount provided across all orders in 2022?",
            "How many products have been discontinued and what was their total sales performance?",
            "Which day of the week has the highest number of orders placed?",
            "What is the average order value in 2023?",
            "Which product had the best performance in terms of quantity sold for the month of June 2023?",
            "Which employee generated the highest sales in December 2023?",
            "What is the average time taken to fulfill an order in Q1 2023?",
            "What is the customer retention rate between January 2022 and January 2023?",
            "Which supplier has the shortest average lead time for deliveries?",
            "What is the inventory turnover ratio for June 2023?",
            "Which month had the lowest shipping cost per order in 2023?",
            "What is the on-time delivery rate for the first half of 2023?",
            "Which product categories contributed to total sales in 2023?",
            "How many orders were shipped using the fastest shipper in 2023?",
            "What is the most popular product category based on the number of unique customers?",
            "Identify the top 5 products with the lowest inventory levels that are not discontinued.",
            "Calculate the total sales for products supplied by the top supplier by sales.",
            "What is the average discount applied to orders in November 2023?",
            "Which city has the highest number of orders shipped in 2023?",
            "How many employees have territories spanning multiple regions?",
            "What is the breakdown of orders by customer type in 2023?",
            "What is the average order value for each month in 2023?",
            "How does the product performance compare across product categories?",
            "What are the total sales for each month in 2023?",
            "Which products have the highest sales in terms of quantity?",
            "What is the average order value by customer for the past year?",
            "Who are the top-performing employees in terms of sales?",
            "What is the average shipping cost per order by shipper?",
            "What is the on-time delivery rate for each month in the current year?",
            "Which suppliers have the shortest lead times?",
            "What is the customer lifetime value for customers in the USA?",
            "What are the inventory turnover ratios for each product?",
            "How many orders were fulfilled within 7 days?",
            "Which product categories have the highest total sales?",
            "What is the customer retention rate for the last quarter?",
            "What is the total freight cost for each shipping company?",
            "Which customers made more than three purchases in the last year?",
            "What is the most frequently ordered product?",
            "How many orders were delayed beyond their required date?",
            "What are the sales trends by region?",
            "Which employees work in multiple territories?",
            "What is the average discount given per order?",
            "Which countries have the highest average customer lifetime value?",
            "Which employee has generated the highest sales revenue in the last month?",
            "Which product has the highest sales quantity in 2023?",
            "What is the average time taken to fulfill orders in 2023?",
            "Which supplier has the best lead time for product delivery in 2023?",
            "What is the total number of orders placed by each customer in 2023?",
            "How many on-time deliveries were recorded in the first quarter of 2023?",
            "What is the inventory turnover ratio for each product in 2023?",
            "Which shipping company has the least average shipping cost per order?",
            "What is the total freight cost incurred in 2023?",
            "Which region has the highest number of sales in 2023?",
            "How many employees were hired in 2023?",
            "What is the performance of discontinued products?",
            "What is the total discount given across all products in 2023?",
            "Which territory has the best employee sales performance?",
            "What are the top 5 products by revenue in 2023?",
            "What are the most common customer demographics for high-value customers in 2023?",
            "What is the total sales value in the last quarter?",
            "Which product has the highest sales in the last year?",
            "How many orders were placed in each month of the last year?",
            "What is the average order value for each customer segment?",
            "Which employees have generated sales above $100,000 in the last year?",
            "What is the average time taken to deliver orders across different regions?",
            "What percentage of orders were delivered on time in the last month?",
            "What is the customer lifetime value of each customer?",
            "How does the inventory turnover ratio vary across product categories?",
            "Which suppliers have the shortest and longest lead times?",
            "In which countries are the majority of orders shipped?",
            "How many products are currently out of stock?",
            "What is the total number of products sold by each employee?",
            "What is the average shipping cost per order for each shipping company?",
            "How do discount rates impact the average order value?",
            "Which month had the highest order fulfillment time in the past year?",
            "What are the top three categories in terms of product performance?",
            "How does the order volume differ between new and returning customers?",
            "Which employees are handling the most territories?",
            "What is the total revenue generated by each supplier?",
            "What is the total sales for each month in 2023?",
            "What is the average order value for customers in 2023?",
            "Which products have the highest sales quantity in the last quarter?",
            "How much sales revenue did each employee generate in January 2023?",
            "What is the average order fulfillment time by month?",
            "What is the customer retention rate from Q1 to Q2 of 2023?",
            "Which supplier has the shortest average lead time?",
            "What is the inventory turnover ratio for each product category?",
            "What is the average shipping cost per order in 2023?",
            "Which orders were delivered on or before the required date?",
            "How many orders were placed by each customer in 2023?",
            "Which shipping company has the highest on-time delivery rate?",
            "What is the average employee sales in Q1 of 2023?",
            "What percentage of orders received a discount?",
            "Which products need to be reordered based on current inventory levels?",
            "Which regions generated the most sales revenue?",
            "What is the total number of units sold by supplier?",
            "What is the total sales revenue generated in 2023?",
            "How many units of each product were sold monthly?",
            "Which product generated the most sales revenue in January 2023?",
            "What is the average order value per month for the current year?",
            "Who are the top 5 customers by lifetime value?",
            "What is the average lead time by each supplier this month?",
            "What is the on-time delivery rate across all shipments in Q1 2023?",
            "Which shipping company achieved the lowest average shipping cost per order in last year?",
            "What is the inventory turnover ratio for each product category in 2023?",
            "How does employee sales performance vary by month for each sales territory?",
            "What is the monthly growth rate of returning customers over the last year?",
            "Which products are running low against their reorder level as of today?",
            "What is the most common ship-to country for orders placed in 2023?",
            "What percentage of products are discontinued as of this date?",
            "What is the average fulfillment time for the top 3 products in sales in 2023?",
            "Which supplier has the highest total sales for discontinued products?",
            "How many unique customers placed orders with discounts greater than 20%?",
            "What day of the week are most orders placed?",
            "What is the total number of orders fulfilled by each employee in 2023?",
            "What is the total value of all orders placed by customers in the USA?",
            "How many orders have been shipped late and how does it change monthly?",
            "What is the average order value for February 2023?",
            "How much revenue has each customer generated over their lifetime?",
            "Which products have the highest sales volume in June 2023?",
            "What are the total sales generated by each employee for March 2023?",
            "What is the average time taken to fulfill orders in Q1 2023?",
            "What is the customer retention rate for Q2 2023?",
            "How long do suppliers take on average to deliver products in May 2023?",
            "What is the inventory turnover ratio for July 2023?",
            "What percentage of orders were delivered on time in August 2023?",
            "Which product categories are generating the most revenue?",
            "How many employees have sales exceeding $100,000 in Q3 2023?",
            "Which suppliers are responsible for the highest sales volume?",
            "What is the distribution of orders among different shipping methods?",
            "What are the top 5 countries generating the most revenue from orders?",
            "How many orders were placed by new customers in 2023?",
            "What is the average discount applied across all orders in December 2023?",
            "How often are different customer demographic segments purchasing?",
            "What proportion of customers returned for a purchase within six months?",
            "Which product had the highest sales in the first quarter of 2023?",
            "How many orders were fulfilled on-time during 2023?",
            "Which employee generated the most sales revenue in March 2023?",
            "How many products have a reorder level below their current stock?",
            "Which supplier has the lowest average lead time?",
            "What is the monthly inventory turnover ratio for each product in 2023?",
            "Which city has the highest number of customers?",
            "What percentage of orders were shipped before the required date in 2023?",
            "What was the most frequently ordered product in 2023?",
            "Which shipping company delivered the most orders in 2023?",
            "How many customers placed orders in both Q1 and Q2 of 2023?",
            "What is the average employee sales for each title?",
            "Which product category generated the most revenue in 2023?",
            "How many orders have a discount greater than 20%?",
            "What is the average fulfillment time for orders in 2023?",
            "Which employee had the highest average order value in Q1 2023?",
            "How many unique customers placed orders each month in 2023?",
            "Which products have the highest sales volume?",
            "What is the average value of orders placed in the month of January 2023?",
            "Identify the most frequently ordered product by each customer.",
            "Which employee generated the highest sales in 2023?",
            "What are the top 5 cities with the highest number of orders?",
            "What is the average order fulfillment time per month?",
            "How many orders were delayed beyond the required date?",
            "What is the monthly inventory turnover ratio in 2023?",
            "Which suppliers have the shortest average lead time for deliveries?",
            "Calculate the percentage of discontinued products in the inventory.",
            "What is the shipping cost per order for each shipping method?",
            "Identify trends in customer retention rate over the past year.",
            "Which product categories have the fastest inventory turnover?",
            "Determine the on-time delivery rate for each shipping company.",
            "What is the distribution of customer locations by region?",
            "Calculate the total number of units on order by product.",
            "Which month had the highest total sales revenue in 2023?",
            "What is the total sales revenue generated in the current year?",
            "How many unique customers placed orders in the last month?",
            "Which product has the highest sales volume this quarter?",
            "Identify the average order value for each month this year.",
            "What is the total number of products that are out of stock?",
            "Which employee generated the highest total sales in the last year?",
            "What is the average order fulfillment time for orders placed this year?",
            "List the top 5 customers by lifetime value.",
            "What was the on-time delivery rate for the past six months?",
            "Identify the product categories with the highest inventory turnover ratio.",
            "Which supplier has the shortest lead time for deliveries?",
            "Calculate the average discount applied to orders in the last 3 months.",
            "How many orders were shipped using each shipping method last quarter?",
            "What is the customer retention rate for the current year compared to the previous year?",
            "Identify the employees with the most number of orders fulfilled in each region.",
            "How many discontinued products have remaining inventory?",
            "What is the average shipping cost per order in the past month?",
            "List the countries with the highest number of orders placed this year.",
            "Which customers returned more than once in the last three months?",
            "What is the average time between order placement and shipment for each supplier?",
            "Which product has the highest sales quantity this year?",
            "Who is the top performing employee based on sales revenue?",
            "What is the average order value by month for 2023?",
            "How many customers placed more than one order in 2023?",
            "Calculate the Customer Lifetime Value for each customer.",
            "Which supplier has the shortest average delivery lead time?",
            "How many orders were shipped after the required date?",
            "What is the percentage of discontinued products in the inventory?",
            "Determine the average fulfillment time for orders by employee.",
            "What is the most common city among customers with the highest lifetime value?",
            "Calculate the average shipping cost per order for various shipping companies.",
            "Find the top 5 customers based on total order quantities.",
            "What is the monthly trend of on-time delivery rates in 2023?",
            "Which product category has the highest average unit price?",
            "How does employee sales performance vary by territory?",
            "What is the return rate of customers from the previous year?",
            "How much did each supplier contribute to the total sales revenue?",
            "Evaluate which products have the highest impact on sales growth.",
            "What was the total sales revenue generated last year?",
            "What is the average order value for each month?",
            "What is the total quantity sold for each product category?",
            "How many orders were made by each employee?",
            "What percentage of orders were delivered on or before the required date?",
            "Which supplier had the shortest lead time last year?",
            "What is the inventory turnover ratio for each product?",
            "What is the average shipping cost per order per month?",
            "Which product had the highest number of units sold?",
            "Which shipping company had the highest number of on-time deliveries?",
            "What is the retention rate of customers who placed orders last quarter?",
            "What is the total sales generated by each sales territory?",
            "Which supplier contributed the most to our total sales?",
            "How many units of discontinued products are still in stock?",
            "What is the monthly trend of the reorder level across all products?",
            "Which employee generated the most revenue last month?",
            "What is the average discount given per order item?",
            "Which country has the highest number of orders placed?",
            "How many customers placed orders in the year 2023?",
            "Which product had the highest sales volume in 2023?",
            "What is the average shipping cost per order for each shipping method?",
            "Who are the top 5 employees in terms of total sales revenue generated?",
            "What is the average order fulfillment time for each month?",
            "What is the customer retention rate between 2022 and 2023?",
            "Which region has the highest number of orders in 2023?",
            "What is the total number of discontinued products?",
            "How many orders were delivered on time in 2023?",
            "How many products have reached their reorder level?",
            "What is the average customer lifetime value?",
            "Which product category generated the highest revenue?",
            "What is the percentage of orders with a discount applied?",
            "How many orders have a shipping cost above $50?",
            "What is the average order value for each customer?",
            "How many orders were placed in each quarter of 2023?",
            "What is the total sales revenue generated in the first quarter of 2023?",
            "Which product has the highest total sales volume in 2023?",
            "What is the monthly total sales revenue for the year 2023?",
            "Which product has the highest sales quantity in the last month?",
            "What is the average order value for each customer in 2023?",
            "Which employee generated the most sales in Q1 of 2023?",
            "What is the average fulfillment time for orders in Q2 of 2023?",
            "What is the customer retention rate for the first half of 2023?",
            "What is the inventory turnover ratio for the electronics category in 2023?",
            "What is the average shipping cost per order across all shipping companies?",
            "What percentage of orders were delivered on time in the last quarter?",
            "How much total revenue did each product category generate in 2023?",
            "Which city has the highest number of returning customers?",
            "Which month had the highest employee sales performance?",
            "What is the lifetime value of the top three customers?",
            "What is the total number of products that are currently on backorder?",
            "Which supplier has provided the highest quantity of products this year?",
            "How many distinct products were ordered in the last month?",
            "What is the average discount applied per order this year?",
            "Which territory had the highest sales increase compared to the previous quarter?",
            "How many orders were placed by each customer between January and March 2023?",
            "Which product categories generated the highest sales in the last quarter?",
            "Who are the top 5 customers by revenue and what is their total spending?",
            "How does employee performance correlate with their years of service?",
            "What is the average fulfillment time for orders shipped by each shipper?",
            "Which products have the highest inventory turnover ratio?",
            "How many products are discontinued and what is their total inventory value?",
            "Which suppliers have the lowest average lead time for delivery?",
            "What is the on-time delivery rate for orders in the first half of 2023?",
            "What are the top 10 cities with the highest number of orders?",
            "How does sales distribution vary across different regions?",
            "Which employee generated the highest sales in Q2 2023?",
            "What is the customer retention rate from 2022 to 2023?",
            "How has shipping cost per order changed over the months in 2023?",
            "What are the monthly sales trends for the top selling products?",
            "What is the relationship between order discounts and total sales?",
            "Which supplier provides products for the most diverse categories?",
            "What is the average salary of employees associated with high sales performance?",
            "What are the total sales for each product category last year?",
            "Which customers have placed the highest number of orders this quarter?",
            "What is the average fulfillment time per order for the past six months?",
            "Which suppliers have the slowest lead times in the last year?",
            "How does the average order value differ across customer regions?",
            "Which products are responsible for the majority of sales revenue this month?",
            "What percentage of orders were shipped on time in the last quarter?",
            "How many new customers were acquired each month this year?",
            "Which employees have generated the most sales in their respective territories?",
            "What is the total revenue generated by products that are currently discontinued?",
            "Which shipping method has the lowest average cost?",
            "What is the inventory turnover ratio for each product category last quarter?",
            "How has the customer retention rate changed year-over-year?",
            "Which employee joined most recently and what has been their sales contribution so far?",
            "What is the distribution of average order values across different shipping methods?",
            "Which products are at risk of going out of stock and need reordering soon?",
            "How efficient is each supplier in terms of delivery time compared to their peers?",
            "How has the average discount rate on orders changed in the past year?",
            "What is the relationship between employee tenure and sales performance?",
            "Which customers have the highest lifetime value?",
            "What was the total sales revenue for the month of January 2023?",
            "How many unique products were ordered in the month of February 2023?",
            "What is the average order value in the second quarter of 2023?",
            "List all customers who have placed more than five orders throughout 2023.",
            "Which product generated the highest sales revenue in March 2023?",
            "Calculate the customer lifetime value for each customer in California.",
            "What percentage of orders were delivered on or before the required date in June 2023?",
            "Identify the top 3 employees with the highest sales in July 2023.",
            "What is the average fulfillment time for orders placed in April 2023?",
            "Which supplier has the best lead time in the third quarter of 2023?",
            "Determine the total shipping cost per each shipping company for August 2023.",
            "What is the order fulfillment time for orders shipped by ShipperID 1?",
            "How many customers have been retained from 2022 to 2023?",
            "Calculate the inventory turnover ratio for product categories in September 2023.",
            "Identify the product with the lowest performance in terms of sales in October 2023.",
            "What is the average shipping cost per order across all regions in November 2023?",
            "Find the most ordered product in December 2023.",
            "Who are the suppliers for products frequently ordered by top customers in 2023?",
            "What is the impact of discounts on the average order value in the first half of 2023?",
            "List all employees whose sales territories include New York and calculate their total sales.",
            "Which customers have generated the highest lifetime value?",
            "What is the average order value per month for 2023?",
            "How many products have been sold monthly?",
            "Who are the top-performing employees by sales in 2023?",
            "Which products have been discontinued but still have stock?",
            "What is the average time taken to fulfill orders each month?",
            "How many orders were shipped on or before the required date?",
            "Which suppliers have the longest average lead time?",
            "What is the total sales per country for 2023?",
            "How has the inventory turnover ratio changed monthly?",
            "Which customers have placed orders in consecutive months?",
            "Which product categories have the highest sales?",
            "What percentage of customers are repeat buyers in 2023?",
            "Which employees have the least sales performance this year?",
            "How many employees work in each region?",
            "What is the product with the lowest inventory turnover ratio?",
            "What is the monthly on-time delivery rate for 2023?",
            "Which suppliers are linked to the highest sales products?",
            "Which products have the highest sales volume in 2023?",
            "What is the average fulfillment time for orders in Q1 2023?",
            "How many returning customers were there in 2023?",
            "Which employees generated the most sales in Q2 2023?",
            "Which suppliers have the shortest lead time on average?",
            "What is the shipping cost per order by shipping company in 2023?",
            "Which regions have the highest sales in 2023?",
            "What was the average discount applied to orders in 2023?",
            "How many orders exceeded their required delivery date in 2023?",
            "What is the total sales by each product category in 2023?",
            "Which customer demographics have the highest average order value?",
            "What is the performance overview of each employee for 2023?",
            "How does shipping cost correlate with order value in 2023?",
            "What is the average reorder level for products currently in inventory?",
            "What is the most popular product in terms of quantity sold in 2023?",
            "How many unique customers placed orders in June 2023?",
            "What is the average order value for the first quarter of 2023?",
            "Which product has the highest sales volume in the last 12 months?",
            "How many orders were fulfilled by each shipping company in 2023?",
            "What is the total revenue generated by each employee in the second quarter of 2023?",
            "List the top 5 customers by total spending in the past year.",
            "What is the average time taken to fulfill orders in March 2023?",
            "Determine the percentage of orders delivered on time in 2023.",
            "Which products have reached their reorder level as of the current date?",
            "What is the lifetime value of customers from Germany?",
            "Calculate the customer retention rate for January 2023.",
            "What is the shipping cost per order for each month in 2023?",
            "Identify the most profitable product category in 2023.",
            "How many products have been discontinued as of the current date?",
            "Which employee has the highest sales in the western region?",
            "Calculate the on-time delivery rate for each shipping company in Q2 2023.",
            "Compare the average order fulfillment times by month in 2023.",
            "What is the total sales generated in 2023?",
            "Which product had the highest sales quantity in 2023?",
            "How many days on average does it take to fulfill an order?",
            "What is the percentage of orders delivered on time in 2023?",
            "Who are the top 3 employees by sales performance for February 2023?",
            "What is the average shipping cost per order for each month in 2023?",
            "What is the retention rate of customers acquired in 2022 in 2023?",
            "What are the total sales by each supplier in 2023?",
            "What is the product performance comparison between Q1 and Q2 of 2023?",
            "How many customers placed more than 3 orders in 2023?",
            "What is the breakdown of total sales by shipping country?",
            "What is the trend in total sales for each quarter of 2023?",
            "Which shipper has the highest on-time delivery rate in 2023?",
            "What is the correlation between employee sales and years of service?",
            "Which product has the largest deficit based on reorder level vs current stock?",
            "What is the distribution of customer demographics for the top revenue-generating customers?",
            "Which three products have the highest sales revenue?",
            "What is the average order value for orders placed in December 2023?",
            "Which product has the highest sales volume in 2023?",
            "How many customers placed more than 5 orders in 2023?",
            "What is the inventory turnover ratio for the first quarter of 2023?",
            "What is the on-time delivery rate for 2023?",
            "How much total discount was given in 2023?",
            "Which category of products generated the most sales in 2023?",
            "What percentage of orders were shipped late in 2023?",
            "What is the average shipping cost per order for February 2023?",
            "Which city has the highest order volume?",
            "What is the order fulfillment time for each month in 2023?",
            "What was the product performance for discontinued products?",
            "Identify regions with the highest employee performance.",
            "How did customer retention rate change between 2022 and 2023?",
            "What is the percentage of total sales contributed by each supplier?",
            "Which product has the highest sales volume each month?",
            "How many orders were placed by each customer in the first quarter of 2023?",
            "What is the average order fulfillment time for each shipping method?",
            "Which employees have achieved the top sales in the last six months?",
            "What is the percentage of orders delivered on time each month?",
            "Identify the top three customers based on their purchase volumes in 2023.",
            "What is the turnover rate of inventory for each product category?",
            "Which region has the lowest average shipping cost?",
            "How does the customer retention rate compare between the first and second half of 2023?",
            "What are the lead times for each supplier, and which are the most efficient?",
            "What is the trend of the average order value over the last year?",
            "How do sales figures compare between different regions?",
            "Identify which products are frequently ordered together.",
            "What is the overall customer lifetime value for each region?",
            "Which shipping company has the highest satisfaction rate based on on-time deliveries?",
            "What is the average discount applied per order, and how does it vary by product?",
            "What are the peak order times during weekdays?",
            "How does the total sales in December 2023 compare to December 2022?",
            "What percentage of products are currently discontinued?",
            "How do average order values compare across different months in a year?",
            "What are the top 5 products in terms of sales performance this month?",
            "Which employee achieved the highest sales in the last quarter?",
            "What is the average order fulfillment time for the past 6 months?",
            "Calculate the customer retention rate for the first half of 2023.",
            "Which suppliers have the shortest lead time?",
            "How does the inventory turnover ratio vary by product?",
            "What is the average shipping cost per order in the last year?",
            "Which orders were delivered on time in 2023?",
            "Identify trends in total sales by region.",
            "Find the total units sold per supplier.",
            "Compare shipping costs across different shipping companies.",
            "Find the reorder levels for products nearing zero stock.",
            "Calculate the effect of discounts on overall sales revenue.",
            "What is the sales growth for each product category over the last year?",
            "What percentage of products were shipped via each shipping method?",
            "How has the number of discontinued products changed over the past years?",
            "Which cities have the highest concentration of customers?",
            "What is the total sales revenue for the current year?",
            "How many orders were fulfilled on time this month?",
            "What is the average order value by customer region?",
            "Identify the top 5 best-selling products last quarter.",
            "What is the total number of returning customers this year?",
            "Which employee generated the highest sales last month?",
            "Calculate the average fulfillment time for shipped orders.",
            "Which supplier has the shortest lead time?",
            "What is the on-time delivery rate for each shipping company?",
            "Determine the inventory turnover ratio for each product category.",
            "What is the average shipping cost per order for each customer country?",
            "What are the total sales per product category for the last three months?",
            "Identify the top 3 customers based on purchase volume this year.",
            "How does the employee's region impact their sales performance?",
            "Which products need reordering based on current stock levels?",
            "How many orders were placed from each country this month?",
            "Determine the freight cost correlation to total order value.",
            "What is the average discount provided on orders by product category?",
            "What is the average order value per customer for the year 2023?",
            "What is the average order value in February 2023?",
            "Which products had the highest quantity sold in March 2023?",
            "How much sales did each employee generate in Q1 2023?",
            "What is the average order fulfillment time for March 2023?",
            "Calculate the customer retention rate from January to March 2023.",
            "What is the average lead time for deliveries from each supplier in March 2023?",
            "What is the inventory turnover ratio for all products in Q1 2023?",
            "What is the average shipping cost per order for the first half of 2023?",
            "What percentage of orders were delivered on time in April 2023?",
            "Which shipping company handled the most orders in USD value in Q2 2023?",
            "Identify the most frequently reordered product in 2023.",
            "How many new customers were acquired each month in the first half of 2023?",
            "Rank the top 5 products by sales revenue in April 2023.",
            "What is the correlation between employee sales and order fulfillment time?",
            "How many orders had a discount applied in Q2 2023?",
            "What is the most common customer region by sales value in 2023?",
            "How many days on average did each category take to fulfill orders in May 2023?",
            "Determine the percentage of discontinued products with sales in Q1 2023.",
            "What is the total sales revenue generated monthly?",
            "How many orders were shipped on time in 2023?",
            "What is the average time taken to fulfill an order each month?",
            "Which employee generated the most sales in 2023?",
            "What is the percentage of returning customers in Q1 2023?",
            "What is the monthly shipping cost per order in 2023?",
            "Which city has the highest number of orders placed?",
            "How many discontinued products are still in stock?",
            "What is the total number of orders per shipping method?",
            "What is the most common customer demographic?",
            "Which region has the highest employee sales?",
            "What is the average discount applied to orders in 2023?",
            "Which suppliers provide products that have the highest sales?",
            "What is the monthly on-time delivery rate?",
            "Which product has the most units on order?",
            "Which product generated the highest revenue in the last quarter?",
            "Who are the top 5 employees generating the most sales this year?",
            "What percentage of orders were delivered on time last month?",
            "How does the average shipping cost vary by shipper?",
            "Which product category has the highest inventory turnover ratio?",
            "How many products have inventory levels below their reorder level?",
            "What is the average order fulfillment time for orders placed in January?",
            "What is the most common discount given on products?",
            "How many returning customers did we have in the first half of 2023?",
            "What is the trend of average order value over the past year?",
            "How does employee age correlate with sales performance?",
            "What is the average sales per employee per region?",
            "How many orders were shipped via each shipping company?",
            "Which product had the highest increase in sales compared to the previous month?",
            "What is the total sales revenue generated in December 2023?",
            "Which product had the highest sales in terms of quantity in Q1 2023?",
            "How many customers placed orders in more than two different months in 2023?",
            "What is the average order fulfillment time for orders placed in the first half of 2023?",
            "Identify the top 3 employees by total sales in 2023.",
            "Which product categories had the highest inventory turnover ratio in 2023?",
            "What is the average shipping cost per order for each shipping company in 2023?",
            "Which supplier has the shortest average lead time for deliveries in 2023?",
            "Which city has the most orders shipped to it in 2023?",
            "What are the top 5 customers by lifetime value?",
            "How does the total sales revenue compare between Q1 and Q2 of 2023?",
            "Which products have been discontinued but still have quantities in stock?",
            "What is the total sales revenue for each supplier in 2023?",
            "Which shipping method is most frequently used for orders in 2023?",
            "Which employees have not generated any sales in 2023?",
            "What were the top 3 most profitable products in 2023?",
            "Which month in 2023 had the highest average order value?",
            "How many orders were delivered late in 2023?",
            "How many orders were placed by each customer in 2022?",
            "Which product had the highest sales volume in the last quarter?",
            "What is the total sales revenue generated for each month in the year 2023?",
            "What is the average order value for each month in the year 2023?",
            "Which product has the highest number of units sold in July 2023?",
            "Which employee generated the most sales revenue in 2023?",
            "What is the average order fulfillment time for each month in 2023?",
            "What percentage of orders were delivered on time in May 2023?",
            "What is the inventory turnover ratio for each product category in June 2023?",
            "Which supplier has the shortest average lead time for delivering products?",
            "How many distinct customers made a purchase in Q1 2023 versus Q2 2023?",
            "Which city has the highest number of orders placed in 2023?",
            "What product has the highest sales but is discontinued?",
            "Which shipping company handled the most deliveries in 2023?",
            "What is the average shipping cost for orders shipped internationally in 2023?",
            "What is the average discount applied on orders for each month in 2023?",
            "What is the monthly trend of order values for the top 3 customers by sales?",
            "Which category of products has the highest percentage of out-of-stock occurrences?",
            "What is the average lead time for orders grouped by region?",
            "What are the top 5 territories with the most sales in 2023?",
            "What is the total revenue generated from all orders in the year 2023?",
            "Which customer has placed the most number of orders?",
            "How many products were sold in each category in 2023?",
            "Which supplier has the best delivery performance in terms of lead time?",
            "What is the total sales generated by each employee in 2023?",
            "How many orders have been delivered on time in the last month?",
            "What is the Customer Lifetime Value for each customer?",
            "Which shipping company has the lowest average shipping cost per order?",
            "How many employees have exceeded their sales targets in 2023?",
            "What is the overall customer retention rate for 2023?",
            "How many products are discontinued, and what is their total inventory value?",
            "What is the breakdown of total sales by shipment countries?",
            "Which products need to be reordered based on current stock levels?",
            "How many orders were placed by each territory?",
            "What is the performance of each product based on sales quantity?",
            "What proportion of customers are from a specific demographic type?",
            "What is the total sales revenue for 2023?",
            "Which products generated the highest sales volume in the last month?",
            "How many orders were fulfilled on time in 2023?",
            "What is the lifetime value of each customer?",
            "Which product has the highest inventory turnover ratio?",
            "What is the average shipping cost per order for each shipper?",
            "How many customers placed orders in more than one month in 2023?",
            "What is the average order fulfillment time for each product category?",
            "How many customers were retained from Q1 to Q2 in 2023?",
            "What is the percentage of discontinued products per category?",
            "Which employee has the highest customer retention rate?",
            "What is the correlation between shipping cost and delivery time?",
            "Which regions have the highest total sales?",
            "What is the average discount applied to orders each month?",
            "How many orders were shipped later than the required date?",
            "Which territories are most productive in terms of sales?",
            "What was the total sales for each customer demographic group?",
            "Which product had the highest sales in quantity in the month of January 2023?",
            "What is the total sales generated by each employee in the first quarter of 2023?",
            "What is the average shipping cost per order in the last month?",
            "Which city has the highest number of unique customers?",
            "What percentage of customers made multiple orders in 2023?",
            "What is the average discount offered on orders in March 2023?",
            "Which category has the highest number of discontinued products?",
            "How many employees have a sales territory in the region described as 'Western'?",
            "What is the average order value for orders placed by customers in the 'UK'?",
            "How many products have stock levels below their reorder level?",
            "What is the monthly trend of on-time delivery rate in 2023?",
            "Who is the most effective employee in terms of sales per territory?",
            "What are the top 5 products by revenue in the year 2023?",
            "Which shipping company handled the most orders in March 2023?",
            "Which employee generated the highest sales in March 2023?"
        ],
        "sql_queries": [
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31'",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC LIMIT 1",
            "SELECT products.ProductID, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY products.ProductID ORDER BY product_performance DESC LIMIT 1",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY employees.EmployeeID",
            "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time FROM orders WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)",
            "(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-01-01') AS customer_retention_rate",
            "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY products.SupplierID",
            "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28'",
            "SELECT AVG(orders.Freight) AS shipping_cost_per_order FROM orders WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-04-30'",
            "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-06-01' AND '2023-06-30'",
            "SELECT products.ProductID, products.ProductName, products.UnitsInStock, products.ReorderLevel FROM products WHERE products.UnitsInStock < products.ReorderLevel",
            "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY avg_lead_time ASC LIMIT 3",
            "SELECT MONTH(orders.OrderDate) AS order_month, COUNT(DISTINCT orders.CustomerID) AS returning_customers FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY order_month",
            "SELECT customers.City, COUNT(orders.OrderID) AS total_orders FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.City ORDER BY total_orders DESC LIMIT 1",
            "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS category_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY category_revenue DESC LIMIT 1",
            "SELECT COUNT(OrderID) AS expedited_orders FROM orders WHERE ShipVia IN (SELECT ShipperID FROM shippers WHERE CompanyName LIKE '%Expedited%') AND OrderDate BETWEEN '2023-04-01' AND '2023-06-30'",
            "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY categories.CategoryName",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-07-31' GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1",
            "SELECT MONTH(orders.OrderDate) AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY MONTH(orders.OrderDate) ORDER BY month",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY products.ProductID, products.ProductName ORDER BY total_sales DESC LIMIT 5",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(DATE_DIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY month",
            "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN orders.OrderID END) * 100.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30'",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID ORDER BY employee_sales DESC",
            "SELECT territories.TerritoryDescription, COUNT(orders.OrderID) AS order_count FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryDescription ORDER BY order_count DESC LIMIT 3",
            "SELECT CONCAT(YEAR(OrderDate), '-Q', CEIL(MONTH(OrderDate) / 3)) AS quarter, (COUNT(DISTINCT CASE WHEN OrderDate BETWEEN '2023-01-01' AND '2023-12-31' THEN CustomerID END) / NULLIF(COUNT(DISTINCT CASE WHEN OrderDate < '2023-01-01' THEN CustomerID END), 0)) AS customer_retention_rate FROM orders WHERE OrderDate < '2023-12-31' GROUP BY YEAR(OrderDate), CEIL(MONTH(OrderDate) / 3)",
            "SELECT EXTRACT(YEAR FROM orders.OrderDate) AS year, EXTRACT(MONTH FROM orders.OrderDate) AS month, orders.ShipVia, AVG(orders.Freight) AS avg_shipping_cost FROM orders GROUP BY year, month, orders.ShipVia",
            "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY suppliers.SupplierID",
            "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY categories.CategoryName",
            "SELECT customerDemographics.CustomerDesc, AVG(total_order_value) AS avg_order_value FROM ( SELECT customerDemographics.CustomerTypeID, customerDemographics.CustomerDesc, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS total_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN customerCustomerDemo ON customers.CustomerID = customerCustomerDemo.CustomerID JOIN customerDemographics ON customerCustomerDemo.CustomerTypeID = customerDemographics.CustomerTypeID GROUP BY customerDemographics.CustomerTypeID, customerDemographics.CustomerDesc ) AS subquery GROUP BY customerDemographics.CustomerDesc",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, products.ProductName, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 2 YEAR) GROUP BY month, products.ProductID ORDER BY month, sales_volume DESC",
            "SELECT o1.ProductID, o2.ProductID, COUNT(*) AS frequency FROM [Order Details] o1 JOIN [Order Details] o2 ON o1.OrderID = o2.OrderID AND o1.ProductID <> o2.ProductID GROUP BY o1.ProductID, o2.ProductID ORDER BY frequency DESC LIMIT 10",
            "SELECT products.ProductName, products.Discontinued, SUM([Order Details].Quantity) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued IN (0, 1) GROUP BY products.ProductName, products.Discontinued ORDER BY total_sales DESC",
            "SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS territory_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryDescription ORDER BY territory_sales DESC",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY month",
            "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_freight FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
            "SELECT products.ProductName, CASE WHEN SUM([Order Details].Quantity) > products.ReorderLevel THEN 'Effective' ELSE 'Need Adjustment' END AS reorder_level_effectiveness FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID, products.ProductName",
            "SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS territory_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryID, territories.TerritoryDescription ORDER BY territory_sales",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURDATE() - INTERVAL 1 MONTH) GROUP BY products.ProductName ORDER BY total_quantity DESC LIMIT 1",
            "SELECT COUNT(orders.OrderID) AS on_time_orders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND QUARTER(orders.OrderDate) = QUARTER(CURDATE()) AND YEAR(orders.OrderDate) = YEAR(CURDATE())",
            "SELECT MONTH(orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2022 GROUP BY MONTH(orders.OrderDate)",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE EXTRACT(QUARTER FROM orders.OrderDate) = 1 AND EXTRACT(YEAR FROM orders.OrderDate) = 2023 GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID",
            "SELECT COUNT(customers.CustomerID) AS customer_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 5;",
            "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 6 MONTH) AND CURDATE()",
            "SELECT categories.CategoryName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = 1 AND YEAR(orders.OrderDate) = 2023 GROUP BY categories.CategoryName ORDER BY total_quantity DESC",
            "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC",
            "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
            "SELECT regions.RegionDescription, COUNT(DISTINCT orders.CustomerID) / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE YEAR(orders.OrderDate) = 2022) AS retention_rate FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID JOIN regions ON customers.Region = regions.RegionID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY regions.RegionDescription ORDER BY retention_rate DESC",
            "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE QUARTER(orders.OrderDate) = 2 AND YEAR(orders.OrderDate) = 2023 GROUP BY products.ProductName",
            "SELECT products.ProductName FROM products WHERE products.UnitsInStock <= products.ReorderLevel",
            "SELECT 100 * COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN orders.OrderID END) / COUNT(orders.OrderID) AS on_time_rate FROM orders WHERE orders.OrderDate BETWEEN DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' AND CURRENT_DATE",
            "SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryDescription ORDER BY total_sales DESC",
            "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY suppliers.SupplierID ORDER BY total_sales DESC LIMIT 1",
            "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2022",
            "SELECT COUNT(DISTINCT products.ProductID) AS discontinued_products_count, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1",
            "SELECT DAYNAME(orders.OrderDate) AS order_day, COUNT(orders.OrderID) AS total_orders FROM orders GROUP BY order_day ORDER BY total_orders DESC LIMIT 1",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value_2023 FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT products.ProductID, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = 6 AND YEAR(orders.OrderDate) = 2023 GROUP BY products.ProductID ORDER BY product_performance DESC LIMIT 1",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE EXTRACT(MONTH FROM orders.OrderDate) = 12 AND EXTRACT(YEAR FROM orders.OrderDate) = 2023 GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1",
            "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time_q1_2023 FROM orders WHERE MONTH(orders.OrderDate) IN (1, 2, 3) AND YEAR(orders.OrderDate) = 2023",
            "(SELECT COUNT(DISTINCT o1.CustomerID) FROM orders o1 WHERE o1.OrderDate BETWEEN '2022-01-01' AND '2023-01-01') / (SELECT COUNT(DISTINCT o2.CustomerID) FROM orders o2 WHERE o2.OrderDate < '2022-01-01') AS customer_retention_rate",
            "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC LIMIT 1",
            "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = 6 AND YEAR(orders.OrderDate) = 2023",
            "SELECT MONTH(orders.OrderDate) AS month, AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE YEAR(orders.OrderDate) = 2023 GROUP BY MONTH(orders.OrderDate) ORDER BY avg_shipping_cost ASC LIMIT 1",
            "SELECT SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID) AS on_time_rate_h1_2023 FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'",
            "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY categories.CategoryName",
            "SELECT shippers.CompanyName, COUNT(orders.OrderID) AS total_orders FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.ShippedDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY shippers.CompanyName ORDER BY MIN(DATEDIFF(orders.ShippedDate, orders.OrderDate)) ASC LIMIT 1",
            "SELECT categories.CategoryName, COUNT(DISTINCT orders.CustomerID) AS unique_customers FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY unique_customers DESC LIMIT 1",
            "SELECT products.ProductID, products.ProductName, products.UnitsInStock FROM products WHERE products.Discontinued = 0 ORDER BY products.UnitsInStock ASC LIMIT 5;",
            "SELECT suppliers.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY total_sales DESC LIMIT 1",
            "SELECT AVG([Order Details].Discount) AS avg_discount_nov_2023 FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE EXTRACT(MONTH FROM orders.OrderDate) = 11 AND EXTRACT(YEAR FROM orders.OrderDate) = 2023",
            "SELECT orders.ShipCity, COUNT(orders.OrderID) AS total_orders FROM orders WHERE YEAR(orders.ShippedDate) = 2023 GROUP BY orders.ShipCity ORDER BY total_orders DESC LIMIT 1",
            "SELECT COUNT(DISTINCT employees.EmployeeID) FROM employeeTerritories JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY employeeTerritories.EmployeeID HAVING COUNT(DISTINCT territories.RegionID) > 1",
            "SELECT customerDemographics.CustomerTypeID, COUNT(orders.OrderID) AS total_orders FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN customerCustomerDemo ON customers.CustomerID = customerCustomerDemo.CustomerID JOIN customerDemographics ON customerCustomerDemo.CustomerTypeID = customerDemographics.CustomerTypeID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY customerDemographics.CustomerTypeID",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
            "SELECT categories.CategoryName, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY month",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY total_quantity DESC",
            "SELECT customers.CustomerID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE YEAR(orders.OrderDate) = (YEAR(CURDATE()) - 1) GROUP BY customers.CustomerID",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID ORDER BY total_sales DESC",
            "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY month",
            "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY avg_lead_time ASC",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Country = 'USA' GROUP BY customers.CustomerID",
            "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName",
            "SELECT COUNT(orders.OrderID) AS fulfilled_orders FROM orders WHERE DATEDIFF(orders.ShippedDate, orders.OrderDate) <= 7",
            "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY total_sales DESC",
            "SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-12-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-10-01') AS customer_retention_rate",
            "SELECT shippers.CompanyName, SUM(orders.Freight) AS total_freight_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
            "SELECT customers.CustomerID, COUNT(DISTINCT orders.OrderID) AS total_orders FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE YEAR(orders.OrderDate) = (YEAR(CURDATE()) - 1) GROUP BY customers.CustomerID HAVING total_orders > 3",
            "SELECT products.ProductName, COUNT([Order Details].ProductID) AS order_count FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY order_count DESC LIMIT 1",
            "SELECT COUNT(orders.OrderID) AS delayed_orders FROM orders WHERE orders.ShippedDate > orders.RequiredDate",
            "SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employeeTerritories ON orders.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID GROUP BY region.RegionDescription",
            "SELECT employees.EmployeeID, COUNT(DISTINCT employeeTerritories.TerritoryID) AS territories_count FROM employees JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID GROUP BY employees.EmployeeID HAVING territories_count > 1",
            "SELECT orders.OrderID, AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.OrderID",
            "SELECT customers.Country, AVG(customer_lifetime_value) AS avg_lifetime_value FROM (SELECT customers.CustomerID, customers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID, customers.Country) AS customer_values GROUP BY customers.Country ORDER BY avg_lifetime_value DESC",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-09-01' AND '2023-09-30' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1",
            "SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID ORDER BY total_quantity DESC LIMIT 1",
            "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.SupplierID ORDER BY lead_time ASC LIMIT 1",
            "SELECT customers.CustomerID, COUNT(orders.OrderID) AS order_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.CustomerID",
            "SELECT COUNT(orders.OrderID) AS on_time_deliveries FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'",
            "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID",
            "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName ORDER BY avg_shipping_cost ASC LIMIT 1",
            "SELECT SUM(orders.Freight) AS total_freight_cost FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT region.RegionDescription, COUNT(orders.OrderID) AS sales_count FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY region.RegionDescription ORDER BY sales_count DESC LIMIT 1",
            "SELECT COUNT(*) AS hires_count FROM employees WHERE employees.HireDate BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT products.ProductID, SUM([Order Details].Quantity) AS performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1 GROUP BY products.ProductID",
            "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount) AS total_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryDescription ORDER BY total_sales DESC LIMIT 1",
            "SELECT products.ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID ORDER BY revenue DESC LIMIT 5",
            "SELECT customerDemographics.CustomerDesc, COUNT(DISTINCT customers.CustomerID) AS customer_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID JOIN customerCustomerDemo ON customers.CustomerID = customerCustomerDemo.CustomerID JOIN customerDemographics ON customerCustomerDemo.CustomerTypeID = customerDemographics.CustomerTypeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND orders.OrderID IN (SELECT DISTINCT orders.OrderID FROM [Order Details] WHERE [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) > (SELECT AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) FROM [Order Details])) GROUP BY customerDemographics.CustomerDesc ORDER BY customer_count DESC;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-12-31'",
            "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS product_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY products.ProductName ORDER BY product_sales DESC LIMIT 1",
            "SELECT EXTRACT(MONTH FROM orders.OrderDate) AS order_month, COUNT(orders.OrderID) AS total_orders FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY order_month",
            "SELECT customerCustomerDemo.CustomerTypeID, AVG(total_order_value) AS avg_order_value FROM (SELECT orders.CustomerID, customerCustomerDemo.CustomerTypeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customerCustomerDemo ON orders.CustomerID = customerCustomerDemo.CustomerID GROUP BY orders.CustomerID, customerCustomerDemo.CustomerTypeID) subquery GROUP BY customerCustomerDemo.CustomerTypeID;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY employees.EmployeeID HAVING total_sales > 100000",
            "SELECT region.RegionDescription, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_delivery_time FROM orders JOIN region ON orders.ShipRegion = region.RegionID GROUP BY region.RegionDescription",
            "SELECT SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-09-01' AND '2023-09-30'",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID",
            "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName",
            "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY avg_lead_time",
            "SELECT orders.ShipCountry, COUNT(orders.OrderID) AS order_count FROM orders GROUP BY orders.ShipCountry ORDER BY order_count DESC",
            "SELECT COUNT(products.ProductID) AS out_of_stock_products FROM products WHERE products.UnitsInStock = 0",
            "SELECT employees.EmployeeID, SUM([Order Details].Quantity) AS product_count FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID",
            "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
            "SELECT AVG(([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) AS avg_order_value, [Order Details].Discount FROM [Order Details] GROUP BY [Order Details].Discount",
            "SELECT EXTRACT(MONTH FROM orders.OrderDate) AS order_month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY order_month ORDER BY avg_fulfillment_time DESC LIMIT 1",
            "SELECT categories.CategoryName, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY product_performance DESC LIMIT 3",
            "SELECT (SELECT COUNT(DISTINCT o1.CustomerID) FROM orders o1 WHERE NOT EXISTS (SELECT 1 FROM orders o2 WHERE o2.CustomerID = o1.CustomerID AND o2.OrderDate < '2023-01-01')) AS new_customers, (SELECT COUNT(DISTINCT o3.CustomerID) FROM orders o3 WHERE EXISTS (SELECT 1 FROM orders o4 WHERE o4.CustomerID = o3.CustomerID AND o4.OrderDate < '2023-01-01') AND o3.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') AS returning_customers",
            "SELECT employees.EmployeeID, COUNT(employeeTerritories.TerritoryID) AS territory_count FROM employeeTerritories JOIN employees ON employeeTerritories.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID ORDER BY territory_count DESC",
            "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-12-31' GROUP BY products.ProductName ORDER BY total_quantity DESC",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY employees.EmployeeID",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY month",
            "SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31') AS customer_retention_rate",
            "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC LIMIT 1",
            "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName",
            "SELECT AVG(orders.Freight) AS avg_shipping_cost_per_order FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT orders.OrderID FROM orders WHERE orders.ShippedDate <= orders.RequiredDate",
            "SELECT customers.CustomerID, COUNT(orders.OrderID) AS num_orders FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.CustomerID",
            "SELECT shippers.CompanyName, CAST(COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) AS FLOAT) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName ORDER BY on_time_delivery_rate DESC",
            "SELECT employees.EmployeeID, AVG(employee_sales) AS avg_employee_sales FROM (SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY employees.EmployeeID) AS subquery;",
            "SELECT (COUNT(DISTINCT [Order Details].OrderID) * 1.0 / (SELECT COUNT(DISTINCT OrderID) FROM orders)) * 100 AS percentage_discounted_orders FROM [Order Details] WHERE Discount > 0",
            "SELECT products.ProductName, products.ReorderLevel FROM products WHERE products.UnitsInStock + products.UnitsOnOrder <= products.ReorderLevel",
            "SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID GROUP BY region.RegionDescription ORDER BY total_sales DESC",
            "SELECT suppliers.CompanyName, SUM([Order Details].Quantity) AS total_units_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY total_units_sold DESC",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT products.ProductID, DATE_TRUNC('month', orders.OrderDate) AS order_month, SUM([Order Details].Quantity) AS units_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductID, order_month",
            "SELECT products.ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS product_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 AND MONTH(orders.OrderDate) = 1 GROUP BY products.ProductID ORDER BY product_revenue DESC LIMIT 1",
            "SELECT MONTH(orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY MONTH(orders.OrderDate)",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC LIMIT 5",
            "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY suppliers.SupplierID",
            "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / CAST(COUNT(orders.OrderID) AS FLOAT) AS on_time_delivery_rate FROM orders WHERE YEAR(orders.OrderDate) = 2023 AND MONTH(orders.OrderDate) <= 3",
            "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_freight FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE YEAR(orders.OrderDate) = 2022 GROUP BY shippers.CompanyName ORDER BY avg_freight ASC LIMIT 1",
            "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY categories.CategoryName",
            "SELECT territories.TerritoryDescription, employees.EmployeeID, EXTRACT(MONTH FROM orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID WHERE EXTRACT(YEAR FROM orders.OrderDate) = 2023 GROUP BY territories.TerritoryDescription, employees.EmployeeID, EXTRACT(MONTH FROM orders.OrderDate)",
            "SELECT ((COUNT(DISTINCT CASE WHEN YEAR(o1.OrderDate) = 2022 THEN o1.CustomerID END) - COUNT(DISTINCT CASE WHEN YEAR(o2.OrderDate) = 2021 THEN o2.CustomerID END)) / NULLIF(COUNT(DISTINCT CASE WHEN YEAR(o2.OrderDate) = 2021 THEN o2.CustomerID END), 0)) * 100 AS monthly_growth FROM orders o1, orders o2 WHERE o1.CustomerID = o2.CustomerID AND YEAR(o1.OrderDate) = 2022 AND YEAR(o2.OrderDate) = 2021;",
            "SELECT products.ProductName FROM products WHERE products.UnitsInStock <= products.ReorderLevel",
            "SELECT orders.ShipCountry, COUNT(orders.OrderID) AS num_orders FROM orders WHERE YEAR(orders.OrderDate) = 2023 GROUP BY orders.ShipCountry ORDER BY num_orders DESC LIMIT 1;",
            "SELECT COUNT(products.ProductID) * 100.0 / (SELECT COUNT(ProductID) FROM products) AS discontinued_percentage FROM products WHERE products.Discontinued = TRUE;",
            "SELECT p.ProductID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS avg_fulfillment_time FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = 2023 GROUP BY p.ProductID ORDER BY SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) DESC LIMIT 3",
            "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE products.Discontinued = TRUE GROUP BY suppliers.CompanyName ORDER BY total_sales DESC LIMIT 1",
            "SELECT COUNT(DISTINCT orders.CustomerID) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE [Order Details].Discount > 0.2",
            "SELECT DAYNAME(orders.OrderDate) AS day_of_week, COUNT(orders.OrderID) AS num_orders FROM orders GROUP BY DAYNAME(orders.OrderDate) ORDER BY num_orders DESC LIMIT 1",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS num_orders FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Country = 'USA'",
            "SELECT MONTH(orders.OrderDate) AS month, COUNT(orders.OrderID) AS late_orders FROM orders WHERE orders.ShippedDate > orders.RequiredDate GROUP BY MONTH(orders.OrderDate)",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28'",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID",
            "SELECT products.ProductID, SUM([Order Details].Quantity) AS product_sales_volume FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-06-01' AND '2023-06-30' GROUP BY products.ProductID ORDER BY product_sales_volume DESC",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY employees.EmployeeID",
            "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'",
            "SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30')::FLOAT / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-04-01') AS retention_rate",
            "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY products.SupplierID",
            "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-07-31'",
            "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID) AS on_time_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-08-01' AND '2023-08-31'",
            "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS revenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY revenue DESC",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30' GROUP BY employees.EmployeeID HAVING total_sales > 100000",
            "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS supplier_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY supplier_sales DESC",
            "SELECT orders.ShipVia, COUNT(*) AS order_count FROM orders GROUP BY orders.ShipVia",
            "SELECT customers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.Country ORDER BY total_revenue DESC LIMIT 5",
            "SELECT COUNT(DISTINCT orders.OrderID) AS new_customer_orders FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND orders.CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders WHERE OrderDate < '2023-01-01')",
            "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-12-01' AND '2023-12-31'",
            "SELECT customerDemographics.CustomerTypeID, COUNT(orders.OrderID) AS order_count FROM customerCustomerDemo JOIN orders ON customerCustomerDemo.CustomerID = orders.CustomerID JOIN customerDemographics ON customerCustomerDemo.CustomerTypeID = customerDemographics.CustomerTypeID GROUP BY customerDemographics.CustomerTypeID",
            "(SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE CustomerID IN (SELECT CustomerID FROM orders WHERE OrderDate < '2023-01-01') AND OrderDate BETWEEN '2023-01-01' AND '2023-06-30') / (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate < '2023-01-01') AS return_rate",
            "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY products.ProductName ORDER BY total_sales DESC LIMIT 1",
            "SELECT COUNT(orders.OrderID) AS on_time_orders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND orders.ShippedDate BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1",
            "SELECT COUNT(products.ProductID) AS product_count FROM products WHERE products.ReorderLevel < products.UnitsInStock",
            "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY avg_lead_time ASC LIMIT 1",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS order_month, products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY order_month, products.ProductName",
            "SELECT customers.City, COUNT(customers.CustomerID) AS customer_count FROM customers GROUP BY customers.City ORDER BY customer_count DESC LIMIT 1",
            "SELECT (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID)) AS on_time_delivery_percentage FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT products.ProductName, COUNT([Order Details].ProductID) AS order_frequency FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductName ORDER BY order_frequency DESC LIMIT 1",
            "SELECT shippers.CompanyName, COUNT(orders.OrderID) AS order_count FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY shippers.CompanyName ORDER BY order_count DESC LIMIT 1",
            "SELECT COUNT(*) AS common_customers FROM ( SELECT orders.CustomerID FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30' GROUP BY orders.CustomerID HAVING COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' THEN orders.OrderID END) > 0 AND COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' THEN orders.OrderID END) > 0 ) AS subquery",
            "SELECT employees.Title, AVG(employee_sales) AS avg_employee_sales FROM (SELECT employees.Title, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID, employees.Title) AS sales_by_employee GROUP BY employees.Title",
            "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY categories.CategoryName ORDER BY total_revenue DESC LIMIT 1",
            "SELECT COUNT(DISTINCT [Order Details].OrderID) AS discount_orders FROM [Order Details] WHERE [Order Details].Discount > 0.20",
            "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT employees.FirstName, employees.LastName, AVG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID)) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY employees.EmployeeID ORDER BY avg_order_value DESC LIMIT 1",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, COUNT(DISTINCT CustomerID) AS unique_customers FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY total_quantity DESC",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = 1 AND YEAR(orders.OrderDate) = 2023",
            "SELECT customers.CustomerID, products.ProductName, COUNT([Order Details].ProductID) AS product_count FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY customers.CustomerID, products.ProductName ORDER BY product_count DESC",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1",
            "SELECT ShipCity, COUNT(OrderID) AS order_count FROM orders GROUP BY ShipCity ORDER BY order_count DESC LIMIT 5",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time FROM orders WHERE ShippedDate IS NOT NULL GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')",
            "SELECT COUNT(OrderID) AS delayed_orders FROM orders WHERE ShippedDate > RequiredDate",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
            "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC",
            "SELECT SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END) / COUNT(ProductID) * 100.0 AS percentage FROM products",
            "SELECT ShipVia, AVG(Freight) AS avg_shipping_cost FROM orders GROUP BY ShipVia",
            "(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2022-01-01') AS retention_rate",
            "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) AS turnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY turnover DESC",
            "SELECT shippers.CompanyName, SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID) AS on_time_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
            "SELECT Region, COUNT(CustomerID) AS customer_count FROM customers GROUP BY Region",
            "SELECT ProductID, SUM(UnitsOnOrder) AS total_units_on_order FROM products GROUP BY ProductID;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(OrderDate) = 2023 GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY total_sales DESC LIMIT 1",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE())",
            "SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE MONTH(orders.OrderDate) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURDATE() - INTERVAL 1 MONTH)",
            "SELECT products.ProductID, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE QUARTER(orders.OrderDate) = QUARTER(CURDATE()) AND YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY products.ProductID ORDER BY sales_volume DESC LIMIT 1",
            "SELECT MONTH(orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY month",
            "SELECT COUNT(*) FROM products WHERE UnitsInStock = 0",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1",
            "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE YEAR(orders.OrderDate) = YEAR(CURDATE())",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY lifetime_value DESC LIMIT 5",
            "SELECT COUNT(orders.OrderID WHERE orders.ShippedDate <= orders.RequiredDate) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)",
            "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY inventory_turnover DESC",
            "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC LIMIT 1",
            "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)",
            "SELECT ShipVia, COUNT(orders.OrderID) AS number_of_orders FROM orders WHERE QUARTER(orders.OrderDate) = QUARTER(CURDATE() - INTERVAL 3 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURDATE() - INTERVAL 3 MONTH) GROUP BY ShipVia",
            "SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE YEAR(orders.OrderDate) = YEAR(CURDATE())) / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) - 1) AS retention_rate",
            "SELECT employeeTerritories.RegionID, employees.EmployeeID, COUNT(orders.OrderID) AS number_of_orders FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID GROUP BY employeeTerritories.RegionID, employees.EmployeeID ORDER BY employeeTerritories.RegionID, number_of_orders DESC",
            "SELECT COUNT(products.ProductID) AS discontinued_products_with_inventory FROM products WHERE products.Discontinued = 1 AND products.UnitsInStock > 0",
            "SELECT AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE orders.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)",
            "SELECT customers.Country, COUNT(orders.OrderID) AS number_of_orders FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY customers.Country ORDER BY number_of_orders DESC",
            "SELECT customers.CustomerID FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 1",
            "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_shipping_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY products.ProductName ORDER BY total_quantity DESC LIMIT 1",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1",
            "SELECT MONTH(orders.OrderDate) AS order_month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY order_month",
            "SELECT COUNT(DISTINCT orders.CustomerID) AS customer_count FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY orders.CustomerID HAVING COUNT(orders.OrderID) > 1",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID",
            "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID ORDER BY average_lead_time ASC LIMIT 1",
            "SELECT COUNT(orders.OrderID) AS late_orders FROM orders WHERE orders.ShippedDate > orders.RequiredDate",
            "SELECT (COUNT(CASE WHEN products.Discontinued = 1 THEN 1 END) * 100.0) / COUNT(products.ProductID) AS discontinued_percentage FROM products",
            "SELECT employees.EmployeeID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID",
            "SELECT customers.City FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.City ORDER BY SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) DESC LIMIT 1",
            "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
            "SELECT orders.CustomerID, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.CustomerID ORDER BY total_quantity DESC LIMIT 5;",
            "SELECT MONTH(orders.OrderDate) AS order_month, COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 1.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE YEAR(orders.OrderDate) = 2023 GROUP BY MONTH(orders.OrderDate)",
            "SELECT categories.CategoryName, AVG(products.UnitPrice) AS avg_unit_price FROM products JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY avg_unit_price DESC LIMIT 1",
            "SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryDescription",
            "SELECT (COUNT(DISTINCT orders.CustomerID) WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2021-01-01' AND '2021-12-31') AS customer_return_rate",
            "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales_contribution FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName",
            "SELECT products.ProductName, (SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) - LAG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) OVER (PARTITION BY products.ProductID ORDER BY YEAR(orders.OrderDate), MONTH(orders.OrderDate))) / LAG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) OVER (PARTITION BY products.ProductID ORDER BY YEAR(orders.OrderDate), MONTH(orders.OrderDate)) AS sales_growth FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName, products.ProductID, YEAR(orders.OrderDate), MONTH(orders.OrderDate) ORDER BY sales_growth DESC LIMIT 10",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY month",
            "SELECT categories.CategoryName, SUM([Order Details].Quantity) AS total_quantity_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS total_orders FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID",
            "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) AS on_time_orders, COUNT(orders.OrderID) AS total_orders, COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / COUNT(orders.OrderID)::float AS on_time_delivery_rate FROM orders",
            "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC LIMIT 1",
            "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(orders.Freight) AS avg_shipping_cost FROM orders GROUP BY month",
            "SELECT products.ProductID, SUM([Order Details].Quantity) AS total_units_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID ORDER BY total_units_sold DESC LIMIT 1",
            "SELECT shippers.CompanyName, COUNT(orders.OrderID) AS on_time_deliveries FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY shippers.CompanyName ORDER BY on_time_deliveries DESC LIMIT 1",
            "SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30') / NULLIF((SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-07-01'), 0) AS customer_retention_rate;",
            "SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryDescription",
            "SELECT suppliers.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS supplier_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY supplier_sales DESC LIMIT 1",
            "SELECT SUM(products.UnitsInStock) AS total_units_in_stock FROM products WHERE products.Discontinued = 1",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(products.ReorderLevel) AS avg_reorder_level FROM products GROUP BY month",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE DATE_FORMAT(orders.OrderDate, '%Y-%m') = DATE_FORMAT(CURRENT_DATE - INTERVAL 1 MONTH, '%Y-%m') GROUP BY employees.EmployeeID ORDER BY revenue DESC LIMIT 1",
            "SELECT AVG([Order Details].Discount) AS avg_discount_given FROM [Order Details]",
            "SELECT customers.Country, COUNT(orders.OrderID) AS total_orders FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.Country ORDER BY total_orders DESC LIMIT 1",
            "SELECT COUNT(DISTINCT orders.CustomerID) AS customer_count FROM orders WHERE YEAR(orders.OrderDate) = 2023",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY products.ProductID ORDER BY total_quantity DESC LIMIT 1;",
            "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.ShipperID",
            "SELECT employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName ORDER BY total_sales DESC LIMIT 5",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY month",
            "SELECT (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31') / (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate < '2023-01-01') AS customer_retention_rate",
            "SELECT region.RegionDescription, COUNT(orders.OrderID) AS order_count FROM orders JOIN territories ON orders.ShipRegion = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY region.RegionDescription ORDER BY order_count DESC LIMIT 1",
            "SELECT COUNT(*) AS discontinued_product_count FROM products WHERE Discontinued = 1",
            "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN orders.OrderID END) AS on_time_orders FROM orders WHERE YEAR(orders.OrderDate) = 2023",
            "SELECT COUNT(*) AS reorder_products FROM products WHERE UnitsInStock <= ReorderLevel",
            "SELECT AVG(customer_lifetime_value) FROM (SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID) AS customer_values",
            "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY total_revenue DESC LIMIT 1;",
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM [Order Details])) AS percentage_with_discount FROM [Order Details] WHERE Discount > 0",
            "SELECT COUNT(*) AS high_freight_orders FROM orders WHERE Freight > 50",
            "SELECT customers.CustomerID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID",
            "SELECT CONCAT('Q', QUARTER(OrderDate), ' ', YEAR(OrderDate)) AS quarter, COUNT(*) AS order_count FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY quarter",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'",
            "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductName ORDER BY total_sales DESC LIMIT 1",
            "SELECT MONTH(orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY MONTH(orders.OrderDate)",
            "SELECT p.ProductName, SUM(od.Quantity) AS total_quantity FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID JOIN products p ON od.ProductID = p.ProductID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND o.OrderDate < CURDATE() GROUP BY p.ProductName ORDER BY total_quantity DESC LIMIT 1",
            "SELECT c.CustomerID, AVG(order_value) AS avg_order_value FROM (SELECT o.CustomerID, od.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS order_value FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = 2023 GROUP BY o.CustomerID, od.OrderID) customer_orders GROUP BY c.CustomerID",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS total_sales FROM [Order Details] od JOIN orders ON od.OrderID = orders.OrderID JOIN employees e ON orders.EmployeeID = e.EmployeeID WHERE YEAR(orders.OrderDate) = 2023 AND MONTH(orders.OrderDate) BETWEEN 1 AND 3 GROUP BY e.EmployeeID ORDER BY total_sales DESC LIMIT 1",
            "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE QUARTER(orders.OrderDate) = 2 AND YEAR(orders.OrderDate) = 2023",
            "SELECT (COUNT(DISTINCT o1.CustomerID) / COUNT(DISTINCT o2.CustomerID)) AS customer_retention_rate FROM orders o1, orders o2 WHERE o1.OrderDate BETWEEN '2023-01-01' AND '2023-06-30' AND o2.OrderDate < '2023-01-01'",
            "SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID JOIN orders o ON od.OrderID = o.OrderID WHERE c.CategoryName = 'Electronics' AND YEAR(o.OrderDate) = 2023",
            "SELECT AVG(orders.Freight) AS avg_shipping_cost FROM orders",
            "SELECT SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE QUARTER(orders.OrderDate) = (QUARTER(CURDATE()) - 1) AND YEAR(orders.OrderDate) = YEAR(CURDATE())",
            "SELECT c.CategoryName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS total_revenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = 2023 GROUP BY c.CategoryName",
            "SELECT customers.City, COUNT(DISTINCT orders.CustomerID) AS returning_customers FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.CustomerID IN (SELECT o.CustomerID FROM orders o WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') AND orders.OrderDate < '2023-01-01' GROUP BY customers.City ORDER BY returning_customers DESC LIMIT 1",
            "SELECT MONTH(orders.OrderDate) AS month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS sales FROM [Order Details] od JOIN orders ON od.OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY month ORDER BY sales DESC LIMIT 1",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY lifetime_value DESC LIMIT 3",
            "SELECT COUNT(ProductID) AS backorder_count FROM products WHERE UnitsOnOrder > UnitsInStock",
            "SELECT s.SupplierID, SUM(od.Quantity) AS total_quantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = 2023 GROUP BY s.SupplierID ORDER BY total_quantity DESC LIMIT 1",
            "SELECT COUNT(DISTINCT ProductID) AS distinct_products FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURDATE()) - 1 AND YEAR(orders.OrderDate) = YEAR(CURDATE())",
            "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE)",
            "SELECT t.TerritoryDescription, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS total_sales FROM [Order Details] od JOIN orders ON od.OrderID = orders.OrderID JOIN employeeTerritories et ON orders.EmployeeID = et.EmployeeID JOIN territories t ON et.TerritoryID = t.TerritoryID WHERE orders.OrderDate BETWEEN 'start_date' AND 'end_date' GROUP BY t.TerritoryDescription ORDER BY total_sales DESC LIMIT 1",
            "SELECT customers.CustomerID, COUNT(orders.OrderID) AS order_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY customers.CustomerID",
            "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS category_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-12-31' GROUP BY categories.CategoryName ORDER BY category_sales DESC",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_spending FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY total_spending DESC LIMIT 5",
            "",
            "SELECT shippers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
            "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY turnover_ratio DESC",
            "SELECT COUNT(products.ProductID) AS discontinued_count, SUM(products.UnitsInStock * products.UnitPrice) AS total_inventory_value FROM products WHERE products.Discontinued = 1",
            "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY avg_lead_time ASC",
            "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 1.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'",
            "SELECT customers.City, COUNT(orders.OrderID) AS order_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.City ORDER BY order_count DESC LIMIT 10",
            "SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID GROUP BY region.RegionDescription",
            "SELECT employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1",
            "(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2023-12-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2022-01-01') AS customer_retention_rate",
            "SELECT EXTRACT(MONTH FROM orders.OrderDate) AS order_month, AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY order_month",
            "SELECT products.ProductName, EXTRACT(MONTH FROM orders.OrderDate) AS order_month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductName, order_month ORDER BY total_sales DESC",
            "SELECT orders.OrderID, SUM([Order Details].Discount * [Order Details].UnitPrice * [Order Details].Quantity) AS total_discounts, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.OrderID",
            "SELECT suppliers.CompanyName, COUNT(DISTINCT products.CategoryID) AS category_count FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY category_count DESC LIMIT 1",
            "SELECT AVG(e.Salary) AS avg_salary FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > (SELECT AVG(employee_sales) FROM (SELECT SUM(od2.UnitPrice * od2.Quantity * (1 - od2.Discount)) AS employee_sales FROM [Order Details] od2 JOIN orders o2 ON od2.OrderID = o2.OrderID JOIN employees e2 ON o2.EmployeeID = e2.EmployeeID GROUP BY e2.EmployeeID) AS subquery)",
            "SELECT c.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products p ON [Order Details].ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID JOIN orders o ON [Order Details].OrderID = o.OrderID WHERE o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY c.CategoryName",
            "SELECT c.CustomerID, COUNT(o.OrderID) AS order_count FROM orders o JOIN customers c ON o.CustomerID = c.CustomerID WHERE o.OrderDate BETWEEN '2023-07-01' AND '2023-09-30' GROUP BY c.CustomerID ORDER BY order_count DESC",
            "SELECT AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS avg_fulfillment_time FROM orders o WHERE o.OrderDate BETWEEN '2023-04-01' AND '2023-09-30'",
            "SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS avg_lead_time FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY s.SupplierID ORDER BY avg_lead_time DESC",
            "SELECT c.Region, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS avg_order_value FROM [Order Details] JOIN orders o ON [Order Details].OrderID = o.OrderID JOIN customers c ON o.CustomerID = c.CustomerID GROUP BY c.Region",
            "SELECT p.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales_revenue FROM [Order Details] JOIN products p ON [Order Details].ProductID = p.ProductID JOIN orders o ON [Order Details].OrderID = o.OrderID WHERE EXTRACT(MONTH FROM o.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) AND EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY p.ProductName ORDER BY sales_revenue DESC",
            "SELECT COUNT(CASE WHEN o.ShippedDate <= o.RequiredDate THEN 1 END) * 100.0 / COUNT(o.OrderID) AS on_time_delivery_rate FROM orders o WHERE o.OrderDate BETWEEN '2023-07-01' AND '2023-09-30'",
            "SELECT MONTH(o.OrderDate) AS order_month, COUNT(DISTINCT o.CustomerID) AS new_customers FROM orders o WHERE YEAR(o.OrderDate) = 2023 GROUP BY order_month",
            "SELECT e.EmployeeID, t.TerritoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders o ON [Order Details].OrderID = o.OrderID JOIN employees e ON o.EmployeeID = e.EmployeeID JOIN employeeTerritories et ON e.EmployeeID = et.EmployeeID JOIN territories t ON et.TerritoryID = t.TerritoryID GROUP BY e.EmployeeID, t.TerritoryID ORDER BY total_sales DESC",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN products p ON [Order Details].ProductID = p.ProductID WHERE p.Discontinued = 1;",
            "SELECT o.ShipVia, AVG(o.Freight) AS avg_shipping_cost FROM orders o GROUP BY o.ShipVia ORDER BY avg_shipping_cost ASC",
            "SELECT c.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(p.UnitsInStock) AS turnover_ratio FROM [Order Details] JOIN products p ON [Order Details].ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID WHERE [Order Details].OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY c.CategoryName",
            "SELECT (SELECT COUNT(DISTINCT o.CustomerID) FROM orders o WHERE YEAR(o.OrderDate) = 2023) / NULLIF((SELECT COUNT(DISTINCT o.CustomerID) FROM orders o WHERE YEAR(o.OrderDate) = 2022), 0) AS retention_rate",
            "SELECT e.FirstName, e.LastName, e.HireDate, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales_contribution FROM [Order Details] JOIN orders o ON [Order Details].OrderID = o.OrderID JOIN employees e ON o.EmployeeID = e.EmployeeID WHERE e.HireDate = (SELECT MAX(HireDate) FROM employees) GROUP BY e.FirstName, e.LastName, e.HireDate",
            "SELECT o.ShipVia, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS avg_order_value FROM orders o JOIN [Order Details] ON o.OrderID = [Order Details].OrderID GROUP BY o.ShipVia",
            "SELECT p.ProductName, p.UnitsInStock - p.UnitsOnOrder AS stock_risk FROM products p WHERE p.UnitsInStock - p.UnitsOnOrder < p.ReorderLevel",
            "SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS delivery_time FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID ORDER BY delivery_time ASC;",
            "SELECT MONTH(o.OrderDate) AS order_month, AVG([Order Details].Discount) AS avg_discount_rate FROM orders o JOIN [Order Details] ON o.OrderID = [Order Details].OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY order_month",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(DATEDIFF(CURRENT_DATE, e.HireDate) / 365.25) AS tenure_years, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales_performance FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] ON o.OrderID = [Order Details].OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName",
            "SELECT c.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders o ON [Order Details].OrderID = o.OrderID JOIN customers c ON o.CustomerID = c.CustomerID GROUP BY c.CustomerID ORDER BY lifetime_value DESC",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31'",
            "SELECT COUNT(DISTINCT [Order Details].ProductID) AS unique_products FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28'",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30';",
            "SELECT customers.CustomerID FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 5",
            "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY products.ProductName ORDER BY sales_revenue DESC LIMIT 1",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Region = 'CA' GROUP BY customers.CustomerID",
            "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID) AS on_time_delivery_percentage FROM orders WHERE orders.OrderDate BETWEEN '2023-06-01' AND '2023-06-30'",
            "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-07-31' GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName ORDER BY total_sales DESC LIMIT 3",
            "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-04-30'",
            "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30' GROUP BY products.SupplierID ORDER BY avg_lead_time LIMIT 1",
            "SELECT shippers.CompanyName, SUM(orders.Freight) AS total_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-08-01' AND '2023-08-31' GROUP BY shippers.CompanyName",
            "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.ShipVia = 1",
            "SELECT COUNT(DISTINCT retained.CustomerID) FROM (SELECT CustomerID FROM orders WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31') AS previous INNER JOIN (SELECT CustomerID FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31') AS current ON previous.CustomerID = current.CustomerID",
            "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-09-01' AND '2023-09-30' GROUP BY categories.CategoryName",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-10-31' GROUP BY products.ProductName ORDER BY product_performance ASC LIMIT 1;",
            "SELECT AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE orders.OrderDate BETWEEN '2023-11-01' AND '2023-11-30'",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_orders FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-12-01' AND '2023-12-31' GROUP BY products.ProductName ORDER BY total_orders DESC LIMIT 1",
            "SELECT DISTINCT suppliers.SupplierID, suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.CustomerID IN (SELECT CustomerID FROM (SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_spending FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY CustomerID ORDER BY customer_spending DESC LIMIT 10) AS top_customers_table)",
            "SELECT AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS avg_order_value_no_discount, AVG([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS avg_order_value_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'",
            "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID WHERE territories.TerritoryDescription LIKE '%New York%' GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC",
            "SELECT EXTRACT(MONTH FROM orders.OrderDate) AS order_month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY order_month",
            "SELECT products.ProductID, DATE_TRUNC('month', orders.OrderDate) AS month, SUM([Order Details].Quantity) AS total_sold FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID, DATE_TRUNC('month', orders.OrderDate)",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC",
            "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0",
            "SELECT EXTRACT(MONTH FROM orders.OrderDate) AS order_month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY order_month",
            "SELECT COUNT(orders.OrderID) AS on_time_delivery_count FROM orders WHERE orders.ShippedDate <= orders.RequiredDate",
            "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID ORDER BY avg_lead_time DESC",
            "SELECT customers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.Country",
            "SELECT EXTRACT(MONTH FROM orders.OrderDate) AS order_month, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY order_month",
            "SELECT DISTINCT o1.CustomerID FROM orders o1 JOIN orders o2 ON o1.CustomerID = o2.CustomerID AND EXTRACT(YEAR FROM o1.OrderDate) = EXTRACT(YEAR FROM o2.OrderDate) AND EXTRACT(MONTH FROM o1.OrderDate) = EXTRACT(MONTH FROM o2.OrderDate) - 1",
            "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS category_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY category_sales DESC",
            "SELECT (COUNT(DISTINCT o2023.CustomerID) * 1.0 / NULLIF(COUNT(DISTINCT oBefore2023.CustomerID), 0)) AS repeat_customer_rate FROM orders o2023 JOIN orders oBefore2023 ON o2023.CustomerID = oBefore2023.CustomerID WHERE o2023.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND oBefore2023.OrderDate < '2023-01-01'",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY employees.EmployeeID ORDER BY employee_sales ASC LIMIT 1",
            "SELECT region.RegionDescription, COUNT(DISTINCT employees.EmployeeID) AS employee_count FROM employees JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID GROUP BY region.RegionDescription",
            "SELECT products.ProductID FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID HAVING SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) IS NOT NULL ORDER BY SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) ASC LIMIT 1",
            "SELECT EXTRACT(MONTH FROM orders.OrderDate) AS order_month, COUNT(orders.OrderID) FILTER (WHERE orders.ShippedDate <= orders.RequiredDate)::float / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY order_month",
            "SELECT suppliers.SupplierID FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID ORDER BY SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) DESC",
            "SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID ORDER BY total_quantity DESC",
            "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'",
            "SELECT COUNT(DISTINCT o1.CustomerID) AS returning_customers FROM orders o1 WHERE o1.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND o1.CustomerID IN (SELECT DISTINCT o2.CustomerID FROM orders o2 WHERE o2.OrderDate < '2023-01-01')",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC",
            "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC",
            "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY shippers.CompanyName",
            "SELECT regions.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN territories ON customers.Region = territories.RegionID JOIN region ON territories.RegionID = region.RegionID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY regions.RegionDescription ORDER BY total_sales DESC",
            "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT COUNT(orders.OrderID) AS late_orders FROM orders WHERE orders.ShippedDate > orders.RequiredDate AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY categories.CategoryName",
            "SELECT customerDemographics.CustomerDesc, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN customerCustomerDemo ON customers.CustomerID = customerCustomerDemo.CustomerID JOIN customerDemographics ON customerCustomerDemo.CustomerTypeID = customerDemographics.CustomerTypeID GROUP BY customerDemographics.CustomerDesc ORDER BY avg_order_value DESC",
            "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS employee_name, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales, COUNT(DISTINCT orders.OrderID) AS total_orders FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID, employee_name ORDER BY total_sales DESC",
            "SELECT AVG(orders.Freight) AS avg_shipping_cost, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS avg_order_value FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT AVG(products.ReorderLevel) AS average_reorder_level FROM products WHERE products.UnitsInStock > 0",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductName ORDER BY total_sold DESC LIMIT 1",
            "SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE YEAR(orders.OrderDate) = 2023 AND MONTH(orders.OrderDate) = 6;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate > DATE_SUB(CURDATE(), INTERVAL 12 MONTH) GROUP BY products.ProductID, products.ProductName ORDER BY sales_volume DESC LIMIT 1",
            "SELECT shippers.CompanyName, COUNT(orders.OrderID) AS order_count FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE YEAR(orders.ShippedDate) = 2023 GROUP BY shippers.CompanyName",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY employees.EmployeeID",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_spending FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2022-10-24' AND '2023-10-24' GROUP BY customers.CustomerID ORDER BY total_spending DESC LIMIT 5",
            "SELECT AVG(CAST(orders.ShippedDate AS DATE) - CAST(orders.OrderDate AS DATE)) AS avg_fulfillment_time FROM orders WHERE YEAR(orders.OrderDate) = 2023 AND MONTH(orders.OrderDate) = 3",
            "SELECT SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / CAST(COUNT(orders.OrderID) AS DECIMAL) AS on_time_delivery_rate FROM orders WHERE YEAR(orders.OrderDate) = 2023",
            "SELECT products.ProductName FROM products WHERE products.UnitsInStock <= products.ReorderLevel",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Country = 'Germany' GROUP BY customers.CustomerID",
            "SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-01-01') AS retention_rate",
            "SELECT MONTH(orders.OrderDate) AS month, AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE YEAR(orders.OrderDate) = 2023 GROUP BY MONTH(orders.OrderDate)",
            "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY categories.CategoryName ORDER BY total_sales DESC LIMIT 1",
            "SELECT COUNT(products.ProductID) FROM products WHERE products.Discontinued = 1",
            "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID WHERE territories.RegionID = (SELECT RegionID FROM region WHERE RegionDescription = 'Western') GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1",
            "SELECT shippers.CompanyName, SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / CAST(COUNT(orders.OrderID) AS DECIMAL) AS on_time_delivery_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY shippers.CompanyName",
            "SELECT MONTH(orders.OrderDate) AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE YEAR(orders.OrderDate) = 2023 GROUP BY MONTH(orders.OrderDate)",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID ORDER BY total_quantity DESC LIMIT 1",
            "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.ShippedDate IS NOT NULL",
            "SELECT (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 3",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS month, AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY TO_CHAR(OrderDate, 'YYYY-MM')",
            "(SELECT COUNT(DISTINCT o2023.CustomerID) FROM orders o2023 WHERE o2023.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND o2023.CustomerID IN (SELECT DISTINCT o2022.CustomerID FROM orders o2022 WHERE o2022.OrderDate BETWEEN '2022-01-01' AND '2022-12-31')) / (SELECT COUNT(DISTINCT o2022.CustomerID) FROM orders o2022 WHERE o2022.OrderDate BETWEEN '2022-01-01' AND '2022-12-31')",
            "SELECT products.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.SupplierID",
            "SELECT TO_CHAR(orders.OrderDate, 'YYYY-Q') AS quarter, products.ProductID, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30' GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-Q'), products.ProductID",
            "SELECT COUNT(*) AS customer_count FROM (SELECT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.CustomerID HAVING COUNT(DISTINCT orders.OrderID) > 3) AS subquery",
            "SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipCountry",
            "SELECT CONCAT(EXTRACT(YEAR FROM OrderDate), '-Q', EXTRACT(QUARTER FROM OrderDate)) AS quarter, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY EXTRACT(YEAR FROM OrderDate), EXTRACT(QUARTER FROM OrderDate)",
            "SELECT shippers.CompanyName, (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / CAST(COUNT(orders.OrderID) AS FLOAT) * 100) AS on_time_delivery_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY shippers.CompanyName ORDER BY on_time_delivery_rate DESC LIMIT 1;",
            "SELECT employees.EmployeeID, (YEAR(CURDATE()) - YEAR(employees.HireDate)) AS years_of_service, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID",
            "SELECT products.ProductID, products.ReorderLevel - products.UnitsInStock AS deficit FROM products WHERE products.ReorderLevel > products.UnitsInStock ORDER BY deficit DESC LIMIT 1",
            "SELECT customerDemographics.CustomerDesc, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM customerCustomerDemo JOIN customers ON customerCustomerDemo.CustomerID = customers.CustomerID JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN customerDemographics ON customerCustomerDemo.CustomerTypeID = customerDemographics.CustomerTypeID GROUP BY customerDemographics.CustomerDesc ORDER BY total_revenue DESC",
            "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY total_sales DESC LIMIT 3",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-12-01' AND '2023-12-31';",
            "SELECT products.ProductID, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID ORDER BY sales_volume DESC LIMIT 1;",
            "SELECT COUNT(DISTINCT orders.CustomerID) AS frequent_customers FROM orders WHERE YEAR(orders.OrderDate) = 2023 GROUP BY orders.CustomerID HAVING COUNT(orders.OrderID) > 5;",
            "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31';",
            "SELECT SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE YEAR(orders.OrderDate) = 2023;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS total_discounts FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023;",
            "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY categories.CategoryName ORDER BY sales DESC LIMIT 1;",
            "SELECT COUNT(CASE WHEN orders.ShippedDate > orders.RequiredDate THEN orders.OrderID END) * 100.0 / COUNT(orders.OrderID) AS late_delivery_rate FROM orders WHERE EXTRACT(YEAR FROM orders.OrderDate) = 2023;",
            "SELECT AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE MONTH(orders.OrderDate) = 2 AND YEAR(orders.OrderDate) = 2023;",
            "SELECT orders.ShipCity, COUNT(orders.OrderID) AS order_volume FROM orders GROUP BY orders.ShipCity ORDER BY order_volume DESC LIMIT 1;",
            "SELECT MONTH(orders.OrderDate) AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE YEAR(orders.ShippedDate) = 2023 GROUP BY MONTH(orders.OrderDate);",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1 GROUP BY products.ProductID;",
            "SELECT region.RegionID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS region_performance FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID GROUP BY region.RegionID ORDER BY region_performance DESC;",
            "SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' THEN orders.CustomerID END) / COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' THEN orders.CustomerID END)) AS retention_change_rate FROM orders;",
            "SELECT suppliers.SupplierID, (SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID)) * 100 AS supplier_sales_percentage FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID;",
            "SELECT products.ProductID, DATE_TRUNC('month', orders.OrderDate) AS month, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductID, month ORDER BY month, sales_volume DESC LIMIT 1",
            "SELECT customers.CustomerID, COUNT(orders.OrderID) AS order_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY customers.CustomerID",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS average_fulfillment_time FROM orders GROUP BY ShipVia;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-12-31' GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 3",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS month, COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders GROUP BY DATE_TRUNC('month', orders.OrderDate)",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS purchase_volume FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.CustomerID ORDER BY purchase_volume DESC LIMIT 3",
            "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName",
            "SELECT region.RegionDescription, AVG(orders.Freight) AS average_shipping_cost FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID JOIN region ON customers.Region = region.RegionID GROUP BY region.RegionDescription ORDER BY average_shipping_cost",
            "SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-07-01' AND '2023-12-31' THEN orders.CustomerID END) * 100.0 / COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30' THEN orders.CustomerID END)) AS retention_rate_comparison FROM orders",
            "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY lead_time ASC;",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS month, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS average_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY month ORDER BY month",
            "SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN region ON customers.Region = region.RegionID GROUP BY region.RegionDescription",
            "SELECT od1.ProductID, od2.ProductID, COUNT(*) as frequency FROM [Order Details] od1 JOIN [Order Details] od2 ON od1.OrderID = od2.OrderID AND od1.ProductID <> od2.ProductID GROUP BY od1.ProductID, od2.ProductID ORDER BY frequency DESC",
            "SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN region ON customers.Region = region.RegionID GROUP BY region.RegionDescription",
            "SELECT shippers.CompanyName, COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID) AS satisfaction_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName ORDER BY satisfaction_rate DESC",
            "SELECT [Order Details].ProductID, AVG([Order Details].Discount) AS average_discount FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY average_discount DESC",
            "SELECT EXTRACT(HOUR FROM orders.OrderDate) AS hour, COUNT(orders.OrderID) as order_count FROM orders WHERE EXTRACT(DOW FROM orders.OrderDate) IN (1, 2, 3, 4, 5) GROUP BY hour ORDER BY order_count DESC",
            "SELECT SUM(CASE WHEN EXTRACT(MONTH FROM orders.OrderDate) = 12 AND EXTRACT(YEAR FROM orders.OrderDate) = 2023 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END) / NULLIF(SUM(CASE WHEN EXTRACT(MONTH FROM orders.OrderDate) = 12 AND EXTRACT(YEAR FROM orders.OrderDate) = 2022 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END), 0) AS sales_growth_december FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID",
            "SELECT COUNT(CASE WHEN products.Discontinued = 1 THEN 1 END) * 100.0 / COUNT(products.ProductID) AS discontinued_percentage FROM products",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
            "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID WHERE DATE_FORMAT(orders.OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m') GROUP BY products.ProductName ORDER BY total_sales DESC LIMIT 5",
            "SELECT employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate BETWEEN {start_date} AND {end_date} GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1",
            "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 6 MONTH) AND CURDATE()",
            "(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-01-01') AS retention_rate",
            "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID ORDER BY avg_lead_time ASC LIMIT 5",
            "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) AS turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID, products.ProductName",
            "SELECT AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE()",
            "SELECT orders.OrderID FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN territories ON customers.Region = territories.RegionID JOIN region ON territories.RegionID = region.RegionID GROUP BY region.RegionDescription",
            "SELECT suppliers.CompanyName, SUM([Order Details].Quantity) AS total_units FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID",
            "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM shippers JOIN orders ON shippers.ShipperID = orders.ShipVia GROUP BY shippers.CompanyName",
            "SELECT products.ProductName, products.ReorderLevel FROM products WHERE products.UnitsInStock < products.ReorderLevel",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS discount_effect FROM [Order Details]",
            "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS sales_growth FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY categories.CategoryName",
            "SELECT ShipVia, COUNT(orders.OrderID) * 100.0 / (SELECT COUNT(*) FROM orders) AS shipping_method_percentage FROM orders GROUP BY ShipVia",
            "SELECT YEAR(products.DiscontinuedDate) AS year, COUNT(*) AS discontinued_product_count FROM products WHERE products.Discontinued = 1 GROUP BY year",
            "SELECT customers.City, COUNT(customers.CustomerID) AS customer_count FROM customers GROUP BY customers.City ORDER BY customer_count DESC",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE)",
            "SELECT COUNT(orders.OrderID) AS on_time_orders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND MONTH(orders.ShippedDate) = MONTH(CURRENT_DATE) AND YEAR(orders.ShippedDate) = YEAR(CURRENT_DATE)",
            "SELECT customers.Region, AVG(order_totals.total_value) AS avg_order_value FROM (SELECT orders.OrderID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.OrderID) AS order_totals JOIN orders ON order_totals.OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.Region",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity_sold FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND CURRENT_DATE GROUP BY products.ProductID ORDER BY total_quantity_sold DESC LIMIT 5",
            "SELECT COUNT(DISTINCT orders.CustomerID) AS returning_customers FROM orders WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) AND orders.CustomerID IN (SELECT CustomerID FROM orders WHERE YEAR(OrderDate) < YEAR(CURRENT_DATE))",
            "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) - 1 AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName ORDER BY total_sales DESC LIMIT 1",
            "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.ShippedDate IS NOT NULL",
            "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC LIMIT 1",
            "SELECT shippers.CompanyName, (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 1.0 / COUNT(orders.OrderID)) AS on_time_delivery_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
            "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM products JOIN categories ON products.CategoryID = categories.CategoryID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY categories.CategoryName",
            "SELECT customers.Country, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.Country",
            "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND CURRENT_DATE GROUP BY categories.CategoryName",
            "SELECT customers.CustomerID, customers.CompanyName, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS total_purchase_volume FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY customers.CustomerID, customers.CompanyName ORDER BY total_purchase_volume DESC LIMIT 3",
            "SELECT employees.Region, AVG(order_employee_sales.total_sales) AS avg_sales FROM (SELECT orders.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.EmployeeID) AS order_employee_sales JOIN employees ON order_employee_sales.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.RegionID",
            "SELECT products.ProductName, products.UnitsInStock, products.ReorderLevel FROM products WHERE products.UnitsInStock < products.ReorderLevel",
            "SELECT customers.Country, COUNT(orders.OrderID) AS number_of_orders FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY customers.Country",
            "SELECT CORR(order_values.total_order_value, orders.Freight) AS correlation FROM (SELECT orders.OrderID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.OrderID) AS order_values JOIN orders ON order_values.OrderID = orders.OrderID;",
            "SELECT categories.CategoryName, AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName",
            "SELECT AVG(order_value) AS avg_order_value FROM (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY orders.CustomerID) AS order_values",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= '2023-02-01' AND orders.OrderDate <= '2023-02-28';",
            "SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY products.ProductID ORDER BY total_quantity_sold DESC;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY employees.EmployeeID;",
            "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31';",
            "(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-01-01') AS customer_retention_rate;",
            "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY products.SupplierID;",
            "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31';",
            "SELECT AVG(orders.Freight) AS shipping_cost_per_order FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30';",
            "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-04-30';",
            "SELECT shippers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_shipping_value FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY shippers.CompanyName ORDER BY total_shipping_value DESC;",
            "SELECT products.ProductID, COUNT(orders.OrderID) AS reorder_count FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE [Order Details].Quantity >= products.ReorderLevel AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID ORDER BY reorder_count DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS order_month, COUNT(DISTINCT orders.CustomerID) AS new_customers FROM orders LEFT JOIN (SELECT DISTINCT CustomerID FROM orders WHERE OrderDate < '2023-01-01') AS previous_customers ON orders.CustomerID = previous_customers.CustomerID WHERE previous_customers.CustomerID IS NULL AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30' GROUP BY order_month;",
            "SELECT products.ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-04-30' GROUP BY products.ProductID ORDER BY revenue DESC LIMIT 5;",
            "SELECT employees.EmployeeID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID ORDER BY employee_sales DESC;",
            "SELECT COUNT(DISTINCT orders.OrderID) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' AND [Order Details].Discount > 0;",
            "SELECT customers.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.Region ORDER BY total_sales DESC LIMIT 1;",
            "SELECT categories.CategoryID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_days FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-05-01' AND '2023-05-31' AND orders.ShippedDate IS NOT NULL GROUP BY categories.CategoryID;",
            "SELECT 100.0 * COUNT(DISTINCT CASE WHEN products.Discontinued = 1 THEN [Order Details].ProductID END) / NULLIF(COUNT(DISTINCT [Order Details].ProductID), 0) AS discontinued_product_sales_percentage FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31';",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY month",
            "SELECT COUNT(orders.OrderID) AS on_time_deliveries FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND YEAR(orders.OrderDate) = 2023",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS fulfillment_time FROM orders GROUP BY month",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID ORDER BY sales DESC LIMIT 1",
            "SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-01-01') AS retention_rate",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month",
            "SELECT orders.ShipCity, COUNT(orders.OrderID) AS order_count FROM orders GROUP BY orders.ShipCity ORDER BY order_count DESC LIMIT 1",
            "SELECT COUNT(products.ProductID) AS discontinued_in_stock FROM products WHERE products.Discontinued = 1 AND products.UnitsInStock > 0",
            "SELECT orders.ShipVia, COUNT(orders.OrderID) AS order_count FROM orders GROUP BY orders.ShipVia",
            "SELECT customerDemographics.CustomerDesc, COUNT(customerCustomerDemo.CustomerID) AS count FROM customerCustomerDemo JOIN customerDemographics ON customerCustomerDemo.CustomerTypeID = customerDemographics.CustomerTypeID GROUP BY customerDemographics.CustomerDesc ORDER BY count DESC LIMIT 1",
            "SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID GROUP BY region.RegionDescription ORDER BY sales DESC LIMIT 1",
            "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023",
            "SELECT suppliers.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS supplier_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY supplier_sales DESC LIMIT 1",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders GROUP BY month",
            "SELECT products.ProductID, products.ProductName, products.UnitsOnOrder FROM products ORDER BY products.UnitsOnOrder DESC LIMIT 1",
            "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE QUARTER(orders.OrderDate) = QUARTER(DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY products.ProductID ORDER BY revenue DESC LIMIT 1",
            "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName ORDER BY sales DESC LIMIT 5",
            "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL '1' MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL '1' MONTH);",
            "SELECT shippers.CompanyName, AVG(orders.Freight) AS average_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
            "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) AS inventory_turnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY inventory_turnover DESC LIMIT 1",
            "SELECT COUNT(*) AS product_count FROM products WHERE products.UnitsInStock < products.ReorderLevel",
            "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_fulfillment_time FROM orders WHERE MONTH(orders.OrderDate) = 1 AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE())",
            "SELECT [Order Details].Discount, COUNT(*) AS count FROM [Order Details] GROUP BY [Order Details].Discount ORDER BY count DESC LIMIT 1",
            "SELECT COUNT(DISTINCT orders.CustomerID) AS returning_customers FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30' AND orders.CustomerID IN (SELECT DISTINCT orders.CustomerID FROM orders WHERE orders.OrderDate < '2023-01-01')",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS average_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE() GROUP BY month ORDER BY month",
            "SELECT employees.EmployeeID, YEAR(CURRENT_DATE) - YEAR(employees.BirthDate) AS Age, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID",
            "SELECT regions.RegionDescription, AVG(total_sales) AS average_sales FROM (SELECT regions.RegionDescription, employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN regions ON territories.RegionID = regions.RegionID GROUP BY regions.RegionDescription, employees.EmployeeID) AS employee_sales_per_region GROUP BY regions.RegionDescription",
            "SELECT shippers.CompanyName, COUNT(orders.OrderID) AS order_count FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
            "SELECT products.ProductName, product_sales.current_month_sales - COALESCE(previous_month_sales.previous_month_sales, 0) AS sales_increase FROM (SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS current_month_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE()) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE()) GROUP BY [Order Details].ProductID) AS product_sales LEFT JOIN (SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS previous_month_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE()) - 1 AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE()) GROUP BY [Order Details].ProductID) AS previous_month_sales ON product_sales.ProductID = previous_month_sales.ProductID JOIN products ON product_sales.ProductID = products.ProductID ORDER BY sales_increase DESC LIMIT 1",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-12-01' AND '2023-12-31'",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY products.ProductName ORDER BY total_quantity DESC LIMIT 1",
            "SELECT COUNT(DISTINCT CustomerID) AS customer_count FROM (SELECT CustomerID, COUNT(DISTINCT EXTRACT(MONTH FROM OrderDate)) as months_ordered FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY CustomerID) AS subquery WHERE months_ordered > 2;",
            "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'",
            "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName ORDER BY total_sales DESC LIMIT 3",
            "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID WHERE EXISTS (SELECT 1 FROM orders WHERE [Order Details].OrderID = orders.OrderID AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') GROUP BY categories.CategoryName ORDER BY turnover_ratio DESC",
            "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY shippers.CompanyName",
            "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY suppliers.SupplierID ORDER BY average_lead_time ASC LIMIT 1",
            "SELECT ShipCity, COUNT(OrderID) AS order_count FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY ShipCity ORDER BY order_count DESC LIMIT 1",
            "SELECT customers.CustomerID, customers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY lifetime_value DESC LIMIT 5",
            "SELECT 'Q1' AS quarter, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' UNION ALL SELECT 'Q2', SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30'",
            "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0",
            "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY suppliers.SupplierID, suppliers.CompanyName ORDER BY total_sales DESC",
            "SELECT ShipVia, COUNT(OrderID) AS shipping_count FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY ShipVia ORDER BY shipping_count DESC",
            "SELECT employees.EmployeeID, employees.FirstName, employees.LastName FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' WHERE orders.OrderID IS NULL",
            "SELECT products.ProductName, SUM((UnitPrice - (UnitPrice * Discount)) * Quantity) AS profit FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID ORDER BY profit DESC LIMIT 3",
            "SELECT EXTRACT(MONTH FROM orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month ORDER BY avg_order_value DESC LIMIT 1",
            "SELECT COUNT(OrderID) AS late_orders FROM orders WHERE orders.ShippedDate > orders.RequiredDate AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31';",
            "SELECT CustomerID, COUNT(OrderID) AS order_count FROM orders WHERE YEAR(OrderDate) = 2022 GROUP BY CustomerID",
            "SELECT ProductID, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate BETWEEN '2023-07-01' AND '2023-09-30') GROUP BY ProductID ORDER BY total_quantity DESC LIMIT 1",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-07-31' GROUP BY products.ProductID, products.ProductName ORDER BY total_sold DESC LIMIT 1",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month",
            "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE DATE_FORMAT(orders.OrderDate, '%Y-%m') = '2023-05'",
            "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE DATE_FORMAT(orders.OrderDate, '%Y-%m') = '2023-06' GROUP BY categories.CategoryName",
            "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC LIMIT 1",
            "SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31') AS Q1_customers, (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30') AS Q2_customers",
            "SELECT orders.ShipCity, COUNT(orders.OrderID) AS num_orders FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY orders.ShipCity ORDER BY num_orders DESC LIMIT 1",
            "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1 GROUP BY products.ProductName ORDER BY total_sales DESC LIMIT 1",
            "SELECT shippers.CompanyName, COUNT(orders.OrderID) AS num_deliveries FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY shippers.CompanyName ORDER BY num_deliveries DESC LIMIT 1",
            "SELECT AVG(orders.Freight) AS avg_international_shipping_cost FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND customers.Country != orders.ShipCountry",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month",
            "SELECT customers.CustomerID, DATE_TRUNC('month', orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID, month ORDER BY order_value DESC LIMIT 3",
            "SELECT categories.CategoryName, COUNT(CASE WHEN products.UnitsInStock = 0 THEN products.ProductID END) * 1.0 / COUNT(products.ProductID) AS out_of_stock_percentage FROM products JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID ORDER BY out_of_stock_percentage DESC LIMIT 1",
            "SELECT region.RegionDescription, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID JOIN region ON customers.Region = region.RegionID GROUP BY region.RegionDescription",
            "SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employeeTerritories ON orders.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY territories.TerritoryDescription ORDER BY total_sales DESC LIMIT 5",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT customers.CustomerID, COUNT(orders.OrderID) AS order_count FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID ORDER BY order_count DESC LIMIT 1",
            "SELECT categories.CategoryName, SUM([Order Details].Quantity) AS products_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY categories.CategoryName",
            "SELECT suppliers.SupplierID, suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC LIMIT 1",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID",
            "SELECT COUNT(orders.OrderID) AS on_time_orders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND orders.ShippedDate BETWEEN '2023-08-01' AND '2023-08-31'",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID",
            "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName ORDER BY avg_shipping_cost ASC LIMIT 1",
            "SELECT COUNT(employees.EmployeeID) FROM employees LEFT JOIN (SELECT orders.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY orders.EmployeeID) AS sales ON employees.EmployeeID = sales.EmployeeID WHERE sales.total_sales > 100000",
            "(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-01-01') AS customer_retention_rate",
            "SELECT COUNT(products.ProductID) AS discontinued_products_count, SUM(products.UnitsInStock * products.UnitPrice) AS total_inventory_value FROM products WHERE products.Discontinued = 1",
            "SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.ShipCountry",
            "SELECT products.ProductName FROM products WHERE products.UnitsInStock < products.ReorderLevel",
            "SELECT territories.TerritoryDescription, COUNT(orders.OrderID) AS order_count FROM orders JOIN employeeTerritories ON orders.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryDescription",
            "SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID ORDER BY total_quantity DESC",
            "SELECT customerDemographics.CustomerDesc, COUNT(customers.CustomerID) AS customer_count, COUNT(customers.CustomerID) * 1.0 / (SELECT COUNT(*) FROM customers) AS proportion FROM customerCustomerDemo JOIN customers ON customerCustomerDemo.CustomerID = customers.CustomerID JOIN customerDemographics ON customerCustomerDemo.CustomerTypeID = customerDemographics.CustomerTypeID GROUP BY customerDemographics.CustomerDesc",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE MONTH(orders.OrderDate) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURDATE() - INTERVAL 1 MONTH) GROUP BY products.ProductName ORDER BY sales_volume DESC",
            "SELECT COUNT(orders.OrderID) AS on_time_orders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND YEAR(orders.OrderDate) = 2023",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID",
            "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID ORDER BY turnover_ratio DESC LIMIT 1",
            "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
            "SELECT COUNT(DISTINCT CustomerID) FROM (SELECT CustomerID, COUNT(DISTINCT EXTRACT(MONTH FROM OrderDate)) AS months_count FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY CustomerID) AS monthly_orders WHERE months_count > 1",
            "SELECT categories.CategoryName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName",
            "SELECT COUNT(DISTINCT o.CustomerID) AS retained_customers FROM orders o WHERE o.CustomerID IN (SELECT CustomerID FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-03-31') AND o.OrderDate BETWEEN '2023-04-01' AND '2023-06-30'",
            "SELECT categories.CategoryName, COUNT(*) * 100.0 / NULLIF(COUNT(products.ProductID), 0) AS discontinued_rate FROM products JOIN categories ON products.CategoryID = categories.CategoryID WHERE products.Discontinued = 1 GROUP BY categories.CategoryName",
            "SELECT e.EmployeeID, (SELECT COUNT(DISTINCT o.CustomerID) FROM orders o WHERE o.EmployeeID = e.EmployeeID AND o.OrderDate BETWEEN '2023-01-01' AND '2023-06-30') / NULLIF((SELECT COUNT(DISTINCT o.CustomerID) FROM orders o WHERE o.EmployeeID = e.EmployeeID AND o.OrderDate < '2023-01-01'), 0) AS retention_rate FROM employees e ORDER BY retention_rate DESC LIMIT 1;",
            "SELECT orders.OrderID, orders.Freight, DATEDIFF(orders.ShippedDate, orders.RequiredDate) AS delivery_time_diff FROM orders ORDER BY delivery_time_diff DESC",
            "SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID GROUP BY region.RegionDescription",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY month",
            "SELECT COUNT(orders.OrderID) FROM orders WHERE orders.ShippedDate > orders.RequiredDate",
            "SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS territory_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryDescription ORDER BY territory_sales DESC",
            "SELECT customerDemographics.CustomerDesc, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN customerCustomerDemo ON customers.CustomerID = customerCustomerDemo.CustomerID JOIN customerDemographics ON customerCustomerDemo.CustomerTypeID = customerDemographics.CustomerTypeID GROUP BY customerDemographics.CustomerDesc",
            "SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = 1 AND YEAR(orders.OrderDate) = 2023 GROUP BY products.ProductID ORDER BY total_quantity DESC LIMIT 1;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY employees.EmployeeID;",
            "SELECT AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) AND MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) - 1;",
            "SELECT customers.City, COUNT(DISTINCT customers.CustomerID) AS unique_customers FROM customers GROUP BY customers.City ORDER BY unique_customers DESC LIMIT 1;",
            "SELECT (COUNT(DISTINCT orders.CustomerID) - COUNT(DISTINCT single_orders.CustomerID)) / COUNT(DISTINCT orders.CustomerID) * 100 AS returning_customer_percentage FROM orders LEFT JOIN (SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) = 1) single_orders ON orders.CustomerID = single_orders.CustomerID WHERE YEAR(orders.OrderDate) = 2023;",
            "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = 3 AND YEAR(orders.OrderDate) = 2023;",
            "SELECT categories.CategoryID, COUNT(products.ProductID) AS discontinued_count FROM products JOIN categories ON products.CategoryID = categories.CategoryID WHERE products.Discontinued = 1 GROUP BY categories.CategoryID ORDER BY discontinued_count DESC LIMIT 1;",
            "SELECT COUNT(DISTINCT employeeTerritories.EmployeeID) AS employee_count FROM employeeTerritories JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID WHERE region.RegionDescription = 'Western';",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Country = 'UK';",
            "SELECT COUNT(products.ProductID) AS low_stock_products FROM products WHERE products.UnitsInStock < products.ReorderLevel;",
            "SELECT MONTH(orders.OrderDate) AS month, SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID) AS on_time_rate FROM orders WHERE YEAR(orders.OrderDate) = 2023 GROUP BY MONTH(orders.OrderDate);",
            "SELECT employees.EmployeeID, territories.TerritoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY employees.EmployeeID, territories.TerritoryID ORDER BY total_sales DESC LIMIT 1;",
            "SELECT products.ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY products.ProductID ORDER BY revenue DESC LIMIT 5;",
            "SELECT shippers.CompanyName, COUNT(orders.OrderID) AS order_count FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE MONTH(orders.OrderDate) = 3 AND YEAR(orders.OrderDate) = 2023 GROUP BY shippers.CompanyName ORDER BY order_count DESC LIMIT 1;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE MONTH(orders.OrderDate) = 3 AND YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1"
        ],
        "reviews": [
            "The SQL query is correct. It calculates the total sales revenue for the year 2023 by summing the revenue from each order detail after applying the discount and ensuring the order date is within the specified range.",
            "The query correctly calculates the average order value for January 2023 by summing the total value of all order details in January and dividing by the number of distinct orders. The date filter is set correctly for January.",
            "The query correctly calculates the customer lifetime value by aggregating order details related to each customer, groups results by CustomerID, and orders by lifetime value in descending order to find the customer with the highest value. The use of LIMIT 1 is appropriate to return the top result.",
            "The original query missed joining the 'orders' table to filter by OrderDate. The corrected query includes a join with the orders table to ensure OrderDate is used in the WHERE clause.",
            "The SQL query correctly retrieves the sales revenue generated by each employee for Q1 2023 by joining the necessary tables and using the correct date filter with appropriate aggregation.",
            "The query is almost correct. The issue is using DATE_SUB(CURDATE(), INTERVAL 6 MONTH) without ensuring compatibility with ANSI SQL. Instead, using a common approach for subtracting 6 months in ANSI SQL: WHERE orders.OrderDate >= ADD_MONTHS(CURRENT_DATE, -6)",
            "The provided SQL query correctly calculates the customer retention rate by dividing the number of distinct customers in 2023 by the total number of distinct customers before 2023.",
            "The original query was missing a JOIN between 'orders' and '[Order Details]'. This has been corrected to calculate the supplier lead time accurately.",
            "The original query missed joining the [Order Details] table with the orders table, which is required to filter by OrderDate. The corrected query includes this JOIN to accurately calculate the inventory turnover ratio for the specified date range.",
            "The initial SQL query is correct. It calculates the average shipping cost per order for orders placed between April 1, 2023, and April 30, 2023, using the Freight column from the orders table.",
            "The original SQL query had a syntax error. The WHERE clause should be replaced with a CASE statement to filter the COUNT. Additionally, to express the result as a percentage, multiply the number of on-time deliveries by 100 and divide by the total.",
            "The SQL query is correct and accurately answers the business question. It selects products where the UnitsInStock is less than the ReorderLevel, correctly identifying products that need to be reordered.",
            "Corrected the query by adding the proper join between 'orders' and '[Order Details]'. Ensured grouping by suppliers' company names.",
            "The query counts all unique customers for each month, but it doesn't explicitly identify returning customers. To accurately determine returning customers, additional logic is needed to identify if a customer has placed an order in a prior month. This could involve using a subquery or self-join to check for previous orders by the same customer before the current month.",
            "The query is correct. It joins the 'orders' and 'customers' tables, filters for orders in 2023, groups by city, counts the orders, and returns the city with the most orders.",
            "The original SQL query is correct for the given business question. The query properly joins the necessary tables, calculates the revenue for each product category, groups the results by category, and returns the category with the highest revenue.",
            "The query is correct and accurately retrieves the number of orders placed in Q2 2023 that used expedited shipping.",
            "The original SQL query was missing a JOIN with the 'orders' table, which is necessary to filter by OrderDate. The corrected query includes this join.",
            "The query is correct. It calculates total sales for each employee in July 2023 and returns the employee with the highest sales.",
            "The original query lacked a WHERE clause to filter orders from the past year. Adding a condition for the date range ensures that only the relevant data is analyzed, providing a correct trend analysis for order fulfillment time.",
            "The query correctly uses SUM and GROUP BY to calculate the total sales for each month. However, the GROUP BY clause must match the SELECT alias 'month' exactly. Adding DATE_FORMAT(orders.OrderDate, '%Y-%m') to the GROUP BY ensures it matches the SELECT clause.",
            "The query needs to filter orders for the last year. I've added a join with the 'orders' table and a WHERE clause to restrict to the last year.",
            "The query is correct. It calculates the lifetime revenue for each customer by joining the necessary tables and sums the revenue for each customer as required.",
            "The provided SQL query is correct according to the ANSI SQL standard, except for the use of 'DATE_FORMAT', which is not standard ANSI SQL. Use 'TO_CHAR' for standard compliance or any equivalent function specific to the SQL dialect being used.",
            "There was a syntax error in the original query. The COUNT function cannot have a WHERE clause inside it. Instead, use CASE WHEN to count orders delivered on or before the required date.",
            "The SQL query correctly calculates the total sales for each employee for the year 2023 and orders them in descending order of sales performance. The use of SUM, JOIN, WHERE, and GROUP BY is appropriate for the business question, with no syntax errors.",
            "The original query groups by territories.TerritoryID but selects territories.TerritoryDescription without aggregating or grouping properly, which could cause errors or unexpected results. It has been corrected to group by territories.TerritoryDescription.",
            "Corrected the computation of quarters and adjusted the handling of the date ranges and division by zero. Added handling of NULLIF to prevent division by zero.",
            "The original query does not aggregate by month. I added year and month extraction from the OrderDate to group by both year and month to get monthly averages.",
            "The original query had an incorrect join between orders and products. The corrected query ensures the join is through the [Order Details] table.",
            "Corrected SQL query to include a JOIN with orders table for accessing OrderDate column. GROUP BY changed to categories.CategoryName.",
            "The original query attempts to calculate the average order value directly in the aggregation function, which is incorrect. To resolve this, create a subquery to calculate the total order value for each demographic, then calculate the average of those values in the outer query.",
            "The provided query was missing a WHERE clause to filter orders to the last two years. I've added a condition to restrict records within this period using DATE_SUB with INTERVAL 2 YEAR.",
            "The SQL query correctly identifies pairs of products that are bought together in the same order. It joins the 'Order Details' table to itself on matching OrderIDs while ensuring different ProductIDs are selected. The grouped result is ordered by frequency to show the most frequently bought-together products, with a limit of 10. The query is correctly structured for the intended business question.",
            "The original query is mostly correct but lacks a filter for discontinued and active products. I've added a WHERE clause to ensure both discontinued and active products are included. The GROUP BY clause should include ProductName and Discontinued to correctly aggregate sales by these categories.",
            "The original query is mostly correct, but the GROUP BY clause should use territories.TerritoryDescription instead of territories.TerritoryID to match the selected field. This ensures that the results are grouped by territory description. The rest of the query correctly sums the revenue per territory.",
            "The query correctly calculates the monthly average order fulfillment times by grouping the orders by month and averaging the difference between ShippedDate and OrderDate. However, it doesn't address the correlation with customer satisfaction, as there is no data or table specified for customer satisfaction within the provided schema. Additional information or data would be required to assess correlation with customer satisfaction.",
            "The original query is mostly correct. However, it should GROUP BY shippers.CompanyName as this is what is being selected alongside the aggregated value.",
            "The original query used an IF function, which is not standard in ANSI SQL. Replaced it with CASE WHEN. Additionally, products.ProductName should be included in the GROUP BY clause to ensure correct aggregation at the product level.",
            "The original query is almost correct but misses grouping by 'territories.TerritoryDescription'. This has been added to ensure correct aggregation.",
            "The SQL query is correct and follows the schema definitions to calculate the total sales revenue for the year 2023.",
            "The original query was missing the join with the orders table to access the OrderDate. It also lacked the condition to ensure the year is considered, in case of month overlap across years.",
            "The original query lacks a filter to ensure the year matches the current year. Added a condition YEAR(orders.OrderDate) = YEAR(CURDATE()) to limit the results to the current year.",
            "The query is correct. It calculates the average order value for each month in 2022 by grouping orders by month and using the correct formula for average order value.",
            "The original query is mostly correct. However, the use of 'QUARTER(orders.OrderDate)' and 'YEAR(orders.OrderDate)' might not be supported in all SQL implementations. It's better to replace them with 'EXTRACT(QUARTER FROM orders.OrderDate)' and 'EXTRACT(YEAR FROM orders.OrderDate)' for broader compatibility.",
            "The query correctly calculates the customer lifetime value by summing the revenue for each customer's orders and joining the relevant tables. The GROUP BY clause is appropriately used to aggregate per customer.",
            "The original query attempts to select customer IDs but does not count them. Additionally, the WHERE clause for filtering the order year should be placed before the GROUP BY. The corrected query counts the number of customers who placed more than five orders last year.",
            "The query uses the correct formula to calculate average fulfillment time, but the date function was slightly incorrect. 'CURDATE() - INTERVAL 6 MONTH' should be 'DATE_SUB(CURDATE(), INTERVAL 6 MONTH)' to correctly calculate the date six months prior to the current date.",
            "The original query is missing a join between [Order Details] and orders. Adding a join on orders.OrderID will correctly filter the records by date.",
            "The SQL query is correct. It properly calculates the average lead time for each supplier based on the difference between the shipped date and the order date, and orders the results to show the suppliers with the fastest lead time first.",
            "The SQL query is correct; it joins 'orders' with 'shippers' on 'ShipVia' and groups by 'CompanyName' to calculate the average freight cost per shipping company.",
            "The query is incorrect because it assumes there's a 'regions' table directly linked to the 'customers' table using 'customers.Region', which the provided schema does not support. The customers table does not have a 'Region' column, and the regions table is not directly included in the schema. Therefore, the query might need to be adjusted to aggregate by another column that can symbolize geographical areas or to include a valid association between the appropriate tables for a realistic business context.",
            "The query was missing a join to the 'orders' table to access 'OrderDate', and it didn't specify the correct year.",
            "The SQL query is correct. It retrieves the product names where the units in stock are less than or equal to the reorder level. The logic aligns with the business question.",
            "The original SQL query had an incorrect use of COUNT(). The WHERE clause should be replaced with a CASE statement inside COUNT() to correctly filter the orders. Also, I adjusted the date range to properly capture the last three months using DATE_TRUNC to start from the beginning of the current month.",
            "The SQL query is correct. It accurately calculates the total sales for each territory by joining the necessary tables and using the correct formula. The GROUP BY and ORDER BY clauses are properly used to aggregate and sort the results by territory description and total sales.",
            "The original query is mostly correct. It selects the supplier's company name and calculates their total sales for the current year. The query correctly joins the necessary tables: [Order Details], products, suppliers, and orders. It filters orders to the current year using YEAR(orders.OrderDate) = YEAR(CURDATE()). However, to answer the question, which supplier contributed the most, a LIMIT 1 clause should be added to ensure only the top supplier is returned.",
            "The query is correct. It accurately calculates the average discount for orders placed in 2022 by joining the 'Order Details' and 'orders' tables and filtering on the year 2022.",
            "The original query does not address the question of counting discontinued products. The corrected query includes both counting the number of discontinued products and calculating the sales performance by summing the discounted sales.",
            "The query correctly finds the day of the week with the highest number of orders by grouping by the day name of the OrderDate and ordering the results by total orders in descending order, then limiting to the top result. It is accurate and follows ANSI SQL standards.",
            "The SQL query is correct and matches the business question. The calculation of the average order value uses the correct formula and filters the orders placed in 2023.",
            "The original query is missing the join with the 'orders' table to filter the correct 'OrderDate'. The corrected query includes the necessary join with 'orders' to apply the date filter correctly.",
            "The query is mostly correct, but MONTH() and YEAR() functions are not standard ANSI SQL. They are replaced with EXTRACT(). The rest of the query structure is valid.",
            "The query is correct. It calculates the average fulfillment time for orders placed in Q1 2023 by checking if the order date is in the first three months and the year is 2023.",
            "The query essentially calculates the ratio between customers with orders in the specified date range and those who ordered prior to it. However, it misses handling division by zero. Additionally, to represent the ratio correctly, the outer query should select these as columns and possibly multiply by 100 to provide a percentage. To enhance readability and prevent division errors, consider using a CASE statement.",
            "The original query incorrectly joins 'orders' with 'products' using 'OrderID' and 'ProductID'. The correction is to join using '[Order Details]' to connect 'orders' and 'products'. The corrected query accurately calculates the shortest average lead time for deliveries.",
            "The original query is missing a join between [Order Details] and orders to filter by the OrderDate. The corrected query includes this join.",
            "The query is correct. It accurately calculates the average shipping cost per order for each month in 2023, then orders the results to find the month with the lowest average shipping cost.",
            "Corrected the COUNT function by adding a SUM with a CASE statement for conditional counting.",
            "The original query was missing the join between [Order Details] and orders to filter by OrderDate. I added the necessary join to ensure the date filtering works correctly.",
            "The original query does not account for determining the fastest shipper based on delivery time. The corrected query calculates the minimum shipping time for each shipper and selects the company with the fastest average delivery time, while also filtering for the year 2023.",
            "The original query was mostly correct but the order of JOIN statements was slightly different than typically preferred for readability. Functionally, the query is correct and will return the most popular product category based on unique customers.",
            "The SQL query is correct. It retrieves the ProductID, ProductName, and UnitsInStock of products that are not discontinued, orders them by UnitsInStock in ascending order, and limits the result to the top 5 products with the lowest inventory levels.",
            "The query correctly calculates total sales for each supplier and orders by total sales in descending order, limiting to the top supplier, which answers the question accurately.",
            "The query uses `MONTH()` and `YEAR()` functions which are not part of ANSI SQL. They should be replaced with `EXTRACT(MONTH FROM ...)` and `EXTRACT(YEAR FROM ...)`.",
            "The query incorrectly checks the year of the order date instead of the shipped date. It should be checking YEAR(orders.ShippedDate).",
            "The original query is mostly correct, but it unnecessarily joins with the 'employees' table when counting distinct employees by their IDs. The query is simplified by using only the 'employeeTerritories' and 'territories' tables, as 'RegionID' is obtained from 'territories'.",
            "The query was mostly correct. The only change needed is counting orders.OrderID instead of [Order Details].OrderID, since both are related but the latter resides in the 'Order Details' table, which wasn't necessary for this grouping by customer type.",
            "The SQL query is correct. It correctly calculates the average order value for each month in 2023 by grouping the data by month and using the sum of the order values divided by the distinct order count.",
            "The SQL query correctly calculates the total quantity ordered per product category, which aligns with the business question of comparing product performance across categories. The query joins the [Order Details], products, and categories tables appropriately and groups by CategoryName to achieve the desired metric.",
            "The query correctly calculates monthly total sales for 2023 using the date formatting and aggregation functions. The JOIN between `[Order Details]` and `orders` is performed properly, and the WHERE clause filters for the correct year. The GROUP BY clause groups results by the formatted month, 'month'.",
            "The SQL query correctly retrieves the products with the highest sales in terms of quantity. It joins the [Order Details] and products tables on ProductID, groups by ProductName, sums the quantities, and orders the results in descending order of total_quantity. The query is accurate and does not require adjustments.",
            "The SQL query correctly calculates the average order value by customer for the past year by joining the necessary tables and filtering by the year in the 'orders' table.",
            "The SQL query is correct. It calculates the total sales per employee and orders them in descending order to identify the top-performing employees.",
            "The query is correct. It correctly calculates the average shipping cost per order by each shipper by joining the 'orders' table with the 'shippers' table on the 'ShipVia' field and grouping by the shipper's company name.",
            "The original SQL query has a syntax issue with COUNT and condition. It should use a SUM with a CASE statement to count only those orders where ShippedDate is on or before RequiredDate, compared to the total order count for each month.",
            "The original query incorrectly joins the 'orders' and 'products' tables directly using 'OrderID' and 'ProductID', which is not correct as per the given schema. The correct join should be between 'orders' and '[Order Details]' using 'OrderID', and between '[Order Details]' and 'products' using 'ProductID'.",
            "The SQL query correctly calculates the customer lifetime value for customers in the USA by joining the necessary tables and filtering for the USA. The query groups the results by CustomerID, which is appropriate for this calculation. No corrections needed.",
            "The original query is mostly correct, but to prevent division by zero, it's better to use NULLIF to handle cases where UnitsInStock could be zero.",
            "The query correctly calculates the number of orders fulfilled within 7 days by using the DATEDIFF function to measure the difference between the 'ShippedDate' and 'OrderDate'. The condition in the WHERE clause appropriately filters orders fulfilled within 7 days.",
            "The SQL query is correct. It selects the category name and calculates total sales by joining the relevant tables and grouping by category name, ordering the results by total sales in descending order.",
            "The date range for the last quarter should be updated to reflect October 1 to December 31 for the year 2023.",
            "The SQL query correctly calculates the total freight cost for each shipping company by joining 'orders' and 'shippers' on the ShipVia column and then grouping by the CompanyName of the shippers. No changes are needed.",
            "The query is correct. It correctly calculates the total number of distinct orders for each customer in the last year and filters those with more than three purchases.",
            "The query is correct but missing the LIMIT 1 clause to return only the most frequently ordered product.",
            "The SQL query correctly finds the number of orders where the shipped date is later than the required date, indicating delays. No changes needed.",
            "Corrected the joins to use employeeTerritories and territories tables correctly for region analysis.",
            "The SQL query is correct. It selects the EmployeeID and counts distinct territories for each employee, grouping by EmployeeID and filtering with HAVING to get those with more than one territory.",
            "The query correctly calculates the average discount per order by joining the 'Order Details' with 'orders' and applying an AVG function on the Discount field, grouped by OrderID. The query is correct as per the question.",
            "The original query attempted to use `AVG(SUM(...))`, which is incorrect. We need to calculate the customer lifetime value for each customer first, then find the average of these values for each country. The corrected query performs a subquery to calculate the lifetime value for each customer and then averages these values by country.",
            "The query correctly calculates the total sales revenue generated by each employee in September 2023, and returns the employee with the highest sales. The date range was updated to represent the last month if we assume 'now' is October 2023.",
            "The query is correct and efficiently answers the question by aggregating the total quantity of each product sold in the specified date range, ordering by total quantity in descending order, and limiting the result to the top product.",
            "The SQL query is correct for calculating the average time taken to fulfill orders for the year 2023. It accurately uses the `DATEDIFF` function to calculate the difference between the `ShippedDate` and `OrderDate` and averages these differences for orders placed in 2023.",
            "The original query did not have the correct join order. The join with [Order Details] should come before joining with products. This has been corrected in the revised query.",
            "The query correctly calculates the total number of orders placed by each customer in 2023. It joins the 'orders' and 'customers' tables on 'CustomerID', filters the orders by the specified date range, and groups the results by 'CustomerID' to count the orders.",
            "The query is correct. It counts the orders that were shipped on or before their required date and placed in the first quarter of 2023.",
            "The original query was missing a join on the 'orders' table to access the 'OrderDate' field, which is required to filter data for 2023. The corrected query adds this necessary JOIN clause.",
            "The initial query was missing a join with the shippers table to get the company name. The corrected query includes a join between orders and shippers to select the company name with the least average shipping cost per order.",
            "The SQL query is correct. It accurately calculates the total freight cost for the year 2023 by summing the 'Freight' column from the 'orders' table, filtering for orders placed between January 1st, 2023 and December 31st, 2023.",
            "The query correctly identifies the region with the highest number of sales in 2023. It joins the required tables to relate orders to regions through employees and territories. The sales are counted per region, and results are ordered in descending order, correctly limiting to the top result.",
            "The SQL query is correct and accurately answers the business question. It correctly counts employees hired between the specified dates in 2023.",
            "The SQL query correctly calculates the performance of discontinued products by summing up the quantities from the [Order Details] table where the product is marked as discontinued. The JOIN operation and GROUP BY clause are appropriate. The query is correct.",
            "The SQL query correctly calculates the total discount by summing up the discounted amount for each order detail where the order date is in 2023.",
            "The SQL query correctly calculates the total sales per territory by joining the necessary tables: [Order Details], orders, employees, employeeTerritories, and territories. It groups the results by TerritoryDescription and orders by total sales in descending order, limiting the result to one territory with the highest sales. The query is accurate and aligns with the business question.",
            "The SQL query is correct. It accurately calculates the revenue for each product in 2023 by joining the necessary tables and filtering the orders within the specified date range. It then groups the results by ProductID, orders by revenue in descending order, and limits the output to the top 5 results.",
            "The original query doesn't filter orders within the year 2023 for high-value customers. I've added a WHERE clause to filter orders from 2023. Also, it should use the 'orders.OrderID' correctly from the 'orders' table in the subquery to align with the context of high-value orders.",
            "The SQL query is correct for calculating the total sales value in the last quarter. It correctly sums the sales taking into account any discounts and filters the orders by the specified date range.",
            "The original query did not account for discounts on the products. Adding the discount in the calculation of product sales corrects the query.",
            "The SQL query is correct for the given business question. It extracts the month from the order date and counts the number of orders for each month within 2022, grouping by the month.",
            "The original query has a syntax error by trying to use AVG(SUM()). Instead, calculate total order value per customer first, then average by customer segment. Adjusted GROUP BY and join conditions accordingly.",
            "The query is correct. It calculates the total sales generated by each employee within the specified date range and filters out those with total sales above $100,000.",
            "The query is incorrect because it uses 'orders.ShipRegion' which does not match any available column in the `orders` table according to the schema. It should join using a valid relationship between orders and region, possibly using other tables like 'territories' and 'employeeTerritories' to establish this connection, since there is no direct mapping. Ensure the proper join path is followed in your database structure to calculate this metric correctly.",
            "The original query had an error with the COUNT function inside the WHERE clause. The corrected query uses a SUM with CASE to count on-time deliveries.",
            "The SQL query is correct. It correctly joins the relevant tables and calculates the customer lifetime value as specified in the business metrics definition.",
            "The query is correct as it correctly calculates the inventory turnover ratio for each product category by joining correctly on ProductID and CategoryID, and grouping by CategoryName.",
            "The original query incorrectly joins orders to products using OrderID and ProductID, which do not have a direct relationship. The correct join should involve the [Order Details] table between orders and products.",
            "The SQL query provided correctly identifies the countries where the majority of orders are shipped by counting the number of orders per country, grouping by ShipCountry, and ordering by the count in descending order. No corrections are needed.",
            "The SQL query is correct. It counts the number of products where the UnitsInStock is 0, which matches the business question.",
            "The SQL query correctly calculates the total number of products sold by each employee. The query properly joins the [Order Details] table with the orders and employees tables, and sums the Quantity column from the [Order Details] table, grouping the results by EmployeeID.",
            "The SQL query is correct. It calculates the average cost per order from the 'orders' table and groups the result by shipping company using the relationships defined in the 'orders' and 'shippers' tables.",
            "The original query incorrectly uses AVG(SUM()) which is not valid in SQL. Instead, calculate the average order value for each discount level directly by averaging the value calculations grouped by discount.",
            "The SQL query is mostly correct. It extracts the month from the order date, calculates the average fulfillment time, groups by the order month, and orders the results to find the month with the highest average order fulfillment time. It uses a LIMIT 1 to get only the top result, which is correct for the question.",
            "The query is correct. It correctly joins the '[Order Details]', 'products', and 'categories' tables, aggregates the product quantities by category, and limits the result to the top three categories based on product performance.",
            "The original query attempts to calculate a ratio for new to returning customers but is incorrect as it tries to combine two different counts in a single expression. The correct approach is to separately count new and returning customers for the year and then evaluate the ratio or difference between them. This approach uses subqueries to find new and returning customers.",
            "The SQL query correctly selects the EmployeeID and counts the territories handled by each employee, grouping by EmployeeID and ordering by the territory count in descending order. The query appears to be correct and fulfills the business question.",
            "The query is correct and uses the appropriate joins to calculate the total revenue generated by each supplier by summing up the order details associated with their products.",
            "The query is correct. It uses DATE_TRUNC to aggregate data by month and calculates the total sales correctly. Ensure the use of SQL dialects supporting DATE_TRUNC, like PostgreSQL.",
            "The SQL query correctly calculates the average order value for customers within the specified date range for 2023. The query uses the correct formula to compute total sales and divides by the distinct count of Order IDs, which aligns with the definition of Average Order Value. The date filter is appropriately set to capture orders placed within the year 2023.",
            "The original query is missing a JOIN with the orders table. Added the JOIN to correctly filter the order dates.",
            "The SQL query is correct. It calculates the total sales revenue generated by each employee in January 2023 by joining the 'Order Details', 'orders', and 'employees' tables, filtering the orders by date, and grouping the results by EmployeeID.",
            "The query is almost correct, but DATE_TRUNC is not part of the ANSI SQL standard. Instead, use EXTRACT with a combination of YEAR and MONTH to group by year and month. Corrected query: SELECT EXTRACT(YEAR FROM orders.OrderDate) AS year, EXTRACT(MONTH FROM orders.OrderDate) AS month, AVG(DATEDIFF(day, orders.OrderDate, orders.ShippedDate)) AS avg_fulfillment_time FROM orders GROUP BY year, month",
            "The original query calculates retention from Q1 to before Q1 rather than from Q1 to Q2. I corrected the dates to calculate retention from Q1 to Q2 of 2023.",
            "The original query incorrectly joins 'orders' with 'products' using 'orders.OrderID = products.ProductID'. It should join 'orders' with '[Order Details]' using 'orders.OrderID = [Order Details].OrderID' and then 'Order Details' with 'products' using '[Order Details].ProductID = products.ProductID'. Additionally, to find the supplier with the shortest average lead time, add 'LIMIT 1' to the query.",
            "The query is mostly correct but may present an issue: using AVG(products.UnitsInStock) averages the stock levels across all products in each category, which could exaggerate or minimize the inventory turnover ratio. Consider evaluating whether this aggregation aligns with your business understanding of inventory turnover. Otherwise, the logic is sound to calculate the metric by category.",
            "The SQL query is correct and accurately calculates the average shipping cost per order for the year 2023 using the specified date range.",
            "The SQL query is correct. It accurately selects OrderID from the orders table where the ShippedDate is on or before the RequiredDate, as intended by the question.",
            "The SQL query is correct. It properly selects the CustomerID and counts the number of orders for each customer within the specified date range in 2023, grouping by CustomerID.",
            "The original query was missing a calculation for counting orders delivered on time. I used COUNT with a CASE statement to count only the orders delivered on or before the required date, ensuring the computation of on-time delivery rate is accurate.",
            "The original query incorrectly attempted to use AVG(SUM(...)) directly, which is not valid in SQL as it requires a subquery to first calculate the SUM for each employee. The revised query now uses a subquery to compute the total sales per employee, then calculates the average of these totals.",
            "The original query only counts the number of orders that received a discount, but to find the percentage, we need to divide this count by the total number of unique orders. The query has been updated to calculate the percentage.",
            "The SQL query correctly identifies products that need to be reordered by checking if the sum of UnitsInStock and UnitsOnOrder is less than or equal to ReorderLevel.",
            "The original SQL query was missing a join between the '[Order Details]' and 'orders' tables, which is necessary to calculate the correct total_sales. The corrected query includes this join to ensure proper calculation of sales revenue.",
            "The SQL query is correct. It properly joins the 'Order Details', 'products', and 'suppliers' tables to calculate the total units sold per supplier and includes a GROUP BY clause to aggregate by CompanyName, ordering the results by total_units_sold in descending order.",
            "The SQL query is correct. It calculates the total sales revenue for 2023 by summing the product of UnitPrice, Quantity, and (1 - Discount) across all order details linked to orders within the specified date range.",
            "The query correctly calculates the monthly units sold for each product by joining the necessary tables and using DATE_TRUNC to group orders by month. The GROUP BY clause is correctly aligned with the SELECT fields, which ensures accurate aggregation.",
            "The SQL query correctly calculates the total sales revenue for each product in January 2023 by joining the necessary tables and filtering the orders by date. It then groups by product and orders the results in descending order of revenue to select the product with the highest revenue using LIMIT 1. The query is accurate and follows the business question requirements.",
            "The logic of the query is correct for calculating the average order value per month for the current year. Ensure that the query is executed with a SQL dialect that supports the functions used (such as EXTRACT), as some databases may have different syntax.",
            "The SQL query is correct. It calculates the lifetime value for each customer by summing the total revenue generated from their orders, groups by customer ID, and orders the result to get the top 5 customers with the highest lifetime value.",
            "The original query incorrectly joined orders and products, assuming orders have ProductID. Corrected by joining through [Order Details].",
            "Corrected the query to use a CASE statement within COUNT to calculate on-time deliveries and divided by the total count of orders to calculate the rate. Also used CAST to ensure division yields a float result.",
            "The query correctly calculates the average shipping cost per order for each shipping company for the year 2022 and orders the results to find the lowest average. However, ensure that the YEAR function is supported by your SQL database, as it might require a slightly different syntax in some SQL systems (e.g., EXTRACT(YEAR FROM orders.OrderDate)). The LIMIT 1 clause is correctly used to retrieve the shipping company with the lowest average cost.",
            "The original query is missing the join with the 'orders' table to filter the OrderDate to 2023. The corrected query adds the join to orders and filters by year.",
            "The query is mostly correct. The function used to extract the month from the date should be EXTRACT(MONTH FROM orders.OrderDate) instead of MONTH(orders.OrderDate) to adhere to ANSI SQL standards. The same applies to extracting the year.",
            "The original query had a syntax error with the COUNT function. Additionally, the logic needed to be corrected to properly compare distinct customers in both years. The NULLIF is used to handle division by zero.",
            "The query is correct. It selects product names where the units in stock are less than or equal to the reorder level, which answers the question appropriately.",
            "The original query is correct. It selects the ShipCountry, counts the number of orders per country for the year 2023, groups by ShipCountry, and orders the result by the count in descending order. Finally, it limits the result to one row, which will be the most common ship-to country.",
            "The query is correct. It calculates the percentage of products that are discontinued by counting the discontinued products and dividing by the total number of products. The use of TRUE for the Discontinued column is appropriate if it is a BOOLEAN type. The multiplication by 100.0 ensures a float result for the percentage.",
            "The original query is mostly correct but the use of table aliases would improve clarity. Aliases have been applied here for `products`, `[Order Details]`, and `orders`. Everything else is logically correct, with the correct columns being selected and calculations being performed for the average fulfillment time and the top 3 products by sales.",
            "The SQL query correctly identifies suppliers, sums the total sales of discontinued products, and applies the appropriate joins and filter. It then orders the results and limits to the top supplier with highest sales. Query is correct as per the provided schema and question.",
            "The original query was counting unique orders instead of unique customers. The corrected query counts distinct CustomerIDs to find the number of unique customers with orders having a discount greater than 20%.",
            "The SQL query is correct. It calculates the day of the week with the most orders by using the DAYNAME function on the OrderDate, grouping by the day, and ordering the results by the count of orders, limiting the result to the top one. No changes are needed.",
            "The SQL query correctly finds the total number of orders fulfilled by each employee in 2023. It joins the 'orders' and 'employees' tables on EmployeeID, filters the orders with OrderDate in 2023, and groups by EmployeeID. The use of COUNT and GROUP BY is appropriate for this task.",
            "The SQL query correctly calculates the total value of all orders placed by customers in the USA by joining the 'Order Details,' 'orders,' and 'customers' tables and filtering for customers in the USA. The query appears correct as per the given requirements.",
            "The SQL query is mostly correct but should group by the shipment month, not the order month to reflect the time orders were shipped late. The corrected query should be: SELECT MONTH(orders.ShippedDate) AS month, COUNT(orders.OrderID) AS late_orders FROM orders WHERE orders.ShippedDate > orders.RequiredDate GROUP BY MONTH(orders.ShippedDate)",
            "The SQL query correctly calculates the average order value for February 2023 by summing the product of unit price, quantity, and discount for each order, and dividing by the count of distinct orders within the specified date range.",
            "The SQL query is correct. It accurately calculates the total revenue generated by each customer over their lifetime by summing the sales amount for each customer's orders. The GROUP BY clause ensures results are aggregated by customer ID, and the JOIN operations correctly link the necessary tables.",
            "The SQL query is correct. The query accurately calculates the total quantity of each product sold in June 2023, groups by ProductID, and orders the results by the sales volume in descending order.",
            "The SQL query correctly calculates the total sales generated by each employee for March 2023. The JOINs are properly set up between the [Order Details], orders, and employees tables, and the WHERE clause filters the dates accurately within the specified range.",
            "The SQL query is correct. It accurately calculates the average time taken to fulfill orders by computing the difference between the ShippedDate and OrderDate for orders placed between January 1, 2023, and March 31, 2023.",
            "The query is mostly correct but lacks conversion to avoid integer division. Added type conversion to FLOAT for accurate division.",
            "The original query is incorrect because it does not properly join the 'orders' table and '[Order Details]' table to the 'products' table. The corrected query includes these joins.",
            "The original query was missing a join to the orders table to filter by order date. Added a JOIN to the orders table on OrderID to allow the WHERE clause to function correctly.",
            "Corrected the query by using CASE within COUNT to handle conditional logic and multiplied by 100.0 to express the result as a percentage.",
            "The SQL query is correct. It joins the necessary tables and calculates the total revenue for each product category, grouping by category name and ordering by revenue in descending order.",
            "The SQL query correctly calculates the total sales for each employee in Q3 2023 and filters to show those with sales exceeding $100,000. However, to get the count of such employees, the SELECT clause should use COUNT rather than listing individual employees. The corrected query is:\nSELECT COUNT(*) AS num_employees FROM (SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30' GROUP BY employees.EmployeeID HAVING total_sales > 100000) AS employee_sales_exceeding",
            "The SQL query correctly calculates the sales volume for each supplier by joining the 'Order Details' and 'products' tables with the 'suppliers' table. The sum is calculated correctly based on the UnitPrice, Quantity, and Discount. The results are grouped by supplier and sorted in descending order of sales volume, which answers the question effectively.",
            "The query correctly counts the number of orders for each shipping method. The use of GROUP BY on ShipVia, along with COUNT(*), accurately reflects the business question. No changes are needed.",
            "The SQL query correctly joins the necessary tables, computes the total revenue for each country, and orders the results to fetch the top 5 countries based on revenue. The query is accurate and aligns with the business question.",
            "The SQL query correctly selects orders placed by customers who do not appear in the orders prior to 2023. The use of a subquery to identify new customers is appropriate. The query is correct.",
            "The SQL query correctly calculates the average discount applied for all orders in December 2023. It joins the 'Order Details' table with the 'orders' table on OrderID and filters the results to the specified date range. The query is accurate.",
            "The SQL query is correct. It accurately counts the number of orders for each customer demographic segment by joining the 'customerCustomerDemo', 'orders', and 'customerDemographics' tables, and it correctly groups the results by 'CustomerTypeID'.",
            "The original query did not correctly identify returning customers within the six-month period. Returning customers should be counted by checking that they had previous orders before the six-month period and new orders during it. The revised query correctly filters customers who returned within the specified time frame.",
            "The original query calculated the total quantity rather than the actual sales amount. To find the highest sales, the query should calculate the total sales using the unit price and discount for each product. The corrected query uses the correct formula for sales calculation.",
            "The original query incorrectly filters by OrderDate instead of ShippedDate for the 2023 date range. The corrected query uses ShippedDate.",
            "The SQL query is correct. It accurately calculates the total sales revenue generated by each employee for March 2023 and orders the results to find the top employee.",
            "The original query listed product names instead of counting how many products meet the condition. Corrected to count the number of products.",
            "The original query incorrectly joins the 'orders' and 'products' tables on OrderID and ProductID. Corrected the query to join 'orders' and 'Order Details' on OrderID, and then 'Order Details' and 'products' on ProductID. This ensures the calculation of the average lead time per supplier is accurate.",
            "The query correctly calculates the inventory turnover ratio for each product on a monthly basis for 2023. It joins the necessary tables and aggregates the data by month and product. The use of DATE_FORMAT to extract the 'year-month' part of the OrderDate is appropriate for monthly granularity. Ensure that the database system supports the DATE_FORMAT function, which might vary across SQL implementations.",
            "The SQL query is correct. It groups customers by city, counts them, orders the results in descending order by customer count, and limits the output to the top result.",
            "The original query incorrectly places the WHERE clause inside the COUNT function. Instead, use a CASE statement within COUNT to conditionally count orders.",
            "The query is correct and efficiently answers the business question by counting the occurrences of each product ordered within the specified date range and returning the most frequently ordered product.",
            "The query is correct. It joins the 'orders' table with the 'shippers' table, filters for orders in 2023, groups by shipping company, and limits the result to the company with the most orders.",
            "The original query incorrectly uses the HAVING clause without employing CASE statements to separate orders from Q1 and Q2. The corrected query uses a subquery with COUNT and CASE to ensure customers placed orders in both quarters.",
            "The original query incorrectly used AVG(SUM(...)), which is not valid. The corrected query calculates sales per employee first, and then averages these sales per title.",
            "The query is correct. It calculates the total revenue for each product category in 2023, orders the results in descending order of revenue, and limits the output to the top result.",
            "The original query does not properly count distinct orders. Corrected it to count distinct OrderIDs from the Order Details table.",
            "The SQL query is correct for calculating the average fulfillment time for orders placed in 2023. It correctly uses the DATEDIFF function to calculate the difference between the shipping date and order date and averages those values for orders within the specified date range.",
            "The query was incorrect because the AVG and SUM functions were improperly nested. The correct query places the COUNT function within AVG, not within SUM, to calculate the average order value per employee.",
            "The SQL query is correct and correctly extracts unique customer counts per month for the year 2023 using the specified conditions and format.",
            "The SQL query correctly calculates the sales volume for each product by summing the quantity from the Order Details table and joins it with the Products table to get the product names. The results are grouped by product, and the total quantities are ordered in descending order to get the highest sales volume first. The query matches the business question requirements.",
            "The query has an issue with the date filtering function. DATE_FORMAT is not a standard SQL function. Instead, use the standard MONTH() and YEAR() functions for filtering by year and month.",
            "The query calculates product counts per customer and orders them descending. However, to find the most frequently ordered product by each customer, a subquery or window function is needed to find the maximum count per customer. Corrected query:\n\n```sql\nWITH CustomerProductCounts AS (\n    SELECT \n        customers.CustomerID, \n        products.ProductName, \n        COUNT([Order Details].ProductID) AS product_count\n    FROM [Order Details] \n    JOIN orders ON [Order Details].OrderID = orders.OrderID \n    JOIN customers ON orders.CustomerID = customers.CustomerID \n    JOIN products ON [Order Details].ProductID = products.ProductID \n    GROUP BY customers.CustomerID, products.ProductName\n),\nMaxProductCounts AS (\n    SELECT \n        CustomerID, \n        MAX(product_count) AS max_count \n    FROM CustomerProductCounts\n    GROUP BY CustomerID\n)\nSELECT \n    cpc.CustomerID, \n    cpc.ProductName, \n    cpc.product_count\nFROM CustomerProductCounts cpc\nJOIN MaxProductCounts mpc \n    ON cpc.CustomerID = mpc.CustomerID \n    AND cpc.product_count = mpc.max_count\nORDER BY cpc.CustomerID;\n```",
            "The query correctly calculates and ranks employees by total sales in 2023, and limits the result to the top employee. No changes are necessary.",
            "The SQL query correctly selects the top 5 cities based on the number of orders, grouping by ShipCity and ordering by the count of OrderID in descending order. The use of LIMIT 5 is appropriate to obtain the top 5 results. No corrections needed.",
            "The query correctly calculates the average order fulfillment time per month. It filters out orders where the shipped date is null, groups by the year and month of the order date, and calculates the average difference in days between the shipped date and order date. The use of DATE_FORMAT to group by month is appropriate. No corrections needed.",
            "The query is correct. It accurately counts the number of orders where the ShippedDate is later than the RequiredDate, indicating a delay.",
            "The original query correctly calculates the inventory turnover ratio for each month in 2023. It aggregates sales and averages inventory per month, grouping by the formatted date.",
            "The original query incorrectly joins 'orders' and 'products'. Instead, it should join through the '[Order Details]' table, linking 'OrderID' and 'ProductID'. The corrected query reflects this join relationship, calculating the average lead time correctly for each supplier.",
            "The provided query counts the total and discontinued products correctly, but it doesn't handle decimal division. Adding 100.0 ensures a decimal result for the percentage.",
            "The SQL query correctly calculates the average shipping cost per order for each shipping method by using the AVG function on the 'Freight' column and grouping the results by 'ShipVia'. This approach aligns with the business question.",
            "The query calculates the retention rate for the previous year by comparing customers who placed orders last year against those before last year, which is a suitable method to analyze retention rate trends.",
            "The original query is mostly correct. However, to avoid division by zero when calculating the inventory turnover, it's safer to use NULLIF to handle any potential zero values in AVG(products.UnitsInStock).",
            "The original query mistakenly divides the total count of orders by the sum of on-time orders. The correct approach is to sum the on-time orders and divide by the total count of orders for each shipping company.",
            "The SQL query correctly answers the business question by selecting the Region and counting the number of customers in each region. This correctly represents the distribution of customer locations by region.",
            "The SQL query is correct for the given question. It calculates the total number of units on order by product, grouping the results by ProductID and summing the UnitsOnOrder.",
            "The SQL query correctly calculates the total sales per month in 2023 and limits the result to the month with the highest sales. The use of DATE_FORMAT and aggregation functions are appropriate.",
            "The query is correct for calculating total sales revenue for the current year using the given schema and business metrics definitions.",
            "The original query incorrectly calculates the previous month. The correction involves using 'CURDATE() - INTERVAL 1 MONTH' to accurately shift to the previous month for both month and year conditions.",
            "The original query is missing a join from [Order Details] to orders, which is necessary to filter by the current quarter's OrderDate. The corrected query adds this join.",
            "The SQL query correctly calculates the average order value for each month. The use of MONTH() and YEAR() functions correctly partitions the data by month within the current year. The aggregation and grouping are also correctly implemented.",
            "The SQL query is correct and accurately counts the number of products with zero units in stock, answering the business question.",
            "The SQL query correctly calculates the total sales for each employee in the last year by joining the relevant tables and applying the condition to filter the orders to the previous year. The query groups by EmployeeID, orders by total_sales in descending order, and limits the results to the top entry, which correctly identifies the employee with the highest total sales. The use of YEAR(CURDATE()) - 1 appropriately targets the last year.",
            "The SQL query correctly calculates the average order fulfillment time for orders placed this year by comparing the year of the order date with the current year using the YEAR() function and CURDATE(). It uses the DATEDIFF function to calculate the difference between 'ShippedDate' and 'OrderDate', and then averages these differences.",
            "The SQL query is correct for the given business question. It selects the top 5 customers based on their lifetime value calculated from order details.",
            "The query contains a syntax error. The COUNT function is used incorrectly with a WHERE clause inside it. We need to use conditional aggregation instead.",
            "The original query is almost correct. The only issue is in the GROUP BY clause; it should group by 'categories.CategoryName' instead of 'categories.CategoryID' to match the SELECT clause.",
            "The original query had a mistake in the JOIN condition between the 'orders' and '[Order Details]' tables. It should use the 'OrderID' column to join (orders.OrderID = [Order Details].OrderID). The corrected query fixes the JOIN condition and should correctly find the supplier with the shortest lead time.",
            "The query correctly calculates the average discount applied to orders in the last 3 months. It joins the '[Order Details]' and 'orders' tables using the 'OrderID' and filters the orders based on the 'OrderDate' within the last 3 months. No correction needed.",
            "The original query uses DATE_SUB with CURDATE() to select the last three months, which may not correspond to the last quarter as quarters are typically based on calendar quarters (e.g., Jan-Mar, Apr-Jun, etc.). The corrected query uses QUARTER and YEAR functions to accurately capture the last complete quarter.",
            "The query correctly calculates the ratio of distinct customers in the current year to the previous year. However, this doesn't necessarily reflect the customer retention rate as it doesn't account for whether the customers from the previous year are the same as those in the current year. A proper retention calculation would require tracking which specific customers have placed orders in both years.",
            "Corrected to include the employeeID join and ensure order by within each region. It's vital to include the employees table join here as well, and the ORDER BY is adjusted to sort within each region.",
            "The original query retrieves product IDs and names, but the question asks for a count of how many such products exist. The corrected query counts the products meeting the criteria.",
            "The original query uses `CURDATE()` which is correct if using MySQL. If applying ANSI SQL, `CURRENT_DATE` should be used instead. Ensure the date function is compatible with your SQL dialect.",
            "The SQL query is correct as it joins the orders and customers tables to count the number of orders per country for the current year. The orders are grouped by country and ordered by the number of orders in descending order.",
            "The query is mostly correct. Changed CURDATE() to CURRENT_DATE for ANSI SQL compliance. Ensure that the database system supports DATE_SUB function or replace it with an equivalent.",
            "The query was incorrect because it joined orders with products using the order ID, which is not the correct relationship. Instead, the join should be through the [Order Details] table, which connects orders and products by their respective IDs.",
            "The original query is missing a filter to ensure we're considering only the orders from this year. Adding the WHERE clause with the YEAR function resolves this issue.",
            "The SQL query is correct and accurately retrieves the top performing employee based on total sales revenue.",
            "The query is mostly correct. However, the calculation of 'avg_order_value' should divide by the number of unique order IDs per month, not the entire year. Correct SQL will ensure 'COUNT(DISTINCT orders.OrderID)' is calculated per month.",
            "The original query correctly identifies customers who placed more than one order in 2023. To find the number of such customers, wrap the existing query to count distinct CustomerIDs that meet the criteria.",
            "The SQL query is correct. It correctly joins the 'orders', '[Order Details]', and 'customers' tables and calculates the lifetime value for each customer by grouping on 'CustomerID'. The calculation adheres to the business metric definition.",
            "The original query was almost correct, but the join order was slightly off and would not affect the result. It's important to ensure that the joins are logically aligned with referencing the correct table relations.",
            "The SQL query is correct and accurately counts the number of orders shipped after the required date by comparing 'ShippedDate' to 'RequiredDate'.",
            "The original query uses an incorrect syntax for the conditional count. The correct approach is to use a CASE statement inside COUNT to filter discontinued products.",
            "The SQL query correctly computes the average fulfillment time for orders by employee by calculating the date difference between the shipped and order dates for each order and grouping the results by EmployeeID.",
            "The original query incorrectly uses MAX(SUM(...)), which is not valid. The corrected query groups by city and orders by the total lifetime value, selecting the city with the highest value.",
            "The SQL query is correct. It calculates the average shipping cost per order for each shipping company by joining the orders and shippers tables on the ShipVia and ShipperID columns, and then groups the results by the CompanyName of the shippers.",
            "The query is correct and effectively finds the top 5 customers based on total order quantities using a JOIN on orders and [Order Details]. GROUP BY and ORDER BY clauses are used correctly, and LIMIT is applied to restrict results to the top 5.",
            "The original query is incorrect because the COUNT function was used directly with a condition, which is not a valid syntax. Instead, use COUNT with CASE WHEN to conditionally count orders delivered on time. Also, add a filter to limit results to the year 2023.",
            "The query is correct. It joins the 'products' and 'categories' tables on 'CategoryID', groups by 'CategoryName', and computes the average 'UnitPrice'. It orders the results by 'avg_unit_price' in descending order and limits the output to 1, thus finding the category with the highest average unit price.",
            "The SQL query correctly calculates the total sales by territory by joining the necessary tables: [Order Details], orders, employees, employeeTerritories, and territories. The aggregate function SUM is used correctly to compute total sales for each territory, grouping results by TerritoryDescription.",
            "The original SQL query contained a syntax error. WHERE clauses cannot be used directly within aggregate functions like COUNT. The revised query correctly calculates the return rate by separating the WHERE clauses into their respective SELECT statements.",
            "The query correctly calculates the total sales revenue contribution of each supplier by joining the Order Details with products and suppliers, and summing the product of UnitPrice, Quantity, and Discount, grouping by CompanyName. The query is correct according to the business question.",
            "The original query has a couple of issues: 1) The use of LAG requires a PARTITION BY clause by products to correctly calculate sales growth per product over time. 2) The GROUP BY clause should include the product identifier to ensure correct aggregation. The corrected query addresses these points.",
            "The SQL query is correct. It correctly calculates the total sales revenue for last year (2022) by using the SUM function on the product of UnitPrice, Quantity, and the Discount factor from the 'Order Details' table, joined with the 'orders' table on OrderID, and filtered by OrderDate in 2022.",
            "The query correctly calculates the average order value for each month. It uses DATE_FORMAT to extract the year and month from the OrderDate, and calculates the average order value by dividing the total sales by the count of distinct orders for each month. No corrections needed.",
            "The SQL query is correct. It calculates the total quantity sold for each product category by joining the [Order Details], products, and categories tables, and then groups the results by category name.",
            "The SQL query correctly counts the total number of orders made by each employee. The use of JOIN and GROUP BY is appropriate for this question.",
            "The original query had incorrect syntax. The `WHERE` clause should not be within `COUNT()`. Instead, use a `CASE` statement to count only on-time orders.",
            "The original query incorrectly joins 'orders' and 'products' on 'OrderID' and 'ProductID'. The correct join should be between 'orders' and '[Order Details]' on 'OrderID', and then '[Order Details]' and 'products' on 'ProductID'. The corrected query uses these joins appropriately.",
            "The query is correct as it calculates the inventory turnover ratio by dividing the cost of goods sold by the average inventory for each product. The tables and columns are correctly referenced and the grouping by ProductID is appropriate.",
            "The SQL query correctly calculates the average shipping cost per order per month. The use of DATE_FORMAT to handle the monthly grouping is appropriate, and the GROUP BY clause correctly groups the data by month.",
            "The SQL query is correct. It selects the ProductID and sums the Quantity from the Order Details table, grouping by ProductID, ordering by total units sold in descending order, and limiting the result to 1 to find the product with the highest number of units sold.",
            "The query correctly joins the 'orders' table with the 'shippers' table using 'ShipVia' and 'ShipperID'. It counts orders where 'ShippedDate' is less than or equal to 'RequiredDate' to determine on-time deliveries and groups results by 'CompanyName'. It orders the results by 'on_time_deliveries' in descending order and limits the result to the top shipping company. The query is correct.",
            "The original query correctly calculates the retention rate but may result in a division by zero error if there are no customers in the earlier period. To prevent this, use `NULLIF` to handle potential zero division.",
            "The original query missed joining '[Order Details]' with 'orders' using the 'OrderID'. The corrected query includes this necessary join to calculate sales accurately.",
            "The SQL query correctly finds the supplier with the highest contribution to total sales. It joins the required tables and computes the sales sum grouped by SupplierID, then orders by sales to get the top contributor using LIMIT 1. The query is correct.",
            "The original query lists each discontinued product and its stock individually. The corrected query calculates the total units of all discontinued products in stock.",
            "The query needs correction as it attempts to use a column from the 'orders' table without joining it. Since reorder levels are independent of order dates, a valid approach does not require joining with the 'orders' table unless specific context is needed. Proper grouping by month can involve a different aspect if monthly aggregation is based on other criteria. Here's a corrected query:\n\nSELECT DATE_FORMAT(CURRENT_DATE, '%Y-%m') AS month, AVG(ReorderLevel) AS avg_reorder_level FROM products;\n\nIf monthly tracking is needed:\n\nSELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(products.ReorderLevel) AS avg_reorder_level FROM products JOIN [Order Details] ON [Order Details].ProductID = products.ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY month;",
            "The query is correct. It calculates the revenue generated by each employee last month, groups by EmployeeID, and orders by revenue in descending order, returning the top result.",
            "The query is correct as it calculates the average discount from the [Order Details] table, which matches the question's requirements.",
            "The SQL query is correct. It joins the 'orders' and 'customers' tables on 'CustomerID', groups the results by 'Country', counts the 'OrderID', and orders the results by total orders in descending order, limiting the output to the top result.",
            "The query is correct. It selects the distinct customer count from the orders table where the order date is in 2023, which matches the business question perfectly.",
            "The SQL query is correct and aligns with the business question. The query retrieves the product with the highest sales volume in terms of quantity for the year 2023. The JOIN operations are properly used to connect the 'Order Details', 'products', and 'orders' tables, and the filtering condition correctly applies to the order date. The use of GROUP BY and ORDER BY ensures the correct aggregation and ordering, and LIMIT 1 fetches the top result, which matches the requirement.",
            "The SQL query is correct. It correctly calculates the average shipping cost per order for each shipping method by joining the 'orders' table with the 'shippers' table using 'ShipVia' and 'ShipperID', and it groups the results by 'ShipperID'.",
            "The original query is almost correct, but it misses grouping by employees.FirstName and employees.LastName. Adding these fields ensures that employees are uniquely identified in the results.",
            "The query is slightly incorrect due to the use of MySQL-specific DATE_FORMAT function. ANSI SQL does not support DATE_FORMAT, and DATEDIFF also may not be ANSI compliant. Here is a corrected version that should be ANSI compliant, assuming you are using a function like EXTRACT for date parts if necessary: SELECT EXTRACT(YEAR FROM OrderDate) AS year, EXTRACT(MONTH FROM OrderDate) AS month, AVG(CAST(ShippedDate AS date) - CAST(OrderDate AS date)) AS avg_fulfillment_time FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = 2023 GROUP BY year, month",
            "The original query was incorrect due to misplaced parentheses and incorrect syntax for subqueries. The corrected query uses separate subqueries to obtain the counts.",
            "The original query incorrectly joins 'orders' to 'territories' using 'orders.ShipRegion' and 'territories.RegionID'. The correct column for joining 'orders' to 'territories' is not provided in the schema; assuming the relationship should be via 'territories.TerritoryID'. Additionally, grouping should be done by 'region.RegionDescription', not 'region.RegionID', for correct output in the SELECT clause.",
            "The SQL query is correct. It accurately counts the number of discontinued products by filtering the products table where the Discontinued column is equal to 1.",
            "The original query syntax was incorrect; COUNT requires a column or expression to count. I've corrected it by using a CASE statement to conditionally include OrderID counts for on-time deliveries.",
            "The SQL query is correct and accurately answers the business question by counting products where the units in stock are less than or equal to the reorder level.",
            "The query correctly calculates the average customer lifetime value by first computing the total revenue generated from each customer and then averaging these values.",
            "The original query is almost correct. The GROUP BY clause should include 'categories.CategoryName' instead of 'categories.CategoryID' to match the selected field. The corrected query properly groups by category name to find the highest revenue-generating product category.",
            "The SQL query is correct and accurately determines the percentage of orders with a discount applied, using the `Discount > 0` condition to count only those with an applied discount.",
            "The SQL query correctly counts the number of orders with a shipping cost above $50 from the orders table. The query aligns precisely with the business question, and the logic is correct.",
            "The query is correct and calculates the average order value for each customer by grouping by CustomerID. The use of AVG function and joins are appropriate.",
            "The SQL query correctly calculates the number of orders placed in each quarter of 2023 by grouping orders based on the year and quarter of the OrderDate.",
            "The query is correct. It accurately calculates the total sales revenue for the first quarter of 2023 using the correct formula and joins. The date range for the first quarter is also correctly specified.",
            "The original query does not consider the sales revenue, only the quantity sold. The question refers to 'total sales volume', which typically implies revenue rather than just quantity. The corrected query incorporates sales calculations including discounts based on the provided business metric definition for 'Total Sales'.",
            "The SQL query correctly calculates the monthly total sales revenue for 2023. It uses the correct tables and fields, and appropriately groups the results by month based on the OrderDate.",
            "The original query did not include a join with the 'orders' table, which is necessary to access the 'OrderDate' column. The WHERE clause was also corrected to properly calculate the date range for the last month.",
            "The original query incorrectly calculates the average order value per order item instead of per order. The corrected query first calculates the order value for each order and then averages these values for each customer.",
            "The original query correctly calculates the sales per employee for Q1 of 2023, but the usage of QUARTER function may not be supported by ANSI SQL. I replaced it with MONTH to ensure compatibility.",
            "The SQL query correctly calculates the average fulfillment time for orders in the second quarter (Q2) of 2023 using the QUARTER and YEAR functions to filter the OrderDate column. The use of the DATEDIFF function to calculate the difference between ShippedDate and OrderDate is consistent with the business metric definition. The query is accurate and requires no changes.",
            "The original query attempts to calculate customer retention by dividing the count of distinct customers in the first half of 2023 by the count of distinct customers before 2023. However, it must join two subqueries, one for each count, to calculate the retention rate correctly. I adjusted the SQL to join two sets in one query.",
            "Added JOIN with orders table to access OrderDate for filtering by year.",
            "The SQL query is correct. It calculates the average freight cost per order by using the AVG function on the 'Freight' column in the 'orders' table. No modifications are needed.",
            "The original query has a syntax error in the COUNT function. To correctly calculate the on-time delivery rate, use a CASE statement inside a SUM function to count orders shipped on time. Also, ensure the YEAR is aligned to the current year.",
            "The original query missed joining the 'orders' table to filter on 'OrderDate'. The join with 'orders' needs to be added for the YEAR function to operate correctly. Added JOIN orders o ON od.OrderID = o.OrderID.",
            "The original query does not correctly identify returning customers. It only counts unique customers who ordered within the specified year. To identify returning customers, we need to verify if they placed an order before 2023 and place another order during the specified period. The corrected query includes this logic.",
            "The original query incorrectly groups by employees.EmployeeID, which is unnecessary for this question. The corrected query groups only by month to determine which month had the highest total sales across all employees.",
            "The original query is correct and aligns with the definition provided for calculating Customer Lifetime Value. It uses the right tables and columns, joins are correct, and the LIMIT clause is correctly used to get the top three customers by lifetime value.",
            "The query is correct. It counts the number of products where the units on order are greater than the units in stock, which represents products on backorder.",
            "The original query did not join the 'orders' table, which is necessary to filter by the 'OrderDate'. The corrected query includes this join.",
            "The original query is missing a join between `Order Details` and `orders` to access the `OrderDate` column. The corrected query includes this join.",
            "The original query needs a join between the 'orders' and '[Order Details]' tables to access the 'OrderDate' field for filtering. The correct field aliasing and current date functions should be applied. The use of CURRENT_DATE is preferred over CURDATE() in ANSI SQL.",
            "The provided query calculates total sales by territory for a specified date range but does not compare sales to the previous quarter. To evaluate the sales increase, you need data for both the current and previous quarters. An appropriate comparison and calculation of sales increase should be included in the query. This query needs to be revised to include the logic for determining the sales increase and comparison to the previous quarter.",
            "The SQL query correctly calculates the number of orders placed by each customer within the specified date range. The query joins the 'orders' and 'customers' tables on 'CustomerID', filters the orders by the date range, and groups the results by 'CustomerID' to count the orders per customer. No corrections are needed.",
            "The original query is missing a JOIN between the [Order Details] and orders tables to access the OrderDate. The corrected query includes this JOIN.",
            "The SQL query is correct. It accurately calculates the total spending per customer by summing up the order details and limits the results to the top 5 customers by this total spending.",
            "The query has several issues:\n1. The calculation of years of service is incorrect. `AVG(employees.HireDate - CURRENT_DATE)` will not accurately compute years since it subtracts dates directly.\n2. HireDate needs to be used with functions that calculate date differences correctly.\n\nCorrect SQL Query:\n```sql\nSELECT employees.EmployeeID, \n       DATEDIFF(CURRENT_DATE, employees.HireDate) / 365 AS years_of_service, \n       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales \nFROM [Order Details] \nJOIN orders ON [Order Details].OrderID = orders.OrderID \nJOIN employees ON orders.EmployeeID = employees.EmployeeID \nGROUP BY employees.EmployeeID\n```\n\nThe corrected query uses `DATEDIFF` to compute the difference in days between the current date and the hire date, then divides by 365 to approximate years of service.",
            "The SQL query correctly joins the 'orders' and 'shippers' tables using the 'ShipVia' and 'ShipperID' fields, and calculates the average fulfillment time using the DATEDIFF function. The GROUP BY clause is correctly applied to 'shippers.CompanyName'. The query appears to be correct.",
            "The original query did not apply the correct formula for 'Inventory Turnover Ratio'. It should use 'SUM([Order Details].Quantity * [Order Details].UnitPrice)' for the cost of goods sold and divide by 'AVG(products.UnitsInStock)'.",
            "The original query incorrectly calculates the inventory value grouped by product name, while the question asks for the count of discontinued products and their total inventory value. The corrected query includes a count of discontinued products and the summation of their inventory value without grouping.",
            "Corrected the SQL query to join the 'Order Details' table to orders and products, which are necessary for proper data retrieval for supplier lead time analysis.",
            "The original query incorrectly used COUNT with a WHERE clause inside. Instead, a CASE WHEN statement should be used to count only orders delivered on time. The multiplication by 1.0 ensures floating point division.",
            "The SQL query is correct. It selects the city and counts the orders grouped by city, ordering the results by the order count in descending order and limiting the output to the top 10 cities.",
            "The original query groups by region.RegionID, but it should group by region.RegionDescription to match the select statement showing descriptions. The rest of the query correctly calculates total sales and joins the necessary tables to gather region information.",
            "The SQL query correctly calculates the total sales for each employee for Q2 2023, groups the result by employee, and orders by total sales in descending order, limiting the result to the top employee. The query accurately answers the business question.",
            "The query attempts to calculate the customer retention rate by comparing the number of distinct customers within a given period to those before it. However, a more accurate retention rate would focus on returning customers who have orders in both periods. Here's the corrected approach:\n\n- Identify customers with orders between 2022 and 2023.\n- Identify customers with orders before 2022.\n- Determine customers present in both groups to get returning customers.\n- Calculate retention rate by dividing the number of returning customers by the previous customers.\n\nHere's a suggested SQL query to achieve this:\n\n```sql\nWITH previous_customers AS (\n    SELECT DISTINCT orders.CustomerID\n    FROM orders\n    WHERE orders.OrderDate < '2022-01-01'\n),\ncurrent_customers AS (\n    SELECT DISTINCT orders.CustomerID\n    FROM orders\n    WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2023-12-31'\n)\n\nSELECT COUNT(DISTINCT current_customers.CustomerID) / COUNT(DISTINCT previous_customers.CustomerID) AS customer_retention_rate\nFROM previous_customers\nJOIN current_customers ON previous_customers.CustomerID = current_customers.CustomerID;\n```\n\nThis query accurately calculates the retention rate as a fraction of previously active customers who returned in the subsequent period.",
            "The query is almost correct, but it is missing a date filter to limit the data to the year 2023. I added a WHERE clause to filter orders from '2023-01-01' to '2023-12-31'.",
            "The query correctly calculates monthly sales for each product by summing the total sales amount and grouping by product name and order month. However, to display only the top-selling products, additional logic is required to filter the top products based on the total sales. This could involve using a window function or a subquery to determine the top products.",
            "The original query incorrectly calculates total discounts as the sum of discount percentages without considering the quantity and unit price. The correction multiplies the discount by the unit price and quantity to calculate the total discount amount properly.",
            "Corrected the join condition: 'products.CategoryID' should be used instead of 'categories.CategoryID' as we only need 'products' to determine the categories associated with each supplier.",
            "The query correctly calculates the average salary of employees who have high sales performance. It uses a subquery to determine the average sales of employees and filters those whose sales exceed this average. However, the main query should aggregate the result without grouping by EmployeeID to get the overall average salary of high-performing employees. Removed GROUP BY clause in the main query to calculate the overall average.",
            "The SQL query correctly calculates total sales for each product category for the specified period of last year. The necessary tables and columns are accurately joined, and the formula for total sales is consistent with the business metric definition.",
            "The query correctly selects the CustomerID and counts the OrderID for orders placed in the specified quarter. It correctly joins the customers and orders tables, applies the date filter for the quarter, groups by CustomerID, and orders the results by the count of orders in descending order. No changes needed.",
            "The SQL query is correct for the business question. It calculates the average fulfillment time using the `DATEDIFF` function to find the difference between the shipped date and order date for orders placed between April 1, 2023, and September 30, 2023.",
            "The original query incorrectly joins orders with products using OrderID and ProductID. It should join orders with [Order Details] on OrderID, then [Order Details] with products on ProductID. This correction addresses the issue.",
            "The query is correct and appropriately computes the average order value across different customer regions. It joins the required tables and performs the correct aggregation. No changes needed.",
            "The original query is mostly correct, but for better ANSI SQL compliance, `MONTH` and `YEAR` should be replaced with `EXTRACT(MONTH FROM...)` and `EXTRACT(YEAR FROM...)`.",
            "The original query uses COUNT with a WHERE clause inside COUNT, which is incorrect. We should use COUNT with CASE WHEN to correctly calculate the on-time orders.",
            "The query incorrectly treats all customers of 2023 as new without checking if they placed orders in previous years. To identify new customers for each month, a subquery is needed to filter customers who haven't placed orders before each month in 2023.",
            "The original query did not account for territories, which are needed to determine sales per territory. Added joins with employeeTerritories and territories tables to associate employees with their respective territories and included TerritoryID in the select and group by clauses.",
            "The original query incorrectly includes 'ProductName' in the SELECT and GROUP BY clauses. Since the question asks for the total revenue for discontinued products, only the total revenue calculation is needed, without grouping by 'ProductName'.",
            "The SQL query correctly calculates the average shipping cost by shipping method and orders it in ascending order to find the method with the lowest average cost. It successfully uses GROUP BY and ORDER BY.",
            "The query is missing a date range filter to restrict the results to the last quarter. Added the WHERE clause with appropriate date range.",
            "The original query doesn't clearly represent a year-over-year comparison. It calculates the current year's retention without comparing it to the previous year. Additionally, using 'NULLIF' prevents division by zero if the previous year's count is zero.",
            "The original query is mostly correct but should group by e.FirstName, e.LastName, and e.HireDate as they are in SELECT clause. The corrected query is accurate.",
            "The query correctly calculates the average order value for each shipping method. Changed COUNT(o.ShipVia) to o.ShipVia in the SELECT clause to display the shipping method.",
            "The SQL query correctly identifies products that are at risk of going out of stock by checking if the difference between UnitsInStock and UnitsOnOrder is less than the ReorderLevel. The logic and syntax are correct.",
            "The original query incorrectly joins the 'orders' and 'products' tables directly on OrderID and ProductID, which are not related. Instead, join 'orders' to 'Order Details' on OrderID, and 'Order Details' to 'products' on ProductID. This revised query correctly calculates the average delivery time for each supplier.",
            "The original query was calculating the average discount rate for the current year instead of the past year. Adjusted the WHERE clause to reflect 'YEAR(CURRENT_DATE) - 1'.",
            "The original query correctly joins the employees, orders, and order details tables to calculate the sales performance but needs to convert the tenure from days to years by dividing by 365.25 (accounting for leap years). Additionally, e.FirstName and e.LastName should be included in the GROUP BY clause for correct aggregation.",
            "The SQL query is correct. It calculates the lifetime value for each customer by summing up the product of UnitPrice, Quantity, and Discount from the 'Order Details' table, joined with the 'orders' and 'customers' tables, and then orders the results by lifetime_value in descending order, which matches the business question.",
            "The SQL query is correct for the given business question. It accurately calculates the total sales revenue for January 2023 by summing the sales amount from the 'Order Details' table joined with the 'orders' table within the specified date range.",
            "The SQL query is correct for the given question. It selects the count of distinct ProductIDs from [Order Details] for orders placed between February 1st and February 28th, 2023.",
            "The SQL query correctly calculates the average order value for the second quarter of 2023 by summing the order values and dividing by the count of distinct orders within the specified date range.",
            "The original query is correct. It correctly uses HAVING to filter customers with more than five orders, joins the 'orders' and 'customers' tables correctly, and filters the orders within the specified date range.",
            "The query is correct. It accurately calculates the total sales revenue for each product in March 2023 and orders them to find the highest value product.",
            "Correct the WHERE clause to use customers.State instead of customers.Region, given the assumption that 'Region' should be 'State'. Ensure the correct state field is used, e.g., 'customers.State', and if necessary, confirm with schema details for the field name.",
            "The original query incorrectly uses COUNT with a condition inside it. The correct approach is to use COUNT with a CASE statement to tally orders delivered on time.",
            "The query is correct. It selects the EmployeeID, FirstName, and LastName from the employees table, calculates the total sales using the correct formula, restricts results to July 2023, groups the data by EmployeeID, FirstName, and LastName, orders by total sales in descending order, and limits the results to the top 3 employees.",
            "The SQL query correctly calculates the average fulfillment time for orders placed in April 2023 by using the DATEDIFF function to find the difference between the 'ShippedDate' and 'OrderDate' within the specified date range. The query is correct.",
            "Corrected the query to include proper joins between [Order Details], products, and orders tables.",
            "The query is correct. It properly joins the 'orders' and 'shippers' tables, filters by the order date range for August 2023, and groups the results by shipping company to sum the freight costs.",
            "The SQL query correctly calculates the average order fulfillment time for orders shipped by ShipperID 1. The condition WHERE orders.ShipVia = 1 accurately filters the orders by the specified ShipperID.",
            "The original query is calculating a retention rate, but the question asks for the total number of retained customers. The corrected query identifies customers who made purchases in both 2022 and 2023.",
            "The original query is missing a join between [Order Details] and orders to access OrderDate. The corrected query includes this join.",
            "The original query is missing a JOIN with the 'orders' table to filter by OrderDate. The corrected query includes this JOIN to ensure the filter is applied correctly.",
            "The SQL query is mostly correct. It accurately calculates the average shipping cost for orders placed in November 2023. However, the question mentions 'across all regions,' but since the dataset does not require region-specific averaging, the query as written suffices.",
            "The SQL query is correct. It joins the necessary tables, filters the records for December 2023, groups the results by product name, and orders them by total quantity in descending order, correctly using LIMIT 1 to return the most ordered product.",
            "The original query didn't filter orders by the year 2023 to identify top customers. The corrected query includes a WHERE clause to filter orders within the date range for 2023.",
            "The query is mostly correct. However, to find the impact of discounts on the average order value, we should compare two metrics: average without considering discount and average with discount applied. The calculation for avg_order_value_discount should be adjusted to calculate the impact of discount correctly by including it in the discounted value, not separating it. Here's the corrected query: SELECT AVG([Order Details].UnitPrice * [Order Details].Quantity) AS avg_order_value_no_discount, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS avg_order_value_with_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'.",
            "The SQL query correctly joins the necessary tables and calculates the total sales for employees whose sales territories include 'New York'. The query correctly uses the GROUP BY clause to aggregate sales by employee and selects the required columns. No changes are needed.",
            "The SQL query correctly calculates the customer lifetime value by summing the revenue from each customer. The 'ORDER BY customer_lifetime_value DESC' clause is used to list customers with the highest lifetime value at the top, which aligns with the business question.",
            "The SQL query correctly computes the average order value per month for 2023. It extracts the month from the order date and groups by it, calculating the sum of order values divided by the count of distinct order IDs. The logic matches the definition of average order value and is consistent with the question.",
            "The original query does not include any date information to calculate the monthly totals. The corrected query uses DATE_TRUNC to group by month based on the OrderDate from the orders table.",
            "The original query was missing a WHERE clause to filter the orders by the year 2023. Added this filter to select only orders placed within 2023.",
            "The SQL query correctly selects ProductName from products where the product is discontinued (Discontinued = 1) and still has stock (UnitsInStock > 0). The query is accurate and fits the business question.",
            "The SQL query is syntactically correct and matches the business question. It calculates the average order fulfillment time per month for the specified date range.",
            "The SQL query is correct. It counts the number of orders where the ShippedDate is on or before the RequiredDate, which answers the business question as intended.",
            "The original query had an issue with the JOIN clause. The 'orders' table needs to be correctly joined using the 'OrderID' from 'Order Details'. The ORDER BY clause is appropriate for finding the suppliers with the longest average lead time.",
            "The SQL query is correct. It properly joins the necessary tables and calculates the total sales per country for 2023 based on the order details.",
            "The original query is missing the JOIN with the orders table to obtain the order dates necessary for monthly aggregation. I've added the JOIN with orders to correctly extract the month.",
            "The original query was incorrect due to improper logic in checking consecutive months. The correct query joins the orders table on itself to find customers with orders in consecutive months.",
            "The SQL query correctly answers the business question. It accurately joins the necessary tables and computes the total sales per category, ordering the results by sales in descending order.",
            "The original query used FILTER clauses which aren't standard in all SQL databases. I've revised the query to join the orders table to itself on CustomerID. This ensures we only count customers in 2023 who also have previous orders. The use of `NULLIF` prevents division by zero in case there are no prior customers.",
            "Added a WHERE clause to filter data for the current year.",
            "Corrected the table alias for 'region' and ensured counting distinct employees to avoid duplicates due to multiple territories.",
            "The original query is mostly correct but needs a safeguard against division by zero. The formula should use NULLIF to prevent division by zero when calculating the turnover ratio. This is achieved by changing AVG(products.UnitsInStock) to NULLIF(AVG(products.UnitsInStock), 0).",
            "The SQL query is correct. It calculates the monthly on-time delivery rate by comparing shipped date with required date and groups the results by the month extracted from the order date.",
            "The query correctly joins the necessary tables and calculates the total sales for each supplier. It then orders the suppliers by the total sales in descending order, which identifies suppliers linked to the highest sales products. The query is correct.",
            "The SQL query correctly identifies the products with the highest sales volume in 2023 by summing the quantity from the Order Details table, joining it with the products and orders tables, filtering for the specified date range, and ordering the results by total quantity in descending order. The query is correct as per the business question.",
            "The SQL query is correct and accurately answers the business question.",
            "The SQL query correctly identifies returning customers by checking if a customer had placed an order prior to 2023 and then again within 2023. The use of subquery ensures that only customers with previous orders are counted.",
            "The query is correct. It calculates the total sales generated by each employee in Q2 2023, groups by EmployeeID, and orders the results by total sales in descending order.",
            "The original query incorrectly joined the products and [Order Details] tables. It should join [Order Details] with orders using the OrderID. Corrected the join condition and formatted the query properly.",
            "The SQL query is correct and appropriately calculates the average shipping cost per order by shipping company for the year 2023.",
            "The original query incorrectly assumes a direct relationship between customers and regions. Adjusted to use territories and region tables for correct region association.",
            "The SQL query is correct. It appropriately joins the [Order Details] with orders using OrderID and calculates the average discount for orders placed in 2023.",
            "The SQL query correctly counts orders where the shipped date is later than the required date and the order date is within the specified range.",
            "The query was missing a JOIN between '[Order Details]' and 'orders' to filter the OrderDate for 2023. Added orders table JOIN correctly.",
            "The SQL query correctly joins the necessary tables to calculate the average order value for each customer demographic. It calculates the average order value using the provided formula and groups the results by customer demographics, ordering them in descending order of average order value. The query accurately answers the business question using the provided schema and metrics.",
            "The original query is nearly correct but should count distinct OrderIDs to avoid counting the same order multiple times if it has multiple order details. I've updated COUNT(orders.OrderID) to COUNT(DISTINCT orders.OrderID) to ensure accurate total orders per employee.",
            "The query is correct for calculating the average shipping cost and average order value for orders in 2023. However, it only computes averages, not a correlation. To analyze correlation, further statistical analysis beyond SQL may be required.",
            "The original query lists product names and reorder levels but doesn't calculate the average. The corrected query computes the average reorder level for products with a stock greater than zero.",
            "The query is correct. It calculates the total quantity sold for each product in 2023 and orders them in descending order to find the most popular product.",
            "The SQL query is correct. It accurately counts the distinct CustomerIDs for orders placed in June 2023.",
            "The SQL query correctly calculates the average order value for the specified date range. It joins the [Order Details] table with the orders table to retrieve relevant order information and applies the specified formula for calculating average order value by dividing the total sales by the number of distinct orders within the first quarter of 2023.",
            "The original query missed joining the 'orders' table with the '[Order Details]' table to filter by 'OrderDate'. The corrected query includes the necessary join and adds 'products.ProductName' to the GROUP BY clause.",
            "The original query incorrectly uses the orders.OrderDate for filtering. To find the fulfilled orders, it should use orders.ShippedDate to ensure the orders were actually shipped in 2023.",
            "The SQL query is correct for the given question. It accurately calculates the total revenue generated by each employee by joining the necessary tables and filtering for the second quarter of 2023.",
            "The original query is mostly correct but is missing a date filter to ensure it only considers the past year. The corrected query adds a WHERE clause to filter orders within the last year.",
            "The original query uses DATEDIFF, which might not be compatible with all SQL dialects as it is non-standard. In ANSI SQL, you can calculate the difference directly using subtraction of dates if ShippedDate and OrderDate are DATE types.",
            "Corrected the query. Used CASE WHEN to count on-time deliveries and CAST for precise division.",
            "The SQL query is correct. It selects the product names from the products table where the units in stock are less than or equal to the reorder level.",
            "The query correctly calculates the lifetime value of customers from Germany by summing the sales amounts and filtering by customer country before grouping by customer ID. No changes needed.",
            "The original SQL query is incorrect because it uses an incorrect subquery construction. The corrected query uses subqueries correctly and explicitly specifies them.",
            "The SQL query correctly calculates the average shipping cost per order for each month in 2023 using the AVG function on the Freight column and groups the results by month. This aligns with the business metric 'Shipping Cost per Order' provided in the schema.",
            "The original query is missing a join between [Order Details] and orders to access the OrderDate. I added 'JOIN orders ON [Order Details].OrderID = orders.OrderID' to correct this.",
            "The query correctly counts the number of products that have been discontinued by checking if the 'Discontinued' flag is set to 1. No changes are needed.",
            "The query correctly finds the employee with the highest sales in the western region. It joins the necessary tables and calculates total sales by using the formula provided. The use of a subquery to find the RegionID for 'Western' is appropriate. The query also uses GROUP BY to aggregate sales by employee and ORDER BY to sort the results before applying LIMIT 1 to get the top employee.",
            "The original query uses incorrect syntax in the COUNT function. The correction uses SUM with a CASE statement to count on-time deliveries and ensures division yields a decimal result by casting COUNT.",
            "The query correctly calculates the average order fulfillment time by month for the year 2023. It uses the DATEDIFF function to measure the difference between the ShippedDate and OrderDate, and groups the results by month. The use of YEAR and MONTH functions is appropriate for filtering and grouping.",
            "The SQL query is correct. It accurately calculates the total sales for the year 2023 by joining the 'Order Details' and 'orders' tables and applying the formula given for 'Total Sales' for the specified date range.",
            "The query correctly retrieves the product with the highest sales quantity in 2023 by joining the '[Order Details]', 'products', and 'orders' tables, filtering orders within the specified date range, grouping by 'ProductID', and ordering by total quantity in descending order. The use of LIMIT 1 ensures only the top result is returned. The SQL query is correct as per the given question.",
            "The SQL query correctly calculates the average number of days to fulfill an order by using the DATEDIFF function on the ShippedDate and OrderDate columns, and includes a filter to exclude orders that haven't been shipped by checking if ShippedDate IS NOT NULL. The query is correct.",
            "The original query had a syntax error in the COUNT statement and did not properly account for decimal precision in the division result. Updated to use COUNT with CASE WHEN to conditionally count on-time deliveries.",
            "The SQL query is correct. It correctly aggregates sales for each employee during February 2023, orders them in descending order, and limits the result to the top 3 employees.",
            "The SQL query is correct. It calculates the average shipping cost per order for each month in 2023 by converting the OrderDate to a 'YYYY-MM' format and grouping by this month-year format.",
            "The query is correct, and it is using subqueries appropriately to find the customer retention by first determining the number of unique customers who placed orders in 2023 and were also customers in 2022, then dividing by the total number of unique customers acquired in 2022.",
            "The SQL query is correct. It accurately calculates the total sales for each supplier in the year 2023 by joining the necessary tables and summing the appropriate fields.",
            "The original query is almost correct but the function TO_CHAR(OrderDate, 'YYYY-Q') should refer to orders.OrderDate to specify the source table. This correction ensures clarity and correctness.",
            "The original query selects customer information but the question asks for the count of such customers. To match the question's requirement, use a subquery to filter customers and then count them.",
            "The SQL query is correct and aligns with the business question. It properly joins the 'orders' table with the '[Order Details]' table and calculates the total sales by shipping country, grouping by 'ShipCountry'.",
            "The original query uses TO_CHAR with 'YYYY-Q', which is not standard ANSI SQL. Corrected by using EXTRACT to get YEAR and QUARTER separately, then concatenating for grouping.",
            "The original query had issues with the COUNT function, which should conditionally count only the orders delivered on time. I used the CASE statement to count only orders where ShippedDate is less than or equal to RequiredDate, and CAST the total count to FLOAT for precise division. Finally, I ordered the results by on_time_delivery_rate in descending order and limited the result to one shipper to find the highest rate.",
            "The query calculates 'employee_sales' correctly for each employee and their 'years_of_service' based on the current year and 'HireDate'. However, this query only aggregates sales data and is not enough on its own to determine 'correlation'. Consider using statistical tools or additional SQL capabilities to evaluate the correlation further.",
            "The SQL query correctly calculates the deficit for each product based on the difference between reorder level and current stock. It filters products where the reorder level is greater than current stock and orders them by the deficit in descending order to find the largest deficit. The query correctly limits the results to one product, which matches the business question.",
            "The query calculates total revenue per customer demographic description but does not filter for the 'top revenue-generating customers'. To address this, consider using a subquery or CTE to identify top customers first, then join with demographics.",
            "The query is correct. It calculates the total sales for each product, orders them by sales revenue in descending order, and limits the result to the top three products.",
            "The original query uses the MONTH() and YEAR() functions which may not be ANSI SQL standard. Using a date range for December 2023 ensures compatibility.",
            "The original query did not filter records to include only those from 2023. Added a JOIN to the orders table and a WHERE clause to filter by OrderDate.",
            "The original query has the 'HAVING' clause and 'YEAR' filtering inverted. Both conditions need to be applied properly. The 'WHERE' clause should filter the year before grouping.",
            "The original query is missing a join with the 'orders' table to apply the date filter. The corrected query includes the missing join with 'orders' to utilize the order date filter.",
            "Corrected the query by using SUM with CASE to count orders where ShippedDate is on or before RequiredDate.",
            "The original query is missing a JOIN between the [Order Details] and orders tables to access the OrderDate column.",
            "The initial query is missing a join between [Order Details] and the orders table to access the OrderDate column. I added this join to correctly filter the orders by year 2023.",
            "The original query incorrectly uses COUNT with a WHERE clause inside. It's corrected by using a CASE statement to count only late orders. Also, the percentage calculation is adjusted by multiplying by 100.0, and EXTRACT function is used for clarity in year comparison.",
            "The SQL query is correct. It accurately calculates the average shipping cost for orders placed in February 2023 by filtering the orders based on the month and year of the OrderDate.",
            "The SQL query is correct. It correctly counts the number of orders per city and orders them in descending order to get the city with the highest order volume, using LIMIT 1 to select only the top result.",
            "The original query calculates the fulfillment time based on orders placed in 2023. However, it should consider shipped dates in 2023 to determine fulfillment time for that year. Changed WHERE clause to filter on 'ShippedDate' instead of 'OrderDate'.",
            "The query is correct. It selects product names and aggregates the quantity of discontinued products by summing, with a condition to include only discontinued products (products.Discontinued = 1). The grouping by products.ProductID is appropriate for calculating performance per product.",
            "The query needs to join the 'region' table to obtain 'RegionID', which was missing in the original query. Added the join with 'region' on 'territories.RegionID' and corrected the SELECT clause to pull 'region.RegionID'.",
            "The original query incorrectly calculates the retention rate by dividing the number of distinct customers in 2023 by the number in 2022. It should compare the count of customers who made an order in 2023 and also ordered in 2022 divided by the number of customers from 2022.",
            "Correct original query without explicit percentage calculation. Added multiplication by 100 to get percentage.",
            "The original query calculates sales volume correctly but does not identify the highest sales volume product for each month. The corrected query includes an additional ordering by 'month' and limits the result to the top product per month.",
            "The SQL query is correct. It joins the 'orders' and 'customers' tables, filters orders placed in the first quarter of 2023, counts the orders per customer, and groups by CustomerID.",
            "The query correctly calculates the average order fulfillment time grouped by each shipping method (ShipVia). It uses AVG and DATEDIFF functions on the correct columns, and the GROUP BY clause is properly used on ShipVia.",
            "The SQL query is correct. It joins the necessary tables, filters the orders within the specified date range, groups by EmployeeID, calculates total sales, and orders the results in descending order to get the top sales. It then limits the results to 3 employees, which aligns with the business question requirements.",
            "The query is mostly correct, but in the GROUP BY clause, it's important to match exactly what is in the SELECT clause. Changed 'GROUP BY month' to 'GROUP BY DATE_TRUNC('month', orders.OrderDate)' for consistency.",
            "The SQL query correctly calculates the purchase volume for each customer, filters for orders in 2023, groups by customer, and orders by purchase volume in descending order, limiting the result to the top three customers.",
            "The query accurately calculates the inventory turnover ratio for each product category. It correctly joins the necessary tables and performs the required aggregations.",
            "The query incorrectly references 'regions.RegionDescription' and 'customers.Region'. It should be 'region.RegionDescription' and 'region.RegionID' respectively. Correct these identifiers and modify the GROUP BY clause accordingly.",
            "The original query had incorrect use of COUNT with WHERE inside the function. It should use CASE WHEN to conditionally count customers for each half of the year.",
            "The original query incorrectly joined the `orders` table with the `products` table using `OrderID`. The correct join should be between `orders` and `[Order Details]` on `OrderID`, and then `[Order Details]` to `products` on `ProductID`. This correction ensures accurate calculation of supplier lead times by associating each product with an order and its respective supplier. The corrected query now joins the tables properly and retrieves lead times grouped by `SupplierID`, sorted in ascending order of lead time.",
            "The original query is missing a WHERE clause to limit the results to the last year. I added a WHERE clause to filter the OrderDate between '2022-01-01' and '2022-12-31'.",
            "The original query is missing a JOIN between orders and [Order Details]. This JOIN is necessary to correctly calculate the total sales. The corrected SQL query adds this missing JOIN.",
            "The query correctly finds pairs of products ordered together by joining the Order Details table on itself with a condition on OrderID and ensuring distinct product pairs with ProductID. The COUNT(*) function is appropriately used to measure the frequency of these pairs. The GROUP BY and ORDER BY clauses are also used correctly. The query is correct.",
            "The SQL query is incorrect. The 'customers' table does not have a 'Region' column. Instead, the 'orders' table should be joined with 'customers' on 'RegionID', which is set as a foreign key in the 'territories' table via customerTerritories. However, the connection details are not available in the given schema. If customers can be linked directly with a territory, adjustments must be made accordingly.",
            "The query correctly calculates the satisfaction rate for each shipping company by counting on-time deliveries and dividing by the total orders, then orders the results by satisfaction rate in descending order.",
            "The current SQL query calculates the average discount by product, not per order. To find the average discount applied per order for each product, join with the orders table and calculate the average discount per order. Here's the corrected query: SELECT [Order Details].ProductID, AVG([Order Details].Discount) AS average_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY [Order Details].ProductID ORDER BY average_discount DESC.",
            "The original query did not filter for weekdays. The corrected query includes a WHERE clause to exclude weekends by using EXTRACT(DOW FROM orders.OrderDate) with the values 1 to 5, representing Monday to Friday.",
            "The given query is mostly correct, but there is a potential issue of division by zero if there are no sales in December 2022. To handle this, I've used NULLIF in the denominator to prevent division by zero errors.",
            "The original SQL query is incorrect due to the use of COUNT with a WHERE clause inside the parentheses. It should use a CASE statement to filter only discontinued products for counting.",
            "The query is almost correct but should use GROUP BY on the DATE_FORMAT to ensure consistent behavior. Changed 'GROUP BY month' to 'GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')'.",
            "The original query calculates total quantity instead of sales performance. The sales performance should be based on revenue, incorporating price and discount, not just quantity. The condition for current month is also adjusted to ensure the query captures only the current month's data.",
            "The SQL query is mostly correct but using `DATE_SUB(CURDATE(), INTERVAL 3 MONTH)` might not accurately capture the last quarter since quarters are typically defined as three-month periods starting in January, April, July, or October. Adjust `{start_date}` and `{end_date}` to accurately reflect the last quarter based on your specific time frame.",
            "The SQL query is mostly correct, but it's generally more accurate to filter based on ShippedDate for measuring fulfillment time. Here is the corrected query: SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.ShippedDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 6 MONTH) AND CURDATE().",
            "The query logic is correct, calculating the retention rate by dividing the number of returning customers in the first half of 2023 by the number of customers before 2023. The query returns a single value for retention_rate.",
            "The original query incorrectly joins 'orders' and 'products' tables. The corrected query joins '[Order Details]' to 'orders' on 'OrderID' and 'products' on 'ProductID'. Ensure table joining is accurate and refer to '[Order Details]' wherever necessary.",
            "The original query was missing a check for division by zero when calculating the turnover ratio. Adding NULLIF ensures that the AVG(products.UnitsInStock) does not result in division by zero. Additionally, the GROUP BY clause was corrected to include products.ProductName to match the SELECT clause.",
            "The SQL query is correct and accurately calculates the average shipping cost per order in the last year as specified in the question.",
            "The query is correct. It selects OrderID from orders where the ShippedDate is on or before the RequiredDate, and the OrderDate is within the year 2023.",
            "The original query failed to join the 'orders' table with '[Order Details]' to calculate sales, and incorrectly joined 'customers.Region' directly to 'region.RegionID', which should have been joined via the 'territories' table. The corrected query fixes these issues.",
            "The SQL query correctly calculates the total units sold per supplier by joining the relevant tables and grouping by SupplierID. The query correctly selects CompanyName for output.",
            "The SQL query is correct. It groups the average freight costs by each shipping company, allowing for a comparison of shipping costs across different companies.",
            "The SQL query correctly finds products where the UnitsInStock is less than the ReorderLevel, which indicates products nearing zero stock. The query is correct and matches the business question.",
            "The query is technically correct for calculating the discount effect, as it multiplies UnitPrice, Quantity, and Discount. However, to clarify: The effect of discounts on revenue should potentially account for the difference between sales with and without the discount. To be more precise about the discount's impact on total sales, consider: SELECT SUM(([Order Details].UnitPrice * [Order Details].Quantity) - ([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) AS discount_effect FROM [Order Details]. This computes the sales revenue loss due to discounts.",
            "The original query was incomplete because it did not filter the data for the last year and didn't include discounts in the calculation of sales. The corrected query includes a WHERE clause to filter orders placed over the last year, and it applies the discount in the sales calculation according to the Total Sales business metric.",
            "The query calculates the percentage accurately but multiplies by 1.0 instead of 100.0 to get a percentage. Adjusting the multiplication factor corrects this.",
            "The original query incorrectly references the 'orders' table to get the year, but it should reference the 'products' table. Assuming there is a 'DiscontinuedDate' column that records when a product was discontinued, the revised query correctly groups the data by year of discontinuation. If such a column doesn't exist, a different approach is needed.",
            "The SQL query correctly selects the city and counts the number of customers in each city, grouping by city and ordering by the customer count in descending order. The query is correct as it is.",
            "The SQL query correctly calculates the total sales revenue for the current year using the given schema and matches the 'Total Sales' metric definition. It can be considered correct.",
            "The query correctly checks for orders shipped on or before the required date and limits the count to the current month and year. It uses the 'ShippedDate' to determine the current month instead of 'OrderDate', which is appropriate for counting fulfillment.",
            "The initial query incorrectly grouped orders by CustomerID instead of OrderID when calculating total order value. Additionally, the JOINs must ensure that the calculated order totals relate to the customers correctly.",
            "The original query was missing a JOIN between [Order Details] and orders to utilize the OrderDate. The corrected query includes this JOIN, enabling the query to filter orders based on OrderDate correctly.",
            "The query is mostly correct. However, it's important to ensure that the subquery selects distinct CustomerIDs for clarity, even though there won't be duplicates inherently due to the join. Here is the revised query:\n\nSELECT COUNT(DISTINCT orders.CustomerID) AS returning_customers FROM orders WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) AND orders.CustomerID IN (SELECT DISTINCT CustomerID FROM orders WHERE YEAR(OrderDate) < YEAR(CURRENT_DATE))",
            "The original query was using the current month instead of last month, which is fixed by subtracting 1 from the current month. Additionally, GROUP BY must include all non-aggregated columns (employees.FirstName, employees.LastName).",
            "The SQL query is correct. It calculates the average fulfillment time for orders that have been shipped, ensuring that only orders with a non-null ShippedDate are considered.",
            "Corrected JOIN clause for [Order Details] to link with orders properly. Ensured correct table joins for products.",
            "The original query incorrectly places a WHERE clause inside COUNT. Replaced with COUNT and CASE WHEN to calculate on-time deliveries proportionally.",
            "The query correctly calculates the inventory turnover ratio for each product category by joining the 'products', 'categories', and '[Order Details]' tables. The calculation and grouping are appropriate, and the query meets the requirements of the business question.",
            "The SQL query is correct. It joins the orders table with the customers table on CustomerID and groups the results by customers.Country to get the average shipping cost per country.",
            "The query is missing a join between [Order Details] and orders. Added JOIN orders ON [Order Details].OrderID = orders.OrderID to correctly compute sales based on the order date.",
            "The original query is missing the application of the discount. The correct query includes multiplying by (1 - [Order Details].Discount) to calculate the purchase volume accurately.",
            "The original query incorrectly used employees.Region, but the 'employees' table does not have a Region column. Instead, the region information should be derived from the 'territories' table, accessed through the 'employeeTerritories' table. Adjustments are made to correctly join these tables and group by territories.RegionID.",
            "The SQL query correctly identifies products needing reordering based on current stock levels by comparing 'UnitsInStock' and 'ReorderLevel'. The query is correct and requires no changes.",
            "The query is correct. It joins the 'orders' and 'customers' tables on 'CustomerID', filters the orders for the current month and year using the 'OrderDate', and groups the results by 'Country' to count the number of orders per country.",
            "The original query attempted to calculate correlation inside a subquery which is incorrect. Ensure to calculate the total order value per order, then join it with orders to calculate correlation.",
            "The SQL query is correct and accurately calculates the average discount by product category using the necessary joins and aggregation.",
            "The SQL query is correct. It calculates the total order value for each customer in 2023 and then averages those values to get the average order value per customer.",
            "The original query is mostly correct, but it is good practice to use both '>=' and '<=' for the date range to include all possible dates in February. Also, the calculation matches the business metric defined for Average Order Value.",
            "The query is correct. It joins the necessary tables, filters orders by date, groups by ProductID, aggregates the quantity, and orders the results by total quantity sold in descending order.",
            "The SQL query correctly calculates the total sales generated by each employee in Q1 2023. It joins the [Order Details] table with the orders and employees tables and filters the results for the specified date range. The query groups by employees.EmployeeID and sums the sales per employee. The query is written according to the requirements and is correct.",
            "The SQL query should filter based on the 'ShippedDate' instead of the 'OrderDate' to calculate the average fulfillment time for orders actually shipped in March 2023. Here's the corrected query: SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time FROM orders WHERE orders.ShippedDate BETWEEN '2023-03-01' AND '2023-03-31';",
            "The SQL query correctly calculates the customer retention rate for the specified period. The subquery counts distinct customers who made orders between January and March 2023, while the denominator calculates the prior customer base. The result is the retention rate.",
            "Corrected the SQL query to join on the [Order Details] table, as it connects orders and products, not directly through orders and products.",
            "The original query was missing a JOIN between 'Order Details' and 'orders'. The corrected query adds this join, ensuring that the OrderDate filter is applied correctly.",
            "The query is correct and accurately calculates the average shipping cost for orders between January 1, 2023, and June 30, 2023.",
            "The original query has a syntax error in the COUNT function. The corrected query uses a CASE statement to conditionally count orders that were delivered on time. The result is multiplied by 100.0 to convert it into a percentage.",
            "The SQL query correctly answers the business question. It joins the necessary tables to calculate the total shipping value for each company within the specified date range of Q2 2023. The results are grouped by shipping company and ordered by total value in descending order to identify the company that handled the most orders in value.",
            "The original query missed filtering orders within the year 2023. I added a condition to the WHERE clause to ensure orders are within the specified year.",
            "The SQL query correctly calculates the number of new customers acquired each month by filtering out customers who had placed orders before 2023. The use of LEFT JOIN and checking for NULL in previous_customers is appropriate for identifying new customers. Additionally, the use of DATE_TRUNC ensures monthly aggregation, aligning with the business question's requirements.",
            "The SQL query is correct. It calculates the sales revenue for each product by summing the product of unit price, quantity, and discount for orders within April 2023. It then groups the results by ProductID, orders them by revenue in descending order, and limits the results to the top 5. No changes are needed.",
            "The original query is missing the calculation of employee sales, which is crucial for correlating with order fulfillment time. The revised query includes both metrics and adds an ORDER BY clause based on employee sales.",
            "The original query does not count distinct orders, which could lead to counting multiple order details with discounts for the same order. The corrected query includes DISTINCT to ensure only unique orders are counted.",
            "The original query was missing a LIMIT 1 to get the most common region. This has been added to return only the top region by sales value.",
            "The query is mostly correct but needs to ensure that only orders with a non-null ShippedDate are considered to avoid errors in calculating the date difference.",
            "The original query calculates the percentage of discontinued products with sales, but does not ensure distinct products are counted. The corrected query uses COUNT(DISTINCT ...) to avoid double-counting the same product. Additionally, it correctly handles division by zero using NULLIF.",
            "The SQL query is valid for calculating total sales revenue generated monthly. Ensure the database supports DATE_FORMAT function.",
            "The SQL query is mostly correct, but the condition should check the year of the ShippedDate instead of OrderDate to ensure we are filtering orders shipped in 2023. The correct query should be: SELECT COUNT(orders.OrderID) AS on_time_deliveries FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND YEAR(orders.ShippedDate) = 2023",
            "The query correctly calculates the average order fulfillment time grouped by month. The use of DATE_FORMAT to extract the month is appropriate.",
            "The query is correct and follows the ANSI SQL standard. It calculates the total sales per employee for 2023 and retrieves the employee with the highest sales.",
            "The original query uses incorrect syntax for COUNT within the WHERE clause. It requires subqueries to separately count distinct CustomerIDs within the specified date ranges.",
            "The original query was missing a WHERE clause to filter the orders within the year 2023. The corrected query includes this condition.",
            "The SQL query is correct. It groups the orders by ShipCity, counts the OrderIDs, orders them in descending order based on the count, and limits the result to the top city, which answers the business question accurately.",
            "The original query lists products but does not count them. The corrected query counts how many discontinued products have stock greater than zero, aligning with the business question.",
            "The SQL query correctly groups the orders by the shipping method and counts the number of orders for each method. It accurately answers the business question.",
            "The original query correctly finds the most common customer demographic by counting the number of customers in each demographic category and ordering by the count in descending order, limiting the result to 1. The query is correct and requires no changes.",
            "The original query correctly joins the necessary tables to calculate employee sales by region. However, it uses 'RegionID' instead of 'RegionDescription' which provides more meaningful output. Additionally, it doesn't limit the result to the highest sales region. Correcting these, the query should join the 'region' table to get 'RegionDescription' and apply a 'LIMIT 1' to extract only the region with the highest sales.",
            "The query correctly calculates the average discount for orders placed in 2023 by joining the 'Order Details' with 'orders' on the 'OrderID', and filtering the orders based on the year 2023 using the YEAR function on 'OrderDate'. Assuming the use of a SQL dialect that supports the YEAR function, no changes are necessary.",
            "The query correctly calculates the total sales per supplier and returns the supplier with the highest sales. It joins the tables appropriately and uses an aggregate function to calculate sales. The use of ORDER BY and LIMIT is correct for retrieving the top supplier.",
            "The original query incorrectly used a WHERE clause inside COUNT. The correct approach is to use COUNT with a CASE statement for conditional aggregation.",
            "The SQL query correctly selects the ProductID, ProductName, and UnitsOnOrder fields from the products table. It orders the results by UnitsOnOrder in descending order and limits the output to the top result, thus identifying the product with the most units on order. The query is correct.",
            "The original query correctly joins the tables and calculates revenue. However, 'QUARTER(orders.OrderDate) = 4' should reference the last quarter relative to the current date, which can be achieved using 'QUARTER(DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH))'. The rest of the query is correct.",
            "The original query is almost correct but needs to include 'employees.FirstName' and 'employees.LastName' in the GROUP BY clause to align with standard SQL practices. Updated the query accordingly.",
            "The original query had a syntax error with the COUNT function. It should use a CASE statement to determine on-time deliveries. Also, the YEAR check was incorrect; it should account for the same interval as MONTH.",
            "The original query correctly calculates the average shipping cost per shipper. However, it should group by 'CompanyName' instead of 'ShipperID' to match the selected column in the SELECT clause. This change aligns with the column used in the SELECT statement. The query is now correct.",
            "The original query is almost correct. I changed the GROUP BY to use categories.CategoryName instead of CategoryID for better readability and ensured no division by zero by using NULLIF in the calculation. Otherwise, the logic is consistent with the question.",
            "The original query lists product names instead of counting them. The corrected query returns the count of products with inventory levels below their reorder level.",
            "The SQL query correctly calculates the average order fulfillment time for orders placed in January of the current year by using the DATEDIFF function on ShippedDate and OrderDate. It filters the orders by checking if the order month is January and the order year is the current year. The query is correct.",
            "The query is correct. It groups by the discount values in `[Order Details]` and counts occurrences, ordering by count in descending order and limiting the result to the top one to find the most common discount.",
            "The SQL query correctly identifies returning customers by counting distinct CustomerIDs in the first half of 2023 who also placed orders before 2023. The subquery accurately captures the list of customers who placed previous orders, and the main query filters for those returning within the specified date range. The query is correct as it stands.",
            "The original query is mostly correct but missing a date filter to restrict data to the past year. I added a WHERE clause to filter orders within the past year from the current date.",
            "The query calculates age correctly by using the birth date. Ensure the current date's year is subtracted from the birth year to determine the employee's age. The calculation assumes no adjustment for the day of the year.",
            "The original query attempts to use AVG(SUM()) which is incorrect as it applies aggregation functions incorrectly. Instead, first calculate total sales per employee per region and then calculate the average of these totals.",
            "The query is mostly correct. The GROUP BY clause should use shippers.CompanyName instead of shippers.ShipperID to match the selected column.",
            "The original query calculates total sales for the current month but does not compare it to the previous month. To answer the question, we must compute the sales for both the current and previous month, compare them, and find the product with the highest increase in sales.",
            "The SQL query is correct. It calculates the total sales revenue for December 2023 by joining the [Order Details] and orders tables and summing up the revenue generated for orders made between December 1 and December 31, 2023.",
            "Added JOIN clause to connect [Order Details] with orders to filter by OrderDate.",
            "The original query correctly identifies customers who ordered in more than two different months by grouping the orders by CustomerID and counting distinct months. However, it was missing the step to count these customers, which is required by the question. I added COUNT(DISTINCT CustomerID) to provide the count of such customers.",
            "The SQL query correctly calculates the average order fulfillment time using the DATEDIFF function for orders placed between January 1, 2023, and June 30, 2023. No corrections are needed.",
            "The original query is missing a WHERE clause to limit the results to 2023. The GROUP BY clause also needs to include employees.FirstName and employees.LastName as these columns appear in the SELECT clause.",
            "The original query does not filter the orders by date, specifically for the year 2023. I added a subquery in the WHERE clause to ensure only orders from 2023 are considered in the calculation of the turnover ratio.",
            "The query is correct as it joins the `orders` table with the `shippers` table on the `ShipVia` and `ShipperID` columns to calculate the average freight cost per shipping company for orders placed in 2023.",
            "The query should join 'orders' with '[Order Details]' on 'OrderID' to relate products correctly. It should also filter by 'OrderDate' for 2023, and finally, limit the result to 1 to find the supplier with the shortest lead time.",
            "The query accurately answers the business question by selecting the city with the highest number of orders shipped to it within the specified date range. The use of COUNT, GROUP BY, ORDER BY, and LIMIT is correct.",
            "The query is correct. It retrieves the top 5 customers by lifetime value by calculating the total revenue from the customer, ordering by lifetime value in descending order, and limiting the results to 5.",
            "The SQL query provided is mostly correct, but it's better to use UNION ALL instead of UNION since you are not concerned with eliminating duplicates between Q1 and Q2. This will also be slightly more efficient.",
            "The SQL query correctly identifies products that are discontinued but still have quantities in stock by checking the 'Discontinued' flag and 'UnitsInStock' value. The SQL query is accurate as per the provided schema.",
            "The original query did not filter for orders within the year 2023. Adding a JOIN with the 'orders' table and a WHERE clause to filter by OrderDate resolves the issue.",
            "The SQL query is correct. It accurately calculates the frequency of each shipping method used in 2023 and orders them in descending order of usage.",
            "The original query was missing the date condition in the LEFT JOIN. The correct query should filter the orders for the year 2023 in the join condition to accurately identify employees with no sales during that period.",
            "The original query did not filter orders by the specified year 2023. Added a join with the `orders` table and a WHERE clause to filter by `OrderDate`.",
            "The query incorrectly calculates the average order value. It should divide the total sales by the distinct order count per month. The corrected query uses SUM() / COUNT(DISTINCT orders.OrderID) to calculate the correct average order value per month.",
            "The SQL query is correct. It accurately counts the number of late orders by checking if the ShippedDate is after the RequiredDate for orders placed in 2023.",
            "The SQL query correctly counts the number of orders placed by each customer in the year 2022. The use of COUNT(OrderID) and GROUP BY CustomerID is appropriate. The query assumes the database supports the YEAR() function for extracting the year from a date, which is common in many SQL implementations. Overall, this query is correct.",
            "The SQL query correctly identifies the product with the highest sales volume in the specified timeframe. It joins the 'Order Details' table with the 'orders' table to filter by the last quarter's dates, groups by ProductID, and orders by total quantity in descending order, limiting the result to one product.",
            "The SQL query is correct for answering the business question. It calculates the total sales revenue for each month in 2023 by grouping the results by month and summing up the sales values. The use of DATE_FORMAT for extracting the month is appropriate.",
            "The query is mostly correct, but it incorrectly calculates the average order value by dividing by the total distinct order IDs across the entire year, instead of doing so monthly. It should divide by the distinct order IDs for each month separately. The corrected query is:\n\nSELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month,\n  SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value\nFROM [Order Details]\nJOIN orders ON [Order Details].OrderID = orders.OrderID\nWHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'\nGROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
            "The original query used `DATE_FORMAT`, which is not standard in ANSI SQL. Instead, filtering with a date range is used. Additionally, the original query grouped by `ProductID` only, but grouping by `ProductName` as well ensures accurate results. The corrected query is ANSI SQL compliant.",
            "The query correctly calculates total sales per employee for 2023 and limits the result to the employee with the highest sales. The use of JOINs and WHERE clause is appropriate. The query is correct.",
            "The SQL query correctly calculates the average order fulfillment time for each month in 2023. It uses the DATE_FORMAT function to extract the month from OrderDate and groups by this month value. The AVG function calculates the average difference between ShippedDate and OrderDate, which represents the order fulfillment time.",
            "The original query had an incorrect structure for the COUNT function and was missing proper handling for conditions. The corrected query uses a CASE statement to count only on-time deliveries and divides by the total orders to get the percentage.",
            "The original query is missing a join between the [Order Details] and orders tables to filter by OrderDate. This has been corrected.",
            "The query had an incorrect join condition between orders and products. Corrected by joining orders with [Order Details] and [Order Details] with products.",
            "The SQL query correctly calculates the number of distinct customers for Q1 and Q2 of 2023. The use of subqueries for each quarter is appropriate.",
            "The SQL query correctly answers the question by counting the number of orders per city for the year 2023 and sorting the results in descending order to get the city with the highest number of orders. The use of 'LIMIT 1' ensures only the top city is returned. No corrections needed.",
            "The SQL query is mostly correct, but the GROUP BY clause should use the column 'products.ProductName' to match the SELECT clause. This ensures we are grouping by product name correctly when calculating total sales for discontinued products.",
            "The query correctly counts the number of deliveries handled by each shipping company in 2023. However, the GROUP BY clause should use 'shippers.CompanyName' instead of 'shippers.ShipperID' to align with the selection of 'shippers.CompanyName'. The corrected query ensures the accurate grouping and ordering.",
            "The query correctly calculates the average shipping cost for orders shipped internationally by checking if the customer's country is different from the ship country for orders between the specified dates in 2023. It joins the orders and customers tables on the CustomerID and filters on the conditions given.",
            "The query is correct and uses the DATE_FORMAT function to extract the month from OrderDate, calculates the average discount per month, and groups by month for orders in 2023.",
            "The original query incorrectly uses DATE_FORMAT, which is not ANSI SQL. Replaced with DATE_TRUNC for monthly granularity. However, the LIMIT 3 won't properly filter top 3 customers across all time. We need a subquery to determine top 3 customers by total sales, then filter for their monthly trends.",
            "The original query had a syntax error with the COUNT function including a WHERE clause. It should use a CASE statement instead. The modified query counts the products with zero units in stock using a CASE statement, divides by the total number of products in each category, and sorts the results to return the category with the highest percentage.",
            "The query was mostly correct. The grouping should be done by 'region.RegionDescription' instead of 'region.RegionID' to match the SELECT clause and provide the correct output.",
            "The original query is correct. However, the GROUP BY clause should reference territories.TerritoryDescription instead of territories.TerritoryID to match the SELECT clause. The updated query does this and correctly computes the top 5 territories by total sales in 2023.",
            "The SQL query provided is correct. It calculates the total revenue for the year 2023 by summing up the product of UnitPrice, Quantity, and (1 - Discount) for all order details linked to orders placed between January 1, 2023, and December 31, 2023.",
            "The SQL query correctly identifies the customer who placed the most orders by counting orders per customer and sorting in descending order. No corrections needed.",
            "Added a join with the 'orders' table to filter by 'OrderDate'.",
            "The original query incorrectly joins 'orders' and 'products' on 'OrderID', which should instead be joined through '[Order Details]'. This has been corrected in the revised query by correctly referencing '[Order Details]' to link 'orders' with 'products'.",
            "The SQL query correctly determines the total sales generated by each employee in 2023. It joins the necessary tables and applies the appropriate filters and aggregations.",
            "The initial query incorrectly uses OrderDate instead of ShippedDate when filtering for the last month's deliveries. The corrected query checks the ShippedDate within the specified date range.",
            "The SQL query correctly answers the business question by calculating the Customer Lifetime Value for each customer using the GROUP BY clause on customers.CustomerID. No changes are needed.",
            "The SQL query correctly calculates the average shipping cost for each shipping company and orders the results to find the lowest. Hence, the query is correct.",
            "The original query correctly calculates the total sales per employee for 2023 and filters those who exceeded 100,000. However, it needs to count how many such employees exist. The corrected query aggregates the result to provide the count.",
            "The SQL query correctly calculates the customer retention rate, considering distinct customers within the specified date range and those before it for comparison.",
            "The original query needed to count the discontinued products and calculate the total inventory value. The corrected query includes both the count and sum operations.",
            "The SQL query correctly calculates the total sales by summing the adjusted unit prices from the 'Order Details' table, joined correctly with the 'orders' table on 'OrderID'. It groups the results by 'ShipCountry', which answers the question accurately. The query is correct.",
            "The SQL query is correct. It retrieves the names of products where the current stock (UnitsInStock) is below the reorder level (ReorderLevel), which implies these products need to be reordered.",
            "The SQL query correctly retrieves the number of orders placed by each territory using the appropriate joins between the 'orders', 'employeeTerritories', and 'territories' tables. The query correctly groups by territory description and counts the orders, so it is accurate for the given question.",
            "The query is correct and accurately calculates the total sales quantity per product, ordering the results in descending order by total_quantity.",
            "The query was calculating the count of customers for each demographic but didn't calculate the proportion. Added a calculation for the proportion by dividing the count of customers per demographic by the total number of customers.",
            "The SQL query is correct and calculates the total sales revenue for 2023 using the provided formula.",
            "The query is mostly correct but the subquery logic for filtering dates should be directly in the `WHERE` clause to avoid using a subquery. The condition should use `CURDATE() - INTERVAL 1 MONTH` to properly handle edge cases where `MONTH(CURDATE()) - 1` could be negative.",
            "The SQL query is mostly correct but should ensure the evaluation year is from the OrderDate and that ShippedDate should not be NULL. The condition YEAR(orders.ShippedDate) = 2023 should be used to ensure shipment happened in 2023, and ShippedDate should not be NULL. The correct query is: SELECT COUNT(orders.OrderID) AS on_time_orders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND orders.ShippedDate IS NOT NULL AND YEAR(orders.ShippedDate) = 2023",
            "The SQL query is correct. It appropriately joins the Order Details, Orders, and Customers tables to calculate the lifetime value of each customer by summing the total sales for each customer and grouping by CustomerID.",
            "The query correctly calculates the inventory turnover ratio for each product and returns the product with the highest ratio. It appropriately joins the '[Order Details]' table with the 'products' table, calculates the turnover ratio using the sum of sales and average units in stock, groups by product ID, orders by turnover ratio in descending order, and limits the result to the top product. The query is correct.",
            "The SQL query correctly calculates the average shipping cost per order for each shipper. It properly joins the 'orders' table with the 'shippers' table and groups the result by the shipper's company name.",
            "The original query attempted to group by month within the subquery, which is unnecessary. Corrected by only counting distinct months per customer and checking if that count is greater than one.",
            "The SQL query correctly calculates the average order fulfillment time for each product category. The joins and group by clause are properly set up to achieve the desired result.",
            "The original query calculates a retention rate incorrectly by comparing customers from Q1 2023 to those before 2023. The corrected query identifies customers who placed orders in both Q1 and Q2 of 2023.",
            "The original query incorrectly calculates the percentage using the total products across all categories instead of within each category. Corrected by computing the percentage of discontinued products against the total products within each category using NULLIF to avoid division by zero.",
            "The query correctly calculates the retention rate by comparing distinct customers in a period to the total distinct customers an employee has served. Added NULLIF to prevent division by zero. Used ORDER BY and LIMIT to find the employee with the highest rate.",
            "The current query lists shipping cost and delivery time differences but does not calculate the correlation. To evaluate correlation, a statistical tool would be needed, as SQL alone does not compute correlation coefficients. Consider exporting the data for analysis in a statistical software or use SQL with additional statistical functions if supported by the database.",
            "The query incorrectly uses 'regions' instead of 'region' in the GROUP BY clause. Changed 'regions.RegionDescription' to 'region.RegionDescription'.",
            "The query is correct and will provide the average discount applied to orders for each month in 2023. It correctly formats the date and calculates the average discount grouped by month.",
            "The SQL query correctly counts the number of orders where the ShippedDate is later than the RequiredDate. The syntax and logic are correct as per the given schema.",
            "The SQL query correctly gathers sales data by territory using joins between the relevant tables: orders, [Order Details], employees, employeeTerritories, and territories. It calculates sales per territory and orders the results in descending order of sales. The query is valid and answers the business question accurately.",
            "The SQL query is correct. It joins the necessary tables and calculates the total sales for each customer demographic group as required by the business question.",
            "The SQL query correctly calculates the product with the highest sales in quantity for January 2023. It joins the necessary tables, filters for the specified time period, groups by ProductID, and orders by total quantity in descending order, limiting the result to 1 to get the highest selling product.",
            "The query is correct. It accurately calculates total sales per employee in the specified date range and groups by EmployeeID.",
            "The original query does not account for the year in which the last month might fall, which could lead to incorrect results when crossing years. By adding a condition to check the year, we ensure accurate filtering for the last month.",
            "The original query includes a join with the 'orders' table, which is unnecessary for counting unique customers in each city. The corrected query only uses the 'customers' table, as it directly reflects the number of unique customers per city.",
            "The query calculates the percentage of customers who made more than one order in 2023. It first identifies customers who made only one order and computes the difference with the total unique customers, then divides by the total unique customers to get the percentage of repeat customers.",
            "The query correctly calculates the average discount for orders made in March 2023 by joining the [Order Details] table with the orders table and filtering by the specified month and year.",
            "The SQL query is correct. It joins the products and categories tables, filters discontinued products, groups by categories, orders by count in descending order, and limits the result to the top category.",
            "The original query incorrectly counts duplicates if an employee is linked to multiple territories in the same region. Using COUNT(DISTINCT employeeTerritories.EmployeeID) ensures each employee is counted only once.",
            "The original query calculates the average line item value, not the average order value. The corrected query sums the total sales for UK customers and divides by the distinct count of orders to get the average order value.",
            "The SQL query is correct and accurately answers the business question. It calculates the number of products where the stock levels are below the reorder level using the COUNT function with the correct condition in the WHERE clause.",
            "The original query contains a syntax error. The count inside the COUNT function should be corrected by using a CASE statement to count on-time deliveries. Also, the GROUP BY clause should match the SELECT clause's MONTH function.",
            "The original query calculates sales per territory incorrectly using COUNT(DISTINCT territories.TerritoryID). Instead, simply compute the total sales per employee per territory and order by this total to find the top performer. The revised query calculates total sales per territory for each employee, orders by the sales amount in descending order, and limits the result to the top entry.",
            "The query is correct. It accurately calculates the revenue per product for the year 2023, groups by products, and orders them by revenue in descending order to select the top 5 products. No changes are necessary.",
            "The SQL query correctly joins the orders with shippers and filters the orders for March 2023. It groups the results by CompanyName and selects the company with the most orders using COUNT and LIMIT 1. The query is correct.",
            "The SQL query is correct. It calculates the total sales for each employee in March 2023 and returns the employee with the highest total sales."
        ],
        "difficulty": [
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "easy",
            "advanced",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "easy",
            "easy",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "easy",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "easy",
            "easy",
            "advanced",
            "medium",
            "easy",
            "easy",
            "advanced",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "easy",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium"
        ]
    }
}