{
    "Order Analysis": {
        "questions": [
            "What is the total sales revenue generated each month?",
            "How many orders were placed by each customer?",
            "Which employee fulfilled the most orders?",
            "What is the average order value every month?",
            "What is the average order fulfillment time for each month?",
            "What is the on-time delivery rate for each month?",
            "Which month had the highest freight cost and what was the cost?",
            "Which shipping method is used most frequently?",
            "How much discount was given on orders in total?",
            "List the top 5 products by sales revenue.",
            "Which country placed the most orders?",
            "How many orders were shipped after the required date?",
            "What is the total quantity of each product sold?",
            "What is the average discount rate applied to orders?",
            "What is the largest order by value?",
            "How many unique products are ordered each month?",
            "Which cities have the highest number of orders?",
            "Calculate the monthly growth rate in total sales.",
            "Which customer received the highest number of shipments?",
            "How does the average order value vary by shipping country?",
            "What is the total sales revenue generated in January 2023?",
            "Which product has the highest total sales revenue?",
            "What is the average order value for orders placed in February 2023?",
            "How many orders were fulfilled on time in Q1 2023?",
            "What is the average time taken to fulfill an order in March 2023?",
            "How many orders had a discount applied?",
            "What is the total number of unique customers who placed orders in 2022?",
            "Identify the top 5 customers by total sales revenue.",
            "What is the total freight cost for all orders shipped in 2022?",
            "How many orders had a fulfillment time greater than 7 days?",
            "Which employee processed the most orders?",
            "What is the average discount applied to orders in March 2023?",
            "Which country had the highest number of orders placed?",
            "What is the percentage of orders that had zero discounts?",
            "How many orders were shipped before the required date in February 2023?",
            "What is the total quantity of products ordered in 2023?",
            "Identify the product with the highest average discount.",
            "What is the total sales revenue for each month in 2023?",
            "Which city had the highest average order value in 2022?",
            "What is the average order value by month?",
            "How many orders have been placed by each customer?",
            "What is the average time taken to fulfill an order each month?",
            "What percentage of orders were delivered on time each month?",
            "How many orders were shipped via each shipping method?",
            "Which region had the highest sales revenue?",
            "What is the total discount given each month?",
            "Which employee has managed the most orders?",
            "How many orders have more than a 20% discount?",
            "Which shipping country has the highest average order value?",
            "What are the top 5 customers by number of orders placed?",
            "What is the total freight cost by shipping method?",
            "How many products are ordered per order on average?",
            "What is the sales trend for the top selling product over time?",
            "Which months have the highest and lowest total sales?",
            "How often do customers place repeat orders?",
            "What is the correlation between freight cost and order value?",
            "How many orders did not ship by the required date?",
            "What is the total revenue generated by each shipping method?",
            "Which customer has the highest total sales value?",
            "How many orders were shipped late for each month?",
            "What is the total freight cost for orders shipped to each country?",
            "Which employee handled the most orders in the last year?",
            "What is the average discount applied to orders for the top 5 products by sales?",
            "How many orders were placed by each customer per month?",
            "What is the on-time delivery rate for each region?",
            "What is the average quantity of products ordered per order?",
            "How does the average order value change over different months?",
            "What are the top 10 highest revenue-generating products?",
            "What month had the highest total sales and what was the amount?",
            "What is the total number of orders processed by each shipping method?",
            "What is the proportion of orders with zero discount applied?",
            "What are the five cities with the most orders shipped?",
            "How many distinct products are ordered each month?",
            "What is the average shipment date variance from the required date?",
            "Which regions have the highest average freight costs?",
            "What is the total number of unique customers placing orders in each quarter?",
            "What is the total sales revenue generated for each month?",
            "What was the average order value for each month in 2023?",
            "How many orders were placed by each customer in 2023?",
            "What is the average order fulfillment time by month?",
            "What is the total sales revenue generated in each month?",
            "How does the average order value vary across different months?",
            "Which month had the highest number of orders placed?",
            "How much freight cost was incurred for each shipping method?",
            "Which customer has placed the most orders?",
            "How many orders did each employee handle?",
            "What is the total sales revenue generated by each product?",
            "What is the average discount applied per order?",
            "How many orders have been shipped late?",
            "What is the most frequently shipped product?",
            "How many orders were shipped to each country?",
            "What is the total sales revenue for each customer region?",
            "Which shipping recipient has received the most shipments?",
            "How many orders include products with a discount applied?",
            "How much freight is incurred on average per order?",
            "Which product has generated the highest revenue?",
            "What is the trend of order fulfillment time over the months?",
            "What is the total sales amount for each month?",
            "Calculate the average order value for each month.",
            "Determine the on-time delivery rate for each month.",
            "List the top 5 countries by total sales amount.",
            "Which product had the highest sales value in the last month?",
            "Calculate the total number of orders placed by each customer.",
            "Find the employee who fulfilled the most orders.",
            "Determine the average discount applied on orders each month.",
            "Identify the month with the highest number of orders.",
            "What is the total freight cost incurred each month?",
            "What percentage of orders have been shipped using each shipping method?",
            "Calculate the total sales amount for each product.",
            "Find the 3 most frequently ordered products.",
            "Determine the customer with the highest average order value.",
            "Identify the most common shipping region.",
            "Calculate the total sales amount for each city.",
            "Find the orders that were shipped late (after the required date).",
            "Determine the average quantity of items ordered per order.",
            "Identify the earliest and latest order date in the database.",
            "What is the average order value for each month?",
            "What is the total freight cost per shipping method?",
            "Which employee handled the highest number of orders?",
            "Which product contributed the most to total sales?",
            "What is the average fulfillment time for orders?",
            "What percentage of orders were delivered on or before the required date?",
            "Which shipping country generates the highest revenue?",
            "What is the average discount given on all orders?",
            "What is the total quantity of each product ordered?",
            "How many orders were placed and completed within the same month?",
            "What is the total revenue contribution of each customer?",
            "What is the weekly trend in total sales over the past year?",
            "Identify the top 5 customers by total revenue.",
            "Which city received the most shipments?",
            "Calculate the average quantity ordered per order.",
            "What is the total sales revenue from orders that received a discount?",
            "What is the maximum order value recorded?",
            "What is the total sales revenue for each month?",
            "How many orders were placed by each customer in January 2023?",
            "Which product generated the highest sales revenue last month?",
            "Calculate the average order value for February 2023.",
            "Find the top 5 customers based on total sales revenue.",
            "What is the average order fulfillment time for the past year?",
            "Determine the on-time delivery rate for March 2023.",
            "List the orders that were shipped late regardless of the reason.",
            "Identify the shipping method most used for orders in April 2023.",
            "What is the total quantity of each product ordered in 2022?",
            "Find the total freight cost for all orders shipped to Germany.",
            "How many distinct products were ordered in the first quarter of 2023?",
            "Which employee is responsible for the highest number of orders?",
            "Calculate the total discount given on all orders in 2023.",
            "What are the top 3 regions based on the number of orders placed?",
            "Find all orders where the shipping address is in London.",
            "Determine the monthly trend in the number of orders placed.",
            "Compare the total sales by country for the last quarter.",
            "Which city has the highest average order value?",
            "Identify orders with a greater than 20% discount.",
            "What is the total sales revenue for the current month?"
        ],
        "sql_queries": [
            "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM');",
            "SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID;",
            "SELECT EmployeeID, COUNT(OrderID) AS OrdersFulfilled FROM orders GROUP BY EmployeeID ORDER BY OrdersFulfilled DESC LIMIT 1;",
            "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM');",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY DATE_TRUNC('month', orders.OrderDate);",
            "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS Month, COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE NULL END) * 1.0 / COUNT(orders.OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Freight) AS TotalFreight FROM orders GROUP BY Month ORDER BY TotalFreight DESC LIMIT 1;",
            "SELECT ShipVia, COUNT(OrderID) AS UsageFrequency FROM orders GROUP BY ShipVia ORDER BY UsageFrequency DESC LIMIT 1;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscountGiven FROM [Order Details];",
            "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS SalesRevenue FROM [Order Details] GROUP BY ProductID ORDER BY SalesRevenue DESC LIMIT 5;",
            "SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCountry ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantitySold FROM [Order Details] GROUP BY ProductID;",
            "SELECT AVG(Discount) AS AvgDiscountRate FROM [Order Details];",
            "SELECT orders.OrderID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS OrderValue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.OrderID ORDER BY OrderValue DESC LIMIT 1;",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, COUNT(DISTINCT [Order Details].ProductID) AS UniqueProducts FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
            "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 5;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, (SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) - LAG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) OVER (ORDER BY DATE_FORMAT(OrderDate, '%Y-%m'))) / LAG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) OVER (ORDER BY DATE_FORMAT(OrderDate, '%Y-%m')) AS MonthlyGrowthRate FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT CustomerID, COUNT(OrderID) AS ShipmentsReceived FROM orders WHERE ShippedDate IS NOT NULL GROUP BY CustomerID ORDER BY ShipmentsReceived DESC LIMIT 1;",
            "SELECT ShipCountry, AVG(TotalOrderValue) AS AverageOrderValue FROM (SELECT orders.OrderID, ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID, ShipCountry) AS Subquery GROUP BY ShipCountry;",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(MONTH FROM o.OrderDate) = 1 AND EXTRACT(YEAR FROM o.OrderDate) = 2023;",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = 2 AND YEAR(o.OrderDate) = 2023;",
            "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate <= RequiredDate AND EXTRACT(QUARTER FROM OrderDate) = 1 AND EXTRACT(YEAR FROM OrderDate) = 2023;",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE MONTH(OrderDate) = 3 AND YEAR(OrderDate) = 2023;",
            "SELECT COUNT(DISTINCT od.OrderID) FROM [Order Details] od WHERE od.Discount > 0;",
            "SELECT COUNT(DISTINCT o.CustomerID) FROM orders o WHERE YEAR(o.OrderDate) = 2022;",
            "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT SUM(o.Freight) AS TotalFreightCost FROM orders o WHERE YEAR(o.ShippedDate) = 2022;",
            "SELECT COUNT(*) FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) > 7;",
            "SELECT o.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT AVG(od.Discount) AS AvgDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(MONTH FROM o.OrderDate) = 3 AND EXTRACT(YEAR FROM o.OrderDate) = 2023;",
            "SELECT o.ShipCountry, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipCountry ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT (CAST(COUNT(*) FILTER(WHERE od.Discount = 0) AS DECIMAL) / COUNT(*)) * 100 AS ZeroDiscountPercentage FROM [Order Details] od;",
            "SELECT COUNT(o.OrderID) FROM orders o WHERE o.ShippedDate < o.RequiredDate AND MONTH(o.ShippedDate) = 2 AND YEAR(o.ShippedDate) = 2023;",
            "SELECT SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2023;",
            "SELECT od.ProductID, AVG(od.Discount) AS AvgDiscount FROM [Order Details] od GROUP BY od.ProductID ORDER BY AvgDiscount DESC LIMIT 1;",
            "SELECT MONTH(o.OrderDate) AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2023 GROUP BY OrderMonth;",
            "SELECT o.ShipCity, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2022 GROUP BY o.ShipCity ORDER BY AvgOrderValue DESC LIMIT 1;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT o.CustomerID, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.CustomerID;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Year, Month;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID)) AS OnTimeRate FROM orders GROUP BY Month;",
            "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia;",
            "SELECT ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS RegionSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipRegion ORDER BY RegionSales DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;",
            "SELECT o.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT COUNT(DISTINCT OrderID) FROM [Order Details] WHERE Discount > 0.2;",
            "SELECT o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry ORDER BY AvgOrderValue DESC LIMIT 1;",
            "SELECT o.CustomerID, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.CustomerID ORDER BY OrderCount DESC LIMIT 5;",
            "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;",
            "SELECT AVG(t.QuantityPerOrder) FROM (SELECT OrderID, SUM(Quantity) AS QuantityPerOrder FROM [Order Details] GROUP BY OrderID) t;",
            "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.ProductID = (SELECT od.ProductID FROM [Order Details] od GROUP BY od.ProductID ORDER BY SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) DESC FETCH FIRST 1 ROWS ONLY) GROUP BY DATE_FORMAT(o.OrderDate, '%Y-%m');",
            "SELECT Month, MAX(TotalSales) AS TotalSales FROM (SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month) AS MonthlySales GROUP BY Month ORDER BY TotalSales DESC LIMIT 1 UNION SELECT Month, MIN(TotalSales) AS TotalSales FROM (SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month) AS MonthlySales GROUP BY Month ORDER BY TotalSales ASC LIMIT 1;",
            "SELECT CustomerID, COUNT(OrderID) - 1 AS RepeatOrderCount FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 1;",
            "SELECT o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / NULLIF(o.Freight, 0) AS ValuePerFreight FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID HAVING o.Freight > 0;",
            "SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate OR ShippedDate IS NULL;",
            "SELECT ShipVia, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipVia;",
            "SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY CustomerID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;",
            "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders WHERE OrderDate >= DATE_ADD(CURDATE(), INTERVAL -1 YEAR) GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1;",
            "SELECT ProductID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY ProductID ORDER BY SUM(UnitPrice * Quantity * (1 - Discount)) DESC FETCH FIRST 5 ROWS ONLY;",
            "SELECT CustomerID, DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID, DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT ShipRegion, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 1.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipRegion;",
            "SELECT AVG(SUM(Quantity)) AS AvgQuantity FROM [Order Details] GROUP BY OrderID;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalRevenue FROM [Order Details] GROUP BY ProductID ORDER BY TotalRevenue DESC LIMIT 10;",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN \"Order Details\" ON orders.OrderID = \"Order Details\".OrderID GROUP BY TO_CHAR(OrderDate, 'YYYY-MM') ORDER BY TotalSales DESC FETCH FIRST 1 ROW ONLY;",
            "SELECT ShipVia, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipVia;",
            "SELECT COUNT(CASE WHEN Discount = 0 THEN 1 END) / COUNT(*) AS ZeroDiscountProportion FROM [Order Details];",
            "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 5;",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS OrderMonth, COUNT(DISTINCT [Order Details].ProductID) AS DistinctProducts FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');",
            "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgDateVariance FROM orders;",
            "SELECT ShipRegion, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipRegion ORDER BY AvgFreight DESC;",
            "SELECT CONCAT(YEAR(OrderDate), '-Q', QUARTER(OrderDate)) AS OrderQuarter, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders GROUP BY CONCAT(YEAR(OrderDate), '-Q', QUARTER(OrderDate));",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m');",
            "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE EXTRACT(YEAR FROM orders.OrderDate) = 2023 GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM');",
            "SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY CustomerID;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS order_month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY order_month;",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS order_month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY order_month;",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS order_month, COUNT(*) AS number_of_orders FROM orders GROUP BY order_month ORDER BY number_of_orders DESC LIMIT 1;",
            "SELECT orders.ShipVia, SUM(orders.Freight) AS total_freight FROM orders GROUP BY orders.ShipVia;",
            "SELECT orders.CustomerID, COUNT(*) AS order_count FROM orders GROUP BY orders.CustomerID ORDER BY order_count DESC LIMIT 1;",
            "SELECT orders.EmployeeID, COUNT(*) AS orders_handled FROM orders GROUP BY orders.EmployeeID;",
            "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS product_sales FROM [Order Details] GROUP BY [Order Details].ProductID;",
            "SELECT AVG(t.discount_per_order) AS avg_discount FROM (SELECT OrderID, AVG([Order Details].Discount) AS discount_per_order FROM [Order Details] GROUP BY OrderID) t;",
            "SELECT COUNT(*) AS late_orders FROM orders WHERE orders.ShippedDate > orders.RequiredDate;",
            "SELECT [Order Details].ProductID, COUNT(*) AS product_count FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY product_count DESC LIMIT 1;",
            "SELECT ShipCountry, COUNT(*) AS orders_shipped FROM orders GROUP BY ShipCountry;",
            "SELECT orders.ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS region_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipRegion;",
            "SELECT orders.ShipName, COUNT(*) AS shipments_received FROM orders GROUP BY orders.ShipName ORDER BY shipments_received DESC LIMIT 1;",
            "SELECT COUNT(DISTINCT orders.OrderID) AS discount_orders FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE [Order Details].Discount > 0;",
            "SELECT AVG(orders.Freight) AS avg_freight FROM orders;",
            "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS product_revenue FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY product_revenue DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', orders.ShippedDate) AS order_month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY order_month ORDER BY order_month ASC;",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_TRUNC('month', orders.OrderDate);",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, COUNT(orders.OrderID) FILTER (WHERE orders.ShippedDate <= orders.RequiredDate) * 1.0 / COUNT(orders.OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
            "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN \"Order Details\" ON orders.OrderID = \"Order Details\".OrderID GROUP BY ShipCountry ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SalesValue FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month') GROUP BY ProductID ORDER BY SalesValue DESC LIMIT 1;",
            "SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY CustomerID;",
            "SELECT EmployeeID, COUNT(OrderID) AS FulfilledOrders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY EmployeeID ORDER BY FulfilledOrders DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, AVG([Order Details].Discount) AS AvgDiscount FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY Month ORDER BY TotalOrders DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
            "SELECT ShipVia, COUNT(OrderID) * 100.0 / (SELECT COUNT(OrderID) FROM orders) AS Percentage FROM orders GROUP BY ShipVia;",
            "SELECT ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] GROUP BY ProductID;",
            "SELECT ProductID, COUNT(ProductID) AS OrderFrequency FROM [Order Details] GROUP BY ProductID ORDER BY OrderFrequency DESC LIMIT 3;",
            "SELECT CustomerID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY CustomerID ORDER BY AvgOrderValue DESC LIMIT 1;",
            "SELECT ShipRegion, COUNT(OrderID) AS Frequency FROM orders GROUP BY ShipRegion ORDER BY Frequency DESC LIMIT 1;",
            "SELECT ShipCity, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCity;",
            "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT AVG(SUM([Order Details].Quantity)) AS AvgQuantityPerOrder FROM [Order Details] GROUP BY OrderID;",
            "SELECT MIN(OrderDate) AS EarliestOrder, MAX(OrderDate) AS LatestOrder FROM orders;",
            "SELECT EXTRACT(YEAR FROM orders.OrderDate) AS Year, EXTRACT(MONTH FROM orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Year, Month;",
            "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;",
            "SELECT orders.EmployeeID, COUNT(orders.OrderID) AS NumberOfOrders FROM orders GROUP BY orders.EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] GROUP BY ProductID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageFulfillmentTime FROM orders;",
            "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / COUNT(orders.OrderID) * 100.0 AS OnTimeDeliveryRate FROM orders;",
            "SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipCountry ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] GROUP BY [Order Details].ProductID;",
            "SELECT COUNT(orders.OrderID) FROM orders WHERE EXTRACT(YEAR FROM orders.OrderDate) = EXTRACT(YEAR FROM orders.ShippedDate) AND EXTRACT(MONTH FROM orders.OrderDate) = EXTRACT(MONTH FROM orders.ShippedDate);",
            "SELECT orders.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.CustomerID ORDER BY TotalRevenue DESC;",
            "SELECT EXTRACT(WEEK FROM orders.OrderDate) AS Week, EXTRACT(YEAR FROM orders.OrderDate) AS Year, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS WeeklySales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY Year, Week ORDER BY Year, Week;",
            "SELECT orders.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.CustomerID ORDER BY TotalRevenue DESC LIMIT 5;",
            "SELECT orders.ShipCity, COUNT(orders.OrderID) AS NumberOfShipments FROM orders GROUP BY orders.ShipCity ORDER BY NumberOfShipments DESC LIMIT 1;",
            "SELECT SUM([Order Details].Quantity) / COUNT(DISTINCT orders.OrderID) AS AverageQuantityPerOrder FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalDiscountedSales FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE [Order Details].Discount > 0;",
            "SELECT MAX([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MaxOrderValue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID;",
            "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;",
            "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY CustomerID;",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductSales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1' month) AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE) GROUP BY od.ProductID ORDER BY ProductSales DESC LIMIT 1;",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= '2023-02-01' AND o.OrderDate < '2023-03-01';",
            "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID ORDER BY TotalRevenue DESC LIMIT 5;",
            "SELECT AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgFulfillmentTime FROM orders o WHERE o.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE);",
            "SELECT COUNT(o.OrderID) / (SELECT COUNT(OrderID) FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = 2023 AND EXTRACT(MONTH FROM OrderDate) = 3) AS OnTimeRate FROM orders o WHERE o.ShippedDate <= o.RequiredDate AND EXTRACT(YEAR FROM o.OrderDate) = 2023 AND EXTRACT(MONTH FROM o.OrderDate) = 3;",
            "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = 2023 AND EXTRACT(MONTH FROM OrderDate) = 4 GROUP BY ShipVia ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = 2022 GROUP BY od.ProductID;",
            "SELECT SUM(Freight) AS TotalFreight FROM orders WHERE ShipCountry = 'Germany';",
            "SELECT COUNT(DISTINCT ProductID) FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-03-31';",
            "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT SUM(UnitPrice * Quantity * UnitPrice * Discount) AS TotalDiscount FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = 2023;",
            "SELECT ShipRegion, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipRegion ORDER BY OrderCount DESC LIMIT 3;",
            "SELECT * FROM orders WHERE ShipCity = 'London';",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' GROUP BY ShipCountry;",
            "SELECT ShipCity, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCity ORDER BY AvgOrderValue DESC LIMIT 1;",
            "SELECT OrderID FROM [Order Details] WHERE Discount > 0.20;",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE);"
        ],
        "reviews": [
            "The original query uses DATE_FORMAT, which is not part of the ANSI SQL standard. Changed it to TO_CHAR with 'YYYY-MM' for ANSI compliance.",
            "The SQL query correctly counts the number of orders placed by each customer by grouping the results by CustomerID and counting the OrderID, which represents each order. The query adheres to the structure needed to answer the question accurately.",
            "The query is correct. It correctly counts the number of orders fulfilled by each employee and orders the result to find the employee with the most orders.",
            "The original query uses DATE_FORMAT, which is not ANSI SQL; instead, TO_CHAR should be used to format the date. The rest of the query correctly calculates the average order value per month.",
            "The original query uses DATE_FORMAT which is not ANSI SQL. Replaced with DATE_TRUNC for monthly aggregation.",
            "The original query mostly works, but DATE_FORMAT doesn't follow ANSI SQL. I replaced it with TO_CHAR, which is compatible with more SQL databases. The division should ensure it returns a decimal by multiplying the numerator by 1.0.",
            "The original query used MAX(Freight) instead of SUM(Freight) to calculate the total freight cost for each month. To determine which month had the highest total freight cost, we need to use SUM to aggregate the freight costs per month. The corrected query fixes this error.",
            "The SQL query is correct. It groups orders by ShipVia to count the frequency of each shipping method, orders by the frequency in descending order, and limits the result to the most frequently used shipping method.",
            "The SQL query correctly calculates the total discount given on orders by multiplying unit price, quantity, and discount for each order detail. The query is correct and requires no changes.",
            "The SQL query is correct and accurately computes the total sales revenue for each product and lists the top 5 products.",
            "The SQL query correctly calculates the number of orders per country, orders them by the count in descending order, and limits the result to one country with the highest number of orders. The query is correct and accurately addresses the business question.",
            "The SQL query is correct. It accurately counts the number of orders where the ShippedDate is later than the RequiredDate, based on the provided schema.",
            "The SQL query correctly calculates the total quantity sold for each product by summing up the 'Quantity' column and grouping by 'ProductID' in the '[Order Details]' table.",
            "The SQL query correctly calculates the average discount rate applied to orders using the AVG function on the Discount column in the [Order Details] table. No changes are needed.",
            "The SQL query is correct. It calculates the total value of each order by summing up the product of UnitPrice, Quantity, and (1 - Discount) for each order. It then orders the result set by this calculated OrderValue in descending order and limits the result to the top entry, effectively finding the largest order by value.",
            "The query is mostly correct, but the table aliasing for '[Order Details]' was missing in the SELECT part. It's necessary to specify the table name for 'ProductID' to ensure correct execution.",
            "The SQL query is correct and accurately answers the business question by listing the cities with the highest number of orders, ordered in descending order. The LIMIT 5 clause is appropriate for selecting the top 5 cities.",
            "The query incorrectly uses 'ORDER BY OrderDate' in the LAG function. It should group by and order by the formatted date 'DATE_FORMAT(OrderDate, '%Y-%m')' to accurately calculate the monthly growth rate. The updated query orders and groups by the formatted 'Month'.",
            "The query needs to consider only orders that have been shipped. Therefore, a WHERE clause should be added to filter out records where ShippedDate is NULL.",
            "The SQL query is correct. It calculates the average order value for each shipping country by first computing the total value of each order and then averaging those values grouped by ShipCountry.",
            "The original query uses non-standard functions for DATE extraction. ANSI SQL uses the EXTRACT function.",
            "The query correctly calculates the total sales revenue for each product by multiplying the unit price by the quantity and applying the discount. It then orders the results by total sales in descending order and limits the output to the top result, which answers the question correctly. The query is correct.",
            "The query is correct. It joins the orders with order details and calculates the average order value using the specified formula, filtering for February 2023 based on the OrderDate.",
            "Correct the function for extracting the quarter and year to ANSI SQL standard by using EXTRACT with QUARTER and YEAR.",
            "The SQL query is correct according to the provided business question and metric definition. It calculates the average time between the order date and the shipped date for orders placed in March 2023.",
            "The original query counts the number of order details with a discount, but to find how many distinct orders had a discount, we should count distinct OrderIDs.",
            "The SQL query correctly counts the distinct CustomerID values in the orders table where the OrderDate falls within the year 2022, using the YEAR function to extract the year from the date. This query accurately addresses the business question. The query is correct according to ANSI SQL standards.",
            "The given SQL query correctly identifies the top 5 customers by total sales revenue. The query joins the 'orders' table with the '[Order Details]' table, calculates the total sales using the formula provided, groups the results by 'CustomerID', orders them by 'TotalSales' in descending order, and limits the output to the top 5 customers.",
            "The original query filtered on the OrderDate, but the question specifies orders shipped in 2022, so it should use the ShippedDate column.",
            "The SQL query correctly calculates orders with a fulfillment time greater than 7 days. It uses DATEDIFF to compare the ShippedDate and OrderDate, which is aligned with the question's requirement.",
            "The SQL query is correct. It appropriately counts the number of orders processed by each employee using COUNT, groups by EmployeeID to aggregate the count, and orders the result in descending order to find the employee with the most orders. The LIMIT 1 clause ensures that only the employee with the highest order count is returned.",
            "The original query is mostly correct but uses non-standard functions for extracting month and year. Replaced with ANSI SQL standard 'EXTRACT' function.",
            "The query is correct. It selects the country with the highest order count by grouping orders by 'ShipCountry' and ordering them in descending order based on the count of 'OrderID'. The 'LIMIT 1' clause ensures only the top country is returned.",
            "The original query attempted to compute the percentage but did not handle integer division correctly, which could lead to an unintended result. Casting the count of zero discount orders to DECIMAL ensures accurate division.",
            "The original query checked the month and year on OrderDate instead of ShippedDate. This needs to be corrected to filter shipped orders accurately.",
            "The SQL query is correct and calculates the total quantity of products ordered in 2023.",
            "The SQL query is correct. It calculates the average discount for each product and returns the product with the highest average discount, using the appropriate ORDER BY and LIMIT clauses.",
            "The SQL query correctly calculates the total sales revenue for each month in 2023 by joining the orders and [Order Details] tables, filtering for the year 2023, and grouping by month.",
            "The SQL query is correct. It calculates the average order value per city, filters for orders in 2022, groups the results by city, and orders them to find the one with the highest average order value.",
            "The given SQL query is mostly correct. The main issue is that 'Month' should be grouped by the expression DATE_FORMAT(o.OrderDate, '%Y-%m'), not by 'Month' alias.",
            "The SQL query is correct. It selects the CustomerID and counts the number of OrderID for each customer, grouping by CustomerID.",
            "The original query incorrectly uses DATE_FORMAT, which is not standard in ANSI SQL. The correct approach is to use EXTRACT for year and month, grouping by both year and month to maintain consistency with the monthly granularity.",
            "The original query was mostly correct, but for proper percentage calculation, the COUNT for on-time orders should be multiplied by 100.0 instead of just 100 to ensure the division is performed as floating-point division.",
            "The SQL query is correct. It counts the number of orders for each shipping method by selecting the ShipVia column and applying the COUNT function on OrderID, while grouping the results by ShipVia.",
            "The query is correct. It joins the 'orders' and '[Order Details]' tables, calculates the total sales revenue per region, and selects the region with the highest sales revenue.",
            "The SQL query is mostly correct but the DATE_FORMAT function is not part of the ANSI SQL standard. Instead, we use DATE_TRUNC to get the month part of the date. Everything else in the query correctly calculates the total discount.",
            "The SQL query correctly answers the business question by counting the number of orders managed by each employee and ordering the result in descending order to get the employee with the most orders. The use of GROUP BY, COUNT, and LIMIT is appropriate and the query is syntactically correct.",
            "The original query only counts the rows in [Order Details] with a discount greater than 20%. However, the question asks for how many orders have this discount. Therefore, we need to count distinct OrderIDs to ensure each order is counted only once.",
            "The query is correct. It calculates the average order value per shipping country and orders the results to find the highest value. The LIMIT 1 clause ensures only the top result is returned.",
            "The SQL query is correct. It selects the CustomerID and counts the OrderIDs to determine the number of orders per customer. It then orders the results in descending order by OrderCount and limits the output to the top 5 customers, as required by the question.",
            "The SQL query is correct. It properly calculates the total freight cost by grouping the orders by the shipping method (ShipVia) and summing the Freight for each group.",
            "The original query calculates the average quantity per line item instead of per order. The corrected query calculates the sum of quantities per order first and then takes the average of these sums.",
            "The original query uses the LIMIT clause, which is not standardized in ANSI SQL. It should be replaced with FETCH FIRST 1 ROWS ONLY to align with the ANSI SQL standard. Additionally, the GROUP BY should match the SELECT alias 'Month'.",
            "The original query aims to find the months with the highest and lowest total sales, but it has a focus issue using LIMIT directly in UNION without proper context segregation. To show distinct top and bottom months, the calculation of total sales should be done in a subquery, followed by finding the max and min sales separately, ensuring clarity and correctness.",
            "The original query incorrectly uses a boolean expression for 'RepeatOrder'. The revised query calculates repeat order counts by subtracting one to account for the first order. Only customers with more than one order are shown.",
            "The original query is missing a GROUP BY clause which is necessary to aggregate data per order. Additionally, to prevent division by zero, use NULLIF to handle cases where Freight is zero. HAVING is used instead of WHERE because aggregation functions are involved.",
            "The query correctly counts the number of orders where the ShippedDate is either after the RequiredDate or not yet shipped (NULL). No corrections needed.",
            "The query is correct. It accurately calculates the total revenue generated by each shipping method by joining the 'orders' and '[Order Details]' tables, and grouping by 'ShipVia.'",
            "The SQL query correctly calculates the total sales value for each customer and retrieves the customer with the highest total sales. The JOIN and GROUP BY clauses are appropriately used, and the result is ordered and limited to return the top customer, correctly addressing the business question.",
            "The SQL query correctly calculates the number of orders shipped late for each month by comparing ShippedDate with RequiredDate. It appropriately groups the results by the monthly OrderDate using DATE_FORMAT.",
            "The SQL query correctly computes the total freight cost for orders grouped by the country to which they were shipped. Therefore, the query is accurate and aligns with the business question.",
            "The original SQL query is mostly correct. However, 'DATE_SUB(CURDATE(), INTERVAL 1 YEAR)' is not standard ANSI SQL. I've replaced it with 'DATE_ADD(CURDATE(), INTERVAL -1 YEAR)', which is the ANSI standard for subtracting a year from the current date.",
            "The original query is almost correct, but 'LIMIT 5' is not part of the ANSI SQL standard. Instead, use the 'FETCH FIRST 5 ROWS ONLY' clause.",
            "The SQL query correctly calculates the number of orders placed by each customer per month using the DATE_FORMAT function to extract the year and month from the OrderDate. The aggregation and grouping are done correctly with COUNT(OrderID) and GROUP BY clauses.",
            "The original query mistakenly used an incorrect method to calculate the on-time delivery rate. The first COUNT was incorrectly used and the division should ensure floating point division. The corrected query calculates the on-time delivery rate by counting the orders delivered on or before the required date and dividing by the total orders for each region.",
            "The original query calculates the average quantity per product, not per order. The corrected query calculates the average quantity per order by first summing the quantities for each order and then averaging these sums.",
            "The query incorrectly calculates the average order value using AVG instead of the specified formula. Corrected to use SUM and COUNT as per metric definition.",
            "The SQL query correctly calculates the total revenue per product by summing up the product of UnitPrice, Quantity, and (1 - Discount) for each ProductID. It then orders these sums in descending order and limits the output to the top 10 products. The query is correct as per the business question.",
            "The original query used DATE_FORMAT, which is not ANSI SQL standard. I replaced it with TO_CHAR, adhering to ANSI SQL. Also, used double quotes for the table name [Order Details].",
            "The query is correct. It selects the shipping method (ShipVia) and counts the number of orders, grouping by the shipping method to provide the total number of orders for each method.",
            "The query correctly calculates the proportion of order details with a zero discount applied. The division of COUNT(CASE WHEN Discount = 0 THEN 1 END) by COUNT(*) provides the desired proportion.",
            "The SQL query correctly calculates the number of orders shipped per city and returns the top five cities with the most orders. No correction is needed.",
            "The original query uses DATE_FORMAT, which is not ANSI SQL standard. The corrected query uses TO_CHAR for formatting dates.",
            "The SQL query is correct. It calculates the average difference between the ShippedDate and RequiredDate, which reflects the average shipment date variance from the required date.",
            "The SQL query correctly selects ShipRegion and calculates the average freight cost. GROUP BY is used to aggregate data by region, and ORDER BY sorts the results by average freight cost in descending order. The query aligns well with the provided business question.",
            "The original query uses DATE_FORMAT with an incorrect format for quarters ('%Y-Q%q'). ANSI SQL doesn't support DATE_FORMAT. Instead, QUARTER() function is used to calculate the quarter.",
            "The SQL query is almost correct, but the GROUP BY clause must explicitly match the alias used in the SELECT clause. The corrected query has the DATE_FORMAT function also in the GROUP BY.",
            "The original SQL query uses the non-standard `DATE_FORMAT` function. Replaced it with `TO_CHAR` for standard compliance. Also, corrected the `YEAR` function to `EXTRACT(YEAR FROM ...)` and ensured usage of standard SQL functions.",
            "The SQL query is correct and accurately retrieves the number of orders placed by each customer in 2023.",
            "The original query is mostly correct, but the 'GROUP BY' clause should explicitly group by the formatted 'OrderDate'. The corrected query reflects this change.",
            "The SQL query is correct and calculates the total sales revenue per month by grouping the revenue generated from each order. The use of DATE_TRUNC to group data by month and the SUM function to calculate total sales matches the metric definition.",
            "The SQL query correctly calculates the average order value per month by grouping orders by truncated month. It joins the 'orders' table with the '[Order Details]' table and uses the formula for average order value as defined in the business metrics.",
            "The SQL query is correct. It selects the month from the OrderDate, counts the number of orders per month, groups the results by month, orders the results by the number of orders in descending order, and limits the result to one record to find the month with the highest number of orders.",
            "The SQL query is correct and does what is required by calculating the total freight cost for each shipping method.",
            "The query is correct as it selects the CustomerID and counts the number of orders each customer has placed, groups the results by CustomerID, and orders them in descending order to find the customer with the most orders.",
            "The SQL query correctly retrieves the number of orders handled by each employee by counting the OrderID for each EmployeeID in the orders table.",
            "The SQL query is correct. It calculates the total sales revenue for each product by summing the revenue (UnitPrice * Quantity * (1 - Discount)) for each ProductID in the [Order Details] table.",
            "The original query calculates the average discount across all line items, not per order. The corrected query calculates the average discount per order first and then finds the overall average.",
            "The SQL query is correct and accurately counts the number of orders shipped after the required date.",
            "The query is correct. It accurately finds the most frequently shipped product by counting occurrences of each ProductID in the [Order Details] table and ordering the result to get the one with the highest count.",
            "The SQL query is correct and retrieves the number of orders shipped to each country using the specified grouping and counting method.",
            "The SQL query is correct. It selects the shipping region and calculates the total sales revenue using the formula provided for each region and groups the results by ShipRegion.",
            "The SQL query is correct for the given question. It selects the shipping recipient (ShipName) and counts the number of shipments they have received, groups by ShipName, orders the results by shipments received in descending order, and limits the output to the top result.",
            "The SQL query correctly counts the distinct number of orders that include products with a discount greater than 0. It joins the 'orders' table with the '[Order Details]' table and uses a WHERE clause to filter for discounted products. The query is correct.",
            "The SQL query correctly calculates the average freight per order by using the AVG function on the Freight column from the orders table.",
            "The query is correct. It calculates the total revenue for each product and orders the results in descending order, limiting to the product with the highest revenue.",
            "Corrected the aggregation to group by the shipping month rather than order date, as this aligns with actual fulfillment data.",
            "The original query is almost correct, but the GROUP BY clause should explicitly use DATE_TRUNC('month', orders.OrderDate) to match the SELECT clause exactly. Corrected this in the provided query.",
            "The query correctly calculates the average order value by month. However, DATE_TRUNC function is non-standard SQL and specific to some SQL dialects like PostgreSQL. Use standard SQL by extracting the year and month values.",
            "The original query is mostly correct but needs a slight adjustment to ensure precise division and avoid integer division. Multiplying by 1.0 converts the result to a decimal format, which correctly calculates the percentage value.",
            "The original query is almost correct, but needs adjustments for SQL syntax consistency. Using double quotes for table names with spaces, such as \"Order Details\", is recommended in ANSI SQL to ensure compatibility. The rest of the query logic is correct for calculating total sales by country and limiting the results to the top 5.",
            "The query is mostly correct but the logic to capture the last month is incorrect. DATE_TRUNC returns the start of the current month, so using DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' will give the last day of the previous month. It should use DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' only for the start of last month and DATE_TRUNC('month', CURRENT_DATE) as the end of last month. Here's the corrected query:\n\nSELECT ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SalesValue FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND OrderDate < DATE_TRUNC('month', CURRENT_DATE)) GROUP BY ProductID ORDER BY SalesValue DESC LIMIT 1;",
            "The SQL query correctly calculates the total number of orders placed by each customer by grouping the orders based on CustomerID and using the COUNT function. No corrections are needed.",
            "The query should count only fulfilled orders, so it should include a condition to ensure that orders have been shipped. The condition 'WHERE ShippedDate IS NOT NULL' has been added.",
            "The SQL query correctly calculates the average discount per month by joining the 'orders' and '[Order Details]' tables on 'OrderID'. It aggregates the average discount for each month using DATE_TRUNC on 'OrderDate' and appropriately groups by the truncated date.",
            "The SQL query is correct and accurately answers the business question. The use of DATE_TRUNC to aggregate the data by month and COUNT to count the number of orders per month is appropriate. The query correctly orders by TotalOrders in descending order and limits the result to 1 to find the month with the highest number of orders.",
            "The original query correctly calculates the total freight cost per month. However, to ensure consistency, the GROUP BY clause should exactly match the expression used in SELECT. Ensure 'DATE_TRUNC('month', OrderDate)' is used in both SELECT and GROUP BY.",
            "The SQL query is correct for the given question. It calculates the percentage of orders shipped using each shipping method (ShipVia) by taking the count of orders for each method, dividing by the total count of orders, and multiplying by 100.",
            "The query accurately calculates the total sales for each product by multiplying the unit price, quantity, and the discount factor for each order detail, and then aggregating the results by ProductID. The SQL syntax is correct and matches the business question.",
            "The SQL query correctly counts the occurrences of each ProductID in the [Order Details] table and orders them by frequency in descending order, selecting the top 3. Therefore, it is correct.",
            "The original query has incorrect use of AVG and SUM. Nested aggregation functions should be avoided. The query should calculate the average order value per customer and then find the maximum.",
            "The query is correct. It groups the records by ShipRegion, counts the number of orders for each region, orders the result by frequency in descending order, and limits the result to the top region.",
            "The SQL query seems correct. It calculates the total sales amount for each city by joining the 'orders' and '[Order Details]' tables on 'OrderID' and grouping the result by 'ShipCity'. The formula for total sales matches the provided business metrics definition.",
            "The SQL query is correct. It accurately selects OrderID from the orders table where the ShippedDate is later than the RequiredDate.",
            "The original query calculates the average quantity of items without considering it per order. The corrected query groups by OrderID to first calculate the sum of quantities for each order and then averages those sums.",
            "The SQL query correctly identifies the earliest and latest order dates using MIN and MAX functions on the OrderDate column in the orders table. The SQL query is correct.",
            "The query is correct and follows the provided business metrics definition for calculating the average order value on a monthly basis. The extraction of Year and Month from OrderDate for grouping is correctly applied.",
            "The SQL query correctly calculates the total freight cost per shipping method by using the SUM function on the Freight column and grouping by ShipVia. The query is correct as per the business question.",
            "The query is correct. It selects the EmployeeID and counts the number of orders associated with each employee, grouping by EmployeeID and ordering by the NumberOfOrders in descending order. It uses LIMIT 1 to get the employee with the highest number of orders.",
            "The query correctly calculates the total sales per product and orders them in descending order to determine the product with the highest contribution. It sums UnitPrice * Quantity * (1 - Discount) for each product and limits the result to 1 to find the top product. No errors were found in the SQL syntax or logic.",
            "The provided SQL query correctly calculates the average fulfillment time for orders using the DATEDIFF function. It matches the metric definition provided in the schema.",
            "The query is mostly correct, but to ensure accurate calculation as a percentage with decimal precision, append '.0' after '100' in the multiplication.",
            "The SQL query correctly calculates the total revenue per shipping country and returns the country with the highest revenue. The query joins the 'orders' and '[Order Details]' tables on 'OrderID', groups by 'ShipCountry', and orders the results by 'TotalRevenue' in descending order, selecting the top result using LIMIT 1. This matches the business question requirements.",
            "The query correctly calculates the average discount given on all orders by averaging the Discount column from the [Order Details] table. No changes are needed.",
            "The SQL query correctly calculates the total quantity of each product ordered by summing the 'Quantity' column from the '[Order Details]' table and grouping the results by 'ProductID'. The query is correct and follows the given schema.",
            "The query correctly calculates the number of orders placed and completed within the same month by comparing the year and month of OrderDate and ShippedDate.",
            "The SQL query correctly calculates the total revenue contribution for each customer by joining the 'orders' and '[Order Details]' tables on 'OrderID', grouping by 'CustomerID', and summing the revenue. The query is well-formed as per standard SQL guidelines.",
            "The original query is mostly correct but missing a condition to limit the data to the past year. Added a WHERE clause with DATE_SUB function to filter orders from the past year.",
            "The SQL query correctly identifies the top 5 customers by total revenue. It properly joins the orders and [Order Details] tables and calculates the revenue with a correct SUM function while applying the discount. The use of GROUP BY and ORDER BY is appropriate, and LIMIT 5 accurately limits the result to the top 5 customers.",
            "The SQL query correctly identifies the city that received the most shipments by counting the number of orders grouped by ShipCity and ordering them in descending order, limiting the result to the top one city. The query is correct.",
            "The original query calculates the average quantity per order detail instead of per order. By using SUM of quantities divided by the COUNT of distinct orders, we address the correct calculation of average quantity per order.",
            "The SQL query is correctly calculating the total sales revenue from orders with a discount. The use of an INNER JOIN is unnecessary for this specific calculation as we're focusing only on the '[Order Details]' table for the discount condition. However, if we need to ensure the orders are valid and exist, it's appropriate. Otherwise, the query functions without the need for additional joins.",
            "The SQL query is correctly written for the business question. It calculates the maximum order value by considering the product of UnitPrice, Quantity, and the discount factor.",
            "The query is correct for calculating the total sales revenue for each month. However, the function DATE_FORMAT() is not part of ANSI SQL; instead, you should use the ANSI SQL function EXTRACT() to extract the month and year for grouping. Here's the corrected SQL query using EXTRACT:\nSELECT EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Year, Month;",
            "The SQL query is correct and retrieves the number of orders placed by each customer in January 2023.",
            "The original query uses the non-standard DATE_FORMAT function. It's corrected to use DATE_TRUNC for ANSI SQL compliance, applying a more precise monthly filter for last month's orders.",
            "The original query used DATE_FORMAT which is not ANSI SQL compliant. Instead, I've used a range to filter dates for February 2023.",
            "The SQL query correctly calculates total sales revenue for each customer and returns the top 5 customers based on this revenue. It properly joins the 'orders' and '[Order Details]' tables and calculates the total revenue using the formula provided in the metrics. The query groups by CustomerID, orders by total revenue in descending order, and limits the results to 5, which matches the business question requirements.",
            "The query is mostly correct but the function DATEADD should be used with the ANSI SQL standard instead of the non-standard INTERVAL syntax.",
            "The original query incorrectly uses DATE_FORMAT, which is not ANSI SQL. The corrected query uses EXTRACT to filter year and month.",
            "The SQL query is correct. It correctly selects orders where the ShippedDate is later than the RequiredDate, indicating late shipments.",
            "The original query uses a function DATE_FORMAT which is not part of ANSI SQL. Replaced with EXTRACT function for year and month.",
            "The SQL query is mostly correct, but the ANSI SQL standard should use EXTRACT(YEAR FROM o.OrderDate) instead of YEAR(o.OrderDate).",
            "The SQL query is correct. It accurately calculates the total freight cost for orders shipped to Germany by summing the Freight column where the ShipCountry is 'Germany'.",
            "The SQL query correctly counts the distinct ProductIDs from the 'Order Details' table for orders placed between January 1, 2023, and March 31, 2023. It joins the 'Order Details' table with the 'orders' table using the OrderID and filters based on OrderDate. The query is correct as written.",
            "The query is correct. It accurately selects the employee with the highest number of orders by counting and ordering the results in descending order, then limiting the result to the top entry.",
            "The original query incorrectly calculates the discount by omitting the UnitPrice factor. It should be UnitPrice * Quantity * Discount, but the total discount is calculated by multiplying this expression again by UnitPrice. Correcting that and using EXTRACT for the year.",
            "The SQL query is correct. It successfully selects the 'ShipRegion' and counts the number of 'OrderID's, grouping by 'ShipRegion' to get the count per region. It orders these counts in descending order and limits the result to the top 3 regions.",
            "The query is correct. It selects all columns from the 'orders' table where the 'ShipCity' is 'London', which accurately answers the business question.",
            "The original SQL query is missing the grouping by the formatted date string. The corrected query explicitly uses the same expression in the GROUP BY clause as used in the SELECT clause.",
            "The original query incorrectly calculates the last quarter. It uses 'CURDATE() - INTERVAL 3 MONTH', which does not align with a quarterly time frame. The correction uses 'DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months'' to obtain the start of the last quarter.",
            "The query is correct. It selects the city with the highest average order value by joining the 'orders' and '[Order Details]' tables, calculating the average order value for each city, grouping by ShipCity, and ordering the results in descending order to find the highest average.",
            "The SQL query correctly selects orders from the '[Order Details]' table that have a discount greater than 20%. The query is accurate and follows the question requirements.",
            "The SQL query correctly calculates the total sales revenue for the current month by joining orders with the order details table and applying the formula for Total Sales. The WHERE clause filters orders to only include those from the current month and year using the MONTH and YEAR functions with CURRENT_DATE."
        ],
        "difficulty": [
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "easy",
            "advanced",
            "medium",
            "easy",
            "easy"
        ]
    },
    "Customer Analysis": {
        "questions": [
            "What is the total revenue generated by each customer?",
            "Which customers have placed more than 10 orders?",
            "What is the average freight cost per shipment?",
            "List the top 5 most frequently ordered products.",
            "What is the Customer Lifetime Value for each customer?",
            "How many customers are there in each country?",
            "Which orders were shipped late?",
            "What is the total discount given in each region?",
            "List all customers who have not placed any orders.",
            "Which month had the highest total sales?",
            "What is the average order value for each customer?",
            "How many orders were placed in the last year?",
            "Which product has the highest average discount?",
            "Find customers who have placed orders in multiple regions.",
            "What is the Customer Retention Rate for the last month?",
            "List the customers who spent more than $5000 in total.",
            "Which city has the highest number of customers?",
            "What is the total quantity ordered for each product?",
            "Which employee handled the most orders?",
            "What is the percentage of orders that were delivered on time?",
            "Which countries have the highest number of customers?",
            "Find the top 5 customers with the highest lifetime value.",
            "How many orders were placed each month in 2022?",
            "Determine the average freight cost for each shipping method.",
            "Which product has the highest total sales?",
            "Identify the most common title among contact persons.",
            "Calculate the average discount given on all orders.",
            "Find the top 3 cities with the most orders placed.",
            "Determine the percentage of orders shipped on time.",
            "What are the total sales for each country?",
            "Calculate the customer retention rate for the last year.",
            "Find customers with more than one order in a single month.",
            "Identify the most frequently used shipping country.",
            "Which month had the highest total order value in the last year?",
            "What is the total number of products ordered by each customer?",
            "Determine the average order value for each customer.",
            "Find out which employee has handled the most orders.",
            "Calculate the total revenue for orders shipped after their required date.",
            "What is the average time taken to ship an order?",
            "What is the average order value for customers residing in Germany?",
            "How many orders have been shipped to each country?",
            "What is the distribution of orders placed in each month of 2022?",
            "Which customer has the highest lifetime value?",
            "List the top 5 products by revenue.",
            "Identify customers who have not placed any orders in the last year.",
            "What is the average freight cost for orders shipped via each shipping method?",
            "How many products were ordered on the first order of each customer?",
            "What is the customer retention rate for the past quarter?",
            "Which city has the highest number of unique customers?",
            "Determine the total number of orders delayed beyond the required date.",
            "Find out the largest order (by value) and the customer who placed it.",
            "What is the total discount given to each customer?",
            "How many orders were placed by customers with 'Manager' in their title?",
            "What is the trend in the number of orders over the last year?",
            "Which country has the highest freight cost in total?",
            "Calculate the average discount offered per order.",
            "How many orders include products with a discount greater than 20%?",
            "What is the total number of orders placed by each customer?",
            "Which customer has spent the most on orders?",
            "What is the average discount applied to all orders?",
            "How many orders were shipped after the required date?",
            "What is the total revenue generated from each customer?",
            "Which product has the highest total sales quantity?",
            "What is the average freight cost per order?",
            "How many customers are from each country?",
            "What is the percentage of orders with a discount greater than 10%?",
            "List the top 5 customers by the order count.",
            "What is the average unit price for products across all orders?",
            "Find the customer with the most orders that were shipped before the required date.",
            "What is the average number of days between order date and shipped date?",
            "Which region generates the most revenue?",
            "What is the most common shipping method used?",
            "Identify customers who have placed orders in more than three distinct months.",
            "What is the revenue distribution by order for each customer?",
            "What is the retention rate of customers over the last year?",
            "How many orders did each employee process?",
            "Which country has the highest number of orders?",
            "Identify the top 5 products by total sales value.",
            "How many customers from each city have made a purchase?",
            "Calculate the Customer Lifetime Value for each customer.",
            "Which customers are located in a specific city?",
            "How many orders were shipped in the last month?",
            "What are the top 5 countries with the most customers?",
            "Which orders have a discount greater than 10%?",
            "List the top 5 customers by lifetime value.",
            "How many unique products have been ordered in total?",
            "Identify customers who have placed more than 10 orders.",
            "Calculate the total discount given across all orders.",
            "How many orders have been delayed beyond the required date?",
            "What is the average number of days between order and shipment?",
            "Find the most ordered product.",
            "What is the customer retention rate for the last year?",
            "List all orders that have not been shipped yet.",
            "How many customers are there in each region?",
            "Find the order with the highest total value.",
            "Which customers have placed more than five orders?",
            "What is the average freight cost per order by shipping country?",
            "Which product has the highest average discount given across all orders?",
            "List the top 5 cities with the highest number of distinct customers.",
            "Identify the customers who have not placed any orders in the last year.",
            "What percentage of orders were shipped within the required date?",
            "Find the customer with the longest average time between orders.",
            "What is the total quantity ordered for each product across all orders?",
            "Which employees have managed the highest number of distinct customers?",
            "What is the average number of orders placed per customer per month?",
            "Which shipping country has the highest average freight cost?",
            "Identify the order IDs where the total discount applied was more than $100.",
            "What is the most common contact title among customers?",
            "List customers with the highest total discounted revenue.",
            "What is the retention rate of customers from the previous quarter?",
            "Which shipping method is most frequently used?",
            "Identify orders where the shipping address differs from the customer address.",
            "Calculate the average Order-to-Shipment time in days.",
            "How many orders have been shipped but not yet delivered by country?",
            "Which product had the highest sales in terms of quantity?",
            "What are the top 5 cities by number of customers?",
            "How many orders were placed each month last year?",
            "What is the average discount applied across all orders?",
            "Identify customers with the highest lifetime value.",
            "How many orders include more than three products?",
            "What is the retention rate for customers over the last quarter?",
            "Which employees have handled the most orders?",
            "In which month was the highest total revenue earned?",
            "What is the percentage of orders with a discount?",
            "How many distinct products are ordered per customer?",
            "Which customer has the longest duration between order date and shipped date?",
            "What is the average number of products per order?",
            "Which customer ordered the highest quantity of products last year?",
            "How much revenue was generated in Europe last month?",
            "Identify the shipping methods with the highest number of deliveries.",
            "What is the total revenue generated by each customer over their lifetime?",
            "Which customers placed the highest number of orders?",
            "What is the average order value per customer?",
            "Which employees have processed the most orders?",
            "What is the total freight cost for all shipped orders?",
            "How many orders were shipped to each country?",
            "Which products have the highest total sales?",
            "What is the retention rate of customers from last year?",
            "Which customer has received the highest discount on an order?",
            "What is the distribution of customers by country?",
            "How many customers placed orders during a specific quarterly period?",
            "Which city has the most customers?",
            "What is the most common shipping method used by customers?",
            "Which product has been ordered by the most unique customers?",
            "How many orders are still pending shipment?",
            "What is the average discount given across all orders?",
            "Which products are frequently ordered together?",
            "What is the percentage of late shipments?",
            "How many times have customers in each region ordered more than once in a month?",
            "What is the total number of customers from each country?",
            "Which are the top 5 customers based on total order value?",
            "How many orders were placed by each region?"
        ],
        "sql_queries": [
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
            "SELECT c.CustomerID, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID HAVING COUNT(o.OrderID) > 10;",
            "SELECT AVG(o.Freight) AS AverageFreightCost FROM orders o;",
            "SELECT od.ProductID, COUNT(od.ProductID) AS Frequency FROM [Order Details] od GROUP BY od.ProductID ORDER BY Frequency DESC LIMIT 5;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerLifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
            "SELECT c.Country, COUNT(c.CustomerID) AS CustomerCount FROM customers c GROUP BY c.Country;",
            "SELECT o.OrderID FROM orders o WHERE o.ShippedDate > o.RequiredDate;",
            "SELECT c.Region, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Region;",
            "SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderID IS NULL;",
            "SELECT EXTRACT(YEAR FROM o.OrderDate) AS OrderYear, EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate) ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT c.CustomerID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
            "SELECT COUNT(o.OrderID) FROM orders o WHERE o.OrderDate >= DATEADD(year, -1, GETDATE());",
            "SELECT od.ProductID, AVG(od.Discount) AS AverageDiscount FROM [Order Details] od GROUP BY od.ProductID ORDER BY AverageDiscount DESC LIMIT 1;",
            "SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID HAVING COUNT(DISTINCT o.ShipRegion) > 1;",
            "SELECT (COUNT(DISTINCT CASE WHEN o.OrderDate BETWEEN DATEADD(month, -1, GETDATE()) AND GETDATE() THEN o.CustomerID END) * 1.0) / NULLIF(COUNT(DISTINCT CASE WHEN o.OrderDate < DATEADD(month, -1, GETDATE()) THEN o.CustomerID END), 0) AS RetentionRate FROM orders o;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSpent FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID HAVING TotalSpent > 5000;",
            "SELECT c.City, COUNT(c.CustomerID) AS CustomerCount FROM customers c GROUP BY c.City ORDER BY CustomerCount DESC LIMIT 1;",
            "SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od GROUP BY od.ProductID;",
            "SELECT o.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT 100.0 * COUNT(CASE WHEN o.ShippedDate <= o.RequiredDate THEN 1 END) / COUNT(o.OrderID) AS OnTimePercentage FROM orders o;",
            "SELECT Country, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY Country ORDER BY NumberOfCustomers DESC;",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY LifetimeValue DESC LIMIT 5;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = 2022 GROUP BY Year, Month;",
            "SELECT ShipVia, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipVia;",
            "SELECT ProductID, SUM(Quantity * UnitPrice * (1 - Discount)) AS TotalSales FROM [Order Details] GROUP BY ProductID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT ContactTitle, COUNT(*) AS Frequency FROM customers GROUP BY ContactTitle ORDER BY Frequency DESC LIMIT 1;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 3;",
            "SELECT (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0) / COUNT(OrderID) AS OnTimeOrderPercentage FROM orders;",
            "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry;",
            "SELECT COUNT(DISTINCT o.CustomerID) * 100.0 / (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR)) AS RetentionRate FROM orders o WHERE OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE();",
            "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID, EXTRACT(YEAR FROM OrderDate), EXTRACT(MONTH FROM OrderDate) HAVING COUNT(OrderID) > 1;",
            "SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCountry ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS YearMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY YearMonth ORDER BY TotalValue DESC LIMIT 1;",
            "SELECT customers.CustomerID, SUM([Order Details].Quantity) AS TotalProducts FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
            "SELECT customers.CustomerID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
            "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS DelayedRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE ShippedDate > RequiredDate;",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders;",
            "SELECT AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS average_order_value FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE c.Country = 'Germany';",
            "SELECT o.ShipCountry, COUNT(o.OrderID) AS order_count FROM orders o GROUP BY o.ShipCountry;",
            "SELECT EXTRACT(MONTH FROM o.OrderDate) AS order_month, COUNT(o.OrderID) AS order_count FROM orders o WHERE EXTRACT(YEAR FROM o.OrderDate) = 2022 GROUP BY order_month;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS lifetime_value FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN \"Order Details\" od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY lifetime_value DESC LIMIT 1;",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS revenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY revenue DESC LIMIT 5;",
            "SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderID IS NULL OR o.CustomerID IS NULL OR o.OrderDate < CURRENT_DATE - INTERVAL '1 year';",
            "SELECT ShipVia, AVG(Freight) AS average_freight FROM orders GROUP BY ShipVia;",
            "SELECT o.CustomerID, COUNT(od.ProductID) AS product_count FROM (SELECT CustomerID, OrderID, ROW_NUMBER() OVER (PARTITION BY CustomerID ORDER BY OrderDate) AS rn FROM orders) AS first_orders JOIN [Order Details] od ON first_orders.OrderID = od.OrderID WHERE first_orders.rn = 1 GROUP BY o.CustomerID;",
            "SELECT (COUNT(DISTINCT o.CustomerID) FILTER (WHERE o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' AND o.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE)))::float / (NULLIF(COUNT(DISTINCT o.CustomerID) FILTER (WHERE o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '6 months' AND o.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months')), 0)::float AS retention_rate FROM orders o;",
            "SELECT c.City, COUNT(DISTINCT c.CustomerID) AS unique_customers FROM customers c GROUP BY c.City ORDER BY unique_customers DESC LIMIT 1;",
            "SELECT COUNT(o.OrderID) AS delayed_orders FROM orders o WHERE o.ShippedDate > o.RequiredDate;",
            "SELECT o.OrderID, c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS order_value FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN customers c ON o.CustomerID = c.CustomerID GROUP BY o.OrderID, c.CustomerID ORDER BY order_value DESC LIMIT 1;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS total_discount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
            "SELECT COUNT(o.OrderID) AS manager_orders FROM orders o JOIN customers c ON o.CustomerID = c.CustomerID WHERE c.ContactTitle LIKE '%Manager%';",
            "SELECT EXTRACT(YEAR FROM o.OrderDate) AS order_year, EXTRACT(MONTH FROM o.OrderDate) AS order_month, COUNT(o.OrderID) AS order_count FROM orders o WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY order_year, order_month ORDER BY order_year, order_month;",
            "SELECT o.ShipCountry, SUM(o.Freight) AS total_freight FROM orders o GROUP BY o.ShipCountry ORDER BY total_freight DESC LIMIT 1;",
            "SELECT AVG(od.Discount) AS average_discount FROM [Order Details] od;",
            "SELECT COUNT(DISTINCT o.OrderID) AS orders_with_large_discount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0.2;",
            "SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY CustomerID;",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSpent FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY TotalSpent DESC LIMIT 1;",
            "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
            "SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC FETCH FIRST 1 ROW ONLY;",
            "SELECT AVG(Freight) AS AvgFreight FROM orders;",
            "SELECT Country, COUNT(DISTINCT CustomerID) AS NumberOfCustomers FROM customers GROUP BY Country;",
            "SELECT (COUNT(*) FILTER (WHERE Discount > 0.1) * 100.0 / COUNT(*)) AS DiscountedOrderPercentage FROM [Order Details];",
            "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 5;",
            "SELECT AVG(UnitPrice) AS AvgUnitPrice FROM [Order Details];",
            "SELECT CustomerID, COUNT(OrderID) AS EarlyOrders FROM orders WHERE ShippedDate < RequiredDate GROUP BY CustomerID ORDER BY EarlyOrders DESC LIMIT 1;",
            "SELECT AVG(DATEDIFF(day, OrderDate, ShippedDate)) AS AvgDaysToShip FROM orders;",
            "SELECT Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Region ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT ShipVia, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipVia ORDER BY TotalOrders DESC LIMIT 1;",
            "SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(DISTINCT EXTRACT(YEAR FROM OrderDate) || '-' || EXTRACT(MONTH FROM OrderDate)) > 3;",
            "SELECT customers.CustomerID, orders.OrderID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS RevenuePerOrder FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID, orders.OrderID;",
            "SELECT COUNT(DISTINCT CASE WHEN OrderDate BETWEEN '2022-01-01' AND '2022-12-31' THEN CustomerID END) / NULLIF(COUNT(DISTINCT CASE WHEN OrderDate < '2022-01-01' THEN CustomerID END), 0) AS RetentionRate FROM orders;",
            "SELECT EmployeeID, COUNT(OrderID) AS OrdersProcessed FROM orders GROUP BY EmployeeID;",
            "SELECT customers.Country, COUNT(orders.OrderID) AS NumberOfOrders FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.Country ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT customers.City, COUNT(DISTINCT customers.CustomerID) FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.City;",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CustomerLifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
            "SELECT * FROM customers WHERE City = 'Specific City';",
            "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
            "SELECT Country, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY Country ORDER BY NumberOfCustomers DESC LIMIT 5;",
            "SELECT OrderID FROM [Order Details] WHERE Discount > 0.10;",
            "SELECT customers.CustomerID, SUM(\"Order Details\".UnitPrice * \"Order Details\".Quantity * (1 - \"Order Details\".Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN \"Order Details\" ON orders.OrderID = \"Order Details\".OrderID GROUP BY customers.CustomerID ORDER BY LifetimeValue DESC LIMIT 5;",
            "SELECT COUNT(DISTINCT ProductID) AS UniqueProductsOrdered FROM [Order Details];",
            "SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 10;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM [Order Details];",
            "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShipTime FROM orders WHERE ShippedDate IS NOT NULL;",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC FETCH FIRST 1 ROW ONLY;",
            "SELECT (COUNT(DISTINCT CustomerID) FILTER (WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31')) / NULLIF(COUNT(DISTINCT CustomerID) FILTER (WHERE OrderDate < '2022-01-01'), 0) AS RetentionRate FROM orders;",
            "SELECT OrderID FROM orders WHERE ShippedDate IS NULL;",
            "SELECT Region, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY Region;",
            "SELECT orders.OrderID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS OrderTotal FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID ORDER BY OrderTotal DESC LIMIT 1;",
            "SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 5;",
            "SELECT ShipCountry, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipCountry;",
            "SELECT ProductID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY ProductID ORDER BY AvgDiscount DESC LIMIT 1;",
            "SELECT City, COUNT(DISTINCT CustomerID) AS NumCustomers FROM customers GROUP BY City ORDER BY NumCustomers DESC LIMIT 5;",
            "SELECT c.CustomerID, c.CompanyName FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderID IS NULL OR o.OrderDate < CURRENT_DATE - INTERVAL '1 year';",
            "SELECT ROUND((COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID)) * 100, 2) AS PercentageOnTime FROM orders;",
            "SELECT c.CustomerID, AVG(o2.OrderDate - o1.OrderDate) AS AvgTimeBetweenOrders FROM customers c JOIN orders o1 ON c.CustomerID = o1.CustomerID JOIN orders o2 ON c.CustomerID = o2.CustomerID AND o2.OrderDate > o1.OrderDate GROUP BY c.CustomerID ORDER BY AvgTimeBetweenOrders DESC LIMIT 1;",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID;",
            "SELECT o.EmployeeID, COUNT(DISTINCT o.CustomerID) AS NumCustomers FROM orders o GROUP BY o.EmployeeID ORDER BY NumCustomers DESC;",
            "SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, EXTRACT(YEAR FROM o.OrderDate) AS Year, COUNT(o.OrderID) / COUNT(DISTINCT o.CustomerID) AS AvgOrdersPerCustomer FROM orders o GROUP BY Year, Month;",
            "SELECT ShipCountry, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipCountry ORDER BY AvgFreight DESC LIMIT 1;",
            "SELECT OrderID FROM [Order Details] GROUP BY OrderID HAVING SUM(UnitPrice * Quantity * Discount) > 100;",
            "SELECT ContactTitle, COUNT(*) AS NumContacts FROM customers GROUP BY ContactTitle ORDER BY NumContacts DESC LIMIT 1;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS DiscountedRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY DiscountedRevenue DESC LIMIT 10;",
            "SELECT (COUNT(DISTINCT o1.CustomerID) * 1.0 / COUNT(DISTINCT o2.CustomerID)) * 100 AS RetentionRate FROM orders o1, orders o2 WHERE o1.OrderDate BETWEEN (CURRENT_DATE - INTERVAL '6 months') AND (CURRENT_DATE - INTERVAL '3 months') AND o2.OrderDate BETWEEN (CURRENT_DATE - INTERVAL '9 months') AND (CURRENT_DATE - INTERVAL '6 months') AND o1.CustomerID = o2.CustomerID;",
            "SELECT ShipVia, COUNT(OrderID) AS NumOrders FROM orders GROUP BY ShipVia ORDER BY NumOrders DESC LIMIT 1;",
            "SELECT o.OrderID FROM orders o JOIN customers c ON o.CustomerID = c.CustomerID WHERE o.ShipAddress <> c.Address;",
            "SELECT AVG(EXTRACT(DAY FROM ShippedDate - OrderDate)) AS AvgOrderToShipmentTime FROM orders WHERE ShippedDate IS NOT NULL;",
            "SELECT ShipCountry, COUNT(OrderID) AS ShippedNotDelivered FROM orders WHERE ShippedDate IS NOT NULL AND RequiredDate > ShippedDate GROUP BY ShipCountry;",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC FETCH FIRST 1 ROW ONLY;",
            "SELECT City, COUNT(CustomerID) AS CustomerCount FROM customers GROUP BY City ORDER BY CustomerCount DESC LIMIT 5;",
            "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) AS OrderCount FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY Month ORDER BY Month;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY LifetimeValue DESC LIMIT 1;",
            "SELECT COUNT(OrderID) AS NumberOfOrders FROM (SELECT OrderID FROM [Order Details] GROUP BY OrderID HAVING COUNT(ProductID) > 3) AS Subquery;",
            "SELECT (COUNT(DISTINCT o.CustomerID) FILTER (WHERE o.OrderDate BETWEEN DATE '2023-07-01' AND DATE '2023-09-30'))::DECIMAL / NULLIF((COUNT(DISTINCT o.CustomerID) FILTER (WHERE o.OrderDate < DATE '2023-07-01')), 0) AS RetentionRate FROM orders o;",
            "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC;",
            "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT COUNT(OrderID) * 100.0 / NULLIF(COUNT(*), 0) AS DiscountedOrderPercentage FROM [Order Details] WHERE Discount > 0;",
            "SELECT customers.CustomerID, COUNT(DISTINCT [Order Details].ProductID) AS DistinctProductCount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID;",
            "SELECT customers.CustomerID, (ShippedDate - OrderDate) AS Duration FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE ShippedDate IS NOT NULL ORDER BY Duration DESC LIMIT 1;",
            "SELECT AVG(ProductCount) AS AverageProductsPerOrder FROM (SELECT OrderID, COUNT(ProductID) AS ProductCount FROM [Order Details] GROUP BY OrderID) AS OrderProductCounts;",
            "SELECT customers.CustomerID, SUM([Order Details].Quantity) AS TotalQuantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE EXTRACT(YEAR FROM orders.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY customers.CustomerID ORDER BY TotalQuantity DESC LIMIT 1;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE ShipCountry IN ('France', 'Germany', 'Spain', 'Italy') AND EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) AND EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) - 1;",
            "SELECT ShipVia, COUNT(OrderID) AS DeliveryCount FROM orders GROUP BY ShipVia ORDER BY DeliveryCount DESC;",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
            "SELECT customers.CustomerID, COUNT(orders.OrderID) AS NumberOfOrders FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID ORDER BY NumberOfOrders DESC;",
            "SELECT customers.CustomerID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
            "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrdersProcessed FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrdersProcessed DESC;",
            "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShippedDate IS NOT NULL;",
            "SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCountry;",
            "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY TotalSales DESC;",
            "SELECT COUNT(DISTINCT o1.CustomerID) * 1.0 / NULLIF(COUNT(DISTINCT o2.CustomerID), 0) AS RetentionRate FROM orders o1 LEFT JOIN orders o2 ON o1.CustomerID = o2.CustomerID WHERE o1.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' AND o2.OrderDate < '2022-01-01';",
            "SELECT customers.CustomerID, MAX([Order Details].Discount) AS HighestDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID;",
            "SELECT Country, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY Country;",
            "SELECT COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-03-31';",
            "SELECT City, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY City ORDER BY NumberOfCustomers DESC;",
            "SELECT ShipVia, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipVia ORDER BY NumberOfOrders DESC;",
            "SELECT [Order Details].ProductID, COUNT(DISTINCT orders.CustomerID) AS UniqueCustomers FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY [Order Details].ProductID ORDER BY UniqueCustomers DESC;",
            "SELECT COUNT(OrderID) AS PendingOrders FROM orders WHERE ShippedDate IS NULL;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT od1.ProductID AS ProductID1, od2.ProductID AS ProductID2, COUNT(*) AS TimesOrderedTogether FROM [Order Details] od1 JOIN [Order Details] od2 ON od1.OrderID = od2.OrderID AND od1.ProductID < od2.ProductID GROUP BY od1.ProductID, od2.ProductID ORDER BY TimesOrderedTogether DESC;",
            "SELECT (COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) * 100.0) / COUNT(OrderID) AS LateShipmentPercentage FROM orders;",
            "SELECT Region, COUNT(CustomerID) AS RepeatCustomers FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY Region, YEAR(OrderDate), MONTH(OrderDate) HAVING COUNT(DISTINCT OrderID) > 1;",
            "SELECT Country, COUNT(CustomerID) AS Number_of_Customers FROM customers GROUP BY Country;",
            "SELECT customers.CustomerID, CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalOrderValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID, CompanyName ORDER BY TotalOrderValue DESC FETCH FIRST 5 ROWS ONLY;",
            "SELECT Region, COUNT(OrderID) AS Number_of_Orders FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY Region;"
        ],
        "reviews": [
            "The SQL query correctly implements the calculation of total revenue for each customer by joining the 'customers', 'orders', and '[Order Details]' tables and utilizing the correct formula to aggregate the revenue.",
            "The SQL query is correct. It correctly joins the 'customers' and 'orders' tables using the CustomerID as the key, groups the results by CustomerID, counts the number of orders for each customer, and filters the results to include only customers with more than 10 orders.",
            "The SQL query correctly calculates the average freight cost per shipment using the AVG function on the Freight column in the orders table. No corrections needed.",
            "The SQL query is correct for the given business question. It correctly counts the frequency of each product ordered, groups by ProductID, orders the results in descending order by frequency, and limits the output to the top 5 products.",
            "The SQL query is correct. It calculates the Customer Lifetime Value using a join between the 'customers', 'orders', and '[Order Details]' tables and groups the result by CustomerID as required.",
            "The SQL query correctly counts the number of customers per country using the COUNT function and GROUP BY clause. It adheres to the ANSI SQL standard and aligns with the schema provided.",
            "The SQL query correctly identifies orders where the 'ShippedDate' is later than the 'RequiredDate', meaning the orders were shipped late. The query is accurate as per the given schema and business question.",
            "The SQL query correctly calculates the total discount given in each region by joining the `customers`, `orders`, and `Order Details` tables. It uses a formula to calculate the discount as `UnitPrice * Quantity * Discount` and groups the result by the customer's region. The structure and logic of the query are correct and aligned with the business question.",
            "The SQL query is correct. It uses a LEFT JOIN to check for customers with no matching orders and filters those with no OrderID using WHERE o.OrderID IS NULL.",
            "The original query only extracts the month, which can lead to incorrect results if the analysis spans multiple years. The query has been corrected to include both year and month in the grouping to ensure accuracy.",
            "The SQL query is correct. It calculates the average order value for each customer by joining the customers, orders, and [Order Details] tables, and then grouping by CustomerID to ensure the aggregation is per customer.",
            "The query uses non-ANSI SQL functions DATEADD and GETDATE(). Here's the corrected ANSI SQL query using CURRENT_DATE and INTERVAL: SELECT COUNT(o.OrderID) FROM orders o WHERE o.OrderDate >= CURRENT_DATE - INTERVAL '1 year';",
            "The SQL query correctly selects the ProductID with the highest average discount by calculating the average of the 'Discount' field, grouping by the 'ProductID' and ordering the results in descending order. It then limits the result to only the top entry, which matches the business question requirements.",
            "The original query uses a subquery to get distinct CustomerID and ShipRegion, which is unnecessary. By grouping by CustomerID and using COUNT(DISTINCT o.ShipRegion), we can directly find customers who have placed orders in more than one region.",
            "The original query syntax is incorrect; the use of the WHERE clause inside COUNT is not valid. Instead, use a CASE statement inside COUNT. Additionally, use NULLIF to avoid division by zero errors.",
            "The SQL query is correct. It appropriately calculates the total spending per customer by summing the product of UnitPrice, Quantity, and the discount factor. The query then filters customers whose total spending exceeds $5000 using the HAVING clause.",
            "The original SQL query correctly selects the city with the highest number of customers by counting CustomerID for each city, ordering by CustomerCount in descending order, and limiting the result to the top one. No changes needed.",
            "The SQL query correctly calculates the total quantity ordered for each product by summing the Quantity column from the [Order Details] table and grouping by ProductID.",
            "The SQL query is correct. It selects the EmployeeID and counts the number of OrderID entries, groups by EmployeeID, orders by descending order count, and limits the result to the top entry.",
            "The original query is correct in terms of logic and uses a FILTER clause which isn't standard in all SQL dialects. An alternative using 'CASE WHEN' is provided for broader compatibility, ensuring the query adheres to the ANSI SQL standard.",
            "The SQL query correctly answers the business question. It selects the country and counts the number of customers, grouping by country, and orders the results by the number of customers in descending order.",
            "The SQL query is correct and calculates the lifetime value as expected. It joins the necessary tables and groups by CustomerID, ordering by the calculated LifetimeValue in descending order to find the top 5 customers. No corrections are needed.",
            "The query is correct. It calculates the number of orders placed each month in 2022 by extracting the year and month from the OrderDate, filtering for the year 2022, and grouping by year and month.",
            "The SQL query correctly calculates the average freight cost for each shipping method by grouping by the 'ShipVia' column. There are no errors.",
            "The SQL query correctly calculates the total sales for each product by multiplying the quantity, unit price, and the discount factor, and then groups by ProductID to find the product with the highest total sales. The query uses the correct ORDER BY and LIMIT to return the top product. No changes needed.",
            "The query is correct. It groups by ContactTitle, counts the occurrences, and orders them by frequency in descending order, returning the most common title with a limit of 1.",
            "The SQL query is correct. It accurately calculates the average discount given on all orders by using the AVG function on the Discount column from the [Order Details] table.",
            "The SQL query is correct. It selects the ShipCity and counts the number of orders, groups by ShipCity, and orders the result by the number of orders in descending order, limiting the output to the top 3 cities.",
            "The original query calculates the number of on-time orders but does not determine the percentage. The corrected query counts the on-time orders and divides by the total number of orders to calculate the percentage.",
            "The SQL query is correct. It calculates the total sales for each country by correctly joining the 'orders' and '[Order Details]' tables, then grouping by 'ShipCountry' to aggregate the sales figures using the specified formula.",
            "The SQL query is correct for calculating the customer retention rate for the last year. It correctly uses a subquery to count distinct customers who made orders before the previous year and compares them to the customers who ordered in the last year. The logic aligns with the defined metric formula.",
            "The original query is mostly correct, but to adhere to ANSI SQL for extracting year and month, 'YEAR(OrderDate)' and 'MONTH(OrderDate)' should be replaced with 'EXTRACT(YEAR FROM OrderDate)' and 'EXTRACT(MONTH FROM OrderDate)' respectively.",
            "The provided SQL query correctly identifies the most frequently used shipping country by counting the number of orders for each ShipCountry, ordering the results in descending order, and then limiting the output to the country with the most orders. The query is correct and aligns with the business question.",
            "The original query was almost correct but had an incorrect use of the EXTRACT function. In ANSI SQL, the correct approach is to use DATE_FORMAT for formatting the date to 'YYYY-MM'. The rest of the query is correct.",
            "The initial query was missing a join to the 'customers' table, which is necessary to correctly attribute the product quantities to each customer. The corrected query now properly joins the 'customers', 'orders', and '[Order Details]' tables.",
            "The original query misses a join between customers and orders tables. This relationship is necessary to properly attribute orders to customers. The corrected query includes a join between customers and orders tables based on the CustomerID.",
            "The SQL query correctly finds the employee who handled the most orders by counting the number of OrderID entries per EmployeeID, grouping them, and ordering by the count in descending order to retrieve the top result. The query is correct.",
            "The original query is correct. It calculates the total revenue for orders where the ShippedDate is after the RequiredDate using the appropriate logic to multiply unit price, quantity, and apply any discount.",
            "The SQL query is correct. It accurately calculates the average time taken to ship an order by computing the average of the difference in days between the ShippedDate and OrderDate in the orders table.",
            "The SQL query correctly calculates the average order value for customers residing in Germany by joining the 'customers', 'orders', and '[Order Details]' tables and applying the correct formula. The 'WHERE' clause correctly filters for customers in Germany. The query is correct.",
            "The SQL query is correct and effectively counts the number of orders shipped to each country by grouping by the 'ShipCountry' field.",
            "The query correctly extracts the month from the OrderDate, counts the number of orders per month, filters for the year 2022, and groups the results by month. It appears correct and follows the ANSI SQL standard.",
            "The query is correct. It joins the necessary tables (customers, orders, and Order Details) and computes the lifetime value as specified in the schema by summing the total revenue per customer. The query then orders by lifetime value in descending order and limits the result to the top customer, which answers the business question.",
            "The query is correct. It calculates the revenue for each product by summing the product of UnitPrice, Quantity, and (1 - Discount) for each ProductID, groups the results by ProductID, and orders them in descending order of revenue, limiting the output to the top 5 products.",
            "The original query incorrectly includes customers who haven't placed any orders ever (o.OrderID IS NULL) along with the condition for orders before the last year. Corrected by ensuring no orders were placed in the last year: WHERE o.CustomerID IS NULL or NOT EXISTS (SELECT 1 FROM orders o1 WHERE o1.CustomerID = c.CustomerID AND o1.OrderDate >= CURRENT_DATE - INTERVAL '1 year').",
            "The given SQL query is correct. It correctly calculates the average freight cost for each shipping method by grouping the orders on the ShipVia field.",
            "The original query incorrectly uses FIRST_VALUE without addressing the need to filter to only the first order. The corrected query uses ROW_NUMBER to identify the first order for each customer and filters on that before counting products.",
            "The original query incorrectly calculates the dates for the past quarter. The query should consider the full quarter by using DATE_TRUNC function to accurately set the date range for the quarter.",
            "The SQL query is correct. It selects cities grouped by unique CustomerIDs, orders them in descending order by the count, and limits the result to one, thus identifying the city with the most unique customers.",
            "The SQL query is correct. It accurately counts the number of orders where the shipped date is later than the required date, indicating a delay.",
            "The query correctly calculates the order value using the formula given in the schema and joins the tables appropriately to find the order with the highest value, along with the customer who placed it. The use of GROUP BY, ORDER BY, and LIMIT is appropriate for this requirement. The query is correct.",
            "The SQL query correctly calculates the total discount given to each customer by joining the 'customers', 'orders', and '[Order Details]' tables and multiplying the UnitPrice, Quantity, and Discount fields. The query's logic and syntax are correct, and grouping by c.CustomerID ensures results are calculated per customer.",
            "The SQL query is correct. It joins the 'orders' and 'customers' tables on 'CustomerID' and filters customers whose 'ContactTitle' includes 'Manager'. It then counts the number of corresponding 'OrderID' entries.",
            "The original query does not filter for the last year. Added a WHERE clause to restrict the results to the last year.",
            "The query is correct. It calculates the total freight cost per country and orders the results to find the highest one. The LIMIT 1 clause ensures only the top result is returned.",
            "The query calculates the average discount per order line item, not per order. To calculate the average discount per order, you need to first calculate the average discount for each order and then take the overall average. The corrected query is: SELECT AVG(subquery.avg_discount_per_order) AS average_discount_per_order FROM (SELECT AVG(od.Discount) AS avg_discount_per_order FROM [Order Details] od GROUP BY od.OrderID) subquery;",
            "The given SQL query is correct. It properly joins the 'orders' and 'Order Details' tables and counts the distinct 'OrderID' where the discount is greater than 20%.",
            "The SQL query correctly calculates the total number of orders placed by each customer by selecting the CustomerID and counting the OrderID for each CustomerID. The use of GROUP BY is appropriate for aggregating the data. No changes are needed.",
            "The SQL query is correct. It correctly calculates the total spending per customer using the formula provided for 'Customer Lifetime Value' and orders the results to find the customer with the highest total spending. The LIMIT 1 clause ensures only the top customer is returned.",
            "The SQL query is correct. It correctly calculates the average discount across all order details.",
            "The SQL query correctly counts the number of orders where the ShippedDate is later than the RequiredDate, which matches the business question being asked. The query is correct.",
            "The SQL query is correct. It properly calculates the total revenue for each customer by joining the 'customers', 'orders', and '[Order Details]' tables and aggregating the revenue for each customer.",
            "The original SQL query is mostly correct, but to strictly adhere to the ANSI SQL standard, the use of 'LIMIT' should be replaced with 'FETCH FIRST 1 ROW ONLY'.",
            "The SQL query correctly answers the business question by calculating the average freight cost per order using the AVG function on the Freight column from the orders table. The query is accurate and requires no changes.",
            "The SQL query correctly counts the number of distinct customers from each country by grouping the results by Country. The query does not contain any mistakes given the provided schema.",
            "The SQL query correctly calculates the percentage of orders with a discount greater than 10%. It uses the FILTER clause to count only those rows where the Discount is greater than 0.1 and divides by the total count of rows to get the percentage. The calculation is accurate as per the business question.",
            "The query is correct and follows the ANSI SQL standard. It groups the orders by CustomerID, counts the number of orders per customer, orders them in descending order, and limits the result to the top 5 customers.",
            "The SQL query correctly calculates the average unit price for products across all orders.",
            "The SQL query correctly implements the business question. It selects the CustomerID and counts the number of orders shipped before the required date, groups by CustomerID, and orders the results in descending order of the count. The query limits the result to the top entry, which identifies the customer with the most early-shipped orders.",
            "The original query uses 'DATE_PART' and type casting specific to some SQL dialects. Using 'DATEDIFF' provides an ANSI SQL standard function to calculate the difference between two dates.",
            "The query is correct. It joins the necessary tables and calculates total revenue by region, returning the top region with the most revenue.",
            "The SQL query is correct. It groups the orders by ShipVia, counts the OrderIDs to determine the total number per method, and orders them in descending order to fetch the most common shipping method, limiting the result to one.",
            "The original query uses a non-standard function DATE_TRUNC that might not be supported in ANSI SQL. A standard approach is to use EXTRACT to get year and month, then concatenate them to count distinct months.",
            "The SQL query correctly calculates the revenue distribution by order for each customer by joining the 'customers', 'orders', and '[Order Details]' tables and grouping by CustomerID and OrderID. The formula for revenue is properly applied. No corrections needed.",
            "The original query used incorrect syntax for the conditional count. I corrected it by using CASE statements for conditional counting and added NULLIF to handle division by zero.",
            "The SQL query is correct and accurately answers the business question by grouping the orders by EmployeeID and counting the number of orders each employee processed.",
            "The original query correctly joins the customers and orders tables, groups by country, counts the number of orders, orders them in descending order, and limits the result to the country with the highest number of orders. No changes are needed.",
            "The SQL query is correct and accurately calculates the total sales value of products, ordering them to identify the top 5.",
            "The SQL query correctly answers the business question. It joins the 'customers' and 'orders' tables on 'CustomerID', counts distinct 'CustomerID' for each 'City', and groups by 'City'. The query is accurate and follows the ANSI SQL standard.",
            "The SQL query correctly calculates the Customer Lifetime Value by joining the `customers`, `orders`, and `[Order Details]` tables, and then summing the total revenue for each customer. No changes are needed.",
            "The SQL query is correct. It selects all columns from the 'customers' table where the 'City' matches 'Specific City'.",
            "The original query incorrectly uses the OrderDate instead of the ShippedDate to determine how many orders were shipped in the last month. The correct approach is to use the ShippedDate column.",
            "The query is correct for the given question. It counts customers per country, orders the result by the count in descending order, and limits the output to the top 5.",
            "The query correctly selects OrderID from the [Order Details] table where the Discount is greater than 0.10. No corrections needed.",
            "The original query is mostly correct, but since '[Order Details]' contains spaces, it should be enclosed in double quotes in ANSI SQL. The corrected query reflects this change.",
            "The query correctly counts the number of unique ProductID values in the [Order Details] table, which answers the question accurately.",
            "The original query is correct. It groups the orders by CustomerID and filters groups where the count of OrderID exceeds 10.",
            "The SQL query correctly calculates the total discount given across all orders by multiplying UnitPrice, Quantity, and Discount and then summing the result.",
            "The original query correctly counts the number of orders where the 'ShippedDate' is later than the 'RequiredDate', which matches the definition of a delayed order.",
            "The SQL query is correct and accurately calculates the average number of days between the order date and the shipped date for orders where the shipped date is not null.",
            "The SQL query is mostly correct. The use of 'LIMIT 1' is not ANSI SQL compliant. Instead, 'FETCH FIRST 1 ROW ONLY' should be used.",
            "The original query lacked the correct syntax for applying conditions within COUNT, as it used WHERE incorrectly. The corrected query uses FILTER to apply the conditions. NULLIF is used to avoid division by zero.",
            "The SQL query is correct. It selects all OrderIDs from the orders table where ShippedDate is NULL, indicating that these orders have not been shipped yet.",
            "The SQL query correctly counts the number of customers in each region and groups the results by region. It is accurate and follows the ANSI SQL standards.",
            "The SQL query is correct. It calculates the total order value by joining the orders with Order Details, then grouping by OrderID to compute the sum of products of unit price, quantity, and discount. It orders the results by the computed order total in descending order and limits the result to the highest order total.",
            "The SQL query correctly identifies customers who have placed more than five orders by grouping the records by CustomerID and using the HAVING clause to filter those with more than five orders.",
            "The query is correct. It selects the shipping country and calculates the average freight cost for each country by grouping the results by ShipCountry.",
            "The SQL query is correct. It selects the ProductID and calculates the average discount for each product. It then orders the results by average discount in descending order and limits the output to the product with the highest average discount.",
            "The SQL query correctly selects the City and counts the number of distinct CustomerID values, groups by City, orders by the number of customers in descending order, and limits the result to the top 5 cities. The query accurately addresses the business question.",
            "The original query incorrectly allows for customers with older orders to still appear. The corrected query should check that no orders exist within the last year by using `WHERE o.OrderID IS NULL` in conjunction with a subquery checking for recent orders, or by using a NOT EXISTS clause.",
            "The original SQL query was almost correct. The only issue was with the syntax for casting to decimal. The corrected query ensures that the division is performed with decimal precision by using '* 1.0'.",
            "The original query is mostly correct, but the use of EXTRACT(DAY FROM ...) is not necessary when you're simply finding the difference between two DATE columns. This will automatically yield an integer in days. I also removed unnecessary parts and simplified the subtraction to directly calculate the difference.",
            "The query is correct. It calculates the total quantity ordered for each product by grouping on ProductID and summing the Quantity column.",
            "The SQL query correctly identifies the employees who have managed the highest number of distinct customers by selecting EmployeeID from the orders table, counting distinct CustomerID for each EmployeeID, grouping by EmployeeID, and ordering the result in descending order of NumCustomers. The query is correct.",
            "The query correctly calculates the average number of orders per customer per month by extracting the month and year, counting orders, and dividing by the number of unique customers. However, to ensure all customers are considered every month, a join with the 'customers' table might be necessary if the requirement is to include customers with no orders in a given month.",
            "The query correctly calculates the average freight cost per shipping country and orders the results in descending order to return the country with the highest average freight cost. It then limits the result to the top record, which aligns with the business question. No corrections needed.",
            "The query correctly uses a GROUP BY clause on OrderID and applies the HAVING clause to filter order IDs where the total discount is more than $100. The calculation SUM(UnitPrice * Quantity * Discount) is appropriate for finding total discount. The query is correct.",
            "The SQL query correctly finds the most common contact title by counting occurrences in the 'customers' table and ordering them in descending order. Using LIMIT 1 ensures only the most common title is returned. The query is correct and follows the ANSI SQL standard.",
            "The SQL query correctly calculates the total discounted revenue for each customer by joining the customers, orders, and order details tables. The calculation is correct, and the query uses GROUP BY to aggregate results for each CustomerID. The ORDER BY clause is used to sort by DiscountedRevenue in descending order, and LIMIT 10 is used to list the top 10 customers. The query is correct and meets the business question requirements.",
            "The query attempts to measure retention by finding customers who ordered in both the second quarter back and the previous quarter. However, it incorrectly joins on CustomerID when the intention is to determine how many distinct customers from the earlier period returned in the next period. Correct the SQL to count distinct customers for each period separately and then calculate retention rate.",
            "The query correctly counts the number of orders for each shipping method and orders them in descending order, returning only the top result. It is accurate and correctly answers the business question using ANSI SQL standard.",
            "The SQL query correctly identifies the orders where the shipping address is different from the customer's address by joining the 'orders' and 'customers' tables on CustomerID and comparing ShipAddress and Address. Query is correct.",
            "The SQL query is correct. It accurately calculates the average time in days from when an order is placed to when it is shipped, excluding orders that have not been shipped.",
            "The SQL query correctly selects the ShipCountry and counts the number of orders where the ShippedDate is not null and the RequiredDate is greater than the ShippedDate, indicating they have been shipped but not yet delivered.",
            "The original query is mostly correct, but 'LIMIT 1' is non-standard SQL. In ANSI SQL, use 'FETCH FIRST 1 ROW ONLY' for the same functionality.",
            "The query is correct. It selects the city and counts the number of customers in each city, groups the results by city, orders them by the customer count in descending order, and limits the results to the top 5 cities. The SQL syntax and logic align with the business question.",
            "The query correctly extracts the month from OrderDate and counts orders for the previous year. The EXTRACT function is correctly used, and the GROUP BY and ORDER BY clauses are appropriately applied. No corrections needed.",
            "The SQL query is correct and calculates the average discount across all orders by using the AVG function on the Discount column within the [Order Details] table.",
            "The SQL query is correct and accurately calculates the lifetime value for each customer, ordering the results by the lifetime value in descending order and limiting the output to the customer with the highest value.",
            "The original query correctly identifies orders with more than three products but only returns the OrderID. To get the number of such orders, we wrap the original query in a subquery and count the OrderIDs.",
            "The original query partially addresses the question but needs clarification for division by zero. The `NULLIF` function is used to safely handle situations where there are no previously existing customers. Additionally, aliasing the `orders` table improves readability.",
            "The SQL query is correct. It selects the EmployeeID and counts the number of orders each employee has handled, groups by EmployeeID, and orders the result by OrderCount in descending order.",
            "The SQL query correctly extracts the month from the 'OrderDate', calculates the total revenue, groups by month, and orders the results to find the month with the highest revenue. It appears correct as per the given question and schema.",
            "The original query uses the FILTER clause which is not standard ANSI SQL. The adjusted query uses a WHERE clause for the COUNT of discounted orders and divides by the total count. The use of NULLIF ensures no division by zero.",
            "The SQL query is correct. It accurately counts distinct products ordered per customer by joining the necessary tables and grouping by CustomerID.",
            "The original query attempts to use DATE_PART function, which is not standardized in ANSI SQL for calculating the difference in days between two dates. Instead, just subtract the dates to get the interval and order by that. The query correctly calculates the duration and limits to find the maximum.",
            "The SQL query correctly calculates the average number of products per order by counting the products in each order and then averaging these counts. The use of a subquery to first determine the product count per order, followed by averaging these results, is an appropriate approach for this business question.",
            "The original query is almost correct, but instead of YEAR(CURRENT_DATE) it should be EXTRACT(YEAR FROM CURRENT_DATE).",
            "The initial query does not account for the year, which can lead to incorrect results when the current month is January. The corrected query ensures that the year part of the date is considered, preventing mixing data from different years.",
            "The SQL query correctly identifies the shipping methods with the highest number of deliveries by grouping the data by 'ShipVia' and counting the number of 'OrderID' for each group. The results are ordered in descending order of 'DeliveryCount'. The query is accurate and needs no changes.",
            "The SQL query correctly calculates the total revenue generated by each customer over their lifetime. It joins the customers, orders, and [Order Details] tables and uses the correct aggregation and grouping.",
            "The SQL query correctly answers the question by joining the 'customers' and 'orders' tables using the 'CustomerID' field, counting the number of orders per customer, grouping by 'CustomerID', and ordering the results in descending order of 'NumberOfOrders'. No corrections are needed.",
            "The SQL query is correct. It calculates the average order value per customer by joining the customers, orders, and [Order Details] tables, then using AVG to find the average order value by customer.",
            "The query is correct. It accurately retrieves the employees who have processed the most orders by grouping the orders by EmployeeID and counting the number of orders for each employee, ordered in descending order.",
            "The original query does not filter for shipped orders. The condition WHERE ShippedDate IS NOT NULL ensures that only the orders that have been shipped are considered for the total freight cost calculation.",
            "The SQL query is correct for the given question. It correctly counts the number of orders grouped by ShipCountry.",
            "The SQL query correctly computes total sales for each product by multiplying unit price, quantity, and the discount factor. No corrections needed.",
            "The original query had syntax issues. Specifically, the use of WHERE within COUNT() is incorrect. Additionally, dividing directly without handling potential division by zero could lead to errors. Using a NULLIF function helps prevent this.",
            "This query correctly calculates the maximum discount received by each customer and orders them by 'HighestDiscount'. However, to find only the highest discount received by any customer, the ORDER BY and LIMIT clause can be added. Correct query is: SELECT customers.CustomerID, MAX([Order Details].Discount) AS HighestDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY HighestDiscount DESC LIMIT 1;",
            "The SQL query is correct. It retrieves the count of customers grouped by their respective countries.",
            "The SQL query correctly counts the distinct CustomerIDs from the orders table within the specified quarterly date range.",
            "The SQL query correctly answers the business question by counting the number of customers in each city and ordering the results by the number of customers in descending order. No corrections are needed.",
            "The SQL query correctly identifies the most common shipping method by counting the number of orders for each 'ShipVia' method and ordering the results in descending order. No changes are needed.",
            "The SQL query correctly identifies the ProductID and counts the number of unique customers by joining the Order Details table with the Orders table on OrderID. It then groups by ProductID and orders the results in descending order of unique customers. The query is correct and aligns with the business question.",
            "The SQL query correctly counts the number of orders where the 'ShippedDate' is NULL, indicating pending shipment. No changes are needed.",
            "The query is correct for calculating the average discount across all orders. The Discount column in [Order Details] is properly used to compute the average.",
            "The SQL query correctly identifies pairs of products ordered together. However, the condition 'od1.ProductID <> od2.ProductID' should be replaced with 'od1.ProductID < od2.ProductID' to avoid duplicate pairs and include all combinations uniquely.",
            "The original query incorrectly divided by COUNT(ShippedDate), which only includes non-null shipped dates. Correcting it to COUNT(OrderID) ensures the percentage is calculated against all orders.",
            "The original query incorrectly counts OrderID rather than distinct CustomerIDs for the condition of repeat orders within a month. Additionally, the GROUP BY should include both YEAR and MONTH for accurate counts within each month. The corrected query addresses these issues.",
            "The SQL query correctly retrieves the total number of customers from each country by grouping the customers based on the 'Country' column and counting the 'CustomerID' values. It accurately implements the business question.",
            "The original query is mostly correct, but the use of 'LIMIT' is not ANSI SQL standard. It has been replaced with 'FETCH FIRST 5 ROWS ONLY' for ANSI SQL compliance.",
            "The query correctly joins the orders and customers tables on CustomerID and groups the results by Region, counting the number of OrderID entries per group. It accurately answers the question."
        ],
        "difficulty": [
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "easy",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "easy",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "easy",
            "easy",
            "medium",
            "easy",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy"
        ]
    },
    "Product Analysis": {
        "questions": [
            "What are the top 5 best-selling products by quantity?",
            "Which products have inventory levels below their reorder level?",
            "What is the total revenue for each product category last month?",
            "List products that have never been ordered.",
            "Which suppliers provide the most products?",
            "What is the average discount given on product sales?",
            "Identify the most profitable product.",
            "Determine the total sales and orders for discontinued products.",
            "Calculate the monthly inventory turnover ratio for the past year.",
            "Find products with zero units in stock but pending orders.",
            "What is the total number of units sold for each supplier?",
            "Identify products with the highest increase in order quantity compared to the previous month.",
            "List the top 10 products with the largest quantity on order.",
            "Find out which products have been consistently ordered every month for the past year.",
            "Determine the proportion of products that are discontinued.",
            "What are the average sales per month for each product?",
            "Identify the products with the highest discount rates and their total sales.",
            "Calculate the average time between order placements for each product.",
            "Find products that have been sold to more than 1000 units but are at or below reorder level.",
            "Identify which categories have products that are all discontinued.",
            "What is the total sales quantity for each product?",
            "How many products have been discontinued?",
            "Which products need to be reordered?",
            "What is the total revenue generated by each product?",
            "Which supplier provides the most products?",
            "What is the average unit price of products?",
            "How many units are currently in stock for each product?",
            "Which products have never been ordered?",
            "What is the total discount given on each product?",
            "Which category has the highest sales quantity?",
            "Which product has the highest inventory turnover ratio for the last month?",
            "What is the revenue generated for each product category?",
            "Which suppliers have the lowest average product price?",
            "How many unique products are sold by each supplier?",
            "What is the inventory turnover ratio for each month?",
            "Which products have unit price greater than the average unit price?",
            "What is the total number of units on order for each supplier?",
            "How many products have a quantity per unit greater than 10?",
            "What is the average reorder level across all products?",
            "Which products have a discount greater than 10%?",
            "What is the total sales revenue for each product?",
            "What are the top 5 products with the highest units in stock?",
            "Which supplier provides the most number of products?",
            "What is the average discount given on products?",
            "List the products that need to be reordered based on reorder level and units in stock.",
            "What is the total quantity of products sold by category each month?",
            "Which products have the highest inventory turnover ratio for the past month?",
            "What is the percentage of discontinued products relative to all products?",
            "What is the average unit price of orders that include a discount?",
            "Which products generate the highest revenue after discounts?",
            "What is the average sale price per unit for each product category?",
            "List suppliers with an average product unit price higher than $20.",
            "How many orders include products with a discount greater than 20%?",
            "What is the total unit price of products currently on order?",
            "Identify the products with the largest discrepancy between units in stock and units on order.",
            "Which category has the best product performance this year?",
            "What is the overall product performance trend for each product over the last six months?",
            "How many different products do the top 3 orders by value contain?",
            "What is the average reorder level for products in each category?",
            "Which products have a reorder level higher than the units in stock?",
            "What are the top 5 products by sales volume?",
            "How many discontinued products are still in stock?",
            "Which supplier provides the most diverse range of products?",
            "Calculate the average discount given on all product sales.",
            "Identify products that are selling below their reorder level.",
            "Find products with the highest inventory turnover ratio.",
            "What is the total quantity ordered for each category?",
            "List products with a unit price higher than the average unit price of all products.",
            "Which product has the highest sales revenue in the last month?",
            "Determine the average units on order for active (non-discontinued) products.",
            "How many products have a higher selling price than the average selling price?",
            "Find out which product had the maximum discount applied.",
            "Identify the top 3 suppliers by total units supplied.",
            "What is the total quantity and revenue generated for each supplier?",
            "Calculate the percentage of orders that included a discount.",
            "List products where the discount was greater than 20%.",
            "How does inventory turnover ratio change quarterly for each category?",
            "Which suppliers provide the most products by unit?",
            "What is the average unit price of all products?",
            "Identify the products that are currently below their reorder level.",
            "What are the names of products that are currently discontinued?",
            "Which product has the highest unit price?",
            "Which products have a reorder level higher than 50?",
            "Calculate the total sales revenue for each product.",
            "Find the average unit price of all products supplied by each supplier.",
            "What is the total quantity sold for each category of products?",
            "Identify products that have never been ordered.",
            "Which suppliers provide products that are discontinued?",
            "Determine products with a discount greater than 20% in any orders.",
            "What is the total value of current inventory for each product?",
            "Calculate the monthly sales performance for each product.",
            "What is the difference in units between current stock and reorder level for products?",
            "Identify the products with sales above the average sales-revenue.",
            "Which products have a stock level below the reorder level?",
            "What is the cumulative discount given on all orders?",
            "How many products have a unit price greater than the average unit price?",
            "Calculate the inventory turnover ratio for each product.",
            "List the top three products by total sales quantity.",
            "Which products have a discount applied more than 10 times?",
            "Which products have sold more units than they have in stock?",
            "What are the average units on order for each product category?",
            "How many products are currently discontinued?",
            "Which supplier provides the maximum number of different products?",
            "What is the total number of orders for each product?",
            "Which product has the highest turnover ratio?",
            "How many products are below their reorder level?",
            "Which products have not received any orders?",
            "What is the total revenue from orders for each supplier?",
            "Which month had the highest sales for any product?",
            "What is the average unit price for each product category?",
            "How many unique products are ordered each month?",
            "Which supplier has the highest average unit price for their products?",
            "What is the most frequently ordered product?",
            "What is the total inventory value for each product?",
            "Which product category contributes the most to sales revenue?",
            "What is the trend in sales for products over time?",
            "How many products have a discount greater than 10%?",
            "What are the top 5 best-selling products?",
            "How many units are on order for discontinued products?",
            "What is the total revenue generated from each product?",
            "Which suppliers have provided products that are currently out of stock?",
            "Which products have a discount applied in their order details, and what is the total discounted amount?",
            "What is the highest unit price for products in each category?",
            "How much revenue has been generated from products on sale during the last month?",
            "Which products need to be reordered based on their reorder level and current stock?",
            "What is the total value of inventory currently in stock?",
            "What is the monthly inventory turnover ratio for each product?",
            "Which suppliers are associated with the top 3 performing products?",
            "How many unique products have received orders each year?",
            "What is the average quantity per unit for products that have never been ordered?",
            "Which products have sold at least 1000 units in total?",
            "What percentage of products have a unit price above $50?",
            "Identify the product with the highest discount given in any order detail.",
            "What is the total number of units ordered for products in each supplier group?",
            "Determine the month with the highest sales volume for each product.",
            "Which products have inventory levels below the reorder level?",
            "Which suppliers provide the most variety of products?",
            "What is the average discount given per product category?",
            "What is the total revenue for each supplier?",
            "Identify the top 5 products by sales quantity.",
            "What is the total number of discontinued products?",
            "Calculate the sales revenue per category for the last year.",
            "Which product has the highest average order quantity?",
            "Find the product with the most units on order.",
            "What is the average unit price of products by supplier?",
            "Identify products with sales revenue exceeding $10,000.",
            "Which categories have the highest average sales discount?",
            "List products with inventory levels more than twice their reorder level.",
            "Identify suppliers with more than 50 units on order across all their products.",
            "Calculate the inventory turnover ratio for each product category.",
            "Find the most frequently ordered product.",
            "What is the average order quantity per supplier?",
            "Which products are currently out of stock?",
            "Identify the average discount provided on products per category."
        ],
        "sql_queries": [
            "SELECT ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN categories ON products.CategoryID = categories.CategoryID WHERE [Order Details].OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= '2023-09-01' AND OrderDate < '2023-10-01') GROUP BY categories.CategoryName;",
            "SELECT products.ProductName FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].OrderID IS NULL;",
            "SELECT SupplierID, COUNT(ProductID) as ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT ProductName, SUM(([Order Details].UnitPrice - [Order Details].Discount) * [Order Details].Quantity) AS Profit FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY Profit DESC LIMIT 1;",
            "SELECT ProductName, SUM([Order Details].Quantity) AS TotalUnits, COUNT([Order Details].OrderID) AS TotalOrders FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE products.Discontinued = 1 GROUP BY ProductName;",
            "SELECT DATE_TRUNC('month', OrderDate) AS OrderMonth, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE OrderDate >= '2022-10-01' AND OrderDate < '2023-10-01' GROUP BY OrderMonth;",
            "SELECT ProductName FROM products WHERE UnitsInStock = 0 AND UnitsOnOrder > 0;",
            "SELECT SupplierID, SUM([Order Details].Quantity) AS TotalUnits FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID;",
            "SELECT ProductName, (SUM(CASE WHEN DATE_TRUNC('month', OrderDate) = DATE '2023-09-01' THEN [Order Details].Quantity ELSE 0 END) - SUM(CASE WHEN DATE_TRUNC('month', OrderDate) = DATE '2023-08-01' THEN [Order Details].Quantity ELSE 0 END)) AS Increase FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ProductName ORDER BY Increase DESC LIMIT 1;",
            "SELECT ProductName, UnitsOnOrder FROM products ORDER BY UnitsOnOrder DESC LIMIT 10;",
            "SELECT ProductName FROM products WHERE ProductID IN (SELECT ProductID FROM [Order Details] GROUP BY ProductID HAVING COUNT(DISTINCT DATE_TRUNC('month', OrderDate)) = 12);",
            "SELECT COUNT(ProductID) * 1.0 / (SELECT COUNT(*) FROM products) AS ProportionDiscontinued FROM products WHERE Discontinued = 1;",
            "SELECT ProductName, AVG(SUM_Monthly.Quantity) AS AvgMonthlySales FROM products JOIN (SELECT ProductID, SUM(Quantity) AS Quantity, EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month FROM [Order Details] GROUP BY ProductID, Year, Month) AS SUM_Monthly ON products.ProductID = SUM_Monthly.ProductID GROUP BY ProductName;",
            "SELECT ProductName, MAX(Discount) AS MaxDiscount, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY MaxDiscount DESC LIMIT 5;",
            "SELECT ProductName, AVG(DATE_PART('day', OrderDate - LAG(OrderDate) OVER (PARTITION BY ProductID ORDER BY OrderDate))) AS AvgDaysBetweenOrders FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName;",
            "SELECT ProductName FROM products WHERE ProductID IN (SELECT ProductID FROM [Order Details] GROUP BY ProductID HAVING SUM(Quantity) > 1000) AND UnitsInStock <= ReorderLevel;",
            "SELECT CategoryID FROM products GROUP BY CategoryID HAVING COUNT(*) = SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END);",
            "SELECT ProductID, SUM(Quantity) AS TotalSalesQuantity FROM [Order Details] GROUP BY ProductID;",
            "SELECT COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock + UnitsOnOrder <= ReorderLevel;",
            "SELECT ProductID, SUM(Quantity * (UnitPrice - (UnitPrice * Discount))) AS TotalRevenue FROM [Order Details] GROUP BY ProductID;",
            "SELECT SupplierID, COUNT(*) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1;",
            "SELECT AVG(UnitPrice) AS AverageUnitPrice FROM products;",
            "SELECT ProductID, UnitsInStock FROM products;",
            "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT ProductID, SUM(Quantity * UnitPrice * Discount) AS TotalDiscount FROM [Order Details] GROUP BY ProductID;",
            "SELECT p.CategoryID, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT od.ProductID, (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID -- Assuming there is an OrderDate column; it's missing in schema WHERE MONTH(od.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(od.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY od.ProductID ORDER BY InventoryTurnoverRatio DESC LIMIT 1;",
            "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS CategoryRevenue FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryID;",
            "SELECT SupplierID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY SupplierID ORDER BY AveragePrice ASC LIMIT 5;",
            "SELECT SupplierID, COUNT(DISTINCT [Order Details].ProductID) AS UniqueProductsSold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID;",
            "SELECT MONTH(OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY MONTH(OrderDate);",
            "SELECT ProductID, ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
            "SELECT SupplierID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY SupplierID;",
            "SELECT COUNT(ProductID) AS ProductCount FROM products WHERE CAST(SUBSTRING_INDEX(QuantityPerUnit, ' ', 1) AS UNSIGNED) > 10;",
            "SELECT AVG(ReorderLevel) AS AverageReorderLevel FROM products;",
            "SELECT DISTINCT p.ProductID, p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.Discount > 0.10;",
            "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName;",
            "SELECT ProductID, ProductName, UnitsInStock FROM products ORDER BY UnitsInStock DESC LIMIT 5;",
            "SELECT SupplierID, COUNT(*) AS NumberOfProducts FROM products GROUP BY SupplierID ORDER BY NumberOfProducts DESC LIMIT 1;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
            "SELECT products.CategoryID, DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.CategoryID, DATE_TRUNC('month', orders.OrderDate);",
            "SELECT products.ProductID, products.ProductName, (SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock)) AS InventoryTurnover FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) GROUP BY products.ProductID, products.ProductName ORDER BY InventoryTurnover DESC LIMIT 5;",
            "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM products)) AS DiscontinuedPercentage FROM products WHERE Discontinued = 1;",
            "SELECT AVG(UnitPrice) FROM [Order Details] WHERE Discount > 0;",
            "SELECT products.ProductID, products.ProductName, SUM(([Order Details].Quantity * [Order Details].UnitPrice) - ([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount)) AS NetRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName ORDER BY NetRevenue DESC LIMIT 5;",
            "SELECT products.CategoryID, AVG([Order Details].UnitPrice) AS AverageSalePrice FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.CategoryID;",
            "SELECT SupplierID FROM products GROUP BY SupplierID HAVING AVG(UnitPrice) > 20;",
            "SELECT COUNT(DISTINCT OrderID) FROM [Order Details] WHERE Discount > 0.2;",
            "SELECT SUM(UnitPrice * UnitsOnOrder) FROM products WHERE UnitsOnOrder > 0;",
            "SELECT ProductID, ProductName, (UnitsInStock - UnitsOnOrder) AS StockDiscrepancy FROM products ORDER BY StockDiscrepancy DESC LIMIT 5;",
            "SELECT products.CategoryID, SUM([Order Details].Quantity) AS TotalSold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE YEAR([Order Details].OrderDate) = YEAR(CURRENT_DATE) GROUP BY products.CategoryID ORDER BY TotalSold DESC LIMIT 1;",
            "SELECT products.ProductID, products.ProductName, DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '6 months' GROUP BY products.ProductID, products.ProductName, Month ORDER BY Month DESC;",
            "SELECT COUNT(DISTINCT ProductID) FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM (SELECT OrderID, SUM(Quantity * UnitPrice) AS OrderValue FROM [Order Details] GROUP BY OrderID ORDER BY OrderValue DESC LIMIT 3) AS TopOrders);",
            "SELECT CategoryID, AVG(ReorderLevel) AS AverageReorderLevel FROM products GROUP BY CategoryID;",
            "SELECT ProductID, ProductName FROM products WHERE ReorderLevel > UnitsInStock;",
            "SELECT p.ProductName, SUM(od.Quantity) as TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
            "SELECT ProductID, ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
            "SELECT SupplierID, COUNT(DISTINCT ProductID) as ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1;",
            "SELECT AVG(Discount) as AverageDiscount FROM [Order Details];",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) DESC LIMIT 1;",
            "SELECT c.CategoryID, SUM(od.Quantity) as TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
            "SELECT ProductID, ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) as TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE EXTRACT(MONTH FROM od.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) - 1 AND EXTRACT(YEAR FROM od.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY p.ProductName ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT AVG(UnitsOnOrder) as AverageUnitsOnOrder FROM products WHERE Discontinued = 0;",
            "SELECT COUNT(*) FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
            "SELECT p.ProductID, p.ProductName, od.Discount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID ORDER BY od.Discount DESC LIMIT 1;",
            "SELECT SupplierID, SUM(UnitsInStock + UnitsOnOrder) as TotalUnits FROM products GROUP BY SupplierID ORDER BY TotalUnits DESC LIMIT 3;",
            "SELECT s.SupplierID, SUM(od.Quantity) as TotalQuantity, SUM(od.Quantity * (od.UnitPrice - (od.UnitPrice * od.Discount))) as TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;",
            "SELECT (COUNT(DISTINCT CASE WHEN Discount > 0 THEN OrderID END) / COUNT(DISTINCT OrderID)) * 100 as DiscountedOrdersPercentage FROM [Order Details];",
            "SELECT DISTINCT products.ProductID, products.ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount > 0.2;",
            "SELECT c.CategoryID, EXTRACT(QUARTER FROM o.order_date) as Quarter, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) as InventoryTurnover FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY c.CategoryID, Quarter ORDER BY c.CategoryID, Quarter;",
            "SELECT p.SupplierID, SUM(p.UnitsInStock + p.UnitsOnOrder) AS TotalUnits FROM products p GROUP BY p.SupplierID ORDER BY TotalUnits DESC;",
            "SELECT AVG(UnitPrice) FROM products;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT ProductName FROM products WHERE Discontinued = 1;",
            "SELECT ProductName FROM products ORDER BY UnitPrice DESC LIMIT 1;",
            "SELECT ProductName FROM products WHERE ReorderLevel > 50;",
            "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
            "SELECT SupplierID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY SupplierID;",
            "SELECT CategoryID, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID;",
            "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT DISTINCT SupplierID FROM products WHERE Discontinued = 1;",
            "SELECT DISTINCT products.ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount > 0.20;",
            "SELECT products.ProductName, (UnitsInStock * UnitPrice) AS InventoryValue FROM products;",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS MonthlySales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName;",
            "SELECT ProductName, (UnitsInStock - ReorderLevel) AS StockDifference FROM products;",
            "SELECT products.ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName HAVING SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) > (SELECT AVG(total_sales) FROM (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID) AS subquery);",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM [Order Details];",
            "SELECT COUNT(*) AS ProductsAboveAvgPrice FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
            "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalQuantity DESC LIMIT 3;",
            "SELECT products.ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount > 0 GROUP BY products.ProductID, products.ProductName HAVING COUNT([Order Details].Discount) > 10;",
            "SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName HAVING SUM(od.Quantity) > MAX(p.UnitsInStock)",
            "SELECT c.CategoryID, AVG(p.UnitsOnOrder) AS AvgUnitsOnOrder FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID",
            "SELECT COUNT(*) FROM products WHERE Discontinued = 1",
            "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1",
            "SELECT ProductID, COUNT(DISTINCT OrderID) AS TotalOrders FROM [Order Details] GROUP BY ProductID",
            "SELECT p.ProductID, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS TurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY TurnoverRatio DESC LIMIT 1",
            "SELECT COUNT(ProductID) FROM products WHERE UnitsInStock < ReorderLevel",
            "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details])",
            "SELECT s.SupplierID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID",
            "SELECT EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS MonthlySales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY OrderMonth ORDER BY MonthlySales DESC LIMIT 1",
            "SELECT c.CategoryID, AVG(p.UnitPrice) AS AvgUnitPrice FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID",
            "SELECT EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, COUNT(DISTINCT od.ProductID) AS UniqueProducts FROM Orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY OrderMonth",
            "SELECT s.SupplierID, AVG(p.UnitPrice) AS AvgUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY AvgUnitPrice DESC LIMIT 1",
            "SELECT od.ProductID, COUNT(od.ProductID) AS Frequency FROM [Order Details] od GROUP BY od.ProductID ORDER BY Frequency DESC LIMIT 1",
            "SELECT p.ProductID, (p.UnitsInStock * p.UnitPrice) AS InventoryValue FROM products p",
            "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS CategoryRevenue FROM products p JOIN categories c ON p.CategoryID = c.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryID ORDER BY CategoryRevenue DESC LIMIT 1",
            "SELECT p.ProductID, EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, SUM(od.Quantity) AS MonthlySales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, OrderMonth ORDER BY OrderMonth",
            "SELECT COUNT(DISTINCT ProductID) FROM [Order Details] WHERE Discount > 0.1",
            "SELECT p.ProductName, SUM(od.Quantity) as TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSold DESC;",
            "SELECT SUM(p.UnitsOnOrder) as TotalOnOrder FROM products p WHERE p.Discontinued = 1;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) as TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
            "SELECT DISTINCT p.SupplierID FROM products p WHERE p.UnitsInStock = 0;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscountedAmount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0 GROUP BY p.ProductName;",
            "SELECT p.CategoryID, MAX(p.UnitPrice) as MaxUnitPrice FROM products p GROUP BY p.CategoryID;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) as Revenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0 AND od.OrderDate >= DATEADD(month, -1, CAST(GETDATE() AS DATE)) GROUP BY p.ProductName;",
            "SELECT p.ProductName FROM products p WHERE p.UnitsInStock < p.ReorderLevel;",
            "SELECT SUM(p.UnitsInStock * p.UnitPrice) as TotalInventoryValue FROM products p;",
            "SELECT od.ProductID, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) as InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY od.ProductID;",
            "SELECT s.SupplierID, p.ProductName, SUM(od.Quantity) as TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID, p.ProductName ORDER BY TotalSold DESC LIMIT 3;",
            "SELECT YEAR(o.OrderDate) as OrderYear, COUNT(DISTINCT od.ProductID) as UniqueProductsOrdered FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY YEAR(o.OrderDate);",
            "SELECT AVG(CAST(SUBSTRING_INDEX(p.QuantityPerUnit, ' ', 1) AS DECIMAL)) as AvgQuantityPerUnit FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;",
            "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity) >= 1000;",
            "SELECT (COUNT(*) FILTER (WHERE UnitPrice > 50) * 100.0) / COUNT(*) as PriceAbove50Percentage FROM products;",
            "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID ORDER BY od.Discount DESC LIMIT 1;",
            "SELECT p.SupplierID, SUM(od.Quantity) AS TotalUnitsOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",
            "SELECT ProductID, OrderMonth, TotalMonthlySales FROM (SELECT od.ProductID, EXTRACT(MONTH FROM o.OrderDate) as OrderMonth, SUM(od.Quantity) as TotalMonthlySales, RANK() OVER (PARTITION BY od.ProductID ORDER BY SUM(od.Quantity) DESC) as sales_rank FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY od.ProductID, OrderMonth) ranked_sales WHERE sales_rank = 1;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductVariety FROM products GROUP BY SupplierID ORDER BY ProductVariety DESC;",
            "SELECT c.CategoryID, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
            "SELECT p.SupplierID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalSupplierRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
            "SELECT COUNT(*) AS TotalDiscontinued FROM products WHERE Discontinued = 1;",
            "SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= CURDATE() - INTERVAL 1 YEAR GROUP BY p.CategoryID;",
            "SELECT p.ProductName, AVG(od.Quantity) AS AverageOrderQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY AverageOrderQuantity DESC LIMIT 1;",
            "SELECT ProductName FROM products ORDER BY UnitsOnOrder DESC LIMIT 1;",
            "SELECT SupplierID, AVG(UnitPrice) AS AverageUnitPrice FROM products GROUP BY SupplierID;",
            "SELECT ProductName FROM (SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName) AS sub_query WHERE TotalRevenue > 10000;",
            "SELECT c.CategoryID, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID ORDER BY AverageDiscount DESC;",
            "SELECT ProductName FROM products WHERE UnitsInStock > 2 * ReorderLevel;",
            "SELECT SupplierID FROM products WHERE UnitsOnOrder > 50;",
            "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
            "SELECT ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY COUNT(od.OrderID) DESC FETCH FIRST 1 ROW ONLY;",
            "SELECT SupplierID, AVG(od.Quantity) AS AverageOrderQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY SupplierID;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock = 0;",
            "SELECT products.CategoryID, AVG([Order Details].Discount) AS AverageDiscount FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.CategoryID;"
        ],
        "reviews": [
            "The SQL query is mostly correct. It accurately joins the 'products' and '[Order Details]' tables using the 'ProductID' and calculates the sum of quantities sold. The use of 'GROUP BY ProductName' and 'ORDER BY TotalQuantity DESC' ensures that products are ranked by quantity. However, the query assumes that the database environment supports the 'LIMIT' clause, which is specific to certain database systems like MySQL. In ANSI SQL, 'FETCH FIRST 5 ROWS ONLY' should be used instead. Here is the ANSI-compliant query: SELECT ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY TotalQuantity DESC FETCH FIRST 5 ROWS ONLY;",
            "The SQL query is correct. It retrieves the ProductName from the products table where the UnitsInStock is less than the ReorderLevel.",
            "The original query does not consider the 'Discount' column in calculating the total revenue. The correct formula for revenue should include the discount applied. Therefore, the calculation should be adjusted to multiply by (1 - Discount).",
            "The SQL query is correct. It selects products that have never been ordered by left joining the products table with the [Order Details] table and filtering for rows where the OrderID in [Order Details] is NULL.",
            "The query is correct. It retrieves the SupplierID and counts the number of products each supplier provides, then orders the result by ProductCount in descending order, which aligns with the business question.",
            "The SQL query is correct as it calculates the average discount directly from the [Order Details] table using the AVG function.",
            "The SQL query is mostly correct, but it incorrectly references 'Discount' without the table qualifier. It should be '[Order Details].Discount'. The corrected query includes this change.",
            "The query correctly calculates the total sales and orders for discontinued products by summing the quantity and counting the order IDs, grouped by ProductName.",
            "The original query is mostly correct, but there is a minor issue: the column 'OrderDate' was improperly referenced as '[Order Details].OrderDate'. In standard SQL, using brackets for table names is not typical. I've adjusted it to standard syntax by removing brackets for referencing 'OrderDate'. Additionally, ensure the OrderDate column exists in the [Order Details] table.",
            "The SQL query is correct. It accurately retrieves the ProductName from the products table for products where UnitsInStock is zero and UnitsOnOrder is greater than zero.",
            "The SQL query is correct. It joins the 'products' table with the '[Order Details]' table using ProductID and groups the result by SupplierID to calculate the total units sold for each supplier.",
            "The original query is missing a join to the 'orders' table to access the 'OrderDate' field, which is not present in the 'Order Details' table. The correct query also adjusts the date comparison format to explicitly use the DATE keyword.",
            "The SQL query is correct. It selects the product name and units on order from the products table, orders them in descending order by units on order, and limits the result to the top 10.",
            "The `OrderDate` column should be referenced explicitly. Ensure the column exists in the applicable table, such as an 'orders' table, as it is not included in the '[Order Details]' table based on the schema. Depending on the actual schema, you might need to join '[Order Details]' with an 'orders' table to access 'OrderDate'.",
            "The SQL query correctly calculates the proportion of discontinued products by counting the discontinued products where Discontinued = 1 and dividing by the total count of products in the table. The use of COUNT and a subquery for total count is appropriate for this calculation.",
            "The original query does not correctly calculate average monthly sales. It needs to aggregate sales monthly before averaging them. A subquery is used to first sum quantities per month and then calculate the average.",
            "The original query listed each discount row individually, which was incorrect for finding the highest discount rates. I adjusted the query to use MAX(Discount) to identify the maximum discount rate per product. Additionally, I included the discount in the TotalSales calculation.",
            "Corrected the ordering in DATE_PART function and added the join between [Order Details] and products to get ProductName.",
            "The SQL query is correct. It selects products where the total quantity sold exceeds 1000 units and the UnitsInStock is at or below the ReorderLevel.",
            "The original query incorrectly assumes that the number of distinct ProductIDs is the same as total ProductIDs, which doesn't check if all products are discontinued. The corrected query uses a HAVING clause to compare the total count of products in the category with the count of discontinued products using a CASE statement.",
            "The query is correct. It accurately calculates the total sales quantity for each product by summing the 'Quantity' column in the '[Order Details]' table and grouping by 'ProductID'.",
            "The SQL query is correct. It accurately counts the number of discontinued products by filtering with 'Discontinued = 1' and using COUNT to tally the results.",
            "The query is mostly correct, but it should consider products that also are not discontinued. Add 'AND Discontinued = 0' to the WHERE clause.",
            "The original query did not account for the discount applied to the products. The corrected query includes the discount in the calculation: Quantity * (UnitPrice - (UnitPrice * Discount)).",
            "The SQL query is correct. It accurately counts the number of products each supplier provides and orders by the count in descending order, limiting the result to the top supplier.",
            "The SQL query correctly calculates the average unit price of products from the products table. No changes are needed.",
            "The SQL query correctly retrieves the number of units in stock for each product by selecting the ProductID and UnitsInStock from the products table. No corrections are needed.",
            "The SQL query is correct. It successfully selects products that have never been ordered by using a subquery to check for products not present in the [Order Details] table.",
            "The given SQL query is correct. It calculates the total discount for each product by multiplying the quantity, unit price, and discount, and then summing these values for each ProductID.",
            "Corrected the query by removing the join with the non-existent 'Category' table. The 'CategoryID' was directly available in the 'products' table.",
            "Corrected the query to calculate Inventory Turnover Ratio according to its definition by using SUM(od.Quantity * od.UnitPrice). Ensured temporal condition includes Year check to avoid cross-year issues. Clarified assumption about OrderDate, as it's not in the schema.",
            "The original query uses 'Category' which appears to be incorrect. The correct table reference should likely be 'categories'. Assuming 'categories' is the correct table name, the revised query should work as intended.",
            "The SQL query is correct. It aggregates the average unit price of products by supplier and orders the results in ascending order to get the suppliers with the lowest average price. The use of LIMIT 5 is appropriate to return only the top 5 suppliers.",
            "The original query only counted products per supplier without checking if they were actually sold. The corrected query joins with the '[Order Details]' table to ensure only products that have been sold are counted.",
            "The original query lacks a JOIN with the orders table, which is necessary to access the OrderDate. Additionally, a NULLIF function is used to handle possible division by zero in AVG(p.UnitsInStock).",
            "The SQL query correctly retrieves products with a unit price greater than the average unit price by comparing each product's price to the average price from the same table. The query is accurate and follows the ANSI SQL standard.",
            "The SQL query correctly obtains the total number of units on order for each supplier by aggregating the UnitsOnOrder column and grouping by SupplierID from the products table. The query is accurate and correctly answers the question.",
            "The original query correctly extracts the number from 'QuantityPerUnit' and casts it as UNSIGNED. However, to answer how many products meet the criteria, use COUNT instead of listing each ProductID and ProductName.",
            "The SQL query is correct. It correctly calculates the average reorder level across all products using the AVG function on the ReorderLevel column from the products table.",
            "The original query is incorrect because it selects columns from the 'Order Details' table, which doesn't have 'ProductName'. A join with the 'products' table is needed to access the 'ProductName' field.",
            "The SQL query correctly calculates the total sales revenue for each product by joining the products table with the [Order Details] table and summing the product of Quantity and UnitPrice. The GROUP BY clause includes the necessary columns, ProductID and ProductName, to aggregate the results properly. No changes are needed.",
            "The SQL query correctly retrieves the top 5 products with the highest units in stock. The ORDER BY clause is used to sort the products in descending order based on the UnitsInStock, and LIMIT 5 restricts the result set to the top 5 records. No changes are necessary for the query.",
            "The SQL query correctly answers the business question. It counts the number of products each supplier provides, orders them in descending order, and limits the result to the top entry, which identifies the supplier with the most products.",
            "The SQL query correctly calculates the average discount on products from the [Order Details] table. No changes are needed.",
            "The SQL query is correct. It selects the ProductID and ProductName from the products table where the UnitsInStock are less than or equal to the ReorderLevel, indicating products that need to be reordered.",
            "The query is mostly correct, but the alias 'Month' must be used consistently in the GROUP BY clause. The corrected query ensures proper use of the aliased column.",
            "The original query did not filter results for the past month. Added a WHERE clause to only include sales from the previous month, assuming OrderDate is available in the [Order Details] table.",
            "The initial query has a mistake when calculating the percentage, as integer division can lead to rounding down to zero. Multiplying by 100 before division ensures the correct percentage calculation.",
            "The original SQL query is correct. It calculates the average unit price from the [Order Details] table for orders where a discount greater than 0 is applied. The use of AVG and the WHERE clause checks for discounts correctly address the business question.",
            "The query correctly calculates the net revenue after applying discounts by using the formula ([Order Details].Quantity * [Order Details].UnitPrice) - ([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount). The query aggregates this value using SUM and groups by ProductID and ProductName, then orders the result in descending order to find the highest revenue products, showing the top 5. The query is correct.",
            "The SQL query is correct. It accurately calculates the average sale price per unit for each product category using a JOIN between the 'products' and '[Order Details]' tables, and groups by 'CategoryID.'",
            "The SQL query correctly lists suppliers whose average product unit price is higher than $20 by grouping by SupplierID and using the HAVING clause to filter the results based on the average UnitPrice. The query is correct and aligned with the business question.",
            "The SQL query is correct. It counts the distinct number of orders where the discount is greater than 20% from the [Order Details] table.",
            "The original query incorrectly summed only the UnitPrice. The correct query multiplies the UnitPrice by UnitsOnOrder to calculate the total unit price of products currently on order.",
            "The original query orders the results in ascending order, which would show the smallest discrepancies first. To find the largest discrepancies, the ORDER BY clause should use DESC.",
            "The original query does not filter by the current year, which is necessary to answer the question correctly. Added a WHERE clause to filter records by the current year based on the OrderDate.",
            "The original query did not filter the results to only include the last six months. Added a WHERE clause to ensure the data is limited to the desired timeframe.",
            "The original query uses a non-standard 'TOP 3' clause and incorrectly correlates 'orders' in a subquery. The correct query utilizes a subquery to first rank the orders based on their total value using 'LIMIT 3' after ordering the orders by their sum value in descending order.",
            "The SQL query is correct and answers the business question accurately by calculating the average reorder level for products grouped by category ID.",
            "The SQL query is correct. It selects products where the reorder level is greater than the units in stock, which matches the business question.",
            "The original query groups by ProductID instead of ProductName, which could lead to incorrect labeling of the results. This is corrected by grouping by ProductName.",
            "The query correctly retrieves discontinued products that still have units in stock by filtering products where Discontinued is true (1) and UnitsInStock is greater than 0. However, to answer the business question 'how many,' we need to count these products, not just list them. The corrected query is: SELECT COUNT(*) AS DiscontinuedInStockCount FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
            "The SQL query correctly identifies the supplier providing the most diverse range of products by counting distinct ProductIDs for each SupplierID and ordering them in descending order of ProductCount. The use of LIMIT 1 ensures only the top supplier is returned. The query is correct and requires no changes.",
            "The query correctly calculates the average discount. No changes needed.",
            "The SQL query is correct. It selects ProductID and ProductName from the 'products' table where UnitsInStock is less than ReorderLevel, which matches the business question requirements.",
            "The original query was missing 'p.ProductName' in the GROUP BY clause. Also, to prevent division by zero, NULLIF is used to handle cases where AVG(UnitsInStock) might be zero.",
            "The SQL query is correct, assuming the presence of a 'categories' table with a 'CategoryID' column. All necessary joins and aggregations are properly applied.",
            "The SQL query correctly lists products with a unit price higher than the average unit price of all products. No corrections needed.",
            "The original query was missing the column reference to 'OrderDate' from the '[Order Details]' table, assuming the column exists. Changed 'order_date' to 'od.OrderDate'. The logic for checking the previous month is correct as it doesn't account for year boundary, which might need adjustment for December.",
            "The SQL query is correct. It selects the average units on order for products where the Discontinued flag is 0, indicating active products.",
            "The SQL query is correct. It counts the number of products with a UnitPrice greater than the average UnitPrice.",
            "The original query used MAX(Discount) without properly linking the product details. The corrected query joins the products table to get the ProductName and sorts the results by Discount to find the maximum.",
            "The SQL query is correct. It correctly calculates the total units supplied by each supplier as the sum of UnitsInStock and UnitsOnOrder per SupplierID, orders the results in descending order, and limits the output to the top 3 suppliers.",
            "The original query didn't account for the discount in revenue calculation. The correct calculation for revenue should subtract the discount from the unit price.",
            "The original query incorrectly calculates the percentage of discounted orders by counting all rows rather than distinct orders. The corrected query uses COUNT with DISTINCT to count only unique orders.",
            "The given SQL query only selects from [Order Details] and does not join with the products table to get the ProductName. Adjusted the query to join with the products table and use DISTINCT to ensure each product is listed only once.",
            "Added a join to the 'orders' table to access 'order_date'. The initial query missed this join, which is necessary to extract the quarter.",
            "The original query incorrectly counts the number of products instead of summing the units provided. The corrected query sums the 'UnitsInStock' and 'UnitsOnOrder' for each supplier to determine which supplier provides the most products by unit.",
            "The SQL query is correct for finding the average unit price of all products.",
            "The SQL query is correct. It retrieves the names of products where the units in stock are below the reorder level.",
            "The query is correct. It selects the names of products from the 'products' table where the 'Discontinued' column is set to 1, which indicates that the product is discontinued.",
            "The SQL query is correct. It correctly selects the product with the highest unit price by ordering the 'products' table by 'UnitPrice' in descending order and limiting the result to the first row.",
            "The query is correct. It selects the ProductName from the products table where the ReorderLevel is greater than 50.",
            "The query correctly calculates the total sales revenue by considering the unit price, quantity, and discount. However, the GROUP BY clause should use 'products.ProductName' instead of 'products.ProductID' to match the select statement and avoid an error.",
            "The SQL query correctly calculates the average unit price for each supplier by grouping products by SupplierID and using the AVG(UnitPrice) function. No changes needed.",
            "The query correctly calculates the total quantity sold for each category of products by joining the products and [Order Details] tables on ProductID and grouping by CategoryID. No changes are needed.",
            "The query is correct. It selects product names from the products table where the ProductID does not exist in any orders from the [Order Details] table. This effectively identifies products that have never been ordered.",
            "The original query has an unnecessary subquery. The correct query directly filters the 'products' table for discontinued products.",
            "The SQL query correctly identifies products with a discount greater than 20% by joining the products table with the [Order Details] table and applying the appropriate WHERE condition. The use of DISTINCT ensures that each product is listed only once even if there are multiple qualifying orders.",
            "The SQL query correctly calculates the total value of current inventory for each product by multiplying UnitsInStock with UnitPrice and selecting the ProductName.",
            "The query is missing monthly analysis. To calculate monthly sales performance, we need to include a date column in the GROUP BY clause, assuming there's such a column available in the schema, which currently isn't defined in the provided schema. Additionally, the product name should be included in the GROUP BY clause to prevent SQL errors.",
            "The SQL query correctly retrieves the difference in units between current stock and reorder level for each product. It selects the product name and calculates the difference by subtracting ReorderLevel from UnitsInStock.",
            "The original query had two issues: 1) The 'GROUP BY' clause was missing 'ProductName', which is necessary when selecting it. 2) The subquery incorrectly attempted to average aggregates directly. Instead, it should compute the sum inside a subquery and then average those results.",
            "The SQL query is correct and retrieves the products with stock levels below their reorder levels as per the business question.",
            "The SQL query correctly calculates the cumulative discount by multiplying the UnitPrice, Quantity, and Discount for all records in the [Order Details] table and summing them up. There are no mistakes.",
            "The SQL query is correct. It counts the number of products where the UnitPrice is greater than the average UnitPrice across all products.",
            "The query is mostly correct, but the GROUP BY clause should include products.ProductName to align with the SELECT statement. The correct query is: SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName;",
            "The original query is correct except for the GROUP BY clause. It should group by ProductName instead of ProductID to align with the select clause.",
            "The original query incorrectly used the HAVING clause with COUNT on a boolean expression. The WHERE clause should be used to filter rows with a discount greater than 0 before grouping.",
            "Corrected the SQL query to make sure we use an aggregate function (MAX) for p.UnitsInStock in the HAVING clause, as non-aggregated columns cannot be used directly unless they are included in the GROUP BY clause.",
            "The SQL query references a 'categories' table, which is not defined in the given schema. To correct this, ensure that the 'categories' table is included in the schema or adjust the query to match the available data. Assumptions not provided in the schema could invalidate this query's JOIN operation if 'categories' is actually stored in another way or not used. Without further information, no exact correction can be inferred. If 'categories' is not available, query adjustments should focus on available tables and columns while adhering to the business question requirements.",
            "The query is correct. It counts the number of products with a Discontinued value of 1, which indicates they are discontinued.",
            "The SQL query is correct. It selects the SupplierID and counts distinct ProductID for each supplier, groups them by SupplierID, and orders the result in descending order to find the supplier with the most different products. The use of LIMIT 1 correctly returns only the top supplier.",
            "The original SQL query correctly groups by ProductID and uses COUNT to determine the number of orders for each product. However, it should use COUNT(DISTINCT OrderID) to accurately count the unique orders per product, as the same product could appear multiple times in different lines of the same order.",
            "The original query is mostly correct, but it does not handle the potential division by zero in AVG(p.UnitsInStock). Adding the NULLIF function ensures that the division does not result in an error if UnitsInStock is zero.",
            "The query should count the number of products rather than list their IDs and names. The original query is missing an aggregate function to count the products.",
            "The provided SQL query is correct. It retrieves products that have not received any orders by checking if the ProductID is not present in the '[Order Details]' table.",
            "The SQL query seems correct for calculating the total revenue from orders for each supplier. It properly joins the suppliers, products, and order details tables to sum the product of quantity and unit price by supplier. Make sure the 'suppliers' table exists with the appropriate 'SupplierID'.",
            "The original query did not account for the 'Discount' field in the 'Order Details' table. The 'MonthlySales' should be calculated by subtracting the discount from the unit price times quantity, i.e., (od.Quantity * od.UnitPrice * (1 - od.Discount)). Otherwise, the query logic is correct.",
            "The SQL query is mostly correct. However, the table 'categories' must be defined in the schema provided in the question for this query to be valid. Assuming 'categories' is a valid table with 'CategoryID' column, the query correctly calculates the average unit price for each category based on the provided schema.",
            "The query correctly uses the EXTRACT function to obtain the month from the order date and counts distinct ProductIDs grouped by month.",
            "The SQL query is almost correct, but it needs to account for potential issues with rows having a NULL unit price. If suppliers still need to be included when all their products are discontinued or have no price listed, consider using a COALESCE function: SELECT s.SupplierID, AVG(COALESCE(p.UnitPrice, 0)) AS AvgUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 0 GROUP BY s.SupplierID ORDER BY AvgUnitPrice DESC LIMIT 1.",
            "The query is correctly structured for the question. It counts the occurrences of each ProductID in the [Order Details] table, orders the result by frequency in descending order, and limits the output to the top result, which would be the most frequently ordered product.",
            "The SQL query is correct. It calculates the inventory value for each product by multiplying 'UnitsInStock' by 'UnitPrice'.",
            "The original query did not account for the discount in the calculation of sales revenue. The corrected query includes the discount by multiplying the revenue by (1 - od.Discount).",
            "The query is mostly correct, but missing the 'YEAR' in the aggregation. To track trends over time, it's usually best to include both year and month. The corrected query is: SELECT p.ProductID, EXTRACT(YEAR FROM o.OrderDate) AS OrderYear, EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, SUM(od.Quantity) AS MonthlySales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, OrderYear, OrderMonth ORDER BY OrderYear, OrderMonth",
            "The query correctly counts the distinct products from the '[Order Details]' table where the discount is greater than 10%. The SQL query is correct.",
            "The query correctly calculates the total quantity sold for each product using a join between 'products' and '[Order Details]', and orders them by 'TotalSold' in descending order. However, ANSI SQL does not support LIMIT. Use FETCH FIRST 5 ROWS ONLY for the same functionality.",
            "Corrected the query to remove GROUP BY since the goal is to find the total units on order for all discontinued products collectively, not per product.",
            "The SQL query correctly calculates the total revenue from each product, using the product of Quantity and UnitPrice, and groups the results by ProductName.",
            "The original query is mostly correct, but joins the 'suppliers' table, which is unnecessary for just retrieving the SupplierID from the 'products' table. If the 'suppliers' table is needed for other columns, it can be included.",
            "The query is correctly structured to retrieve the product names and calculate the total discounted amount where a discount is applied in the order details. It appropriately joins the products and [Order Details] tables, filters for discounts greater than zero, and groups by product name.",
            "The SQL query is correct. It selects the CategoryID and the maximum UnitPrice for each category, grouping by CategoryID.",
            "Corrected the query to account for the discount in revenue calculation by multiplying with (1 - od.Discount). Added CAST to ensure comparison with dates without time component if necessary.",
            "The SQL query is correct. It appropriately selects products with UnitsInStock less than the ReorderLevel, identifying products that need reordering.",
            "The SQL query is correct. It calculates the total value of inventory by multiplying the units in stock by the unit price for each product and summing the results.",
            "The query correctly calculates the total cost of goods sold by multiplying the quantity and unit price from the Order Details table, then divides by the average units in stock from the Products table. The usage of GROUP BY is correct for aggregating by ProductID. However, to properly answer the question for monthly granularity, a date column would need to be included if available, but as per current schema, it appears there is no such date column. As per the provided schema, the query accurately reflects the business question.",
            "The current SQL query calculates the total quantity sold for each product and then limits the results to the top 3 based on quantity sold. However, if the question is about suppliers rather than products themselves, it should be adjusted to ensure that we're returning suppliers for the top 3 products overall, rather than individually. There's also no need to list ProductName in the final result unless explicitly required. Ensure the LIMIT effectively distinguishes the top products for all suppliers as intended.",
            "The SQL query correctly addresses the business question by counting distinct ProductIDs from the [Order Details] table for each year derived from the orders table's OrderDate. Ensure there's an 'OrderDate' column in the 'orders' table.",
            "The query needs to handle 'QuantityPerUnit' which is stored as VARCHAR. Using SUBSTRING_INDEX to parse and CAST to convert to DECIMAL before computing the average.",
            "The provided SQL query is correct for the business question. It correctly joins the products and [Order Details] tables on ProductID, groups the results by ProductName, and applies a HAVING clause to filter for products with total sales of at least 1000 units.",
            "The SQL query is using a correct approach to calculate the percentage of products with a unit price above $50 by using the FILTER clause. The query correctly divides the count of products with UnitPrice over 50 by the total product count, multiplying by 100 to express it as a percentage.",
            "The original query incorrectly calculates the maximum discount per product and then limits the result to one, which doesn't necessarily find the absolute highest discount. The revised query orders the products by discount and limits the result to the first highest discount without grouping.",
            "The original query joined with a 'suppliers' table, which was not part of the provided schema. The suppliers table was unnecessary as the SupplierID is available directly from the products table. The corrected query directly uses SupplierID from the products table for grouping.",
            "The original query does not correctly determine the month with the highest sales volume for each product. It lacks a mechanism to properly rank or filter by the maximum sales per month for each product. By using the RANK() window function, we can partition by ProductID and order by the sum of quantities to find the correct month with the highest sales volume.",
            "The SQL query correctly selects products where the number of units in stock is less than the reorder level. The query accurately answers the business question based on the provided schema.",
            "The SQL query is correct. It selects the SupplierID and counts the distinct ProductID for each supplier, grouping by SupplierID and ordering by product variety in descending order.",
            "The query incorrectly assumes a 'categories' table exists. Assuming it should calculate the average discount by category using the existing schema, the query is correct. However, the schema doesn't define a 'categories' table, making this query theoretically incorrect. Ensure the 'categories' data is available or correct the schema definition.",
            "The SQL query is correct and accurately calculates the total revenue for each supplier by joining the products and Order Details tables and applying the discount to the revenue calculation.",
            "The SQL query correctly identifies the top 5 products by sales quantity by joining the 'products' and '[Order Details]' tables on ProductID and then grouping by ProductName to calculate the total quantity sold. The query uses ORDER BY to sort the results in descending order of total quantity sold, and LIMIT 5 to return the top 5 products. The query is accurate as per the requirements.",
            "The SQL query is correct. It accurately counts the number of discontinued products by checking where the 'Discontinued' column is equal to 1.",
            "The query is mostly correct. However, it assumes the existence of a 'categories' table which is not present in the schema, and uses 'c.CategoryID'. Instead, 'CategoryID' should be selected directly from the 'products' table. Also, I adjusted the date function for SQL compliance.",
            "The query is correct. It calculates the average order quantity for each product and orders them in descending order, then limits the result to one to find the product with the highest average order quantity.",
            "The SQL query correctly retrieves the product name with the most units on order. The use of ORDER BY UnitsOnOrder DESC and LIMIT 1 is appropriate for identifying the product with the highest units on order.",
            "The SQL query is correct. It calculates the average unit price of products grouped by SupplierID from the products table.",
            "The SQL query correctly identifies products with sales revenue exceeding $10,000 by calculating the total revenue for each product using the formula: Quantity * UnitPrice * (1 - Discount). The subquery accurately groups the results by ProductName and the main query filters products where TotalRevenue exceeds $10,000. The query is correct and follows ANSI SQL standards.",
            "The SQL query correctly joins the 'products', '[Order Details]', and 'categories' tables and calculates the average discount grouped by CategoryID. The query accurately selects and orders the results by average discount in descending order. Thus, the query is correct as written.",
            "The SQL query is correct. It selects products where the 'UnitsInStock' is greater than twice the 'ReorderLevel'.",
            "The original query is incorrect because it checks the cumulative order quantity from the '[Order Details]' table. The business question pertains to 'UnitsOnOrder', which is already available in the 'products' table. Hence, the subquery and join are not needed.",
            "The SQL query is mostly correct, but it's missing the 'categories' table definition in the provided schema. Assuming that the 'categories' table exists with a matching 'CategoryID' column, the query is correctly calculating the inventory turnover ratio per category. If the table doesn't exist, it needs to be defined. Otherwise, the query structure is fine.",
            "The initial query is mostly correct, but 'LIMIT' is not part of ANSI SQL standard. Instead, use 'FETCH FIRST 1 ROW ONLY' for limiting the result to one row.",
            "The SQL query is correct. It correctly joins the 'products' table with the 'Order Details' table and calculates the average order quantity grouped by 'SupplierID'.",
            "The SQL query correctly identifies products that are currently out of stock by selecting products where UnitsInStock is equal to 0. No changes are necessary.",
            "The SQL query correctly joins the 'products' table and '[Order Details]' table using the 'ProductID'. It calculates the average discount per category using the AVG function and groups the result by 'CategoryID'. The query is correct and matches the business question."
        ],
        "difficulty": [
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "advanced",
            "medium",
            "easy",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium"
        ]
    },
    "Employee Performance": {
        "questions": [
            "What is the total sales generated by each employee in 2023?",
            "Which employee has the highest sales in December 2022?",
            "What is the average order value processed by each employee?",
            "How many orders did each employee process in Q1 2023?",
            "Which employee has the longest tenure in the company?",
            "Calculate the total freight cost per employee for shipped orders in 2022.",
            "Find the employee with the highest average discount on their orders.",
            "List the employees along with their total sales, sorted by sales in descending order.",
            "Identify the top 3 products sold by each employee based on quantity.",
            "Determine the total number of distinct customers handled by each employee.",
            "What is the total salary expenditure by region?",
            "Find employees who managed at least one order with a freight cost greater than $100.",
            "Calculate the monthly sales trends for each employee in 2022.",
            "What percentage of total sales does each employee contribute?",
            "Which employees are responsible for orders that were shipped late?",
            "List all employees who report directly to the employee with the highest sales.",
            "Determine the average time from order placement to shipment, by employee.",
            "Which employees have processed orders for every month in 2023?",
            "Identify employees whose total sales have increased each quarter in 2022.",
            "What is the difference in total sales between the most and least successful employees in Q4 2022?",
            "What is the total sales generated by each employee?",
            "Who is the top-performing employee in terms of sales for the current year?",
            "Which employee has the most delayed shipments?",
            "How many orders has each employee handled?",
            "Which employee has the highest average order value?",
            "What is the total discount given by each employee?",
            "Which employees have generated sales above the company average?",
            "What is the average sales per employee per month?",
            "How does the performance of employees vary by region?",
            "What is the correlation between an employee's tenure and their sales performance?",
            "Which employee has the highest number of different products in their orders?",
            "What is the employee distribution by city and the total sales from each city?",
            "Which employee has processed the most orders in a given month?",
            "What is the trend of sales performance by each employee over the past six months?",
            "Which employees have a growth in sales month over month?",
            "Who are the newly hired employees and their sales contribution within their first 6 months?",
            "Which employees provide the highest average discount on their orders?",
            "How much freight cost is associated with orders handled by each employee?",
            "What is the relationship between employee age and sales performance?",
            "Which employee has the most diverse customer base in terms of countries?",
            "What are the total sales generated by each employee?",
            "Which employee has the highest total sales in the last year?",
            "What are the average sales per order for each employee?",
            "How many orders were handled by each employee?",
            "Which employee managed the most orders above $200?",
            "Who are the top 3 employees with the highest sales in a given month?",
            "What is the total discount given by each employee over the last quarter?",
            "Identify employees who have not managed any orders this year.",
            "Which employees have more than one reportee?",
            "What is the correlation between employee tenure and total sales?",
            "Which employee had the longest gap between an order's required date and shipped date?",
            "How many employees have a salary higher than the average salary?",
            "What is the total sales by employees in each region?",
            "For each employee, what is the average number of days between order date and shipped date?",
            "How does the sales performance of employees vary across different countries?",
            "What are the monthly sales trends for each employee this year?",
            "Which employee's orders have incurred the highest freight charges?",
            "What is the highest quantity ordered by an employee in any single order?",
            "How many employees have generated zero sales this month?",
            "What is the total sales generated by each employee this month?",
            "Which employee has the highest total sales?",
            "List the top 5 employees based on their sales performance.",
            "What is the average age of employees in each city?",
            "Which employee has been with the company the longest?",
            "What is the total number of orders processed by each employee?",
            "How many employees report to each manager?",
            "What percentage of total sales is contributed by employees living in each region?",
            "For each employee, what is the average time taken to ship an order?",
            "Who are the employees with the highest discounts on products?",
            "How has the total sales changed over the last year for each employee?",
            "Determine the monthly sales per region by each employee.",
            "How many orders had missing required ship dates?",
            "What is the average salary of employees by their title?",
            "What is the total freight cost for orders handled by each employee?",
            "Find the correlation between employee age and sales performance.",
            "What are the most ordered products for each employee?",
            "Which employees have not been assigned any orders?",
            "How does employee performance vary across different countries?",
            "Identify employees who shipped orders faster than the company average.",
            "Which employee generated the highest sales in the last month?",
            "Which employee has the highest sales in the last month?",
            "How many orders has each employee processed this year?",
            "Calculate the average discount provided by each employee.",
            "Find the employee with the highest number of shipped orders.",
            "What is the average order value for each employee?",
            "List employees who have not processed any orders this year.",
            "What is the total freight cost accumulated by each employee?",
            "Identify the employee with the earliest hire date.",
            "How many employees are reporting to each manager?",
            "What are the top three cities with the most orders handled by employees?",
            "Determine the monthly sales trend for each employee over the last year.",
            "Find the total number of unique products sold by each employee.",
            "What is the average quantity of products sold per order by each employee?",
            "Identify employees who have never offered a discount on any product.",
            "Calculate the total sales per year for each employee.",
            "Which employee has the most orders with over $1000 in sales value?",
            "What is the proportion of orders shipped on time by each employee?",
            "Find the employee with the most delayed orders.",
            "Calculate the average salary of employees whose sales exceed $5000 per month.",
            "What are the total sales generated by each employee in the last month?",
            "Which employee has the highest total sales this year?",
            "How many orders have been handled by each employee?",
            "What is the average freight cost per order for each employee?",
            "List employees who have not placed any orders in the current year.",
            "What is the total revenue from orders handled by employees from a specific city?",
            "Identify the employee with the longest tenure and their total sales.",
            "Calculate the total discounts offered by each employee this year.",
            "Find the employee who handled the most orders last quarter.",
            "What is the total number of unique customers handled by each employee?",
            "Determine the total sales for each employee by product category.",
            "Identify employees who have a sales growth of more than 10% compared to last year.",
            "Find the top 3 employees with the highest sales-to-salary ratio.",
            "Which employees are handling orders with a higher average discount?",
            "Calculate the total number of products sold by each employee.",
            "What is the total revenue generated per region by employees?",
            "Identify the employees whose orders tend to have higher shipping delays.",
            "What is the monthly breakdown of sales per employee for the current year?",
            "Determine which employees have the lowest cancellation (orders not shipped) rates.",
            "What is the total sales amount generated by each employee?",
            "Which employee generated the highest sales in the last year?",
            "How many orders has each employee processed?",
            "Which city has the highest number of orders?",
            "What is the average time taken to ship an order?",
            "Identify the top three employees by sales for each month.",
            "What is the distribution of employees across different regions?",
            "How many orders were shipped late?",
            "What is the total freight cost incurred for orders processed by each employee?",
            "Calculate the sales contribution percentage of each employee to the total sales.",
            "What is the average discount applied to the orders processed by each employee?",
            "List the employees who have generated sales above $100,000.",
            "What is the sales trend over the last six months for each employee?",
            "How many employees report directly to each manager?",
            "Which employee has processed the largest order by value?",
            "What are the top five products sold by each employee?",
            "How many employees are assigned to each sales territory?",
            "Identify the employees with no sales recorded in the last month.",
            "Which employee has achieved the highest sales in the last month?",
            "How many orders have been handled by each employee this year?",
            "What is the average discount given by each employee on their sales?",
            "Identify the city with the highest sales under each employee.",
            "What are the total freight costs incurred by each employee's orders?",
            "Which employees have achieved sales above a specific threshold?",
            "What is the total sales for each employee grouped by country?",
            "Calculate the revenue generated from orders that were shipped within 5 days of the order date.",
            "Find the correlation between employee tenure and sales amount.",
            "List all employees who have not placed any orders in the last quarter.",
            "What is the average sales per order for each employee?",
            "Find the top 5 employees with the highest number of orders.",
            "Which orders were placed by employees from a specific region?",
            "Find the difference in sales generated by each employee compared to their direct manager.",
            "How many employees have a title of 'Sales Representative'?",
            "Determine the total number of products sold by each employee.",
            "List the sales details for employees who have generated sales above a specified threshold.",
            "Calculate the average order value for each employee."
        ],
        "sql_queries": [
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2023 GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2022 AND MONTH(o.OrderDate) = 12 GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1",
            "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY e.EmployeeID",
            "SELECT EmployeeID, DATEDIFF(CURDATE(), HireDate) AS Tenure FROM employees ORDER BY Tenure DESC LIMIT 1;",
            "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE YEAR(o.ShippedDate) = 2022 GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AvgDiscount DESC LIMIT 1",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC",
            "SELECT e.EmployeeID, od.ProductID, TotalQuantity FROM (SELECT e.EmployeeID, od.ProductID, SUM(od.Quantity) AS TotalQuantity, ROW_NUMBER() OVER (PARTITION BY e.EmployeeID ORDER BY SUM(od.Quantity) DESC) as rn FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, od.ProductID) subquery WHERE rn <= 3 ORDER BY e.EmployeeID, TotalQuantity DESC;",
            "SELECT e.EmployeeID, COUNT(DISTINCT o.CustomerID) AS DistinctCustomers FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID",
            "SELECT e.Region, SUM(e.Salary) AS TotalSalaryExpenditure FROM employees e GROUP BY e.Region",
            "SELECT DISTINCT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.Freight > 100;",
            "SELECT e.EmployeeID, MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2022 GROUP BY e.EmployeeID, MONTH(o.OrderDate)",
            "SELECT e.EmployeeID, (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) * 100.0 / (SELECT SUM(od2.UnitPrice * od2.Quantity * (1 - od2.Discount)) FROM [Order Details] od2)) AS SalesPercentage FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
            "SELECT DISTINCT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.RequiredDate < o.ShippedDate",
            "SELECT e.EmployeeID FROM employees e WHERE ReportsTo = (SELECT TOP 1 e2.EmployeeID FROM employees e2 JOIN orders o ON e2.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e2.EmployeeID ORDER BY SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) DESC)",
            "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE YEAR(o.OrderDate) = 2023 GROUP BY e.EmployeeID HAVING COUNT(DISTINCT MONTH(o.OrderDate)) = 12",
            "SELECT e.EmployeeID FROM employees e JOIN (SELECT o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, QUARTER(o.OrderDate) AS Quarter FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2022 GROUP BY o.EmployeeID, QUARTER(o.OrderDate)) AS sales_trend ON e.EmployeeID = sales_trend.EmployeeID GROUP BY e.EmployeeID HAVING SUM(CASE WHEN Quarter = 1 THEN TotalSales ELSE 0 END) < SUM(CASE WHEN Quarter = 2 THEN TotalSales ELSE 0 END) AND SUM(CASE WHEN Quarter = 2 THEN TotalSales ELSE 0 END) < SUM(CASE WHEN Quarter = 3 THEN TotalSales ELSE 0 END) AND SUM(CASE WHEN Quarter = 3 THEN TotalSales ELSE 0 END) < SUM(CASE WHEN Quarter = 4 THEN TotalSales ELSE 0 END)",
            "SELECT ABS(MAX(TotalSales) - MIN(TotalSales)) AS SalesDifference FROM (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE QUARTER(o.OrderDate) = 4 AND YEAR(o.OrderDate) = 2022 GROUP BY e.EmployeeID) AS sales_rank",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS DelayedShipments FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate > o.RequiredDate GROUP BY e.EmployeeID ORDER BY DelayedShipments DESC",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AvgOrderValue DESC",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING TotalSales > (SELECT AVG(TotalSales) FROM (SELECT EmployeeID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY EmployeeID) AS subquery)",
            "SELECT e.EmployeeID, DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, DATE_FORMAT(o.OrderDate, '%Y-%m')",
            "SELECT e.Region, e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Region, e.EmployeeID ORDER BY TotalSales DESC",
            "SELECT e.EmployeeID, (DATEDIFF(CURDATE(), e.HireDate)/365) AS TenureYears, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID, COUNT(DISTINCT od.ProductID) AS ProductCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY ProductCount DESC LIMIT 1",
            "SELECT e.City, COUNT(DISTINCT e.EmployeeID) AS EmployeeCount, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.City ORDER BY TotalSales DESC",
            "SELECT e.EmployeeID, DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, DATE_FORMAT(o.OrderDate, '%Y-%m') ORDER BY OrderCount DESC LIMIT 1",
            "SELECT e.EmployeeID, DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_ADD(CURDATE(), INTERVAL -6 MONTH) GROUP BY e.EmployeeID, DATE_FORMAT(o.OrderDate, '%Y-%m') ORDER BY Month ASC;",
            "SELECT e.EmployeeID, DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, DATE_FORMAT(o.OrderDate, '%Y-%m') HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)), 1) OVER (PARTITION BY e.EmployeeID ORDER BY DATE_FORMAT(o.OrderDate, '%Y-%m'))",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN e.HireDate AND DATEADD(MONTH, 6, e.HireDate) GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AvgDiscount DESC",
            "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreightCost FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID, (YEAR(CURDATE()) - YEAR(e.BirthDate)) AS Age, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY Age DESC",
            "SELECT e.EmployeeID, COUNT(DISTINCT o.ShipCountry) AS CountryCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY CountryCount DESC",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgSalesPerOrder FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS TotalOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, COUNT(DISTINCT o.OrderID) AS OrdersAbove200 FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 200 ORDER BY OrdersAbove200 DESC LIMIT 1;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 3;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE QUARTER(o.OrderDate) = QUARTER(CURRENT_DATE) - 1 AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) WHERE o.OrderID IS NULL;",
            "SELECT e.EmployeeID, COUNT(DISTINCT e1.EmployeeID) AS NumberOfReportees FROM employees e JOIN employees e1 ON e.EmployeeID = e1.ReportsTo GROUP BY e.EmployeeID HAVING NumberOfReportees > 1;",
            "SELECT e.EmployeeID, e.HireDate, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.HireDate ORDER BY ((CURRENT_DATE - e.HireDate) / INTERVAL '1 day') * SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) DESC LIMIT 5;",
            "SELECT e.EmployeeID, DATEDIFF(o.RequiredDate, o.ShippedDate) AS Gap FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NOT NULL AND o.RequiredDate IS NOT NULL ORDER BY Gap DESC LIMIT 1;",
            "SELECT COUNT(e.EmployeeID) AS EmployeeCount FROM employees e WHERE e.Salary > (SELECT AVG(Salary) FROM employees);",
            "SELECT e.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Region;",
            "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgDays FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NOT NULL GROUP BY e.EmployeeID;",
            "SELECT e.Country, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Country;",
            "SELECT e.EmployeeID, MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID, MONTH(o.OrderDate);",
            "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY TotalFreight DESC LIMIT 1;",
            "SELECT o.EmployeeID, MAX(od.Quantity) AS MaxQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID;",
            "SELECT COUNT(e.EmployeeID) FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.OrderID IS NULL AND MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE);",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT e.City, AVG(DATEDIFF(CURRENT_DATE, e.BirthDate) / 365.25) AS AvgAge FROM employees e GROUP BY e.City;",
            "SELECT e.EmployeeID, e.HireDate FROM employees e ORDER BY e.HireDate ASC LIMIT 1;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS TotalOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
            "SELECT e.ReportsTo, COUNT(e.EmployeeID) AS NumberOfReports FROM employees e GROUP BY e.ReportsTo;",
            "SELECT e.Region, 100 * (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / (\nSELECT SUM(od2.UnitPrice * od2.Quantity * (1 - od2.Discount)) FROM [Order Details] od2 JOIN orders o2 ON od2.OrderID = o2.OrderID)) AS RegionSalesPercentage FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Region;",
            "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, MAX(od.Discount) AS MaxDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY MaxDiscount DESC;",
            "SELECT e.EmployeeID, EXTRACT(YEAR FROM o.OrderDate) AS Year, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY e.EmployeeID, Year ORDER BY Year DESC;",
            "SELECT e.Region, e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = YEAR(CURRENT_DATE) AND EXTRACT(MONTH FROM o.OrderDate) = MONTH(CURRENT_DATE) GROUP BY e.Region, e.EmployeeID;",
            "SELECT COUNT(o.OrderID) FROM orders o WHERE o.RequiredDate IS NULL;",
            "SELECT e.Title, AVG(e.Salary) AS AvgSalary FROM employees e GROUP BY e.Title;",
            "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, (YEAR(CURRENT_DATE) - YEAR(e.BirthDate)) AS Age, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT od.ProductID, e.EmployeeID, COUNT(od.ProductID) AS ProductOrderCount FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID JOIN employees e ON o.EmployeeID = e.EmployeeID GROUP BY od.ProductID, e.EmployeeID ORDER BY e.EmployeeID, ProductOrderCount DESC;",
            "SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.EmployeeID IS NULL;",
            "SELECT e.Country, e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Country, e.EmployeeID;",
            "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE DATEDIFF(o.ShippedDate, o.OrderDate) < (SELECT AVG(DATEDIFF(o2.ShippedDate, o2.OrderDate)) FROM orders o2);",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATEADD(MONTH, -1, CURDATE()) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS ShippedOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NOT NULL GROUP BY e.EmployeeID ORDER BY ShippedOrders DESC LIMIT 1;",
            "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) WHERE o.OrderID IS NULL;",
            "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, e.HireDate FROM employees e WHERE e.HireDate = (SELECT MIN(HireDate) FROM employees);",
            "SELECT e.ReportsTo, COUNT(e.EmployeeID) AS NumberOfReportees FROM employees e GROUP BY e.ReportsTo;",
            "SELECT o.ShipCity, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipCity ORDER BY OrderCount DESC LIMIT 3;",
            "SELECT e.EmployeeID, DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY e.EmployeeID, DATE_FORMAT(o.OrderDate, '%Y-%m');",
            "SELECT e.EmployeeID, COUNT(DISTINCT od.ProductID) AS UniqueProductsSold FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, AVG(od.Quantity) AS AvgQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(CASE WHEN od.Discount > 0 THEN 1 ELSE 0 END) = 0;",
            "SELECT e.EmployeeID, YEAR(o.OrderDate) AS Year, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS YearlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, YEAR(o.OrderDate);",
            "SELECT e.EmployeeID, COUNT(*) AS HighValueOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, o.OrderID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 1000 ORDER BY HighValueOrders DESC LIMIT 1;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS OnTimeOrders, COUNT(*) AS TotalOrders, COUNT(o.OrderID) * 1.0 / COUNT(*) AS ProportionOnTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS DelayedOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate > o.RequiredDate GROUP BY e.EmployeeID ORDER BY DelayedOrders DESC LIMIT 1;",
            "SELECT AVG(e.Salary) AS AvgSalary FROM employees e JOIN (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE + INTERVAL '1 month') GROUP BY e.EmployeeID) s ON e.EmployeeID = s.EmployeeID WHERE s.MonthlySales > 5000;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND orders.OrderDate < DATE_TRUNC('month', CURRENT_DATE) GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, AVG(orders.Freight) AS AverageFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
            "SELECT employees.FirstName, employees.LastName FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) WHERE orders.OrderID IS NULL;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE employees.City = 'Specific City' GROUP BY employees.EmployeeID;",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY e.HireDate ASC LIMIT 1;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderDate BETWEEN DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' AND DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 day' GROUP BY employees.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT employees.EmployeeID, COUNT(DISTINCT orders.CustomerID) AS UniqueCustomerCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, [Order Details].ProductID;",
            "SELECT employees.EmployeeID, ((SUM(CASE WHEN YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END) / COALESCE(SUM(CASE WHEN YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END), 1)) - 1) * 100 AS SalesGrowth FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID HAVING SalesGrowth > 10;",
            "SELECT employees.EmployeeID, (SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / employees.Salary) AS SalesToSalaryRatio FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY SalesToSalaryRatio DESC LIMIT 3;",
            "SELECT employees.EmployeeID, AVG([Order Details].Discount) AS AverageDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID HAVING AVG([Order Details].Discount) > (SELECT AVG([Order Details].Discount) FROM [Order Details]);",
            "SELECT employees.EmployeeID, SUM([Order Details].Quantity) AS TotalProductsSold FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
            "SELECT employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Region;",
            "SELECT employees.EmployeeID, AVG(CAST(orders.RequiredDate AS DATE) - CAST(orders.ShippedDate AS DATE)) AS AverageDelay FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate IS NOT NULL GROUP BY employees.EmployeeID HAVING AVG(CAST(orders.RequiredDate AS DATE) - CAST(orders.ShippedDate AS DATE)) > (SELECT AVG(CAST(orders.RequiredDate AS DATE) - CAST(orders.ShippedDate AS DATE)) FROM orders WHERE orders.ShippedDate IS NOT NULL);",
            "SELECT employees.EmployeeID, EXTRACT(MONTH FROM orders.OrderDate) AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE EXTRACT(YEAR FROM orders.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY employees.EmployeeID, OrderMonth;",
            "SELECT employees.EmployeeID, COALESCE(1.0 * SUM(CASE WHEN orders.ShippedDate IS NULL THEN 1 ELSE 0 END) / COUNT(orders.OrderID), 0) AS CancellationRate FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY CancellationRate ASC LIMIT 5;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID",
            "SELECT o.ShipCity, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipCity ORDER BY OrderCount DESC LIMIT 1",
            "SELECT AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageShippingTime FROM orders o WHERE o.ShippedDate IS NOT NULL",
            "SELECT e.EmployeeID, MONTH(o.OrderDate) AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, OrderMonth, YEAR(o.OrderDate) ORDER BY OrderMonth, MonthlySales DESC;",
            "SELECT e.Region, COUNT(e.EmployeeID) AS EmployeeCount FROM employees e GROUP BY e.Region",
            "SELECT COUNT(o.OrderID) AS LateOrders FROM orders o WHERE o.ShippedDate > o.RequiredDate;",
            "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / (SELECT SUM(od2.UnitPrice * od2.Quantity * (1 - od2.Discount)) FROM [Order Details] od2) * 100 AS SalesContribution FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID, AVG(od.Discount) AS AverageDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 100000;",
            "SELECT e.EmployeeID, MONTH(o.OrderDate) AS OrderMonth, YEAR(o.OrderDate) AS OrderYear, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS SalesAmount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -6, CURRENT_DATE) GROUP BY e.EmployeeID, OrderYear, OrderMonth",
            "SELECT e.ReportsTo, COUNT(e.EmployeeID) AS Reportees FROM employees e GROUP BY e.ReportsTo",
            "SELECT o.EmployeeID, o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID, o.OrderID ORDER BY OrderValue DESC LIMIT 1",
            "SELECT e.EmployeeID, od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, od.ProductID HAVING ROW_NUMBER() OVER (PARTITION BY e.EmployeeID ORDER BY SUM(od.Quantity) DESC) <= 5;",
            "SELECT e.Region, COUNT(DISTINCT e.EmployeeID) AS EmployeeCount FROM employees e GROUP BY e.Region",
            "SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND o.OrderDate < CURDATE() WHERE o.OrderID IS NULL",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) AND MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS TotalOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, AVG([Order Details].Discount) AS AverageDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
            "SELECT EmployeeID, ShipCity, CitySales FROM (SELECT employees.EmployeeID, orders.ShipCity, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CitySales, ROW_NUMBER() OVER (PARTITION BY employees.EmployeeID ORDER BY SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) DESC) AS rn FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, orders.ShipCity) AS ranked_sales WHERE rn = 1;",
            "SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID HAVING TotalSales > 10000;",
            "SELECT employees.EmployeeID, orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, orders.ShipCountry;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Revenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE DATEDIFF(orders.ShippedDate, orders.OrderDate) <= 5;",
            "SELECT employees.EmployeeID, DATEDIFF(CURRENT_DATE, employees.HireDate) AS Tenure, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.EmployeeID IS NULL OR (orders.OrderDate < DATEADD(QUARTER, -1, CURRENT_DATE) OR orders.OrderDate >= CURRENT_DATE);",
            "SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY OrderCount DESC LIMIT 5;",
            "SELECT orders.OrderID FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE employees.Region = 'RegionName';",
            "SELECT e1.EmployeeID, \n       (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) - IFNULL(e2.TotalSales, 0)) AS SalesDifference \nFROM employees e1 \nLEFT JOIN (\n    SELECT e2.EmployeeID AS ManagerID, \n           SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales \n    FROM employees e2 \n    JOIN orders o ON e2.EmployeeID = o.EmployeeID \n    JOIN [Order Details] od ON o.OrderID = od.OrderID \n    GROUP BY e2.EmployeeID\n) e2 ON e1.ReportsTo = e2.ManagerID \nJOIN orders o ON e1.EmployeeID = o.EmployeeID \nJOIN [Order Details] od ON o.OrderID = od.OrderID \nGROUP BY e1.EmployeeID;",
            "SELECT COUNT(*) FROM employees WHERE Title = 'Sales Representative';",
            "SELECT employees.EmployeeID, SUM([Order Details].Quantity) AS TotalProducts FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 10000;",
            "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;"
        ],
        "reviews": [
            "The query is correct. It calculates total sales for each employee by joining the employees, orders, and [Order Details] tables and filtering the orders to only those in the year 2023. It also groups the results by employee ID, which aligns with the business question and provided metric definition.",
            "The SQL query is correct. It correctly joins the employees, orders, and [Order Details] tables, calculates the total sales for each employee for December 2022, groups by EmployeeID, orders by TotalSales in descending order, and limits the result to the top record.",
            "The SQL query correctly calculates the average order value processed by each employee. It properly joins the 'employees', 'orders', and '[Order Details]' tables and aggregates the order value using AVG, grouping by EmployeeID.",
            "The query is correct. It accurately retrieves the number of orders processed by each employee in Q1 2023 by joining the employees table with the orders table and filtering the orders by the specified date range.",
            "The SQL query is correct. It calculates the tenure by finding the difference in days between the current date and the hire date, orders the employees by tenure in descending order, and limits the result to the employee with the longest tenure.",
            "The SQL query correctly calculates the total freight cost per employee for shipped orders in 2022. It joins the 'employees' and 'orders' tables on 'EmployeeID' and filters for orders shipped in 2022. The grouping by 'EmployeeID' ensures the aggregation is per employee.",
            "The SQL query is correct for the given question. It accurately calculates the average discount per employee and orders the results to find the employee with the highest average discount.",
            "The SQL query correctly selects the EmployeeID and calculates the total sales using the specified formula. It joins the necessary tables, groups by EmployeeID, and orders by total sales in descending order. The query is correct.",
            "The original query does not limit the result to the top 3 products per employee. Added a subquery with ROW_NUMBER to partition by EmployeeID and order quantities descending, filtering to the top 3.",
            "The SQL query correctly computes the total number of distinct customers handled by each employee. It joins the 'employees' table with the 'orders' table on 'EmployeeID' and counts the distinct 'CustomerID' for each employee. The usage of COUNT(DISTINCT o.CustomerID) and GROUP BY e.EmployeeID is appropriate for the business question.",
            "The SQL query is correct. It selects the region and sums the salaries, grouping by region to calculate the total salary expenditure for each region.",
            "The SQL query is correct. It correctly joins the employees and orders tables on EmployeeID, using a WHERE clause to filter orders with Freight greater than 100, and uses DISTINCT to ensure unique EmployeeID results.",
            "The query is correct. It calculates the total sales for each employee by month for the year 2022. The JOINs are correctly set up between the employees, orders, and [Order Details] tables, and the GROUP BY clause aggregates by employee ID and month, as required. The WHERE clause correctly filters the records for the year 2022.",
            "The original query is mostly correct. However, to ensure the division results in a decimal, using 100.0 instead of 100 is recommended.",
            "The SQL query is correct. It joins the employees table with the orders table and correctly filters for orders where the required date is earlier than the shipped date using 'WHERE o.RequiredDate < o.ShippedDate'. It uses DISTINCT to ensure each employee is listed only once.",
            "The original SQL query is almost correct but lacks the proper use of TOP 1 with ORDER BY to find the employee with the highest sales, and it had unnecessary aliasing. The corrected query uses 'TOP 1' instead of 'LIMIT 1' which aligns with ANSI SQL.",
            "The SQL query correctly calculates the average time from order placement to shipment by employee. The use of DATEDIFF to calculate the difference between ShippedDate and OrderDate and averaging it per EmployeeID with GROUP BY is appropriate. No corrections are needed.",
            "The SQL query is correct. It joins the 'employees' and 'orders' tables on EmployeeID, filters orders from the year 2023, groups by EmployeeID, and checks if each employee handled orders in all 12 months by counting distinct months.",
            "The original query is missing a condition to filter orders for the year 2022. Added 'WHERE YEAR(o.OrderDate) = 2022' to ensure only 2022 data is considered. No other structural changes were necessary.",
            "The query is correct. It calculates the total sales for each employee in Q4 2022, then finds the difference between the highest and lowest sales.",
            "The query is correct. It joins the 'employees', 'orders', and '[Order Details]' tables on the appropriate keys and calculates total sales by summing the product of UnitPrice, Quantity, and Discount for each employee, grouped by EmployeeID.",
            "The original query is mostly correct, but it may not work in some SQL databases due to 'CURDATE()'. It's safer to use 'CURRENT_DATE', which is more widely supported in ANSI SQL. No other errors detected.",
            "The SQL query correctly identifies employees with delayed shipments by comparing ShippedDate to RequiredDate. The query properly joins the employees and orders tables, counts delayed orders per employee, and orders results by the number of delayed shipments. The SQL query is correct.",
            "The SQL query is correct. It accurately counts the number of orders handled by each employee by joining the 'employees' and 'orders' tables on EmployeeID and grouping the results by EmployeeID.",
            "The SQL query correctly calculates the average order value per employee by joining the employees, orders, and order details tables. The AVG function is used appropriately, and grouping is done by EmployeeID to get the average per employee. The query is valid and correctly answers the business question by ordering the results in descending order to find the employee with the highest average order value.",
            "The SQL query is correct. It calculates the total discount given by each employee by summing the discounts applied to each order detail, grouped by EmployeeID.",
            "The original query is mostly correct, but I added the EmployeeID to the subquery's SELECT statement to ensure clarity and alignment with the outer query. This change does not impact functionality as the subquery calculates the average of TotalSales properly.",
            "The SQL query is mostly correct for calculating the average sales per employee per month. However, DATE_FORMAT should be replaced with a standard ANSI SQL compatible expression like TRIM(TO_CHAR(o.OrderDate, 'YYYY-MM')) if the server supports it. Ensure the database engine supports either standard ANSI SQL functions or adapt the date formatting accordingly.",
            "The provided SQL query is correct. It calculates the total sales for each employee by region, grouping by both region and employee ID, and orders the results by total sales in descending order.",
            "The query correctly calculates the tenure in years and the total sales for each employee. It performs the correct joins between employees, orders, and order details tables and groups by EmployeeID, which matches the business metric definition. No changes are necessary.",
            "The original query correctly counts the distinct products per employee. However, it lacks the LIMIT 1 clause to return only the employee with the highest number of different products. Added LIMIT 1.",
            "The original query needs a COUNT(DISTINCT e.EmployeeID) to accurately count unique employees per city. Additionally, using LEFT JOIN ensures that cities with employees but no orders are still included in the results.",
            "The SQL query correctly identifies the employee who processed the most orders in a given month. It groups by employee and month, counts the orders, and orders the results to find the top one.",
            "The SQL query is mostly correct. However, the use of the INTERVAL in WHERE clause is slightly adjusted for standard. The DATE_ADD function with negative value ensures compatibility in some SQL implementations.",
            "The query has a mistake in the HAVING clause. The use of 'LAG' function is fine, but it should be applied to the SUM aggregation itself within the OVER() clause, as the LAG function cannot directly reference an alias. Additionally, the condition should compare the SUM calculated in the current month to that in the previous month for each employee. The corrected query is provided in the sql_query field.",
            "The original query incorrectly calculates the 6-month range. It should use the employee's HireDate to determine the 6-month period for calculating sales. The query has been adjusted to filter orders within the first 6 months after the HireDate.",
            "The original SQL query is correct. It joins the employees, orders, and [Order Details] tables, calculates the average discount given by each employee, and orders the results by the average discount in descending order.",
            "The SQL query correctly calculates the total freight cost for each employee by summing the Freight column from the orders table, grouped by EmployeeID. The JOIN condition between employees and orders is accurately specified. Therefore, the query is correct.",
            "The query is mostly correct, but there's a potential issue with calculating age simply using year subtraction. It doesn't account for whether the birthday has already occurred in the current year. A more precise calculation can use something like TIMESTAMPDIFF(YEAR, e.BirthDate, CURDATE()). Additionally, ensure the database you are using supports the function CURDATE().",
            "The query is correct. It joins the employees with orders to count the distinct shipping countries for each employee, orders the results by the count in descending order to find the employee with the most diverse customer base.",
            "The SQL query correctly calculates the total sales generated by each employee by properly joining the 'employees', 'orders', and '[Order Details]' tables and aggregating the sales per employee. The use of GROUP BY e.EmployeeID is appropriate to summarize the sales for each employee, meeting the business question requirements. No corrections are necessary.",
            "The SQL query correctly computes the total sales for each employee for the previous year by summing up the product of UnitPrice, Quantity, and the discount factor from the 'Order Details' table. It joins the 'employees', 'orders', and 'Order Details' tables appropriately. The query filters the orders from the previous year and groups by EmployeeID, then orders by TotalSales in descending order and limits the output to one row, indicating the employee with the highest sales. No corrections are necessary.",
            "The SQL query is correct. It calculates the average sales per order for each employee by joining the 'employees', 'orders', and '[Order Details]' tables and using the AVG function on the total sales formula, grouped by EmployeeID.",
            "The SQL query is correct. It joins the employees and orders tables on EmployeeID and counts the number of OrderID for each employee, grouping by EmployeeID, which aligns with the question.",
            "The original query did not ensure distinct orders were counted, and it did not use ORDER BY or LIMIT to find the employee with the most orders above $200. Corrected by counting distinct orders and sorting the result.",
            "The SQL query correctly retrieves the top 3 employees with the highest sales in the current month. It joins the necessary tables and uses the SUM function along with GROUP BY and ORDER BY clauses correctly, and it limits the results to 3 rows as specified.",
            "The query needs to ensure it considers the year when calculating the previous quarter, as the current logic only accounts for the quarter number and not for the transition between years.",
            "The query needed adjustment in the JOIN condition. The condition YEAR(o.OrderDate) = YEAR(CURRENT_DATE) should be part of the JOIN clause, not the WHERE clause, to ensure the left join correctly identifies employees with no orders this year.",
            "The query is correct. It joins the employees table on itself to find reportees, groups by the manager's EmployeeID, counts distinct reportee EmployeeIDs, and filters for more than one reportee.",
            "The original query is attempting to determine some sort of correlation by using an ORDER BY clause that multiplies tenure by sales, which does not directly answer the question about correlation. Additionally, the original query does not use SQL functions to calculate tenure accurately. The GROUP BY clause is missing e.HireDate, which is included in the SELECT statement. The corrected query includes the e.HireDate in the GROUP BY clause and modifies the ORDER BY calculation to handle date subtraction properly.",
            "The SQL query correctly finds the employee with the longest gap between an order's required date and shipped date. It uses a JOIN between the employees and orders tables with DATEDIFF to calculate the gap, filters out null dates, and orders the results in descending order, limiting the output to one result.",
            "The original query correctly identifies employees with a salary above average but does not count them. The corrected query uses COUNT() to return the number of such employees.",
            "The query correctly calculates the total sales by employees in each region using the provided formula. It joins the employees, orders, and Order Details tables correctly and groups the results by region to get the total sales per region. The query is correct and does not need any changes.",
            "The SQL query is correct and accurately computes the average number of days between order date and shipped date for each employee by joining the 'employees' and 'orders' tables and filtering out records where 'ShippedDate' is null.",
            "The SQL query correctly calculates total sales performance for employees across different countries by joining the employees, orders, and [Order Details] tables and grouping the result by country. The formula used aligns with the defined business metric for Employee Sales.",
            "The query is mostly correct. The only issue is with the GROUP BY clause. The alias 'Month' should directly use the MONTH() function. Correcting that gives GROUP BY e.EmployeeID, MONTH(o.OrderDate);",
            "The SQL query correctly joins the orders with employees using EmployeeID and calculates the total freight charges for each employee. It then orders the results in descending order to identify the employee with the highest total freight and limits the result to one employee. The query is correct.",
            "The original query incorrectly included the employees table which is unnecessary. The maximum quantity for each order made by an employee is determined directly from the orders and [Order Details] tables.",
            "The original query attempts to find employees with zero sales by checking for NULL OrderIDs. However, it does not restrict the results to the current month and year, so I've added a condition to include the current year as well. Additionally, I've used COUNT to get the number of employees who generated zero sales.",
            "The query is correct for calculating the total sales generated by each employee for the current month using the provided schema and formula.",
            "The SQL query is correct and answers the business question by selecting the employee with the highest total sales. It correctly joins the necessary tables, calculates the total sales, and orders the results to find the top employee.",
            "The SQL query is correct. It joins the employees, orders, and order details tables, calculates the total sales per employee, groups the results by employee ID, orders by total sales in descending order, and limits the results to the top 5 employees.",
            "The original query used YEAR subtraction which can be inaccurate for age calculation. The revised query calculates age using DATEDIFF to provide a more accurate average age.",
            "The query is correct. It selects the employee who was hired first, indicating the longest tenure, by ordering the hire dates in ascending order and limiting the result to the earliest entry.",
            "The query is correct. It selects the EmployeeID and counts the number of orders processed by each employee, grouping the results by EmployeeID.",
            "The SQL query correctly counts the number of employees who report to each manager and groups the result by the ReportsTo column. The query is correct.",
            "The original query correctly calculates the percentage of total sales for each region. However, the result should be multiplied by 100 to express it as a percentage, and the subquery should join [Order Details] with orders to ensure it considers only orders with an EmployeeID.",
            "The SQL query is correct. It calculates the average number of days between the order date and shipped date for each employee by joining the employees and orders tables on EmployeeID and then grouping the results by EmployeeID.",
            "The query correctly identifies employees who have applied the highest discounts. It joins the 'employees', 'orders', and '[Order Details]' tables and uses MAX to find the highest discount per employee. The GROUP BY clause is used appropriately, along with ordering the results in descending order of the maximum discount. The query is correct.",
            "The original query does not filter to only include orders from the last year. Added a WHERE clause to filter OrderDate for the last year.",
            "The original query did not consider the year when extracting the month from order dates. This could lead to incorrect results if the data spans multiple years. The corrected query adds a check for the year as well.",
            "The original query correctly identifies orders with missing required ship dates, but it retrieves the OrderID instead of counting the occurrences. The corrected query counts the number of orders with NULL in the RequiredDate field.",
            "The query is correct. It calculates the average salary grouped by the employee title.",
            "The SQL query is correct. It joins the employees and orders tables on EmployeeID and calculates the total freight cost for each employee by grouping the results by EmployeeID.",
            "The SQL query correctly calculates each employee's age and total sales. However, it does not calculate the correlation between age and sales performance. You might need a statistical tool or additional SQL functions to compute the correlation.",
            "The original query correctly retrieves the count of each product ordered by each employee and orders the result by total count. However, to ensure the 'most ordered products' are clearly shown for each employee, the results are ordered by EmployeeID first, then ProductOrderCount in descending order.",
            "The original query correctly identifies employees with no orders using a subquery. However, using a LEFT JOIN with a condition on NULL orders provides better performance in some SQL engines and is easier to understand. The corrected query uses this approach.",
            "The query is correctly written to answer how employee performance varies across different countries. It calculates the total sales by each employee in different countries and groups the results by employee and country. The use of joins and grouping is applied correctly according to the provided schema and metrics definitions.",
            "The SQL query is correct. It calculates the difference between the shipped date and order date for each order and compares it with the average shipping time calculated from all orders. Employees with shipping times less than the average are selected.",
            "The original query uses DATE_SUB, which calculates one month back from the current date. However, to ensure accuracy, it's better to use DATEADD. Moreover, ensuring the date function is adjusted according to specific SQL dialect requirements matters, though ANSI SQL doesn't specifically define DATE_SUB or DATEADD functions. The column orders.OrderDate needs to be referenced explicitly in the WHERE clause.",
            "The original query has a mistake in the YEAR function. It should check the year for the last month, not the current year. Corrected the YEAR function to account for last month.",
            "The SQL query is correct. It properly counts the number of orders processed by each employee for the current year using a JOIN between employees and orders, and filters by the current year using the YEAR function.",
            "The SQL query is correct. It calculates the average discount provided by each employee by joining the employees, orders, and order details tables and grouping by EmployeeID.",
            "The SQL query correctly identifies the employee with the highest number of shipped orders by joining the 'employees' and 'orders' tables and checking for non-null 'ShippedDate'. The COUNT function is used to determine the number of shipped orders grouped by employee and the results are ordered in descending order with a LIMIT of 1 to get the top employee. The query is correct.",
            "The SQL query correctly calculates the average order value for each employee by joining the employees, orders, and order details tables and grouping by employee ID. No corrections are needed.",
            "The original query incorrectly included orders from previous years by using a WHERE clause that checks for NULL or different year values. It should use LEFT JOIN with the condition YEAR(o.OrderDate) = YEAR(CURRENT_DATE) within the JOIN itself, then check for NULL to ensure employees with no current year orders are selected.",
            "The SQL query correctly calculates the total freight cost for each employee by summing the Freight column in the orders table, where the EmployeeID in the orders table matches the EmployeeID in the employees table. The query uses a JOIN between the employees and orders tables and groups the results by EmployeeID, as required. Therefore, the query is correct and satisfies the business question.",
            "The original query incorrectly uses ORDER BY and LIMIT to find the earliest hire date, which does not properly fetch the correct employee. The corrected query uses a subquery to find the minimum hire date and then selects the employee with that hire date.",
            "The SQL query correctly calculates the number of employees reporting to each manager by grouping records based on the ReportsTo column in the employees table and counting EmployeeID entries for each manager. The query is accurate as per the given schema and business question.",
            "The provided SQL query is correct for answering the question. It counts the number of orders per shipping city and orders them in descending order, limiting the results to the top three cities.",
            "The query is correct. It joins the necessary tables, filters orders from the past year, calculates total sales for each employee per month, and groups the results accordingly.",
            "The SQL query is correct and accurately retrieves the total number of unique products sold by each employee using DISTINCT on ProductID and grouping by EmployeeID.",
            "The SQL query correctly calculates the average quantity of products sold per order by each employee. It joins the employees, orders, and [Order Details] tables appropriately and groups the results by EmployeeID.",
            "The original query incorrectly includes employees who have orders with no discounts. It should identify employees who have never offered any discounts. Using LEFT JOIN and GROUP BY, we ensure that only employees with no non-zero discounts are selected.",
            "The SQL query correctly calculates the total sales per year for each employee. The JOIN operations and GROUP BY clause are appropriately used to get the desired result. No corrections are needed.",
            "The original query was missing an ORDER BY and LIMIT clause to find the employee with the most qualifying orders. Also, the GROUP BY clause needed to include o.OrderID to evaluate each order separately. Finally, the COUNT should count orders, hence COUNT(*) after grouping by order.",
            "The original query calculates the number of orders shipped on time but not the proportion. The revised query computes both the total number of orders and the number that were shipped on time for each employee, then calculates the proportion.",
            "The SQL query is correct. It joins the employees and orders tables, counts the orders that were shipped later than required, groups by employee, and limits the result to the employee with the most delayed orders.",
            "The original query incorrectly calculates sales for just the last 30 days instead of the current calendar month. Adjusted the WHERE clause to filter orders for the current month using 'DATE_TRUNC'.",
            "The original query incorrectly used BETWEEN for date range calculation, which includes both start and end dates. Changed the condition to '>=' and '<' to correctly capture the entire last month without overlapping into the current month.",
            "The provided SQL query correctly calculates the total sales for each employee for the current year and returns the employee with the highest sales. The use of JOINs between 'employees', 'orders', and '[Order Details]' tables is correctly applied, and the calculations in the SELECT statement match the business metrics definition for 'Employee Sales'. The ORDER BY clause with DESC and LIMIT 1 successfully identifies the top employee.",
            "The SQL query correctly answers the question. It joins the employees and orders tables on EmployeeID, counts the orders handled by each employee, and groups by EmployeeID. It uses a LEFT JOIN to include employees with zero orders, which aligns with the question intent.",
            "The SQL query is correct. It joins the employees and orders tables on the EmployeeID and calculates the average freight cost per order for each employee, grouping by EmployeeID.",
            "The original query incorrectly filters rows in the WHERE clause, which leads to filtering the LEFT JOIN results before checking for NULL. By moving the year condition to the ON clause, the correct employees are identified.",
            "The query correctly calculates the total sales per employee for those from a specific city. It joins the relevant tables and uses the formula for employee sales. The GROUP BY clause is appropriate to aggregate results by EmployeeID. The query is correct.",
            "The original query is mostly correct but missing the GROUP BY clause. This clause is needed to aggregate sales per employee correctly.",
            "The query is correct. It accurately calculates the total discounts offered by each employee for the current year, using the proper JOIN conditions and filter for the year in the WHERE clause.",
            "The SQL query needed correction. The date range for the last quarter was incorrectly defined. The query now correctly calculates it by subtracting 3 months from the start of the current quarter and adjusting the end date to the end of the quarter by subtracting one day.",
            "The SQL query correctly retrieves the total number of unique customers handled by each employee. It joins the employees and orders tables using EmployeeID and counts distinct CustomerID values for each EmployeeID. No corrections needed.",
            "The query correctly calculates the total sales for each employee by product. However, it does not account for product categories as required by the question. Assuming there is a 'Products' table with a 'CategoryID', you would need to join this table to include categories in the output. Without the 'Products' table given in the schema, it's not possible to correct it completely. The query syntax is otherwise correct for the given tables.",
            "The original query was calculating sales growth incorrectly by using the entire year's sales as the denominator. The corrected query uses conditional aggregation to calculate separate SUMs for the current year and previous year.",
            "The query correctly calculates the sales-to-salary ratio by summing the adjusted unit price and quantity from the [Order Details] table and dividing by the employee's salary. It also properly joins the employees, orders, and [Order Details] tables and groups by EmployeeID. Finally, it orders by the calculated ratio in descending order and limits the result to the top three employees. The query is correct and requires no changes.",
            "The original SQL query is almost correct, but the HAVING clause should directly compare AVG([Order Details].Discount) without aliasing it. I've corrected this to ensure ANSI SQL compliance.",
            "The SQL query is correct. It joins the appropriate tables and calculates the total quantity of products sold by each employee, grouping the results by EmployeeID.",
            "The original query incorrectly grouped by both EmployeeID and Region, leading to a revenue calculation per employee per region, rather than just by region. The corrected query groups the results only by Region to match the business question.",
            "The original query is close, but casting the date difference directly as an INT might not be supported in all databases. It should be done by explicitly casting the dates first and then calculating the difference. This ensures compatibility with ANSI SQL. Corrected by explicitly casting the dates before calculating the difference.",
            "The query correctly calculates the monthly breakdown of sales per employee for the current year. The use of EXTRACT for the year and month is appropriate, and the JOIN operations are properly set up. I replaced 'YEAR(CURRENT_DATE)' with 'EXTRACT(YEAR FROM CURRENT_DATE)' for consistency with the use of EXTRACT elsewhere.",
            "The original query attempts to calculate cancellation rates but uses an incorrect approach by leveraging COUNT with a condition inside. The corrected version uses SUM with a CASE statement to accurately count the unshipped orders and calculates the cancellation rate accordingly.",
            "The SQL query correctly calculates the total sales amount generated by each employee using the specified formula. It joins the employees, orders, and [Order Details] tables correctly and groups the result by EmployeeID. The query is correct.",
            "The query correctly joins the 'employees', 'orders', and 'Order Details' tables based on the provided schema. It calculates total sales for each employee using the specified formula and filters orders from the last year. It then groups by EmployeeID, orders the results by TotalSales in descending order, and limits the output to one row to find the employee with the highest sales. The query appears to be correct.",
            "The SQL query correctly counts the number of orders processed by each employee by joining the employees table with the orders table on EmployeeID and grouping by EmployeeID.",
            "The SQL query is correct. It selects the ShipCity and counts the number of orders for each city, groups by ShipCity, orders the results in descending order of OrderCount, and uses LIMIT 1 to get the city with the highest number of orders.",
            "The query is correct. It calculates the average time between the order date and the shipped date for orders with a non-null shipped date.",
            "The query does not correctly identify the top three employees for each month because it lacks a mechanism to rank employees per month. Additionally, YEAR(o.OrderDate) should be included in the GROUP BY and SELECT clauses to correctly identify sales per month and year. Use a subquery or window function to properly determine the top three employees for each month.",
            "The SQL query correctly answers the business question by grouping employees by region and counting the number of employees in each region.",
            "The SQL query is correct. It accurately counts the number of orders where the shipped date is later than the required date, which aligns with the business question of determining the number of late orders.",
            "The SQL query correctly calculates the total freight cost for orders processed by each employee by joining the 'employees' and 'orders' tables on 'EmployeeID'. The GROUP BY clause appropriately groups the results by each employee's ID, and the SUM function correctly aggregates the 'Freight' values. The query is correct as per the given schema and business question.",
            "The SQL query correctly calculates the sales contribution percentage of each employee to the total sales. The nested subquery accurately computes the total sales, while the main query computes the sales for each employee and divides it by the total sales, multiplied by 100 for the percentage. No corrections needed.",
            "The SQL query correctly joins the employees, orders, and [Order Details] tables to calculate the average discount for each employee. The use of AVG function on the Discount column is appropriate. The query correctly groups the results by EmployeeID to compute the average for each employee.",
            "The SQL query is correct. It correctly joins the three tables and calculates the total sales for each employee, filtering for those with sales above $100,000.",
            "The original query did not filter for the last six months and forgot to include the year in the grouping, which could lead to incorrect trend analysis across multiple years. The corrected query now filters the orders within the last six months using DATEADD and includes the year in the GROUP BY clause for proper aggregation.",
            "The SQL query is correct. It selects the 'ReportsTo' field from the employees table and counts the number of employees reporting to each manager, grouping the results by 'ReportsTo'. This correctly answers the business question.",
            "The original query calculates the maximum value for each order but does not identify which employee processed the largest order by value. I've corrected the query to sum the order values for each employee's orders and order them by OrderValue to find the largest one.",
            "The original query doesn't correctly limit the results to the top five products per employee. The LIMIT clause affects the entire result set, not per employee. The revised query uses ROW_NUMBER() with PARTITION BY to rank products per employee and filter the top five.",
            "The SQL query correctly calculates the number of employees assigned to each sales territory (Region). It groups by the 'Region' field and counts distinct 'EmployeeID' values. The query is accurate and adheres to the business question.",
            "The original query needed an additional condition to specify the exact last month. The condition 'o.OrderDate < CURDATE()' ensures we only consider orders in the last complete month.",
            "The original query is almost correct, but it doesn't consider the year when checking the last month's orders. This can lead to incorrect results around year boundaries. The corrected query adds a check for the year in the WHERE clause to ensure that only orders from the last month of the current year are considered.",
            "The query is correct. It joins the employees and orders tables using the EmployeeID and counts the orders for each employee filtered by the current year, grouping by EmployeeID.",
            "The SQL query correctly calculates the average discount given by each employee on their sales by joining the `employees`, `orders`, and `[Order Details]` tables and grouping by `EmployeeID`.",
            "The original query does not limit the results to the highest sales city for each employee. By using a window function (ROW_NUMBER) with PARTITION BY on EmployeeID and ORDER BY CitySales DESC, we can rank the cities by sales for each employee, selecting only the top-ranked city.",
            "The SQL query correctly calculates the total freight costs for each employee's orders. It joins the employees table with the orders table using the EmployeeID and groups the results by EmployeeID to sum up the freight costs.",
            "The query correctly calculates the total sales for each employee by joining the 'employees', 'orders', and '[Order Details]' tables and filtering using the 'HAVING' clause. It accurately answers the business question by checking which employees have sales above the specific threshold of 10000.",
            "The SQL query correctly calculates the total sales for each employee grouped by country using the JOINs between employees, orders, and Order Details tables. The structure and logic match the business question.",
            "The SQL query is correct. It joins the 'orders' and '[Order Details]' tables on 'OrderID' and calculates the revenue for orders shipped within 5 days of the order date using the DATEDIFF function as intended.",
            "The SQL query correctly calculates the tenure and total sales for each employee. However, finding a correlation statistically between tenure and total sales should typically be done using a separate statistical analysis tool or additional SQL functions not provided by basic SQL. To improve the query's clarity, consider adding ORDER BY or additional metrics for comprehensive analysis.",
            "The original query used a condition on MONTH and interval manipulation. It should instead check for EmployeeID NULL on the LEFT JOIN or ensure orders are not within the last quarter. DATEADD is used for accuracy in calculating the last quarter.",
            "The SQL query correctly calculates the average sales per order for each employee by joining employees, orders, and [Order Details] tables. The calculation for average sales per order is correct by using AVG function on the total sales formula. The GROUP BY clause properly groups the results by EmployeeID. No corrections are needed.",
            "The query is correct. It properly selects the EmployeeID and the count of orders for each employee. It then groups by EmployeeID, orders the result by the OrderCount in descending order, and limits the result to the top 5 employees.",
            "The SQL query correctly joins the 'employees' and 'orders' tables using 'EmployeeID' and filters by the specified region. It accurately retrieves 'OrderID' for those conditions. Ensure 'RegionName' is replaced with the actual region you are querying.",
            "The SQL query has a logical issue in calculating the difference in sales. The subquery calculates the total sales for managers but does not account for each employee pairing properly. Additionally, IFNULL should be handled carefully to ensure proper logic for those with no orders. Here's the corrected query:\n\nSELECT e1.EmployeeID, \n       (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) - COALESCE(e2.TotalSales, 0)) AS SalesDifference \nFROM employees e1 \nLEFT JOIN (\n    SELECT e2.EmployeeID AS ManagerID, \n           SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales \n    FROM employees e2 \n    JOIN orders o ON e2.EmployeeID = o.EmployeeID \n    JOIN [Order Details] od ON o.OrderID = od.OrderID \n    GROUP BY e2.EmployeeID\n) e2 ON e1.ReportsTo = e2.ManagerID \nLEFT JOIN orders o ON e1.EmployeeID = o.EmployeeID \nLEFT JOIN [Order Details] od ON o.OrderID = od.OrderID \nGROUP BY e1.EmployeeID;",
            "The SQL query correctly counts the number of employees with the title 'Sales Representative'. It accurately uses COUNT(*) and the WHERE clause for filtering.",
            "The SQL query is correct for the given question. It appropriately joins the 'employees', 'orders', and '[Order Details]' tables, and correctly sums the 'Quantity' from '[Order Details]' grouped by 'EmployeeID'.",
            "The original query is mostly correct but has a minor issue in the HAVING clause. The alias 'TotalSales' cannot be used directly in the HAVING clause. Replace 'TotalSales' with the actual calculation.",
            "The SQL query is correct. It accurately calculates the average order value for each employee by joining the necessary tables and grouping by EmployeeID."
        ],
        "difficulty": [
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "easy",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium"
        ]
    },
    "Supplier Analysis": {
        "questions": [
            "What is the average supplier lead time for each supplier?",
            "Which product has generated the highest total sales?",
            "List all suppliers in a specific country along with their contact details.",
            "Which suppliers are shipping products with a discount greater than 10%?",
            "What is the total number of units ordered per product?",
            "Identify suppliers with products that have never been discontinued.",
            "Calculate the average unit price of products per supplier.",
            "Which orders have a shipping delay beyond the required date?",
            "What is the total sales amount grouped by supplier?",
            "How many discontinued products does each supplier have?",
            "Find suppliers who have shipped products most quickly on average.",
            "Which city has the highest shipped order volume?",
            "Find the supplier with the most products on order.",
            "List all orders that include products from more than one supplier.",
            "What is the average freight cost per shipment method?",
            "Which customers place the most frequent orders?",
            "Determine the regions with the highest number of suppliers.",
            "How many products are below the reorder level, and what are they?",
            "Compute the total discount given on all orders in the last year.",
            "Identify the top 5 products in terms of unit price.",
            "What is the average lead time for each supplier?",
            "Which supplier provides the most products?",
            "What is the total revenue generated for each month?",
            "Which products have been ordered but are currently out of stock?",
            "What is the average discount rate provided on all products?",
            "Which supplier has the highest total sales?",
            "How many orders have been shipped late?",
            "What is the total quantity of each product ordered?",
            "Which supplier has the fastest average delivery time?",
            "What are the total sales for each product category?",
            "How many products are below their reorder level?",
            "What is the average unit price of products for each supplier?",
            "How many different products does each supplier offer?",
            "What is the total freight cost incurred for orders over the past year?",
            "Which customers have placed the most orders by total revenue?",
            "Which country has the highest number of suppliers?",
            "What is the average order value?",
            "Which products have never been ordered?",
            "How many orders have been shipped to the USA?",
            "What is the total number of discontinued products?",
            "What is the average lead time for each supplier to deliver products?",
            "How many products are discontinued by each supplier?",
            "Which product has the highest number of units on order?",
            "Calculate the total sales for each month.",
            "What is the average discount given on orders?",
            "List all suppliers located in the same country as the company.",
            "Which supplier offers the most products that have been discontinued?",
            "Identify suppliers with products below their reorder level.",
            "Which orders had the highest freight costs?",
            "How many orders had a delivery delay?",
            "List the top 5 suppliers based on the number of different products they offer.",
            "What is the total revenue generated from orders per supplier?",
            "Identify the most frequently ordered product.",
            "What is the percentage of discontinued products per supplier?",
            "Which countries have the most suppliers?",
            "Determine the average quantity ordered per product.",
            "Calculate the lead time variability for each supplier.",
            "Which supplier's products generate the most revenue?",
            "What is the average lead time per supplier for delivery of products?",
            "Which supplier provides the highest number of products?",
            "What is the total sales revenue generated for each month?",
            "Who are the top 5 suppliers by total sales revenue?",
            "What is the average discount applied to products per supplier?",
            "How many products are currently discontinued?",
            "Which city has the most suppliers located?",
            "What is the average unit price of products per supplier?",
            "Which product has the highest amount in sales revenue?",
            "Which orders had shipping delays beyond the required date?",
            "How many units of each product are on order?",
            "Which supplier has the quickest average delivery time?",
            "What is the total freight cost for each supplier?",
            "What percentage of products is currently in stock versus on order?",
            "Which region has the highest average lead time for suppliers?",
            "How many orders have a discount applied?",
            "What is the total number of units sold per month?",
            "Who is the contact person for the supplier with the most orders?",
            "Which supplier has the most products with low stock (below reorder level)?",
            "What is the total number of distinct products provided by each supplier?",
            "Which supplier has the highest average lead time and what is that time?",
            "What is the total sales revenue generated by each supplier?",
            "What is the average lead time for each supplier when delivering products?",
            "Which supplier has the highest total sales value?",
            "How many products are supplied by each supplier?",
            "Which city has the most suppliers?",
            "What is the total revenue generated from orders in the last month?",
            "Which products are currently out of stock?",
            "What is the average discount given per order?",
            "How many orders have been shipped but not yet delivered?",
            "Which supplier has the lowest average delivery lead time?",
            "What is the total value of orders for each country?",
            "Which products have the highest units on order?",
            "How many orders include discontinued products?",
            "What are the top 5 most frequently ordered products?",
            "What is the relationship between freight cost and order value?",
            "How many suppliers have not delivered in the last quarter?",
            "Which supplier has the highest average product price?",
            "What is the average units per order for each product?",
            "What is the total number of units purchased for each category?",
            "Which suppliers provide products to the most regions?",
            "What is the reorder level for each active product?",
            "What is the average lead time for each supplier in delivering products?",
            "Which supplier has the highest number of currently discontinued products?",
            "What is the total sales revenue each month?",
            "List all products below their reorder level and their respective supplier names.",
            "Find the city with the most suppliers.",
            "Calculate the average discount given per supplier.",
            "Which product generated the highest total revenue last year?",
            "Identify suppliers with zero products on order.",
            "What are the total units ordered for each product category?",
            "Which supplier supplies the most diverse range of products?",
            "Determine the average unit price of products by each supplier.",
            "How many orders were shipped late, and who are the suppliers involved?",
            "What is the percentage of orders containing discontinued products?",
            "List the top 5 suppliers based on total sales revenue.",
            "Find the products that have never been ordered.",
            "Calculate monthly freight costs.",
            "Which supplier had the fastest average delivery time this year?",
            "Identify products that have a higher unit price than the average unit price of all products.",
            "What is the average shipping time?",
            "Determine the most common shipping country and its associated suppliers.",
            "Which suppliers have delivered products with an average lead time exceeding 15 days?",
            "Calculate the total sales revenue for each product.",
            "Find the top 5 products with the highest total sales revenue.",
            "Identify the supplier providing the most diverse range of products.",
            "List all products that are low in stock but have outstanding orders.",
            "Which supplier offers the highest average unit price for their products?",
            "Determine the total freight cost for orders shipped in 2022.",
            "Find suppliers who have not shipped any products in the last month.",
            "Calculate the average discount given per order.",
            "Retrieve all orders that were delivered past their required date.",
            "Which supplier has the most orders with discounts over 10%?",
            "Determine the ratio of discontinued to active products supplied by each supplier.",
            "Calculate the revenue generated by each supplier's products.",
            "Find the suppliers who have at least one product exceeding its reorder level.",
            "Identify the top three cities with the highest number of suppliers.",
            "What products have been ordered more than 100 times?",
            "Calculate the average number of units ordered for each product.",
            "Determine the overall lead time for all orders for each supplier.",
            "Find which region has the highest average freight cost.",
            "What is the average lead time for each supplier in the last year?",
            "Which supplier has the highest total sales revenue from their products?",
            "List all suppliers who are located in 'USA' and have at least one discontinued product.",
            "What is the total number of units on order for products supplied by each supplier?",
            "Which products have a reorder level higher than 100?",
            "Calculate the total sales revenue in the past month.",
            "Who are the top 5 suppliers in terms of number of products supplied?",
            "Find the average unit price of products supplied by each supplier.",
            "Which supplier has shipped orders the fastest, on average?",
            "Identify suppliers that have products with no stock and no units on order.",
            "What is the average discount applied to orders of products supplied by each supplier?",
            "List all the orders that have not been shipped yet and are past their required date.",
            "What is the most expensive product supplied by 'Supplier X'?",
            "Find the number of distinct products ordered by each customer.",
            "How many suppliers are there in each country?",
            "List orders with a freight cost higher than the average freight cost.",
            "Which suppliers have not supplied any products in the last six months?",
            "Calculate the total units in stock for each product category.",
            "Identify the supplier that has the most units in stock for their products.",
            "What is the total revenue generated from orders that included a discount?"
        ],
        "sql_queries": [
            "SELECT s.SupplierID, s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID, s.CompanyName;",
            "SELECT p.ProductID, p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT SupplierID, CompanyName, ContactName, ContactTitle, Phone FROM suppliers WHERE Country = 'specified_country';",
            "SELECT DISTINCT s.SupplierID, s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0.10;",
            "SELECT ProductID, SUM(Quantity) AS TotalUnitsOrdered FROM [Order Details] GROUP BY ProductID;",
            "SELECT DISTINCT s.SupplierID, s.CompanyName FROM suppliers s WHERE s.SupplierID NOT IN (SELECT SupplierID FROM products WHERE Discontinued = 1);",
            "SELECT s.SupplierID, s.CompanyName, AVG(p.UnitPrice) AS AvgUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
            "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT s.SupplierID, s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSupplierSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID, s.CompanyName;",
            "SELECT s.SupplierID, s.CompanyName, COUNT(p.ProductID) AS DiscontinuedProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1 GROUP BY s.SupplierID, s.CompanyName;",
            "SELECT s.SupplierID, s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID, s.CompanyName ORDER BY AvgShippingTime ASC LIMIT 1;",
            "SELECT ShipCity, COUNT(OrderID) AS ShippedOrderVolume FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipCity ORDER BY ShippedOrderVolume DESC LIMIT 1;",
            "SELECT s.SupplierID, s.CompanyName, SUM(p.UnitsOnOrder) AS TotalUnitsOnOrder FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID, s.CompanyName ORDER BY TotalUnitsOnOrder DESC LIMIT 1;",
            "SELECT o.OrderID, COUNT(DISTINCT p.SupplierID) AS SupplierCount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY o.OrderID HAVING SupplierCount > 1;",
            "SELECT ShipVia, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipVia;",
            "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT Region, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY Region ORDER BY SupplierCount DESC;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
            "SELECT ProductID, ProductName, UnitPrice FROM products ORDER BY UnitPrice DESC LIMIT 5;",
            "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID;",
            "SELECT suppliers.SupplierID, COUNT(products.ProductID) AS ProductCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID ORDER BY ProductCount DESC;",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY OrderMonth;",
            "SELECT ProductName FROM products WHERE UnitsInStock = 0 AND ProductID IN (SELECT ProductID FROM [Order Details]);",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantityOrdered FROM [Order Details] GROUP BY ProductID;",
            "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageDeliveryTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName ORDER BY AverageDeliveryTime ASC LIMIT 1;",
            "SELECT products.CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.CategoryID;",
            "SELECT COUNT(ProductID) FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT suppliers.SupplierID, AVG(products.UnitPrice) AS AverageUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID;",
            "SELECT suppliers.CompanyName, COUNT(DISTINCT products.ProductID) AS ProductCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
            "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE);",
            "SELECT orders.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSpent FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.CustomerID ORDER BY TotalSpent DESC LIMIT 1;",
            "SELECT Country, COUNT(*) AS SupplierCount FROM suppliers GROUP BY Country ORDER BY SupplierCount DESC LIMIT 1;",
            "SELECT AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID;",
            "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT COUNT(*) FROM orders WHERE ShipCountry = 'USA';",
            "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
            "SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID;",
            "SELECT s.SupplierID, COUNT(*) AS DiscontinuedProducts FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.Discontinued = 1 GROUP BY s.SupplierID;",
            "SELECT ProductName, UnitsOnOrder FROM products ORDER BY UnitsOnOrder DESC LIMIT 1;",
            "SELECT MONTH(o.OrderDate) AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY MONTH(o.OrderDate);",
            "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
            "SELECT * FROM suppliers WHERE Country = 'USA';",
            "SELECT s.SupplierID, COUNT(p.ProductID) AS DiscontinuedCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1 GROUP BY s.SupplierID ORDER BY DiscontinuedCount DESC LIMIT 1;",
            "SELECT s.SupplierID, COUNT(p.ProductID) AS BelowReorder FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.UnitsInStock < p.ReorderLevel GROUP BY s.SupplierID;",
            "SELECT OrderID, Freight FROM orders WHERE Freight = (SELECT MAX(Freight) FROM orders);",
            "SELECT COUNT(OrderID) AS DelayedOrders FROM orders WHERE ShippedDate IS NOT NULL AND DATEDIFF(ShippedDate, RequiredDate) > 0;",
            "SELECT s.SupplierID, COUNT(DISTINCT p.ProductID) AS ProductCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY ProductCount DESC LIMIT 5;",
            "SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;",
            "SELECT ProductID, COUNT(*) AS OrderCount FROM [Order Details] GROUP BY ProductID ORDER BY OrderCount DESC FETCH FIRST 1 ROW ONLY;",
            "SELECT s.SupplierID, (CAST(SUM(CASE WHEN p.Discontinued = 1 THEN 1 ELSE 0 END) AS DECIMAL) / COUNT(p.ProductID)) * 100 AS PercentDiscontinued FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
            "SELECT Country, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY Country ORDER BY SupplierCount DESC;",
            "SELECT ProductID, AVG(Quantity) AS AvgQuantity FROM [Order Details] GROUP BY ProductID;",
            "SELECT s.SupplierID, STDDEV(DATEDIFF(o.ShippedDate, o.OrderDate)) AS LeadTimeVariability FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID;",
            "SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY Revenue DESC LIMIT 1;",
            "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName;",
            "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS ProductCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY ProductCount DESC LIMIT 1;",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY OrderMonth;",
            "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT suppliers.CompanyName, AVG([Order Details].Discount) AS AverageDiscount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName;",
            "SELECT COUNT(ProductID) AS DiscontinuedCount FROM products WHERE Discontinued = 1;",
            "SELECT City, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY City ORDER BY SupplierCount DESC LIMIT 1;",
            "SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AverageUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
            "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT orders.OrderID FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS UnitsOnOrder FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
            "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS QuickestDeliveryTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN orders ON products.ProductID = orders.ProductID GROUP BY suppliers.CompanyName ORDER BY QuickestDeliveryTime ASC LIMIT 1;",
            "SELECT suppliers.CompanyName, SUM(orders.Freight) AS TotalFreight FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName;",
            "SELECT SUM(UnitsInStock) * 100.0 / NULLIF(SUM(UnitsInStock + UnitsOnOrder), 0) AS InStockPercentage FROM products;",
            "SELECT Region, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY Region ORDER BY AverageLeadTime DESC LIMIT 1;",
            "SELECT COUNT(DISTINCT OrderID) FROM [Order Details] WHERE Discount > 0;",
            "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS OrderMonth, SUM([Order Details].Quantity) AS TotalUnits FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY OrderMonth;",
            "SELECT suppliers.CompanyName, suppliers.ContactName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName, suppliers.ContactName ORDER BY COUNT([Order Details].OrderID) DESC LIMIT 1;",
            "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS LowStockProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsInStock < products.ReorderLevel GROUP BY suppliers.CompanyName ORDER BY LowStockProducts DESC LIMIT 1;",
            "SELECT suppliers.CompanyName, COUNT(DISTINCT products.ProductID) AS DistinctProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
            "SELECT s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.CompanyName ORDER BY AvgLeadTime DESC LIMIT 1;",
            "SELECT s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.CompanyName;",
            "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID;",
            "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS ProductCount FROM suppliers LEFT JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
            "SELECT City, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY City ORDER BY SupplierCount DESC LIMIT 1;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
            "SELECT ProductName FROM products WHERE UnitsInStock = 0;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate IS NOT NULL AND ShippedDate < RequiredDate;",
            "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName ORDER BY AverageLeadTime ASC LIMIT 1;",
            "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CountryTotal FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry;",
            "SELECT ProductName, UnitsOnOrder FROM products ORDER BY UnitsOnOrder DESC;",
            "SELECT COUNT(DISTINCT orders.OrderID) FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1;",
            "SELECT ProductName, COUNT([Order Details].OrderID) AS OrderFrequency FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY OrderFrequency DESC LIMIT 5;",
            "SELECT orders.Freight, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS OrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.Freight;",
            "SELECT suppliers.CompanyName FROM suppliers LEFT JOIN products ON suppliers.SupplierID = products.SupplierID LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID LEFT JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderID IS NULL OR orders.ShippedDate IS NULL OR orders.ShippedDate <= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY suppliers.SupplierID, suppliers.CompanyName HAVING COUNT(orders.OrderID) = 0;",
            "SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AveragePrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY AveragePrice DESC LIMIT 1;",
            "SELECT ProductName, AVG(Quantity) AS AverageUnitsPerOrder FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;",
            "SELECT categories.CategoryID, SUM([Order Details].Quantity) AS TotalUnits FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID;",
            "SELECT suppliers.CompanyName, COUNT(DISTINCT orders.ShipRegion) AS RegionCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName ORDER BY RegionCount DESC;",
            "SELECT ProductName, ReorderLevel FROM products WHERE Discontinued = 0;",
            "SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;",
            "SELECT s.SupplierID, s.CompanyName, COUNT(p.ProductID) AS DiscontinuedCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1 GROUP BY s.SupplierID, s.CompanyName ORDER BY DiscontinuedCount DESC LIMIT 1;",
            "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_FORMAT(o.OrderDate, '%Y-%m');",
            "SELECT p.ProductName, s.CompanyName FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.UnitsInStock < p.ReorderLevel;",
            "SELECT City, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY City ORDER BY SupplierCount DESC LIMIT 1;",
            "SELECT s.SupplierID, s.CompanyName, AVG(od.Discount) AS AverageDiscount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID, s.CompanyName;",
            "SELECT p.ProductID, p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY p.ProductID, p.ProductName ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT s.SupplierID, s.CompanyName FROM suppliers s WHERE NOT EXISTS (SELECT * FROM products p WHERE p.SupplierID = s.SupplierID AND p.UnitsOnOrder > 0);",
            "SELECT c.CategoryID, SUM(od.Quantity) AS TotalUnits FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
            "SELECT s.SupplierID, s.CompanyName, COUNT(DISTINCT p.ProductID) AS ProductVariety FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY ProductVariety DESC LIMIT 1;",
            "SELECT s.SupplierID, s.CompanyName, AVG(p.UnitPrice) AS AverageUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID, s.CompanyName;",
            "SELECT COUNT(DISTINCT o.OrderID) AS LateOrders, s.SupplierID, s.CompanyName FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE o.ShippedDate > o.RequiredDate GROUP BY s.SupplierID, s.CompanyName;",
            "SELECT (COUNT(DISTINCT CASE WHEN p.Discontinued = 1 THEN o.OrderID END) * 100.0 / COUNT(DISTINCT o.OrderID)) AS PercentageWithDiscontinuedProducts FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID;",
            "SELECT s.SupplierID, s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID, s.CompanyName ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT p.ProductID, p.ProductName FROM products p WHERE NOT EXISTS (SELECT 1 FROM [Order Details] od WHERE p.ProductID = od.ProductID);",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Freight) AS TotalFreight FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT p.SupplierID, s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS FastestDeliveryTime FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE YEAR(o.ShippedDate) = YEAR(CURDATE()) GROUP BY p.SupplierID, s.CompanyName ORDER BY FastestDeliveryTime ASC LIMIT 1;",
            "SELECT p.ProductID, p.ProductName FROM products p WHERE p.UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
            "SELECT AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageShippingTime FROM orders o;",
            "SELECT o.ShipCountry, COUNT(DISTINCT s.SupplierID) AS SupplierCount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY o.ShipCountry ORDER BY COUNT(o.OrderID) DESC LIMIT 1;",
            "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID HAVING AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) > 15;",
            "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
            "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT suppliers.CompanyName, COUNT(DISTINCT products.ProductID) AS ProductVariety FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID ORDER BY ProductVariety DESC LIMIT 1;",
            "SELECT products.ProductName FROM products WHERE UnitsInStock < ReorderLevel AND UnitsOnOrder > 0;",
            "SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AverageUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY AverageUnitPrice DESC LIMIT 1;",
            "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE YEAR(ShippedDate) = 2022;",
            "SELECT suppliers.CompanyName FROM suppliers LEFT JOIN products ON suppliers.SupplierID = products.SupplierID LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID LEFT JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.ShippedDate IS NULL OR orders.ShippedDate < DATEADD(MONTH, -1, CURRENT_DATE);",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT orders.OrderID FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount > 0.1 GROUP BY suppliers.SupplierID ORDER BY COUNT([Order Details].OrderID) DESC LIMIT 1;",
            "SELECT suppliers.CompanyName, CASE WHEN SUM(CASE WHEN products.Discontinued = 0 THEN 1 ELSE 0 END) = 0 THEN 0 ELSE CAST(SUM(CASE WHEN products.Discontinued = 1 THEN 1 ELSE 0 END) AS FLOAT) / SUM(CASE WHEN products.Discontinued = 0 THEN 1 ELSE 0 END) END AS DiscontinuedRatio FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID;",
            "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SupplierRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID;",
            "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsInStock < products.ReorderLevel;",
            "SELECT suppliers.City, COUNT(DISTINCT suppliers.SupplierID) AS SupplierCount FROM suppliers GROUP BY suppliers.City ORDER BY SupplierCount DESC LIMIT 3;",
            "SELECT products.ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName HAVING SUM([Order Details].Quantity) > 100;",
            "SELECT products.ProductName, AVG([Order Details].Quantity) AS AverageUnitsOrdered FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
            "SELECT suppliers.CompanyName, SUM(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS TotalLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY suppliers.SupplierID;",
            "SELECT ShipRegion, AVG(Freight) AS AverageFreightCost FROM orders GROUP BY ShipRegion ORDER BY AverageFreightCost DESC LIMIT 1;",
            "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate > DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY products.SupplierID;",
            "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE suppliers.Country = 'USA' AND products.Discontinued = 1;",
            "SELECT products.SupplierID, SUM(products.UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY products.SupplierID;",
            "SELECT ProductName FROM products WHERE ReorderLevel > 100;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURDATE() - INTERVAL 1 MONTH);",
            "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS NumberOfProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY NumberOfProducts DESC LIMIT 5;",
            "SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AverageUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
            "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgShippingTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON suppliers.SupplierID = products.SupplierID WHERE orders.ShippedDate IS NOT NULL GROUP BY suppliers.CompanyName ORDER BY AvgShippingTime ASC LIMIT 1;",
            "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsInStock = 0 AND products.UnitsOnOrder = 0;",
            "SELECT suppliers.CompanyName, AVG([Order Details].Discount) AS AverageDiscount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName;",
            "SELECT OrderID FROM orders WHERE ShippedDate IS NULL AND RequiredDate < CURDATE();",
            "SELECT ProductName FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE suppliers.CompanyName = 'Supplier X' ORDER BY UnitPrice DESC LIMIT 1;",
            "SELECT o.CustomerID, COUNT(DISTINCT od.ProductID) AS NumberOfDistinctProducts FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID;",
            "SELECT Country, COUNT(DISTINCT SupplierID) AS NumberOfSuppliers FROM suppliers GROUP BY Country;",
            "SELECT orders.OrderID FROM orders WHERE orders.Freight > (SELECT AVG(Freight) FROM orders);",
            "SELECT suppliers.CompanyName FROM suppliers LEFT JOIN products ON suppliers.SupplierID = products.SupplierID LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID LEFT JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderID IS NULL OR orders.OrderDate < DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH);",
            "SELECT products.CategoryID, SUM(products.UnitsInStock) AS TotalUnitsInStock FROM products GROUP BY products.CategoryID;",
            "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID, suppliers.CompanyName ORDER BY SUM(products.UnitsInStock) DESC LIMIT 1;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS RevenueWithDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE [Order Details].Discount > 0;"
        ],
        "reviews": [
            "The original query incorrectly joins orders with products using 'p.ProductID = o.OrderID'. The correct join should be between products and [Order Details] on ProductID and between [Order Details] and orders on OrderID.",
            "Corrected the GROUP BY clause to include p.ProductName to match the SELECT clause.",
            "The given SQL query was mostly correct, but it included all fields with '*'. To specifically address the business question, I selected only the relevant contact details: SupplierID, CompanyName, ContactName, ContactTitle, and Phone.",
            "The SQL query correctly answers the business question. It joins the 'suppliers', 'products', and 'Order Details' tables on the appropriate keys and filters for discounts greater than 10%. The use of DISTINCT ensures that only unique suppliers are returned.",
            "The query is correct. It correctly selects the ProductID and calculates the total units ordered by summing up the Quantity field from the [Order Details] table, grouped by ProductID.",
            "The query is correct. It selects suppliers whose products are never marked as discontinued by using a subquery to exclude suppliers with discontinued products.",
            "The SQL query correctly calculates the average unit price of products per supplier. However, the query should also include 's.CompanyName' in the GROUP BY clause as it's included in the SELECT statement but not aggregated. The corrected query should be: SELECT s.SupplierID, s.CompanyName, AVG(p.UnitPrice) AS AvgUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID, s.CompanyName;",
            "The original query correctly identifies orders where the ShippedDate is later than the RequiredDate, indicating a delay. No corrections are needed.",
            "The query is almost correct, but it should include both SupplierID and CompanyName in the GROUP BY clause to avoid potential issues with aggregate functions.",
            "The original query is almost correct but 'CompanyName' should be included in the GROUP BY clause to comply with SQL standards.",
            "The original query incorrectly uses MIN instead of AVG for determining the shortest average shipping time. Additionally, it incorrectly joins products to orders directly via ProductID and OrderID. The correct approach is to join through the [Order Details] table.",
            "The original query does not consider only shipped orders. Adding the condition WHERE ShippedDate IS NOT NULL ensures that only shipped orders are counted.",
            "The original query is almost correct, but to comply with ANSI SQL, every column in the SELECT clause that is not an aggregate function must be included in the GROUP BY clause. Added `s.CompanyName` to the GROUP BY clause.",
            "The query correctly joins the 'orders', '[Order Details]', and 'products' tables to find orders with products from more than one supplier. It groups by 'OrderID' and uses a 'HAVING' clause to filter orders with a count of distinct 'SupplierID' greater than one. The query is correct.",
            "The SQL query is correct. It accurately calculates the average freight cost grouped by the shipment method ('ShipVia') from the 'orders' table.",
            "The SQL query correctly retrieves the customer who places the most frequent orders by counting the number of orders for each customer and sorting them in descending order. The use of LIMIT 1 ensures that only the customer with the highest order count is returned. No changes needed.",
            "The SQL query is correct. It retrieves the number of suppliers for each region, groups the results by region, and orders the regions in descending order based on the number of suppliers.",
            "The SQL query correctly retrieves the ProductID and ProductName of products where the UnitsInStock is less than the ReorderLevel, aligning with the business question. However, to answer 'how many,' a COUNT is needed. The correct query should be: SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel; SELECT COUNT(*) FROM products WHERE UnitsInStock < ReorderLevel;",
            "The SQL query is correct for calculating the total discount on all orders in the last year. It correctly joins 'Order Details' and 'orders' tables, computes the discount amount, and filters orders from the last year.",
            "The query is correct and accurately identifies the top 5 products based on unit price. The use of ORDER BY UnitPrice DESC ensures the products are sorted from highest to lowest price, and LIMIT 5 restricts the results to the top 5 entries.",
            "The original query incorrectly joins 'orders' directly with 'products' using OrderID and ProductID, which results in an incorrect dataset. The correct join is through '[Order Details]' table, linking 'orders' to 'products'.",
            "The query is correct. It correctly counts the number of products provided by each supplier by joining the 'suppliers' and 'products' tables on 'SupplierID', groups by 'SupplierID', and orders by the count in descending order to find the supplier providing the most products.",
            "The query is correct and adheres to the given schema and business metrics definition. The use of DATE_FORMAT to group by month and calculating TotalRevenue as defined is appropriate. No changes needed.",
            "The query correctly identifies products that are out of stock and have been ordered, using a subquery to check if ProductID exists in the [Order Details] table. The query is correct and does not need any changes.",
            "The query correctly calculates the average discount rate on all products by averaging the 'Discount' column from the '[Order Details]' table. No corrections needed.",
            "The SQL query is correct. It accurately calculates the total sales for each supplier by joining the suppliers, products, and order details tables, aggregates the sales, and returns the supplier with the highest total sales.",
            "The SQL query is correct. It counts the orders where the shipped date is later than the required date, indicating a shipment delay.",
            "The original query is correct. It selects each ProductID and calculates the total quantity ordered by summing the Quantity from the [Order Details] table, grouping the results by ProductID.",
            "Corrected the JOIN condition to match orders with [Order Details], ensuring orders are linked with products via OrderID in [Order Details].",
            "The SQL query is correct and accurately calculates the total sales for each product category.",
            "The original query selects the product names but does not count them. It should use COUNT to find how many products are below their reorder level.",
            "The SQL query correctly calculates the average unit price of products for each supplier by joining the suppliers and products tables on SupplierID and grouping by SupplierID. The query is correct.",
            "The query is correct. It accurately counts the distinct products each supplier offers by joining the 'suppliers' and 'products' tables on 'SupplierID' and grouping the results by 'CompanyName'.",
            "The original query uses non-standard DATE_SUB and NOW() functions. Replaced with DATEADD and CURRENT_DATE for ANSI SQL compliance.",
            "The query is correct. It correctly calculates the total revenue for each customer by joining 'orders' with '[Order Details]', grouping by 'CustomerID', and ordering by 'TotalSpent' to find the top customer.",
            "The SQL query is correct. It correctly groups suppliers by country, counts the suppliers in each country, and orders the results to find the country with the highest count, returning only the top result with LIMIT 1.",
            "The original query does not need a correction for calculating the average order value; however, if more context from the orders table is needed, a join can be included. The given query is correct for the business question as stated.",
            "The SQL query is correct. It selects the product names from the 'products' table where the 'ProductID' is not found in the 'Order Details' table, effectively identifying products that have never been ordered.",
            "The SQL query is correct. It accurately counts the number of orders shipped to 'USA' by selecting from the 'orders' table where 'ShipCountry' equals 'USA'.",
            "The SQL query correctly counts the number of discontinued products from the 'products' table where 'Discontinued' is 1 (true). This aligns with the business question.",
            "Fixed the join between orders and products to go through the [Order Details] table. Corrected join condition between products and order details.",
            "The SQL query is correct. It joins the products and suppliers tables on SupplierID and filters for discontinued products (Discontinued = 1). Then, it groups the results by SupplierID and counts the number of discontinued products per supplier.",
            "The original query selects ProductID instead of ProductName, which is more informative for identifying the product. The rest of the query is correct.",
            "The SQL query correctly calculates the total sales for each month by joining the 'orders' and '[Order Details]' tables on 'OrderID' and using the MONTH() function to group sales by month.",
            "The SQL query correctly calculates the average discount from the 'Order Details' table. It matches the business question, so no changes are needed.",
            "The SQL query assumes the company is located in the USA, which may not be accurate if the company's country is meant to be dynamically fetched. The query is correct only if 'USA' is indeed the company's country. Otherwise, additional context or a join with a company table would be needed to determine the company's location.",
            "The SQL query is correct. It correctly joins the suppliers and products tables, filters for discontinued products, groups by SupplierID, and orders by the count of discontinued products in descending order, limiting the result to the top supplier.",
            "The original SQL query was mostly correct, but it lacked table alias for 'UnitsInStock' and 'ReorderLevel'. Added 'p.' to clarify that these columns belong to the 'products' table.",
            "The original query selects only one order with the highest freight. The corrected query selects all orders that share the highest freight cost in cases of ties.",
            "The original query calculates the delay for each order but does not directly answer how many orders are delayed. Corrected the query to return the count of delayed orders.",
            "The SQL query is mostly correct, but the use of 'TOP 5' is not standard ANSI SQL. Instead, use 'LIMIT 5' at the end of the query to get the top 5 records.",
            "The SQL query is correct. It accurately joins the suppliers, products, and order details tables and calculates the total revenue per supplier using the correct formula.",
            "The original query is mostly correct. The only change needed is to replace 'LIMIT 1' with 'FETCH FIRST 1 ROW ONLY' to comply with the ANSI SQL standard.",
            "The original query performs integer division, which may result in truncation and an incorrect percentage. Casting the numerator to a DECIMAL ensures correct decimal division.",
            "The SQL query correctly retrieves and counts the number of suppliers per country and orders the results in descending order. No errors were found.",
            "The SQL query correctly calculates the average quantity ordered per product by using the AVG function and grouping by ProductID in the [Order Details] table. The query is correct.",
            "The initial query incorrectly joins 'orders' and 'products' on 'OrderID' and 'SupplierID'. Correcting this by joining 'orders' and '[Order Details]', then 'products' with '[Order Details]', and finally using 'SupplierID' between 'products' and 'suppliers'.",
            "The SQL query correctly answers the business question by calculating the total revenue for each supplier and ordering the results to find the supplier with the highest revenue. It also correctly joins the suppliers, products, and order details tables.",
            "The original query incorrectly joins products with orders directly, but should link through the [Order Details] table to match products with orders. The corrected query includes this intermediate join.",
            "The SQL query correctly retrieves the supplier with the highest number of products by joining the 'suppliers' and 'products' tables on 'SupplierID', counting the products per supplier, and ordering the result in descending order by product count. The use of LIMIT 1 ensures only the top result is returned. The query is correct.",
            "The SQL query is correct and accurately calculates the total sales revenue for each month using the provided metrics.",
            "The SQL query correctly calculates the total sales revenue for each supplier by joining the suppliers, products, and [Order Details] tables. The results are grouped by the supplier's CompanyName and ordered by TotalSales in descending order. The LIMIT 5 clause correctly restricts the result to the top 5 suppliers. The query is correct as per the given requirements.",
            "The SQL query is correct. It joins the suppliers, products, and [Order Details] tables, then calculates the average discount applied to products per supplier by grouping results by the company name.",
            "The SQL query is correct. It accurately counts the number of discontinued products by checking where the 'Discontinued' column is set to 1.",
            "The SQL query correctly identifies the city with the most suppliers by counting the number of suppliers grouped by city and ordering by the count in descending order. It then limits the result to the top entry, effectively matching the business question.",
            "The query is correct. It selects the supplier's company name and calculates the average unit price for products provided by each supplier. The GROUP BY clause correctly groups results by supplier.",
            "The provided SQL query correctly calculates the sales revenue for each product and retrieves the product with the highest sales revenue. The join between the 'products' and '[Order Details]' tables is properly executed, and the aggregation using SUM with the necessary calculation for Total Sales is correct. The GROUP BY clause is appropriately used along with an ORDER BY and LIMIT to find the top product.",
            "The query is correct. It selects orders where the ShippedDate is later than the RequiredDate, indicating a shipping delay.",
            "The original query only selects the UnitsOnOrder from the products table, which is incorrect for this business question. The correct query needs to join the 'products' and '[Order Details]' table to summarize the quantity of each ordered product.",
            "The original query incorrectly finds the minimum delivery time per supplier rather than the average. Additionally, there was an error in joining 'products.ProductID' with 'orders.OrderID' instead of 'orders.ProductID'. The corrected query calculates the average delivery time as intended.",
            "The original query incorrectly joins orders directly with products. It should join via the [Order Details] table, which connects products to orders. The corrected query reflects this proper join sequence.",
            "The original query casted SUM(UnitsInStock) as DOUBLE which is unnecessary. Additionally, it is important to handle division by zero using NULLIF to avoid errors when no products are in stock or on order.",
            "The original query incorrectly joins 'products' with 'orders' using 'ProductID' to 'OrderID'. This has been corrected by joining 'Order Details' with 'products' using 'ProductID' and then joining 'Order Details' with 'orders' using 'OrderID'.",
            "The SQL query correctly counts the distinct number of OrderIDs in the [Order Details] table where a discount is greater than 0, which answers the business question accurately.",
            "The original SQL query uses the DATE_FORMAT function, which is not part of the ANSI SQL standard. Instead, the TO_CHAR function is used with format 'YYYY-MM' to extract the month and year from OrderDate. The rest of the query is correct and calculates the total units sold per month.",
            "The query is mostly correct but needs to consider unique orders by using 'DISTINCT OrderID'. The corrected query is: SELECT suppliers.CompanyName, suppliers.ContactName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName, suppliers.ContactName ORDER BY COUNT(DISTINCT [Order Details].OrderID) DESC LIMIT 1;",
            "The SQL query is correct. It effectively joins the suppliers and products tables to determine which supplier has the most products below their reorder level by counting ProductIDs with UnitsInStock less than ReorderLevel. The results are grouped by CompanyName and ordered to find the top result.",
            "The SQL query is correct. It correctly selects the company name and counts the distinct products by each supplier using a JOIN between the suppliers and products tables.",
            "The original query had a subquery in the JOIN condition, which is unnecessary and can be inefficient. Instead, directly join the [Order Details] table with the products and orders tables to ensure the correct relationships are utilized. This version explicitly performs the joins and should return the correct result.",
            "The SQL query is correct. It calculates the total sales revenue for each supplier by joining the suppliers, products, and order details tables, and appropriately groups the results by company name.",
            "The original query had the JOIN order mixed. 'products' should be joined with '[Order Details]' first based on ProductID, and then orders should be joined based on OrderID. The corrected query fixes the JOIN order.",
            "The query is mostly correct but it is missing a join to the 'orders' table to ensure that only valid orders are included. Here's the corrected query: SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName ORDER BY TotalSales DESC LIMIT 1;",
            "The SQL query is correct. It uses a LEFT JOIN to combine suppliers with their products and counts the ProductID for each supplier, grouping by CompanyName.",
            "The SQL query is correct. It selects the city and counts the number of suppliers, groups by city, orders by the supplier count in descending order, and limits the result to the top one city.",
            "The SQL query is almost correct, but the DATE_SUB function should be adjusted to correctly capture the last month's orders. Instead of using DATE_SUB with INTERVAL 1 MONTH, it should refer to the first day of the previous month and the last day of the previous month. Modify the WHERE clause as follows: WHERE orders.OrderDate BETWEEN DATE_FORMAT(CURDATE() - INTERVAL 1 MONTH, '%Y-%m-01') AND LAST_DAY(CURDATE() - INTERVAL 1 MONTH); Corrected query: SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate BETWEEN DATE_FORMAT(CURDATE() - INTERVAL 1 MONTH, '%Y-%m-01') AND LAST_DAY(CURDATE() - INTERVAL 1 MONTH);",
            "The query is correct. It selects the names of products where the UnitsInStock is 0, which corresponds to products that are currently out of stock.",
            "The query correctly calculates the average discount across all order details. However, since the question asks for the average discount per order, we need to calculate the average discount grouped by OrderID.",
            "The original query incorrectly checks for 'RequiredDate IS NULL'. Instead, it should compare 'ShippedDate' with 'RequiredDate' to ensure it's shipped but not yet due. Therefore, the corrected condition is 'ShippedDate IS NOT NULL AND ShippedDate < RequiredDate'.",
            "The query is correct and correctly calculates the average lead time by supplier, ordering the results to find the supplier with the lowest lead time.",
            "The query is correct and accurately calculates the total value of orders for each country by joining the 'orders' table with the '[Order Details]' table and grouping the results by 'ShipCountry'.",
            "The SQL query is correct. It selects product names and their units on order and orders them in descending order to show products with the highest units on order. No changes needed.",
            "The SQL query is correct. It correctly joins the 'orders' table with the '[Order Details]' and 'products' tables to check for discontinued products and counts distinct OrderIDs.",
            "The SQL query is correct. It correctly joins the 'products' table with the '[Order Details]' table to count the frequency of each product being ordered and selects the top 5 most frequently ordered products.",
            "The SQL query evaluates the relationship between each unique freight cost and the total order value associated with orders having that freight cost. This can result in multiple identical freight costs being treated separately if they appear on different orders. To provide a clearer picture of how freight cost impacts order value as a whole, consider grouping by OrderID instead, and then analyze the overall correlation or trend.",
            "The original query did not correctly handle the condition to identify suppliers who have not delivered in the last quarter. Adjusted to account for null OrderID or undelivered orders with a shipped date before the last quarter.",
            "The SQL query correctly computes the average product price for each supplier and retrieves the supplier with the highest average price. The JOIN between the suppliers and products tables is correctly implemented, and the ORDER BY clause ensures that the result is sorted by average price in descending order. The LIMIT 1 clause correctly limits the result to one supplier. No corrections are necessary.",
            "The SQL query is correct. It joins the products and [Order Details] tables on ProductID, calculates the average quantity ordered for each product, and groups the results by ProductName.",
            "The query is correct. It accurately joins the [Order Details] with products and categories to calculate the total number of units purchased for each category, grouping by CategoryID.",
            "The SQL query correctly answers the business question. It joins the necessary tables and accurately counts distinct shipping regions per supplier. No corrections needed.",
            "The query correctly retrieves the reorder level for each active product by checking if the 'Discontinued' flag is false (0). No corrections are needed.",
            "The original query incorrectly joins orders with products using OrderID and ProductID, which is invalid. It should join orders with [Order Details] on OrderID, and [Order Details] with products on ProductID.",
            "The original query is mostly correct, but the GROUP BY clause should include s.CompanyName as well since it is selected in the query. This prevents potential SQL errors.",
            "The query is almost correct, but it should group by the actual date format expression DATE_FORMAT(o.OrderDate, '%Y-%m') rather than using the alias 'Month'.",
            "The SQL query is correct and follows the ANSI SQL standard. It accurately joins the products and suppliers tables to find products below their reorder level and retrieves the relevant supplier names.",
            "The SQL query correctly finds the city with the most suppliers by grouping the result by City, counting the number of suppliers for each city, ordering by the count in descending order, and limiting the result to the top one city. No corrections needed.",
            "The original query is mostly correct, but the GROUP BY clause should include both s.SupplierID and s.CompanyName to match the SELECT clause.",
            "The original query incorrectly uses 'YEAR(od.OrderID)' instead of filtering on the 'OrderDate' from the 'orders' table. The corrected query joins the 'orders' table to access the 'OrderDate' field.",
            "The query is correct. It properly selects suppliers who have no products with units on order by using a subquery to check for the absence of products with positive UnitsOnOrder for each supplier.",
            "The query correctly retrieves the total units ordered for each product category. However, the 'categories' table is mentioned in the query but not provided in the schema. Ensure the categories table is present in the database. Otherwise, the query looks correct according to the provided schema.",
            "The SQL query is correct. It joins the suppliers and products tables on SupplierID, counts the distinct ProductIDs for each supplier, groups by SupplierID, and orders the results to find the supplier with the most diverse product range. The LIMIT 1 clause ensures only the top result is returned.",
            "The initial query is mostly correct but misses grouping by the CompanyName. It's generally best to include all non-aggregated columns in the GROUP BY clause. I've corrected this by adding s.CompanyName to the GROUP BY clause.",
            "The original query was missing a DISTINCT on o.OrderID to accurately count the unique late orders per supplier. Additionally, s.CompanyName should be included in the GROUP BY clause to match the SELECT statement.",
            "The original query was incorrect because it attempted to divide the count of orders with discontinued products by the total number of order details rather than distinct orders. The corrected query uses COUNT(DISTINCT ...) to count the unique orders.",
            "The original query is almost correct but there's a missing GROUP BY clause on s.CompanyName. According to ANSI SQL, any selected column not aggregated must be included in the GROUP BY clause. This correction adds s.CompanyName to the GROUP BY clause.",
            "The original SQL query is correct. Using 'SELECT 1' in the subquery is often considered more efficient, but the logic remains the same. The query correctly identifies products that do not exist in the [Order Details] table.",
            "The original query is mostly correct, but the GROUP BY clause should use DATE_FORMAT(OrderDate, '%Y-%m') instead of the alias 'Month' for clarity and consistency.",
            "The original query incorrectly joins 'orders' with 'products' instead of '[Order Details]'. Additionally, the grouping should include 's.CompanyName' to avoid ambiguous results.",
            "The SQL query is correct. It appropriately selects products with a unit price above the average unit price by using a subquery to calculate the average.",
            "The SQL query correctly calculates the average shipping time by using the DATEDIFF function to find the difference between ShippedDate and OrderDate for each order, and then averaging these differences.",
            "The original query correctly joins the necessary tables to determine the number of distinct suppliers per shipping country. However, the order by clause should sort by the count of orders to find the most common shipping country, not by the supplier count. The corrected query also uses COUNT(o.OrderID) in ORDER BY clause to find the most common shipping country.",
            "The query was almost correct but needed to join the 'orders' table through '[Order Details]' on 'OrderID' instead of directly joining 'orders' with 'products'. The corrected join sequence ensures each 'OrderID' is accurately matched with 'ProductID' from '[Order Details]'.",
            "The SQL query is correct. It calculates the total sales revenue for each product by joining the products and [Order Details] tables on ProductID, and then groups by ProductName to summarize the total sales per product.",
            "The provided SQL query is correct. It calculates the total sales revenue for each product by summing the price after discount for all order details, groups by product name, orders by the total sales in descending order, and limits the result to the top 5 products.",
            "The SQL query is correct. It counts the distinct ProductIDs provided by each supplier, orders them by count in descending order, and limits the result to the top supplier, which answers the question as intended.",
            "The query correctly lists products with low stock and outstanding orders. No changes are needed.",
            "The original query is mostly correct, but the GROUP BY clause should use suppliers.CompanyName instead of suppliers.SupplierID to match the selected columns.",
            "The query is correct and should return the total freight cost for orders shipped in the year 2022.",
            "The original query uses DATE_SUB with NOW(), which is not ANSI SQL compliant. Replaced with DATEADD and CURRENT_DATE for ANSI SQL compliance to calculate the date one month ago.",
            "The SQL query correctly calculates the average discount given per order by using the AVG function on the Discount column from the [Order Details] table. No changes needed.",
            "The SQL query is correct. It selects orders where the ShippedDate is after the RequiredDate, which means the delivery was late.",
            "The original query is mostly correct but it neglects to ensure the count of orders is accurate. Since [Order Details] table may contain multiple entries for the same order due to different products, we should count distinct OrderIDs to get the correct number of orders. The revised query is:\n\nSELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount > 0.1 GROUP BY suppliers.CompanyName ORDER BY COUNT(DISTINCT [Order Details].OrderID) DESC LIMIT 1;",
            "The original query needs to handle division by zero. Using a CASE statement to check for division by zero and using CAST to ensure floating point division are the necessary corrections.",
            "The query correctly calculates the revenue generated by each supplier's products by joining the 'suppliers', 'products', and '[Order Details]' tables on SupplierID and ProductID. The grouping is appropriately done by suppliers.SupplierID to aggregate the revenue by supplier. However, the GROUP BY clause should include suppliers.CompanyName as it is also in the SELECT clause. Here's the corrected query: SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SupplierRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID, suppliers.CompanyName;",
            "The original query incorrectly compared UnitsOnOrder instead of UnitsInStock to ReorderLevel. The condition should check if UnitsInStock is less than ReorderLevel.",
            "The SQL query is correct. It correctly selects the city and counts the distinct SupplierIDs for each city, groups the result by city, orders the results by SupplierCount in descending order, and limits the result to the top three cities.",
            "The original query did not join the 'products' table to access 'ProductName'. The corrected query includes a join between 'products' and '[Order Details]' on 'ProductID', and groups by 'ProductName' to ensure correct aggregation.",
            "The SQL query is correct. It properly calculates the average number of units ordered for each product by joining the 'products' table with the 'Order Details' table and grouping by 'ProductName'.",
            "The initial query incorrectly joins the orders table directly with products. It should join through the [Order Details] table, as it links orders and products. The corrected query fixes this join relationship.",
            "The SQL query is correct. It calculates the average freight cost per region, orders the results in descending order of average freight cost, and limits the output to one region with the highest average freight cost.",
            "Corrected the joins to properly connect 'orders' with 'Order Details' and then 'Order Details' with 'products' using appropriate keys.",
            "The query is correct. It joins the suppliers, products, and Order Details tables correctly, calculates the total sales, and retrieves the supplier with the highest total sales.",
            "The SQL query is correct. It selects suppliers who are located in 'USA' and have at least one discontinued product by joining the suppliers and products tables on SupplierID. The WHERE clause correctly filters for suppliers in 'USA' and products that are discontinued.",
            "The SQL query correctly calculates the total number of units on order for products supplied by each supplier using the products table. It groups by SupplierID and sums the UnitsOnOrder field, which matches the business question.",
            "The SQL query correctly retrieves the ProductName from the products table where ReorderLevel is greater than 100. The query is accurate and matches the business question.",
            "The query correctly joins the 'orders' table with the '[Order Details]' table and calculates the total sales revenue for the previous month. However, using CURDATE() directly assumes the use of MySQL-specific syntax, which may not be ANSI SQL compliant. To ensure broader compatibility, we can adjust the date calculations using a standard SQL approach if needed by replacing date functions with ANSI SQL compliant syntax.",
            "The SQL query correctly joins the 'suppliers' and 'products' tables on the 'SupplierID' and counts the number of products for each supplier. It then groups by 'CompanyName', orders by 'NumberOfProducts' in descending order, and limits the result to the top 5 suppliers. The query is correct according to the business question.",
            "The SQL query correctly calculates the average unit price of products supplied by each supplier by joining the suppliers and products tables on SupplierID and aggregating the UnitPrice.",
            "The original query incorrectly joined 'orders' with 'products' directly using 'OrderID' and 'ProductID'. It should join through '[Order Details]' to correctly map orders to products. Also, it should filter out null 'ShippedDate' to consider only shipped orders.",
            "The SQL query correctly identifies suppliers with products that have no stock and no units on order. The query joins the 'suppliers' and 'products' tables on 'SupplierID', and filters the products where 'UnitsInStock' and 'UnitsOnOrder' are both zero. The original query is correct and does not need any changes.",
            "The SQL query correctly calculates the average discount for products supplied by each supplier by joining the relevant tables and using the correct aggregation functions and grouping.",
            "The SQL query correctly selects orders that have not been shipped and are past their required date. The use of 'ShippedDate IS NULL' ensures that unshipped orders are selected, and 'RequiredDate < CURDATE()' checks if the required date is in the past. The query is correct and follows the ANSI SQL standard.",
            "The query correctly selects the product name from the products table, joining with the suppliers table to filter on 'Supplier X'. It orders by UnitPrice in descending order and limits the result to 1, which accurately identifies the most expensive product. The query is correct.",
            "The original query did not join the orders table with [Order Details]. This correction includes the necessary join to properly count distinct products per customer.",
            "The SQL query is correct. It selects the Country and counts the distinct SupplierID, grouped by Country, which matches the business question.",
            "The SQL query correctly implements the business question. It selects orders where the freight cost is greater than the average freight cost calculated from all orders.",
            "The original query incorrectly joins products to orders directly, instead of using the [Order Details] table to connect orders and products. Additionally, the WHERE clause should evaluate whether there are no recent orders by excluding orders not within the last six months. The corrected query addresses these issues.",
            "The original query references a 'categories' table which is not defined in the provided schema. The query has been corrected by removing the join with the undefined 'categories' table. The query now groups directly by 'CategoryID' from the 'products' table, which should give the desired result.",
            "The original query was missing a GROUP BY clause, which is necessary when using aggregation functions like SUM.",
            "The SQL query correctly calculates the total revenue from orders that included a discount by summing the discounted prices for each order detail where the discount is greater than zero. This aligns with the 'Total Sales' metric by applying the specified formula with a conditional filter on the discount."
        ],
        "difficulty": [
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "easy",
            "advanced",
            "easy",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium"
        ]
    },
    "Shipping Analysis": {
        "questions": [
            "What is the average shipping cost per order for each month?",
            "How many shipments were delivered on time monthly?",
            "What is the average time taken to fulfill an order each month?",
            "Which shipping method is used most frequently?",
            "What is the total freight cost paid by each customer?",
            "Which month had the highest number of shipments?",
            "What percentage of orders were shipped late?",
            "How many orders did each employee handle monthly?",
            "What is the total number of orders shipped to each country?",
            "What is the shipping cost trend over the past year?",
            "Which customer had the highest shipping cost in the last quarter?",
            "What is the average freight cost for orders shipped to each region?",
            "How many shipments were completed on weekends?",
            "What is the correlation between order size and freight cost?",
            "Which city received the most shipments?",
            "What is the average shipping time per country?",
            "Identify orders where shipping cost exceeds the cost of goods.",
            "How does the on-time delivery rate vary by shipping method?",
            "Which shipping recipient has the most orders?",
            "What is the average freight cost per shipping method?",
            "What is the on-time delivery rate for each month?",
            "What is the average order fulfillment time for each month?",
            "Which shipping company has the highest on-time delivery rate?",
            "What is the average freight cost for orders shipped to different countries?",
            "How many orders were shipped late each month?",
            "What is the most common shipping region?",
            "How often is each shipping method used on weekends?",
            "Which country has the highest number of orders?",
            "What is the total freight cost for orders shipped in the last quarter?",
            "How many orders have a fulfillment time greater than the average?",
            "How does the shipping cost vary by shipping region?",
            "How many orders have missing shipping dates?",
            "What is the longest fulfillment time recorded?",
            "What percentage of orders are shipped on the same day they are ordered?",
            "How many unique shipping addresses are there?",
            "What is the distribution of order dates across different months?",
            "How often do shipments exceed the required date by more than 5 days?",
            "What is the average freight cost for orders with a fulfillment time under 2 days?",
            "What is the average shipping cost per order in the last month?",
            "What percentage of orders were delivered on or before their required date in the last year?",
            "What is the average order fulfillment time for the past quarter?",
            "Which shipping company has the highest average shipping cost?",
            "How many orders were shipped late in the first half of this year?",
            "Which country has the highest percentage of on-time deliveries?",
            "What is the total freight cost for orders shipped via method 2 last month?",
            "How does the average shipping cost compare between two different shipping methods?",
            "Which month had the highest number of orders shipped?",
            "What is the average order fulfillment time for orders shipped to the United States?",
            "Which region has the longest average shipping time?",
            "What is the trend in average shipping cost over the last six months?",
            "How many orders were fulfilled within two days of the order date?",
            "What is the maximum shipping cost recorded for any order?",
            "Which customer has placed the most orders this year?",
            "What is the average shipping cost for orders that were shipped late?",
            "How many unique customers placed orders in the last quarter?",
            "What is the median order fulfillment time for all orders?",
            "Which month had the highest total freight costs?",
            "What is the average time between the order date and the required date?",
            "What is the average shipping cost per order each month?",
            "Which shipping company is used most frequently?",
            "What is the total freight cost for orders shipped to the USA?",
            "How many orders were shipped late for each shipping method?",
            "What is the average freight cost per country?",
            "Which orders were delivered after the required date?",
            "Which city had the highest number of shipped orders?",
            "What is the total number of orders placed by each customer?",
            "Which employee has handled the most orders?",
            "What is the average time difference between the required and shipped dates?",
            "What percentage of orders were shipped within 5 days of being placed?",
            "What are the top 5 highest freight costs for a single order?",
            "What is the average order fulfillment time per shipper?",
            "How many orders were shipped by each shipping method each month?",
            "What is the total revenue generated in freight charges per shipping company?",
            "Which country has the lowest average shipping cost per order?",
            "What is the distribution of shipping times (in days) for all orders?",
            "How many orders were shipped on or before the required date each month?",
            "What is the average freight cost for each shipping method?",
            "How many orders were late each month?",
            "Which employee has the highest number of orders?",
            "What is the total freight cost incurred by each country each month?",
            "What percentage of orders were delivered on or before the required date for each month?",
            "What is the average time taken to fulfill an order for each month?",
            "Which shipping method has the most orders?",
            "What is the total freight cost for each shipping country?",
            "Which month had the highest average order fulfillment time?",
            "What is the total number of orders shipped by each shipping method?",
            "How many orders were shipped late for each year?",
            "Which city has the highest number of orders shipped?",
            "Which employees handled the most orders?",
            "What percentage of orders were shipped within the same region as the shipping recipient?",
            "What is the number of orders shipped to each region?",
            "Which day of the week has the highest number of orders placed?",
            "How many orders were shipped to each postal code for each month?",
            "What is the average fulfillment time for each employee?",
            "What is the average freight cost for orders shipped late?",
            "Which customer placed the most orders?",
            "What is the correlation between freight cost and order fulfillment time?",
            "What percentage of orders were delivered on or before the required date each month?",
            "What is the total freight cost by shipping company for the last year?",
            "Which region has the highest average shipping cost?",
            "List orders that were shipped later than required date along with the delay in days.",
            "What is the monthly trend in the number of orders shipped on time?",
            "Which employee handled the most shipments last year?",
            "What is the average shipping cost per country?",
            "For which city were the most orders shipped last month?",
            "What is the total number of orders handled by each shipping method?",
            "Which customer placed the highest number of orders?",
            "What is the median fulfillment time for orders placed last year?",
            "How many orders have a shipping cost greater than $100?",
            "List the top 5 countries with the greatest number of delayed shipments.",
            "What is the longest time taken to fulfill an order?",
            "Calculate the year-over-year change in average shipping cost.",
            "Identify the month with the highest on-time delivery rate.",
            "Determine the average shipping time for each day of the week.",
            "What percentage of orders are delivered on or before the required date, on a monthly basis?",
            "List top 5 shipping methods used, based on the number of shipments.",
            "Which month had the highest total freight cost?",
            "Identify the cities with the highest average shipping cost.",
            "Calculate the number of orders shipped using each shipping method.",
            "Calculate and compare monthly on-time delivery rates over a year.",
            "Find the top 3 regions with the longest average order fulfillment time.",
            "What is the distribution of shipping costs over different countries?",
            "Determine which customer placed the most orders.",
            "Assess the trend of average shipping costs over time.",
            "Identify which shipping method has the best on-time delivery rate.",
            "What is the relationship between order fulfillment time and freight cost?",
            "Detect any seasonal patterns in the shipping cost per order.",
            "What is the average order fulfillment time per shipping method?",
            "Rank countries by their total number of orders.",
            "Analyze the impact of shipping method on order delivery time.",
            "Which employee handled the most orders in the year?",
            "Which shipping method has the highest on-time delivery rate?",
            "What is the total freight cost for each shipping company?",
            "Identify the top 5 cities with the highest number of orders.",
            "Which employees have shipped the most orders?",
            "In which region do we see the highest average shipping cost?",
            "Calculate the percentage increase in shipping cost year-over-year.",
            "Are there any trends in shipping delays over months?",
            "Which customers have incurred the most in shipping costs?",
            "Identify the relationship between freight cost and order fulfillment time.",
            "Find the shipping company that delivers the most orders on time.",
            "What's the variance in order fulfillment time across different shipping methods?",
            "Which country has the lowest average shipping cost?",
            "How many orders were shipped late in the last quarter?",
            "What is the correlation between order size and shipping cost?",
            "Determine if there's a peak shipping season based on order fulfillment.",
            "Analyze the performance of each shipping company over the past year.",
            "What is the monthly average shipping cost per order?",
            "Which shipping method is used most frequently each month?",
            "Which country receives the highest number of shipments?",
            "How many orders are delayed past the required date each month?",
            "What is the total freight cost per shipping method?"
        ],
        "sql_queries": [
            "SELECT DATE_TRUNC('month', OrderDate) AS month, AVG(Freight) AS avg_shipping_cost FROM orders GROUP BY month;",
            "SELECT DATE_TRUNC('month', ShippedDate) AS month, COUNT(OrderID) AS on_time_shipments FROM orders WHERE ShippedDate <= RequiredDate GROUP BY month;",
            "SELECT DATE_TRUNC('month', OrderDate) AS month, AVG(DATE_PART('day', ShippedDate - OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY month;",
            "SELECT ShipVia, COUNT(OrderID) AS frequency FROM orders GROUP BY ShipVia ORDER BY frequency DESC LIMIT 1;",
            "SELECT CustomerID, SUM(Freight) AS total_freight_cost FROM orders GROUP BY CustomerID;",
            "SELECT DATE_TRUNC('month', ShippedDate) AS month, COUNT(OrderID) AS num_shipments FROM orders WHERE ShippedDate IS NOT NULL GROUP BY month ORDER BY num_shipments DESC LIMIT 1;",
            "SELECT (1.0 * COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) / COUNT(OrderID)) * 100 AS late_percentage FROM orders;",
            "SELECT EmployeeID, DATE_TRUNC('month', OrderDate) AS month, COUNT(OrderID) AS num_orders FROM orders GROUP BY EmployeeID, month;",
            "SELECT ShipCountry, COUNT(OrderID) AS total_orders FROM orders GROUP BY ShipCountry;",
            "SELECT DATE_TRUNC('month', OrderDate) AS month, SUM(Freight) AS total_freight FROM orders WHERE OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY month ORDER BY month;",
            "SELECT CustomerID, SUM(Freight) AS total_shipping_cost FROM orders WHERE OrderDate >= DATE_SUB(DATE_FORMAT(CURRENT_DATE, '%Y-%m-01'), INTERVAL 3 MONTH) AND OrderDate < DATE_FORMAT(CURRENT_DATE, '%Y-%m-01') GROUP BY CustomerID ORDER BY total_shipping_cost DESC LIMIT 1;",
            "SELECT ShipRegion, AVG(Freight) AS avg_freight_cost FROM orders GROUP BY ShipRegion;",
            "SELECT COUNT(OrderID) AS weekend_shipments FROM orders WHERE DAYOFWEEK(ShippedDate) IN (7, 1);",
            "SELECT CORR(order_size_column, Freight) AS correlation FROM orders;",
            "SELECT ShipCity, COUNT(OrderID) AS num_shipments FROM orders GROUP BY ShipCity ORDER BY num_shipments DESC LIMIT 1;",
            "SELECT ShipCountry, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_shipping_time FROM orders GROUP BY ShipCountry;",
            "SELECT OrderID FROM orders WHERE Freight > cost_of_goods_function(OrderID);",
            "SELECT ShipVia, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 1.0 / COUNT(OrderID)) * 100 AS on_time_rate FROM orders GROUP BY ShipVia;",
            "SELECT ShipName, COUNT(OrderID) AS num_orders FROM orders GROUP BY ShipName ORDER BY num_orders DESC LIMIT 1;",
            "SELECT ShipVia, AVG(Freight) AS avg_freight_cost FROM orders GROUP BY ShipVia;",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT ShipVia, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipVia ORDER BY OnTimeRate DESC LIMIT 1;",
            "SELECT ShipCountry, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipCountry;",
            "SELECT TO_CHAR(ShippedDate, 'YYYY-MM') AS Month, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY TO_CHAR(ShippedDate, 'YYYY-MM');",
            "SELECT ShipRegion, COUNT(OrderID) AS Frequency FROM orders GROUP BY ShipRegion ORDER BY Frequency DESC LIMIT 1;",
            "SELECT ShipVia, COUNT(OrderID) AS WeekendFrequency FROM orders WHERE EXTRACT(DOW FROM OrderDate) IN (0, 6) GROUP BY ShipVia;",
            "SELECT ShipCountry, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCountry ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT SUM(Freight) AS TotalFreight FROM orders WHERE ShippedDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE();",
            "SELECT COUNT(OrderID) FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) > (SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) FROM orders);",
            "SELECT ShipRegion, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipRegion;",
            "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate IS NULL;",
            "SELECT MAX(DATEDIFF(ShippedDate, OrderDate)) AS LongestFulfillmentTime FROM orders;",
            "SELECT COUNT(OrderID) * 100.0 / (SELECT COUNT(*) FROM orders) AS SameDayShipPercentage FROM orders WHERE ShippedDate = OrderDate;",
            "SELECT COUNT(DISTINCT ShipAddress) AS UniqueAddresses FROM orders;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY Month;",
            "SELECT COUNT(OrderID) FROM orders WHERE DATEDIFF(ShippedDate, RequiredDate) > 5;",
            "SELECT AVG(Freight) AS AvgFreight FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) < 2;",
            "SELECT AVG(Freight) AS avg_shipping_cost FROM orders WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE - INTERVAL '1' MONTH) AND YEAR(OrderDate) = YEAR(CURRENT_DATE - INTERVAL '1' MONTH);",
            "SELECT ROUND(SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(OrderID), 2) AS on_time_rate FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1;",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time FROM orders WHERE QUARTER(OrderDate) = QUARTER(CURRENT_DATE) AND YEAR(OrderDate) = YEAR(CURRENT_DATE);",
            "SELECT ShipVia, AVG(Freight) AS avg_cost FROM orders GROUP BY ShipVia ORDER BY avg_cost DESC LIMIT 1;",
            "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate AND ShippedDate BETWEEN '2023-01-01' AND '2023-06-30';",
            "SELECT ShipCountry, ROUND(SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(OrderID), 2) AS on_time_rate FROM orders GROUP BY ShipCountry ORDER BY on_time_rate DESC LIMIT 1;",
            "SELECT SUM(Freight) AS total_freight FROM orders WHERE ShipVia = 2 AND MONTH(OrderDate) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(OrderDate) = YEAR(CURDATE() - INTERVAL 1 MONTH);",
            "SELECT ShipVia, AVG(Freight) FROM orders GROUP BY ShipVia ORDER BY AVG(Freight);",
            "SELECT MONTH(ShippedDate) AS month, COUNT(OrderID) AS order_count FROM orders WHERE ShippedDate IS NOT NULL GROUP BY month ORDER BY order_count DESC LIMIT 1;",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time FROM orders WHERE ShipCountry = 'United States';",
            "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_shipping_time FROM orders GROUP BY ShipRegion ORDER BY avg_shipping_time DESC LIMIT 1;",
            "SELECT MONTH(OrderDate) AS month, AVG(Freight) AS avg_cost FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '6 month' GROUP BY MONTH(OrderDate) ORDER BY MONTH(OrderDate);",
            "SELECT COUNT(OrderID) FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) <= 2;",
            "SELECT MAX(Freight) FROM orders;",
            "SELECT CustomerID, COUNT(OrderID) AS order_count FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY CustomerID ORDER BY order_count DESC LIMIT 1;",
            "SELECT AVG(Freight) FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT COUNT(DISTINCT CustomerID) AS unique_customers FROM orders WHERE QUARTER(OrderDate) = QUARTER(CURRENT_DATE()) - 1 AND YEAR(OrderDate) = YEAR(CURRENT_DATE());",
            "SELECT MEDIAN(DATEDIFF(ShippedDate, OrderDate)) AS median_fulfillment_time FROM orders;",
            "SELECT EXTRACT(MONTH FROM OrderDate) AS month, SUM(Freight) AS total_freight FROM orders GROUP BY month ORDER BY total_freight DESC LIMIT 1;",
            "SELECT AVG(DATEDIFF(RequiredDate, OrderDate)) AS avg_time FROM orders;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY Month;",
            "SELECT ShipVia, COUNT(*) AS ShipMethodCount FROM orders GROUP BY ShipVia ORDER BY ShipMethodCount DESC LIMIT 1;",
            "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShipCountry = 'USA';",
            "SELECT ShipVia, SUM(CASE WHEN ShippedDate > RequiredDate THEN 1 ELSE 0 END) AS LateOrders FROM orders GROUP BY ShipVia;",
            "SELECT ShipCountry, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipCountry;",
            "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT ShipCity, COUNT(OrderID) AS NumShippedOrders FROM orders GROUP BY ShipCity ORDER BY NumShippedOrders DESC LIMIT 1;",
            "SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY CustomerID;",
            "SELECT EmployeeID, COUNT(OrderID) AS NumOrders FROM orders GROUP BY EmployeeID ORDER BY NumOrders DESC LIMIT 1;",
            "SELECT AVG(DATEDIFF(RequiredDate, ShippedDate)) AS AvgDaysDiff FROM orders;",
            "SELECT CAST(COUNT(OrderID) FILTER (WHERE DATEDIFF(ShippedDate, OrderDate) <= 5) AS DECIMAL) / COUNT(OrderID) AS PercentWithin5Days FROM orders;",
            "SELECT OrderID, Freight FROM orders ORDER BY Freight DESC LIMIT 5;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia;",
            "SELECT DATE_TRUNC('month', ShippedDate) AS Month, ShipVia, COUNT(OrderID) AS OrdersCount FROM orders GROUP BY Month, ShipVia;",
            "SELECT ShipVia, SUM(Freight) AS TotalFreightRevenue FROM orders GROUP BY ShipVia;",
            "SELECT ShipCountry, AVG(Freight) AS AvgCost FROM orders GROUP BY ShipCountry ORDER BY AvgCost ASC LIMIT 1;",
            "SELECT DATEDIFF(ShippedDate, OrderDate) AS ShippingTimeDays, COUNT(*) AS OrderCount FROM orders GROUP BY ShippingTimeDays ORDER BY ShippingTimeDays;",
            "SELECT DATE_TRUNC('month', ShippedDate) AS Month, COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY DATE_TRUNC('month', ShippedDate);",
            "SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipVia;",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');",
            "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1;",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM'), ShipCountry;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY EXTRACT(YEAR FROM OrderDate), EXTRACT(MONTH FROM OrderDate);",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY EXTRACT(YEAR FROM OrderDate), EXTRACT(MONTH FROM OrderDate);",
            "SELECT ShipVia, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipVia ORDER BY NumberOfOrders DESC;",
            "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",
            "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS FulfillmentTime FROM orders GROUP BY EXTRACT(YEAR FROM OrderDate), EXTRACT(MONTH FROM OrderDate) ORDER BY FulfillmentTime DESC LIMIT 1;",
            "SELECT ShipVia, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipVia;",
            "SELECT EXTRACT(YEAR FROM ShippedDate) AS Year, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY EXTRACT(YEAR FROM ShippedDate);",
            "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC;",
            "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC;",
            "SELECT COUNT(CASE WHEN ShipRegion = ShipRegion THEN 1 END) * 100.0 / COUNT(OrderID) AS SameRegionShippingRate FROM orders WHERE ShipRegion IS NOT NULL;",
            "SELECT ShipRegion, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipRegion;",
            "SELECT EXTRACT(DOW FROM OrderDate) AS DayOfWeek, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EXTRACT(DOW FROM OrderDate) ORDER BY NumberOfOrders DESC;",
            "SELECT ShipPostalCode, EXTRACT(MONTH FROM ShippedDate) AS Month, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipPostalCode, EXTRACT(MONTH FROM ShippedDate);",
            "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY EmployeeID;",
            "SELECT AVG(Freight) AS AverageFreightCost FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT CORR(Freight, DATEDIFF(ShippedDate, OrderDate)) AS Correlation FROM orders;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(*)) AS OnTimePercentage FROM orders GROUP BY Month;",
            "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY ShipVia;",
            "SELECT ShipRegion, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY ShipRegion ORDER BY AverageShippingCost DESC LIMIT 1;",
            "SELECT OrderID, DATEDIFF(ShippedDate, RequiredDate) AS DelayDays FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) AS OnTimeCount FROM orders GROUP BY Month ORDER BY Month;",
            "SELECT EmployeeID, COUNT(*) AS ShipmentsHandled FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY EmployeeID ORDER BY ShipmentsHandled DESC LIMIT 1;",
            "SELECT ShipCountry, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY ShipCountry;",
            "SELECT ShipCity, COUNT(*) AS OrderCount FROM orders WHERE OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT ShipVia, COUNT(*) AS TotalOrders FROM orders GROUP BY ShipVia;",
            "SELECT CustomerID, COUNT(*) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DATEDIFF(ShippedDate, OrderDate)) AS MedianFulfillmentTime FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1;",
            "SELECT COUNT(*) FROM orders WHERE Freight > 100;",
            "SELECT ShipCountry, COUNT(*) AS DelayedShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipCountry ORDER BY DelayedShipments DESC LIMIT 5;",
            "SELECT MAX(DATEDIFF(ShippedDate, OrderDate)) AS LongestFulfillmentTime FROM orders;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, AVG(Freight) AS AverageCost, LAG(AVG(Freight), 1) OVER (ORDER BY EXTRACT(YEAR FROM OrderDate)) AS PreviousYearCost, (AVG(Freight) - LAG(AVG(Freight), 1) OVER (ORDER BY EXTRACT(YEAR FROM OrderDate))) / LAG(AVG(Freight), 1) OVER (ORDER BY EXTRACT(YEAR FROM OrderDate)) AS YearOverYearChange FROM orders GROUP BY Year;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(*)) AS OnTimeRate FROM orders GROUP BY Month ORDER BY OnTimeRate DESC LIMIT 1;",
            "SELECT EXTRACT(DOW FROM OrderDate) AS DayOfWeek, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders GROUP BY DayOfWeek;",
            "SELECT DATE_TRUNC('month', OrderDate) AS OrderMonth, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY OrderMonth;",
            "SELECT ShipVia, COUNT(OrderID) AS NumberOfShipments FROM orders GROUP BY ShipVia ORDER BY NumberOfShipments DESC LIMIT 5;",
            "SELECT DATE_TRUNC('month', OrderDate) AS OrderMonth, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY OrderMonth ORDER BY TotalFreightCost DESC LIMIT 1;",
            "SELECT ShipCity, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipCity ORDER BY AvgShippingCost DESC;",
            "SELECT ShipVia, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipVia;",
            "SELECT DATE_TRUNC('month', OrderDate) AS OrderMonth, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY OrderMonth ORDER BY OrderMonth;",
            "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipRegion ORDER BY AvgFulfillmentTime DESC LIMIT 3;",
            "SELECT ShipCountry, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipCountry ORDER BY AvgShippingCost;",
            "SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', OrderDate) AS OrderMonth, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY OrderMonth ORDER BY OrderMonth;",
            "SELECT ShipVia, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipVia ORDER BY OnTimeDeliveryRate DESC LIMIT 1;",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime, AVG(Freight) AS AvgFreightCost FROM orders;",
            "SELECT DATE_TRUNC('month', OrderDate) AS OrderMonth, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY OrderMonth ORDER BY OrderMonth;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia;",
            "SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCountry ORDER BY NumberOfOrders DESC;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgDeliveryTime FROM orders GROUP BY ShipVia;",
            "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT ShipVia, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS on_time_delivery_rate FROM orders GROUP BY ShipVia ORDER BY on_time_delivery_rate DESC LIMIT 1;",
            "SELECT ShipVia, SUM(Freight) AS total_freight_cost FROM orders GROUP BY ShipVia ORDER BY total_freight_cost DESC;",
            "SELECT ShipCity, COUNT(OrderID) AS num_orders FROM orders GROUP BY ShipCity ORDER BY num_orders DESC LIMIT 5;",
            "SELECT EmployeeID, COUNT(OrderID) AS num_orders FROM orders GROUP BY EmployeeID ORDER BY num_orders DESC;",
            "SELECT ShipRegion, AVG(Freight) AS avg_shipping_cost FROM orders GROUP BY ShipRegion ORDER BY avg_shipping_cost DESC;",
            "SELECT year, annual_freight_cost, (annual_freight_cost - prev_annual_freight_cost) * 100.0 / prev_annual_freight_cost AS percent_increase FROM (SELECT EXTRACT(YEAR FROM OrderDate) AS year, SUM(Freight) AS annual_freight_cost, LAG(SUM(Freight)) OVER (ORDER BY EXTRACT(YEAR FROM OrderDate)) AS prev_annual_freight_cost FROM orders GROUP BY year) AS yearly_costs;",
            "SELECT DATE_TRUNC('month', OrderDate) AS month, AVG(DATEDIFF(ShippedDate, RequiredDate)) AS avg_delay FROM orders GROUP BY month ORDER BY month;",
            "SELECT CustomerID, SUM(Freight) AS total_shipping_cost FROM orders GROUP BY CustomerID ORDER BY total_shipping_cost DESC;",
            "SELECT CORR(CAST(DATEDIFF(ShippedDate, OrderDate) AS DECIMAL), Freight) AS Correlation FROM orders;",
            "SELECT ShipVia, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS on_time_count FROM orders GROUP BY ShipVia ORDER BY on_time_count DESC LIMIT 1;",
            "SELECT ShipVia, VAR_SAMP(DATEDIFF(ShippedDate, OrderDate)) AS variance_fulfillment_time FROM orders GROUP BY ShipVia;",
            "SELECT ShipCountry, AVG(Freight) AS avg_shipping_cost FROM orders GROUP BY ShipCountry ORDER BY avg_shipping_cost ASC LIMIT 1;",
            "SELECT COUNT(OrderID) AS late_orders FROM orders WHERE ShippedDate > RequiredDate AND OrderDate >= DATE '2023-07-01' AND OrderDate < DATE '2023-10-01';",
            "SELECT Correlation FROM (SELECT Correlation(CAST(OrderSize AS DECIMAL), Freight) AS Correlation FROM orders) AS corr;",
            "SELECT EXTRACT(MONTH FROM OrderDate) AS month, COUNT(OrderID) AS order_count FROM orders GROUP BY month ORDER BY order_count DESC;",
            "SELECT ShipVia, EXTRACT(YEAR FROM OrderDate) AS year, COUNT(OrderID) AS total_orders, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS on_time_deliveries, AVG(Freight) AS avg_shipping_cost, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time FROM orders WHERE OrderDate >= DATEADD(year, -1, CURRENT_DATE) GROUP BY ShipVia, year ORDER BY year, on_time_deliveries DESC;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AvgFreight FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, ShipVia, COUNT(ShipVia) AS Count FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m'), ShipVia ORDER BY Month, Count DESC;",
            "SELECT ShipCountry, COUNT(OrderID) AS Shipments FROM orders GROUP BY ShipCountry ORDER BY Shipments DESC;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS DelayedOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;"
        ],
        "reviews": [
            "The SQL query is correct for calculating the average shipping cost per order for each month. It correctly uses DATE_TRUNC to group by month and calculates the average freight cost.",
            "The original query groups by OrderDate instead of ShippedDate. Corrected it to group by ShippedDate to reflect deliveries.",
            "The original query incorrectly uses DATEDIFF which is not standard ANSI SQL. The corrected query uses DATE_PART to calculate the difference in days.",
            "The SQL query correctly identifies the most frequently used shipping method by grouping the orders by 'ShipVia' and ordering the result in descending order of frequency, then limiting the result to the top entry. This query accurately answers the question posed.",
            "The SQL query is correct for the given question. It calculates the total freight cost for each customer by summing the 'Freight' column and grouping by 'CustomerID'.",
            "The original query used OrderDate instead of ShippedDate, and did not account for possibly null ShippedDate values. Corrected to group by and count using ShippedDate instead.",
            "The original query had an incorrect use of COUNT() with a WHERE clause inside it. Correctly used CASE WHEN inside COUNT() to calculate late shipments.",
            "The SQL query correctly calculates the number of orders handled by each employee on a monthly basis. It uses DATE_TRUNC to get the monthly granularity and groups by both EmployeeID and month. The query is correct.",
            "The SQL query correctly calculates the total number of orders shipped to each country. It selects the 'ShipCountry' and counts the 'OrderID' for each country, grouping the results by 'ShipCountry'.",
            "The query is mostly correct, but there is a minor issue with the DATE_ADD function, which should be replaced by DATEADD for ANSI SQL compatibility.",
            "The original query incorrectly uses DATE_ADD instead of DATE_SUB and lacks a proper calculation to determine the start of the last quarter. The corrected query subtracts three months from the beginning of the current month to ensure the last quarter is accurately captured. Additionally, it uses DATE_FORMAT to ensure the date range starts at the beginning of the last quarter.",
            "The SQL query correctly calculates the average freight cost for orders shipped to each region by grouping the results based on the 'ShipRegion' and applying the AVG function on the 'Freight' column. The query is correct as per the given business question.",
            "The original query checks for weekdays 1 and 7, which correspond to Sunday and Saturday respectively in the ANSI SQL standard. However, the initial mapping was reversed. In most SQL dialects like MySQL, DAYOFWEEK returns 1 for Sunday and 7 for Saturday. The SQL query is correct under these assumptions.",
            "The original query is incorrect as it lacks the correct function and column for order size. Replace 'correlation_function' with a proper correlation function like 'CORR' if supported. Ensure 'order_size_column' is replaced with the actual column name representing order size. If 'order_size' is not directly available, calculate or include it, possibly by joining with other relevant tables to determine order size.",
            "The SQL query is correct. It groups the orders by 'ShipCity', counts the number of 'OrderID' for each city, orders the results by the count in descending order, and limits the results to the top city with the most shipments.",
            "The SQL query correctly calculates the average shipping time per country using the DATEDIFF function to find the difference between ShippedDate and OrderDate. It then averages this difference for each ShipCountry, grouping the results by ShipCountry. The query is correct and aligns with the business question.",
            "The SQL query assumes the existence of a function named 'cost_of_goods_function' which is not defined in the provided schema or context. To correct this, you should calculate or join the required data to get the cost of goods for each order, if such data exists in other tables.",
            "The initial query incorrectly uses COUNT(OrderID WHERE ...) syntax. Instead, it should use COUNT with a CASE expression to correctly filter and count orders meeting the condition.",
            "The query correctly finds the shipping recipient with the most orders by counting the OrderID for each ShipName, grouping by ShipName, and ordering by the count in descending order. It uses LIMIT 1 to return the top recipient, which is appropriate for the question. The query is correct.",
            "The SQL query is correct. It calculates the average freight cost per shipping method by grouping the orders by the ShipVia column and then using AVG(Freight) to get the average for each group.",
            "The original SQL query uses the DATE_FORMAT function, which is not part of the ANSI SQL standard. The TO_CHAR function can be used instead for formatting dates. Additionally, the FILTER clause is not part of ANSI SQL; instead, a CASE WHEN statement within the COUNT function should be used to count only those orders that were shipped on or before the required date.",
            "The initial query is mostly correct. The only issue is ensuring consistency in the GROUP BY clause. Using DATE_FORMAT(OrderDate, '%Y-%m') explicitly in the GROUP BY is necessary to align it with the SELECT list.",
            "The original query uses the FILTER clause, which is not part of the ANSI SQL standard. Replaced FILTER with conditional aggregation using COUNT(CASE WHEN ... THEN ... END) to ensure compatibility with ANSI SQL.",
            "The SQL query is correct. It selects the average freight cost grouped by each ship country as required by the business question.",
            "Corrected the SQL query by changing 'DATE_FORMAT' to 'TO_CHAR' with 'YYYY-MM' for ANSI SQL compatibility. Removed the FILTER clause and used WHERE instead. Grouped by the correct 'ShippedDate' month.",
            "The SQL query correctly identifies the most common shipping region by grouping the orders by ShipRegion, counting the number of orders in each region, and ordering the result in descending order of frequency. The use of LIMIT 1 ensures that only the most common region is returned. The SQL query matches the question and outputs the correct result.",
            "The original query incorrectly uses DAYOFWEEK function, which is not ANSI SQL. The correct function is EXTRACT(DOW FROM date) with 0 for Sunday and 6 for Saturday.",
            "The SQL query is correct. It groups the orders by 'ShipCountry', counts them, and orders the result in descending order to find the country with the highest number of orders.",
            "The original query uses OrderDate, but the question asks for orders shipped in the last quarter. Therefore, ShippedDate should be used to filter the records.",
            "The provided SQL query correctly counts the number of orders where the fulfillment time is greater than the average fulfillment time. It uses a subquery to calculate the average time and compares each order's fulfillment time to this average.",
            "The query correctly calculates the average shipping cost (Freight) for each shipping region (ShipRegion) by using GROUP BY on ShipRegion. It aligns with the business question and follows the structure necessary to provide the desired information.",
            "The SQL query correctly counts the number of orders with missing shipping dates by checking if ShippedDate is NULL. The syntax and logic are accurate.",
            "The SQL query is correct. It accurately calculates the longest fulfillment time by using the MAX function on the difference between ShippedDate and OrderDate.",
            "The SQL query is correct. It calculates the percentage of orders shipped on the same day by dividing the count of such orders by the total count of orders and multiplying by 100.0 to get a percentage.",
            "The SQL query is correct. It accurately counts the number of unique shipping addresses in the 'orders' table using COUNT(DISTINCT ShipAddress).",
            "The SQL query is mostly correct, but DATE_FORMAT function used is not standard ANSI SQL. To conform with ANSI SQL, an alternative approach is necessary, such as using EXTRACT or other date handling functions depending on the SQL dialect. Here's a revised version: SELECT CAST(EXTRACT(YEAR FROM OrderDate) AS VARCHAR) || '-' || LPAD(CAST(EXTRACT(MONTH FROM OrderDate) AS VARCHAR), 2, '0') AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CAST(EXTRACT(YEAR FROM OrderDate) AS VARCHAR) || '-' || LPAD(CAST(EXTRACT(MONTH FROM OrderDate) AS VARCHAR), 2, '0');",
            "The SQL query is correct for the given question. It accurately counts the number of orders where the ShippedDate is more than 5 days later than the RequiredDate.",
            "The SQL query is correct according to the business question. The query correctly calculates the average freight cost for orders where the difference between the ShippedDate and OrderDate is less than 2 days.",
            "The original query correctly calculates the average shipping cost for orders placed in the last month, using 'MONTH' to filter by month. However, it doesn't account for the year, which could cause issues if the query is run at the beginning of a new year. The revised query includes the year condition to ensure accuracy.",
            "The original SQL query was incorrect. The subquery condition should be inside a SUM with a CASE statement, not a WHERE clause, for calculating the percentage of on-time orders.",
            "The original query's logic is incorrect for determining the past quarter. We should calculate the current quarter and year, and then look at records from the same quarter and year to capture the appropriate time frame. The revised query filters for orders placed in the current quarter of the current year.",
            "The provided SQL query correctly identifies the shipping company with the highest average shipping cost. The query selects the ShipVia column, calculates the average freight cost grouped by this column, and orders the results in descending order of average cost, finally limiting the result to the top one record. This corresponds with the business question and correctly follows the schema.",
            "The query should filter on ShippedDate for the first half of the year, rather than OrderDate, to correctly count late shipments within that period.",
            "The original query used incorrect syntax for the conditional count. A CASE statement inside SUM is needed to count orders shipped on time, as the WHERE clause won't work inside COUNT this way. The corrected query uses SUM with a CASE statement to calculate the on-time delivery rate.",
            "The original query correctly sums the Freight for ShipVia method 2, but it does not account for the previous year, which can cause issues if the current month is January. Adding a YEAR condition ensures correct filtering for the previous month.",
            "The SQL query correctly calculates the average shipping cost for each shipping method using the AVG(Freight) function. It groups the results by the ShipVia column and orders them by average freight cost. The query is correct according to the requirements and schema.",
            "The original query used 'OrderDate', but to find the month with the highest number of shipments, 'ShippedDate' should be used.",
            "The SQL query correctly calculates the average order fulfillment time for orders shipped to the United States. No changes are needed.",
            "The SQL query correctly calculates the average shipping time for each region and orders the regions to find the one with the longest average shipping time. No changes needed.",
            "The original query needs to use 'DATE_TRUNC' to ensure the comparison starts from the beginning of the current month. The 'INTERVAL' part requires single quotes for ANSI compliance, and it's important to include an 'ORDER BY' clause to ensure months are ordered correctly.",
            "The SQL query correctly calculates the number of orders fulfilled within two days of the order date. The use of DATEDIFF to measure the difference between ShippedDate and OrderDate is appropriate and adheres to the business question.",
            "The query correctly calculates the maximum shipping cost from the 'orders' table using the MAX function on the 'Freight' column. No changes are needed.",
            "The query is mostly correct. The use of CURDATE() needs to be replaced with CURRENT_DATE to adhere to the SQL standard. Other than that, the logic is sound as it counts orders per CustomerID for the current year and selects the one with the highest count.",
            "The SQL query correctly calculates the average shipping cost for orders that were shipped late by filtering orders where the ShippedDate is greater than the RequiredDate.",
            "The initial query uses 'QUARTER(CURDATE() - INTERVAL 3 MONTH)', which might not accurately filter for the last quarter as it doesn't account for the current year. The revised query explicitly ensures that the orders are from the last quarter of the current year.",
            "The SQL standard does not include a MEDIAN function. Calculating the median typically requires different approaches depending on the database system. Here, I'll provide a general approach for calculating the median using ANSI SQL:\n\n```sql\nSELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DATEDIFF(ShippedDate, OrderDate)) AS median_fulfillment_time FROM orders;\n```\n\nThis approach uses the PERCENTILE_CONT function which is common in some SQL dialects for calculating the median.",
            "The original query is mostly correct, but it lacks proper date extraction syntax that follows ANSI SQL. It also doesn't handle year differentiation which might be necessary. Given the context, we'll assume the dataset covers a single year. Therefore, using EXTRACT to get the month is appropriate and follows the ANSI SQL standard.",
            "The SQL query correctly calculates the average time between the order date and the required date using the DATEDIFF function. No corrections are needed.",
            "The SQL query is correct. It correctly uses DATE_TRUNC to group by month and calculates the average shipping cost using the AVG function.",
            "The original query is correct based on the schema provided. It selects the shipping method used most frequently by counting orders grouped by 'ShipVia'. The query orders the results in descending order of frequency and limits the output to one record, correctly identifying the most frequently used shipping company.",
            "The query is correct and accurately calculates the total freight cost for orders shipped to the USA as specified in the business question.",
            "The query correctly calculates the count of orders shipped late for each shipping method by using a conditional SUM with a CASE statement. The GROUP BY clause accurately segments the results by ShipVia.",
            "The SQL query correctly calculates the average freight cost per country by grouping the results by 'ShipCountry' and using the 'AVG' function on the 'Freight' column.",
            "The SQL query correctly identifies orders delivered after the required date by comparing ShippedDate and RequiredDate.",
            "The SQL query correctly answers the business question by selecting the city with the highest number of shipped orders. It groups the data by 'ShipCity', counts the 'OrderID', orders the results in descending order by the count, and limits the result to one row.",
            "The SQL query is correct and accurately retrieves the total number of orders placed by each customer, grouping the results by CustomerID.",
            "The SQL query correctly identifies the employee who has handled the most orders by grouping the orders by EmployeeID, counting the number of orders for each employee, and ordering the results in descending order by the number of orders. Then it limits the result to the top one employee. The query is correct as per the question.",
            "The SQL query is incorrect. The DATEDIFF function should calculate the difference using ShippedDate - RequiredDate to find how late the shipments are. Correct query: SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgDaysDiff FROM orders;",
            "The original query correctly uses a FILTER clause, but the division by COUNT(OrderID) might cause integer division if both counts are integers. Casting the numerator to DECIMAL before division ensures the correct decimal result.",
            "The SQL query correctly retrieves the top 5 orders by highest freight cost, using ORDER BY with LIMIT 5 to achieve this.",
            "The SQL query correctly calculates the average order fulfillment time per shipper by using the ShipVia column to group the results and calculating the average difference between the ShippedDate and OrderDate.",
            "The query was mostly correct, but the DATE_TRUNC function should be applied to ShippedDate instead of OrderDate to accurately reflect when the orders were shipped each month.",
            "The SQL query correctly calculates the total freight revenue per shipping company by summing the Freight column and grouping the results by the ShipVia column, which represents the shipping method or company. The query is suitable for the business question.",
            "The SQL query is correct. It selects the country with the lowest average shipping cost per order by grouping by 'ShipCountry', calculating the average freight, ordering by average cost, and selecting the top result. The original query is valid and correctly addresses the business question.",
            "The SQL query correctly computes the distribution of shipping times by calculating the difference in days between the ShippedDate and OrderDate, then grouping by this difference, and counting the number of occurrences for each shipping time. The query is correct as per the given schema.",
            "The original query used DATE_FORMAT which is not ANSI SQL. Corrected with DATE_TRUNC on ShippedDate to group by month for shipping date.",
            "The SQL query correctly calculates the average freight cost for each shipping method by grouping the results by ShipVia. It accurately implements the requirement by using AVG(Freight) and GROUP BY ShipVia. No changes are needed.",
            "The original query used DATE_FORMAT, which is not ANSI SQL. Changed to TO_CHAR to format dates as per ANSI SQL.",
            "The SQL query is correct. It selects the EmployeeID and counts the number of orders made by each employee, then orders the results in descending order by the total number of orders, limiting the result to the employee with the highest number of orders.",
            "The original query uses a non-ANSI SQL function DATE_FORMAT. The corrected query uses the ANSI SQL equivalent, TO_CHAR, for formatting the date to 'YYYY-MM' for grouping purposes.",
            "The original query does not include the year in the grouping, which might cause ambiguity if the data spans multiple years. Adding EXTRACT(YEAR FROM OrderDate) to both the SELECT and GROUP BY clauses resolves this issue.",
            "The original query does not account for the year, which might result in combining the same months across different years. To ensure accuracy, it is corrected by grouping by both year and month.",
            "The SQL query is correct. It selects the shipping method and counts the number of orders for each shipping method, grouping by the shipping method and ordering the results by the number of orders in descending order.",
            "The SQL query is correct. It correctly calculates the total freight cost for each shipping country by summing the 'Freight' column and grouping the results by 'ShipCountry'. The query matches the intended business question.",
            "The original query only groups by month, not taking the year into account. This could merge data from different years. The corrected query includes both year and month in the grouping to ensure accurate monthly data analysis.",
            "The query is correct. It accurately retrieves the total number of orders grouped by each shipping method (ShipVia) using COUNT and GROUP BY.",
            "The query is mostly correct, but it should group by the year from the ShippedDate instead of OrderDate to accurately reflect when the orders were actually shipped late.",
            "The query correctly selects the city with the highest number of orders shipped by counting the OrderID for each ShipCity, grouping by ShipCity, and ordering by the count in descending order. The query accurately answers the business question.",
            "The SQL query is correct. It selects the EmployeeID and counts the number of orders handled by each employee. The results are grouped by EmployeeID and ordered in descending order of number of orders.",
            "The original query is incorrect as it attempts to use a subquery without a proper join to check if regions match, which is not applicable. The revised query checks whether ShipRegion is not null and divides it by the total number of orders with a non-null ShipRegion. The current metrics don't support a direct comparison within the schema given. For actual comparison with customer regions, schema adjustments like adding customers table or joins are needed.",
            "The query is correct. It groups the orders by ShipRegion and counts the OrderID for each region.",
            "The SQL query is correct. It extracts the day of the week from the OrderDate, counts the number of orders for each day, and orders the results by the number of orders in descending order.",
            "The original query incorrectly uses OrderDate to extract the month, but it should use ShippedDate to conform to the business question. The corrected query uses ShippedDate.",
            "The query correctly calculates the average fulfillment time for each employee based on the given schema and metric definition.",
            "The SQL query is correct. It accurately calculates the average freight cost for orders where the ShippedDate is later than the RequiredDate.",
            "The SQL query correctly identifies the customer who placed the most orders by counting the number of orders for each customer, grouping by CustomerID, and ordering the result in descending order of order count. It limits the result set to one record, ensuring that only the customer with the most orders is returned. Thus, the query is correct.",
            "The SQL query is correct. It calculates the correlation between freight cost and the time taken to fulfill an order using the DATEDIFF function to find the number of days between OrderDate and ShippedDate.",
            "The original query incorrectly uses 'WHERE' inside the COUNT function. It should use a CASE statement inside COUNT to filter conditionally. I also ensured the correct use of '100.0' for a proper decimal calculation.",
            "The query is mostly correct for calculating the total freight cost by shipping company for the last year. However, the use of DATE_SUB with CURDATE() is not ANSI SQL standard. ANSI SQL requires the use of CURRENT_DATE for the current date, and INTERVAL should be expressed with appropriate syntax. Here's the revised version: SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders WHERE OrderDate >= (CURRENT_DATE - INTERVAL '1' YEAR) GROUP BY ShipVia;",
            "The SQL query correctly calculates the average shipping cost per region and orders the results to find the region with the highest average. The use of `GROUP BY` along with `ORDER BY` and `LIMIT` is appropriate for the question.",
            "The provided SQL query correctly selects the OrderID and calculates the delay in days for orders shipped later than the required date. The use of DATEDIFF function and the condition in the WHERE clause are both appropriate.",
            "The original query incorrectly uses COUNT with a WHERE clause inside. The corrected query uses COUNT with a CASE WHEN statement to correctly count the orders shipped on time.",
            "The query correctly selects the employee who handled the most shipments in the last year. However, it is better to use YEAR(OrderDate) = YEAR(CURDATE()) - 1 to ensure it captures only the last calendar year instead of the last 365 days. Here's the corrected query:\nSELECT EmployeeID, COUNT(*) AS ShipmentsHandled FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY EmployeeID ORDER BY ShipmentsHandled DESC LIMIT 1;",
            "The original query is correct. It calculates the average shipping cost per country as requested by grouping by ShipCountry and applying the AVG function to the Freight column.",
            "The query is correct in calculating the city with the most orders in the last month, assuming that the last month is in relation to the current date. It counts orders by 'OrderDate', so make sure that aligns with the intended interpretation of 'last month'. The use of CURRENT_DATE is more standard in ANSI SQL.",
            "The SQL query accurately addresses the business question, correctly counting the total number of orders for each shipping method using GROUP BY on ShipVia.",
            "The provided SQL query is correct. It selects the CustomerID and counts the number of orders for each customer, orders them in descending order by the count, and limits the result to 1 to find the customer with the highest order count.",
            "The original query used DATE_SUB with CURDATE() to calculate the last year, which may not accurately capture all last year's orders. I adjusted the WHERE clause to filter orders based on the year, ensuring that only orders from last year are considered.",
            "The provided SQL query correctly answers the business question by counting the number of orders with a Freight cost greater than 100. No corrections are needed.",
            "The SQL query correctly identifies the top 5 countries with the greatest number of delayed shipments by checking where the 'ShippedDate' is greater than the 'RequiredDate'. It groups the results by 'ShipCountry' and orders them by the count of delayed shipments in descending order. The query is correct according to the business question.",
            "The SQL query correctly implements the question by calculating the maximum difference between ShippedDate and OrderDate using MAX(DATEDIFF(...)). The query is accurate as per the given schema.",
            "The original query calculates the average shipping cost per year and retrieves the previous year's cost using the LAG function. However, it does not calculate the year-over-year change (percentage or difference). The corrected query adds the computation for the year-over-year change as a percentage.",
            "Replaced incorrect WHERE clause in COUNT(...), used CASE WHEN to filter conditionally within COUNT.",
            "The SQL query is mostly correct, but there is a minor issue. The 'DOW' extraction should be applied to 'ShippedDate' instead of 'OrderDate' to accurately reflect the day the shipping was completed. Here's a corrected version:\n\nSELECT EXTRACT(DOW FROM ShippedDate) AS DayOfWeek, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders GROUP BY DayOfWeek;",
            "The SQL query is correct. It calculates the on-time delivery rate on a monthly basis by grouping orders by the month of the OrderDate and correctly using a CASE statement to count on-time orders.",
            "The SQL query correctly groups the orders by 'ShipVia', counts the number of orders for each shipping method, orders them in descending order by the count, and limits the result to the top 5 shipping methods. The query is correct.",
            "The query correctly calculates the total freight cost for each month and retrieves the month with the highest total freight cost. It uses DATE_TRUNC to group by month and orders by descending total freight cost with a LIMIT of 1. The query is correct and follows the ANSI SQL standard if DATE_TRUNC is supported in the given SQL environment.",
            "The SQL query correctly calculates the average shipping cost per city and orders the results in descending order, showing cities with the highest average shipping cost first. The query aligns with the business question and uses correct SQL syntax.",
            "The SQL query is correct. It selects the shipping method (ShipVia) and counts the number of orders (OrderID) grouped by shipping method, satisfying the business question.",
            "The query correctly calculates the monthly on-time delivery rate by counting orders where the ShippedDate is on or before the RequiredDate and dividing by the total number of orders. DATE_TRUNC correctly extracts the month from the OrderDate for monthly grouping. The query is correct as per the given question and schema.",
            "The SQL query is correct according to the question requirements. It calculates the average order fulfillment time per region and selects the top 3 regions with the longest time.",
            "The SQL query is correct. It calculates the average shipping cost (Freight) for each country (ShipCountry) and orders the results by the average cost. No changes are needed.",
            "The SQL query correctly determines the customer who placed the most orders by counting the OrderID for each CustomerID, grouping by CustomerID, and ordering the results in descending order to retrieve the top customer.",
            "The query correctly computes the average shipping costs grouped by month, which is aligned with the goal of assessing trends over time. The DATE_TRUNC function is appropriately used to aggregate by month, and the AVG function captures the 'Shipping Cost per Order' metric. The query does not require any corrections.",
            "The SQL query is correct. It calculates the on-time delivery rate for each shipping method by dividing the count of orders shipped on or before the required date by the total count of orders. The query groups by ShipVia, orders by OnTimeDeliveryRate in descending order, and limits the result to the top shipping method.",
            "The SQL query correctly calculates the average fulfillment time and average freight cost from the 'orders' table. The query is appropriate to understand the general relationship between fulfillment time and freight cost.",
            "The SQL query correctly calculates the average shipping cost per order grouped by month using DATE_TRUNC to aggregate by month. The use of AVG(Freight) aligns with the metric definition for 'Shipping Cost per Order.' The query is accurate and aligns with the business requirement.",
            "The SQL query correctly calculates the average order fulfillment time per shipping method by using DATEDIFF to find the time difference between OrderDate and ShippedDate, grouping by ShipVia. The query is correct.",
            "The SQL query correctly answers the business question by selecting and counting the number of orders per country, grouping by ShipCountry, and ordering by the number of orders in descending order.",
            "The original query incorrectly calculates the difference between RequiredDate and ShippedDate instead of ShippedDate and OrderDate. This has been corrected to find the order fulfillment time by shipping method.",
            "The original query uses DATE_PART instead of EXTRACT for the order date. EXTRACT is the correct ANSI SQL function. The query has been updated accordingly.",
            "The query correctly calculates the on-time delivery rate for each shipping method by counting the orders that were shipped on or before the required date and dividing by the total number of orders for each shipping method. The sorting and LIMIT clause ensure that only the shipping method with the highest rate is returned. The query is accurate.",
            "The SQL query is correct. It correctly sums the Freight column grouped by ShipVia and orders the results in descending order of total freight cost.",
            "The SQL query correctly identifies the top 5 cities with the highest number of orders. The query groups the orders by 'ShipCity', counts the number of 'OrderID' for each city, and orders the results in descending order by 'num_orders', limiting the output to the top 5 entries. No corrections are needed.",
            "The query is correct. It retrieves the employees who have shipped the most orders by grouping orders by EmployeeID and counting the number of orders per employee. Then it sorts the result in descending order based on the number of orders.",
            "The SQL query correctly selects the ShipRegion and calculates the average freight cost per region. It then orders by the average freight cost in descending order to identify the region with the highest cost. The query is correct and adheres to the given business question.",
            "The initial query used the LEAD function incorrectly, which does not accommodate comparisons of previous years' data correctly. It should use LAG to compare the current year's freight cost to the previous year's freight cost.",
            "The original SQL query calculates the delay by the difference between ShippedDate and RequiredDate, which is correct for assessing delays. However, ordering by avg_delay DESC is not necessary for identifying trends over time. Ordering by the month will better reveal trends. Therefore, change ORDER BY avg_delay DESC to ORDER BY month.",
            "The SQL query correctly identifies customers with the highest shipping costs by summing the 'Freight' column for each 'CustomerID'. The correct aggregation and ordering are applied, making the query accurate for the business question.",
            "The original query used a non-existent function 'Correlation'. In ANSI SQL, the 'CORR' function is used to calculate correlation between two numeric expressions.",
            "The query is mostly correct. It correctly calculates the number of on-time deliveries for each shipping method. However, to ensure we get the name of the shipping company, you should join with a table containing shipping company information, if available. In the provided schema, 'ShipVia' likely represents an ID for a shipping company. Ensure the 'ShipVia' IDs can be linked to actual company names if needed.",
            "The SQL query is correct. It calculates the sample variance of the time taken to fulfill orders across different shipping methods by using VAR_SAMP with DATEDIFF for ShippedDate and OrderDate, and groups by ShipVia.",
            "The SQL query is correct. It selects the ShipCountry and average Freight cost, groups the results by ShipCountry, and orders them ascendingly, returning the country with the lowest average shipping cost using LIMIT 1.",
            "The query correctly counts the number of orders shipped late in the period specified, which is the third quarter of 2023, from July 1st to September 30th. The condition ShippedDate > RequiredDate is correctly applied to identify late shipments, and the date range for the last quarter is accurately defined. No changes needed.",
            "The SQL query attempts to calculate the correlation but references `OrderSize`, which does not appear to be a defined column in the provided schema. To find the correlation, you must correctly identify columns that pertain to order size, such as the number of items or order total, both of which are not provided in the schema. Assuming `OrderDetails` table and `Quantity` column existed, a corrected query might look like: SELECT CORR(SUM(od.Quantity), o.Freight) FROM orders o JOIN OrderDetails od ON o.OrderID = od.OrderID GROUP BY o.OrderID;",
            "The query counts the number of orders per month but does not directly address fulfillment time. To analyze peak shipping season based on fulfillment, consider using the 'Order Fulfillment Time' metric. The query should calculate the average fulfillment time per month.",
            "The original query does not limit analysis to the past year, nor does it provide comprehensive performance analysis metrics such as total orders, average shipping cost, or average fulfillment time. The corrected query includes these elements, grouping results by shipping method and year, and calculates relevant metrics.",
            "The SQL query is correctly written to calculate the monthly average shipping cost per order. The use of DATE_FORMAT to extract the year and month from OrderDate is appropriate for grouping monthly data, and AVG(Freight) correctly calculates the average shipping cost.",
            "The SQL query was close but needs to be ordered by Month first to identify the most frequently used shipping method for each month.",
            "The SQL query correctly answers the business question by counting the number of shipments per country, grouping by ShipCountry, and ordering the result in descending order to show the highest number of shipments first. It is correctly structured and should return the desired result.",
            "The SQL query is mostly correct. However, it groups by 'OrderDate' month instead of 'ShippedDate' month, which is more consistent with evaluating when an order is processed as delayed. Here's the corrected query: SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, COUNT(OrderID) AS DelayedOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY DATE_FORMAT(ShippedDate, '%Y-%m');",
            "The SQL query is correct. It accurately calculates the total freight cost per shipping method by using SUM(Freight) and grouping by ShipVia."
        ],
        "difficulty": [
            "easy",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "easy",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium"
        ]
    },
    "Inventory Management": {
        "questions": [
            "What are the names of products with stock levels below their reorder level?",
            "Which products are currently discontinued?",
            "How many units of each product are currently in stock?",
            "What is the total revenue generated by each product?",
            "Which suppliers provide more than 5 different products?",
            "What is the average unit price of products within each category?",
            "Which products have never been ordered?",
            "What is the total discount given for each product?",
            "How many products have a reorder level above 100?",
            "Which products have the highest turnover ratio?",
            "What is the most popular product based on total order quantity?",
            "How many products have been ordered with a discount greater than 20%?",
            "What is the cumulative stock level for each supplier?",
            "Which product category has the most units on order?",
            "What is the average discount offered across all products?",
            "How does the turnover ratio vary by category?",
            "What is the total stock value for each product?",
            "Which products have a unit price greater than the average unit price of all products?",
            "How many products have both high inventory levels and high sales?",
            "What is the trend in inventory levels over the past three months for each product?",
            "What are the total sales for each product?",
            "Which products have the highest inventory turnover ratio?",
            "What are the top-performing products by sales quantity?",
            "Which suppliers provide the most products?",
            "What are the average units in stock for each category?",
            "Are there any products below their reorder level?",
            "What is the total value of current inventory?",
            "Which products have the highest unit price?",
            "What's the total discount given for each product?",
            "Which products have been discontinued?",
            "What is the most ordered product in terms of quantity?",
            "How many products have no units on order?",
            "What is the average discount applied across all orders?",
            "Which categories have the most units in stock?",
            "How many products need reordering based on their stock level?",
            "What is the total order quantity for each supplier?",
            "Which products have been ordered more than 1000 times?",
            "What is the percentage of discontinued products?",
            "What are the average sales per month for each product?",
            "Which orders have the highest discount applied?",
            "What is the total value of all products currently in stock?",
            "Which products have a stock level below their reorder level?",
            "How many discontinued products are still in stock?",
            "What is the average unit price of products provided by each supplier?",
            "Which category of products has the most units on order?",
            "What is the total sales revenue for each product, including discounts?",
            "Identify the top 5 products by total sales quantity.",
            "Calculate the inventory turnover ratio for the last month.",
            "Which products have not been ordered in the last 6 months?",
            "What is the average discount given per order?",
            "List the products with the highest reorder level.",
            "Which suppliers provide the most different products?",
            "Display the performance of each product based on sales for last month.",
            "What percentage of total stock is made up by discontinued products?",
            "How many products have a unit price above the average unit price?",
            "Find the product with the maximum price-to-stock ratio.",
            "Which product categories have the lowest average unit price?",
            "How many products are close to their reorder level (less than 10 units above)?",
            "For each category, what is the total number of units sold?",
            "Determine the monthly increase or decrease in stock levels for each product.",
            "What are the top 5 most stocked products currently available?",
            "Which products are below their reorder level?",
            "How many discontinued products are there in the inventory?",
            "What is the total value of the current stock for each product category?",
            "What is the Inventory Turnover Ratio for the last month?",
            "Which products have been ordered the most in the past year?",
            "Find products that have never been ordered.",
            "What is the average discount given per product?",
            "Identify products that are both low in stock and have high sales.",
            "What is the Unit Price trend for products over time?",
            "Which supplier provides the most number of different products?",
            "What are the products with the highest margin between price and reorder level?",
            "What's the percentage of orders that included discontinued products?",
            "What are the reorder points for the top-selling products?",
            "How many units of each product are on order?",
            "Identify the product categories with the highest average stock value.",
            "Which products consistently sell above the reorder level?",
            "What is the monthly sales performance for each product for the past year?",
            "Which product category has the highest average sales per order?",
            "Assess products based on both stock levels and historical sales performance.",
            "What is the average price of all products?",
            "Which products have stock levels below the reorder level?",
            "How many products are currently discontinued?",
            "What is the total value of products currently in stock?",
            "What is the most popular product category based on the number of orders?",
            "What are the top 5 products by total sales revenue?",
            "What is the average discount given on products across all orders?",
            "How many units of each product have been sold in the last month?",
            "What is the total sales revenue for each supplier?",
            "What is the total quantity of products on order?",
            "Which products have a unit price greater than the average unit price?",
            "What are the total sales for each category in the last quarter?",
            "What is the reorder frequency of products over the last six months?",
            "Which products have the highest difference between units in stock and reorder level?",
            "What is the average order size for each product?",
            "Which products have been ordered with a discount, and what is the total discount amount?",
            "Which product has the highest number of units ordered historically?",
            "What is the total inventory value based on the current unit price and units in stock?",
            "Which products have reached their reorder level and need replenishment?",
            "What is the most sold product based on order quantities?",
            "How many units of discontinued products are still in stock?",
            "What is the average discount applied to products in orders?",
            "Which supplier supplies the most number of products?",
            "Identify products with the highest price fluctuation orders (Order UnitPrice vs. product UnitPrice).",
            "What is the average inventory turnover ratio on a monthly basis?",
            "Which category has the most products reaching the reorder level?",
            "What are the top 5 products contributing the most to revenue in the last year?",
            "What is the trend of inventory turnover ratio over the past 6 months?",
            "How does the performance of products vary during holiday seasons?",
            "Which product has the highest discount rate applied?",
            "What proportion of total sales is contributed by discontinued products?",
            "How many products are supplied by each supplier and what is the average price?",
            "What is the highest recorded order quantity for any product?",
            "Which products have a higher reorder level than their units in stock?",
            "What is the total number of products per category?",
            "How many completed orders involved discontinued products?",
            "What are the top 3 categories with the highest sales by quantity?",
            "Which products have inventory levels below their reorder points?",
            "What is the total value of all inventory held?",
            "Identify discontinued products with remaining stock.",
            "Which suppliers provide the highest number of discontinued products?",
            "What is the monthly inventory turnover ratio?",
            "Rank products by sales volume in the last month.",
            "Find the products with zero stock and orders pending.",
            "Which product categories have the highest average unit price?",
            "What is the average discount given per product over the last year?",
            "Identify products that need to be reordered immediately.",
            "How many units of each product are on order currently?",
            "Which products have experienced the most significant price increases?",
            "Identify low-performing products based on sales data.",
            "Compare the sales performance of top 5 suppliers.",
            "How does the inventory turnover ratio vary by product category?",
            "Calculate overall product performance for the last quarter.",
            "What is the highest discount ever applied on any product?",
            "List the top 10 best-selling products of all time.",
            "What is the current total inventory value by product?",
            "Which products have the lowest inventory turnover ratio over the past month?",
            "How many products are below their reorder level?",
            "What is the sales performance of each product over the last month?",
            "What is the total revenue loss due to discounts last month?",
            "Which supplier provides the most products?",
            "How many products have not been ordered in the past six months?",
            "What is the average unit price for products in each category?",
            "Identify products with high stock levels but low sales orders.",
            "Calculate the monthly inventory turnover ratio for each product.",
            "Which products have a unit price higher than the average unit price of all products?",
            "Find the top 5 selling products in terms of quantity.",
            "How many categories of products are currently in stock?",
            "What is the total number of units ordered for each product last month?",
            "Identify the top 3 suppliers based on the number of products supplied.",
            "What is the total quantity of discontinued products sold last year?",
            "What are the top 5 products with the highest reorder level?"
        ],
        "sql_queries": [
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT ProductName FROM products WHERE Discontinued = 1;",
            "SELECT ProductName, UnitsInStock FROM products;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
            "SELECT SupplierID, COUNT(DISTINCT ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID HAVING COUNT(DISTINCT ProductID) > 5;",
            "SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID;",
            "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT p.ProductName, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
            "SELECT COUNT(*) AS ProductCount FROM products WHERE ReorderLevel > 100;",
            "SELECT ProductName, (SUM(od.Quantity * od.UnitPrice) / AVG(UnitsInStock)) AS TurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TurnoverRatio DESC;",
            "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SUM(od.Quantity) DESC LIMIT 1;",
            "SELECT COUNT(DISTINCT od.ProductID) FROM [Order Details] od WHERE od.Discount > 0.2;",
            "SELECT SupplierID, SUM(UnitsInStock) AS TotalStock FROM products GROUP BY SupplierID;",
            "SELECT CategoryID, SUM(UnitsOnOrder) AS TotalOnOrder FROM products GROUP BY CategoryID ORDER BY TotalOnOrder DESC LIMIT 1;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT CategoryID, (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) AS TurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY CategoryID;",
            "SELECT p.ProductName, (p.UnitsInStock * p.UnitPrice) AS StockValue FROM products p;",
            "SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
            "SELECT p.ProductID FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID HAVING AVG(p.UnitsInStock) > 100 AND SUM(od.Quantity) > 1000;",
            "SELECT ProductName, UnitsInStock FROM products WHERE DATE_SUB(CURDATE(), INTERVAL 3 MONTH) < NOW() ORDER BY ProductID;",
            "SELECT ProductID, SUM(Quantity * UnitPrice) AS TotalSales FROM [Order Details] GROUP BY ProductID;",
            "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID ORDER BY InventoryTurnover DESC;",
            "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalOrdered FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalOrdered DESC;",
            "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC;",
            "SELECT CategoryID, AVG(UnitsInStock) AS AverageStock FROM products GROUP BY CategoryID;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
            "SELECT ProductID, ProductName, UnitPrice FROM products ORDER BY UnitPrice DESC;",
            "SELECT ProductID, SUM(Discount * Quantity * UnitPrice) AS TotalDiscount FROM [Order Details] GROUP BY ProductID;",
            "SELECT ProductID, ProductName FROM products WHERE Discontinued = 1;",
            "SELECT ProductID, SUM(Quantity) AS TotalOrdered FROM [Order Details] GROUP BY ProductID ORDER BY TotalOrdered DESC LIMIT 1;",
            "SELECT COUNT(*) FROM products WHERE UnitsOnOrder = 0;",
            "SELECT AVG(Discount) FROM [Order Details];",
            "SELECT CategoryID, SUM(UnitsInStock) AS TotalStock FROM products GROUP BY CategoryID ORDER BY TotalStock DESC;",
            "SELECT COUNT(*) FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT SupplierID, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY SupplierID;",
            "SELECT products.ProductID, products.ProductName FROM [Order Details] INNER JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID, products.ProductName HAVING SUM([Order Details].Quantity) > 1000;",
            "SELECT (COUNT(*)*1.0 / (SELECT COUNT(*) FROM products)) * 100 AS DiscontinuedPercentage FROM products WHERE Discontinued = 1;",
            "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / COUNT(DISTINCT EXTRACT(YEAR_MONTH FROM orders.OrderDate)) AS AvgMonthlySales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductID;",
            "SELECT OrderID, Discount FROM [Order Details] ORDER BY Discount DESC LIMIT 1;",
            "SELECT SUM(UnitPrice * UnitsInStock) AS TotalStockValue FROM products;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT COUNT(*) FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
            "SELECT SupplierID, AVG(UnitPrice) AS AverageUnitPrice FROM products GROUP BY SupplierID;",
            "SELECT CategoryID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products WHERE UnitsOnOrder > 0 GROUP BY CategoryID ORDER BY TotalUnitsOnOrder DESC LIMIT 1;",
            "SELECT [Order Details].ProductID, SUM(([Order Details].UnitPrice * [Order Details].Quantity) * (1 - Discount)) AS TotalRevenue FROM [Order Details] GROUP BY [Order Details].ProductID;",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 5;",
            "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE);",
            "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details] WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH));",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT ProductID, ProductName FROM products WHERE Discontinued = 0 ORDER BY ReorderLevel DESC LIMIT 10;",
            "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC;",
            "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND OrderDate < CURDATE() GROUP BY products.ProductID, products.ProductName;",
            "SELECT (SUM(CASE WHEN Discontinued = 1 THEN UnitsInStock ELSE 0 END) / SUM(UnitsInStock) * 100.0) AS DiscontinuedStockPercentage FROM products;",
            "SELECT COUNT(*) FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
            "SELECT ProductID, ProductName, (UnitPrice / UnitsInStock) AS PriceToStockRatio FROM products WHERE UnitsInStock > 0 ORDER BY PriceToStockRatio DESC LIMIT 1;",
            "SELECT CategoryID, AVG(UnitPrice) AS AverageUnitPrice FROM products GROUP BY CategoryID ORDER BY AverageUnitPrice ASC;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock - ReorderLevel < 10;",
            "SELECT CategoryID, SUM([Order Details].Quantity) AS TotalUnitsSold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY CategoryID;",
            "SELECT ProductID, ProductName, (UnitsInStock - (SELECT UnitsInStock FROM products AS pp WHERE pp.ProductID = p.ProductID AND pp.OrderDate < DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH))) AS StockChange FROM products AS p;",
            "SELECT ProductName FROM products WHERE Discontinued = 0 ORDER BY UnitsInStock DESC LIMIT 5;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT COUNT(ProductID) FROM products WHERE Discontinued = 1;",
            "SELECT CategoryID, SUM(UnitsInStock * UnitPrice) AS StockValue FROM products GROUP BY CategoryID;",
            "SELECT SUM(d.Quantity * d.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnover FROM [Order Details] d JOIN products p ON d.ProductID = p.ProductID WHERE d.OrderID IN (SELECT OrderID FROM orders WHERE OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE());",
            "SELECT ProductName, SUM(d.Quantity) AS TotalOrdered FROM [Order Details] d JOIN products p ON d.ProductID = p.ProductID JOIN orders o ON d.OrderID = o.OrderID WHERE o.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND CURRENT_DATE GROUP BY ProductName ORDER BY TotalOrdered DESC;",
            "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT ProductID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY ProductID;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel AND ProductID IN (SELECT ProductID FROM [Order Details] GROUP BY ProductID HAVING SUM(Quantity) > 10);",
            "SELECT OrderDate, AVG([Order Details].UnitPrice) FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY OrderDate;",
            "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1;",
            "SELECT ProductName, UnitPrice - ReorderLevel AS Margin FROM products ORDER BY Margin DESC;",
            "SELECT (COUNT(DISTINCT CASE WHEN p.Discontinued = 1 THEN d.OrderID END) / COUNT(DISTINCT d.OrderID)) * 100 AS Percentage FROM [Order Details] d JOIN products p ON d.ProductID = p.ProductID;",
            "SELECT ProductName, ReorderLevel FROM products WHERE ProductID IN (SELECT ProductID FROM [Order Details] GROUP BY ProductID ORDER BY SUM(Quantity) DESC LIMIT 5);",
            "SELECT ProductName, UnitsOnOrder FROM products;",
            "SELECT c.CategoryID, AVG(p.UnitsInStock * p.UnitPrice) AS AvgStockValue FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID ORDER BY AvgStockValue DESC LIMIT 1;",
            "SELECT p.ProductName FROM products p WHERE p.UnitsInStock > p.ReorderLevel AND p.ProductID IN (SELECT od.ProductID FROM [Order Details] od GROUP BY od.ProductID HAVING SUM(od.Quantity) > 100);",
            "SELECT p.ProductName, MONTH(o.OrderDate) AS Month, YEAR(o.OrderDate) AS Year, SUM(od.Quantity) AS MonthlySales FROM [Order Details] od JOIN Orders o ON od.OrderID = o.OrderID JOIN products p ON od.ProductID = p.ProductID WHERE o.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY p.ProductName, YEAR(o.OrderDate), MONTH(o.OrderDate) ORDER BY YEAR(o.OrderDate) DESC, MONTH(o.OrderDate) DESC;",
            "SELECT c.CategoryID, AVG(d.Quantity * d.UnitPrice) AS AvgSalesPerOrder FROM [Order Details] d JOIN products p ON d.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID ORDER BY AvgSalesPerOrder DESC LIMIT 1;",
            "SELECT ProductName, (SUM(d.Quantity) - AVG(p.UnitsInStock)) AS PerformanceMetric FROM [Order Details] d JOIN products p ON d.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName HAVING PerformanceMetric > 0;",
            "SELECT AVG(UnitPrice) FROM products;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
            "SELECT SUM(UnitPrice * UnitsInStock) FROM products;",
            "SELECT CategoryID, COUNT(DISTINCT [Order Details].OrderID) AS OrderCount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalRevenue DESC LIMIT 5;",
            "SELECT AVG(Discount) FROM [Order Details];",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalSold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) GROUP BY products.ProductName;",
            "SELECT SupplierID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID;",
            "SELECT SUM(UnitsOnOrder) FROM products;",
            "SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
            "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY CategoryID;",
            "SELECT ProductID, COUNT(*) AS ReorderCount FROM products WHERE UnitsInStock < ReorderLevel GROUP BY ProductID ORDER BY ReorderCount DESC;",
            "SELECT ProductName, (UnitsInStock - ReorderLevel) AS StockDifference FROM products ORDER BY StockDifference DESC;",
            "SELECT ProductName, AVG([Order Details].Quantity) AS AvgOrderSize FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;",
            "SELECT products.ProductName, SUM([Order Details].Discount * [Order Details].Quantity * [Order Details].UnitPrice) AS TotalDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount > 0 GROUP BY products.ProductName;",
            "SELECT ProductName, SUM([Order Details].Quantity) AS TotalUnits FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, ProductName ORDER BY TotalUnits DESC LIMIT 1;",
            "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0",
            "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalSold DESC LIMIT 1",
            "SELECT SUM(UnitsInStock) AS TotalUnitsInStock FROM products WHERE Discontinued = 1",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details]",
            "SELECT SupplierID, COUNT(ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID ORDER BY NumberOfProducts DESC LIMIT 1",
            "SELECT p.ProductID, p.ProductName, od.UnitPrice AS OrderUnitPrice, p.UnitPrice AS ProductUnitPrice FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.UnitPrice != p.UnitPrice",
            "SELECT MONTH(o.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY MONTH(o.OrderDate)",
            "SELECT p.CategoryID, COUNT(p.ProductID) AS ProductsToReorder FROM products p WHERE p.UnitsInStock <= p.ReorderLevel GROUP BY p.CategoryID ORDER BY ProductsToReorder DESC",
            "SELECT p.ProductID, p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY p.ProductID, p.ProductName ORDER BY Revenue DESC LIMIT 5",
            "SELECT MONTH(OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY MONTH(OrderDate) ORDER BY Month DESC LIMIT 6",
            "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE MONTH(od.OrderDate) IN (11, 12) AND YEAR(od.OrderDate) = YEAR(CURRENT_DATE) GROUP BY p.ProductID, p.ProductName ORDER BY TotalSales DESC",
            "SELECT p.ProductID, p.ProductName, od.Discount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID ORDER BY od.Discount DESC LIMIT 1;",
            "SELECT SUM(od.Quantity * od.UnitPrice) / (SELECT SUM(Quantity * UnitPrice) FROM [Order Details]) AS Proportion FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 1;",
            "SELECT SupplierID, COUNT(ProductID) AS NumberOfProducts, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY SupplierID",
            "SELECT MAX(Quantity) AS MaxQuantity FROM [Order Details]",
            "SELECT ProductID, ProductName FROM products WHERE ReorderLevel > UnitsInStock;",
            "SELECT CategoryID, COUNT(ProductID) AS NumberOfProducts FROM products GROUP BY CategoryID",
            "SELECT COUNT(DISTINCT OrderID) AS CompletedOrdersWithDiscontinued FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 1",
            "SELECT p.CategoryID, SUM(od.Quantity) AS TotalQuantitySold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.CategoryID ORDER BY TotalQuantitySold DESC LIMIT 3",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
            "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
            "SELECT SupplierID, COUNT(ProductID) AS NumberOfDiscontinuedProducts FROM products WHERE Discontinued = 1 GROUP BY SupplierID ORDER BY NumberOfDiscontinuedProducts DESC;",
            "SELECT MONTH(OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY MONTH(OrderDate);",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE) GROUP BY p.ProductName ORDER BY TotalSales DESC;",
            "SELECT ProductName FROM products WHERE UnitsInStock = 0 AND UnitsOnOrder > 0;",
            "SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID ORDER BY AveragePrice DESC;",
            "SELECT p.ProductName, AVG(od.Discount) AS AverageDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE YEAR(od.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY p.ProductID;",
            "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;",
            "SELECT ProductID, UnitsOnOrder FROM products WHERE UnitsOnOrder > 0;",
            "SELECT ProductName, MAX(UnitPrice) - MIN(UnitPrice) AS PriceIncrease FROM products GROUP BY ProductID ORDER BY PriceIncrease DESC;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID HAVING SUM(od.Quantity) < 1000 ORDER BY TotalSales;",
            "SELECT s.SupplierID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT CategoryID, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS CategoryInventoryTurnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY CategoryID;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalPerformance FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE QUARTER(OrderDate) = QUARTER(DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)) AND YEAR(OrderDate) = YEAR(DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)) GROUP BY p.ProductID ORDER BY TotalPerformance DESC;",
            "SELECT MAX(Discount) AS MaxDiscount FROM [Order Details];",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY TotalSales DESC LIMIT 10;",
            "SELECT ProductID, ProductName, UnitsInStock * UnitPrice AS InventoryValue FROM products;",
            "SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.UnitsInStock > 0 GROUP BY p.ProductID, p.ProductName HAVING SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) < YOUR_THRESHOLD;",
            "SELECT COUNT(ProductID) AS ProductsBelowReorder FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantitySold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IN (SELECT OrderID FROM orders WHERE orderDate BETWEEN '2023-09-01' AND '2023-09-30') GROUP BY p.ProductID, p.ProductName;",
            "SELECT SUM(od.Quantity * od.UnitPrice * od.Discount) AS RevenueLoss FROM [Order Details] od WHERE od.OrderID IN (SELECT OrderID FROM orders WHERE orderDate BETWEEN '2023-09-01' AND '2023-09-30');",
            "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1;",
            "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT ProductID FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE orderDate BETWEEN CURRENT_DATE - INTERVAL '6 months' AND CURRENT_DATE));",
            "SELECT CategoryID, AVG(UnitPrice) AS AverageUnitPrice FROM products GROUP BY CategoryID;",
            "SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName HAVING p.UnitsInStock > YOUR_HIGH_THRESHOLD AND COALESCE(SUM(od.Quantity), 0) < YOUR_LOW_THRESHOLD;",
            "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IN (SELECT OrderID FROM orders WHERE orderDate BETWEEN 'YOUR_START_DATE' AND 'YOUR_END_DATE') GROUP BY p.ProductID, p.ProductName;",
            "SELECT ProductID, ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
            "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS Quantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY Quantity DESC LIMIT 5;",
            "SELECT COUNT(DISTINCT CategoryID) FROM products WHERE UnitsInStock > 0;",
            "SELECT p.ProductID, SUM(od.Quantity) FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.orderDate BETWEEN YOUR_START_DATE AND YOUR_END_DATE GROUP BY p.ProductID;",
            "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 3;",
            "SELECT SUM(od.Quantity) AS QuantitySold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1 AND od.OrderID IN (SELECT OrderID FROM orders WHERE orderDate BETWEEN '2022-01-01' AND '2022-12-31');",
            "SELECT ProductID, ProductName, ReorderLevel FROM products ORDER BY ReorderLevel DESC LIMIT 5;"
        ],
        "reviews": [
            "The SQL query is correct. It selects products where the current stock is less than the reorder level, which matches the business question.",
            "The SQL query is correct. It properly selects the 'ProductName' from the 'products' table where the 'Discontinued' flag is set to 1.",
            "The SQL query correctly retrieves the product names and their current stock levels from the products table. No changes needed.",
            "The query is correct. It calculates the total revenue for each product by multiplying the quantity ordered by the unit price and grouping by product name.",
            "The original query is incorrect because it did not use DISTINCT in the COUNT function. To find suppliers providing more than 5 different products, COUNT(DISTINCT ProductID) should be used to ensure unique products are counted.",
            "The query is correct and retrieves the average unit price of products for each category from the products table, grouped by CategoryID.",
            "The SQL query is correct. It selects product names from the 'products' table where the 'ProductID' does not exist in the 'Order Details' table. This correctly identifies products never ordered.",
            "The query correctly calculates the total discount given for each product by multiplying the discount rate with the quantity and unit price. However, it assumes that 'Discount' is a direct reduction from the total price rather than a percentage. To correctly calculate the discount as a percentage, it should be: SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount, where 'Discount' is between 0 and 1. If 'Discount' represents the percentage of the product's price that is deducted, this query is correct.",
            "The original query returns product names, but the question asks for a count of products. Thus, COUNT(*) should be used to get the number of products.",
            "The query is correct and adheres to the use of the Inventory Turnover Ratio formula as defined in the metrics. It properly joins 'products' and '[Order Details]' tables and calculates the turnover ratio grouped by 'ProductName'.",
            "The SQL query is mostly correct. However, the use of 'LIMIT 1' is non-standard in ANSI SQL; instead, a subquery or window function should be used to achieve the same result. Additionally, ensure that the use of LIMIT is supported by the SQL dialect being used. Nonetheless, from a logical perspective, the query effectively calculates the total order quantity for each product and returns the product with the highest total.",
            "The initial query mistakenly uses a threshold of 20.0 for the discount, which implies 2000%. The correct threshold for 20% is 0.2. Also, the query should return a count of distinct products rather than names, aligning with the business question asking for a count.",
            "The original query correctly calculates the cumulative stock level, but the suppliers table was unnecessarily included. The adjustment removes the join, as only the 'products' table is needed for this query.",
            "The query is correct as it calculates the total units on order for each category and returns the category with the highest total.",
            "The SQL query is correct and accurately calculates the average discount offered across all products by averaging the Discount column in the [Order Details] table.",
            "The SQL query correctly calculates the turnover ratio per category using the formula provided. By grouping by CategoryID, it examines variations correctly. The query adheres to the granularity of the Inventory Turnover Ratio definition.",
            "The SQL query is correct. It calculates the total stock value by multiplying the UnitsInStock by the UnitPrice for each product and selects the ProductName along with the calculated StockValue.",
            "The SQL query is correct. It selects product names where the unit price is greater than the average unit price calculated over all products.",
            "The original query selects ProductName, but the question asks for a count of products. Therefore, select ProductID and count the results instead of ProductName.",
            "The SQL query aims to find products available for more than three months, which is incorrect for the trend in inventory levels. Since historical inventory levels are not stored, consider capturing changes over time in another method, such as incorporating a time-series table for inventory changes.",
            "The query is correct. It calculates the total sales for each product by summing up the product of Quantity and UnitPrice from the [Order Details] table, grouped by ProductID.",
            "The original query is correct. However, in the GROUP BY clause, it's better to specify the table name for clarity. This ensures consistency with how ProductID is specified in the SELECT clause.",
            "The query needs to include the 'ProductName' for clarity as it pertains to knowing which products are top-performing by name, not just ID. Added 'JOIN' with 'products' to include product information.",
            "The SQL query is correct. It counts the number of products provided by each supplier and orders the results in descending order of product count.",
            "The query correctly calculates the average units in stock for each category by grouping by CategoryID. It aggregates the UnitsInStock with the AVG function, which is appropriate for the question being asked. No corrections are needed.",
            "The SQL query is correct. It accurately retrieves the ProductID and ProductName from the products table where the UnitsInStock is less than ReorderLevel.",
            "The SQL query is correct. It calculates the total value of current inventory by multiplying each product's unit price with its units in stock and summing the results.",
            "The SQL query correctly retrieves products ordered by highest unit price. No changes are necessary.",
            "The original query was calculating the sum of discounts as raw values. However, discounts should be calculated on the total value of each product (Discount * Quantity * UnitPrice) to reflect the actual monetary amount of discounts given. Thus, the query has been corrected.",
            "The SQL query is correct and accurately retrieves the ProductID and ProductName of discontinued products by checking where the Discontinued column is 1.",
            "The provided SQL query is correct. It correctly sums the quantity for each ProductID and orders the results in descending order to find the most ordered product, returning the top result with LIMIT 1.",
            "The query is correct. It accurately counts the products where UnitsOnOrder equals zero.",
            "The SQL query is correct and accurately calculates the average discount across all orders.",
            "The SQL query correctly calculates the total units in stock for each category and orders them by the total in descending order. No corrections are needed.",
            "The SQL query is correct. It counts the number of products where the units in stock are less than the reorder level.",
            "The query is correct. It joins the [Order Details] table with the products table on ProductID and groups the results by SupplierID to compute the total order quantity for each supplier.",
            "The original query correctly uses the 'GROUP BY' and 'HAVING' clause to find products ordered more than 1000 times. However, it only selects 'ProductID'. To provide meaningful output, the query should also retrieve the 'ProductName' by joining the '[Order Details]' table with the 'products' table.",
            "The SQL query correctly calculates the percentage of discontinued products. It uses a subquery to count all products and divides the count of discontinued products by the total, multiplying by 100 to get the percentage. The query is accurate as per the business question.",
            "The original query is missing a join to the 'orders' table to access the 'OrderDate' field. The correct query joins the 'orders' table to get the 'OrderDate' for calculating average monthly sales.",
            "The original query incorrectly uses MAX in conjunction with the GROUP BY clause, which returns the maximum discount for each order instead of finding the order with the overall highest discount. The corrected query orders the records by Discount in descending order and limits the result to the top discount.",
            "The SQL query correctly computes the total stock value by multiplying the UnitPrice by UnitsInStock for each product and summing the results. The query accurately answers the business question by considering only the 'products' table without any need for additional joins or conditions. The query is correct.",
            "The SQL query is correct and accurately identifies products with stock levels below their reorder points.",
            "The SQL query correctly returns the number of discontinued products that still have units in stock. It checks for discontinued products by filtering where 'Discontinued = 1' and ensures they have remaining stock by 'UnitsInStock > 0'.",
            "The SQL query is correct. It accurately calculates the average unit price of products for each supplier using the correct aggregation and grouping.",
            "The original query correctly sums the 'UnitsOnOrder' and groups by 'CategoryID'. The ORDER BY and LIMIT statements are correctly used to find the category with the most units on order. However, it may be beneficial to include a condition to exclude products with zero units on order, though it is not strictly necessary for correctness.",
            "The SQL query correctly calculates the total sales revenue for each product, applying the discount as specified. It uses the SUM function to aggregate the total for each product based on ProductID, including the discount applied to each order line. No corrections are needed.",
            "The SQL query is correct. It selects the ProductID and the total sales quantity, groups the results by ProductID, orders them in descending order by total quantity, and limits the output to the top 5 products.",
            "The original query does not account for the 'OrderDate' column as it's missing in the schema. Assuming this was a mistake, I referenced '[Order Details].OrderDate' accordingly and adjusted for ANSI SQL date subtraction.",
            "The query is incorrect because there is no 'OrderDate' column in the '[Order Details]' table. The 'OrderDate' column should be from the 'orders' table, which is not provided in the schema. Therefore, the query cannot be evaluated correctly unless the 'orders' table and its schema are given.",
            "The query correctly calculates the average discount given per order by using the AVG function on the Discount column in the [Order Details] table. However, the question is slightly ambiguous; if it was intended to calculate the average discount per entire order or per product in an order, additional joins and GROUP BY clauses may be necessary. As it stands, the query averages discount values across all records in [Order Details].",
            "The query should filter out discontinued products. Add a WHERE clause to exclude products where Discontinued = 1.",
            "The SQL query correctly answers the question by identifying the suppliers who provide the most different products. It groups the products by SupplierID and counts distinct ProductIDs, then orders the result by ProductCount in descending order. No corrections are needed.",
            "The original query had missing handling for 'OrderDate' to restrict the data to the last month. Also, the query needs to group by both 'ProductID' and 'ProductName'.",
            "The original query correctly calculates the percentage of stock made up by discontinued products. To ensure proper numerical division, multiply by 100.0 instead of 100.",
            "The SQL query is correct and calculates the number of products with a unit price above the average unit price using a subquery to determine the average.",
            "The original query does not handle the case where UnitsInStock might be zero, which would cause a division by zero error. The corrected query ensures UnitsInStock is greater than zero.",
            "The SQL query correctly computes the average unit price for each category and orders the results in ascending order, so the query is correct.",
            "The SQL query correctly selects products where the difference between UnitsInStock and ReorderLevel is less than 10, which matches the business question requirements. The query is correct.",
            "The SQL query is correct. It joins the 'Order Details' table with the 'products' table on ProductID and calculates the total number of units sold for each CategoryID.",
            "The query is attempting to calculate stock changes using previous month's inventory, but it assumes 'OrderDate' exists in 'products' table, which it doesn't. This requires access to inventory records over time, which isn't covered in the current schema. The stock change calculation lacks necessary historical data. This question might need modification or additional data setup (e.g., a separate inventory history table).",
            "The SQL query is correct. It retrieves the top 5 products that are in stock and not discontinued, ordered by the number of units in stock in descending order.",
            "The SQL query is correct. It selects the ProductName from the products table where the UnitsInStock is less than the ReorderLevel, accurately answering the business question about which products are below their reorder level.",
            "The SQL query is correct. It counts the number of discontinued products by checking where the 'Discontinued' column is set to 1.",
            "The SQL query correctly calculates the total value of current stock for each product category by multiplying UnitsInStock by UnitPrice and grouping by CategoryID from the products table.",
            "The original query is mostly correct, but there is no table 'orders' provided in the schema. Additionally, the use of DATE_SUB with NOW() may cause issues in some systems when calculating last month's data. It's better to use CURDATE() for consistency since there's no time component needed. If the 'orders' table exists, ensure it's accurately referenced. Otherwise, consider that the query requires valid data source and date boundaries.",
            "The original query did not directly join the 'orders' table with '[Order Details]', making the subquery approach inefficient. Corrected by directly joining with the 'orders' table and using CURRENT_DATE for better date handling in ANSI SQL.",
            "The query is correct and effectively finds products that have never been ordered by selecting ProductID from the products table that are not present in the Order Details table.",
            "The SQL query correctly calculates the average discount per product by grouping on ProductID and using the AVG function on the Discount column. The query is correct and requires no changes.",
            "The query is correct. It identifies products with stock levels below their reorder level and high sales by checking if the sum of quantities ordered exceeds 10.",
            "The original query did not include the 'orders' table, which is necessary to access the 'OrderDate' column. The corrected query joins the 'orders' table to get the 'OrderDate' before grouping and averaging 'UnitPrice'.",
            "The query correctly identifies the supplier with the most different products by counting distinct ProductIDs for each SupplierID, grouping by SupplierID, and ordering the results in descending order to limit to the top result. The query is correct.",
            "The query correctly calculates the margin between UnitPrice and ReorderLevel and orders the results in descending order, which aligns with the business question. No changes needed.",
            "The original query incorrectly calculates the percentage by using the entire set of OrderIDs twice in the denominator. The revised query with a CASE statement properly counts only those orders with discontinued products.",
            "The query syntax is incorrect as it uses a subquery with ORDER BY and LIMIT in a non-subquery context. This approach is not supported in the SQL standard. Instead, the subquery should be used in a derived table or calculated separately. The corrected query uses a CTE or derived table to find the top-selling products first, then joins with the products table. Corrected SQL Query:\n\nWITH TopProducts AS (\n  SELECT ProductID\n  FROM [Order Details]\n  GROUP BY ProductID\n  ORDER BY SUM(Quantity) DESC\n  FETCH FIRST 5 ROWS ONLY\n)\n\nSELECT p.ProductName, p.ReorderLevel\nFROM products p\nJOIN TopProducts tp ON p.ProductID = tp.ProductID;",
            "The SQL query is correct for the given question. It selects the product name and the number of units on order from the products table.",
            "The SQL query references a 'categories' table, which is not defined in the provided schema. The query should instead just operate on the 'products' table. Assuming the intention is to group by 'CategoryID' within the 'products' table, the query becomes: SELECT CategoryID, AVG(UnitsInStock * UnitPrice) AS AvgStockValue FROM products GROUP BY CategoryID ORDER BY AvgStockValue DESC LIMIT 1;",
            "The query correctly selects products where UnitsInStock is greater than ReorderLevel and filters ProductID based on those that have sold more than 100 units.",
            "The original query is missing a join condition with the products table to retrieve ProductName and doesn't account for date filtering for the past year. The revised query includes these fixes by joining with the Orders and Products tables and filtering the OrderDate for the past year.",
            "The SQL query provided correctly calculates the average sales per order for each product category by joining the 'Order Details', 'products', and 'categories' tables on their respective keys. The query calculates the average sales by multiplying quantity with unit price, grouping by CategoryID, and ordering the results in descending order to get the highest average. Finally, the LIMIT 1 clause is used to return only the product category with the highest average sales per order. The query is correct for the given question.",
            "The original query missed including ProductName in the GROUP BY clause, which is necessary when selecting non-aggregated columns. Additionally, table aliases should be consistently referenced.",
            "The query is correct. It accurately calculates the average price of all products using the AVG function on the UnitPrice column in the products table.",
            "The SQL query is correct for the business question. It accurately selects ProductName from the products table where the stock is below the reorder level.",
            "The SQL query is correct and accurately counts the number of discontinued products in the 'products' table.",
            "The SQL query is correct for calculating the total value of products currently in stock by multiplying the UnitPrice by UnitsInStock and summing up the result for all products.",
            "The original query counted OrderID without ensuring unique orders, leading to potential overcounting. DISTINCT keyword is added to COUNT to ensure each order is only counted once per category.",
            "The query correctly calculates total sales revenue and ranks products, but should group by ProductName for a clearer representation. Additionally, the use of alias for the 'Order Details' table may require brackets depending on the SQL dialect in use.",
            "The SQL query correctly calculates the average discount across all orders. No changes are needed.",
            "Added JOIN with orders table to access OrderDate, changed DATE_SUB to DATEADD for ANSI SQL compliance, and grouped by products.ProductName instead of ProductID for clearer output.",
            "The query correctly calculates the total sales revenue for each supplier by joining 'products' and '[Order Details]' tables on 'ProductID'. The use of 'SUM([Order Details].Quantity * [Order Details].UnitPrice)' to calculate the revenue is appropriate. The grouping by 'SupplierID' is also correctly implemented. Thus, the query is correct.",
            "The SQL query correctly calculates the total quantity of products on order by summing the 'UnitsOnOrder' column from the 'products' table. No corrections needed.",
            "The query is correct. It correctly identifies products with a unit price greater than the average by using a subquery to get the average unit price across all products.",
            "The SQL query has a couple of issues: 1. The 'OrderDate' column is not present in the provided schema. To calculate sales over time, a 'date' column must be available typically in the 'orders' table. 2. The SQL should involve a join with the 'orders' table to access the 'OrderDate'. Assuming 'orders' table has 'OrderID' and 'OrderDate', the corrected query would be: SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY p.CategoryID;",
            "The query does not consider the last six months as specified. To account for the last six months, additional logic is needed, possibly involving a date column in another relevant table to filter reorders within that specific timeframe. However, given the schema, no such timestamp information is immediately available in the 'products' table. The query as it stands only counts instances of stock being below the reorder level but does not limit this to a specific date range.",
            "The SQL query is correct. It calculates the difference between UnitsInStock and ReorderLevel, orders the results in descending order by the difference, and selects the ProductName and the calculated difference.",
            "Correct the GROUP BY clause to use ProductName instead of ProductID to align with the SELECT column.",
            "The initial query was mostly correct but did not correctly specify '[Order Details].Discount' in the WHERE clause. Also, the GROUP BY should reference 'products.ProductName' to match the SELECT clause.",
            "The original query is mostly correct but needs to include 'ProductName' in the GROUP BY clause to adhere to SQL standards.",
            "The SQL query is correct. It calculates the total inventory value by multiplying the UnitPrice by the UnitsInStock for each product and summing the results.",
            "The query correctly selects the ProductID and ProductName from the products table for products where the UnitsInStock are less than or equal to the ReorderLevel and the product is not discontinued. The SQL query is correct and does not need any changes.",
            "The SQL query correctly selects the ProductID and ProductName, calculates the total quantity sold for each product, groups by ProductID and ProductName, orders the results by the total quantity sold in descending order, and limits the result to the top product. The query is correct as per the given business question.",
            "The original query lists each discontinued product with its units in stock, but the question asks for the total number of units of discontinued products. Therefore, the query should sum the 'UnitsInStock' for all discontinued products.",
            "The SQL query correctly computes the average discount from the [Order Details] table by using the AVG function on the Discount column. The query accurately reflects the business question.",
            "The SQL query is correct. It calculates the number of products per supplier and orders them in descending order to find the supplier with the most products.",
            "The SQL query accurately identifies orders where there is a difference between the order's unit price and the product's unit price by comparing 'od.UnitPrice' and 'p.UnitPrice'. The column alias 'OrderUnitPrice' was added for clarity.",
            "The original query is missing a JOIN with the orders table to access OrderDate, which is necessary for grouping by month. Additionally, it should handle division by zero by using NULLIF.",
            "The query is correct and effectively answers the business question by counting products for each category where the stock is at or below the reorder level.",
            "The original query misses the discount factor in the revenue calculation and assumes OrderDate is available in [Order Details], which is incorrect. The correct table for OrderDate should be joined appropriately, and the year condition should consider the last year (YEAR(CURRENT_DATE) - 1).",
            "The query references 'OrderDate', but the schema doesn't specify an 'OrderDate' column in either of the provided tables. The query also lacks logic to filter only the past 6 months. Assuming 'OrderDate' is present in the 'orders' table, and the necessary join is made, the query should be corrected as follows:\n\nAssuming there is an 'orders' table with 'OrderDate' column which isn't provided, the corrected query would look like:\n```sql\nSELECT MONTH(o.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -6, CURRENT_DATE) GROUP BY MONTH(o.OrderDate) ORDER BY Month DESC;\n```\nNote: Ensure 'OrderDate' and the necessary join are correctly implemented as they were not defined in the provided schema.",
            "The original query is mostly correct, but it is missing the 'OrderDate' column from the '[Order Details]' table, which is necessary to filter the orders by month. I have assumed 'OrderDate' is in '[Order Details]' as it was not explicitly mentioned in the schema. Additionally, I've added a clause to ensure the query focuses on the current year. If 'OrderDate' is not present in '[Order Details]', the schema needs updating.",
            "The original query incorrectly uses MAX() on Discount and a GROUP BY. To find the product with the highest discount rate applied, simply order by Discount descending and choose the top result. This ensures the exact product with the maximum discount is selected directly.",
            "The SQL query is correct. It calculates the proportion of total sales contributed by discontinued products by dividing the sum of sales from discontinued products by the total sales.",
            "The SQL query is correct and aligns with the given business question. It accurately groups the products by SupplierID and calculates both the number of products and the average price.",
            "The query correctly calculates the highest recorded order quantity for any product by using the MAX function on the Quantity column from the [Order Details] table. The SQL query is correct and follows the business question requirements.",
            "The SQL query is correct and accurately answers the business question. It selects ProductID and ProductName from the products table where the ReorderLevel is greater than UnitsInStock.",
            "The SQL query is correct. It accurately counts the number of products for each category by grouping the results based on CategoryID and using the COUNT function on ProductID.",
            "The query correctly counts distinct orders involving discontinued products by joining the 'Order Details' table with the 'products' table and filtering on the 'Discontinued' column.",
            "The SQL query correctly calculates the total quantity sold for each category and orders the results to find the top 3 categories. However, ANSI SQL does not natively support the LIMIT clause for ordering. It's advisable to use FETCH FIRST 3 ROWS ONLY in conjunction with ORDER BY for better ANSI SQL compliance: SELECT p.CategoryID, SUM(od.Quantity) AS TotalQuantitySold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.CategoryID ORDER BY TotalQuantitySold DESC FETCH FIRST 3 ROWS ONLY.",
            "The SQL query correctly retrieves the product names where the units in stock are below the reorder level. No changes needed.",
            "The SQL query correctly calculates the total value of all inventory held by multiplying the UnitPrice by UnitsInStock for each product and summing the values. The query is correct.",
            "The SQL query is correct. It successfully identifies discontinued products that still have stock remaining by filtering where 'Discontinued' is 1 (true) and 'UnitsInStock' is greater than 0.",
            "The SQL query correctly counts the number of discontinued products for each supplier, groups by SupplierID, and orders the results in descending order. The query is correct and matches the business question.",
            "The query is missing the 'OrderDate' column in the 'Order Details' table. If 'OrderDate' is not present in the '[Order Details]' or other related tables, you need to include it. Here's a corrected query assuming 'OrderDate' is from another hypothetical 'orders' table that needs to be joined:\nSELECT MONTH(o.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY MONTH(o.OrderDate);",
            "The original query is missing a join to the 'orders' table to access 'OrderDate'. It also uses an incorrect method to get the previous month. The revised query includes the necessary join and uses 'DATE_TRUNC' and correct intervals.",
            "The query is correct as it accurately filters products with zero stock and more than zero units on order.",
            "The SQL query correctly selects the CategoryID and calculates the average UnitPrice for each category from the products table. It then orders the results by AveragePrice in descending order to find the categories with the highest average unit price. The query is correct.",
            "The original query is almost correct but is missing the OrderDate column from the [Order Details] table to accurately filter the data for the last year. The corrected query assumes that the OrderDate column exists in the [Order Details] table.",
            "The SQL query is correct. It selects products where the UnitsInStock are less than or equal to the ReorderLevel and the product is not discontinued, which is consistent with identifying products that need to be reordered immediately.",
            "The SQL query is correct. It selects the ProductID and UnitsOnOrder from the products table for products that have units on order greater than zero.",
            "The current query logic is correct for calculating the price increase as it finds the difference between the maximum and minimum price of each product. However, the GROUP BY clause should use ProductName instead of ProductID to ensure the correct grouping and output, as the query aims to display ProductName. Correct query: SELECT ProductName, MAX(UnitPrice) - MIN(UnitPrice) AS PriceIncrease FROM products GROUP BY ProductName ORDER BY PriceIncrease DESC;",
            "The SQL query correctly joins the products table with the Order Details table and computes the total sales per product. The aggregate function SUM(od.Quantity) should be used directly in the HAVING clause to filter products with total sales less than 1000, rather than using the alias 'TotalSales' in this context. The query otherwise accurately groups by ProductID and orders the result by TotalSales.",
            "The query is incorrect because the 'suppliers' table is not defined in the schema. Assuming 'suppliers' exists, the query is otherwise correct. Ensure the 'suppliers' table is present before running the query.",
            "The SQL query correctly calculates the inventory turnover ratio per product category by summing the cost of goods sold and dividing by the average inventory for each category. Ensure that the AVG function is accurately averaging non-zero and non-discontinued products to get a meaningful inventory ratio.",
            "The original query did not check for the year when calculating the quarter, which could result in incorrect data when spanning over a year change. The corrected query adds a check for the year to ensure accuracy for last quarter calculation.",
            "The original query incorrectly groups by ProductID and selects ProductName. For finding the highest discount overall, the query only needs to find the maximum discount without grouping or joining tables.",
            "The SQL query is mostly correct. However, it should group by p.ProductName instead of p.ProductID to ensure a unique product name is returned with each total sales value. Here is the corrected query: SELECT p.ProductName, SUM(od.Quantity) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalSales DESC LIMIT 10;",
            "The SQL query correctly calculates the total inventory value by product by multiplying UnitsInStock with UnitPrice for each product in the products table. No changes needed.",
            "The query does not consider the past month's sales only. You need to add a condition to filter order details within the past month. Also, without context, 'YOUR_THRESHOLD' is a placeholder and should be replaced with a specific value or condition. Here's the corrected query assuming 'Order Details' contains a date field for filtering (let's assume `OrderDate`):\n\nSELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.UnitsInStock > 0 AND od.OrderDate >= DATEADD(MONTH, -1, GETDATE()) GROUP BY p.ProductID, p.ProductName HAVING SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) < YOUR_THRESHOLD;",
            "The original query lists products below reorder level instead of counting them. The corrected query counts those products.",
            "The query structure is correct for retrieving the sales performance based on the quantity sold. Ensure 'YOUR_START_DATE' and 'YOUR_END_DATE' are replaced with actual dates, and the 'orders' table includes a column 'orderDate' to filter the results by the last month.",
            "The query correctly calculates the revenue loss due to discounts by multiplying quantity, unit price, and discount and summing up for the specified date range. Ensure to replace 'YOUR_START_DATE' and 'YOUR_END_DATE' with actual dates for last month.",
            "The SQL query is correct. It counts the number of products each supplier provides and orders by the count to find the one with the most products.",
            "The query was mostly correct but needed a correction in date handling. Replaced placeholders with CURRENT_DATE for a 6-month interval check.",
            "The SQL query correctly calculates the average unit price for products in each category by grouping the products table based on CategoryID. No corrections are needed.",
            "The original query improperly used WHERE with SUM(od.Quantity). The HAVING clause should be used instead for aggregating functions. COALESCE is used to handle cases where no orders exist for a product, thus treating NULL as 0.",
            "The query calculates the total sales value divided by the average units in stock for each product. However, it does not account for monthly granularity. To fix this, you need to ensure the calculation is done per month, using a date function to extract the month and year from the orderDate.",
            "The SQL query is correct as it selects products with a unit price higher than the average unit price of all products. It properly employs a subquery to calculate the average unit price.",
            "The query is correct. It joins the 'products' and '[Order Details]' tables, groups the results by ProductID and ProductName, sums the quantity, and orders the results in descending order of quantity, limiting to the top 5.",
            "The original query lists distinct CategoryIDs of products currently in stock but doesn't count them. The corrected query counts the distinct categories.",
            "The original query had a subquery to filter orders by date. It is more efficient to join the orders table directly in the main query to filter by date. Corrected by adding a JOIN to the orders table on OrderID and filtering with the orderDate.",
            "The SQL query is correct. It accurately selects the top 3 suppliers in terms of the number of products supplied by using a COUNT and GROUP BY clause, followed by an ORDER BY and LIMIT clause to get the top 3 results.",
            "The original query does not correctly filter the order date to the previous year. It needs to specify a start and end date for the previous year. The subquery was trying to use invalid placeholders for dates.",
            "The SQL query correctly retrieves the ProductID, ProductName, and ReorderLevel from the products table, ordering by ReorderLevel in descending order to get the top 5 products with the highest reorder levels. The use of 'LIMIT 5' is correct for limiting the results to the top 5 products. Therefore, the query is correct."
        ],
        "difficulty": [
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "advanced",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "advanced",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "easy",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced"
        ]
    },
    "cross_scenario": {
        "questions": [
            "What is the total sales revenue generated for each month in 2023?",
            "Which product has the highest sales volume in the last quarter?",
            "How many orders were placed by returning customers in 2023?",
            "What is the average order value for each customer?",
            "List the top five employees based on total sales generated.",
            "Calculate the average order fulfillment time for each month in 2023.",
            "Identify the supplier with the shortest lead time.",
            "Find the region with the highest number of orders shipped.",
            "What is the average shipping cost per order for each shipping method?",
            "Determine the customer with the highest lifetime value.",
            "What percentage of products are currently discontinued?",
            "Compute the inventory turnover ratio for each product category.",
            "Find the on-time delivery rate for each month in 2023.",
            "Calculate the total sales generated by each shipping company.",
            "Which city has the most active customers based on order count?",
            "Determine the most popular product category among customers.",
            "What is the total freight cost for orders shipped to Germany?",
            "List the employees who have not made any sales in the last six months.",
            "Find the average discount rate applied to all orders in 2023.",
            "Identify the product with the highest average discount applied.",
            "What is the total sales for each month in 2023?",
            "How many customers placed orders in 2023?",
            "What is the average order value by month for 2023?",
            "Which product generated the most revenue in 2023?",
            "Who is the top-performing employee based on sales in 2023?",
            "What is the average order fulfillment time per month?",
            "Calculate the customer lifetime value for each customer.",
            "What is the on-time delivery rate for 2023?",
            "What is the inventory turnover ratio for each product category?",
            "Which supplier has the shortest lead time?",
            "Identify the top 5 cities with the most orders.",
            "What is the shipping cost per order for each shipping company?",
            "Determine whether any products are close to their reorder level.",
            "Calculate the average discount applied to orders by month.",
            "Which employees have the best sales performance in specific territories?",
            "What is the percentage of products that are discontinued?",
            "Determine the month with the highest average customer retention rate.",
            "How many suppliers are delivering products in less than 7 days?",
            "Identify the top 3 most frequent shipping methods.",
            "Analyze the order trend for the last quarter of 2023 compared to the previous year.",
            "What is the total monthly sales revenue for the year 2023?",
            "Which customer has the highest lifetime value?",
            "How many orders were fulfilled on time in the last quarter?",
            "Which products are generating the most revenue?",
            "Which employee achieved the highest sales in March 2023?",
            "What is the average order fulfillment time for the first half of 2023?",
            "Which supplier has the best average lead time?",
            "What is the inventory turnover ratio for the most recent month?",
            "Which shipping company offers the lowest average cost per order?",
            "What is the percentage of returning customers in 2023?",
            "What are the top 3 cities based on total sales revenue in 2023?",
            "Which month in 2023 had the highest average order value?",
            "What is the on-time delivery rate for the year 2023?",
            "Which product categories have the highest sales volumes?",
            "What is the current stock level of all products?",
            "Identify customers who have not placed an order in the last year.",
            "Which employee has the most efficient order processing time?",
            "What is the total number of discontinued products?",
            "Find the average discount given per order in 2023.",
            "What is the trend of total sales over each quarter in the last two years?",
            "What is the total sales revenue for the current year?",
            "What is the average order value for each month?",
            "Which products are performing best in terms of quantity sold?",
            "What is the average time taken to fulfill orders each month?",
            "How many returning customers do we have this year compared to the last?",
            "What is the customer lifetime value for each customer?",
            "What is the total sales contributed by each employee this month?",
            "Which supplier has the shortest average lead time?",
            "Which shipping method has the highest cost per order?",
            "What is the on-time delivery rate over the past six months?",
            "Which employees have generated the most sales revenue this quarter?",
            "Which cities have the highest number of orders placed?",
            "How many orders have been shipped late over the past year?",
            "What is the distribution of orders across different months?",
            "How does the product performance vary across suppliers?",
            "What is the trend of total sales revenue over the past 12 months?",
            "Which products are close to or below their reorder level?",
            "Which regions have the highest customer retention rates?",
            "What is the correlation between employee hire date and their sales contribution?",
            "What is the total sales revenue generated in the last quarter?",
            "What are the monthly total sales for the year 2023?",
            "How much revenue is generated per employee monthly?",
            "Which products have contributed the most to total sales?",
            "What is the average shipping cost per order for each month?",
            "How many orders were fulfilled on time each month?",
            "Which employees have the highest sales performance?",
            "How does the inventory turnover ratio vary by product category?",
            "What is the average order fulfillment time by region?",
            "What are the sales trends based on product categories monthly?",
            "Which suppliers have the shortest lead time on deliveries?",
            "Which customers have made repeat orders within the past year?",
            "How does customer retention rate vary across regions?",
            "What is the monthly average order value for 2023?",
            "Analyze the sales generated from discontinued products.",
            "What are the top performing territories based on sales?",
            "What percentage of shipped orders were returned?",
            "Identify which city has the highest number of customers.",
            "How do sales figures compare between different ship methods?",
            "What are the sales contributions of different employee titles?",
            "What is the total sales revenue generated in the year 2023?",
            "Which product is the top-selling item based on quantity sold?",
            "What is the average order value for each month in 2023?",
            "List the customers who have generated the highest lifetime value.",
            "How many orders were fulfilled on time in 2023?",
            "What is the average shipping cost per order for the year 2023?",
            "Which employee has the highest total sales in a given month?",
            "Calculate the customer retention rate for the first quarter of 2023.",
            "What is the average order fulfillment time for the year 2023?",
            "Identify the supplier with the shortest average lead time in 2023.",
            "Which shippers have the highest on-time delivery rate?",
            "Determine the inventory turnover ratio for each product category.",
            "What is the trend in total sales by quarter for the year 2023?",
            "Which customers have placed orders in every month of 2023?",
            "What is the percentage of discontinued products?",
            "Identify the regions with the highest sales performance in 2023.",
            "Which month in 2023 had the highest shipping costs?",
            "What is the average discount applied to orders in 2023?",
            "How many distinct products were sold each month in 2023?",
            "What is the product with the highest revenue generated in 2023?",
            "What is the total sales revenue for each month in 2023?",
            "What is the average order value for each quarter in 2023?",
            "Identify the top 5 best-selling products in 2023.",
            "What is the average shipping cost per order in February 2023?",
            "Determine the customer retention rate for 2022.",
            "Find the average lead time by supplier for January 2023.",
            "Calculate the inventory turnover ratio for each product in 2023.",
            "Which employee generated the most sales in Q1 2023?",
            "What is the average number of days taken to fulfill an order in Q2 2023?",
            "List the top 3 regions with the highest total sales in 2023.",
            "Calculate the total revenue generated by each supplier in 2023.",
            "Find out which product categories have the highest average discount in 2023.",
            "Identify the month with the highest number of new customers acquired in 2023.",
            "What percentage of all orders were shipped using the least expensive delivery method in 2023?",
            "Which city has the most customers based on the total number of orders in 2023?",
            "Determine the age distribution of employees and their impact on sales.",
            "What is the correlation between shipping costs and order fulfillment time?",
            "How does the sales performance of discontinued products compare to that of active products?",
            "What is the total sales revenue generated this year?",
            "What is the average order value for the last quarter?",
            "Which product had the highest sales in the last month?",
            "What is the total sales generated by each employee last month?",
            "What is the average order fulfillment time this quarter?",
            "What is the customer retention rate for this year?",
            "What is the average supplier lead time for last month?",
            "What is the average shipping cost per order this year?",
            "What percentage of orders were delivered on time last month?",
            "Which city has the most orders placed in the last year?",
            "Which employee has the highest sales in their territory this year?",
            "Which supplier provided the fastest delivery on average?",
            "What are the top 5 products by units sold this month?",
            "How many distinct customers placed orders in the last year?",
            "What is the most popular shipping method by number of orders?",
            "What is the correlation between order size and discount level?",
            "Which product has the highest number of units on order?",
            "Which territory has the highest sales revenue this year?",
            "What was the total sales revenue for the year 2022?",
            "Which customer has placed the highest number of orders?"
        ],
        "sql_queries": [
            "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE EXTRACT(YEAR FROM orders.OrderDate) = 2023 GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM')",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE QUARTER(orders.OrderDate) = 4 GROUP BY products.ProductName ORDER BY total_quantity DESC LIMIT 1",
            "SELECT COUNT(DISTINCT orders.OrderID) FROM orders WHERE orders.CustomerID IN (SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 1) AND YEAR(OrderDate) = 2023;",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 5",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE YEAR(orders.OrderDate) = 2023 GROUP BY month",
            "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC LIMIT 1",
            "SELECT region.RegionDescription, COUNT(orders.OrderID) AS order_count FROM orders JOIN employeeTerritories ON orders.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID GROUP BY region.RegionDescription ORDER BY order_count DESC LIMIT 1;",
            "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY lifetime_value DESC LIMIT 1",
            "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM products) AS percentage_discontinued FROM products WHERE products.Discontinued = 1",
            "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) AS inventory_turnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName",
            "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS month, SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE EXTRACT(YEAR FROM orders.OrderDate) = 2023 GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM')",
            "SELECT shippers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
            "SELECT customers.City, COUNT(orders.OrderID) AS order_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.City ORDER BY order_count DESC LIMIT 1",
            "SELECT categories.CategoryName, COUNT([Order Details].ProductID) AS popularity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY popularity DESC LIMIT 1",
            "SELECT SUM(orders.Freight) FROM orders WHERE orders.ShipCountry = 'Germany'",
            "SELECT employees.EmployeeID FROM employees WHERE employees.EmployeeID NOT IN (SELECT DISTINCT orders.EmployeeID FROM orders WHERE orders.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH));",
            "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023",
            "SELECT products.ProductName, AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY avg_discount DESC LIMIT 1",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month",
            "SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month",
            "SELECT products.ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID ORDER BY revenue DESC LIMIT 1",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS month, AVG(DATE_PART('day', orders.ShippedDate - orders.OrderDate)) AS order_fulfillment_time FROM orders GROUP BY month",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID",
            "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE NULL END) * 1.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31';",
            "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName",
            "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID ORDER BY lead_time ASC LIMIT 1",
            "SELECT ShipCity, COUNT(OrderID) AS order_count FROM orders GROUP BY ShipCity ORDER BY order_count DESC LIMIT 5",
            "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
            "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS month, AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY DATE_TRUNC('month', orders.OrderDate)",
            "SELECT employees.EmployeeID, territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY employees.EmployeeID, territories.TerritoryDescription",
            "SELECT COUNT(ProductID) WHERE Discontinued = 1 / COUNT(ProductID) AS percent_discontinued FROM products",
            "SELECT DATE_TRUNC('month', OrderDate) AS month, (COUNT(DISTINCT CASE WHEN OrderDate BETWEEN '2023-01-01' AND '2023-12-31' THEN CustomerID END) * 1.0 / NULLIF(COUNT(DISTINCT CASE WHEN OrderDate < '2023-01-01' THEN CustomerID END), 0)) AS customer_retention_rate FROM orders GROUP BY month ORDER BY customer_retention_rate DESC LIMIT 1;",
            "SELECT COUNT(DISTINCT SupplierID) FROM (SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID HAVING lead_time < 7) AS supplier_lead_times",
            "SELECT ShipVia, COUNT(ShipVia) AS method_count FROM orders GROUP BY ShipVia ORDER BY method_count DESC LIMIT 3",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS month, COUNT(orders.OrderID) AS order_count, '2023' AS year FROM orders WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-12-31' GROUP BY DATE_TRUNC('month', orders.OrderDate) UNION ALL SELECT DATE_TRUNC('month', orders.OrderDate) AS month, COUNT(orders.OrderID) AS order_count, '2022' AS year FROM orders WHERE orders.OrderDate BETWEEN '2022-10-01' AND '2022-12-31' GROUP BY DATE_TRUNC('month', orders.OrderDate)",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(OrderDate) = 2023 GROUP BY month",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY lifetime_value DESC LIMIT 1",
            "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate <= RequiredDate AND OrderDate BETWEEN '2023-07-01' AND '2023-09-30'",
            "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID ORDER BY revenue DESC",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE EXTRACT(MONTH FROM orders.OrderDate) = 3 AND EXTRACT(YEAR FROM orders.OrderDate) = 2023 GROUP BY employees.EmployeeID ORDER BY sales DESC LIMIT 1",
            "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'",
            "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY lead_time ASC LIMIT 1",
            "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE()) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE())",
            "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName ORDER BY avg_cost ASC LIMIT 1",
            "SELECT (COUNT(DISTINCT new_orders.CustomerID) * 100.0 / NULLIF(COUNT(DISTINCT old_orders.CustomerID), 0)) AS retention_rate FROM orders new_orders JOIN orders old_orders ON new_orders.CustomerID = old_orders.CustomerID WHERE new_orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND old_orders.OrderDate < '2023-01-01'",
            "SELECT customers.City, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY customers.City ORDER BY total_sales DESC LIMIT 3;",
            "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE EXTRACT(YEAR FROM orders.OrderDate) = 2023 GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM') ORDER BY avg_order_value DESC LIMIT 1",
            "SELECT COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS on_time_delivery_rate FROM orders WHERE YEAR(OrderDate) = 2023;",
            "SELECT categories.CategoryName, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID ORDER BY sales_volume DESC",
            "SELECT products.ProductName, products.UnitsInStock FROM products ORDER BY products.ProductID",
            "SELECT customers.CustomerID FROM customers LEFT JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderID IS NULL OR orders.OrderDate < CURRENT_DATE - INTERVAL '1 YEAR'",
            "SELECT employees.EmployeeID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS processing_time FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID ORDER BY processing_time ASC LIMIT 1",
            "SELECT COUNT(*) AS total_discontinued_products FROM products WHERE Discontinued = 1",
            "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023",
            "SELECT CONCAT(YEAR(orders.OrderDate), '-Q', QUARTER(orders.OrderDate)) as quarter, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN DATE_SUB(NOW(), INTERVAL 2 YEAR) AND NOW() GROUP BY YEAR(orders.OrderDate), QUARTER(orders.OrderDate) ORDER BY YEAR(orders.OrderDate), QUARTER(orders.OrderDate)",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE);",
            "SELECT MONTH(orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY MONTH(orders.OrderDate);",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS quantity_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY quantity_sold DESC;",
            "SELECT MONTH(orders.ShippedDate) AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY MONTH(orders.ShippedDate);",
            "SELECT (SELECT COUNT(DISTINCT o1.CustomerID) FROM orders o1 WHERE o1.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND o1.CustomerID IN (SELECT o2.CustomerID FROM orders o2 WHERE o2.OrderDate < '2023-01-01')) AS returning_customers;",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID;",
            "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC LIMIT 1;",
            "SELECT orders.ShipVia, AVG(orders.Freight) AS avg_shipping_cost FROM orders GROUP BY orders.ShipVia ORDER BY avg_shipping_cost DESC;",
            "SELECT MONTH(orders.ShippedDate) AS month, SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.ShippedDate >= DATEADD(MONTH, -6, CURRENT_DATE) GROUP BY MONTH(orders.ShippedDate);",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN DATE_TRUNC('quarter', CURRENT_DATE) AND CURRENT_DATE GROUP BY employees.EmployeeID ORDER BY total_sales DESC;",
            "SELECT customers.City, COUNT(orders.OrderID) AS number_of_orders FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.City ORDER BY number_of_orders DESC;",
            "SELECT COUNT(orders.OrderID) AS late_orders FROM orders WHERE orders.ShippedDate > orders.RequiredDate AND orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE();",
            "SELECT MONTH(orders.OrderDate) AS month, COUNT(orders.OrderID) AS number_of_orders FROM orders GROUP BY MONTH(orders.OrderDate);",
            "SELECT suppliers.CompanyName, products.ProductName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName, products.ProductName ORDER BY total_quantity DESC;",
            "SELECT MONTH(orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY MONTH(orders.OrderDate) ORDER BY month;",
            "SELECT products.ProductName, products.UnitsInStock, products.ReorderLevel FROM products WHERE products.UnitsInStock <= products.ReorderLevel ORDER BY products.UnitsInStock ASC;",
            "SELECT region.RegionDescription, (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' THEN orders.CustomerID END) / NULLIF(COUNT(DISTINCT CASE WHEN orders.OrderDate < '2023-01-01' THEN orders.CustomerID END), 0)) AS retention_rate FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID JOIN region ON customers.Region = region.RegionID GROUP BY region.RegionDescription;",
            "SELECT employees.EmployeeID, employees.HireDate, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID, employees.HireDate ORDER BY employees.HireDate;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-12-31'",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT DATE_FORMAT(orders.OrderDate, '%Y-%m')) AS revenue_per_employee FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID",
            "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS product_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY product_sales DESC",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month",
            "SELECT DATE_FORMAT(orders.ShippedDate, '%Y-%m') AS month, COUNT(orders.OrderID) AS on_time_orders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY month",
            "SELECT employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.FirstName, employees.LastName ORDER BY total_sales DESC",
            "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName",
            "SELECT regions.RegionDescription, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders JOIN employeeTerritories ON orders.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region regions ON territories.RegionID = regions.RegionID GROUP BY regions.RegionDescription",
            "SELECT categories.CategoryName, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName, month ORDER BY month",
            "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY lead_time",
            "SELECT customers.CustomerID, COUNT(orders.OrderID) AS repeat_orders FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY customers.CustomerID HAVING repeat_orders > 1",
            "SELECT regions.RegionDescription, (COUNT(DISTINCT orders.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-01-01')) * 100 AS retention_rate FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID JOIN employeeTerritories ON orders.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region regions ON territories.RegionID = regions.RegionID GROUP BY regions.RegionID",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month",
            "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS discontinued_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1 GROUP BY products.ProductName",
            "SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS territory_sales FROM orders JOIN employeeTerritories ON orders.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY territories.TerritoryID ORDER BY territory_sales DESC",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, (COUNT(CASE WHEN orders.RequiredDate < orders.ShippedDate THEN orders.OrderID ELSE NULL END) / COUNT(orders.OrderID)) * 100 AS return_rate FROM orders GROUP BY month",
            "SELECT customers.City, COUNT(customers.CustomerID) AS num_customers FROM customers GROUP BY customers.City ORDER BY num_customers DESC LIMIT 1",
            "SELECT orders.ShipVia, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipVia ORDER BY sales DESC",
            "SELECT employees.Title, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS title_sales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Title ORDER BY title_sales DESC",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales_2023 FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY total_quantity DESC LIMIT 1",
            "SELECT MONTH(orders.OrderDate) AS order_month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY MONTH(orders.OrderDate)",
            "SELECT customers.CustomerID, customers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID, customers.CompanyName ORDER BY total_lifetime_value DESC LIMIT 10",
            "SELECT COUNT(OrderID) AS on_time_orders FROM orders WHERE ShippedDate <= RequiredDate AND YEAR(OrderDate) = 2023",
            "SELECT AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE YEAR(orders.OrderDate) = 2023",
            "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS employee_name, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE EXTRACT(MONTH FROM orders.OrderDate) = @month AND EXTRACT(YEAR FROM orders.OrderDate) = @year GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName ORDER BY total_sales DESC LIMIT 1",
            "SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31') / NULLIF((SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-01-01'), 0) AS customer_retention_rate",
            "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE YEAR(orders.OrderDate) = 2023",
            "SELECT products.SupplierID, suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY products.SupplierID, suppliers.CompanyName ORDER BY avg_lead_time ASC LIMIT 1",
            "SELECT shippers.CompanyName, COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / CAST(COUNT(orders.OrderID) AS FLOAT) AS on_time_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName ORDER BY on_time_rate DESC",
            "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName",
            "SELECT QUARTER(orders.OrderDate) AS order_quarter, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY QUARTER(orders.OrderDate)",
            "SELECT customers.CustomerID, customers.CompanyName FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY customers.CustomerID HAVING COUNT(DISTINCT MONTH(orders.OrderDate)) = 12",
            "SELECT (COUNT(ProductID) * 100.0 / (SELECT COUNT(ProductID) FROM products)) AS discontinued_percentage FROM products WHERE Discontinued = 1",
            "SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN region ON customers.Region = region.RegionID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY region.RegionDescription ORDER BY total_sales DESC",
            "SELECT MONTH(orders.OrderDate) AS order_month, SUM(orders.Freight) AS total_shipping_cost FROM orders WHERE YEAR(orders.OrderDate) = 2023 GROUP BY MONTH(orders.OrderDate) ORDER BY total_shipping_cost DESC LIMIT 1",
            "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023",
            "SELECT MONTH(orders.OrderDate), COUNT(DISTINCT [Order Details].ProductID) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY MONTH(orders.OrderDate)",
            "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY products.ProductID, products.ProductName ORDER BY total_revenue DESC LIMIT 1",
            "SELECT MONTH(orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY MONTH(orders.OrderDate)",
            "SELECT QUARTER(orders.OrderDate) AS quarter, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY QUARTER(orders.OrderDate)",
            "SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY products.ProductID ORDER BY total_quantity DESC LIMIT 5",
            "SELECT AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE MONTH(orders.OrderDate) = 2 AND YEAR(orders.OrderDate) = 2023",
            "(SELECT COUNT(DISTINCT o1.CustomerID) FROM orders o1 WHERE o1.OrderDate BETWEEN '2022-01-01' AND '2022-12-31') / (SELECT COUNT(DISTINCT o2.CustomerID) FROM orders o2 WHERE o2.OrderDate < '2022-01-01') AS customer_retention_rate",
            "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE MONTH(orders.OrderDate) = 1 AND YEAR(orders.OrderDate) = 2023 GROUP BY products.SupplierID",
            "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY products.ProductID",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE QUARTER(orders.OrderDate) = 1 AND YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1",
            "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE EXTRACT(QUARTER FROM orders.OrderDate) = 2 AND EXTRACT(YEAR FROM orders.OrderDate) = 2023",
            "SELECT regions.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region regions ON territories.RegionID = regions.RegionID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY regions.RegionDescription ORDER BY total_sales DESC LIMIT 3",
            "SELECT suppliers.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY suppliers.SupplierID",
            "SELECT c.CategoryID, AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN products p ON [Order Details].ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID JOIN orders o ON [Order Details].OrderID = o.OrderID WHERE YEAR(o.OrderDate) = 2023 GROUP BY c.CategoryID ORDER BY avg_discount DESC",
            "SELECT MONTH(o.OrderDate) AS month, COUNT(DISTINCT o.CustomerID) AS new_customers FROM orders o LEFT JOIN (SELECT CustomerID FROM orders WHERE OrderDate < '2023-01-01') historical ON o.CustomerID = historical.CustomerID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND historical.CustomerID IS NULL GROUP BY MONTH(o.OrderDate) ORDER BY new_customers DESC LIMIT 1;",
            "SELECT COUNT(*) * 100.0 / total_orders AS percentage_least_expensive FROM (SELECT COUNT(orders.OrderID) AS count_orders FROM orders WHERE ShipVia = (SELECT ShipVia FROM orders WHERE OrderDate LIKE '2023-%' ORDER BY Freight LIMIT 1) AND YEAR(OrderDate) = 2023) AS least_expensive, (SELECT COUNT(OrderID) AS total_orders FROM orders WHERE YEAR(OrderDate) = 2023) AS total_orders;",
            "SELECT customers.City, COUNT(DISTINCT customers.CustomerID) AS total_customers FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY customers.City ORDER BY total_customers DESC",
            "SELECT e.EmployeeID, e.BirthDate, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] ON [Order Details].OrderID = o.OrderID GROUP BY e.EmployeeID, e.BirthDate",
            "SELECT o1.Freight, DATEDIFF(o1.ShippedDate, o1.OrderDate) AS days_to_fulfill FROM orders o1 WHERE YEAR(o1.OrderDate) = 2023",
            "SELECT p.ProductName, SUM([Order Details].Quantity) AS total_quantity, p.Discontinued FROM [Order Details] JOIN products p ON [Order Details].ProductID = p.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY p.ProductName, p.Discontinued ORDER BY total_quantity DESC",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE);",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE QUARTER(orders.OrderDate) = QUARTER(CURRENT_DATE - INTERVAL 1 QUARTER) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 QUARTER);",
            "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) - 1 AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY products.ProductID ORDER BY total_sales DESC LIMIT 1;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) - 1 AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID;",
            "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE QUARTER(orders.OrderDate) = QUARTER(CURRENT_DATE) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE);",
            "(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE)) / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR));",
            "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY products.SupplierID;",
            "SELECT AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE);",
            "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) - 1 AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE);",
            "SELECT ShipCity, COUNT(OrderID) AS order_count FROM orders WHERE OrderDate BETWEEN DATE_FORMAT(CURRENT_DATE - INTERVAL 1 YEAR, '%Y-01-01') AND DATE_FORMAT(CURRENT_DATE, '%Y-12-31') GROUP BY ShipCity ORDER BY order_count DESC LIMIT 1;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS territory_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID ORDER BY territory_sales DESC LIMIT 1;",
            "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_delivery_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY avg_delivery_time ASC LIMIT 1;",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS units_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY products.ProductName ORDER BY units_sold DESC LIMIT 5;",
            "SELECT COUNT(DISTINCT CustomerID) AS distinct_customers FROM orders WHERE OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE();",
            "SELECT ShipVia, COUNT(OrderID) AS order_count FROM orders GROUP BY ShipVia ORDER BY order_count DESC LIMIT 1;",
            "SELECT Discount, AVG([Order Details].Quantity) AS avg_quantity FROM [Order Details] GROUP BY Discount;",
            "SELECT ProductName FROM products WHERE UnitsOnOrder = (SELECT MAX(UnitsOnOrder) FROM products);",
            "SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS territory_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employeeTerritories ON orders.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY territories.TerritoryDescription ORDER BY territory_sales DESC LIMIT 1;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'",
            "SELECT customers.CustomerID, COUNT(orders.OrderID) AS num_orders FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID ORDER BY num_orders DESC LIMIT 1"
        ],
        "reviews": [
            "The original query uses DATE_FORMAT and YEAR functions, which are not available in standard ANSI SQL. Instead, TO_CHAR and EXTRACT functions should be used. GROUP BY should match the format used in SELECT, which is achieved by using TO_CHAR to format the date.",
            "The original query was missing a join with the 'orders' table to filter by 'OrderDate'. This has been corrected by including the appropriate join.",
            "The query logic is correct. It counts orders from customers who have placed more than one order and restricts it to the year 2023. Ensure that the subquery checking for returning customers uses the correct column CustomerID without table prefix if only accessing a single table.",
            "The SQL query is incorrect for calculating the average order value for each customer. To compute this, divide the sales for each customer by the number of their orders, not the distinct orders overall. Use COUNT(DISTINCT orders.OrderID) within the customer group. Correct query: SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID",
            "The SQL query is correct. It calculates total sales by employee and returns the top 5 employees based on sales.",
            "The SQL query is mostly correct and uses DATE_FORMAT to extract the year and month for grouping. However, DATE_FORMAT is not part of ANSI SQL standard. Instead, the standard SQL would use EXTRACT function and concatenation to achieve the same result. The query can be modified to use EXTRACT for better adherence to the ANSI SQL standard.",
            "The original query incorrectly joined orders on the ProductID, which is not an appropriate join. The correct join should be between orders and [Order Details] using OrderID. The rest of the query is correct.",
            "The original query incorrectly joins the 'orders' and 'territories' tables via 'ShipVia' and 'RegionID'. It should involve 'employeeTerritories' to link employees with territories and then 'territories' to 'region' using 'RegionID'.",
            "The query correctly calculates the average shipping cost per order for each shipping method by joining the orders table with the shippers table on the ShipVia column. It groups the results by the CompanyName from the shippers table. The query is correct and follows the business requirement as stated.",
            "The SQL query is correct. It calculates the total revenue from each customer over time, groups the results by customer ID, orders by the computed lifetime value in descending order, and limits the result to the top customer. This accurately identifies the customer with the highest lifetime value.",
            "The SQL query is correct. It calculates the percentage of products that are discontinued by dividing the count of discontinued products by the total number of products and multiplying by 100. The use of the subquery to get the total count of products is appropriate.",
            "The original query was correct in terms of logic, but adding NULLIF ensures that the division handles cases where the average UnitsInStock might be zero, preventing division by zero errors.",
            "The original query used an incorrect COUNT syntax. The correct approach is to use a CASE statement to count on-time deliveries. Additionally, the SQL function TO_CHAR is used for extracting the month in the format 'YYYY-MM'.",
            "The query is correct as it joins the required tables and calculates total sales for each shipping company.",
            "The query is mostly correct. It successfully counts the number of orders per city and orders the results to find the city with the highest order count. The LIMIT 1 clause correctly restricts the output to only the city with the most orders. No changes are necessary.",
            "The query correctly joins the [Order Details], products, and categories tables to determine the most popular product category based on the count of products ordered. The aggregation, grouping by category, and sorting are performed correctly, and the limit ensures only the top result is returned. No corrections are needed.",
            "The SQL query correctly calculates the total freight cost for orders shipped to Germany. The syntax and logic are accurate.",
            "The query correctly lists employees who have not made sales in the last six months by checking for EmployeeIDs that are not present in recent orders. The use of CURRENT_DATE is more ANSI SQL compliant than CURDATE().",
            "The SQL query correctly computes the average discount for orders in 2023 by joining the appropriate tables and applying a date filter, using the correct column for discount.",
            "The SQL query correctly identifies the product with the highest average discount. It joins the [Order Details] and products tables, calculates the average discount for each product, and orders the results in descending order based on average discount, limiting to the top result.",
            "The query is mostly correct. However, the `DATE_TRUNC` function is not part of ANSI SQL and may not be supported depending on the SQL implementation. An alternative for standard SQL could be `EXTRACT(YEAR FROM orders.OrderDate) AS year, EXTRACT(MONTH FROM orders.OrderDate) AS month` and then GROUP BY year, month. Ensure that your SQL implementation supports DATE_TRUNC or use an equivalent function.",
            "The SQL query correctly selects and counts distinct CustomerID values from the 'orders' table for orders placed between '2023-01-01' and '2023-12-31'. The query is correct and answers the business question accurately.",
            "The query correctly calculates the average order value by month for 2023. It uses DATE_TRUNC to group OrderDate by month and calculates the average order value using the correct formula. The query is correct.",
            "The SQL query is correct. It calculates the revenue for each product in 2023, groups the results by ProductID, orders them by revenue in descending order, and limits the result to the top product.",
            "The SQL query is correct. It accurately calculates the total sales for each employee in 2023 and returns the employee with the highest sales by ordering in descending order and using LIMIT 1.",
            "The original query used DATEDIFF, which is not standard in ANSI SQL. I replaced it with DATE_PART to calculate the difference in days between ShippedDate and OrderDate.",
            "The SQL query is correct and accurately calculates the customer lifetime value by summing the total sales for each customer over time based on the given schema and business metrics definitions.",
            "The original query is missing the proper syntax for conditional counting and the WHERE clause for the desired year. The corrected query uses a CASE statement for conditional counting and includes the WHERE clause to filter the year's orders.",
            "The query correctly computes the inventory turnover ratio for each product category by joining [Order Details] to products and categories, then grouping by category. The formula aligns with the business metric definition. The query looks correct.",
            "The original query mistakenly joins orders and products directly on OrderID and ProductID, which is incorrect. The join should be through the [Order Details] table. The corrected query uses the [Order Details] table to join orders and products.",
            "The SQL query is correct. It selects ShipCity and counts the OrderID for each city, grouping by ShipCity, ordering the results by order count in descending order, and limiting the results to the top 5 cities.",
            "The SQL query accurately calculates the average shipping cost per order for each shipping company. It correctly joins the 'orders' and 'shippers' tables on the 'ShipVia' and 'ShipperID' fields, and it groups the results by 'CompanyName'. This query is correct.",
            "The query correctly identifies products whose units in stock are less than or equal to their reorder level. No changes are necessary.",
            "The SQL query correctly calculates the average discount by truncating the order date to the month and grouping by it. However, it's best practice to use 'GROUP BY DATE_TRUNC('month', orders.OrderDate)' instead to ensure consistency.",
            "The SQL query accurately calculates the sales performance for employees within specific territories. It properly joins the necessary tables - [Order Details], orders, employees, employeeTerritories, and territories - and aggregates sales grouped by EmployeeID and TerritoryDescription, which is appropriate for answering the business question.",
            "The query contains several issues. First, the SQL syntax to calculate the percentage is incorrect. It misses a division logic and correct placement of the WHERE clause. The corrected query should separate counting of discontinued and total products, then divide them properly.\n\nCorrect SQL Query:\nSELECT (COUNT(CASE WHEN Discontinued = 1 THEN ProductID END) * 100.0 / COUNT(ProductID)) AS percent_discontinued \nFROM products;",
            "The original query was incorrect as it used subqueries incorrectly to calculate the customer retention rate for each month. The calculation for customer retention needs to be based on 'start_date' and 'end_date' values. Replace them with actual slices of time for retention calculation within the formula. I've assumed a full year for illustration, and used CASE within COUNT to conditionally count customer IDs per month.",
            "The original query incorrectly joins orders to products using OrderID and ProductID, which is not possible. The correct join involves [Order Details] between orders and products. Additionally, the subquery should be given an alias.",
            "The query is correct. It counts the occurrences of each shipping method (ShipVia) in the orders table, groups them, orders by the count in descending order, and limits the result to the top 3 methods.",
            "The original query is mostly correct but should use 'UNION ALL' instead of 'UNION' to maintain clarity of results with duplicate months across years. Adding a 'year' column in the selection helps distinguish which year's data each row belongs to.",
            "The query is mostly correct. The only issue is the non-standard use of the DATE_FORMAT function, which is not part of ANSI SQL. It should be replaced with appropriate ANSI SQL syntax or functions for extracting year and month. Here's a revised version using ANSI SQL: SELECT EXTRACT(YEAR FROM OrderDate) AS year, EXTRACT(MONTH FROM OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(OrderDate) = 2023 GROUP BY year, month.",
            "The SQL query correctly finds the customer with the highest lifetime value by calculating the SUM of the order values and ordering by the highest total in descending order. The use of GROUP BY, ORDER BY, and LIMIT 1 is appropriate to achieve the desired result.",
            "The SQL query correctly counts the number of orders fulfilled on time by checking that the shipped date is on or before the required date and that the order date falls within the last quarter date range (July 1, 2023, to September 30, 2023). Therefore, the query is correct and does not need any changes.",
            "The SQL query is almost correct, but the GROUP BY clause should include 'products.ProductName' to match the SELECT clause, ensuring that each distinct product name is considered. Here is the corrected query: SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID, products.ProductName ORDER BY revenue DESC.",
            "Corrected the date functions to use ANSI SQL standard with EXTRACT for month and year.",
            "The SQL query seems correct. It calculates the average order fulfillment time for orders placed between January 1, 2023, and June 30, 2023. The use of DATEDIFF to calculate the difference between the ShippedDate and OrderDate is appropriate.",
            "The SQL query has an incorrect join condition between 'orders' and 'products'. It should join 'orders' with '[Order Details]' using 'OrderID', and then 'products' with '[Order Details]' using 'ProductID', as orders table does not have ProductID directly.",
            "The original query was missing a JOIN to the orders table, which is necessary to access the OrderDate for filtering by the most recent month. Additionally, it should filter by both the month and the year to ensure the correct period is evaluated.",
            "The original query is mostly correct but there's a minor mistake in the GROUP BY clause. It should reference the 'CompanyName' instead of 'ShipperID'. The corrected query will properly group by the shipping company's name, providing an accurate result.",
            "The original query doesn't ensure 'returning' customers, as it only counts distinct customers in 2023. The corrected query checks for customers present both before and within the year. Added NULLIF to prevent division by zero.",
            "The SQL query is correct. It joins the necessary tables, calculates total sales per city for 2023, and orders them in descending order, limiting the results to the top 3 cities.",
            "The original query uses DATE_FORMAT, which is not ANSI SQL standard. Replaced DATE_FORMAT with TO_CHAR and EXTRACT. Adjusted column references to ANSI SQL format.",
            "The original query had a syntax error with COUNT(OrderID WHERE ...). Corrected it by using COUNT with a CASE WHEN statement to filter the on-time orders.",
            "The query is mostly correct, but you should group by categories.CategoryName instead of categories.CategoryID to match the SELECT clause. The query should be: SELECT categories.CategoryName, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY sales_volume DESC",
            "The SQL query correctly retrieves the current stock level of all products by selecting the 'ProductName' and 'UnitsInStock' columns from the 'products' table and ordering the results by 'ProductID'. The query is accurate and aligns with the business question.",
            "The query aims to identify customers who have not placed an order in the last year. However, customers with an order older than a year will still join and possibly be included due to the 'IS NULL OR' logic. Instead, using an anti-join pattern would be more appropriate. Here's the corrected query: SELECT customers.CustomerID FROM customers WHERE customers.CustomerID NOT IN (SELECT orders.CustomerID FROM orders WHERE orders.OrderDate >= CURRENT_DATE - INTERVAL '1 YEAR'). Also, I replaced NOW() with CURRENT_DATE for ANSI SQL compliance and corrected the interval syntax to 'INTERVAL '1 YEAR'' for ANSI SQL.",
            "The query is mostly correct, but 'DATEDIFF' needs to specify which version or function is used if not ANSI SQL standard. Ensure 'LIMIT' is supported in your SQL dialect. Everything else seems correct.",
            "The SQL query is correct. It counts the number of discontinued products, which are indicated by Discontinued = 1.",
            "The query correctly calculates the average discount given per order in 2023 by joining the [Order Details] table with the orders table and filtering by the year 2023 in the orders.OrderDate. The function YEAR() is used properly to extract the year. The query is correct as per the given requirement.",
            "Used CONCAT and QUARTER function for correct quarter formatting. Adjusted the WHERE clause to use DATE_SUB for last two years. GROUP BY adjusted for YEAR and QUARTER separately. Corrected to order by YEAR and QUARTER for proper sequence.",
            "The SQL query correctly calculates the total sales for the current year using the formula provided in the business metrics definitions. The use of CURRENT_DATE and YEAR function to filter orders for the current year is accurate. The query is correct.",
            "The query is almost correct, but it may not accurately capture orders spanning multiple months if only a monthly view of orders is desired. Ensure the query captures all data within a certain year if needed, such as by adding a date range filter like 'WHERE YEAR(orders.OrderDate) = 2023'.",
            "The query is mostly correct, but the GROUP BY clause should use ProductName instead of ProductID to reflect the output of the SELECT clause. This ensures the results are grouped by product name as intended.",
            "The query correctly calculates the average fulfillment time grouped by the month of the ShippedDate. No changes are needed.",
            "The initial query was incorrect as it had incorrect placement of the WHERE clause. The correct query uses subqueries to find distinct customers this year who also had orders before this year.",
            "The SQL query is correct. It calculates the customer lifetime value by summing the revenue from all orders for each customer, correctly joining the necessary tables.",
            "The query correctly calculates the total sales by each employee for the current month. However, it should also consider the current year to avoid mixing months from different years. The addition of 'AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE)' addresses this.",
            "The original query incorrectly joined 'orders' to 'products' using 'OrderID'. It should join 'orders' with '[Order Details]', and then '[Order Details]' with 'products'. Also, to find the supplier with the shortest lead time, the query should include 'LIMIT 1'.",
            "The query is correct. It calculates the average shipping cost per method (ShipVia) and orders the results in descending order to find the highest cost.",
            "The original query has syntax errors, specifically in the COUNT function. The use of a CASE statement is necessary to count orders that were shipped on time. Additionally, I added a WHERE clause to filter for the past six months.",
            "The query should use DATE_TRUNC to get the start of the current quarter, instead of DATE_SUB with 3 months.",
            "The SQL query correctly retrieves the cities and counts the number of orders placed per city, joining the orders and customers tables on CustomerID. It groups by city and orders the result in descending order based on the number of orders. The query accurately answers the business question without any errors.",
            "The original query correctly identifies late shipments but does not count the orders. Additionally, it filters by the current year instead of the past year. Adjusted the query to count the late orders within the last year from the current date.",
            "The SQL query is correct for determining the distribution of orders across different months. It selects the month from the OrderDate and counts the number of orders, grouping by month.",
            "The original query groups by 'products.ProductID' and 'suppliers.SupplierID', which may not accurately give results based on supplier names. Correcting it by grouping by 'suppliers.CompanyName' and 'products.ProductName' provides a clearer analysis of product performance across suppliers.",
            "The original query does not filter the data to only include the past 12 months. The corrected query includes a WHERE clause to filter orders within the last year from the current date.",
            "The SQL query correctly retrieves products that are close to or below their reorder level by checking if UnitsInStock is less than or equal to ReorderLevel. It orders the results by UnitsInStock in ascending order, which is appropriate for understanding which products need attention. No issues were found with the query.",
            "The original query has a few issues: 1) Incorrect usage of COUNT with WHERE inside it. Use CASE WHEN for conditional counting inside aggregation functions like COUNT. 2) The use of GROUP BY should match the SELECT clause, using region.RegionDescription instead of regions.RegionID. 3) Ensure division by zero is avoided using NULLIF in the denominator.",
            "The original query did not include employees.HireDate in the GROUP BY clause, which is required. The corrected query adds employees.HireDate to the GROUP BY clause.",
            "The query is correct for calculating the total sales revenue in the last quarter. It correctly joins the [Order Details] and orders tables, and sums the product of UnitPrice, Quantity, and the complement of Discount, filtered by the specified date range for the last quarter.",
            "The SQL query is mostly correct, but 'GROUP BY month' should be 'GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')' to ensure it groups by the same expression as in the SELECT clause.",
            "The query calculates the total sales per employee correctly by summing up the adjusted price for each order detail. However, dividing by COUNT(DISTINCT DATE_FORMAT(orders.OrderDate, '%Y-%m')) does not correctly compute monthly revenue because it mixes total sales with distinct months. Instead, use a division by total distinct months only per employee if needed or adjust the calculation logic. Here's an alternative approach for monthly aggregation:\n\nSELECT employees.EmployeeID, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS revenue_per_employee_monthly FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID, DATE_FORMAT(orders.OrderDate, '%Y-%m')",
            "The SQL query is correct. It calculates the total sales contribution per product and orders them in descending order of sales.",
            "The SQL query correctly calculates the average shipping cost per order for each month. It uses DATE_FORMAT to extract the month from the OrderDate and groups by this month. The AVG function is used to compute the average freight cost.",
            "The query is correct and calculates the number of on-time delivered orders by month. The use of DATE_FORMAT to extract the month is appropriate for grouping, and the condition to check on-time delivery (ShippedDate <= RequiredDate) is correctly implemented.",
            "The original query is mostly correct but should group by both employees.FirstName and employees.LastName to ensure proper grouping and retrieval of names.",
            "The query is mostly correct, but the GROUP BY clause should use 'categories.CategoryName' to match the SELECT clause. The corrected query groups by 'CategoryName' instead of 'CategoryID' to be consistent with the SELECT clause.",
            "The original query incorrectly used the LIKE operator on addresses to join with territories. Instead, we should use the employeeTerritories table to join employees with their respective territories.",
            "Corrected group by clause to use 'categories.CategoryName' instead of 'categories.CategoryID' to match the select statement.",
            "The original query incorrectly joins 'orders' to 'products' using OrderID and ProductID. It should join 'orders' to '[Order Details]' using OrderID, then join to 'products' using ProductID. The corrected query follows the appropriate join paths to calculate the lead time accurately.",
            "The SQL query correctly identifies customers who made repeat orders within the past year. It calculates the count of orders per customer and filters out those with more than one order.",
            "The initial query was incorrect. The calculation for retention rate should be based on customers who have placed orders in the time frame compared to those before it. Ensure that joins align with the correct tables, territories from orders need to be correctly derived, possibly through employees. The corrected query uses a sample date range and correct joins.",
            "The SQL query is almost correct, but there's an error in calculating the average order value per month. The division should be applied to orders within each month, requiring partitioning by month. To fix this, we can revise the query using a subquery or a window function. Here's one way to write it:\n\nCorrected SQL query:\n```sql\nSELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, \n  SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value\nFROM [Order Details] \nJOIN orders ON [Order Details].OrderID = orders.OrderID \nWHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' \nGROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m');\n```",
            "The SQL query correctly calculates the sales generated from discontinued products by using a join between the 'Order Details' and 'products' tables. The WHERE clause filters for products that are discontinued, and the results are grouped by product name. The query is correct.",
            "The query is mostly correct. However, to ensure the grouping is based on TerritoryDescription for clarity in the results, the GROUP BY clause should include territories.TerritoryDescription instead of territories.TerritoryID. Correct the GROUP BY clause as follows: GROUP BY territories.TerritoryDescription.",
            "The original query has a mistake in the COUNT condition. The WHERE clause should be replaced with a CASE statement to properly filter the returned orders. Additionally, the comparison sign should be '<' to find returned orders.",
            "The SQL query is correct for identifying the city with the highest number of customers. It groups the customers by city, counts the customers in each city, orders the results in descending order by the count, and limits the result to the top entry.",
            "The query correctly computes the total sales for each shipping method and orders the results in descending order of sales. No corrections are necessary.",
            "The SQL query is correct. It correctly calculates the sales contributions by employee titles by joining the employees, orders, and [Order Details] tables. The GROUP BY and ORDER BY clauses are used appropriately to group the sales by titles and sort them by contribution.",
            "The SQL query is almost correct, but the WHERE clause uses the ANSI SQL standard 'YEAR' function, which is not universally supported. Instead, you should use a date range. Correct SQL: SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales_2023 FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
            "The query is correct. It accurately retrieves the top-selling product based on the quantity sold by summing the quantities from the Order Details table, joining with the Products table, and ordering the results in descending order while limiting the output to the top result.",
            "The query is mostly correct for calculating the average order value per month in 2023. However, the division should count distinct OrderIDs per month, not across the entire year. The existing query already correctly groups by month, ensuring correct aggregation. Thus, no changes are necessary.",
            "The original query is mostly correct, but to adhere to SQL standards, the CompanyName must be included in the GROUP BY clause since it is selected as part of the output. This ensures that aggregation is done properly.",
            "The SQL query is correct for the given question. It counts the number of orders where the shipped date is on or before the required date, within the year 2023.",
            "The SQL query correctly calculates the average shipping cost per order for the year 2023. It uses the AVG function on the Freight column and filters the data to include only orders from 2023 using the YEAR function on the OrderDate column. This query aligns with the business question.",
            "The query was almost correct but needed to include employees.FirstName and employees.LastName in the GROUP BY clause to avoid aggregation errors in SQL. The use of EXTRACT function is suggested for ANSI SQL compliance.",
            "The initial query is almost correct for calculating the customer retention rate, but it fails to handle division by zero if there were no distinct customers before the specified period. By using NULLIF to handle a potential zero denominator, we avoid division errors.",
            "The query is correct, assuming that the SQL dialect supports the YEAR function used to filter orders for the year 2023. If the DATEDIFF function takes dates directly in your SQL dialect, ensure it's called correctly. If not supported, consider extracting the year using EXTRACT(YEAR FROM orders.OrderDate) or similar.",
            "The original query incorrectly joins 'orders' directly with 'products'. The correct approach involves joining 'orders' with '[Order Details]' first, and then joining with 'products'. Additionally, 'suppliers.CompanyName' must be included in the GROUP BY clause to avoid SQL errors. This correction includes these joins and proper grouping.",
            "The original query had a syntax error with the COUNT function. It's corrected using a CASE statement to ensure accurate counting of on-time shipments and CAST to ensure the division has a decimal result.",
            "The query correctly calculates the inventory turnover ratio for each product category by joining the Order Details, products, and categories tables. The use of SUM and AVG functions is appropriate, along with the GROUP BY clause for CategoryName.",
            "The SQL query correctly calculates the total sales for each quarter of the year 2023 by joining the 'Order Details' and 'orders' tables, filtering by the year, and grouping by quarter. The query is correct.",
            "The SQL query correctly identifies customers who have placed orders in every month of 2023 by grouping customers and ensuring they have orders in all 12 months. The query uses Join and GROUP BY appropriately, and the HAVING clause ensures the condition of 12 distinct months is met. The query is correct.",
            "The original query only counts the discontinued products. To compute the percentage, divide this count by the total count of products and multiply by 100.",
            "The query assumes the customers table has a 'Region' column corresponding to the 'RegionID' in the region table, but 'Region' is not in the customers table per the provided schema. Correction depends on proper understanding of data and schema, ensuring the join reflects the correct relational logic. Without access to more schema details, it cannot be accurately corrected.",
            "The SQL query is correct. It selects the month from the OrderDate in 2023 and groups the results by month to calculate the total shipping cost. It orders the results in descending order of total shipping cost and limits the result to one month with the highest shipping cost.",
            "The SQL query correctly calculates the average discount for orders placed in 2023 by joining the [Order Details] table and the orders table, and then applying the YEAR function to filter by the specified year.",
            "The SQL query is correct. It correctly counts distinct products sold each month in 2023 by joining the 'Order Details' and 'orders' tables and grouping by the month of the order date.",
            "The original query is missing a join between the 'Order Details' table and the 'orders' table to filter by the order date. The corrected query includes the missing join clause.",
            "The query is correct. It calculates the total sales revenue for each month in 2023 by joining the 'orders' and '[Order Details]' tables, filtering by the year 2023, and grouping by the month of the order date.",
            "The query is mostly correct, but the COUNT(DISTINCT orders.OrderID) should be COUNT(DISTINCT [Order Details].OrderID) to ensure accurate division by unique order details associated with each quarter. The revised SQL query is: SELECT QUARTER(orders.OrderDate) AS quarter, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT [Order Details].OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY QUARTER(orders.OrderDate)",
            "Added a missing join between [Order Details] and orders.",
            "The query correctly calculates the average shipping cost per order for February 2023 using the 'MONTH' and 'YEAR' functions to filter the orders. The query is accurate and doesn't require any modifications.",
            "The SQL query uses the correct approach to calculate the retention rate by counting distinct customers for the specified year and before it. The column aliases were misused; corrected alias references are now in place (o1.OrderDate instead of orders.OrderDate). The logic of the query is otherwise correct.",
            "The original query incorrectly joins the 'orders' table to the 'products' table using 'OrderID' and 'ProductID'. The correct join should be between 'orders' and '[Order Details]' on 'OrderID', and '[Order Details]' and 'products' on 'ProductID.'",
            "The original query missed joining the 'orders' table to filter by year. I've added the join and the necessary WHERE clause to filter orders from 2023.",
            "The query is correct. It calculates total sales per employee for Q1 2023, orders by total sales in descending order, and limits the results to the top employee.",
            "The original query uses the QUARTER() and YEAR() functions, which may not be supported in all SQL dialects under the ANSI SQL standard. Using EXTRACT() is more ANSI-compliant.",
            "The original query is missing a join with the [Order Details] table, which is necessary to calculate the total sales. The corrected query includes this join.",
            "The query is correct. It joins the necessary tables to calculate the total revenue for each supplier in 2023, using the correct formula for total revenue and grouping by SupplierID.",
            "The original query was missing a join with the 'orders' table to filter by the order date. This has been corrected by adding a join with the 'orders' table and filtering by the order date in 2023.",
            "The SQL query is mostly correct. Minor adjustments in formatting were made. The logic correctly finds the month in 2023 with the highest number of new customers by checking if the customers exist before 2023 and ensuring only new ones are counted. The use of LEFT JOIN to filter new customers and the use of COUNT with DISTINCT are appropriate.",
            "The original query had syntax errors and incorrect aggregation of results. The revised query uses a subquery to find the least expensive delivery method for 2023 and calculates the percentage of orders using this method by dividing by the total number of orders in 2023. The use of COUNT and division ensures the correct percentage calculation.",
            "The original query calculates the total number of orders per city rather than the total number of distinct customers. The corrected query finds the number of distinct customers who placed orders, grouped by city.",
            "The query correctly aggregates total sales by employee ID and birthdate, showing the necessary fields to assess age distribution and sales impact.",
            "The SQL query correctly retrieves the shipping cost (Freight) and the order fulfillment time (days_to_fulfill) for each order in the year 2023. However, to analyze correlation statistically, further processing outside SQL, such as using a statistical tool or language, would be required.",
            "The original query is missing a join between the '[Order Details]' and 'orders' tables. The corrected query includes this join to ensure orders' dates are available for filtering by year 2023.",
            "The SQL query is correct and retrieves the total sales revenue for the current year by filtering the 'orders' table with the current year using the YEAR function.",
            "The original query was almost correct, but I added additional filtering to ensure the year of the last quarter matches correctly with the current date minus one quarter.",
            "The query was incorrect because it only considered quantity instead of calculating the total sales using price and discount. Additionally, it didn't account for the year, which could cause incorrect results if the query is executed in January.",
            "The original query correctly calculates the total sales by each employee but does not account for the year change when checking for the last month. By adding an additional condition to match the year, the query accurately reflects sales from the previous month.",
            "The original query is missing a filter for the current year, which is important to accurately calculate the fulfillment time for this quarter only. Added AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) to correct this.",
            "The query is not calculating the customer retention rate correctly. It calculates the ratio between this year's distinct customers and all distinct customers from before last year, which doesn't align with typical retention rate calculations. A corrected version should define the retention as customers who have made purchases in both last year and the current year.",
            "The original query incorrectly joined orders and products. The correct relationship is through [Order Details]. The query has been updated to join [Order Details], orders, and products correctly. Additionally, the date filter was adjusted to ensure it captures the previous month's data and to handle year transitions.",
            "The SQL query correctly calculates the average shipping cost per order for the current year by using the YEAR function to filter orders from the current date. The syntax and logic align with the defined schema and business metrics. No corrections are needed.",
            "The original query had a syntax issue with COUNT using a WHERE clause. Corrected by using CASE WHEN inside COUNT. Also added a multiplication by 100.0 to convert the rate to a percentage form and ensured the year is considered in the WHERE clause to handle year transition correctly.",
            "The original query used YEAR(OrderDate) = YEAR(CURRENT_DATE) to filter for the current year, not the last full year. Adjusted the WHERE clause to ensure it captures the last full year range.",
            "The query correctly summarizes sales by employee for the current year and limits the result to the top performer. However, it doesn't consider the specific territories. To fully address the question, ensure the employee's territory is relevant by checking against territories if necessary. Overall, the query is syntactically correct for the provided schema.",
            "Corrected the JOIN condition to use [Order Details] table and its relationship with orders and products. Also, reordered columns in ORDER BY clause for correct sorting of the fastest delivery.",
            "The original query was missing the JOIN with the 'orders' table to connect with 'Order Details'. It also lacked a condition to ensure the correct year is considered.",
            "Corrected the date filter to calculate orders from the last year using the DATE_SUB function to ensure it covers the exact last year period.",
            "The query is correct as it selects the shipping method (ShipVia) and counts the number of orders (OrderID) for each method. It then orders the results by the count of orders in descending order and limits the results to 1, effectively providing the most popular shipping method.",
            "The SQL query correctly calculates the average order size by discount level from the [Order Details] table. However, determining a correlation usually involves statistical analysis beyond simple aggregation. This query provides necessary data for subsequent correlation analysis, such as using statistical software or additional SQL functions if supported.",
            "The query correctly identifies the product with the maximum number of units on order by using a subquery to get the maximum value and then filtering the products with that value. The query is correct and follows the ANSI SQL standard.",
            "The SQL query is correct. It calculates the total sales per territory and retrieves the territory with the highest sales this year.",
            "The SQL query is correct. It accurately calculates the total sales revenue for the year 2022 by summing up the product of unit price, quantity, and discount from the 'Order Details' table, joining with 'orders' to filter orders placed in 2022.",
            "The SQL query is correct. It joins the customers and orders tables, groups by CustomerID, counts the number of orders for each customer, orders the result in descending order by num_orders, and limits the result to 1 to find the customer with the highest number of orders."
        ],
        "difficulty": [
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "advanced",
            "easy",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "easy",
            "easy",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "easy",
            "medium",
            "easy",
            "advanced",
            "easy",
            "medium"
        ]
    }
}