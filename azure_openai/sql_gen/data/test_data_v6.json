[
    {
        "scenario": "cross_scenario",
        "input": "What is the average discount applied to orders each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY month",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city had the highest number of orders placed?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who are the top 5 employees in terms of total sales revenue?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have products with zero stock available?",
        "output": "SELECT s.SupplierID, s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.UnitsInStock = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of sales per city?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS TotalSales FROM orders GROUP BY ShipCity;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have received the largest discounts?",
        "output": "SELECT c.CustomerID, MAX(od.Discount) AS MaxDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY MaxDiscount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have placed more than ten orders?",
        "output": "SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 10;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the customer lifetime value of each customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average number of products ordered per order?",
        "output": "SELECT AVG(OrderQuantity) AS AvgProductsPerOrder FROM (SELECT OrderID, COUNT(ProductID) AS OrderQuantity FROM [Order Details] GROUP BY OrderID) AS OrderCounts;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the top 5 products with the highest sales revenue.",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS product_sales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY product_sales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were not shipped at all?",
        "output": "SELECT COUNT(*) FROM orders WHERE ShippedDate IS NULL",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify orders that were shipped late and the shipping method used.",
        "output": "SELECT OrderID, ShipVia FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product category generates the most revenue?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY Revenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have delivered discontinued products?",
        "output": "SELECT DISTINCT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE products.Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the revenue generated from each product?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS Revenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products are currently being discontinued?",
        "output": "SELECT COUNT(*) FROM products WHERE Discontinued = 1",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order for each shipper?",
        "output": "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which category has the longest list of discontinued products?",
        "output": "SELECT c.CategoryID, COUNT(p.ProductID) AS DiscontinuedCount FROM products p JOIN categories c ON p.CategoryID = c.CategoryID WHERE p.Discontinued = 1 GROUP BY c.CategoryID ORDER BY DiscontinuedCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average unit price of all products?",
        "output": "SELECT AVG(UnitPrice) FROM products",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customers have placed orders with the highest discounts?",
        "output": "SELECT o.CustomerID, MAX(od.Discount) AS MaxDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID ORDER BY MaxDiscount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have sales exceeding $5000?",
        "output": "SELECT ProductName FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName HAVING SUM([Order Details].Quantity * [Order Details].UnitPrice) > 5000;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total discount given on products sold in the last month.",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount) AS TotalDiscount FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE());",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which company name appears most frequently in the customer database?",
        "output": "SELECT CompanyName, COUNT(*) AS Frequency FROM customers GROUP BY CompanyName ORDER BY Frequency DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What are the top 5 cities by number of shipments?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the stock-to-sale ratio for each product?",
        "output": "SELECT ProductName, UnitsInStock * 1.0 / SUM([Order Details].Quantity) AS StockToSaleRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products with the highest discount offered historically.",
        "output": "SELECT ProductID, MAX(Discount) AS MaxDiscount FROM [Order Details] GROUP BY ProductID ORDER BY MaxDiscount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Evaluate the impact of hiring date on the sales performance.",
        "output": "SELECT employees.EmployeeID, YEAR(employees.HireDate) AS HireYear, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, YEAR(employees.HireDate)",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the average unit price of products supplied by each supplier.",
        "output": "SELECT s.SupplierID, AVG(p.UnitPrice) AS AvgUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the top 5 suppliers by total sales revenue generated.",
        "output": "SELECT suppliers.SupplierID, CompanyName, SUM([Order Details].UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID, CompanyName ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were shipped via each shipping company?",
        "output": "SELECT shippers.CompanyName, COUNT(orders.OrderID) AS order_count FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the top 5 products with the highest sales performance based on quantity sold.",
        "output": "SELECT p.ProductID, SUM(od.Quantity) AS TotalQuantitySold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY TotalQuantitySold DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the most common discount rates used.",
        "output": "SELECT Discount, COUNT(*) AS Count FROM [Order Details] GROUP BY Discount ORDER BY Count DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company has the highest average delay in delivery?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AverageDelay FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipVia ORDER BY AverageDelay DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have been discontinued but still have stock available?",
        "output": "SELECT ProductName, UnitsInStock FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total freight cost for all orders shipped to the USA.",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShipCountry = 'USA';",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product has the highest number of units on order?",
        "output": "SELECT p.ProductID, p.UnitsOnOrder FROM products p ORDER BY p.UnitsOnOrder DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method is used the most?",
        "output": "SELECT ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest quantities on order?",
        "output": "SELECT ProductName, UnitsOnOrder FROM products ORDER BY UnitsOnOrder DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest sales quantity this month?",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m') GROUP BY products.ProductID, products.ProductName ORDER BY TotalQuantity DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the product-wise breakdown of Total Sales for this year?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY od.ProductID ORDER BY ProductSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which region has the highest number of orders?",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipRegion ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the suppliers with products that are consistently ordered.",
        "output": "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName HAVING COUNT(DISTINCT [Order Details].OrderID) > 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the products that are provided by multiple suppliers.",
        "output": "SELECT P.ProductName FROM products P JOIN (SELECT ProductID FROM products GROUP BY ProductID HAVING COUNT(DISTINCT SupplierID) > 1) AS MultiSupplier ON P.ProductID = MultiSupplier.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the average sales per order for each employee?",
        "output": "SELECT E.EmployeeID, AVG(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS AverageSalesPerOrder FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY E.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the total number of customers who have never placed an order.",
        "output": "SELECT COUNT(CustomerID) AS NeverOrdered FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders);",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders include a discount greater than 20%?",
        "output": "SELECT COUNT(DISTINCT [Order Details].OrderID) AS HighDiscountOrders FROM [Order Details] WHERE [Order Details].Discount > 0.2;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have less than 10 units in stock and need reordering?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < 10 AND UnitsInStock <= ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order in 2023?",
        "output": "SELECT AVG(orders.Freight) AS avg_shipping_cost_per_order FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find any correlation between the employees' hire date and their performance in sales.",
        "output": "SELECT e.EmployeeID, e.HireDate, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.HireDate ORDER BY TotalSales DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the average unit price of all products per supplier.",
        "output": "SELECT s.CompanyName, AVG(p.UnitPrice) AS AvgUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the correlation between employee hire date and total sales.",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, YEAR(CURDATE()) - YEAR(e.HireDate) AS YearsSinceHire FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were delivered on time this month?",
        "output": "SELECT COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers are located in 'USA' and how many products do they supply?",
        "output": "SELECT CompanyName, COUNT(ProductID) FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE Country = 'USA' GROUP BY CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the most orders shipped on time?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OnTimeOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY employees.EmployeeID ORDER BY OnTimeOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which are the top 5 products by sales revenue?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS ProductSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY ProductSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the average fulfillment time for shipped orders.",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.ShippedDate IS NOT NULL",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What was the most common order month for new customers?",
        "output": "SELECT EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, COUNT(o.CustomerID) AS NewCustomerCount FROM orders o JOIN customers c ON o.CustomerID = c.CustomerID WHERE o.OrderDate = c.RegisterDate GROUP BY OrderMonth ORDER BY NewCustomerCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the customer lifetime value for customers in the USA?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Country = 'USA' GROUP BY customers.CustomerID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product has the highest total sales revenue?",
        "output": "SELECT ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY SUM([Order Details].Quantity * [Order Details].UnitPrice) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders have a shipping address in the 'California' region?",
        "output": "SELECT (COUNT(OrderID) FILTER (WHERE ShipRegion = 'California') * 100.0 / COUNT(OrderID)) AS PercentageInCalifornia FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers provide products that have been ordered more than 100 times?",
        "output": "SELECT SupplierID FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY SupplierID HAVING COUNT(od.ProductID) > 100;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method had the highest number of delays in the last quarter?",
        "output": "SELECT ShipVia, COUNT(*) AS Delays FROM orders WHERE ShippedDate > RequiredDate AND TO_CHAR(OrderDate, 'YYYY-Q') = TO_CHAR(DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months', 'YYYY-Q') GROUP BY ShipVia ORDER BY Delays DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Analyze the impact of employee birth month on sales performance.",
        "output": "SELECT e.EmployeeID, MONTH(e.BirthDate) AS BirthMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, MONTH(e.BirthDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost for each shipping country?",
        "output": "SELECT orders.ShipCountry, SUM(orders.Freight) AS TotalFreight FROM orders GROUP BY orders.ShipCountry",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What was the average order value each month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_TRUNC('month', orders.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order for each shipping method?",
        "output": "SELECT ShipVia, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the top 5 customers by order count.",
        "output": "SELECT CustomerID, COUNT(*) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average time taken from order placement to shipment for each employee?",
        "output": "SELECT employees.EmployeeID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageShippingTime FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers deliver products to the most diverse set of countries?",
        "output": "SELECT s.SupplierID, COUNT(DISTINCT o.ShipCountry) AS CountryCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID ORDER BY CountryCount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which city has the highest number of supplier contacts?",
        "output": "SELECT City, COUNT(ContactName) AS ContactCount FROM suppliers GROUP BY City ORDER BY ContactCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have a stock higher than their reorder level?",
        "output": "SELECT COUNT(*) FROM products WHERE UnitsInStock > ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders has each employee processed?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Discover products sold in quantities exceeding 1000 units per month.",
        "output": "SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity) > 1000;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which country had the highest average order value last year?",
        "output": "SELECT Country, AVG(TotalOrderValue) AS AverageOrderValue FROM (SELECT orders.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalOrderValue, customers.Country FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY orders.OrderID, customers.Country) AS CountryOrderAverages GROUP BY Country ORDER BY AverageOrderValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total sales revenue for each product?",
        "output": "SELECT P.ProductName, SUM(OD.Quantity * OD.UnitPrice) AS TotalRevenue FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID GROUP BY P.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which city has the highest number of unique customers?",
        "output": "SELECT City, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM customers GROUP BY City ORDER BY UniqueCustomers DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many distinct products are ordered in each country?",
        "output": "SELECT Country, COUNT(DISTINCT [Order Details].ProductID) AS DistinctProducts FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY Country;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees who have never handled an order in a specific region.",
        "output": "SELECT employees.EmployeeID FROM employees WHERE NOT EXISTS (SELECT 1 FROM orders WHERE orders.EmployeeID = employees.EmployeeID AND orders.ShipRegion = 'SpecificRegion')",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average fulfillment time for orders shipped in the last month?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE ShippedDate BETWEEN DATEADD(MONTH, -1, CURRENT_DATE) AND CURRENT_DATE",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers provide the most products by quantity?",
        "output": "SELECT s.SupplierID, SUM(od.Quantity) AS TotalQuantity FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY TotalQuantity DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the sales trend over the last 6 months for each employee?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalSales, EXTRACT(MONTH FROM o.OrderDate) as SalesMonth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -6, CURRENT_DATE) GROUP BY e.EmployeeID, SalesMonth ORDER BY e.EmployeeID, SalesMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount given on orders?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product has the most units on order?",
        "output": "SELECT products.ProductID, products.ProductName, products.UnitsOnOrder FROM products ORDER BY products.UnitsOnOrder DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Are there any suppliers with discontinued products only?",
        "output": "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID HAVING COUNT(products.ProductID) = COUNT(CASE WHEN products.Discontinued = 1 THEN 1 END);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the percentage of orders that were shipped late?",
        "output": "SELECT (COUNT(*) FILTER (WHERE ShippedDate > RequiredDate)::FLOAT / COUNT(*)) * 100 AS LateShipmentPercentage FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the average shipping time for orders handled by each employee.",
        "output": "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NOT NULL GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which orders have a discount greater than 20% and who manages them?",
        "output": "SELECT o.OrderID, e.FirstName, e.LastName FROM orders o JOIN employees e ON o.EmployeeID = e.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0.2;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city received the most shipments?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of different products sold to date?",
        "output": "SELECT COUNT(DISTINCT ProductID) AS UniqueProductsSold FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which month had the highest total sales revenue this year?",
        "output": "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY Month ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the top 5 customers with the highest spending.",
        "output": "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSpent FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID ORDER BY TotalSpent DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city receives the most shipments?",
        "output": "SELECT ShipCity, COUNT(*) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products have never been ordered?",
        "output": "SELECT COUNT(products.ProductName) FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].ProductID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the total number of products that are overstocked.",
        "output": "SELECT COUNT(*) AS OverstockedCount FROM products WHERE UnitsInStock > (ReorderLevel + UnitsOnOrder);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total sales for each product.",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Analyze the correlation between unit price and units ordered for the products.",
        "output": "SELECT p.ProductName, CORR(p.UnitPrice, od.Quantity) AS PriceQuantityCorrelation FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have shipped orders on time this year?",
        "output": "SELECT DISTINCT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.ShippedDate) = YEAR(CURRENT_DATE) AND orders.RequiredDate >= orders.ShippedDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time for each employee?",
        "output": "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find out the monthly average units in stock for each product.",
        "output": "SELECT p.ProductName, EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, AVG(p.UnitsInStock) AS AverageMonthlyStock FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, Year, Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many late shipments were there each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, COUNT(OrderID) AS LateShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What's the average discount applied to product orders?",
        "output": "SELECT AVG(Discount) FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost by region over the last year?",
        "output": "SELECT ShipRegion, SUM(Freight) AS TotalFreight FROM orders WHERE OrderDate >= DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '1 year' GROUP BY ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the most common shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipVia ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "List the orders that were fulfilled late.",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders were delivered on time in the last quarter?",
        "output": "SELECT SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE QUARTER(orders.OrderDate) = (QUARTER(CURDATE()) - 1) AND YEAR(orders.OrderDate) = YEAR(CURDATE())",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost incurred in each country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of unique products ordered?",
        "output": "SELECT COUNT(DISTINCT ProductID) FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of orders shipped per region each month?",
        "output": "SELECT DATE_TRUNC('month', ShippedDate) AS Month, ShipRegion, COUNT(OrderID) AS OrdersShipped FROM orders GROUP BY Month, ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed each month?",
        "output": "SELECT COUNT(OrderID) AS OrderCount, EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month FROM orders GROUP BY Year, Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the on-time delivery rate for each shipping method?",
        "output": "SELECT ShipVia, ROUND(100.0 * SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID), 2) AS OnTimeDeliveryRate FROM orders GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which category of products has generated the most revenue?",
        "output": "SELECT CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY CategoryID ORDER BY TotalRevenue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the total sales for each product over the last year?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity * (1 - [Order Details].Discount) * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which orders had the highest freight costs?",
        "output": "SELECT o.OrderID, o.Freight FROM orders o ORDER BY o.Freight DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee made the highest sales in July 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-07-31' GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products due for reorder based on their reorder level and current stock.",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company has the highest average cost per shipment?",
        "output": "SELECT ShipVia, AVG(Freight) AS AverageCost FROM orders GROUP BY ShipVia ORDER BY AverageCost DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the percentage of total sales contributed by each supplier?",
        "output": "SELECT suppliers.SupplierID, (SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID)) * 100 AS supplier_sales_percentage FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the retention rate for January 2023?",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' THEN orders.CustomerID END) * 1.0) / (NULLIF(COUNT(DISTINCT CASE WHEN orders.OrderDate < '2023-01-01' THEN orders.CustomerID END), 0)) AS RetentionRate FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the lifetime value of each customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers whose lead time is reducing over the last six months.",
        "output": "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN CURRENT_DATE - INTERVAL '6 MONTH' AND CURRENT_DATE GROUP BY suppliers.SupplierID HAVING AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) < (SELECT AVG(DATEDIFF(o2.ShippedDate, o2.OrderDate)) FROM orders o2 JOIN [Order Details] od2 ON o2.OrderID = od2.OrderID JOIN products p2 ON od2.ProductID = p2.ProductID WHERE p2.SupplierID = suppliers.SupplierID AND o2.OrderDate BETWEEN CURRENT_DATE - INTERVAL '1 YEAR' AND CURRENT_DATE - INTERVAL '6 MONTH');",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Who are the top 5 employees generating the most sales this year?",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName ORDER BY sales DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which orders have a fulfillment time greater than 30 days?",
        "output": "SELECT o.OrderID FROM orders o WHERE DATEDIFF(o.ShippedDate, o.OrderDate) > 30;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee managed the most orders last month?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE() - INTERVAL 1 MONTH, '%Y-%m') GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which products are most frequently ordered with a discount?",
        "output": "SELECT ProductID, COUNT(OrderID) AS TimesOrdered FROM [Order Details] WHERE Discount > 0 GROUP BY ProductID ORDER BY TimesOrdered DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the most shipped product in terms of quantity?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product had the most orders, and how many were ordered?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have been discontinued?",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee has handled the highest number of orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost per shipping method this month?",
        "output": "SELECT o.ShipVia, SUM(o.Freight) AS TotalFreightCost FROM orders o WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) GROUP BY o.ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue for each product category?",
        "output": "SELECT p.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the total quantity of products on order for each supplier.",
        "output": "SELECT s.SupplierName, SUM(p.UnitsOnOrder) FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.UnitsOnOrder > 0 GROUP BY s.SupplierName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which orders had the highest total discount applied?",
        "output": "SELECT OrderID, SUM(Discount * UnitPrice * Quantity) AS TotalDiscount FROM [Order Details] GROUP BY OrderID ORDER BY TotalDiscount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products need to be reordered based on current levels?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee handles the most valuable products by unit price?",
        "output": "SELECT e.FirstName, e.LastName FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID ORDER BY od.UnitPrice DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product generated the most revenue this quarter?",
        "output": "SELECT ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductRevenue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE QUARTER(o.OrderDate) = QUARTER(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY ProductID ORDER BY ProductRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipping company handled the most orders in USD value in Q2 2023?",
        "output": "SELECT shippers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_shipping_value FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY shippers.CompanyName ORDER BY total_shipping_value DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average age of employees at the time of hire?",
        "output": "SELECT AVG((CAST(JULIANDAY(employees.HireDate) - JULIANDAY(employees.BirthDate)) / 365.25 AS DECIMAL(5, 2))) AS AverageAgeAtHire FROM employees",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of units sold by each employee?",
        "output": "SELECT e.EmployeeID, SUM(od.Quantity) AS TotalUnits FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of units in stock for each product category?",
        "output": "SELECT CategoryID, SUM(UnitsInStock) AS TotalUnitsInStock FROM products GROUP BY CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of products sold to each country?",
        "output": "SELECT orders.ShipCountry, SUM([Order Details].Quantity) AS TotalProductsSold FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the top 5 products by sales revenue.",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS SalesRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY SalesRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total freight cost by shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales value for each product?",
        "output": "SELECT products.ProductID, ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID, ProductName ORDER BY TotalSales DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee's orders have the highest average discount applied?",
        "output": "SELECT E.EmployeeID, AVG(OD.Discount) AS AverageDiscount FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY E.EmployeeID ORDER BY AverageDiscount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the average discount applied to orders in the last 3 months.",
        "output": "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the most units in stock across all their products?",
        "output": "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID ORDER BY SUM(products.UnitsInStock) DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for February 2023?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28'",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the total sales for each product in the current month?",
        "output": "SELECT P.ProductName, SUM(OD.Quantity * OD.UnitPrice) AS TotalSales FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID WHERE DATE_FORMAT(CURDATE(), '%Y-%m') = DATE_FORMAT(CURRENT_DATE(), '%Y-%m') GROUP BY P.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products have the highest inventory turnover ratio?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY turnover_ratio DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipping company handled the most deliveries in 2023?",
        "output": "SELECT shippers.CompanyName, COUNT(orders.OrderID) AS num_deliveries FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY shippers.CompanyName ORDER BY num_deliveries DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the busiest month for orders.",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS OrderMonth, COUNT(OrderID) AS MonthlyOrders FROM orders GROUP BY OrderMonth ORDER BY MonthlyOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which cities do the top three suppliers operate from?",
        "output": "SELECT suppliers.City FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.City ORDER BY COUNT(DISTINCT products.SupplierID) DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the longest time taken to fulfill an order?",
        "output": "SELECT MAX(DATEDIFF(ShippedDate, OrderDate)) AS LongestFulfillmentTime FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost incurred for orders handled by each employee?",
        "output": "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average monthly sales growth for each product?",
        "output": "SELECT p.ProductName, AVG(CASE WHEN LAG(SUM(od.Quantity), 1) OVER (PARTITION BY p.ProductID ORDER BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate)) = 0 THEN NULL ELSE (SUM(od.Quantity) - LAG(SUM(od.Quantity), 1) OVER (PARTITION BY p.ProductID ORDER BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate))) / LAG(SUM(od.Quantity), 1) OVER (PARTITION BY p.ProductID ORDER BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate)) END) AS AvgSalesGrowth FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, p.ProductName, EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How does the sales quantity of each product compare month over month?",
        "output": "SELECT ProductName, EXTRACT(MONTH FROM OrderDate) AS Month, SUM([Order Details].Quantity) AS MonthlyQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ProductName, EXTRACT(MONTH FROM OrderDate) ORDER BY ProductName, EXTRACT(MONTH FROM OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total discount given for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average discount applied per order this year?",
        "output": "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE)",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time for each supplier over the past year?",
        "output": "SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN orders o ON p.ProductID IN (SELECT od.ProductID FROM [Order Details] od WHERE od.OrderID = o.OrderID) WHERE o.OrderDate BETWEEN CURDATE() - INTERVAL 1 YEAR AND CURDATE() GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the most orders completed in a given month?",
        "output": "SELECT orders.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM orders WHERE MONTH(orders.OrderDate) = 6 AND YEAR(orders.OrderDate) = 2023 GROUP BY orders.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the maximum reorder level for products from each supplier.",
        "output": "SELECT SupplierID, MAX(ReorderLevel) AS MaxReorderLevel FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping company was used the most in the previous quarter?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders WHERE QUARTER(OrderDate) = QUARTER(CURDATE()) - 1 AND YEAR(OrderDate) = YEAR(CURDATE()) OR (QUARTER(CURDATE()) = 1 AND YEAR(OrderDate) = YEAR(CURDATE()) - 1) GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee handled the most on-time deliveries in the last year?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OnTimeDeliveries FROM orders WHERE ShippedDate <= RequiredDate AND YEAR(OrderDate) = YEAR(CURDATE()) - 1 GROUP BY EmployeeID ORDER BY OnTimeDeliveries DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees were hired before 2000?",
        "output": "SELECT COUNT(*) FROM employees WHERE HireDate < '2000-01-01';",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have a higher average order value than their direct manager?",
        "output": "SELECT a.EmployeeID FROM employees a JOIN orders b ON a.EmployeeID = b.EmployeeID JOIN [Order Details] c ON b.OrderID = c.OrderID JOIN employees d ON a.ReportsTo = d.EmployeeID GROUP BY a.EmployeeID, d.EmployeeID HAVING AVG(c.UnitPrice * c.Quantity * (1 - c.Discount)) > (SELECT AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.EmployeeID = d.EmployeeID);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average units in stock per product category?",
        "output": "SELECT CategoryID, AVG(UnitsInStock) AS AvgUnitsInStock FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which shipping methods are most frequently used?",
        "output": "SELECT o.ShipVia, COUNT(o.OrderID) AS UseCount FROM orders o GROUP BY o.ShipVia ORDER BY UseCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the supplier with the largest revenue from sales.",
        "output": "SELECT products.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the products that have not been sold at all.",
        "output": "SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the percentage of orders delivered on time each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 100.0 * COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total number of units on order for each product category?",
        "output": "SELECT CategoryID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost for each shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount provided across all products?",
        "output": "SELECT AVG(Discount) FROM [Order Details];",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have not been used in any orders?",
        "output": "SELECT s.SupplierID FROM suppliers s LEFT JOIN products p ON s.SupplierID = p.SupplierID LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total sales revenue per supplier for the last fiscal year.",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SupplierRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY suppliers.CompanyName ORDER BY SupplierRevenue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What are the top five customers based on order volume?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderVolume FROM orders GROUP BY CustomerID ORDER BY OrderVolume DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top 5 cities with the most supplier companies?",
        "output": "SELECT City, COUNT(DISTINCT SupplierID) AS SupplierCount FROM suppliers GROUP BY City ORDER BY SupplierCount DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the most common region suppliers are from?",
        "output": "SELECT Region, COUNT(*) FROM suppliers GROUP BY Region ORDER BY COUNT(*) DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find employees who have worked for more than 10 years and their number of orders handled.",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE YEAR(CURRENT_DATE) - YEAR(e.HireDate) > 10 GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost by country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the top 5 customers by lifetime value.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY LifetimeValue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the regions with the highest order volumes.",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS OrderVolume FROM orders GROUP BY ShipRegion ORDER BY OrderVolume DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee generated the highest sales in Q2 2023?",
        "output": "SELECT employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed and not yet shipped?",
        "output": "SELECT COUNT(OrderID) AS UnshippedOrders FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total freight cost incurred for each shipping country?",
        "output": "SELECT o.ShipCountry, SUM(o.Freight) AS TotalFreight FROM orders o GROUP BY o.ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products are below their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have not recorded any sales this year?",
        "output": "SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND YEAR(o.OrderDate) = YEAR(CURDATE()) WHERE o.OrderID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products are below their reorder level and need to be restocked?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee handled the most orders that were shipped late?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS LateOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE ShippedDate > RequiredDate GROUP BY employees.EmployeeID ORDER BY LateOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "List all products that have never been ordered.",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the percentage of orders delivered on or before the required date each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 100.0 * COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city has the highest average shipping cost?",
        "output": "SELECT ShipCity, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipCity ORDER BY AvgShippingCost DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine which products have had discounts applied most frequently.",
        "output": "SELECT p.ProductName, COUNT(od.Discount) AS DiscountCount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.Discount > 0 GROUP BY p.ProductName ORDER BY DiscountCount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the countries with the most unique suppliers.",
        "output": "SELECT Country, COUNT(DISTINCT SupplierID) AS UniqueSuppliers FROM suppliers GROUP BY Country ORDER BY UniqueSuppliers DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employees are linked to the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which city has the highest number of orders placed in 2023?",
        "output": "SELECT orders.ShipCity, COUNT(orders.OrderID) AS num_orders FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY orders.ShipCity ORDER BY num_orders DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have zero units in stock?",
        "output": "SELECT COUNT(ProductID) AS NumberOfProductsWithZeroStock FROM products WHERE UnitsInStock = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Analyze the correlation between employee job title and sales performance.",
        "output": "SELECT employees.Title, AVG(TotalSales) AS AverageSales FROM (SELECT employees.Title, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, employees.Title) AS EmployeeSales GROUP BY employees.Title;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order fulfillment time for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify orders with a shipping delay greater than 7 days.",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate + INTERVAL '7' DAY;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products are currently at or above their reorder level?",
        "output": "SELECT COUNT(*) AS AtOrAboveReOrder FROM products WHERE UnitsInStock >= ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the current inventory turnover ratio?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the correlation between employee sales and years of service?",
        "output": "SELECT employees.EmployeeID, (YEAR(CURDATE()) - YEAR(employees.HireDate)) AS years_of_service, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city has received the highest number of shipments?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the percentage of orders shipped on time.",
        "output": "SELECT (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID)) AS OnTimePercentage FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "List all orders with their shipment region and corresponding total order value.",
        "output": "SELECT o.OrderID, o.ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID, o.ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee with the highest average order value.",
        "output": "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AvgOrderValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average age of employees who have made a sale in the last year?",
        "output": "SELECT AVG(DATEDIFF(CURRENT_DATE, e.BirthDate) / 365) AS AverageAge FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the sum of all discounts given on 'Order Details'?",
        "output": "SELECT SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscounts FROM [Order Details] od;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped late last month?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate AND DATE_TRUNC('month', ShippedDate) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month');",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many customers were retained from Q1 to Q2 in 2023?",
        "output": "SELECT COUNT(DISTINCT o.CustomerID) AS retained_customers FROM orders o WHERE o.CustomerID IN (SELECT CustomerID FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-03-31') AND o.OrderDate BETWEEN '2023-04-01' AND '2023-06-30'",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total number of units sold by supplier?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].Quantity) AS total_units_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY total_units_sold DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers are from a specific country and have placed orders?",
        "output": "SELECT customers.CustomerID, customers.CompanyName FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE customers.Country = 'Specific Country';",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the longest average lead time?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID, suppliers.CompanyName ORDER BY AvgLeadTime DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 5 products by sales volume?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS SalesVolume FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY SalesVolume DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products are currently at or below their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders have a discount applied?",
        "output": "SELECT COUNT(DISTINCT o.OrderID) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which suppliers have the shortest average lead time for deliveries?",
        "output": "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the monthly growth rate in sales for each employee?",
        "output": "SELECT e.EmployeeID, YEAR(o.OrderDate) AS Year, MONTH(o.OrderDate) AS Month, (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) - LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) OVER (PARTITION BY e.EmployeeID ORDER BY YEAR(o.OrderDate), MONTH(o.OrderDate))) / LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) OVER (PARTITION BY e.EmployeeID ORDER BY YEAR(o.OrderDate), MONTH(o.OrderDate)) AS MonthlyGrowth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, YEAR(o.OrderDate), MONTH(o.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the monthly trend of new customers acquired?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(DISTINCT CustomerID) AS NewCustomers FROM orders GROUP BY Month ORDER BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total quantity of products ordered by each customer?",
        "output": "SELECT c.CustomerID, SUM(od.Quantity) AS TotalQuantity FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales value in the last quarter?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the monthly customer retention rate for 2023?",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(DISTINCT o1.CustomerID) * 1.0 / NULLIF((SELECT COUNT(DISTINCT o2.CustomerID) FROM orders o2 WHERE o2.OrderDate < '2023-01-01'), 0) AS RetentionRate FROM orders o1 WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY EXTRACT(MONTH FROM OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount applied to orders per supplier?",
        "output": "SELECT suppliers.SupplierID, suppliers.SupplierName, AVG([Order Details].Discount) AS AverageDiscount FROM suppliers INNER JOIN products ON suppliers.SupplierID = products.SupplierID INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID, suppliers.SupplierName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total revenue generated from each product?",
        "output": "SELECT ProductName, SUM(Quantity * UnitPrice * (1 - Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the most diverse product range?",
        "output": "SELECT SupplierID, COUNT(DISTINCT CategoryID) AS ProductRange FROM products GROUP BY SupplierID ORDER BY ProductRange DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Get the supplier details for products with the lowest units in stock.",
        "output": "SELECT p.ProductName, s.SupplierID FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.UnitsInStock = (SELECT MIN(UnitsInStock) FROM products);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the distribution of employees across different cities?",
        "output": "SELECT City, COUNT(EmployeeID) AS EmployeeCount FROM employees GROUP BY City;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders are shipped using more than one shipping method?",
        "output": "SELECT COUNT(*) FROM (SELECT OrderID, COUNT(DISTINCT ShipVia) AS MethodCount FROM orders GROUP BY OrderID HAVING MethodCount > 1) AS MultiMethodOrders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue attributed to each supplier?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which month had the highest average order value?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_TRUNC('month', OrderDate) ORDER BY AvgOrderValue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for each product category last quarter?",
        "output": "SELECT c.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(p.UnitsInStock) AS turnover_ratio FROM [Order Details] JOIN products p ON [Order Details].ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID WHERE [Order Details].OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY c.CategoryName",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List all products and their respective stock and order quantities.",
        "output": "SELECT ProductName, UnitsInStock, UnitsOnOrder FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has delivered the highest total number of product units?",
        "output": "SELECT s.SupplierID, SUM(od.Quantity) AS TotalUnits FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY TotalUnits DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipper has the highest on-time delivery rate in 2023?",
        "output": "SELECT shippers.CompanyName, (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / CAST(COUNT(orders.OrderID) AS FLOAT) * 100) AS on_time_delivery_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY shippers.CompanyName ORDER BY on_time_delivery_rate DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products should be considered for discontinuation based on sales?",
        "output": "SELECT ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName HAVING SUM([Order Details].Quantity) < MIN(ReorderLevel);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the month with the highest total product sales value.",
        "output": "SELECT EXTRACT(MONTH FROM o.OrderDate) AS SalesMonth, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY SalesMonth ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the top 5 cities with the highest number of orders?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS order_count FROM orders GROUP BY ShipCity ORDER BY order_count DESC LIMIT 5",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product generated the highest sales revenue in March 2023?",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY products.ProductName ORDER BY sales_revenue DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order fulfillment time each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the percentage of orders delivered before the required date for the last three months?",
        "output": "SELECT 100 * COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN orders.OrderID END) / COUNT(orders.OrderID) AS on_time_rate FROM orders WHERE orders.OrderDate BETWEEN DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months' AND CURRENT_DATE",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest reorder level?",
        "output": "SELECT ProductName FROM products WHERE ReorderLevel = (SELECT MAX(ReorderLevel) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier contributed the most to our total sales?",
        "output": "SELECT suppliers.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS supplier_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY supplier_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount for each order?",
        "output": "SELECT OrderID, AVG(Discount) AS AverageDiscount FROM [Order Details] GROUP BY OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How often are products reordered compared to their reorder level?",
        "output": "SELECT ProductName, (UnitsOnOrder - ReorderLevel) AS ReorderDifference FROM products WHERE (UnitsOnOrder - ReorderLevel) > 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders are shipped to each city?",
        "output": "SELECT ShipCity, COUNT(*) AS OrderCount FROM orders GROUP BY ShipCity;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped late in each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY DATE_TRUNC('month', OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method is used most frequently?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Find the reorder levels for products nearing zero stock.",
        "output": "SELECT products.ProductName, products.ReorderLevel FROM products WHERE products.UnitsInStock < products.ReorderLevel",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee territories are underperforming in terms of sales?",
        "output": "SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS territory_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryID, territories.TerritoryDescription ORDER BY territory_sales",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employee with the most orders shipped late.",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS LateOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.RequiredDate < o.ShippedDate GROUP BY e.EmployeeID ORDER BY LateOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have not been ordered at all?",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city has the lowest on-time delivery rate?",
        "output": "SELECT ShipCity, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0) / COUNT(*) AS OnTimeDeliveryRate FROM orders GROUP BY ShipCity ORDER BY OnTimeDeliveryRate ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find employees living in the same city as their manager.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e JOIN employees m ON e.ReportsTo = m.EmployeeID WHERE e.City = m.City;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the difference in sales between the current and previous year for each employee.",
        "output": "SELECT e.EmployeeID, (SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) AS SalesDifference FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which specific products need to be reordered immediately?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What are the top three countries by total sales?",
        "output": "SELECT o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CountrySales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry ORDER BY CountrySales DESC LIMIT 3",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the suppliers with late shipments on orders.",
        "output": "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.RequiredDate < orders.ShippedDate GROUP BY suppliers.CompanyName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order by shipping company?",
        "output": "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List suppliers located in the same city.",
        "output": "SELECT DISTINCT s1.CompanyName, s2.CompanyName FROM suppliers s1 JOIN suppliers s2 ON s1.City = s2.City AND s1.SupplierID < s2.SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many customers have been retained from 2022 to 2023?",
        "output": "SELECT COUNT(DISTINCT retained.CustomerID) FROM (SELECT CustomerID FROM orders WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31') AS previous INNER JOIN (SELECT CustomerID FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31') AS current ON previous.CustomerID = current.CustomerID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer placed the most orders in the last year?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which region has the most orders?",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS NumOrders FROM orders GROUP BY ShipRegion ORDER BY NumOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped more than a week after the order date?",
        "output": "SELECT COUNT(o.OrderID) AS DelayedOrders FROM orders o WHERE DATEDIFF(o.ShippedDate, o.OrderDate) > 7;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest sales in the last month?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the total number of products in each category.",
        "output": "SELECT CategoryID, COUNT(ProductID) AS TotalProducts FROM products GROUP BY CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for each product in 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many products have stock levels below their reorder level?",
        "output": "SELECT COUNT(products.ProductID) AS low_stock_products FROM products WHERE products.UnitsInStock < products.ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total value of unshipped orders?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS UnshippedValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE ShippedDate IS NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers received shipments to multiple countries?",
        "output": "SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID HAVING COUNT(DISTINCT o.ShipCountry) > 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers provide the most products?",
        "output": "SELECT s.SupplierName, COUNT(*) AS ProductCount FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierName ORDER BY ProductCount DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest unit prices in each category?",
        "output": "SELECT p.CategoryID, p.ProductName, p.UnitPrice FROM products p JOIN (SELECT CategoryID, MAX(UnitPrice) AS MaxPrice FROM products GROUP BY CategoryID) pm ON p.CategoryID = pm.CategoryID AND p.UnitPrice = pm.MaxPrice;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the distribution of employee salaries?",
        "output": "SELECT Salary, COUNT(EmployeeID) AS EmployeeCount FROM employees GROUP BY Salary;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount given on each product?",
        "output": "SELECT p.ProductName, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount given on all orders?",
        "output": "SELECT AVG(Discount) FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the inventory turnover ratio for all products.",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales revenue generated by each employee?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many discontinued products are still listed?",
        "output": "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which region has the highest number of orders in 2023?",
        "output": "SELECT region.RegionDescription, COUNT(orders.OrderID) AS order_count FROM orders JOIN territories ON orders.ShipRegion = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY region.RegionDescription ORDER BY order_count DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order for each customer country?",
        "output": "SELECT customers.Country, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.Country",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount applied to products in each order?",
        "output": "SELECT OrderID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY OrderID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the details of orders where a discount was applied?",
        "output": "SELECT * FROM [Order Details] WHERE Discount > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which products are most frequently ordered?",
        "output": "SELECT ProductID, COUNT(ProductID) AS Frequency FROM [Order Details] GROUP BY ProductID ORDER BY Frequency DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total discount offered across all orders this month?",
        "output": "SELECT SUM(od.Discount) AS TotalDiscount FROM [Order Details] od WHERE DATE_TRUNC('month', CURRENT_DATE) = DATE_TRUNC('month', OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products had the highest discount applied last month?",
        "output": "SELECT p.ProductName, od.Discount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate >= DATEADD(month, -1, CURRENT_DATE) AND od.OrderDate < CURRENT_DATE ORDER BY od.Discount DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the customer retention rate for January 2022.",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2022-01-01' AND '2022-01-31' THEN orders.CustomerID END) * 1.0 / COUNT(DISTINCT CASE WHEN orders.OrderDate < '2022-01-01' THEN orders.CustomerID END)) AS RetentionRate FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of customers are repeat buyers in 2023?",
        "output": "SELECT (COUNT(DISTINCT o2023.CustomerID) * 1.0 / NULLIF(COUNT(DISTINCT oBefore2023.CustomerID), 0)) AS repeat_customer_rate FROM orders o2023 JOIN orders oBefore2023 ON o2023.CustomerID = oBefore2023.CustomerID WHERE o2023.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND oBefore2023.OrderDate < '2023-01-01'",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How much revenue has each customer generated over their lifetime?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total quantity sold for each product this month?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE DATE_TRUNC('month', CURRENT_DATE) = DATE_TRUNC('month', od.OrderDate) GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city received the most shipments?",
        "output": "SELECT ShipCity, COUNT(*) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify suppliers who supply discontinued products.",
        "output": "SELECT SupplierID FROM products WHERE Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee had the most sales in the last quarter?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(QUARTER, -1, CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have orders that significantly exceed their reorder levels?",
        "output": "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID HAVING SUM(od.Quantity) > p.ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Analyze the products with higher sales than the average monthly performance.",
        "output": "SELECT ProductID FROM (SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID) AS ProductPerformance WHERE TotalQuantity > (SELECT AVG(TotalQuantity) FROM (SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID) AS AvgPerformance);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the most common shipping recipient names.",
        "output": "SELECT ShipName, COUNT(*) AS Frequency FROM orders GROUP BY ShipName ORDER BY Frequency DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the top 3 cities with the most suppliers.",
        "output": "SELECT City, COUNT(*) AS SupplierCount FROM suppliers GROUP BY City ORDER BY SupplierCount DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have placed the most orders?",
        "output": "SELECT o.CustomerID, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.CustomerID ORDER BY OrderCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the current stock level for each product?",
        "output": "SELECT ProductID, UnitsInStock FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the overall product performance score using a composite measure of sales and inventory levels.",
        "output": "SELECT p.ProductID, p.ProductName, (SUM(od.Quantity) * (1 - p.Discontinued)) / (p.UnitsInStock + 1) AS ProductPerformanceScore FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products have reached their reorder level as of the current date?",
        "output": "SELECT products.ProductName FROM products WHERE products.UnitsInStock <= products.ReorderLevel",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total discount given for each product?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products are currently discontinued?",
        "output": "SELECT COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the lifetime value of each customer.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average discount given by each employee on their orders?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.Discount) AS AverageDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the top-performing products based on sales.",
        "output": "SELECT ProductName, SUM(Quantity) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 0 GROUP BY ProductName ORDER BY TotalSales DESC LIMIT 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the variance in shipping costs for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, VARIANCE(Freight) AS FreightVariance FROM orders GROUP BY OrderMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost for each shipping country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the month-by-month growth in total sales?",
        "output": "SELECT DATE_FORMAT(O.OrderDate, '%Y-%m') AS Month, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY Month ORDER BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total freight cost for shipped orders?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShippedDate IS NOT NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How much revenue is generated from orders with more than 10 units?",
        "output": "SELECT SUM(UnitPrice * Quantity) AS Revenue FROM [Order Details] WHERE Quantity > 10;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped on time each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) FROM orders WHERE ShippedDate <= RequiredDate GROUP BY DATE_TRUNC('month', OrderDate);",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the variance in shipping costs across different regions?",
        "output": "SELECT ShipRegion, VAR_SAMP(Freight) AS FreightVariance FROM orders GROUP BY ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders have a shipping cost greater than $100?",
        "output": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM orders) AS Percentage FROM orders WHERE Freight > 100;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the most common order quantity?",
        "output": "SELECT od.Quantity, COUNT(od.Quantity) AS Frequency FROM [Order Details] od GROUP BY od.Quantity ORDER BY Frequency DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top-selling products based on total sales in the last month?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE) - 1 AND YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY od.ProductID, p.ProductName ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the product with the most significant percentage sales growth month-over-month.",
        "output": "SELECT p.ProductID, ((SUM(CASE WHEN EXTRACT(MONTH FROM od.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) THEN od.Quantity ELSE 0 END) - SUM(CASE WHEN EXTRACT(MONTH FROM od.OrderDate) = EXTRACT(MONTH FROM DATE_ADD('month', -1, CURRENT_DATE)) THEN od.Quantity ELSE 0 END)) / NULLIF(SUM(CASE WHEN EXTRACT(MONTH FROM od.OrderDate) = EXTRACT(MONTH FROM DATE_ADD('month', -1, CURRENT_DATE)) THEN od.Quantity ELSE 0 END), 0)) * 100 AS SalesGrowth FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY SalesGrowth DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average number of orders processed per employee each month?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) / COUNT(DISTINCT EXTRACT(YEAR_MONTH FROM orders.OrderDate)) AS AvgOrdersPerMonth FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average fulfillment time for orders in Q1 2023?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which products are most frequently ordered together?",
        "output": "SELECT od1.ProductID, od2.ProductID, COUNT(*) AS OrderedTogetherCount FROM [Order Details] od1 JOIN [Order Details] od2 ON od1.OrderID = od2.OrderID AND od1.ProductID < od2.ProductID GROUP BY od1.ProductID, od2.ProductID ORDER BY OrderedTogetherCount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the average order quantity per product.",
        "output": "SELECT p.ProductName, AVG(od.Quantity) AS AverageQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which recipient received the highest number of shipments?",
        "output": "SELECT ShipName, COUNT(OrderID) AS NumShipments FROM orders GROUP BY ShipName ORDER BY NumShipments DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the distribution of order quantities for each employee over the last three months?",
        "output": "SELECT e.FirstName, e.LastName, od.Quantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY e.FirstName, e.LastName, od.Quantity ORDER BY od.Quantity;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have an inventory turnover ratio below the average?",
        "output": "SELECT ProductName FROM (SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS TurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName) AS Turnover WHERE TurnoverRatio < (SELECT AVG(TurnoverRatio) FROM (SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS TurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID) AS AvgTurnover);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many active products have stock quantities between their reorder level and maximum?",
        "output": "SELECT COUNT(ProductID) FROM products WHERE UnitsInStock > ReorderLevel AND Discontinued = 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top 5 customers by total revenue.",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the most popular product by quantity ordered?",
        "output": "SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY SUM(od.Quantity) DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Who are the top 5 customers by lifetime value?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC LIMIT 5",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the products with the most stock variability (highest fluctuation).",
        "output": "SELECT ProductName, MAX(UnitsInStock) - MIN(UnitsInStock) AS StockVariance FROM products GROUP BY ProductName ORDER BY StockVariance DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have earned a salary above the average?",
        "output": "SELECT employees.EmployeeID FROM employees WHERE Salary > (SELECT AVG(Salary) FROM employees);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have more than five years of employment?",
        "output": "SELECT EmployeeID FROM employees WHERE DATEDIFF(CURRENT_DATE, HireDate) / 365 > 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What are the top three regions with the highest on-time delivery rate?",
        "output": "SELECT ShipRegion, 100.0 * COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipRegion ORDER BY OnTimeDeliveryRate DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest orders on discount?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice * od.Discount) AS DiscountedRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0 GROUP BY p.ProductID, p.ProductName ORDER BY DiscountedRevenue DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the top 5 products with the highest revenue?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average inventory level for each supplier?",
        "output": "SELECT SupplierID, AVG(UnitsInStock) AS AvgInventory FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the top 3 regions with the highest order volumes?",
        "output": "SELECT territories.TerritoryDescription, COUNT(orders.OrderID) AS order_count FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryDescription ORDER BY order_count DESC LIMIT 3",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount applied to each product?",
        "output": "SELECT p.ProductName, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many sales were made by employees hired in the last year?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS RecentSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE e.HireDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units of each product are on order?",
        "output": "SELECT ProductID, UnitsOnOrder FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which orders were shipped after the required date?",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product has the highest sales revenue?",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID, products.ProductName ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the most frequently ordered product?",
        "output": "SELECT ProductName, COUNT([Order Details].OrderID) AS OrderCount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName ORDER BY OrderCount DESC FETCH FIRST 1 ROW ONLY;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total discount provided by each employee?",
        "output": "SELECT e.EmployeeID, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order for the last month?",
        "output": "SELECT AVG(Freight) FROM orders WHERE OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total sales revenue for each category?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers placed orders in January that were shipped by a specific shipping method?",
        "output": "SELECT DISTINCT customers.CompanyName FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE EXTRACT(MONTH FROM orders.OrderDate) = 1 AND orders.ShipVia = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total potential revenue for products in stock.",
        "output": "SELECT SUM(products.UnitPrice * products.UnitsInStock) AS TotalPotentialRevenue FROM products WHERE products.Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many returning customers were there in 2023?",
        "output": "SELECT COUNT(DISTINCT o1.CustomerID) AS returning_customers FROM orders o1 WHERE o1.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND o1.CustomerID IN (SELECT DISTINCT o2.CustomerID FROM orders o2 WHERE o2.OrderDate < '2023-01-01')",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has generated the highest total sales?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the Customer Lifetime Value for each customer.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time for each supplier's deliveries?",
        "output": "SELECT s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total discount given per month in 2023?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE YEAR(OrderDate) = 2023 GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the product with the highest inventory turnover ratio?",
        "output": "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many units of each product are on order?",
        "output": "SELECT ProductID, ProductName, UnitsOnOrder FROM products WHERE UnitsOnOrder > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were fulfilled on time this month?",
        "output": "SELECT COUNT(orders.OrderID) AS on_time_orders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND MONTH(orders.ShippedDate) = MONTH(CURRENT_DATE) AND YEAR(orders.ShippedDate) = YEAR(CURRENT_DATE)",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the trend in the number of orders over time?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY Month ORDER BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find products with a sales decline over the past three months.",
        "output": "SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IN (SELECT OrderID FROM orders WHERE OrderDate BETWEEN DATEADD(MONTH, -3, CURRENT_DATE) AND CURRENT_DATE) GROUP BY p.ProductID, p.ProductName HAVING SUM(CASE WHEN OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) THEN od.Quantity ELSE 0 END) < SUM(CASE WHEN OrderDate < DATEADD(MONTH, -1, CURRENT_DATE) THEN od.Quantity ELSE 0 END) ORDER BY SUM(od.Quantity) DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time taken to fulfill orders each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month ORDER BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What percentage of orders were placed by returning customers?",
        "output": "SELECT COUNT(DISTINCT o.CustomerID) * 100.0 / (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR)) AS ReturningCustomerPercentage FROM orders o WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) AND o.CustomerID IN (SELECT CustomerID FROM orders WHERE OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR));",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How much revenue did each region generate?",
        "output": "SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Revenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest total sales so far this year?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What are the top 3 employees by sales amount?",
        "output": "SELECT EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SalesAmount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EmployeeID ORDER BY SalesAmount DESC LIMIT 3",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee had the highest sales last month?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the shipping cost per order for each shipping method?",
        "output": "SELECT ShipVia, AVG(Freight) AS avg_shipping_cost FROM orders GROUP BY ShipVia",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the products with below-average sales but above-average stock levels?",
        "output": "SELECT ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName HAVING SUM(Quantity) < (SELECT AVG(total_quantity) FROM (SELECT SUM(Quantity) AS total_quantity FROM [Order Details] GROUP BY ProductID) AS subquery) AND AVG(products.UnitsInStock) > (SELECT AVG(UnitsInStock) FROM products)",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product had the highest sales volume last quarter?",
        "output": "SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE QUARTER(o.OrderDate) = QUARTER(CURDATE() - INTERVAL 3 MONTH) AND YEAR(o.OrderDate) = YEAR(CURDATE() - INTERVAL 3 MONTH) GROUP BY od.ProductID ORDER BY TotalQuantity DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What are the total sales for each shipping country?",
        "output": "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the rate of orders with a fulfillment time under 5 days?",
        "output": "SELECT (CAST(COUNT(CASE WHEN DATEDIFF(ShippedDate, OrderDate) < 5 THEN OrderID END) AS FLOAT) / COUNT(OrderID)) * 100 AS QuickFulfillmentRate FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who are the top 5 sales employees based on total sales?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average age of employees?",
        "output": "SELECT AVG(TIMESTAMPDIFF(YEAR, BirthDate, CURDATE())) AS AvgAge FROM employees;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders have been shipped late?",
        "output": "SELECT COUNT(*) FROM orders WHERE orders.ShippedDate > orders.RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest average monthly sales growth?",
        "output": "SELECT ProductID, (SUM([Order Details].Quantity) / COUNT(DISTINCT EXTRACT(YEAR_MONTH FROM order_date))) AS AvgMonthlySalesGrowth FROM [Order Details] GROUP BY ProductID ORDER BY AvgMonthlySalesGrowth DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the month with the highest sales volume.",
        "output": "SELECT EXTRACT(YEAR FROM orders.order_date) AS Year, EXTRACT(MONTH FROM orders.order_date) AS Month, SUM([Order Details].Quantity) AS TotalSalesVolume FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Year, Month ORDER BY TotalSalesVolume DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have not processed any orders?",
        "output": "SELECT employees.EmployeeID FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders have been delivered on time?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate <= RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find products with the highest unit price and lowest quantity in stock.",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock = (SELECT MIN(UnitsInStock) FROM products) ORDER BY UnitPrice DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many unique customers placed orders each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What percentage of orders are completed without any discount?",
        "output": "SELECT COUNT(DISTINCT OrderID) * 1.0 / NULLIF((SELECT COUNT(DISTINCT OrderID) FROM [Order Details]), 0) AS NoDiscountRate FROM [Order Details] WHERE Discount = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the shortest average lead time?",
        "output": "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify suppliers with more than five discontinued products.",
        "output": "SELECT s.SupplierID FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.Discontinued = 1 GROUP BY s.SupplierID HAVING COUNT(p.ProductID) > 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify cities with the highest average order fulfillment time.",
        "output": "SELECT ShipCity, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipCity ORDER BY AvgFulfillmentTime DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost for orders shipped in December?",
        "output": "SELECT AVG(Freight) AS AverageFreightCost FROM orders WHERE EXTRACT(MONTH FROM ShippedDate) = 12",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total revenue generated from orders in the last month?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for the electronics category in 2023?",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID JOIN orders o ON od.OrderID = o.OrderID WHERE c.CategoryName = 'Electronics' AND YEAR(o.OrderDate) = 2023",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top 5 countries in terms of supplier presence?",
        "output": "SELECT Country, COUNT(DISTINCT SupplierID) AS SupplierCount FROM suppliers GROUP BY Country ORDER BY SupplierCount DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which categories have the highest number of discontinued products?",
        "output": "SELECT CategoryID, COUNT(*) AS DiscontinuedCount FROM products WHERE Discontinued = 1 GROUP BY CategoryID ORDER BY DiscontinuedCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product has generated the highest revenue?",
        "output": "SELECT ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] GROUP BY ProductID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product generated the highest revenue last quarter?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE QUARTER(o.OrderDate) = QUARTER(CURRENT_DATE) - 1 AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY od.ProductID ORDER BY Revenue DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product categories generate the most revenue?",
        "output": "SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS Revenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID ORDER BY Revenue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the monthly sales performance for each product?",
        "output": "SELECT ProductName, SUM([Order Details].Quantity) AS MonthlySales, EXTRACT(MONTH FROM OrderDate) AS Month FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ProductName, Month ORDER BY ProductName, Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How does the sales quantity for a product change each month?",
        "output": "SELECT P.ProductID, EXTRACT(MONTH FROM O.OrderDate) AS Month, SUM(OD.Quantity) AS MonthlyQuantity FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID JOIN orders O ON OD.OrderID = O.OrderID GROUP BY P.ProductID, EXTRACT(MONTH FROM O.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify trends in product sales over the last year using monthly data.",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, ProductID, SUM(Quantity) AS TotalSold FROM [Order Details] WHERE OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY EXTRACT(MONTH FROM OrderDate), ProductID ORDER BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the growth rate of sales for each employee over the past year?",
        "output": "SELECT e.EmployeeID, (SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) / NULLIF(SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END), 0) AS GrowthRate FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the orders shipped with discount greater than 10%.",
        "output": "SELECT OrderID FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE [Order Details].Discount > 0.10;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the monthly trend of order values for the top 3 customers by sales?",
        "output": "SELECT customers.CustomerID, DATE_TRUNC('month', orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID, month ORDER BY order_value DESC LIMIT 3",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity ordered for discontinued products?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1 GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many distinct customers made a purchase in Q1 2023 versus Q2 2023?",
        "output": "SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31') AS Q1_customers, (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30') AS Q2_customers",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping time for orders shipped to each region?",
        "output": "SELECT ShipRegion, AVG(DATE_PART('day', ShippedDate - OrderDate)) AS AvgShipTime FROM orders GROUP BY ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total discount given on all orders each month?",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What are the top five cities with the highest sales revenue?",
        "output": "SELECT ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CitySales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCity ORDER BY CitySales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount offered on products?",
        "output": "SELECT AVG(Discount) FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total number of products that are out of stock?",
        "output": "SELECT COUNT(*) FROM products WHERE UnitsInStock = 0",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer generated the most revenue last year?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= '2022-01-01' AND o.OrderDate <= '2022-12-31' GROUP BY c.CustomerID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many distinct products have been sold?",
        "output": "SELECT COUNT(DISTINCT ProductID) FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average time taken to fulfill orders per month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(DATE_DIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY month",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total order quantity for each product?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales for each product?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] GROUP BY [Order Details].ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product generates the highest revenue?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalRevenue FROM [Order Details] GROUP BY ProductID ORDER BY TotalRevenue DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average fulfillment time for orders in 2023?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which category of products generated the most sales in 2023?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY categories.CategoryName ORDER BY sales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the trend of total sales revenue over the past year?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY DATE_FORMAT(OrderDate, '%Y-%m') DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the products with the largest discrepancies between units on order and units in stock.",
        "output": "SELECT ProductID, ProductName, UnitsOnOrder - UnitsInStock AS Discrepancy FROM products ORDER BY Discrepancy DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which suppliers have the lowest average lead time for delivery?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY avg_lead_time ASC",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the growth rate in customer orders year over year?",
        "output": "SELECT EXTRACT(YEAR FROM o.OrderDate) AS Year, COUNT(o.OrderID) AS OrderCount, COUNT(o.OrderID) - LAG(COUNT(o.OrderID)) OVER (ORDER BY EXTRACT(YEAR FROM o.OrderDate)) AS OrderGrowth FROM orders o GROUP BY EXTRACT(YEAR FROM o.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated by employees hired in the last five years?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE employees.HireDate >= DATE_SUB(CURRENT_DATE, INTERVAL 5 YEAR) GROUP BY employees.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total quantity ordered for products with discontinued status?",
        "output": "SELECT SUM(Quantity) FROM [Order Details] INNER JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time for the last 6 months?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time FROM orders WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List orders with a required date earlier than the order date.",
        "output": "SELECT OrderID FROM orders WHERE RequiredDate < OrderDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of orders shipped by each shipping method per employee?",
        "output": "SELECT employees.EmployeeID, ShipVia, COUNT(orders.OrderID) AS ShippedOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have received the highest total discount amounts?",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Discount * [Order Details].Quantity) AS Total_Discount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY Total_Discount DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the difference in total revenue between 2021 and 2022?",
        "output": "SELECT (SUM(CASE WHEN YEAR(OrderDate) = 2022 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - SUM(CASE WHEN YEAR(OrderDate) = 2021 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) AS RevenueDifference FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have placed more than 10 orders?",
        "output": "SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees who report to a specific manager.",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName FROM employees WHERE employees.ReportsTo = ?;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest inventory turnover ratio?",
        "output": "SELECT products.ProductID, (SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0)) AS InventoryTurnoverRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID ORDER BY InventoryTurnoverRatio DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount applied per unit across all orders?",
        "output": "SELECT AVG(od.Discount) AS AverageDiscount FROM [Order Details] od;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products have more units on order than in stock?",
        "output": "SELECT COUNT(*) FROM products WHERE UnitsOnOrder > UnitsInStock;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average discount given per order item?",
        "output": "SELECT AVG([Order Details].Discount) AS avg_discount_given FROM [Order Details]",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city has the highest average shipping cost per order?",
        "output": "SELECT ShipCity, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipCity ORDER BY AverageFreight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What proportion of customers are from a specific demographic type?",
        "output": "SELECT customerDemographics.CustomerDesc, COUNT(customers.CustomerID) AS customer_count, COUNT(customers.CustomerID) * 1.0 / (SELECT COUNT(*) FROM customers) AS proportion FROM customerCustomerDemo JOIN customers ON customerCustomerDemo.CustomerID = customers.CustomerID JOIN customerDemographics ON customerCustomerDemo.CustomerTypeID = customerDemographics.CustomerTypeID GROUP BY customerDemographics.CustomerDesc",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the correlation between employee sales and order fulfillment time?",
        "output": "SELECT employees.EmployeeID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID ORDER BY employee_sales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Name suppliers who have never been involved in any orders.",
        "output": "SELECT suppliers.CompanyName FROM suppliers WHERE suppliers.SupplierID NOT IN (SELECT DISTINCT products.SupplierID FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 5 products by units sold?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalSold DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders require shipping but have not yet been shipped per employee?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS UnshippedOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate IS NULL AND orders.RequiredDate IS NOT NULL GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product categories are generating the most revenue?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS revenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY revenue DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products that have never been ordered.",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which month had the highest total sales revenue in 2023?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(OrderDate) = 2023 GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which products have a high sales volume due to specific employees?",
        "output": "SELECT [Order Details].ProductID, employees.EmployeeID, SUM([Order Details].Quantity) AS TotalQuantity FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY [Order Details].ProductID, employees.EmployeeID HAVING SUM([Order Details].Quantity) > 1000;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have sales in more than three different countries?",
        "output": "SELECT e.EmployeeID, COUNT(DISTINCT o.ShipCountry) AS Countries FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID HAVING Countries > 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which region experiences the most delays in shipments?",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS DelayedShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipRegion ORDER BY DelayedShipments DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which category of products has the highest number of units sold?",
        "output": "SELECT CategoryID, SUM([Order Details].Quantity) AS TotalSold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID ORDER BY TotalSold DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products below their reorder levels.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product category has the highest average unit price?",
        "output": "SELECT categories.CategoryName, AVG(products.UnitPrice) AS avg_unit_price FROM products JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY avg_unit_price DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of products are currently discontinued?",
        "output": "SELECT COUNT(CASE WHEN products.Discontinued = 1 THEN 1 END) * 100.0 / COUNT(products.ProductID) AS discontinued_percentage FROM products",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer has placed the highest number of orders?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales generated by each employee in 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employees who have a higher salary than the average salary.",
        "output": "SELECT EmployeeID, CONCAT(FirstName, ' ', LastName) AS EmployeeName FROM employees WHERE Salary > (SELECT AVG(Salary) FROM employees);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders handled by each employee?",
        "output": "SELECT EmployeeID, COUNT(*) AS OrdersHandled FROM orders GROUP BY EmployeeID ORDER BY OrdersHandled DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the names and unit prices of all products that are currently in stock?",
        "output": "SELECT ProductName, UnitPrice FROM products WHERE UnitsInStock > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the on-time delivery rate per month?",
        "output": "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS Month, COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 1.0 / COUNT(orders.OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM')",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which suppliers have the slowest lead times in the last year?",
        "output": "SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS avg_lead_time FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY s.SupplierID ORDER BY avg_lead_time DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What was the average time taken to fulfill orders each month?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Year, Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total revenue generated by each product.",
        "output": "SELECT ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the customer retention rate for Q2 2023?",
        "output": "SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30')::FLOAT / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-04-01') AS retention_rate",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have never been ordered?",
        "output": "SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers with orders shipped within 7 days of the order date.",
        "output": "SELECT c.CustomerID, o.OrderID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE DATEDIFF(o.ShippedDate, o.OrderDate) <= 7;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What are the top 3 shipping addresses based on frequency of deliveries?",
        "output": "SELECT ShipAddress, COUNT(*) AS DeliveryCount FROM orders GROUP BY ShipAddress ORDER BY DeliveryCount DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products from each supplier are on order?",
        "output": "SELECT p.SupplierID, COUNT(*) AS ProductsOnOrder FROM products p WHERE p.UnitsOnOrder > 0 GROUP BY p.SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the top 5 best-selling products based on order quantity.",
        "output": "SELECT ProductID, ProductName, SUM(Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductID, ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the least sold product and the number of units sold.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY TotalSold ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee generated the most sales revenue in 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the average discount given to products per month.",
        "output": "SELECT MONTH(OrderDate) AS Month, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY MONTH(OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total value of current inventory for each supplier?",
        "output": "SELECT SupplierID, SUM(UnitsInStock * UnitPrice) AS InventoryValue FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List all customers who placed orders in the first quarter of 2023.",
        "output": "SELECT DISTINCT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31';",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average freight cost of all orders?",
        "output": "SELECT AVG(o.Freight) AS AvgFreightCost FROM orders o;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost for orders handled by each employee?",
        "output": "SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the monthly trend of quantities sold for each product.",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, p.ProductName, SUM(od.Quantity) AS MonthlyQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY DATE_TRUNC('month', OrderDate), p.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many units of each product were sold monthly?",
        "output": "SELECT products.ProductID, DATE_TRUNC('month', orders.OrderDate) AS order_month, SUM([Order Details].Quantity) AS units_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductID, order_month",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total potential revenue from products not yet ordered?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) AS PotentialRevenue FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the top 3 countries by total supplier revenue.",
        "output": "SELECT suppliers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CountryRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.Country ORDER BY CountryRevenue DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has generated the highest sales revenue?",
        "output": "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time in days for each month?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Year, Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How does the on-time delivery rate vary by region?",
        "output": "SELECT ShipRegion, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID)) * 100 AS on_time_delivery_rate FROM orders GROUP BY ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How does the average order value change per region?",
        "output": "SELECT c.Region, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Region",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of orders shipped on time by each employee?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OnTimeOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY employees.EmployeeID",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How much total revenue did each product category generate in 2023?",
        "output": "SELECT c.CategoryName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS total_revenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = 2023 GROUP BY c.CategoryName",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the top 5 products with the highest sales revenue.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS SalesRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SalesRevenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier provides the maximum number of products?",
        "output": "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS TotalProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY TotalProducts DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which month has the highest on-time delivery rate?",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID)) AS OnTimeRate FROM orders GROUP BY Month ORDER BY OnTimeRate DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the total sales and total discount for each product.",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales, SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the average unit price of products supplied by each supplier.",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AverageUnitPrice FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which region has the highest total sales?",
        "output": "SELECT Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Region ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method tends to have the fastest fulfillment time?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia ORDER BY AvgFulfillmentTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue generated monthly?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY month",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify suppliers whose products have the lowest average inventory.",
        "output": "SELECT SupplierID, AVG(UnitsInStock) AS AverageInventory FROM products GROUP BY SupplierID ORDER BY AverageInventory ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which city has the largest number of employees based on their address?",
        "output": "SELECT City, COUNT(EmployeeID) AS EmployeeCount FROM employees GROUP BY City ORDER BY EmployeeCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which orders include products that are currently out of stock?",
        "output": "SELECT DISTINCT OrderID FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.UnitsInStock = 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped with each shipping method?",
        "output": "SELECT ShipVia, COUNT(*) AS OrdersShipped FROM orders GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which orders were delivered on time in 2023?",
        "output": "SELECT orders.OrderID FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed by each customer in the last year?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= DATEADD(year, -1, CURRENT_DATE) GROUP BY CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price for products from each supplier?",
        "output": "SELECT s.SupplierID, AVG(p.UnitPrice) AS AverageUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units of each product have been ordered so far?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalOrdered FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the current stock level of each product?",
        "output": "SELECT ProductName, UnitsInStock FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products that need to be reordered based on their reorder level.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customer placed the most orders?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List all products that are currently out of stock.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time by region?",
        "output": "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which city has the highest number of returning customers?",
        "output": "SELECT customers.City, COUNT(DISTINCT orders.CustomerID) AS returning_customers FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.CustomerID IN (SELECT o.CustomerID FROM orders o WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') AND orders.OrderDate < '2023-01-01' GROUP BY customers.City ORDER BY returning_customers DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average number of days late for orders shipped past the required date?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgDaysLate FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has generated the highest sales revenue this year?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all orders where the freight cost exceeded $100.",
        "output": "SELECT * FROM orders WHERE Freight > 100;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month had the highest number of late deliveries?",
        "output": "SELECT DATE_TRUNC('month', ShippedDate) AS Month, COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) AS LateDeliveries FROM orders GROUP BY Month ORDER BY LateDeliveries DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest total revenue from product sales?",
        "output": "SELECT s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.CompanyName ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the top 3 employees by total sales in 2023.",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName ORDER BY total_sales DESC LIMIT 3",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which shipper was used the most last year?",
        "output": "SELECT o.ShipVia, COUNT(o.OrderID) AS ShipCount FROM orders o WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY o.ShipVia ORDER BY ShipCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Who are the top five customers by total ordered quantity?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].Quantity) AS TotalQuantity FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Compare shipping costs across different shipping companies.",
        "output": "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM shippers JOIN orders ON shippers.ShipperID = orders.ShipVia GROUP BY shippers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many units of discontinued products are still in stock?",
        "output": "SELECT SUM(UnitsInStock) FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the most recent order details for a specific customer.",
        "output": "SELECT customers.CustomerID, orders.OrderID, orders.OrderDate FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE customers.CustomerID = 'specific_customer_id' ORDER BY orders.OrderDate DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the product with the largest discrepancy between units in stock and on order.",
        "output": "SELECT ProductName FROM products ORDER BY ABS(UnitsInStock - UnitsOnOrder) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the monthly shipping costs across different shipping methods?",
        "output": "SELECT EXTRACT(YEAR FROM orders.OrderDate) AS year, EXTRACT(MONTH FROM orders.OrderDate) AS month, orders.ShipVia, AVG(orders.Freight) AS avg_shipping_cost FROM orders GROUP BY year, month, orders.ShipVia",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the customers with the highest order frequency in the last year.",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderFrequency FROM orders WHERE OrderDate > CURRENT_DATE - INTERVAL '1 year' GROUP BY CustomerID ORDER BY OrderFrequency DESC LIMIT 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue contribution from each supplier?",
        "output": "SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the average reorder level for each category.",
        "output": "SELECT c.CategoryName, AVG(p.ReorderLevel) AS AverageReorderLevel FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the product performance metric for the last six months?",
        "output": "SELECT p.ProductID, SUM(od.Quantity) AS PerformanceMetric FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= DATEADD(month, -6, CURRENT_DATE) GROUP BY p.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the trend of average order value over the past year?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS average_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE() GROUP BY month ORDER BY month",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the total number of orders for each product.",
        "output": "SELECT products.ProductName, COUNT(DISTINCT [Order Details].OrderID) AS TotalOrders FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company has the highest average freight cost?",
        "output": "SELECT ShipVia, AVG(Freight) AS avg_freight FROM orders GROUP BY ShipVia ORDER BY avg_freight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the employee with the most orders shipped before the required date.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) as EarlyShipments FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate < o.RequiredDate GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY EarlyShipments DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the average discount given per order.",
        "output": "SELECT AVG(od.Discount) AS AvgDiscount FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many unique products have been ordered in the last year?",
        "output": "SELECT COUNT(DISTINCT ProductID) FROM [Order Details] o JOIN orders ON o.OrderID = orders.OrderID WHERE EXTRACT(YEAR FROM orders.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for orders shipped in the last quarter?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShippedDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months';",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List products with the highest total sales value.",
        "output": "SELECT ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY ProductName ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were shipped after the required date?",
        "output": "SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the monthly trend in sales quantity for each product?",
        "output": "SELECT ProductID, EXTRACT(MONTH FROM OrderDate) AS Month, SUM(Quantity) AS MonthlySales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ProductID, Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average supplier lead time for each supplier?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID, suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many unique customers placed orders with discounts greater than 20%?",
        "output": "SELECT COUNT(DISTINCT orders.CustomerID) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE [Order Details].Discount > 0.2",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest units on order but are still in stock?",
        "output": "SELECT ProductName FROM products WHERE UnitsOnOrder > 0 AND UnitsInStock > 0 ORDER BY UnitsOnOrder DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employee sales on each day of a specific month.",
        "output": "SELECT e.EmployeeID, o.OrderDate, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS DailySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = %s AND YEAR(o.OrderDate) = %s GROUP BY e.EmployeeID, o.OrderDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products whose sales volume exceeds 100 units in the past month.",
        "output": "SELECT products.ProductName FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderDate >= DATEADD(month, -1, CURRENT_DATE) GROUP BY products.ProductName HAVING SUM([Order Details].Quantity) > 100;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total revenue for each shipping country.",
        "output": "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time for each supplier in delivering their products?",
        "output": "SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee was hired most recently?",
        "output": "SELECT FirstName, LastName, HireDate FROM employees ORDER BY HireDate DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the total quantity sold for each supplier.",
        "output": "SELECT p.SupplierID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees who have processed orders only within a specific country.",
        "output": "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(DISTINCT o.ShipCountry) = 1 AND MAX(o.ShipCountry) = 'Specific Country';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total sales revenue for each supplier for the last quarter.",
        "output": "SELECT SupplierID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE QUARTER(OrderDate) = QUARTER(CURDATE()) - 1 GROUP BY SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost for each shipping company?",
        "output": "SELECT ShipVia, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average hiring duration of employees in correlation to their sales?",
        "output": "SELECT AVG(DATEDIFF(CURDATE(), e.HireDate)) AS AvgHireDuration, AVG(sales.TotalSales) AS AvgSales FROM employees e JOIN (SELECT o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID) sales ON e.EmployeeID = sales.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of products were shipped via each shipping method?",
        "output": "SELECT ShipVia, COUNT(orders.OrderID) * 100.0 / (SELECT COUNT(*) FROM orders) AS shipping_method_percentage FROM orders GROUP BY ShipVia",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total discount value given for each order?",
        "output": "SELECT od.OrderID, SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscount FROM [Order Details] od GROUP BY od.OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the correlation between unit price and quantity ordered for each product?",
        "output": "SELECT ProductID, CORR(UnitPrice, Quantity) AS PriceQuantityCorrelation FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the most common ship region for orders?",
        "output": "SELECT orders.ShipRegion, COUNT(orders.OrderID) AS RegionCount FROM orders GROUP BY orders.ShipRegion ORDER BY RegionCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for each product category in June 2023?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE DATE_FORMAT(orders.OrderDate, '%Y-%m') = '2023-06' GROUP BY categories.CategoryName",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Are there any orders with zero freight costs, and if so, how many?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE Freight = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee has the highest sales in the western region?",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID WHERE territories.RegionID = (SELECT RegionID FROM region WHERE RegionDescription = 'Western') GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the trend of order fulfillment time over the last year.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the top 5 customers by lifetime value.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY LifetimeValue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which month had the highest number of orders?",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EXTRACT(MONTH FROM OrderDate) ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What percentage of customers are returning customers within the last month?",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN CURRENT_DATE - INTERVAL '1 month' AND CURRENT_DATE THEN orders.CustomerID END) / COUNT(DISTINCT orders.CustomerID)) * 100 AS RetentionRate FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate < CURRENT_DATE - INTERVAL '1 month';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of orders placed per month?",
        "output": "SELECT TO_CHAR(o.OrderDate, 'YYYY-MM') AS Month, COUNT(o.OrderID) AS NumberOfOrders FROM orders o GROUP BY TO_CHAR(o.OrderDate, 'YYYY-MM');",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the frequency distribution of order quantities?",
        "output": "SELECT Quantity, COUNT(*) AS Frequency FROM [Order Details] GROUP BY Quantity ORDER BY Frequency DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the most common shipping method used?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the product with the highest inventory turnover ratio.",
        "output": "SELECT p.ProductID, (SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0)) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY InventoryTurnoverRatio DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the trend of total sales revenue over the quarters?",
        "output": "SELECT DATE_TRUNC('quarter', o.OrderDate) AS Quarter, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Quarter ORDER BY Quarter;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Compute the total inventory value grouped by supplier.",
        "output": "SELECT SupplierID, SUM(UnitPrice * UnitsInStock) as InventoryValue FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers who have never received a discount.",
        "output": "SELECT CustomerID FROM customers WHERE NOT EXISTS (SELECT 1 FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE customers.CustomerID = o.CustomerID AND od.Discount > 0);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top 5 products by sales revenue, and which suppliers provide them?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue, p.SupplierID FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY od.ProductID, p.SupplierID ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer generated the highest revenue in the last year?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY customers.CustomerID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average customer rating per order (assuming ratings are stored)?",
        "output": "SELECT OrderID, AVG(Rating) AS AvgRating FROM RatingsTable GROUP BY OrderID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What percentage of products are currently discontinued?",
        "output": "SELECT (COUNT(CASE WHEN Discontinued = 1 THEN ProductID END) * 1.0 / COUNT(ProductID) * 100) AS PercentageDiscontinued FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders were delivered on time in June 2023?",
        "output": "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-06-01' AND '2023-06-30'",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the most common discount given on products?",
        "output": "SELECT [Order Details].Discount, COUNT(*) AS count FROM [Order Details] GROUP BY [Order Details].Discount ORDER BY count DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have placed orders totaling more than $10,000?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSpent FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID HAVING TotalSpent > 10000;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How does the shipping cost vary by region?",
        "output": "SELECT ShipRegion, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product has the highest sales volume this quarter?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE QUARTER(orders.OrderDate) = QUARTER(CURDATE()) AND YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY products.ProductID ORDER BY sales_volume DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total discount amount applied by each employee?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].Discount * [Order Details].UnitPrice * [Order Details].Quantity) AS TotalDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the sales growth percentage for each employee from the previous month.",
        "output": "SELECT e.EmployeeID, ((SUM(CASE WHEN MONTH(o.OrderDate) = 6 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END) - SUM(CASE WHEN MONTH(o.OrderDate) = 5 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END)) / NULLIF(SUM(CASE WHEN MONTH(o.OrderDate) = 5 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END), 0)) * 100 AS GrowthPercentage FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] ON o.OrderID = [Order Details].OrderID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue generated by each supplier?",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID, suppliers.CompanyName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How do discount rates impact the average order value?",
        "output": "SELECT AVG(([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) AS avg_order_value, [Order Details].Discount FROM [Order Details] GROUP BY [Order Details].Discount",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the maximum, minimum, and average shipping cost for orders shipped within Europe?",
        "output": "SELECT MAX(Freight) AS MaxCost, MIN(Freight) AS MinCost, AVG(Freight) AS AvgCost FROM orders WHERE ShipCountry IN ('France', 'Germany', 'Italy');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "List the top 5 products with the highest inventory levels.",
        "output": "SELECT ProductName FROM products ORDER BY UnitsInStock DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees with a salary above the average and who have generated above-average sales.",
        "output": "WITH AvgSalary AS (SELECT AVG(Salary) AS AvgSal FROM employees), AvgSales AS (SELECT AVG(TotalSales) AS AvgEmpSales FROM (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID) Sub) SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e JOIN AvgSalary a ON e.Salary > a.AvgSal JOIN (SELECT e2.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS EmpSales FROM employees e2 JOIN orders o2 ON e2.EmployeeID = o2.EmployeeID JOIN [Order Details] od ON o2.OrderID = od.OrderID GROUP BY e2.EmployeeID) s ON e.EmployeeID = s.EmployeeID JOIN AvgSales av ON s.EmpSales > av.AvgEmpSales;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many different customers placed orders in January 2022?",
        "output": "SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate BETWEEN '2022-01-01' AND '2022-01-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find products with below-average unit prices.",
        "output": "SELECT ProductName FROM products WHERE UnitPrice < (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the most frequently ordered product.",
        "output": "SELECT ProductID, COUNT(ProductID) AS OrderFrequency FROM [Order Details] GROUP BY ProductID ORDER BY OrderFrequency DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the products with the highest discount rate.",
        "output": "SELECT od.ProductID, MAX(od.Discount) AS MaxDiscount FROM [Order Details] od GROUP BY od.ProductID ORDER BY MaxDiscount DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total value of products currently in stock?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) AS TotalStockValue FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average fulfillment time for orders shipped by each method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the distribution of employee sales across different regions.",
        "output": "SELECT e.EmployeeID, o.ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, o.ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Compare the sales performance of all products per quarter.",
        "output": "SELECT p.ProductName, DATE_TRUNC('quarter', o.OrderDate) AS Quarter, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID GROUP BY p.ProductName, Quarter;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find orders that were shipped after the required date and provide their details.",
        "output": "SELECT * FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time for each shipping method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS average_fulfillment_time FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue for the current year?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE)",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers have ordered more than 10 times?",
        "output": "SELECT COUNT(*) FROM (SELECT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 10) AS subquery;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total sales revenue generated by each product?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales value generated by each employee in the last month?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND o.OrderDate < CURDATE() GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the average order size in terms of total items.",
        "output": "SELECT AVG(TotalItems) AS AverageOrderSize FROM (SELECT OrderID, SUM(Quantity) AS TotalItems FROM [Order Details] GROUP BY OrderID) AS OrderSizes;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find employees whose most common shipment destination is outside their country of residence.",
        "output": "SELECT e.FirstName, e.LastName, most_common.ShipCountry FROM (SELECT o.EmployeeID, o.ShipCountry, COUNT(*) as cnt, RANK() OVER (PARTITION BY o.EmployeeID ORDER BY COUNT(*) DESC) as rnk FROM orders o GROUP BY o.EmployeeID, o.ShipCountry) as most_common JOIN employees e ON e.EmployeeID = most_common.EmployeeID WHERE most_common.rnk = 1 AND most_common.ShipCountry <> e.Country;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost per region?",
        "output": "SELECT ShipRegion, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees with no sales in the last month.",
        "output": "SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE) WHERE o.OrderID IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How much freight cost did we incur last month?",
        "output": "SELECT SUM(o.Freight) AS TotalFreightLastMonth FROM orders o WHERE o.OrderDate >= DATEADD(MONTH, DATEDIFF(MONTH, 0, CURRENT_DATE) - 1, 0) AND o.OrderDate < DATEADD(MONTH, DATEDIFF(MONTH, 0, CURRENT_DATE), 0);",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the average shipping time for orders.",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM orders WHERE ShippedDate IS NOT NULL",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers provide products that are currently reordered the most?",
        "output": "SELECT SupplierID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products WHERE UnitsOnOrder > 0 GROUP BY SupplierID ORDER BY TotalUnitsOnOrder DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the product with the lowest unit price that is not discontinued.",
        "output": "SELECT ProductName, UnitPrice FROM products WHERE Discontinued = 0 ORDER BY UnitPrice ASC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which categories have the highest total sales?",
        "output": "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID ORDER BY TotalSales DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product has the highest total sales?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS ProductSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY ProductSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of orders shipped last month?",
        "output": "SELECT COUNT(orders.OrderID) AS Shipped_Orders FROM orders WHERE MONTH(orders.ShippedDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.ShippedDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH);",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier is used the least for orders based on total sales?",
        "output": "SELECT suppliers.SupplierID, CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID, CompanyName ORDER BY TotalSales ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount given on orders for each supplier?",
        "output": "SELECT suppliers.CompanyName, AVG([Order Details].Discount) AS AvgDiscount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the total sales revenue for each supplier.",
        "output": "SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate total sales per month.",
        "output": "SELECT EXTRACT(MONTH FROM orders.OrderDate) AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EXTRACT(MONTH FROM orders.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers are there in each region?",
        "output": "SELECT c.Region, COUNT(c.CustomerID) AS CustomerCount FROM customers c GROUP BY c.Region;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount given on orders per month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Discount) AS AvgDiscount FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest number of unique products?",
        "output": "SELECT s.CompanyName, COUNT(DISTINCT p.ProductID) AS UniqueProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY UniqueProducts DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee handles the most orders shipped late?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY EmployeeID ORDER BY LateOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which country has the highest number of orders?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipCountry ORDER BY TotalOrders DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top 5 cities where suppliers are located?",
        "output": "SELECT suppliers.City, COUNT(*) AS SupplierCount FROM suppliers GROUP BY suppliers.City ORDER BY SupplierCount DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify products with the highest average discount.",
        "output": "SELECT products.ProductID, AVG([Order Details].Discount) AS AverageDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID ORDER BY AverageDiscount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Analyze the correlation between product price and the number of orders received.",
        "output": "SELECT P.ProductName, P.UnitPrice, COUNT(OD.OrderID) AS OrderCount FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID GROUP BY P.ProductID, P.ProductName, P.UnitPrice ORDER BY OrderCount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which employees handled the most customer orders?",
        "output": "SELECT o.EmployeeID, COUNT(o.OrderID) AS OrdersHandled FROM orders o GROUP BY o.EmployeeID ORDER BY OrdersHandled DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products are on order but currently discontinued?",
        "output": "SELECT ProductID, ProductName FROM products WHERE Discontinued = 1 AND UnitsOnOrder > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many unique products does each supplier offer?",
        "output": "SELECT p.SupplierID, COUNT(DISTINCT p.ProductID) AS UniqueProducts FROM products p GROUP BY p.SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the on-time delivery rate each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month ORDER BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers are located in the same city?",
        "output": "SELECT City, STRING_AGG(DISTINCT SupplierID, ', ') AS SupplierIDs FROM suppliers GROUP BY City HAVING COUNT(DISTINCT SupplierID) > 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees are responsible for the majority of orders in a specific territory?",
        "output": "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.ShipRegion = 'SpecificTerritory' GROUP BY employees.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the most delayed shipments?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.RequiredDate)) AS AvgDelay FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.ShippedDate > orders.RequiredDate GROUP BY suppliers.SupplierID ORDER BY AvgDelay DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many unique products has each employee sold?",
        "output": "SELECT E.EmployeeID, COUNT(DISTINCT OD.ProductID) AS UniqueProducts FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY E.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total discount given on all orders?",
        "output": "SELECT SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the top 5 countries generating the most revenue from orders?",
        "output": "SELECT customers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.Country ORDER BY total_revenue DESC LIMIT 5",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped by each shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS NumOrders FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the effect of discount on product sales?",
        "output": "SELECT Discount, SUM(Quantity) AS TotalSales FROM [Order Details] GROUP BY Discount ORDER BY Discount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method has the best on-time delivery rate?",
        "output": "SELECT ShipVia, 100.0 * COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipVia ORDER BY OnTimeRate DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which region has the highest total sales?",
        "output": "SELECT Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Region ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the correlation between order value and shipping delay?",
        "output": "SELECT CORR(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) OVER (PARTITION BY orders.OrderID), DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS OrderValueShippingDelayCorrelation FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city received the highest number of shipments?",
        "output": "SELECT ShipCity, COUNT(OrderID) FROM orders GROUP BY ShipCity ORDER BY COUNT(OrderID) DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees who have been hired in the last 5 years.",
        "output": "SELECT EmployeeID, FirstName, LastName FROM employees WHERE HireDate >= DATE_SUB(CURDATE(), INTERVAL 5 YEAR);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which products are often paired together in orders?",
        "output": "SELECT od1.ProductID, od2.ProductID, COUNT(*) AS PairCount FROM [Order Details] od1 JOIN [Order Details] od2 ON od1.OrderID = od2.OrderID AND od1.ProductID < od2.ProductID GROUP BY od1.ProductID, od2.ProductID ORDER BY PairCount DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees who have been with the company for over 10 years.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e WHERE DATEDIFF(CURRENT_DATE, e.HireDate) > 3650;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city has the highest number of shipments?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS ShipmentCount FROM orders GROUP BY ShipCity ORDER BY ShipmentCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the highest discount given to a single product?",
        "output": "SELECT ProductName, [Order Details].Discount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount = (SELECT MAX(Discount) FROM [Order Details]) LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders did each employee process last quarter?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND CURRENT_DATE GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders are pending shipment as of today?",
        "output": "SELECT COUNT(OrderID) AS PendingOrders FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the impact of discontinued products on total inventory.",
        "output": "SELECT SUM(UnitsInStock) FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total order quantity for each product over the past year.",
        "output": "SELECT ProductID, SUM(Quantity) AS AnnualOrderQuantity FROM [Order Details] WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many different shipping methods have been used to ship orders?",
        "output": "SELECT COUNT(DISTINCT ShipVia) AS ShippingMethods FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the monthly growth rate of returning customers over the last year?",
        "output": "SELECT ((COUNT(DISTINCT CASE WHEN YEAR(o1.OrderDate) = 2022 THEN o1.CustomerID END) - COUNT(DISTINCT CASE WHEN YEAR(o2.OrderDate) = 2021 THEN o2.CustomerID END)) / NULLIF(COUNT(DISTINCT CASE WHEN YEAR(o2.OrderDate) = 2021 THEN o2.CustomerID END), 0)) * 100 AS monthly_growth FROM orders o1, orders o2 WHERE o1.CustomerID = o2.CustomerID AND YEAR(o1.OrderDate) = 2022 AND YEAR(o2.OrderDate) = 2021;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find out the average discount given for each customer.",
        "output": "SELECT customers.CustomerID, AVG([Order Details].Discount) AS AverageDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the total sales for each employee in a specific region.",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.ShipRegion = ? GROUP BY employees.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier supplies the most number of different products?",
        "output": "SELECT s.SupplierID, s.CompanyName, COUNT(DISTINCT p.ProductID) AS NumberOfProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY NumberOfProducts DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee with the longest tenure at the company.",
        "output": "SELECT FirstName, LastName, DATEDIFF(NOW(), HireDate) AS Tenure FROM employees ORDER BY Tenure DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total freight cost by region?",
        "output": "SELECT o.ShipRegion, SUM(o.Freight) AS TotalFreight FROM orders o GROUP BY o.ShipRegion;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average unit price of products supplied by each supplier?",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have received the most customer orders?",
        "output": "SELECT s.CompanyName, COUNT(DISTINCT o.OrderID) AS NumberOfOrders FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.CompanyName ORDER BY NumberOfOrders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of units on order for each product category?",
        "output": "SELECT categories.CategoryID, SUM(products.UnitsOnOrder) FROM products JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total quantity ordered for each product supplied by a supplier?",
        "output": "SELECT p.ProductName, s.CompanyName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY p.ProductName, s.CompanyName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the customer with the highest single order value.",
        "output": "SELECT o.CustomerID, od.OrderID, (od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID ORDER BY OrderValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the monthly product performance for each product?",
        "output": "SELECT products.ProductName, EXTRACT(MONTH FROM orders.OrderDate) AS Month, SUM([Order Details].Quantity) AS MonthlyPerformance FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductName, EXTRACT(MONTH FROM orders.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many unique products are ordered each month?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(DISTINCT ProductID) AS UniqueProducts FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY TO_CHAR(OrderDate, 'YYYY-MM')",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders have a shipping cost above $50?",
        "output": "SELECT COUNT(*) AS high_freight_orders FROM orders WHERE Freight > 50",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Is there a trend in shipping delays over the past year?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS month, (COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) * 1.0 / COUNT(*)) * 100 AS delay_rate FROM orders WHERE OrderDate >= DATE_ADD(CURRENT_DATE, INTERVAL -1 YEAR) GROUP BY DATE_TRUNC('month', OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time over the past year?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE OrderDate >= CURRENT_DATE - INTERVAL '1 year';",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total quantity sold for each product category?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity) AS total_quantity_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the average salary of employees who have generated over $50,000 in sales.",
        "output": "SELECT AVG(e.Salary) AS AvgSalary FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 50000;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have placed orders more than five times?",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) AS OrderCount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 5",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Rank customers by the number of orders they have placed.",
        "output": "SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID ORDER BY NumberOfOrders DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the average time between order and shipment.",
        "output": "SELECT AVG(DATE_PART('day', o.ShippedDate - o.OrderDate)) AS AvgShippingTime FROM orders o WHERE o.ShippedDate IS NOT NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were delivered on time each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, ROUND(100.0 * SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID), 2) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the Total Sales revenue for the last month?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) AND MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH)",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of orders across different shipping companies?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia ORDER BY OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders did each employee handle last year?",
        "output": "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What day of the week do most shipments occur?",
        "output": "SELECT TO_CHAR(ShippedDate, 'Day') AS Weekday, COUNT(OrderID) AS OrderCount FROM orders GROUP BY TO_CHAR(ShippedDate, 'Day') ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated by each employee for the current month?",
        "output": "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the total sales by supplier in a specific month.",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE DATE_FORMAT(orders.OrderDate, '%Y-%m') = 'specific month' GROUP BY suppliers.CompanyName",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How does the average employee salary compare between different regions?",
        "output": "SELECT Region, AVG(Salary) AS AvgSalary FROM employees GROUP BY Region;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total quantity of products ordered in the last year?",
        "output": "SELECT SUM(od.Quantity) AS TotalQuantityOrdered FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped on or before the required date each month?",
        "output": "SELECT TO_CHAR(ShippedDate, 'YYYY-MM') AS Month, COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY TO_CHAR(ShippedDate, 'YYYY-MM');",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 5 products by revenue.",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the current total inventory value?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the distribution of employee salaries by region?",
        "output": "SELECT employees.Region, AVG(employees.Salary) AS AvgSalary FROM employees GROUP BY employees.Region;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find all employees who ship to more than three different countries.",
        "output": "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(DISTINCT o.ShipCountry) > 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest total sales?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which country has the highest number of customers?",
        "output": "SELECT Country, COUNT(*) AS NumCustomers FROM customers GROUP BY Country ORDER BY NumCustomers DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the revenue contribution of each supplier?",
        "output": "SELECT SupplierID, SUM(od.Quantity * od.UnitPrice) AS SupplierRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What has been the month-over-month growth in the number of orders?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(*) AS OrderCount FROM orders GROUP BY Year, Month ORDER BY Year, Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost incurred in the past quarter?",
        "output": "SELECT SUM(Freight) FROM orders WHERE OrderDate BETWEEN DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' AND DATE_TRUNC('quarter', CURRENT_DATE);",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many products are currently out of stock?",
        "output": "SELECT COUNT(products.ProductID) AS out_of_stock_products FROM products WHERE products.UnitsInStock = 0",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the most common customer region?",
        "output": "SELECT Region, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY Region ORDER BY NumberOfCustomers DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the top 5 products in terms of revenue generated?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY Revenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the highest freight charges for each country.",
        "output": "SELECT ShipCountry, MAX(Freight) AS MaxFreight FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the most common city among customers with the highest lifetime value?",
        "output": "SELECT customers.City FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.City ORDER BY SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier provides the most expensive products on average?",
        "output": "SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AvgPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID ORDER BY AvgPrice DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped late (after the required date)?",
        "output": "SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the fastest average shipping method based on fulfillment time?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia ORDER BY AvgFulfillmentTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the most common shipping method for orders with late deliveries?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS LateCount FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipVia ORDER BY LateCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of discontinued products?",
        "output": "SELECT COUNT(ProductID) AS DiscontinuedProducts FROM products WHERE Discontinued = TRUE;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount provided on products in order history?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the most frequently ordered products.",
        "output": "SELECT od.ProductID, p.ProductName, COUNT(od.OrderID) AS OrderCount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY od.ProductID, p.ProductName ORDER BY OrderCount DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the top selling products and which employees are associated with these sales?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalQuantity, employees.EmployeeID FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY [Order Details].ProductID, employees.EmployeeID ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost incurred each month?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, SUM(Freight) AS TotalFreight FROM orders GROUP BY Year, Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders have a shipping delay longer than 5 days?",
        "output": "SELECT COUNT(OrderID) AS LongDelays FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) > 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the on-time delivery rate for each shipping method?",
        "output": "SELECT ShipVia, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the total units ordered for products with stock less than 10?",
        "output": "SELECT p.ProductID, SUM(od.Quantity) AS TotalUnitsOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.UnitsInStock < 10 GROUP BY p.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top 3 cities with the highest total revenue.",
        "output": "SELECT ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCity ORDER BY TotalRevenue DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped after the required date?",
        "output": "SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the earliest and latest order dates for each customer.",
        "output": "SELECT CustomerID, MIN(OrderDate) AS FirstOrder, MAX(OrderDate) AS LastOrder FROM orders GROUP BY CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the most ordered product category this year?",
        "output": "SELECT categories.CategoryID, categories.CategoryName, SUM([Order Details].Quantity) AS TotalOrdered FROM categories INNER JOIN products ON categories.CategoryID = products.CategoryID INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY categories.CategoryID, categories.CategoryName ORDER BY TotalOrdered DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Assess the impact of discounts on product performance.",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity * (1 - [Order Details].Discount)) / SUM([Order Details].Quantity) AS DiscountEffect FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the products with the highest and lowest Unit Prices and their associated stock levels.",
        "output": "SELECT ProductName, UnitsInStock FROM products WHERE UnitPrice = (SELECT MAX(UnitPrice) FROM products) UNION SELECT ProductName, UnitsInStock FROM products WHERE UnitPrice = (SELECT MIN(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which countries have the highest number of orders in the last year?",
        "output": "SELECT ShipCountry, COUNT(*) AS OrderCount FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY ShipCountry ORDER BY OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the customer retention rate for the last quarter?",
        "output": "SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-12-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-10-01') AS customer_retention_rate",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which region has the most sales by employees?",
        "output": "SELECT o.ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS RegionSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN employees e ON o.EmployeeID = e.EmployeeID GROUP BY o.ShipRegion ORDER BY RegionSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total freight cost for all orders shipped to Germany?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShipCountry = 'Germany';",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time (in days) per month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which regions have the highest average order quantities?",
        "output": "SELECT ShipRegion, AVG([Order Details].Quantity) AS AvgQuantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion ORDER BY AvgQuantity DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customers have had all their orders delivered on time?",
        "output": "SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) = COUNT(*) FILTER (WHERE ShippedDate <= RequiredDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine if any product category consistently exceeds its reorder levels.",
        "output": "SELECT CategoryID, COUNT(*) AS ExceedCount FROM products WHERE UnitsInStock > ReorderLevel GROUP BY CategoryID HAVING COUNT(*) > 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product generated the highest total sales revenue?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the highest freight cost recorded in the database?",
        "output": "SELECT MAX(Freight) FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total discount given on all orders?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM [Order Details] od;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which region has the lowest on-time delivery rate this quarter?",
        "output": "SELECT ShipRegion, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY ShipRegion ORDER BY OnTimeRate ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which customers have placed the most orders with a discount?",
        "output": "SELECT o.CustomerID, COUNT(DISTINCT o.OrderID) AS DiscountedOrders FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0 GROUP BY o.CustomerID ORDER BY DiscountedOrders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the total sales grouped by country and month.",
        "output": "SELECT ShipCountry, TO_CHAR(OrderDate, 'YYYY-MM') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry, TO_CHAR(OrderDate, 'YYYY-MM')",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have placed orders with a shipping cost exceeding $100?",
        "output": "SELECT DISTINCT customers.CustomerID, CompanyName FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.Freight > 100;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total revenue generated from orders, including discounts.",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product has the highest total sales in terms of revenue?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductSales FROM [Order Details] od GROUP BY od.ProductID ORDER BY ProductSales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List all discontinued products and their stock levels.",
        "output": "SELECT ProductName, UnitsInStock FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which five products contribute the most to the total sales of each employee?",
        "output": "SELECT e.EmployeeID, od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, od.ProductID ORDER BY e.EmployeeID, ProductSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many unique products were sold in the last year?",
        "output": "SELECT COUNT(DISTINCT ProductID) FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR));",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipping company has the highest on-time delivery rate?",
        "output": "SELECT shippers.CompanyName, CAST(COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) AS FLOAT) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName ORDER BY on_time_delivery_rate DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were delivered on time each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, COUNT(*) AS OnTimeOrders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the product with the highest discount applied in the last month.",
        "output": "SELECT products.ProductName, [Order Details].Discount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) ORDER BY [Order Details].Discount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the top three suppliers with the fastest delivery times.",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName ORDER BY AverageLeadTime ASC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which countries have suppliers who also have fax numbers listed?",
        "output": "SELECT DISTINCT Country FROM suppliers WHERE Fax IS NOT NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which city has the most suppliers located in it?",
        "output": "SELECT s.City, COUNT(s.SupplierID) AS SupplierCount FROM suppliers s GROUP BY s.City ORDER BY SupplierCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which orders took longer than the required date to be shipped?",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which orders had the largest discount applied?",
        "output": "SELECT od.OrderID, od.Discount FROM [Order Details] od WHERE od.Discount = (SELECT MAX(Discount) FROM [Order Details]) ORDER BY od.OrderID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the customer satisfaction score based on average order frequency.",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID)/DATEDIFF(MAX(orders.OrderDate), MIN(orders.OrderDate)) AS OrderFrequency FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID ORDER BY OrderFrequency DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders did each employee handle in the last quarter?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' AND o.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers have provided products that are no longer in stock?",
        "output": "SELECT DISTINCT SupplierID FROM products WHERE UnitsInStock = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which region generates the most revenue?",
        "output": "SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Revenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion ORDER BY Revenue DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the order with the maximum freight cost.",
        "output": "SELECT OrderID, Freight FROM orders ORDER BY Freight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the top 5 products based on total quantity sold.",
        "output": "SELECT ProductName, SUM([Order Details].Quantity) AS TotalQuantitySold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY TotalQuantitySold DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the current stock status of products by category?",
        "output": "SELECT p.CategoryID, p.ProductID, p.ProductName, p.UnitsInStock FROM products p ORDER BY p.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify orders with more than five products that received a discount.",
        "output": "SELECT OrderID FROM [Order Details] WHERE Discount > 0 GROUP BY OrderID HAVING COUNT(ProductID) > 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the distribution of order quantities?",
        "output": "SELECT Quantity, COUNT(*) AS Frequency FROM [Order Details] GROUP BY Quantity ORDER BY Frequency DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the average freight cost for orders shipped to each country.",
        "output": "SELECT ShipCountry, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which region has the lowest average order value?",
        "output": "SELECT o.ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipRegion ORDER BY AvgOrderValue ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products need to be reordered based on their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the customers who have never received a discount on their orders.",
        "output": "SELECT DISTINCT CustomerID FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE Discount > 0);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the month with the highest number of orders shipped.",
        "output": "SELECT MONTH(ShippedDate) AS ShipMonth, COUNT(OrderID) AS OrderCount FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipMonth ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount given per order each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG([Order Details].Discount) AS average_discount FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of products ordered each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Quantity) AS TotalProducts FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average freight cost for shipped orders?",
        "output": "SELECT AVG(Freight) AS AvgFreight FROM orders WHERE ShippedDate IS NOT NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product has the highest sales volume this month?",
        "output": "SELECT p.ProductID FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE EXTRACT(MONTH FROM CURRENT_DATE) = EXTRACT(MONTH FROM CURRENT_DATE) GROUP BY p.ProductID ORDER BY SUM(od.Quantity) DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total discount given for each product?",
        "output": "SELECT od.ProductID, SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscountGiven FROM [Order Details] od GROUP BY od.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total quantity of products sold by each employee?",
        "output": "SELECT e.EmployeeID, SUM(od.Quantity) AS TotalQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a unit price greater than $50?",
        "output": "SELECT ProductName FROM products WHERE UnitPrice > 50;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the product with the lowest performance in terms of sales in October 2023.",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-10-31' GROUP BY products.ProductName ORDER BY product_performance ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city had the highest number of orders shipped to?",
        "output": "SELECT orders.ShipCity, COUNT(orders.OrderID) AS NumOrders FROM orders GROUP BY orders.ShipCity ORDER BY NumOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many customers placed more than five orders last year?",
        "output": "SELECT COUNT(customers.CustomerID) AS customer_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total quantity of products sold per category?",
        "output": "SELECT products.CategoryID, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.CategoryID",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders include products from multiple suppliers?",
        "output": "SELECT COUNT(*) FROM (SELECT OrderID, COUNT(DISTINCT SupplierID) AS SupplierCount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY OrderID) AS OrderSupplierCount WHERE SupplierCount > 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the percentage of returning customers in Q1 2023?",
        "output": "SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-01-01') AS retention_rate",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products have a reorder level higher than current stock?",
        "output": "SELECT COUNT(ProductID) AS ProductCount FROM products WHERE ReorderLevel > UnitsInStock;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the total number of orders shipped by each method.",
        "output": "SELECT ShipVia, COUNT(OrderID) AS TotalShippedOrders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which products were never ordered?",
        "output": "SELECT ProductID FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city had the highest number of orders shipped to it in the last year?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE OrderDate >= (CURRENT_DATE - INTERVAL '1 year') GROUP BY ShipCity ORDER BY NumberOfOrders DESC FETCH FIRST 1 ROW ONLY;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount applied for each product?",
        "output": "SELECT ProductID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the average discount per customer.",
        "output": "SELECT customers.CustomerID, AVG([Order Details].Discount) AS AverageDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the total sales generated for each product category.",
        "output": "SELECT CategoryID, SUM([Order Details].UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How have shipping times changed over the years?",
        "output": "SELECT YEAR(OrderDate) AS Year, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders GROUP BY Year ORDER BY Year;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which city has the highest number of orders, and who handles them?",
        "output": "SELECT orders.ShipCity, orders.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM orders GROUP BY orders.ShipCity, orders.EmployeeID ORDER BY OrderCount DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product category generated the most revenue in 2023?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY categories.CategoryName ORDER BY total_revenue DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with decreasing sales trends over months.",
        "output": "SELECT ProductName FROM (SELECT ProductName, DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Quantity) AS QuantitySold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ProductName, Month) sub WHERE QuantitySold < LAG(QuantitySold) OVER (PARTITION BY ProductName ORDER BY Month);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average order size in terms of quantity?",
        "output": "SELECT AVG([Order Details].Quantity) AS AvgOrderSize FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total revenue generated by each customer.",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total quantity of products sold each month?",
        "output": "SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List all products that have stock levels below their reorder level.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order quantity for each product?",
        "output": "SELECT ProductID, AVG(Quantity) AS AverageQuantity FROM [Order Details] GROUP BY ProductID",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which employees have the highest number of orders processed?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees who have handled orders with total discounts over 10%.",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].Discount) AS TotalDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID HAVING TotalDiscount > 0.1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of products sold by each employee?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].Quantity) AS TotalProducts FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the top 3 products in terms of units sold.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS UnitsSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY UnitsSold DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount given per product?",
        "output": "SELECT ProductName, AVG(Discount) AS AvgDiscount FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID GROUP BY ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated by each customer over their lifetime?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the products that have been discontinued.",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products need to be reordered?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the cities with the highest number of suppliers.",
        "output": "SELECT City, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY City ORDER BY SupplierCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the average unit price of products sold in the last quarter.",
        "output": "SELECT AVG([Order Details].UnitPrice) AS AvgUnitPrice FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE());",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List products with a reorder level higher than units in stock.",
        "output": "SELECT ProductName FROM products WHERE ReorderLevel > UnitsInStock;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How much freight cost has been incurred by each employee's orders?",
        "output": "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were processed by employees in each city?",
        "output": "SELECT employees.City, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.City;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average unit price of products per supplier?",
        "output": "SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AvgUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the total sales for each month in 2023?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY month",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How does employee efficiency vary based on the shipping regions they handle?",
        "output": "SELECT EmployeeID, ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EmployeeID, ShipRegion ORDER BY EmployeeID, AvgFulfillmentTime ASC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which city has the highest number of unique customers?",
        "output": "SELECT customers.City, COUNT(DISTINCT customers.CustomerID) AS unique_customers FROM customers GROUP BY customers.City ORDER BY unique_customers DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average time taken to fulfill orders each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month ORDER BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many employees were hired in 2023?",
        "output": "SELECT COUNT(*) AS hires_count FROM employees WHERE employees.HireDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have placed the highest number of orders?",
        "output": "SELECT c.CustomerID, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month experienced the highest number of late shipments?",
        "output": "SELECT EXTRACT(MONTH FROM ShippedDate) AS Month, COUNT(*) AS LateShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY EXTRACT(MONTH FROM ShippedDate) ORDER BY LateShipments DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated by each product category?",
        "output": "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped each month?",
        "output": "SELECT DATE_TRUNC('month', ShippedDate) AS Month, COUNT(OrderID) AS OrderCount FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for each shipping country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers with orders that have not been shipped yet.",
        "output": "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.ShippedDate IS NULL GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have been ordered more than 100 times?",
        "output": "SELECT ProductID, COUNT(OrderID) AS OrderCount FROM [Order Details] GROUP BY ProductID HAVING COUNT(OrderID) > 100;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the percentage of orders requiring delivery within one week?",
        "output": "SELECT COUNT(OrderID) * 100.0 / (SELECT COUNT(*) FROM orders) AS Percentage FROM orders WHERE DATEDIFF(RequiredDate, OrderDate) <= 7;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does sales distribution vary across different regions?",
        "output": "SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID GROUP BY region.RegionDescription",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average value of orders placed in the month of January 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = 1 AND YEAR(orders.OrderDate) = 2023",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated by each employee in the last month?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the Customer Retention Rate for the past quarter.",
        "output": "SELECT 100.0 * (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate BETWEEN '2023-07-01' AND '2023-09-30') / (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate < '2023-07-01') AS RetentionRate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the average reorder level across all products.",
        "output": "SELECT AVG(ReorderLevel) FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units on order exist for each supplier?",
        "output": "SELECT SupplierID, SUM(UnitsOnOrder) FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier provides the most number of different products?",
        "output": "SELECT SupplierID, COUNT(DISTINCT ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID ORDER BY NumberOfProducts DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount offered on products that have been discontinued?",
        "output": "SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which cities have the highest number of sales from employees?",
        "output": "SELECT e.City, COUNT(*) AS SalesCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.City ORDER BY SalesCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest turnover rates?",
        "output": "SELECT ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS TurnoverRatio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductID ORDER BY TurnoverRatio DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Who are the top 5 customers by revenue?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many customers placed more than 3 orders in 2023?",
        "output": "SELECT COUNT(*) AS customer_count FROM (SELECT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.CustomerID HAVING COUNT(DISTINCT orders.OrderID) > 3) AS subquery",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the product with the highest current stock level.",
        "output": "SELECT ProductName FROM products ORDER BY UnitsInStock DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which category has the highest number of discontinued products?",
        "output": "SELECT CategoryID, COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1 GROUP BY CategoryID ORDER BY DiscontinuedProducts DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total revenue contributed by employees in each region?",
        "output": "SELECT Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Region;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue generated from orders last month?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Total_Revenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time for each product category?",
        "output": "SELECT categories.CategoryName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method is used the most frequently?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the monthly inventory turnover ratio?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average fulfillment time for orders each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which orders have the highest discount applied?",
        "output": "SELECT OrderID, Discount FROM [Order Details] ORDER BY Discount DESC LIMIT 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a stock level below their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find products with unusually high discounts applied to them.",
        "output": "SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.Discount > 0.25;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the supplier that offers the most products at a unit price above $20.",
        "output": "SELECT suppliers.SupplierID, CompanyName, COUNT(products.ProductID) AS ProductCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitPrice > 20 GROUP BY suppliers.SupplierID, suppliers.CompanyName ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the overall discount given for each product?",
        "output": "SELECT p.ProductName, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the median fulfillment time for all orders?",
        "output": "SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DATEDIFF(ShippedDate, OrderDate)) AS MedianFulfillmentTime FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who are the top three employees in terms of sales?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What are the total sales generated by country?",
        "output": "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest sales performance this year?",
        "output": "SELECT p.ProductID, SUM(od.Quantity) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE YEAR(od.OrderDate) = YEAR(CURDATE()) GROUP BY p.ProductID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees are responsible for the top 10 largest orders?",
        "output": "SELECT e.EmployeeID, o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, o.OrderID ORDER BY OrderValue DESC LIMIT 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find products with a discount greater than 10% and quantity ordered over 100 units.",
        "output": "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0.10 AND od.Quantity > 100;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units of each product are currently in stock?",
        "output": "SELECT ProductID, UnitsInStock FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total revenue difference between employees with different titles?",
        "output": "SELECT employees.Title, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Title;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify orders that were shipped after the required date.",
        "output": "SELECT OrderID, OrderDate, RequiredDate, ShippedDate FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many unique products have been ordered in total?",
        "output": "SELECT COUNT(DISTINCT [Order Details].ProductID) AS UniqueProducts FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the total value of discounts applied over all orders.",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount) AS TotalDiscountValue FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the average number of orders for each month in 2021.",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) / 12 AS AverageOrders FROM orders WHERE OrderDate BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY EXTRACT(MONTH FROM OrderDate)",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer received the most orders in the last month?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) AND MONTH(OrderDate) = MONTH(CURRENT_DATE) - 1 GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount given on products?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the most common shipment method used for orders processed by each employee?",
        "output": "SELECT employees.EmployeeID, ShipVia, COUNT(orders.OrderID) AS NumShipments FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, ShipVia ORDER BY NumShipments DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the revenue lost due to discounts for each product.",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * Discount) AS RevenueLost FROM [Order Details] GROUP BY ProductID ORDER BY RevenueLost DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders received a discount?",
        "output": "SELECT (COUNT(DISTINCT [Order Details].OrderID) * 1.0 / (SELECT COUNT(DISTINCT OrderID) FROM orders)) * 100 AS percentage_discounted_orders FROM [Order Details] WHERE Discount > 0",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top-selling products by each category?",
        "output": "SELECT CategoryID, P.ProductName, SUM(OD.Quantity) AS TotalSales FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID GROUP BY CategoryID, P.ProductName ORDER BY CategoryID, TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of products for each category?",
        "output": "SELECT p.CategoryID, AVG(p.UnitPrice) AS AveragePrice FROM products p GROUP BY p.CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee has handled the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine monthly trends in inventory turnover ratios.",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') as OrderMonth, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) as InventoryTurnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY OrderMonth ORDER BY OrderMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total freight cost for shipments to each country.",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products are sold below their reorder level and need to be prioritized for restocking?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 0 ORDER BY UnitsInStock, UnitsOnOrder ASC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product had the highest increase in sales compared to the previous month?",
        "output": "SELECT products.ProductName, product_sales.current_month_sales - COALESCE(previous_month_sales.previous_month_sales, 0) AS sales_increase FROM (SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS current_month_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE()) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE()) GROUP BY [Order Details].ProductID) AS product_sales LEFT JOIN (SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS previous_month_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE()) - 1 AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE()) GROUP BY [Order Details].ProductID) AS previous_month_sales ON product_sales.ProductID = previous_month_sales.ProductID JOIN products ON product_sales.ProductID = products.ProductID ORDER BY sales_increase DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "List products that have the highest margin by comparing unit price with discounted price.",
        "output": "SELECT ProductName, UnitPrice - MIN(od.UnitPrice * (1 - od.Discount)) AS Margin FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY ProductName ORDER BY Margin DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount percentage given on orders?",
        "output": "SELECT AVG(Discount * 100) AS AverageDiscountPercentage FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify orders with a shipping delay and calculate the average delay days.",
        "output": "SELECT o.OrderID, DATEDIFF(o.ShippedDate, o.RequiredDate) AS DelayDays FROM orders o WHERE o.ShippedDate > o.RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total value of all orders placed by customers in the USA?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Country = 'USA'",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the reorder frequency for each product.",
        "output": "SELECT p.ProductID, p.ProductName, COUNT(*) AS ReorderCount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID WHERE od.Quantity >= p.ReorderLevel GROUP BY p.ProductID, p.ProductName ORDER BY ReorderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employees are handling the most territories?",
        "output": "SELECT employees.EmployeeID, COUNT(employeeTerritories.TerritoryID) AS territory_count FROM employeeTerritories JOIN employees ON employeeTerritories.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID ORDER BY territory_count DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a reorder level that is less than the average reorder level?",
        "output": "SELECT ProductName FROM products WHERE ReorderLevel < (SELECT AVG(ReorderLevel) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product has the highest sales quantity in the last month?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS total_quantity FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID JOIN products p ON od.ProductID = p.ProductID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND o.OrderDate < CURDATE() GROUP BY p.ProductName ORDER BY total_quantity DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product has the highest reorder level?",
        "output": "SELECT ProductName FROM products ORDER BY ReorderLevel DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the top 5 products with the highest discount given?",
        "output": "SELECT ProductID, Discount FROM [Order Details] ORDER BY Discount DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average unit price of products by category?",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount given on orders?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What's the total value of the current stock for each product?",
        "output": "SELECT ProductName, UnitsInStock * UnitPrice AS StockValue FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "List products that have never been ordered.",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employees have the highest order fulfillment speed?",
        "output": "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EmployeeID ORDER BY AvgFulfillmentTime ASC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which city has the highest number of orders shipped in 2023?",
        "output": "SELECT orders.ShipCity, COUNT(orders.OrderID) AS total_orders FROM orders WHERE YEAR(orders.ShippedDate) = 2023 GROUP BY orders.ShipCity ORDER BY total_orders DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the difference in shipment duration for each order (RequiredDate vs ShippedDate).",
        "output": "SELECT OrderID, DATEDIFF(ShippedDate, RequiredDate) AS ShipmentDuration FROM orders WHERE ShippedDate IS NOT NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue generated from each supplier's products?",
        "output": "SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest sales in a given year?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2022 GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many unique products are ordered by each customer?",
        "output": "SELECT o.CustomerID, COUNT(DISTINCT od.ProductID) AS UniqueProductsOrdered FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have the highest discount on average?",
        "output": "SELECT products.ProductName, AVG([Order Details].Discount) AS AvgDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY AvgDiscount DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the average discount provided by each employee.",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].Discount) AS AverageDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total sales for each product.",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were shipped later than the required date?",
        "output": "SELECT COUNT(orders.OrderID) FROM orders WHERE orders.ShippedDate > orders.RequiredDate",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost to each country?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for the current year?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN DATE_TRUNC('year', CURRENT_DATE) AND CURRENT_DATE;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many discontinued products are still in stock?",
        "output": "SELECT ProductID, UnitsInStock FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "List products with no units on order but have sales in the last month.",
        "output": "SELECT ProductName FROM products WHERE UnitsOnOrder = 0 AND ProductID IN (SELECT DISTINCT od.ProductID FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH));",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What products have been ordered most frequently?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order in the last year?",
        "output": "SELECT AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE()",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order over the last month?",
        "output": "SELECT AVG(Freight) FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month';",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the top 5 employees with the highest sales growth over the last year.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, (SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - SUM(CASE WHEN YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) AS SalesGrowth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY SalesGrowth DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total inventory value for each category?",
        "output": "SELECT CategoryID, SUM(UnitPrice * UnitsInStock) AS InventoryValue FROM products GROUP BY CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the total sales by supplier and month?",
        "output": "SELECT SupplierID, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) AS MonthlySales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY SupplierID, Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the average discount offered on the products from each supplier.",
        "output": "SELECT p.SupplierID, AVG(od.Discount) AS AvgDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time per month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(day, OrderDate, ShippedDate)) AS AverageFulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Analyze the sales trend for products over the last quarter.",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, SUM(Quantity * UnitPrice) AS TotalSales FROM [Order Details] WHERE OrderDate >= DATEADD(MONTH, -3, CURRENT_DATE) GROUP BY EXTRACT(MONTH FROM OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total number of orders for each shipping country.",
        "output": "SELECT ShipCountry, COUNT(*) AS NumberOfOrders FROM orders GROUP BY ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify customers who have placed more than 10 orders.",
        "output": "SELECT CustomerID, COUNT(OrderID) AS order_count FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the distribution of employee hire dates by year?",
        "output": "SELECT YEAR(HireDate) AS HireYear, COUNT(EmployeeID) AS HireCount FROM employees GROUP BY YEAR(HireDate);",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have more units on order than units currently in stock?",
        "output": "SELECT ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the most common shipping method used by each employee.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, o.ShipVia, COUNT(o.OrderID) as ShipMethodCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, o.ShipVia ORDER BY ShipMethodCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the top 5 best-selling products last quarter.",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity_sold FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND CURRENT_DATE GROUP BY products.ProductID ORDER BY total_quantity_sold DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the breakdown of total sales by shipment countries?",
        "output": "SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.ShipCountry",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed by customers in the United States?",
        "output": "SELECT COUNT(o.OrderID) AS USOrders FROM orders o JOIN customers c ON o.CustomerID = c.CustomerID WHERE c.Country = 'USA';",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue by country?",
        "output": "SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipCountry;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of orders that have not been shipped?",
        "output": "SELECT COUNT(o.OrderID) AS UnshippedOrders FROM orders o WHERE o.ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the product with the highest unit price currently in stock?",
        "output": "SELECT ProductID, ProductName, UnitPrice FROM products WHERE UnitsInStock > 0 ORDER BY UnitPrice DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the top 3 employees with the fastest average fulfillment time.",
        "output": "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL GROUP BY EmployeeID ORDER BY AvgFulfillmentTime ASC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the percentage of orders delivered on or before the required date each month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID)) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which region has the highest average order value?",
        "output": "SELECT Region, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Region ORDER BY AverageOrderValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "List all products that have never been included in any order.",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How does the product performance vary month by month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, ProductID, SUM(Quantity) AS TotalPerformance FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY Month, ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated for each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the most popular product in terms of quantity sold in 2023?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductName ORDER BY total_sold DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipping method is most frequently used for orders in 2023?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS shipping_count FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY ShipVia ORDER BY shipping_count DESC",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the number of orders processed by each employee by year.",
        "output": "SELECT employees.EmployeeID, YEAR(orders.OrderDate) AS OrderYear, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, YEAR(orders.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employee responsible for orders with the highest freight costs.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, o.OrderID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.Freight = (SELECT MAX(Freight) FROM orders)",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product had the best performance in terms of quantity sold for the month of June 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = 6 AND YEAR(orders.OrderDate) = 2023 GROUP BY products.ProductID ORDER BY product_performance DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per country?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AverageCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of products shipped in the last month?",
        "output": "SELECT SUM([Order Details].Quantity) FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.ShippedDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE();",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the busiest shipping month based on total orders shipped?",
        "output": "SELECT DATE_TRUNC('month', ShippedDate) AS Month, COUNT(OrderID) AS TotalOrders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have shipped orders late and by how many days on average?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(DATEDIFF(o.ShippedDate, o.RequiredDate)) AS AvgLateDays FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate > o.RequiredDate GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find suppliers with a homepage listed in the suppliers table.",
        "output": "SELECT CompanyName FROM suppliers WHERE HomePage IS NOT NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customers have generated the most revenue lifetime?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the most popular shipping destination city?",
        "output": "SELECT o.ShipCity, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipCity ORDER BY OrderCount DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee handled the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the total freight cost for orders shipped by each method.",
        "output": "SELECT o.ShipVia, SUM(o.Freight) AS TotalFreightCost FROM orders o GROUP BY o.ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have the highest retention rate over the past six months?",
        "output": "SELECT c.CustomerID, COUNT(DISTINCT o.OrderID) * 100.0 / (SELECT COUNT(DISTINCT o2.OrderID) FROM orders o2 WHERE o2.CustomerID = c.CustomerID AND o2.OrderDate < DATEADD(month, -6, CURRENT_DATE)) AS RetentionRate FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate >= DATEADD(month, -6, CURRENT_DATE) GROUP BY c.CustomerID ORDER BY RetentionRate DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have more units on order than in stock?",
        "output": "SELECT COUNT(*) AS NumberOfProducts FROM products WHERE UnitsOnOrder > UnitsInStock;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average freight cost for orders shipped to 'USA'?",
        "output": "SELECT AVG(Freight) FROM orders WHERE ShipCountry = 'USA';",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated by each employee?",
        "output": "SELECT o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of products sold this quarter?",
        "output": "SELECT SUM([Order Details].Quantity) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products are ordered more after being marked as 'discontinued'?",
        "output": "SELECT p.ProductName FROM products p WHERE p.Discontinued = 1 AND p.ProductID IN (SELECT od.ProductID FROM [Order Details] od WHERE od.Quantity > 0) ORDER BY p.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which ship cities have the longest average order fulfillment times?",
        "output": "SELECT ShipCity, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipCity ORDER BY AvgFulfillmentTime DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all suppliers who have never had a discontinuation in their products.",
        "output": "SELECT SupplierID, CompanyName FROM suppliers WHERE SupplierID NOT IN (SELECT DISTINCT SupplierID FROM products WHERE Discontinued = 1);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total discount amount for each customer?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer has made the most purchases?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS PurchaseCount FROM orders GROUP BY CustomerID ORDER BY PurchaseCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier's products have the lowest average rating based on discounts given?",
        "output": "SELECT products.SupplierID, AVG([Order Details].Discount) AS AverageDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.SupplierID ORDER BY AverageDiscount ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee handled the highest number of orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS NumOrders FROM orders GROUP BY EmployeeID ORDER BY NumOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Get the top 3 cities with the highest number of suppliers.",
        "output": "SELECT City, COUNT(SupplierID) AS NumSuppliers FROM suppliers GROUP BY City ORDER BY NumSuppliers DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the retention rate of customers over the past year?",
        "output": "SELECT (COUNT(DISTINCT CustomerID) WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31') / NULLIF(COUNT(DISTINCT CustomerID) WHERE OrderDate < '2022-01-01', 0) * 100 AS RetentionRate FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "In which month did the highest average freight cost occur?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(Freight) AS AvgFreight FROM orders GROUP BY Year, Month ORDER BY AvgFreight DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total revenue for each supplier.",
        "output": "SELECT products.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average order value per employee?",
        "output": "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total revenue per country.",
        "output": "SELECT o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which month had the highest total sales and which employee contributed the most to it?",
        "output": "SELECT SalesMonth, EmployeeID, TotalSales FROM (SELECT MONTH(o.OrderDate) AS SalesMonth, e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY SalesMonth, e.EmployeeID) AS MonthlySales ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost assigned to each employee?",
        "output": "SELECT e.FirstName, e.LastName, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which regions have the highest average order value?",
        "output": "SELECT ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipRegion",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the highest total sales for discontinued products?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE products.Discontinued = TRUE GROUP BY suppliers.CompanyName ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have the highest lifetime value?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY LifetimeValue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount given on products in the last month?",
        "output": "SELECT P.ProductName, AVG(OD.Discount) AS AverageDiscount FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID WHERE MONTH(OD.OrderID) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(OD.OrderID) = YEAR(CURDATE() - INTERVAL 1 MONTH) GROUP BY P.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers with the longest time since their last order.",
        "output": "SELECT o.CustomerID, DATEDIFF(CURRENT_DATE, MAX(o.OrderDate)) AS DaysSinceLastOrder FROM orders o GROUP BY o.CustomerID ORDER BY DaysSinceLastOrder DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of products sold in the last quarter?",
        "output": "SELECT SUM(od.Quantity) AS TotalProductsSold FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATEADD(quarter, -1, CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed using each shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine which employee has the most shipments via the highest-cost freight method.",
        "output": "SELECT o.EmployeeID, COUNT(o.OrderID) AS ShipmentCount FROM orders o WHERE o.Freight = (SELECT MAX(Freight) FROM orders) GROUP BY o.EmployeeID ORDER BY ShipmentCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the most sold product in terms of quantity?",
        "output": "SELECT ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY TotalQuantity DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the product performance ranking for the last month?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE MONTH(od.OrderDate) = MONTH(CURRENT_DATE) - 1 AND YEAR(od.OrderDate) = YEAR(CURRENT_DATE) GROUP BY p.ProductID, p.ProductName ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total value of the inventory currently in stock?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the orders that had a discount greater than 20%.",
        "output": "SELECT DISTINCT orders.OrderID, [Order Details].Discount FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE [Order Details].Discount > 0.2;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the revenue growth compared to the previous month?",
        "output": "SELECT ((SUM(CASE WHEN MONTH(od.OrderDate) = MONTH(CURRENT_DATE) THEN od.Quantity * od.UnitPrice ELSE 0 END) - SUM(CASE WHEN MONTH(od.OrderDate) = MONTH(CURRENT_DATE) - 1 THEN od.Quantity * od.UnitPrice ELSE 0 END)) / NULLIF(SUM(CASE WHEN MONTH(od.OrderDate) = MONTH(CURRENT_DATE) - 1 THEN od.Quantity * od.UnitPrice ELSE 0 END), 0)) * 100 AS RevenueGrowth FROM [Order Details] od WHERE YEAR(od.OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the percentage of customers who made more than one purchase.",
        "output": "SELECT (CAST(COUNT(*) AS FLOAT) / (SELECT COUNT(DISTINCT CustomerID) FROM orders)) * 100 AS ReturningCustomers FROM (SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 1) AS MultipleOrders;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier contributed the most to total sales this year?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY suppliers.SupplierID ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products are responsible for the majority of sales revenue this month?",
        "output": "SELECT p.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales_revenue FROM [Order Details] JOIN products p ON [Order Details].ProductID = p.ProductID JOIN orders o ON [Order Details].OrderID = o.OrderID WHERE EXTRACT(MONTH FROM o.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) AND EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY p.ProductName ORDER BY sales_revenue DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month has the highest number of orders?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY Month ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the most frequently ordered product?",
        "output": "SELECT products.ProductName, COUNT(*) AS OrderFrequency FROM [Order Details] INNER JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY OrderFrequency DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total discount given on all products sold?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify orders that were delivered late compared to the required date.",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many distinct shipping recipients are there each month?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(DISTINCT ShipName) AS DistinctRecipients FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of orders processed per employee, broken down by year?",
        "output": "SELECT e.EmployeeID, YEAR(o.OrderDate) AS Year, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, YEAR(o.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time for each supplier to deliver products?",
        "output": "SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM products p JOIN orders o ON p.ProductID = o.OrderID GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What percentage of products are discontinued?",
        "output": "SELECT (COUNT(CASE WHEN Discontinued = 1 THEN 1 END) * 100.0 / COUNT(*)) AS DiscontinuedPercentage FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Find the top 5 customers based on total order quantities.",
        "output": "SELECT orders.CustomerID, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.CustomerID ORDER BY total_quantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products are the most frequently ordered per month?",
        "output": "SELECT p.ProductName, COUNT(od.OrderID) AS OrderFrequency, EXTRACT(MONTH FROM o.OrderDate) AS Month FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, EXTRACT(MONTH FROM o.OrderDate) ORDER BY OrderFrequency DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the on-time delivery rate for each shipping company in Q2 2023.",
        "output": "SELECT shippers.CompanyName, SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / CAST(COUNT(orders.OrderID) AS DECIMAL) AS on_time_delivery_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY shippers.CompanyName",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does the average shipping cost vary by shipper?",
        "output": "SELECT shippers.CompanyName, AVG(orders.Freight) AS average_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the customer retention rate for the last year.",
        "output": "SELECT (COUNT(DISTINCT o1.CustomerID) * 1.0 / COUNT(DISTINCT o2.CustomerID)) AS RetentionRate FROM orders o1 LEFT JOIN orders o2 ON o1.CustomerID = o2.CustomerID WHERE o1.OrderDate BETWEEN '2022-01-01' AND '2022-12-31';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have never been ordered?",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the correlation between product price and reorder level.",
        "output": "SELECT ProductID, ProductName, (CAST(UnitPrice AS DOUBLE) / ReorderLevel) AS PriceToReorderRatio FROM products;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue for each product considering discounts?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with the highest unit price that have never been ordered.",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]) ORDER BY UnitPrice DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders have been delivered on or before the required date for each month?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS OrderMonth, (CAST(SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) AS DECIMAL) / COUNT(*)) * 100 AS OnTimeDeliveryRate FROM orders GROUP BY OrderMonth;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the distribution of orders among different shipping methods?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the distribution of orders across different regions?",
        "output": "SELECT c.Region, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.Region;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the total sales generated by discontinued products.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1 GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have generated the highest sales in the past year?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which months have the highest on-time delivery rates?",
        "output": "SELECT DATE_TRUNC('month', ShippedDate) AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*)) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_TRUNC('month', ShippedDate) ORDER BY OnTimeDeliveryRate DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the percentage of products that are discontinued?",
        "output": "SELECT (COUNT(CASE WHEN Discontinued = 1 THEN 1 END) * 100.0 / COUNT(*)) AS DiscontinuedPercentage FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How does the quantity ordered vary by product?",
        "output": "SELECT ProductID, AVG(Quantity) AS AvgQuantity FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost by shipping method?",
        "output": "SELECT ShipVia, AVG(Freight) AS AverageFreightCost FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "In which month did we have the highest total sales?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY OrderMonth ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier provides products with the lowest average unit price?",
        "output": "SELECT s.CompanyName, AVG(p.UnitPrice) AS AvgUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName ORDER BY AvgUnitPrice ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "In which month was the average order fulfillment time the shortest?",
        "output": "SELECT Month, AVG(FulfillmentTime) AS AvgFulfillmentTime FROM (SELECT DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTime, DATE_FORMAT(OrderDate, '%Y-%m') AS Month FROM orders) AS MonthlyFulfillment GROUP BY Month ORDER BY AvgFulfillmentTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average time taken to fulfill an order each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month ORDER BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the top 3 products with the highest sales revenue per unit.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / SUM(od.Quantity) AS SalesRevenuePerUnit FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SalesRevenuePerUnit DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders have been placed by each customer?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total freight cost for shipped orders last month?",
        "output": "SELECT SUM(Freight) AS TotalFreight FROM orders WHERE MONTH(ShippedDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(ShippedDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped late every month?",
        "output": "SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of orders by shipping country?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCountry ORDER BY OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders were placed each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest unit price and are currently discontinued?",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1 ORDER BY UnitPrice DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What percentage of products are currently on order?",
        "output": "SELECT COUNT(DISTINCT ProductID) * 100.0 / (SELECT COUNT(ProductID) FROM products) AS PercentageOnOrder FROM [Order Details] WHERE Quantity > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which orders have the highest discount applied?",
        "output": "SELECT OrderID, Discount FROM [Order Details] ORDER BY Discount DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest total sales revenue?",
        "output": "SELECT p.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.SupplierID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers provide the most products that are currently low in stock?",
        "output": "SELECT suppliers.SupplierID, suppliers.SupplierName, COUNT(products.ProductID) AS LowStockProducts FROM suppliers INNER JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsInStock < products.ReorderLevel GROUP BY suppliers.SupplierID, suppliers.SupplierName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of orders shipped each month?",
        "output": "SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS ShipMonth, COUNT(OrderID) AS OrderCount FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the top three customers by the number of orders placed.",
        "output": "SELECT CustomerID, COUNT(*) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the monthly product performance based on sales.",
        "output": "SELECT products.ProductID, DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductID, DATE_TRUNC('month', orders.OrderDate) ORDER BY TotalQuantity DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders have not yet been shipped?",
        "output": "SELECT COUNT(OrderID) AS UnshippedOrders FROM orders WHERE ShippedDate IS NULL",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the most popular product category based on the number of unique customers?",
        "output": "SELECT categories.CategoryName, COUNT(DISTINCT orders.CustomerID) AS unique_customers FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY unique_customers DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount given per order?",
        "output": "SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details]",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were fulfilled on time each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(*) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the Product Performance for each product over the last year.",
        "output": "SELECT p.ProductID, SUM(od.Quantity) AS TotalPerformance FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY p.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How does the distribution of sales by region compare?",
        "output": "SELECT employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Sales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Region",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have exceeded the reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee with the largest number of orders with discounts.",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS DiscountedOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE [Order Details].Discount > 0 GROUP BY employees.EmployeeID ORDER BY DiscountedOrders DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the shortest average lead time for deliveries?",
        "output": "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed in each month of the year?",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) FROM orders GROUP BY Month ORDER BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer placed the most orders in 2022?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = 2022 GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city has received the highest number of shipments year-to-date?",
        "output": "SELECT ShipCity, COUNT(*) AS Shipments FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month had the highest number of orders shipped?",
        "output": "SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderCount FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the peak order day of the week for each month.",
        "output": "SELECT EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, DAYNAME(o.OrderDate) AS OrderDay, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY OrderMonth, OrderDay ORDER BY OrderMonth, OrderCount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders have zero freight cost?",
        "output": "SELECT COUNT(OrderID) AS FreeShippingOrders FROM orders WHERE Freight = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped late each month?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(OrderID) AS LateShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the products with the highest average order quantity.",
        "output": "SELECT p.ProductName, AVG(od.Quantity) AS AvgOrderQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY AvgOrderQuantity DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify markets (country or region) with the highest average freight cost.",
        "output": "SELECT COALESCE(ShipRegion, ShipCountry) AS Market, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY Market ORDER BY AvgFreightCost DESC LIMIT 1;",
        "difficulty": "medium"
    }
]