[
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest total sales revenue?",
        "output": "SELECT s.SupplierID, s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID, s.CompanyName ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the number of orders shipped by each shipping method monthly?",
        "output": "SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, ShipVia, COUNT(OrderID) AS OrdersCount FROM orders GROUP BY DATE_FORMAT(ShippedDate, '%Y-%m'), ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the region with the highest number of late shipments.",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS LateShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipRegion ORDER BY LateShipments DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the price variance for products sold at different discounts.",
        "output": "SELECT od.ProductID, MAX(od.UnitPrice * (1 - od.Discount)) - MIN(od.UnitPrice * (1 - od.Discount)) as PriceVariance FROM [Order Details] od GROUP BY od.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the top 5 suppliers by the number of orders fulfilled.",
        "output": "SELECT s.SupplierID, s.CompanyName, COUNT(DISTINCT o.OrderID) AS OrdersFulfilled FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID, s.CompanyName ORDER BY OrdersFulfilled DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How frequently are products being sold at a discount?",
        "output": "SELECT COUNT(*) AS DiscountedSales FROM [Order Details] WHERE Discount > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How does the average time delay between order and shipment date vary by shipping method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgDelay FROM orders GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the top-performing employee in terms of sales for each region.",
        "output": "SELECT o.ShipRegion, e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipRegion, e.EmployeeID ORDER BY o.ShipRegion, TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the customer retention rate from 2022 to 2023?",
        "output": "(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-01-01') AS retention_rate",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products need to be reordered due to low stock levels?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products where sales exceed the reorder level.",
        "output": "SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName HAVING SUM(od.Quantity) > p.ReorderLevel;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order in 2023?",
        "output": "SELECT AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE YEAR(orders.OrderDate) = 2023",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products supplied by a specific supplier.",
        "output": "SELECT ProductName FROM products WHERE SupplierID = ?;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many returning customers placed orders last month?",
        "output": "SELECT COUNT(DISTINCT o1.CustomerID) AS returning_customers FROM orders o1 JOIN (SELECT DISTINCT CustomerID FROM orders WHERE OrderDate < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1' MONTH) AS o2 ON o1.CustomerID = o2.CustomerID WHERE DATE_TRUNC('month', o1.OrderDate) = DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1' MONTH",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify discontinued products with high inventory levels.",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 100;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find out which employee reports to whom and calculate the total sales for each manager.",
        "output": "SELECT m.EmployeeID AS ManagerID, m.FirstName AS ManagerFirstName, m.LastName AS ManagerLastName, e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e LEFT JOIN employees m ON e.ReportsTo = m.EmployeeID LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY m.EmployeeID, m.FirstName, m.LastName, e.EmployeeID, e.FirstName, e.LastName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated by each customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for each shipping country?",
        "output": "SELECT o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total inventory value for each product, represented as product price multiplied by units in stock?",
        "output": "SELECT ProductID, ProductName, UnitPrice * UnitsInStock AS InventoryValue FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the percentage of orders that received at least a 10% discount?",
        "output": "SELECT COUNT(DISTINCT OrderID) * 100.0 / (SELECT COUNT(DISTINCT OrderID) FROM [Order Details]) AS PercentDiscounted FROM [Order Details] WHERE Discount >= 0.10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the distribution of employee titles across regions?",
        "output": "SELECT e.Title, e.Region, COUNT(*) AS Number FROM employees e GROUP BY e.Title, e.Region;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average unit price of products per supplier?",
        "output": "SELECT suppliers.SupplierID, AVG(products.UnitPrice) AS AverageUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the products nearing their reorder level.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city has received the most shipments?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS TotalShipments FROM orders GROUP BY ShipCity ORDER BY TotalShipments DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees whose sales have increased by more than 20% compared to the previous year.",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY e.EmployeeID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 1.2 * (SELECT SUM(od2.UnitPrice * od2.Quantity * (1 - od2.Discount)) FROM orders o2 JOIN [Order Details] od2 ON o2.OrderID = od2.OrderID WHERE o2.EmployeeID = e.EmployeeID AND YEAR(o2.OrderDate) = YEAR(CURDATE()) - 1);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the breakdown of discontinued products by category?",
        "output": "SELECT c.CategoryID, COUNT(*) AS DiscontinuedCount FROM products p JOIN categories c ON p.CategoryID = c.CategoryID WHERE p.Discontinued = 1 GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders have a shipping time greater than 7 days?",
        "output": "SELECT COUNT(OrderID) AS OrdersOver7Days FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) > 7;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 5 selling products based on order quantities?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier's products have the highest average discount applied?",
        "output": "SELECT s.SupplierID, s.CompanyName, AVG(od.Discount) AS AvgDiscount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID, s.CompanyName ORDER BY AvgDiscount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders were delivered on time each month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, 100.0 * COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / COUNT(orders.OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total revenue generated for each product?",
        "output": "SELECT p.ProductName, SUM(od.UnitPrice * (od.Quantity - (od.Quantity * od.Discount))) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY TotalRevenue DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue for each month in 2023?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many days on average does it take for each employee to fulfill an order?",
        "output": "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageDaysToFulfill FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NOT NULL GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have not processed any orders in the last month?",
        "output": "SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' WHERE o.OrderID IS NULL GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time across different regions?",
        "output": "SELECT region.RegionDescription, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID GROUP BY region.RegionDescription",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have their birthdays this month?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e WHERE MONTH(e.BirthDate) = MONTH(CURDATE());",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which orders were delivered on time in March 2023?",
        "output": "SELECT orders.OrderID FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND MONTH(orders.ShippedDate) = 3 AND YEAR(orders.ShippedDate) = 2023",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which month had the highest overall sales?",
        "output": "SELECT EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY EXTRACT(MONTH FROM o.OrderDate) ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Compare the product performance for the first quarter of 2023 with the last quarter of 2022.",
        "output": "SELECT products.ProductID, SUM(CASE WHEN orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' THEN [Order Details].Quantity ELSE 0 END) AS first_quarter_sales, SUM(CASE WHEN orders.OrderDate BETWEEN '2022-10-01' AND '2022-12-31' THEN [Order Details].Quantity ELSE 0 END) AS last_quarter_2022_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee has processed the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrdersProcessed FROM orders GROUP BY EmployeeID ORDER BY OrdersProcessed DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the top 10 cities by total sales in 2023.",
        "output": "SELECT customers.City, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY customers.City ORDER BY total_sales DESC LIMIT 10",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which city has the highest number of orders?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which shipping method is most frequently used?",
        "output": "SELECT ShipVia, COUNT(*) AS Frequency FROM orders GROUP BY ShipVia ORDER BY Frequency DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the longest time taken to fulfill an order?",
        "output": "SELECT MAX(DATEDIFF(ShippedDate, OrderDate)) AS LongestFulfillmentTime FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average sales per employee?",
        "output": "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped by each shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Are there any products that have not been ordered in 2023?",
        "output": "SELECT products.ProductID FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the effect of employee sales territory on overall sales performance?",
        "output": "SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryDescription ORDER BY total_sales DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer has received the most discounts on their orders?",
        "output": "SELECT orders.CustomerID, SUM([Order Details].Discount) AS TotalDiscount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.CustomerID ORDER BY TotalDiscount DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customers have the highest total freight costs?",
        "output": "SELECT CustomerID, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY CustomerID ORDER BY TotalFreightCost DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the monthly inventory turnover ratio?",
        "output": "SELECT EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY Year, Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the most overdue orders?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OverdueCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.RequiredDate < CURDATE() AND o.ShippedDate IS NULL GROUP BY e.EmployeeID ORDER BY OverdueCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders did each employee fulfill in the last year?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the top 3 cities with the highest sales revenue.",
        "output": "SELECT ShipCity, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCity ORDER BY TotalSales DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the most products on order?",
        "output": "SELECT SupplierID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY SupplierID ORDER BY TotalUnitsOnOrder DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the monthly trend in the number of orders placed over the past year?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS TotalOrders FROM orders WHERE OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average number of days between order and required date by supplier?",
        "output": "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.RequiredDate, orders.OrderDate)) AS AverageDays FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY suppliers.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped on time?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate <= RequiredDate",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Find out the top 5 most profitable products in 2023.",
        "output": "SELECT products.ProductID, SUM(([Order Details].UnitPrice * (1 - [Order Details].Discount) - products.UnitPrice) * [Order Details].Quantity) AS profit FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY products.ProductID ORDER BY profit DESC LIMIT 5",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees who have not made any sales in the last three months.",
        "output": "SELECT e.EmployeeID, CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName FROM employees e WHERE NOT EXISTS (SELECT 1 FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.EmployeeID = e.EmployeeID AND o.OrderDate >= DATEADD(MONTH, -3, CURRENT_DATE));",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many orders include products with a discount greater than 20%?",
        "output": "SELECT COUNT(DISTINCT od.OrderID) FROM [Order Details] od WHERE od.Discount > 0.20;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which countries have the most diverse customer base?",
        "output": "SELECT Country, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM customers GROUP BY Country ORDER BY UniqueCustomers DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees report to each manager?",
        "output": "SELECT e.EmployeeID, COUNT(e2.EmployeeID) AS Reports FROM employees e LEFT JOIN employees e2 ON e.EmployeeID = e2.ReportsTo GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders did each employee process in the last year?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS TotalOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate > CURRENT_DATE - INTERVAL '1' YEAR GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders are shipped to Europe?",
        "output": "SELECT (SUM(CASE WHEN ShipCountry IN ('Austria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia', 'Finland', 'France', 'Germany', 'Greece', 'Hungary', 'Iceland', 'Ireland', 'Italy', 'Latvia', 'Lithuania', 'Luxembourg', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia', 'Spain', 'Sweden', 'United Kingdom') THEN 1 ELSE 0 END) * 100.0) / COUNT(OrderID) AS EuropeanOrdersPercentage FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for each month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer placed the largest total value of orders?",
        "output": "SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalValue FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY CustomerID ORDER BY TotalValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products with the highest reorder level.",
        "output": "SELECT ProductName FROM products ORDER BY ReorderLevel DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total revenue generated by each product?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total value of products in stock for each supplier?",
        "output": "SELECT suppliers.SupplierID, SUM(products.UnitPrice * products.UnitsInStock) AS TotalValueInStock FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total freight cost incurred per month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, SUM(Freight) AS TotalFreight FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total number of units sold per category.",
        "output": "SELECT c.CategoryID, SUM(od.Quantity) AS TotalUnitsSold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the products with the highest discount applied in orders.",
        "output": "SELECT p.ProductName, MAX(od.Discount) AS MaxDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY MaxDiscount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the monthly inventory turnover ratio for the top-selling product.",
        "output": "SELECT ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName ORDER BY SUM([Order Details].Quantity) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were fulfilled on time in the last quarter?",
        "output": "SELECT COUNT(orders.OrderID) AS on_time_orders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND QUARTER(orders.OrderDate) = QUARTER(CURDATE())",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders do each customer place on average?",
        "output": "SELECT AVG(OrderCount) AS AverageOrders FROM (SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID) AS CustomerOrders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average fulfillment time for orders?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgFulfillmentTime FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the products with zero units on order.",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsOnOrder = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer placed the highest value order?",
        "output": "SELECT c.CustomerID, (od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID ORDER BY OrderValue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total value of products currently on order?",
        "output": "SELECT SUM(UnitsOnOrder * UnitPrice) AS TotalValueOnOrder FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average order size (in terms of quantity) managed by each employee?",
        "output": "SELECT e.EmployeeID, AVG(od.Quantity) AS AvgOrderSize FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time for orders shipped to the USA?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders WHERE ShipCountry = 'USA';",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the supplier with the longest average delivery time.",
        "output": "SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID ORDER BY AvgLeadTime DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which regions have the highest order fulfillment delays?",
        "output": "SELECT region.RegionDescription, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate) - DATEDIFF(orders.RequiredDate, orders.OrderDate)) AS avg_delay FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID GROUP BY region.RegionDescription HAVING avg_delay > 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who is the longest-serving employee based on the hire date?",
        "output": "SELECT e.EmployeeID, e.HireDate FROM employees e ORDER BY e.HireDate ASC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers are from 'USA' and have more than 5 orders?",
        "output": "SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE c.Country = 'USA' GROUP BY c.CustomerID HAVING COUNT(o.OrderID) > 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have been discontinued?",
        "output": "SELECT ProductID, ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer generated the highest revenue in the last quarter?",
        "output": "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE QUARTER(o.OrderDate) = 4 AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY o.CustomerID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the proportion of total sales contributed by discounted orders?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / (SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID) * 100 AS DiscountedSalesProportion FROM [Order Details] od WHERE od.Discount > 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total discounts given by each employee.",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which city has the highest number of customers?",
        "output": "SELECT City, COUNT(*) AS num_customers FROM customers GROUP BY City ORDER BY num_customers DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue for each month?",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average freight cost per order?",
        "output": "SELECT AVG(Freight) AS AvgFreightCost FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How does the average freight cost vary by shipping method?",
        "output": "SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipVia",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount applied across all orders?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average freight cost per shipping country?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many unique products have been ordered?",
        "output": "SELECT COUNT(DISTINCT ProductID) AS UniqueProductsOrdered FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders have been shipped more than a week after the order date?",
        "output": "SELECT COUNT(o.OrderID) FROM orders o WHERE DATEDIFF(o.ShippedDate, o.OrderDate) > 7;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee fulfilled the most orders last month?",
        "output": "SELECT o.EmployeeID, COUNT(*) AS TotalOrders FROM orders o WHERE MONTH(o.ShippedDate) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(o.ShippedDate) = YEAR(CURDATE() - INTERVAL 1 MONTH) GROUP BY o.EmployeeID ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Find the average order value for each month in 2023.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(OrderDate) = 2023 GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders have been placed by each customer?",
        "output": "SELECT orders.CustomerID, COUNT(orders.OrderID) AS order_count FROM orders GROUP BY orders.CustomerID",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped on time last month?",
        "output": "SELECT COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate AND MONTH(OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which categories have the highest number of products with no units in stock?",
        "output": "SELECT CategoryID, COUNT(*) AS NoStockProducts FROM products WHERE UnitsInStock = 0 GROUP BY CategoryID ORDER BY NoStockProducts DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders had a discount applied?",
        "output": "SELECT COUNT(DISTINCT [Order Details].OrderID) * 100.0 / COUNT(DISTINCT orders.OrderID) AS percentage_with_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE [Order Details].Discount > 0",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the top 5 products sold by each employee?",
        "output": "SELECT e.EmployeeID, od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, od.ProductID ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many distinct cities have customers placed an order from?",
        "output": "SELECT COUNT(DISTINCT c.City) FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How has the customer retention rate changed over the past year?",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN YEAR(orders.OrderDate) = YEAR(CURDATE()) THEN orders.CustomerID END) / COUNT(DISTINCT CASE WHEN YEAR(orders.OrderDate) = YEAR(CURDATE())-1 THEN orders.CustomerID END)) * 100 AS retention_rate FROM orders",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Determine the total number of orders shipped beyond the required date for each region.",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipRegion",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find products with the smallest difference between units in stock and reorder level.",
        "output": "SELECT ProductID, ABS(UnitsInStock - ReorderLevel) AS StockDifference FROM products ORDER BY StockDifference ASC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the monthly Customer Retention Rate for the last year.",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, (COUNT(DISTINCT CustomerID) FILTER (WHERE OrderDate BETWEEN DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 year' AND DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month')) / NULLIF(COUNT(DISTINCT CustomerID) FILTER (WHERE OrderDate < DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 year'), 0) AS RetentionRate FROM orders GROUP BY Year, Month ORDER BY Year, Month",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the on-time delivery rate for each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the difference between reorder level and current stock for all products.",
        "output": "SELECT ProductID, (ReorderLevel - UnitsInStock) as StockGap FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the difference between the earliest and latest shipped order dates each month?",
        "output": "SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, DATEDIFF(MAX(ShippedDate), MIN(ShippedDate)) AS DateDifference FROM orders WHERE ShippedDate IS NOT NULL GROUP BY DATE_FORMAT(ShippedDate, '%Y-%m');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which city has the highest number of orders handled by employees?",
        "output": "SELECT o.ShipCity, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipCity ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost for each employee responsible for the orders?",
        "output": "SELECT EmployeeID, AVG(Freight) AS AverageFreight FROM orders GROUP BY EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipping company had the highest on-time delivery rate in 2023?",
        "output": "SELECT shippers.CompanyName, COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / CAST(COUNT(orders.OrderID) AS DECIMAL) AS on_time_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY shippers.CompanyName ORDER BY on_time_rate DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average order size per product?",
        "output": "SELECT p.ProductID, p.ProductName, AVG(od.Quantity) AS AvgOrderSize FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average sale value per order for each employee?",
        "output": "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgSaleValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity sold for each product?",
        "output": "SELECT p.ProductID, SUM(od.Quantity) as TotalQuantitySold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier provides the most number of products?",
        "output": "SELECT p.SupplierID, COUNT(DISTINCT p.ProductID) AS NumberOfProducts FROM products p GROUP BY p.SupplierID ORDER BY NumberOfProducts DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List all products with units on order and their respective suppliers.",
        "output": "SELECT p.ProductName, s.SupplierName, p.UnitsOnOrder FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.UnitsOnOrder > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value per month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the product names and their current stock levels?",
        "output": "SELECT ProductName, UnitsInStock FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total freight cost by shipping country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders have been shipped and not shipped yet?",
        "output": "SELECT SUM(CASE WHEN ShippedDate IS NOT NULL THEN 1 ELSE 0 END) AS ShippedCount, SUM(CASE WHEN ShippedDate IS NULL THEN 1 ELSE 0 END) AS NotShippedCount FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of orders each employee has pending shipment?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS PendingOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NULL GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the total revenue generated for each product.",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the total sales by country?",
        "output": "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the most orders delayed past the required date?",
        "output": "SELECT e.EmployeeID, COUNT(*) AS DelayedOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate > o.RequiredDate GROUP BY e.EmployeeID ORDER BY DelayedOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify which suppliers provide discontinued products.",
        "output": "SELECT DISTINCT SupplierID FROM products WHERE Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time for each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest lead time variance?",
        "output": "SELECT suppliers.SupplierID, VARIANCE(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS LeadTimeVariance FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID ORDER BY LeadTimeVariance DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the total and average order fulfillment time per month.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime, SUM(DATEDIFF(ShippedDate, OrderDate)) AS TotalFulfillmentTime FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have the highest lifetime value?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY LifetimeValue DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which months had a higher number of late shipments than on-time deliveries?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month FROM orders GROUP BY Month HAVING COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) > COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total number of products ordered in 2022?",
        "output": "SELECT SUM(Quantity) AS TotalQuantity FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE EXTRACT(YEAR FROM orders.OrderDate) = 2022",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders have been shipped to each region?",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipRegion;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee handled the highest number of orders this year?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the month with the highest inventory turnover ratio.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY OrderMonth ORDER BY InventoryTurnover DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many unique customers placed orders each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time for each month in 2023?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders were shipped within the same city as the supplier?",
        "output": "SELECT COUNT(*) FROM orders JOIN suppliers ON orders.ShipCountry = suppliers.Country AND orders.ShipCity = suppliers.City JOIN products ON orders.OrderID IN (SELECT OrderID FROM [Order Details] WHERE [Order Details].ProductID = products.ProductID) WHERE products.SupplierID = suppliers.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the average discount applied by each employee.",
        "output": "SELECT e.EmployeeID, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How does the average freight cost vary by country?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products need to be reordered, based on their current stock levels?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which regions experience the longest average shipping times?",
        "output": "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders GROUP BY ShipRegion ORDER BY AverageShippingTime DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the total sales per product?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has generated the highest total sales?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the number of customers per region.",
        "output": "SELECT Region, COUNT(DISTINCT CustomerID) AS NumberOfCustomers FROM customers GROUP BY Region;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the top shipping method based on frequency?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS Count FROM orders GROUP BY ShipVia ORDER BY Count DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the regions that supply the most products.",
        "output": "SELECT Region, COUNT(p.ProductID) AS ProductCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY Region ORDER BY ProductCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount applied on orders per month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Discount) AS AvgDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many distinct products were sold by each employee?",
        "output": "SELECT e.EmployeeID, COUNT(DISTINCT od.ProductID) AS DistinctProducts FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List products that need reordering (Units in Stock less than Reorder Level).",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average freight cost per order?",
        "output": "SELECT AVG(Freight) AS AverageFreightCost FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which cities have the highest number of customers?",
        "output": "SELECT City, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY City ORDER BY NumberOfCustomers DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List suppliers and the total number of products they provide.",
        "output": "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS ProductCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city has the highest on-time delivery rate?",
        "output": "SELECT ShipCity, COUNT(OrderID) FILTER(WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipCity ORDER BY OnTimeRate DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total discount given on orders each month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the overall customer satisfaction based on order return frequency?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS ReturnFrequency FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 1 ORDER BY ReturnFrequency DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What are the ten orders with the highest shipping costs?",
        "output": "SELECT OrderID, Freight FROM orders ORDER BY Freight DESC LIMIT 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Determine the average shipping cost for orders shipped via a specific shipping method.",
        "output": "SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders WHERE ShipVia = [specific_shipping_method] GROUP BY ShipVia",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the percentage of orders with a discount above 10% this year?",
        "output": "SELECT COUNT(DISTINCT od.OrderID) * 1.0 / (SELECT COUNT(OrderID) FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE)) * 100 AS DiscountedOrderPercentage FROM [Order Details] od INNER JOIN orders o ON od.OrderID = o.OrderID WHERE od.Discount > 0.1 AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time for each supplier?",
        "output": "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY suppliers.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the total value of products in stock for each supplier.",
        "output": "SELECT SupplierID, SUM(UnitPrice * UnitsInStock) AS TotalStockValue FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of discontinued products still in stock?",
        "output": "SELECT COUNT(ProductID) FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What percentage of total sales does each employee contribute?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / (SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID) * 100 AS SalesPercentage FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which country incurs the highest average freight cost per order?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipCountry ORDER BY AvgFreight DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products with low sales performance but high stock levels.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock > 100 AND ProductID NOT IN (SELECT ProductID FROM [Order Details]);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find orders that were shipped late.",
        "output": "SELECT o.OrderID FROM orders o WHERE o.ShippedDate > o.RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which country has the most suppliers?",
        "output": "SELECT Country, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY Country ORDER BY SupplierCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee generated the most sales revenue last month?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales_revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE MONTH(orders.OrderDate) = MONTH(CURDATE())-1 AND YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY employees.EmployeeID ORDER BY sales_revenue DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which suppliers have the shortest lead time for product delivery?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID ORDER BY lead_time ASC",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the correlation between order size and freight cost?",
        "output": "SELECT CORR(order_size, Freight) AS Correlation FROM (SELECT o.OrderID, SUM(od.Quantity) AS order_size, o.Freight FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID) subquery;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the monthly sales trends for the top 5 products?",
        "output": "SELECT products.ProductName, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].Quantity) AS monthly_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductName, DATE_FORMAT(orders.OrderDate, '%Y-%m') ORDER BY monthly_sales DESC LIMIT 5",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the percentage of on-time deliveries for each shipping method?",
        "output": "SELECT ShipVia, SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the products with zero inventory turnover last month.",
        "output": "SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID AND EXTRACT(MONTH FROM od.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) - 1 AND EXTRACT(YEAR FROM od.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) HAVING SUM(od.Quantity * od.UnitPrice) IS NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product has the highest number of units on order?",
        "output": "SELECT ProductName FROM products WHERE UnitsOnOrder = (SELECT MAX(UnitsOnOrder) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have never been ordered?",
        "output": "SELECT products.ProductName FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].OrderID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "List products with the highest sales volume in 2023.",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE EXTRACT(YEAR FROM orders.OrderDate) = 2023 GROUP BY products.ProductID ORDER BY sales_volume DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total freight cost incurred for each shipping country.",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the number of orders shipped within each region.",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS NumOrders FROM orders GROUP BY ShipRegion",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which month had the highest total sales revenue?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlyRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Year, Month ORDER BY MonthlyRevenue DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost for each shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia ORDER BY TotalFreight DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the average order value (AOV) across all customers.",
        "output": "SELECT AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost for each employee's orders in the last six months?",
        "output": "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the average discount applied per order.",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were made by each employee in the current month?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS NumberOfOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURDATE()) AND EXTRACT(MONTH FROM o.OrderDate) = EXTRACT(MONTH FROM CURDATE()) GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have a unit price greater than $50?",
        "output": "SELECT ProductName FROM products WHERE UnitPrice > 50;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average time to fulfill an order by each employee?",
        "output": "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgFulfillmentTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NOT NULL GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were placed by new customers in 2023?",
        "output": "SELECT COUNT(orders.OrderID) FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE NOT EXISTS (SELECT 1 FROM orders o WHERE o.OrderDate < '2023-01-01' AND o.CustomerID = customers.CustomerID) AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which city has the highest number of orders processed?",
        "output": "SELECT o.ShipCity, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipCity ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the supplier with the lowest average product price.",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AvgPrice FROM products GROUP BY SupplierID ORDER BY AvgPrice ASC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customer's lifetime value is the highest?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY lifetime_value DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which months had the highest inventory turnover ratios?",
        "output": "SELECT Month, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY Month ORDER BY InventoryTurnoverRatio DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What are the top five cities by total sales revenue?",
        "output": "SELECT ShipCity, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCity ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which country generates the highest total sales revenue?",
        "output": "SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.ShipCountry ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 5 customers by lifetime value.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY LifetimeValue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average unit price of all products?",
        "output": "SELECT AVG(UnitPrice) AS AvgUnitPrice FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have reached or exceeded their reorder level?",
        "output": "SELECT COUNT(ProductID) FROM products WHERE UnitsInStock <= ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product generated the highest revenue last month?",
        "output": "SELECT TOP 1 od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) AND MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY od.ProductID ORDER BY TotalRevenue DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the monthly trend in the number of orders placed?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY Month ORDER BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the average discount per order.",
        "output": "SELECT OrderID, AVG(Discount) AS AverageDiscount FROM [Order Details] GROUP BY OrderID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have stock levels below their reorder level?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier provides the most products?",
        "output": "SELECT suppliers.SupplierID, COUNT(products.ProductID) AS ProductCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average fulfillment time for orders in the last six months?",
        "output": "SELECT AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgFulfillmentTime FROM orders o WHERE o.OrderDate >= DATEADD(MONTH, -6, CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the correlation between freight cost and total sales value for orders in 2023?",
        "output": "SELECT CORR(corr_sales.freight, corr_sales.total_sales_value) AS correlation FROM (SELECT orders.OrderID, orders.Freight, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY orders.OrderID) AS corr_sales",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which employee managed the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for each city by month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, ShipCity, SUM(Freight) AS TotalFreight FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m'), ShipCity",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which regions have the fewest orders?",
        "output": "SELECT Region, COUNT(o.OrderID) AS NumberOfOrders FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY Region ORDER BY NumberOfOrders ASC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee handled the highest number of different products?",
        "output": "SELECT e.EmployeeID, COUNT(DISTINCT od.ProductID) AS UniqueProducts FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY UniqueProducts DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which categories have the highest inventory turnover ratio?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID ORDER BY turnover_ratio DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total number of units in stock for discontinued products?",
        "output": "SELECT SUM(products.UnitsInStock) AS discontinued_stock FROM products WHERE products.Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many products were ordered by each customer?",
        "output": "SELECT c.CustomerID, SUM(od.Quantity) AS TotalProductsOrdered FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the correlation between discount applied and units sold.",
        "output": "SELECT Discount, SUM(Quantity) AS TotalUnitsSold FROM [Order Details] GROUP BY Discount ORDER BY Discount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were overdue for shipping in the past month?",
        "output": "SELECT COUNT(OrderID) AS OverdueOrders FROM orders WHERE ShippedDate > RequiredDate AND YEAR(OrderDate) = YEAR(CURRENT_DATE - INTERVAL '1 month') AND MONTH(OrderDate) = MONTH(CURRENT_DATE - INTERVAL '1 month');",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost handled by each employee?",
        "output": "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employee responsible for the highest single order value.",
        "output": "SELECT o.EmployeeID, od.OrderID, MAX(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MaxOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID, od.OrderID ORDER BY MaxOrderValue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the average discount percentage for each supplier.",
        "output": "SELECT s.SupplierID, AVG(od.Discount) * 100 AS AvgDiscountPercentage FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which countries have the highest number of orders?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCountry ORDER BY OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total monthly sales revenue for the year 2023?",
        "output": "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE EXTRACT(YEAR FROM orders.OrderDate) = 2023 GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM')",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How much discount has been given in total per customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount) AS TotalDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units of each product are currently in stock?",
        "output": "SELECT ProductID, ProductName, UnitsInStock FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Determine the products with the highest average discount applied.",
        "output": "SELECT od.ProductID, AVG(od.Discount) AS AvgDiscount FROM [Order Details] od GROUP BY od.ProductID ORDER BY AvgDiscount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the inventory turnover ratio for each product category in 2023.",
        "output": "SELECT categories.CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY categories.CategoryID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers providing products that are discontinued.",
        "output": "SELECT DISTINCT s.SupplierID, s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the average number of days between order date and shipping date.",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the product with the highest unit price.",
        "output": "SELECT ProductName FROM products ORDER BY UnitPrice DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total value of units currently in stock for each product?",
        "output": "SELECT ProductID, (UnitsInStock * UnitPrice) AS TotalStockValue FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipping company has the highest on-time delivery rate?",
        "output": "SELECT shippers.CompanyName, COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName ORDER BY on_time_delivery_rate DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average discount provided by each employee?",
        "output": "SELECT e.EmployeeID, AVG(od.Discount) AS AverageDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the product categories with the most discontinued products.",
        "output": "SELECT p.CategoryID, COUNT(*) AS DiscontinuedCount FROM products p WHERE p.Discontinued = 1 GROUP BY p.CategoryID ORDER BY DiscontinuedCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units in stock are there for each category?",
        "output": "SELECT CategoryID, SUM(UnitsInStock) AS TotalUnitsInStock FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount given on orders across all products?",
        "output": "SELECT AVG(Discount) FROM [Order Details]",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which suppliers have supplied products with the least discounts applied?",
        "output": "SELECT suppliers.CompanyName FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE [Order Details].Discount = (SELECT MIN(Discount) FROM [Order Details]) GROUP BY suppliers.CompanyName",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product generated the highest revenue in the last year?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS Revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY ProductID ORDER BY Revenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the monthly growth rate in total sales?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, ((SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) - LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) OVER (ORDER BY DATE_FORMAT(OrderDate, '%Y-%m'))) / LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) OVER (ORDER BY DATE_FORMAT(OrderDate, '%Y-%m')) * 100) AS MonthlyGrowthRate FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Determine the monthly inventory turnover ratio for 2023.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time for the first half of 2023?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 5 cities by total revenue.",
        "output": "SELECT c.City, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.City ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customers are purchasing products from multiple categories?",
        "output": "SELECT customers.CustomerID FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY customers.CustomerID HAVING COUNT(DISTINCT categories.CategoryID) > 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the trend in the number of orders over the past six months?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, COUNT(OrderID) AS order_count FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY month",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total quantity ordered for each product?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS TotalQuantityOrdered FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the most popular product based on order quantity.",
        "output": "SELECT ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY ProductName ORDER BY SUM(od.Quantity) DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the most ordered products from each supplier?",
        "output": "SELECT SupplierID, ProductName, TotalOrdered FROM (SELECT SupplierID, ProductName, SUM([Order Details].Quantity) AS TotalOrdered, ROW_NUMBER() OVER (PARTITION BY SupplierID ORDER BY SUM([Order Details].Quantity) DESC) as rn FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY SupplierID, ProductName) as ranked_products WHERE rn = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the region with the lowest on-time delivery rate.",
        "output": "SELECT ShipRegion, SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipRegion ORDER BY OnTimeRate ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for orders fulfilled within the required date?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShippedDate <= RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest average discount given on products?",
        "output": "SELECT suppliers.SupplierID, AVG([Order Details].Discount) AS AverageDiscount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID ORDER BY AverageDiscount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount given per category?",
        "output": "SELECT c.CategoryID, AVG(od.Discount) AS AvgDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products are currently out of stock?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the products with a reorder level higher than units in stock.",
        "output": "SELECT ProductName FROM products WHERE ReorderLevel > UnitsInStock;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total discount value given for each product.",
        "output": "SELECT ProductID, SUM(Discount * Quantity * UnitPrice) AS TotalDiscount FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time by month?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM')",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the maximum freight cost incurred for a single order each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, MAX(Freight) AS MaxFreight FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the top 5 products with the highest sales volume.",
        "output": "SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY SUM(od.Quantity) DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who is the highest-paid employee, and how much did they contribute to sales?",
        "output": "SELECT e.EmployeeID, e.Salary, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.Salary ORDER BY e.Salary DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product category has the highest average inventory turnover ratio?",
        "output": "SELECT c.CategoryID, AVG(SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0)) AS AvgInventoryTurnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID ORDER BY AvgInventoryTurnover DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the order details with over 20% discount.",
        "output": "SELECT OrderID, ProductID, Discount FROM [Order Details] WHERE Discount > 0.20;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has made the highest sales in the last year?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_ADD(CURRENT_DATE, INTERVAL -1 YEAR) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Determine the average discount applied to orders in 2023.",
        "output": "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE EXTRACT(YEAR FROM orders.OrderDate) = 2023",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many unique products does each supplier provide?",
        "output": "SELECT SupplierID, COUNT(DISTINCT ProductID) AS UniqueProducts FROM products GROUP BY SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales amount generated by each employee?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of products within each category?",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers have placed more than 10 orders?",
        "output": "SELECT COUNT(DISTINCT CustomerID) FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 10;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers with products that are out of stock.",
        "output": "SELECT suppliers.SupplierID, products.ProductName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsInStock = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the top 3 employees by the number of orders they fulfilled in 2023.",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS fulfilled_orders FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID ORDER BY fulfilled_orders DESC LIMIT 3",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average order quantity for products in stock?",
        "output": "SELECT p.ProductID, p.ProductName, AVG(od.Quantity) AS AvgOrderQty FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.UnitsInStock > 0 GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find out the products with zero stock but still on order.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock = 0 AND UnitsOnOrder > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the supplier with the highest number of discontinued products.",
        "output": "SELECT s.SupplierID, s.CompanyName, COUNT(p.ProductID) AS DiscontinuedCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1 GROUP BY s.SupplierID ORDER BY DiscontinuedCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the difference in shipping costs between orders shipped on time and late orders?",
        "output": "SELECT (AVG(CASE WHEN ShippedDate <= RequiredDate THEN Freight ELSE NULL END) - AVG(CASE WHEN ShippedDate > RequiredDate THEN Freight ELSE NULL END)) AS CostDifference FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the products with the highest and lowest inventory turnover ratios.",
        "output": "SELECT p.ProductName, (SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0)) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY InventoryTurnover DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the top 3 most frequently ordered products?",
        "output": "SELECT ProductID, COUNT(ProductID) AS OrderFrequency FROM [Order Details] GROUP BY ProductID ORDER BY OrderFrequency DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which regions have the highest average shipping costs?",
        "output": "SELECT ShipRegion, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipRegion ORDER BY AvgShippingCost DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which orders have the highest discounts applied?",
        "output": "SELECT od.OrderID, od.Discount FROM [Order Details] od ORDER BY od.Discount DESC LIMIT 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Find the top 5 products that contribute to the highest revenue.",
        "output": "SELECT products.ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS product_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID ORDER BY product_revenue DESC LIMIT 5",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped on or before the required date each month?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY TO_CHAR(OrderDate, 'YYYY-MM')",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Determine the order with the maximum quantity of a single product.",
        "output": "SELECT OrderID, ProductID, Quantity FROM [Order Details] ORDER BY Quantity DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product has the highest total sales revenue?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] GROUP BY ProductID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the monthly retention rate for the last 6 months?",
        "output": "SELECT YEAR(OrderDate) AS Year, MONTH(OrderDate) AS Month, (COUNT(DISTINCT CASE WHEN OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) AND CURRENT_DATE THEN CustomerID END) * 100.0 / NULLIF(COUNT(DISTINCT CASE WHEN OrderDate < DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) THEN CustomerID END), 0)) AS RetentionRate FROM orders WHERE OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) AND CURRENT_DATE GROUP BY YEAR(OrderDate), MONTH(OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have a reorder level higher than units in stock?",
        "output": "SELECT COUNT(*) AS NumberOfProducts FROM products WHERE ReorderLevel > UnitsInStock;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the relationship between unit price and quantity sold across products.",
        "output": "SELECT p.ProductID, p.UnitPrice, SUM(od.Quantity) AS TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.UnitPrice;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the number of discontinued products per supplier.",
        "output": "SELECT SupplierID, COUNT(*) AS DiscontinuedCount FROM products WHERE Discontinued = 1 GROUP BY SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee generated the most sales last month?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_FORMAT(LAST_DAY(CURDATE() - INTERVAL 1 MONTH) + INTERVAL 1 DAY, '%Y-%m-01') AND o.OrderDate < DATE_FORMAT(CURDATE(), '%Y-%m-01') GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers provide more than 10 different products?",
        "output": "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount FROM products GROUP BY SupplierID HAVING COUNT(DISTINCT ProductID) > 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find products with a UnitPrice greater than the average UnitPrice of all products.",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company is used the most?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employee with the earliest hire date and calculate their total sales.",
        "output": "SELECT e.EmployeeID, e.HireDate, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE e.HireDate = (SELECT MIN(HireDate) FROM employees) GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders included a discount greater than 20%?",
        "output": "SELECT COUNT(DISTINCT OrderID) AS NumOrders FROM [Order Details] WHERE Discount > 0.20;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total quantity of products sold in the first quarter?",
        "output": "SELECT SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE EXTRACT(QUARTER FROM o.OrderDate) = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find suppliers with discontinued products.",
        "output": "SELECT DISTINCT SupplierID FROM products WHERE Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped after the required date?",
        "output": "SELECT COUNT(OrderID) AS NumberOfLateShipments FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the total number of units ordered for each product.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalOrders FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product has the greatest number of units on order?",
        "output": "SELECT ProductName, UnitsOnOrder FROM products ORDER BY UnitsOnOrder DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method is used most frequently?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which orders had a delivery time greater than required?",
        "output": "SELECT OrderID, DATEDIFF(ShippedDate, RequiredDate) AS DeliveryTime FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for Q1 of this year?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE QUARTER(orders.OrderDate) = 1 AND YEAR(orders.OrderDate) = YEAR(CURDATE())",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the least ordered product each month.",
        "output": "SELECT p.ProductID, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, Month ORDER BY Month, TotalQuantity ASC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many unique products are sold in a specific region?",
        "output": "SELECT COUNT(DISTINCT od.ProductID) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.ShipRegion = 'SpecificRegion';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have never been ordered?",
        "output": "SELECT ProductID FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped late per month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers with no products currently in stock.",
        "output": "SELECT s.SupplierID, s.CompanyName FROM suppliers s WHERE NOT EXISTS (SELECT 1 FROM products p WHERE s.SupplierID = p.SupplierID AND p.UnitsInStock > 0);",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount given per order?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of shipping costs across different regions?",
        "output": "SELECT ShipRegion, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total Customer Lifetime Value for each customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN \"Order Details\" ON orders.OrderID = \"Order Details\".OrderID GROUP BY customers.CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the top 5 products based on units sold.",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) as UnitsSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY UnitsSold DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have never been ordered?",
        "output": "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the age distribution of employees making the most sales?",
        "output": "SELECT e.EmployeeID, e.BirthDate, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have a unit price higher than the average unit price of all products?",
        "output": "SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which order had the highest total discount?",
        "output": "SELECT OrderID, SUM(Discount * UnitPrice * Quantity) AS TotalDiscount FROM [Order Details] GROUP BY OrderID ORDER BY TotalDiscount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total quantity of products ordered by each customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].Quantity) AS TotalQuantity FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order value by customer?",
        "output": "SELECT c.CustomerID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List products that have never been ordered.",
        "output": "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT ProductID FROM [Order Details]);",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the monthly trend of on-time delivery rate?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*) AS OnTimeRate FROM orders GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify trends in stock levels over the past year for a given product.",
        "output": "SELECT DATE_FORMAT(od.OrderDate, '%Y-%m') AS OrderMonth, p.ProductName, p.UnitsInStock AS StockLevels FROM OrderDetails od JOIN products p ON od.ProductID = p.ProductID WHERE p.ProductID = ? AND od.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY OrderMonth, p.ProductName, StockLevels ORDER BY OrderMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales contribution of each sales territory (region)?",
        "output": "SELECT e.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS RegionSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Region;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the percentage of orders delivered on time for each shipping method?",
        "output": "SELECT ShipVia, SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipVia",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest number of orders with discounts applied?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS DiscountedOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0 GROUP BY e.EmployeeID ORDER BY DiscountedOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 3 performing products in terms of quantity sold?",
        "output": "SELECT ProductName, SUM([Order Details].Quantity) AS TotalQuantitySold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName ORDER BY TotalQuantitySold DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount given per order?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM (SELECT OrderID, AVG(Discount) as Discount FROM [Order Details] GROUP BY OrderID) AS OrderDiscounts;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers provide products that are frequently reordered?",
        "output": "SELECT SupplierID, COUNT(*) AS Reorders FROM products WHERE UnitsOnOrder > 0 GROUP BY SupplierID ORDER BY Reorders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total revenue generated by each supplier in 2023?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY suppliers.CompanyName ORDER BY total_revenue DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the customer with the highest lifetime value.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest number of products?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount applied per order?",
        "output": "SELECT OrderID, AVG(Discount) AS AverageDiscount FROM [Order Details] GROUP BY OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify low-performing products with high pricing.",
        "output": "SELECT ProductName FROM products WHERE UnitPrice > 100 AND ProductID NOT IN (SELECT ProductID FROM [Order Details] GROUP BY ProductID HAVING SUM(Quantity) > 0);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the busiest shipping month based on the number of shipped orders.",
        "output": "SELECT TO_CHAR(ShippedDate, 'YYYY-MM') AS Month, COUNT(OrderID) AS ShippedOrders FROM orders GROUP BY TO_CHAR(ShippedDate, 'YYYY-MM') ORDER BY ShippedOrders DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employees are associated with the most late shipments?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS LateShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY EmployeeID ORDER BY LateShipments DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total revenue generated per product?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS Revenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped but not delivered by the required date?",
        "output": "SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate IS NOT NULL AND ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which territories generate the highest sales, and which employees manage them?",
        "output": "SELECT e.Region, e.FirstName || ' ' || e.LastName AS EmployeeName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Region, EmployeeName ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the on-time delivery rate for the second quarter of 2023.",
        "output": "SELECT CAST(SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) AS FLOAT) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE OrderDate BETWEEN '2023-04-01' AND '2023-06-30'",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the Inventory Turnover Ratio for each product?",
        "output": "SELECT p.ProductID, (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) as InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a reorder level higher than 20?",
        "output": "SELECT ProductID, ProductName FROM products WHERE ReorderLevel > 20;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the trend of on-time delivery rates by month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN orders.OrderID END) / COUNT(orders.OrderID))*100 AS on_time_rate FROM orders GROUP BY month",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the month-over-month growth in sales for each employee?",
        "output": "SELECT e.EmployeeID, DATE_FORMAT(o.OrderDate,'%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, Month ORDER BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees with more than 5 years of service and their cumulative sales.",
        "output": "SELECT e.EmployeeID, CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE DATEDIFF(CURRENT_DATE, e.HireDate) > 1825 GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city received the most shipments and what are the total sales to that city?",
        "output": "SELECT ShipCity, COUNT(o.OrderID) AS Shipments, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of products supplied by each supplier?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which city has the highest number of suppliers?",
        "output": "SELECT City, COUNT(SupplierID) AS NumberOfSuppliers FROM suppliers GROUP BY City ORDER BY NumberOfSuppliers DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of products in each category?",
        "output": "SELECT CategoryID, COUNT(ProductID) AS NumberOfProducts FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the top 5 products by total sales value.",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped after the required date?",
        "output": "SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month had the highest on-time delivery rate?",
        "output": "SELECT Month, OnTimeDeliveryRate FROM (SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month) AS MonthlyRates ORDER BY OnTimeDeliveryRate DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List products with a sales count but no current stock.",
        "output": "SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.UnitsInStock = 0 GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers have placed orders in more than one country?",
        "output": "SELECT COUNT(DISTINCT CustomerID) FROM (SELECT CustomerID, COUNT(DISTINCT ShipCountry) AS CountryCount FROM orders GROUP BY CustomerID) AS CountryCounts WHERE CountryCount > 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total revenue generated by each country?",
        "output": "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Revenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total discount amount provided for each product.",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which cities have the highest number of orders handled by employees?",
        "output": "SELECT o.ShipCity, COUNT(DISTINCT o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY o.ShipCity ORDER BY OrderCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method is used most frequently?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS Frequency FROM orders GROUP BY ShipVia ORDER BY Frequency DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top 5 customers by total revenue generated.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY TotalRevenue DESC LIMIT 5",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the average unit price of products per supplier.",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AverageUnitPrice FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the total number of products sold by each supplier.",
        "output": "SELECT SupplierID, SUM([Order Details].Quantity) AS TotalProductsSold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products have the highest sales volume last month?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) AND MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY products.ProductName ORDER BY sales_volume DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipping company has the lowest average shipping cost per order?",
        "output": "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName ORDER BY avg_shipping_cost ASC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the top 5 customers by order quantity.",
        "output": "SELECT c.CustomerID, SUM(od.Quantity) AS TotalQuantity FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many discontinued products does each supplier have?",
        "output": "SELECT suppliers.SupplierID, COUNT(*) AS DiscontinuedProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.Discontinued = 1 GROUP BY suppliers.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers with orders exceeding $5000 in total.",
        "output": "SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 5000;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order in the last quarter?",
        "output": "SELECT AVG(orders.Freight) AS shipping_cost_per_order FROM orders WHERE OrderDate BETWEEN '2023-07-01' AND '2023-09-30'",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the retention rate for the last month?",
        "output": "SELECT COUNT(DISTINCT o.CustomerID) / (SELECT COUNT(DISTINCT o.CustomerID) FROM orders o WHERE o.OrderDate < DATE_TRUNC('month', current_date) - INTERVAL '1' month) FROM orders o WHERE o.OrderDate BETWEEN DATE_TRUNC('month', current_date) - INTERVAL '1' month AND DATE_TRUNC('month', current_date);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest unit price in each category?",
        "output": "SELECT p.CategoryID, p.ProductID, p.ProductName, p.UnitPrice FROM products p INNER JOIN (SELECT CategoryID, MAX(UnitPrice) AS MaxPrice FROM products GROUP BY CategoryID) mp ON p.CategoryID = mp.CategoryID AND p.UnitPrice = mp.MaxPrice;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find seasonal trends in product sales by month.",
        "output": "SELECT TO_CHAR(o.OrderDate, 'YYYY-MM') AS Month, p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY TO_CHAR(o.OrderDate, 'YYYY-MM'), p.ProductName ORDER BY Month, TotalQuantity DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average freight cost per order?",
        "output": "SELECT AVG(Freight) AS AvgFreight FROM orders",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the least lead time?",
        "output": "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY suppliers.SupplierID ORDER BY AverageLeadTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the contribution of each product to the total revenue?",
        "output": "SELECT ProductName, SUM(od.UnitPrice * od.Quantity) * 100.0 / (SELECT SUM(UnitPrice * Quantity) FROM [Order Details]) AS Contribution FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY Contribution DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average number of units ordered for each product category?",
        "output": "SELECT p.CategoryID, AVG(od.Quantity) AS AvgQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the top 5 cities with the highest number of orders.",
        "output": "SELECT ShipCity, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipCity ORDER BY TotalOrders DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the most common shipping method used?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS NumberOfShipments FROM orders GROUP BY ShipVia ORDER BY NumberOfShipments DESC FETCH FIRST 1 ROW ONLY;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many unique products were ordered last year?",
        "output": "SELECT COUNT(DISTINCT ProductID) FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city had the highest number of orders last year?",
        "output": "SELECT ShipCity, COUNT(*) AS OrderCount FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1 GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount applied across all order details?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order for each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AverageShippingCostPerOrder FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the average unit price of products from each supplier.",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were delivered on or before the required date each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How do sales trends vary by employee over the last quarter?",
        "output": "SELECT e.EmployeeID, DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY e.EmployeeID, Month ORDER BY e.EmployeeID, Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average order value handled by each employee?",
        "output": "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated from each country?",
        "output": "SELECT Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Country",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the employee with the highest sales in the United States.",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Country = 'USA' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the product performance based on sales in the last month?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY p.ProductName ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the correlation between freight cost and shipping time?",
        "output": "SELECT CORR(Freight, DATEDIFF(ShippedDate, OrderDate)) AS Correlation FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed each month by each customer?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, CustomerID, COUNT(OrderID) AS OrdersCount FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM'), CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the customer with the highest number of orders in the last month.",
        "output": "SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') GROUP BY CustomerID ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average number of days orders are shipped late?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgDaysLate FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the total units ordered for each category?",
        "output": "SELECT p.CategoryID, SUM(od.Quantity) AS TotalUnitsOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders delayed beyond the required date for each month?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(*) AS DelayedOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the customer retention rate for the first half of 2023.",
        "output": "SELECT (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-06-30') / NULLIF((SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate < '2023-01-01'), 0) AS customer_retention_rate",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the lifetime value of each customer?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders were not shipped by their required date?",
        "output": "SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders were placed by customers in each region?",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify any correlation between employee salary and sales performance.",
        "output": "SELECT e.EmployeeID, e.Salary, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How does the average shipping cost vary by country?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average age of employees in each title category?",
        "output": "SELECT e.Title, AVG(TIMESTAMPDIFF(YEAR, e.BirthDate, CURDATE())) AS AverageAge FROM employees e GROUP BY e.Title;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee fulfilled the highest number of orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS NumOrders FROM orders GROUP BY EmployeeID ORDER BY NumOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Determine the average time delay for late orders by month.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgDelay FROM orders WHERE ShippedDate > RequiredDate GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "List all discontinued products.",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which country has the highest average shipping cost?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipCountry ORDER BY AverageFreight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which discontinued products still have stock available?",
        "output": "SELECT ProductID, ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the monthly inventory turnover ratio.",
        "output": "SELECT strftime('%Y-%m', o.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total sales value for products with a discount.",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) as TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0 GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the top 5 products by total sales revenue.",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] GROUP BY ProductID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the average discount given for all products ordered.",
        "output": "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List all products with their total quantity sold over all orders.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantitySold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total sales revenue per product for the last month?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= DATEADD(MONTH, -1, CAST(GETDATE() AS DATE)) GROUP BY products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which category has the most products out of stock?",
        "output": "SELECT CategoryID, COUNT(ProductID) AS OutOfStockCount FROM products WHERE UnitsInStock = 0 GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were fulfilled within 5 days across all regions?",
        "output": "SELECT COUNT(*) AS OrdersFulfilledWithin5Days FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) <= 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue generated by each supplier?",
        "output": "SELECT suppliers.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY suppliers.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total number of orders shipped late by each employee.",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS LateShipments FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate > o.RequiredDate GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee generated the most sales in February 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE MONTH(orders.OrderDate) = 2 AND YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the average UnitPrice for each category.",
        "output": "SELECT CategoryID, AVG(UnitPrice) as AveragePrice FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which region had the highest growth in sales in the last six months?",
        "output": "SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATEADD(month, -6, CURRENT_DATE) GROUP BY orders.ShipRegion ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated by each employee?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total discount given to customers this month?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE) AND YEAR(OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product had the highest performance in terms of quantity sold in the past year?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH) GROUP BY products.ProductID ORDER BY product_performance DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify orders with a total value greater than $10,000.",
        "output": "SELECT o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 10000;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the average units in stock for each product category.",
        "output": "SELECT c.CategoryID, AVG(p.UnitsInStock) AS AvgStock FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total discount given by month in 2023?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS total_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE EXTRACT(YEAR FROM OrderDate) = 2023 GROUP BY TO_CHAR(OrderDate, 'YYYY-MM')",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average number of products in each order?",
        "output": "SELECT AVG(NumProducts) FROM (SELECT OrderID, COUNT(ProductID) AS NumProducts FROM [Order Details] GROUP BY OrderID) AS OrderProductCount;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 5 products with the highest unit price?",
        "output": "SELECT ProductName, UnitPrice FROM products ORDER BY UnitPrice DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the total freight cost by each supplier.",
        "output": "SELECT s.SupplierID, s.CompanyName, SUM(o.Freight) AS TotalFreight FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the countries with the highest number of suppliers.",
        "output": "SELECT Country, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY Country ORDER BY SupplierCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What proportion of orders were delivered late by month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(CASE WHEN ShippedDate > RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID) AS LateDeliveryRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List products where the units on order exceed the units in stock.",
        "output": "SELECT ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;",
        "difficulty": "medium"
    }
]