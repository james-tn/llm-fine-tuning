[
    {
        "scenario": "Order Analysis",
        "input": "Calculate the total number of units sold each month.",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].Quantity) AS TotalUnitsSold FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product has contributed the most to total sales revenue?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS ProductSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY ProductSales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers are located in the same city?",
        "output": "SELECT s1.SupplierID, s1.CompanyName FROM suppliers s1 JOIN suppliers s2 ON s1.City = s2.City AND s1.SupplierID <> s2.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have seen an increase in orders compared to the previous month?",
        "output": "SELECT p.ProductID, p.ProductName FROM (SELECT ProductID, SUM(Quantity) AS CurrentMonthSales FROM [Order Details] WHERE OrderDate BETWEEN DATEADD(month, -1, CAST(GETDATE() AS DATE)) AND CAST(GETDATE() AS DATE) GROUP BY ProductID) AS current JOIN (SELECT ProductID, SUM(Quantity) AS PrevMonthSales FROM [Order Details] WHERE OrderDate BETWEEN DATEADD(month, -2, CAST(GETDATE() AS DATE)) AND DATEADD(month, -1, CAST(GETDATE() AS DATE)) GROUP BY ProductID) AS previous ON current.ProductID = previous.ProductID JOIN products p ON current.ProductID = p.ProductID WHERE CurrentMonthSales > PrevMonthSales;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employee with the highest average order value.",
        "output": "SELECT e.FirstName, e.LastName FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the monthly trend in inventory turnover ratio.",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) AS MonthlyInventoryTurnoverRatio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY EXTRACT(MONTH FROM OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product has received the highest discount rate?",
        "output": "SELECT products.ProductID, products.ProductName FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID ORDER BY [Order Details].Discount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the Inventory Turnover Ratio for the last month.",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].OrderID IN (SELECT DISTINCT OrderID FROM SomeOrderTable WHERE ORDERDATE BETWEEN '2023-09-01' AND '2023-09-30');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed each month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, COUNT(*) AS NumberOfOrders FROM orders GROUP BY DATE_TRUNC('month', orders.OrderDate);",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the inventory turnover ratio for the entire product catalog.",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS InventoryTurnoverRatio FROM products p INNER JOIN [Order Details] od ON p.ProductID = od.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for the month of January 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average order value across all orders?",
        "output": "SELECT AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM [Order Details] od;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total quantity of products sold per month?",
        "output": "SELECT EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY OrderMonth",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest total sales this year?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the total sales generated by employees in each country.",
        "output": "SELECT e.Country, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Country",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have never been ordered?",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for each customer?",
        "output": "SELECT customers.CustomerID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS average_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the top 5 customers based on lifetime value.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC LIMIT 5",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which country has the highest number of customers?",
        "output": "SELECT c.Country, COUNT(c.CustomerID) AS CustomerCount FROM customers c GROUP BY c.Country ORDER BY CustomerCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which categories have the highest average pricing?",
        "output": "SELECT c.CategoryID, AVG(p.UnitPrice) AS AveragePrice FROM categories c JOIN products p ON c.CategoryID = p.CategoryID GROUP BY c.CategoryID ORDER BY AveragePrice DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the most frequently ordered product by customers in 2023.",
        "output": "SELECT [Order Details].ProductID, COUNT([Order Details].OrderID) AS frequency FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY [Order Details].ProductID ORDER BY frequency DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the total discounts given on orders last year.",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS total_discounts FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "For each employee, what is their average order value?",
        "output": "SELECT EmployeeID, AVG((OD.UnitPrice * OD.Quantity * (1 - OD.Discount))) AS AvgOrderValue FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped after their required dates?",
        "output": "SELECT COUNT(orders.OrderID) AS LateOrders FROM orders WHERE orders.ShippedDate > orders.RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the proportion of orders with discounts applied.",
        "output": "SELECT COUNT(DISTINCT od.OrderID) * 1.0 / (SELECT COUNT(OrderID) FROM orders) AS discount_rate FROM [Order Details] od WHERE od.Discount > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total freight cost incurred for each supplier?",
        "output": "SELECT s.SupplierID, SUM(o.Freight) AS TotalFreight FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units are on order for products by category?",
        "output": "SELECT p.CategoryID, SUM(p.UnitsOnOrder) AS UnitsOnOrder FROM products p GROUP BY p.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total discount given to each customer.",
        "output": "SELECT c.CustomerID, SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product generated the most revenue?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average shipping time for orders?",
        "output": "SELECT AVG(DATEDIFF(day, OrderDate, ShippedDate)) AS avg_shipping_time FROM orders WHERE ShippedDate IS NOT NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee was hired most recently?",
        "output": "SELECT FirstName, LastName, HireDate FROM employees ORDER BY HireDate DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the relationship between order volume and shipping costs?",
        "output": "SELECT COUNT(OrderID) / SUM(Freight) AS OrderVolumeToCostRatio FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed by each customer each month?",
        "output": "SELECT CustomerID, DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS NumOrders FROM orders GROUP BY CustomerID, Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average order value for each month this year?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS avg_order_value FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE()) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 5 best-selling products by quantity?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average order value processed by each employee?",
        "output": "SELECT e.FirstName, e.LastName, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product generated the highest sales this year?",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS product_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductName ORDER BY product_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company had the lowest average shipping cost last month?",
        "output": "SELECT ShipVia, AVG(Freight) AS avg_shipping_cost FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '1 month') AND EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE - INTERVAL '1 month') GROUP BY ShipVia ORDER BY avg_shipping_cost ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has achieved the highest sales growth rate?",
        "output": "SELECT e.FirstName, e.LastName, (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / SUM(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) OVER()) AS SalesGrowthRate FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN CURRENT_DATE - INTERVAL '1 year' AND CURRENT_DATE GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY SalesGrowthRate DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest amount of units on order compared to units in stock?",
        "output": "SELECT ProductID, ProductName, UnitsOnOrder, UnitsInStock FROM products WHERE UnitsOnOrder > UnitsInStock;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue for each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders have been delayed beyond their required date?",
        "output": "SELECT COUNT(OrderID) AS DelayedOrders FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the shortest lead time for deliveries in 2023?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.SupplierID ORDER BY avg_lead_time ASC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the top five employees who generated the highest sales revenue.",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 5",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average unit price per category of products?",
        "output": "SELECT categories.CategoryID, AVG(products.UnitPrice) AS AvgUnitPrice FROM products JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top 5 most frequently ordered products?",
        "output": "SELECT p.ProductName, COUNT(od.OrderID) AS OrderCount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY OrderCount DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the highest discount given on any order item this year?",
        "output": "SELECT MAX(od.Discount) AS HighestDiscount FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue generated in the first quarter of 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total sales quantity for each product?",
        "output": "SELECT p.ProductID, SUM(od.Quantity) AS TotalSalesQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped by each shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the product with the highest total sales revenue.",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalRevenue FROM [Order Details] GROUP BY ProductID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Analyze the sales trend per product category over the last year.",
        "output": "SELECT categories.CategoryName, DATE_FORMAT(OrderDate, '%Y-%m') AS month, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(OrderDate) = 2023 GROUP BY categories.CategoryName, month ORDER BY total_sales DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average time taken to fulfill orders each month?",
        "output": "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM')",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers have the highest average product pricing?",
        "output": "SELECT s.SupplierID, AVG(p.UnitPrice) AS AvgPrice FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID ORDER BY AvgPrice DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total sales revenue generated from each product?",
        "output": "SELECT ProductID, SUM(Quantity * UnitPrice) AS TotalRevenue FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders per employee?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the regions with the highest order count?",
        "output": "SELECT region.RegionDescription, COUNT(orders.OrderID) AS order_count FROM orders JOIN employeeTerritories ON orders.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID GROUP BY region.RegionDescription ORDER BY order_count DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the most common shipping city and how many orders were shipped there?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS CityOrderCount FROM orders GROUP BY ShipCity ORDER BY CityOrderCount DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees whose orders have never been shipped late.",
        "output": "SELECT e.EmployeeID FROM employees e WHERE NOT EXISTS (SELECT 1 FROM orders o WHERE o.EmployeeID = e.EmployeeID AND o.RequiredDate < o.ShippedDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average number of days between OrderDate and RequiredDate?",
        "output": "SELECT AVG(RequiredDate - OrderDate) AS AvgDays FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Determine the average freight cost per order.",
        "output": "SELECT AVG(Freight) AS AvgFreightCost FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the revenue generated by each product after discount.",
        "output": "SELECT ProductID, SUM(Quantity * UnitPrice * (1 - Discount)) AS Revenue FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List all orders that have not been shipped yet.",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest inventory levels relative to sales?",
        "output": "SELECT products.ProductID, products.ProductName, (products.UnitsInStock / SUM([Order Details].Quantity)) AS InventoryToSalesRatio FROM products JOIN [Order Details] ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID, products.ProductName ORDER BY InventoryToSalesRatio DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of units on order from each supplier?",
        "output": "SELECT s.SupplierID, s.CompanyName, SUM(p.UnitsOnOrder) AS TotalUnitsOnOrder FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID, s.CompanyName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Analyze the monthly sales trend for a specific employee.",
        "output": "SELECT e.EmployeeID, YEAR(o.OrderDate) AS Year, MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE e.EmployeeID = ? GROUP BY e.EmployeeID, Year, Month",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Are there any discontinued products that are still on order?",
        "output": "SELECT p.ProductName FROM products p WHERE p.Discontinued = 1 AND p.UnitsOnOrder > 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the monthly growth rate of total sales.",
        "output": "SELECT EXTRACT(YEAR FROM O.OrderDate) AS OrderYear, EXTRACT(MONTH FROM O.OrderDate) AS OrderMonth, 100 * (SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) - LAG(SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)), 1) OVER (ORDER BY EXTRACT(YEAR FROM O.OrderDate), EXTRACT(MONTH FROM O.OrderDate))) / LAG(SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)), 1) OVER (ORDER BY EXTRACT(YEAR FROM O.OrderDate), EXTRACT(MONTH FROM O.OrderDate))) AS GrowthRate FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY OrderYear, OrderMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the distribution of employee titles within the sales team?",
        "output": "SELECT e.Title, COUNT(e.EmployeeID) AS TitleCount FROM employees e GROUP BY e.Title;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of units ordered for each category?",
        "output": "SELECT CategoryID, SUM(Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers who have not placed an order in the last year.",
        "output": "SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate IS NULL OR o.OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the top three employees who have the most sales in the current year.",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have shipped at least 100 orders?",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, COUNT(DISTINCT orders.OrderID) AS NumOrders FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID, suppliers.CompanyName HAVING COUNT(DISTINCT orders.OrderID) >= 100;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated by each supplier?",
        "output": "SELECT p.SupplierID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated by each customer over their lifetime?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the monthly performance of each product.",
        "output": "SELECT p.ProductID, YEAR(o.OrderDate) AS Year, MONTH(o.OrderDate) AS Month, SUM(od.Quantity) AS MonthlyPerformance FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, YEAR(o.OrderDate), MONTH(o.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the stock status for each product category?",
        "output": "SELECT c.CategoryID, SUM(p.UnitsInStock) AS InStock FROM categories c JOIN products p ON c.CategoryID = p.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Determine the average number of products per order.",
        "output": "SELECT AVG(product_count) AS avg_product_count FROM (SELECT [Order Details].OrderID, COUNT([Order Details].ProductID) AS product_count FROM [Order Details] GROUP BY [Order Details].OrderID) AS order_product_count;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which country has the highest number of customers?",
        "output": "SELECT customers.Country, COUNT(customers.CustomerID) AS number_of_customers FROM customers GROUP BY customers.Country ORDER BY number_of_customers DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders have yet to be shipped?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order for each month?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS year, EXTRACT(MONTH FROM OrderDate) AS month, AVG(Freight) AS avg_shipping_cost FROM orders GROUP BY year, month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders were delivered on or before the required date each month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0) / COUNT(orders.OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_TRUNC('month', orders.OrderDate)",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average number of orders per customer from the USA?",
        "output": "SELECT AVG(order_count) FROM (SELECT COUNT(OrderID) AS order_count FROM orders o JOIN customers c ON o.CustomerID = c.CustomerID WHERE c.Country = 'USA' GROUP BY c.CustomerID) AS subquery;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost incurred for each shipping method?",
        "output": "SELECT orders.ShipVia, SUM(orders.Freight) AS TotalFreight FROM orders GROUP BY orders.ShipVia",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total discount given each month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the on-time delivery rate for each shipping method?",
        "output": "SELECT ShipVia, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employees have the highest sales in each department?",
        "output": "SELECT departments.DepartmentID, employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN departments ON employees.DepartmentID = departments.DepartmentID GROUP BY departments.DepartmentID, employees.EmployeeID ORDER BY departments.DepartmentID, total_sales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have delivered the highest total value of products?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_value FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY total_value DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "List all orders that were fulfilled within 3 days.",
        "output": "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTime FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) <= 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated from each product?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * (od.UnitPrice - (od.UnitPrice * od.Discount))) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the top 5 products by sales quantity.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS SalesQuantity FROM products p INNER JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SalesQuantity DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average unit price of all products in the inventory?",
        "output": "SELECT AVG(UnitPrice) AS AverageUnitPrice FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the most orders associated with overdue shipment?",
        "output": "SELECT e.FirstName, e.LastName, COUNT(o.OrderID) AS OverdueOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.RequiredDate < o.ShippedDate GROUP BY e.FirstName, e.LastName ORDER BY OverdueOrders DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue for the year 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the top 5 products with the highest sales revenue.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS SalesRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SalesRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find products that have more units on order than in stock.",
        "output": "SELECT p.ProductName FROM products p WHERE p.UnitsOnOrder > p.UnitsInStock;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product categories have the most products discontinued?",
        "output": "SELECT CategoryID, COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1 GROUP BY CategoryID ORDER BY DiscontinuedProducts DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue for each employee?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Determine the number of orders having more than 10 items.",
        "output": "SELECT COUNT(*) AS LargeOrdersCount FROM (SELECT o.OrderID FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID HAVING SUM(od.Quantity) > 10) AS large_orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales generated by each employee?",
        "output": "SELECT EmployeeID, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products are currently out of stock?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the most number of discontinued products?",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, COUNT(products.ProductID) AS DiscontinuedProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.Discontinued = 1 GROUP BY suppliers.SupplierID ORDER BY DiscontinuedProducts DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the monthly trend in product discontinuation rates?",
        "output": "SELECT MONTH(o.OrderDate) AS Month, COUNT(p.ProductID) AS DiscontinuedProducts FROM orders o INNER JOIN products p ON o.ProductID = p.ProductID WHERE p.Discontinued = 1 GROUP BY MONTH(o.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the most frequently ordered product in the last quarter?",
        "output": "SELECT ProductID, COUNT(OrderID) AS OrderCount FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) AND QUARTER(orders.OrderDate) = QUARTER(CURRENT_DATE) - 1 GROUP BY ProductID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which city has the highest number of shipped orders?",
        "output": "SELECT o.ShipCity, COUNT(o.OrderID) AS ShippedOrders FROM orders o WHERE o.ShippedDate IS NOT NULL GROUP BY o.ShipCity ORDER BY ShippedOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped each month?",
        "output": "SELECT EXTRACT(YEAR FROM ShippedDate) AS year, EXTRACT(MONTH FROM ShippedDate) AS month, COUNT(OrderID) AS total_orders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY year, month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which shipping method is most commonly used?",
        "output": "SELECT o.ShipVia, COUNT(o.OrderID) AS ShipMethodCount FROM orders o GROUP BY o.ShipVia ORDER BY ShipMethodCount DESC",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost for orders shipped to each country?",
        "output": "SELECT ShipCountry, AVG(Freight) AS avg_shipping_cost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the Customer Retention Rate for 2023 compared to 2022.",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN YEAR(orders.OrderDate) = 2023 THEN orders.CustomerID END) / COUNT(DISTINCT CASE WHEN YEAR(orders.OrderDate) = 2022 THEN orders.CustomerID END)) * 100 AS RetentionRate2023 FROM orders WHERE YEAR(orders.OrderDate) IN (2022, 2023)",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the monthly sales trend for each country?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CountrySales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_TRUNC('month', orders.OrderDate), orders.ShipCountry",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find customers who haven't placed an order in the last year.",
        "output": "SELECT c.CustomerID FROM customers c WHERE NOT EXISTS (SELECT 1 FROM orders o WHERE c.CustomerID = o.CustomerID AND o.OrderDate > DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR));",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How does the number of units ordered relate to the number of units in stock?",
        "output": "SELECT p.ProductName, p.UnitsInStock, SUM(od.Quantity) AS TotalUnitsOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does the average salary of employees impact their total sales?",
        "output": "SELECT employees.EmployeeID, employees.Salary, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, employees.Salary",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average number of products per order?",
        "output": "SELECT AVG(ProductCount) FROM (SELECT COUNT(od.ProductID) AS ProductCount FROM [Order Details] od GROUP BY od.OrderID) AS OrderProductCounts",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the percentage of products discontinued.",
        "output": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM products) AS DiscontinuedPercentage FROM products WHERE Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units of each product are currently on order?",
        "output": "SELECT p.ProductName, p.UnitsOnOrder FROM products p;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost for orders with the same shipping recipient name?",
        "output": "SELECT ShipName, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY ShipName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time?",
        "output": "SELECT DATE_TRUNC('month', OrderDate), AVG(DATEDIFF(ShippedDate, OrderDate)) FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for each month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What's the proportion of total sales attributable to each employee?",
        "output": "SELECT e.EmployeeID, (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / (SELECT SUM(UnitPrice * Quantity * (1 - Discount)) FROM [Order Details])) * 100 AS SalesProportion FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee processed the highest number of orders this year?",
        "output": "SELECT o.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY o.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List the products that have never been ordered.",
        "output": "SELECT ProductName FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].ProductID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the monthly trend of total sales over the past year?",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH) GROUP BY DATE_FORMAT(o.OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city has the highest number of shipments?",
        "output": "SELECT ShipCity, COUNT(OrderID) FROM orders GROUP BY ShipCity ORDER BY COUNT(OrderID) DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the Customer Retention Rate for the last year.",
        "output": "SELECT COUNT(DISTINCT CASE WHEN o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' THEN o.CustomerID END) / NULLIF(COUNT(DISTINCT CASE WHEN o.OrderDate < '2022-01-01' THEN o.CustomerID END), 0) AS retention_rate FROM orders o;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which month had the highest total sales this year?",
        "output": "SELECT MONTH(O.OrderDate) AS OrderMonth, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE YEAR(O.OrderDate) = YEAR(CURRENT_DATE) GROUP BY OrderMonth ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average fulfillment time for orders each month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, AVG(DATE_PART('day', age(orders.ShippedDate, orders.OrderDate))) AS AverageFulfillmentTime FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the overall customer retention rate for the past year.",
        "output": "SELECT (COUNT(DISTINCT o2.CustomerID) / COUNT(DISTINCT o1.CustomerID)) * 100 AS RetentionRate FROM orders o1 LEFT JOIN orders o2 ON o1.CustomerID = o2.CustomerID WHERE o1.OrderDate < DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND o2.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND CURRENT_DATE;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "List the total sales generated by each employee in 2023.",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for all orders within this year?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total revenue loss due to discounts for each product.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * od.Discount) AS RevenueLoss FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue for each month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders are shipped via each shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the fastest shipping method by average order fulfillment time.",
        "output": "SELECT o.ShipVia, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgFulfillmentTime FROM orders o WHERE o.ShippedDate IS NOT NULL GROUP BY o.ShipVia ORDER BY AvgFulfillmentTime ASC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average reorder level per category?",
        "output": "SELECT products.CategoryID, AVG(products.ReorderLevel) AS AvgReorderLevel FROM products GROUP BY products.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total shipping cost per shipper in 2023?",
        "output": "SELECT shippers.CompanyName, SUM(orders.Freight) AS total_freight FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY shippers.CompanyName",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the top 5 products by sales volume.",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalSales FROM [Order Details] GROUP BY ProductID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue loss due to discounts per product?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * od.Discount) AS RevenueLoss FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the shortest average lead time for deliveries?",
        "output": "SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID ORDER BY AvgLeadTime ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does the sales performance compare before and after a major product launch?",
        "output": "SELECT EXTRACT(YEAR FROM orders.OrderDate) AS year, EXTRACT(MONTH FROM orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY year, month ORDER BY sales DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of unique customers served by each employee?",
        "output": "SELECT e.FirstName, e.LastName, COUNT(DISTINCT o.CustomerID) AS UniqueCustomers FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average sales quantity per product, grouped by month?",
        "output": "SELECT MONTH(o.OrderDate) AS Month, p.ProductName, AVG(od.Quantity) AS AvgSalesQuantity FROM orders o INNER JOIN [Order Details] od ON o.OrderID = od.OrderID INNER JOIN products p ON od.ProductID = p.ProductID GROUP BY MONTH(o.OrderDate), p.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average delay in shipping (if any) across all orders?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS avg_delay FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers provide the highest number of products?",
        "output": "SELECT s.SupplierID, COUNT(p.ProductID) AS NumProducts FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID ORDER BY NumProducts DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How often do products need reordering based on current inventory and sales data?",
        "output": "SELECT ProductName, (UnitsInStock / SUM(od.Quantity)) AS ReorderFrequency FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY ProductName, UnitsInStock ORDER BY ReorderFrequency;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total value of inventory currently in stock?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product has the highest sales volume in 2023?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductName ORDER BY sales_volume DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top 5 most frequently ordered products.",
        "output": "SELECT od.ProductID, COUNT(od.OrderID) AS OrderCount FROM [Order Details] od GROUP BY od.ProductID ORDER BY OrderCount DESC LIMIT 5",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the top 3 products by revenue in each category for the current year.",
        "output": "SELECT categories.CategoryID, products.ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity) AS Revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID WHERE YEAR([Order Details].OrderDate) = YEAR(CURRENT_DATE) GROUP BY categories.CategoryID, products.ProductID ORDER BY categories.CategoryID, Revenue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the top 3 cities with the highest order volume in 2023?",
        "output": "SELECT orders.ShipCity, COUNT(orders.OrderID) AS order_volume FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY orders.ShipCity ORDER BY order_volume DESC LIMIT 3",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the monthly total sales?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of customers placed repeat orders this year?",
        "output": "SELECT (COUNT(DISTINCT c1.CustomerID) / COUNT(DISTINCT c2.CustomerID)) * 100 AS retention_rate FROM orders c1 JOIN orders c2 ON c1.CustomerID = c2.CustomerID WHERE c1.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND c2.OrderDate < '2023-01-01'",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders were shipped late?",
        "output": "SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the difference in sales between the highest and lowest performing employees.",
        "output": "SELECT MAX(TotalSales) - MIN(TotalSales) AS SalesDifference FROM (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID) AS SalesData",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue from repeat customers in the last year?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.CustomerID IN (SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 1) AND YEAR(o.OrderDate) = YEAR(CURDATE()) - 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the maximum, minimum, and average shipping cost per month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, MAX(Freight) AS MaxShippingCost, MIN(Freight) AS MinShippingCost, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average supplier lead time for each supplier?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.SupplierID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total freight cost for orders shipped to a specific country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders WHERE ShipCountry = ? GROUP BY ShipCountry ORDER BY TotalFreight DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total sales revenue per category?",
        "output": "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSalesRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "List the top 5 customers by lifetime value.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY lifetime_value DESC LIMIT 5",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month had the longest average order fulfillment time?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY Month ORDER BY AverageFulfillmentTime DESC FETCH FIRST 1 ROW ONLY;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product has the highest reorder level?",
        "output": "SELECT ProductName, ReorderLevel FROM products ORDER BY ReorderLevel DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of freight costs across different regions?",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS NumOrders, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping delay for late shipments?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the countries and the number of customers from each.",
        "output": "SELECT Country, COUNT(CustomerID) AS total_customers FROM customers GROUP BY Country;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of orders with a freight cost greater than the average freight cost?",
        "output": "SELECT COUNT(orders.OrderID) AS OrdersAboveAvgFreight FROM orders WHERE orders.Freight > (SELECT AVG(Freight) FROM orders);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product has the highest number of units on order?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsOnOrder = (SELECT MAX(UnitsOnOrder) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were processed by each employee last month?",
        "output": "SELECT e.FirstName, e.LastName, COUNT(o.OrderID) AS NumberOfOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE EXTRACT(MONTH FROM o.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE - INTERVAL '1' MONTH) AND EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '1' MONTH) GROUP BY e.EmployeeID, e.FirstName, e.LastName",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products that are below their reorder level.",
        "output": "SELECT p.ProductName FROM products p WHERE p.UnitsInStock < p.ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees manage other employees and how many do they manage?",
        "output": "SELECT e.EmployeeID, COUNT(r.EmployeeID) AS Reports FROM employees e LEFT JOIN employees r ON e.EmployeeID = r.ReportsTo GROUP BY e.EmployeeID",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which regions have the highest delay in shipping?",
        "output": "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AverageDelay FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total quantity sold for each product?",
        "output": "SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalQuantity DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average salary of employees grouped by their title?",
        "output": "SELECT Title, AVG(Salary) AS AverageSalary FROM employees GROUP BY Title",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total revenue generated by each customer.",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS total_revenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find employees who have worked for more than 10 years.",
        "output": "SELECT e.FirstName, e.LastName FROM employees e WHERE TIMESTAMPDIFF(YEAR, e.HireDate, CURDATE()) > 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were placed by each employee in the last year?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS NumberOfOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders contain products with a discount greater than 15%?",
        "output": "SELECT COUNT(DISTINCT OrderID) AS LargeDiscountOrders FROM [Order Details] WHERE Discount > 0.15",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total discount given on orders in February 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS total_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28'",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the total freight cost incurred for orders delivered by each shipping company.",
        "output": "SELECT shippers.CompanyName, SUM(orders.Freight) AS total_freight_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost for orders shipped to each country?",
        "output": "SELECT ShipCountry, AVG(Freight) FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were shipped late in the last month?",
        "output": "SELECT COUNT(o.OrderID) AS LateOrders FROM orders o WHERE o.RequiredDate < o.ShippedDate AND EXTRACT(MONTH FROM o.ShippedDate) = EXTRACT(MONTH FROM CURRENT_DATE - INTERVAL '1' MONTH) AND EXTRACT(YEAR FROM o.ShippedDate) = EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '1' MONTH)",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the average discount applied to products.",
        "output": "SELECT AVG(Discount) FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order fulfillment time across all orders?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgFulfillmentTime FROM orders",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the month with the highest revenue from orders.",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS total_revenue FROM orders o JOIN \"Order Details\" od ON o.OrderID = od.OrderID GROUP BY EXTRACT(MONTH FROM OrderDate) ORDER BY total_revenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the month with the highest average order value.",
        "output": "SELECT Month, SUM(MonthTotal) / COUNT(DISTINCT OrderID) AS AverageOrderValue FROM (SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, orders.OrderID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthTotal FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month, orders.OrderID) AS MonthlyTot GROUP BY Month ORDER BY AverageOrderValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the city with the highest average order value.",
        "output": "SELECT ShipCity, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) / COUNT(DISTINCT O.OrderID) AS AvgOrderValue FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY ShipCity ORDER BY AvgOrderValue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average supplier lead time for each supplier?",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID, suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee handled the most orders this year?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping time for orders shipped using each shipping method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_shipping_time FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders have a discount applied to them?",
        "output": "SELECT COUNT(DISTINCT OrderID) AS DiscountedOrders FROM [Order Details] WHERE Discount > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which region has the highest total order value?",
        "output": "SELECT c.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Region ORDER BY TotalOrderValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the current stock value for each product?",
        "output": "SELECT ProductID, (UnitPrice * UnitsInStock) AS StockValue FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many unique customers made purchases last month?",
        "output": "SELECT COUNT(DISTINCT orders.CustomerID) AS unique_customers FROM orders WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH)",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the total sales for each month across all products?",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products are out of stock from each supplier?",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, COUNT(products.ProductID) AS OutOfStockProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsInStock = 0 GROUP BY suppliers.SupplierID, suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which product had the highest total sales volume?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalSales DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the monthly inventory turnover ratio for all products?",
        "output": "SELECT EXTRACT(MONTH FROM orders.OrderDate) AS Month, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnover FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY EXTRACT(MONTH FROM orders.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How does the shipping time vary across different countries?",
        "output": "SELECT ShipCountry, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders GROUP BY ShipCountry;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total discount given for each product category?",
        "output": "SELECT c.CategoryID, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM products p INNER JOIN [Order Details] od ON p.ProductID = od.ProductID INNER JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have exceeded their reorder levels in past months?",
        "output": "SELECT p.ProductName FROM products p WHERE p.UnitsInStock < p.ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the total number of orders that included discontinued products.",
        "output": "SELECT COUNT(DISTINCT [Order Details].OrderID) AS NumOrders FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for electronic products?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID WHERE categories.CategoryName LIKE '%Electronics%' GROUP BY categories.CategoryName",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many discontinued products do we have?",
        "output": "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many distinct customers have placed orders in the year 2023?",
        "output": "SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers have never placed an order?",
        "output": "SELECT COUNT(c.CustomerID) FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderID IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of orders that have not been shipped yet?",
        "output": "SELECT COUNT(OrderID) AS UnshippedOrders FROM orders WHERE ShippedDate IS NULL",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How often does the shipping date match the required date?",
        "output": "SELECT COUNT(OrderID) AS ExactMatchCount FROM orders WHERE ShippedDate = RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of orders by shipping region?",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have the highest total sales?",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY TotalSales DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the correlation between freight cost and order fulfillment time?",
        "output": "SELECT CORR(Freight, DATEDIFF(ShippedDate, OrderDate)) AS Correlation FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month has the highest average order value?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(OrderValue) FROM orders GROUP BY Month ORDER BY AVG(OrderValue) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the top 5 products with the highest sales quantity.",
        "output": "SELECT ProductID, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the total freight cost for orders shipped via each shipping method this year.",
        "output": "SELECT o.ShipVia, SUM(o.Freight) AS TotalFreight FROM orders o WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY o.ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were not shipped on time?",
        "output": "SELECT COUNT(o.OrderID) FROM orders o WHERE o.ShippedDate > o.RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue generated in 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders that were not delivered on time each month?",
        "output": "SELECT EXTRACT(YEAR FROM ShippedDate) AS year, EXTRACT(MONTH FROM ShippedDate) AS month, COUNT(OrderID) AS late_orders FROM orders WHERE ShippedDate > RequiredDate GROUP BY year, month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the average customer order turnaround time per employee.",
        "output": "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgTurnaroundTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NOT NULL GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the monthly sales trend for each product?",
        "output": "SELECT ProductID, EXTRACT(MONTH FROM orders.OrderDate) AS Month, SUM([Order Details].Quantity) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ProductID, EXTRACT(MONTH FROM orders.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the products with the highest unit price.",
        "output": "SELECT ProductID, UnitPrice FROM products ORDER BY UnitPrice DESC LIMIT 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer has placed the most orders and what is their total order value?",
        "output": "SELECT orders.CustomerID, COUNT(orders.OrderID) AS TotalOrders, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.CustomerID ORDER BY TotalOrders DESC, TotalOrderValue DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "List the top five customers based on the number of orders placed this year.",
        "output": "SELECT CustomerID, COUNT(OrderID) AS order_count FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY CustomerID ORDER BY order_count DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the ratio of units in stock to units on order for each product?",
        "output": "SELECT ProductName, UnitsInStock, UnitsOnOrder, (UnitsInStock/NULLIF(UnitsOnOrder, 0)) AS StockToOrderRatio FROM products;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which products have never been ordered?",
        "output": "SELECT p.ProductID FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employee with the most number of orders shipped late.",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS LateShipments FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.RequiredDate < o.ShippedDate GROUP BY e.EmployeeID ORDER BY LateShipments DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order by shipping company?",
        "output": "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated by each employee during the last quarter?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE() GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for the top 10% of orders by sales value each month?",
        "output": "WITH OrderValues AS (SELECT orders.OrderID, DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS OrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID, DATE_TRUNC('month', orders.OrderDate)), RankedOrders AS (SELECT OrderID, Month, OrderValue, ROW_NUMBER() OVER (PARTITION BY Month ORDER BY OrderValue DESC) AS RowNum, COUNT(*) OVER (PARTITION BY Month) AS TotalOrders FROM OrderValues) SELECT AVG(OrderValue) AS AvgTopOrderValue FROM RankedOrders WHERE RowNum <= TotalOrders / 10",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the inventory value of products supplied by each supplier?",
        "output": "SELECT s.SupplierID, SUM(p.UnitPrice * p.UnitsInStock) AS InventoryValue FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee has handled the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS NumOrders FROM orders GROUP BY EmployeeID ORDER BY NumOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(Freight) AS TotalFreight FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Determine the customer retention rate for the first quarter of 2023.",
        "output": "SELECT ((SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-01-01')) AS customer_retention_rate",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which country had the highest number of shipments this year?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS orders_count FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY ShipCountry ORDER BY orders_count DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many distinct products are ordered by customers in the last month?",
        "output": "SELECT COUNT(DISTINCT ProductID) AS DistinctProductsOrdered FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE));",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which day of the week are most orders shipped?",
        "output": "SELECT DAYNAME(ShippedDate) AS Day, COUNT(OrderID) FROM orders GROUP BY Day ORDER BY COUNT(OrderID) DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many unique products are provided by suppliers located in each country?",
        "output": "SELECT suppliers.Country, COUNT(DISTINCT products.ProductID) AS UniqueProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.Country;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order fulfillment time per shipping method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify suppliers with discontinued products.",
        "output": "SELECT DISTINCT SupplierID FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average freight cost per order in each country?",
        "output": "SELECT o.ShipCountry, AVG(o.Freight) AS AverageFreight FROM orders o GROUP BY o.ShipCountry",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of products sold by each employee?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].Quantity) AS TotalProductsSold FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales amount generated by each employee?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders have a shipping time longer than 10 days?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) > 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the product with the highest unit price that is not discontinued.",
        "output": "SELECT ProductID, ProductName FROM products WHERE Discontinued = 0 ORDER BY UnitPrice DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the top 5 suppliers by order volume.",
        "output": "SELECT SupplierID, SUM([Order Details].Quantity) AS OrderVolume FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID ORDER BY OrderVolume DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which city has the highest concentration of employee orders?",
        "output": "SELECT e.City, COUNT(*) AS OrderCount FROM orders o JOIN employees e ON o.EmployeeID = e.EmployeeID GROUP BY e.City ORDER BY OrderCount DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order value?",
        "output": "SELECT AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How much freight cost is associated with each employee on average?",
        "output": "SELECT e.EmployeeID, AVG(o.Freight) AS AverageFreightCost FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have the lowest units in stock?",
        "output": "SELECT ProductName, UnitsInStock FROM products ORDER BY UnitsInStock ASC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the product with the most significant number of units on order currently.",
        "output": "SELECT ProductName, UnitsOnOrder FROM products ORDER BY UnitsOnOrder DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the customer with the highest total freight cost.",
        "output": "SELECT c.CustomerID, SUM(o.Freight) AS TotalFreight FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY TotalFreight DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount offered on products?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the inventory turnover ratio for the current month?",
        "output": "SELECT EXTRACT(MONTH FROM CURRENT_DATE) AS Month, (SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock)) AS InventoryTurnoverRatio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE EXTRACT(MONTH FROM CURRENT_DATE) = EXTRACT(MONTH FROM CURRENT_DATE) GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many units of each product are currently on order?",
        "output": "SELECT ProductID, UnitsOnOrder FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the average discount applied to all orders during the holiday season.",
        "output": "SELECT AVG(od.Discount) AS AverageDiscount FROM orders o JOIN \"Order Details\" od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) IN (11, 12);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the top employees contributing to sales in a specific region.",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.ShipRegion = ? GROUP BY e.EmployeeID ORDER BY TotalSales DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the product with the highest inventory turnover ratio.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(NULLIF(p.UnitsInStock, 0)), 0) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY InventoryTurnoverRatio DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which employee handled the most orders?",
        "output": "SELECT o.EmployeeID, COUNT(o.OrderID) AS OrdersHandled FROM orders o GROUP BY o.EmployeeID ORDER BY OrdersHandled DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Determine the top 3 products by sales volume in 2023.",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY [Order Details].ProductID ORDER BY sales_volume DESC LIMIT 3",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has achieved the highest total sales?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method has the highest average freight cost?",
        "output": "SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipVia ORDER BY AvgFreight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the average discount per order for each month.",
        "output": "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS month, AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM')",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 5 best-selling products by total quantity sold in the last month?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) GROUP BY p.ProductID, p.ProductName ORDER BY TotalSold DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers who have not placed any orders.",
        "output": "SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderID IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount applied across all orders?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average number of products per order?",
        "output": "SELECT AVG(ProductsCount) FROM (SELECT OrderID, COUNT(ProductID) AS ProductsCount FROM [Order Details] GROUP BY OrderID) AS OrderProductCounts;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have completed orders with the highest discount rates?",
        "output": "SELECT e.EmployeeID, MAX(od.Discount) AS HighestDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY HighestDiscount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How do employee sales compare on a monthly basis?",
        "output": "SELECT employees.EmployeeID, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID, DATE_FORMAT(orders.OrderDate, '%Y-%m')",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all suppliers that have provided products with zero discount applied in any order.",
        "output": "SELECT DISTINCT suppliers.SupplierID, suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the largest difference between units in stock and units on order?",
        "output": "SELECT ProductName, (UnitsInStock - UnitsOnOrder) AS Difference FROM products ORDER BY Difference DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Who are the top 5 customers by revenue generated in 2023?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.CustomerID ORDER BY revenue DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have been ordered but are currently out of stock?",
        "output": "SELECT p.ProductName FROM products p INNER JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.UnitsInStock = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the seasonal patterns in order quantities for top-performing employees.",
        "output": "SELECT e.EmployeeID, MONTH(o.OrderDate) AS Month, SUM(od.Quantity) AS Quantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, Month ORDER BY Quantity DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What percentage of customers are located in the USA?",
        "output": "SELECT (COUNT(DISTINCT c.CustomerID) * 100.0 / (SELECT COUNT(*) FROM customers)) AS PercentageOfUSCustomers FROM customers c WHERE c.Country = 'USA'",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the shipping cost trend over the past six months?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, AVG(Freight) AS AverageFreight FROM orders WHERE OrderDate >= ADD_MONTHS(CURRENT_DATE, -6) GROUP BY Month ORDER BY Month DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which country has the most expensive average freight cost?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipCountry ORDER BY AvgFreightCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify customers with the highest lifetime value.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY lifetime_value DESC LIMIT 10",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the freight cost percentage of the total order value for each order?",
        "output": "SELECT OrderID, (Freight / (SELECT SUM(Freight) OVER()) * 100.0) AS FreightPercentage FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average unit price of products in each category?",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the monthly increase or decrease in inventory levels for each product.",
        "output": "SELECT ProductID, EXTRACT(MONTH FROM OrderDate) AS Month, SUM(Quantity) AS TotalOrdered FROM [Order Details] GROUP BY ProductID, EXTRACT(MONTH FROM OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Determine the top 5 cities with the most orders last month.",
        "output": "SELECT o.ShipCity, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE) GROUP BY o.ShipCity ORDER BY OrderCount DESC FETCH FIRST 5 ROWS ONLY;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the most popular product category.",
        "output": "SELECT CategoryID, COUNT(ProductID) AS NumberOfProducts FROM products GROUP BY CategoryID ORDER BY NumberOfProducts DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total discount given in each month of 2023?",
        "output": "SELECT MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2023 GROUP BY MONTH(o.OrderDate)",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the average order size for each supplier.",
        "output": "SELECT products.SupplierID, AVG([Order Details].Quantity) AS AverageOrderSize FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the customer retention rate over the last six months?",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN o.OrderDate BETWEEN DATEADD(month, -6, CURRENT_DATE) AND CURRENT_DATE THEN o.CustomerID END) / NULLIF(COUNT(DISTINCT CASE WHEN o.OrderDate < DATEADD(month, -6, CURRENT_DATE) THEN o.CustomerID END), 0)) * 100 AS RetentionRate FROM orders o;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have placed more than five orders?",
        "output": "SELECT c.CustomerID, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID HAVING COUNT(o.OrderID) > 5",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated by each product?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * (od.UnitPrice * (1 - od.Discount))) AS TotalRevenue FROM products p INNER JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify orders that have unusually high discount rates.",
        "output": "SELECT o.OrderID, od.ProductID, od.Discount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0.25;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method was used most frequently each month?",
        "output": "SELECT year, month, ShipVia FROM (SELECT EXTRACT(YEAR FROM OrderDate) AS year, EXTRACT(MONTH FROM OrderDate) AS month, ShipVia, COUNT(OrderID) AS method_count, RANK() OVER (PARTITION BY EXTRACT(YEAR FROM OrderDate), EXTRACT(MONTH FROM OrderDate) ORDER BY COUNT(OrderID) DESC) AS rank FROM orders GROUP BY year, month, ShipVia) WHERE rank = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total value of sales for orders shipped within 3 days?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE DATEDIFF(o.ShippedDate, o.OrderDate) <= 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer is associated with the highest freight cost?",
        "output": "SELECT o.CustomerID, o.Freight AS max_freight FROM orders o WHERE o.Freight = (SELECT MAX(Freight) FROM orders) LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the performance rating of each product based on sales quantity?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalSales FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time for each supplier separating by month?",
        "output": "SELECT suppliers.SupplierID, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID, OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What was the total freight cost incurred for all orders?",
        "output": "SELECT SUM(o.Freight) AS TotalFreight FROM orders o;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer placed the most orders?",
        "output": "SELECT CustomerID, COUNT(*) AS NumberOfOrders FROM orders GROUP BY CustomerID ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many distinct products are ordered each month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, COUNT(DISTINCT [Order Details].ProductID) AS DistinctProducts FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all suppliers that provide products which are never back-ordered (UnitsOnOrder = 0).",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName FROM suppliers WHERE NOT EXISTS (SELECT 1 FROM products WHERE products.SupplierID = suppliers.SupplierID AND products.UnitsOnOrder > 0);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the most common shipping method for orders.",
        "output": "SELECT orders.ShipVia, COUNT(orders.OrderID) AS order_count, shippers.CompanyName FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY orders.ShipVia, shippers.CompanyName ORDER BY order_count DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find suppliers that are located in the same city.",
        "output": "SELECT City, GROUP_CONCAT(DISTINCT CompanyName) AS suppliers FROM suppliers GROUP BY City HAVING COUNT(DISTINCT SupplierID) > 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee(s) with the longest tenure in the company.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, DATEDIFF(CURDATE(), e.HireDate) AS Tenure FROM employees e ORDER BY Tenure DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average number of orders per customer per year?",
        "output": "SELECT c.CustomerID, COUNT(o.OrderID) / COUNT(DISTINCT EXTRACT(YEAR FROM o.OrderDate)) AS AvgOrdersPerYear FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total freight cost associated with each employee's orders.",
        "output": "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreightCost FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average reorder level for each product category?",
        "output": "SELECT CategoryID, AVG(ReorderLevel) AS AverageReorderLevel FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate total sales revenue for products from each category.",
        "output": "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSalesRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the revenue generated by each product in the last quarter?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS Revenue FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN DATEADD(quarter, -1, CURRENT_DATE) AND CURRENT_DATE GROUP BY [Order Details].ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order?",
        "output": "SELECT AVG(Freight) FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest number of orders associated with them?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS NumberOfOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product had the highest sales volume last month?",
        "output": "SELECT ProductName, SUM([Order Details].Quantity) AS total_quantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE DATE_FORMAT(orders.OrderDate, '%Y-%m') = DATE_FORMAT(CURRENT_DATE - INTERVAL 1 MONTH, '%Y-%m') GROUP BY ProductName ORDER BY total_quantity DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the most frequent product category ordered in 2023?",
        "output": "SELECT categories.CategoryName, COUNT([Order Details].ProductID) AS order_count FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY categories.CategoryName ORDER BY order_count DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order value for each customer?",
        "output": "SELECT c.CustomerID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of products ordered that are discontinued?",
        "output": "SELECT COUNT([Order Details].ProductID) AS DiscontinuedOrdered FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employees have the highest sales impact in their respective territories?",
        "output": "SELECT employees.EmployeeID, territories.TerritoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales_impact FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY employees.EmployeeID, territories.TerritoryID",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List all discontinued products and their last order date.",
        "output": "SELECT products.ProductID, products.ProductName, MAX(orders.OrderDate) AS LastOrderDate FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID LEFT JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE products.Discontinued = 1 GROUP BY products.ProductID, products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the number of orders placed in each city.",
        "output": "SELECT o.ShipCity, COUNT(o.OrderID) AS NumberOfOrders FROM orders o GROUP BY o.ShipCity",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the average order value for each month in 2023.",
        "output": "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM')",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which city has the most employees?",
        "output": "SELECT City, COUNT(EmployeeID) AS NumberOfEmployees FROM employees GROUP BY City ORDER BY NumberOfEmployees DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the category with the highest average unit price.",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY CategoryID ORDER BY AvgUnitPrice DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which employee has handled the most orders?",
        "output": "SELECT o.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.EmployeeID ORDER BY OrderCount DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products are frequently ordered with a discount?",
        "output": "SELECT ProductID, COUNT(*) AS DiscountedOrders FROM [Order Details] WHERE Discount > 0 GROUP BY ProductID ORDER BY DiscountedOrders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the least performing products based on sales.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalSales FROM products p INNER JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSales ASC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee generates the most profit after applying discounts?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Profit FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY Profit DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total discount given for each product?",
        "output": "SELECT p.ProductName, SUM(od.Discount * od.Quantity) AS TotalDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the percentage of orders shipped on or before the required date last year?",
        "output": "SELECT COUNT(CASE WHEN o.ShippedDate <= o.RequiredDate THEN 1 ELSE NULL END) * 100.0 / COUNT(o.OrderID) AS OnTimeDeliveryRate FROM orders o WHERE YEAR(o.OrderDate) = YEAR(GETDATE()) - 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many days on average does it take for orders to be required after they are placed?",
        "output": "SELECT AVG(DATEDIFF(RequiredDate, OrderDate)) AS avg_days_to_required FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the fastest average lead time in delivery?",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID ORDER BY AvgLeadTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the average number of units in stock for each product category.",
        "output": "SELECT categories.CategoryID, AVG(products.UnitsInStock) AS AverageUnitsInStock FROM products JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the shortest lead time?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID ORDER BY avg_lead_time ASC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were placed by each employee in the last month?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS NumberOfOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATE_TRUNC('MONTH', CURRENT_DATE) AND o.OrderDate < DATE_TRUNC('MONTH', CURRENT_DATE) + INTERVAL '1 MONTH' GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees are reporting to each manager?",
        "output": "SELECT ReportsTo, COUNT(EmployeeID) AS NumberOfReports FROM employees GROUP BY ReportsTo",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the performance of each product over the last quarter?",
        "output": "SELECT p.ProductID, SUM(od.Quantity) AS Performance FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate >= DATEADD(QUARTER, -1, CURRENT_DATE) AND od.OrderDate < CURRENT_DATE GROUP BY p.ProductID HAVING SUM(od.Quantity) > 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many different products were ordered in each month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, COUNT(DISTINCT [Order Details].ProductID) AS UniqueProducts FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY Month",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the product with the highest total sales revenue for the current quarter.",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE QUARTER(o.OrderDate) = QUARTER(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY od.ProductID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the time duration between order placed and shipped for each order.",
        "output": "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS DaysToShip FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier provides the most diverse range of products?",
        "output": "SELECT SupplierID, COUNT(DISTINCT CategoryID) AS ProductVariety FROM products GROUP BY SupplierID ORDER BY ProductVariety DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the customers with orders exceeding $500 in total value.",
        "output": "SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 500;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many late deliveries occurred last month?",
        "output": "SELECT COUNT(OrderID) AS LateDeliveries FROM orders WHERE ShippedDate > RequiredDate AND EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) AND EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) - 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the on-time delivery rate for each month in 2023?",
        "output": "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS month, COUNT(orders.OrderID) FILTER (WHERE orders.ShippedDate <= orders.RequiredDate) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM')",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average order size for each employee?",
        "output": "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderSize FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier provides the most number of products?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID ORDER BY NumberOfProducts DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees who have achieved more than a specified sales target.",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING TotalSales > 100000;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with inventory levels below the reorder level.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier offers the largest number of distinct products?",
        "output": "SELECT suppliers.CompanyName, COUNT(DISTINCT products.ProductID) AS distinct_product_count FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY distinct_product_count DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Compare the number of orders from returning vs new customers each month.",
        "output": "SELECT DISTINCT MONTH(o.OrderDate) AS OrderMonth, COUNT(DISTINCT ReturningCustomers.CustomerID) AS ReturningCount, COUNT(DISTINCT NewCustomers.CustomerID) AS NewCount FROM orders o LEFT JOIN (SELECT DISTINCT o1.CustomerID FROM orders o1 WHERE EXISTS (SELECT 1 FROM orders o2 WHERE o2.CustomerID = o1.CustomerID AND o2.OrderDate < o1.OrderDate)) AS ReturningCustomers ON o.CustomerID = ReturningCustomers.CustomerID AND MONTH(o.OrderDate) = MONTH(o.OrderDate) LEFT JOIN (SELECT DISTINCT o3.CustomerID FROM orders o3 WHERE NOT EXISTS (SELECT 1 FROM orders o4 WHERE o4.CustomerID = o3.CustomerID AND o4.OrderDate < o3.OrderDate)) AS NewCustomers ON o.CustomerID = NewCustomers.CustomerID AND MONTH(o.OrderDate) = MONTH(o.OrderDate) GROUP BY OrderMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the current stock levels for each supplier's products.",
        "output": "SELECT suppliers.SupplierID, SUM(products.UnitsInStock) AS TotalStock FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many unique customers have placed orders in the last month?",
        "output": "SELECT COUNT(DISTINCT o.CustomerID) FROM orders o WHERE o.OrderDate BETWEEN CURRENT_DATE - INTERVAL '1 month' AND CURRENT_DATE;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products with a high inventory turnover ratio.",
        "output": "SELECT ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnover FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductID HAVING InventoryTurnover > X;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales revenue generated by each employee?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product categories have the highest inventory levels?",
        "output": "SELECT c.CategoryID, SUM(p.UnitsInStock) AS TotalInventory FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID ORDER BY TotalInventory DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order value across all orders?",
        "output": "SELECT AVG(OrderValue) AS AverageOrderValue FROM (SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID) subquery",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped to each country in the last month?",
        "output": "SELECT o.ShipCountry, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE o.OrderDate >= DATEADD(month, -1, CURRENT_DATE) GROUP BY o.ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the total freight costs incurred per supplier.",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, SUM(orders.Freight) AS TotalFreightCost FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID, suppliers.CompanyName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Determine the on-time delivery rate for each month.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID) AS on_time_rate FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What products have the highest inventory turnover ratio?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY InventoryTurnover DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many unique customers are there in the database?",
        "output": "SELECT COUNT(DISTINCT CustomerID) FROM customers;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the total freight cost for each month.",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(Freight) AS TotalFreight FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the distribution of discounts across all products?",
        "output": "SELECT Discount, COUNT(*) AS NumberOfOccurrences FROM [Order Details] GROUP BY Discount ORDER BY NumberOfOccurrences DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped in each quarter of the year?",
        "output": "SELECT QUARTER(ShippedDate) AS Quarter, COUNT(OrderID) AS OrdersInQuarter FROM orders GROUP BY QUARTER(ShippedDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the customer retention rate in the second quarter of 2023?",
        "output": "(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-04-01') AS retention_rate",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the average freight cost for orders shipped to the USA.",
        "output": "SELECT AVG(o.Freight) AS AverageFreight FROM orders o WHERE o.ShipCountry = 'USA';",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employee whose orders generate the most revenue from discounts.",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS DiscountRevenue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY DiscountRevenue DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Get the total number of orders shipped for each shipping method.",
        "output": "SELECT o.ShipVia, COUNT(o.OrderID) AS NumberOfOrders FROM orders o GROUP BY o.ShipVia",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the city with the highest number of suppliers.",
        "output": "SELECT City, COUNT(SupplierID) AS NumSuppliers FROM suppliers GROUP BY City ORDER BY NumSuppliers DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the monthly revenue trend for the current year.",
        "output": "SELECT MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY MONTH(o.OrderDate)",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the average time taken to ship orders from the order date.",
        "output": "SELECT AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingTime FROM orders o",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the trend in monthly sales revenue for the past two years?",
        "output": "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS monthly_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2023-12-31' GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM') ORDER BY month",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue for the last month?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(month, -1, CURRENT_DATE) AND o.OrderDate < CURRENT_DATE;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the largest discrepancy between their ordered and in-stock quantities?",
        "output": "SELECT ProductID, ABS(UnitsOnOrder - UnitsInStock) AS Discrepancy FROM products ORDER BY Discrepancy DESC LIMIT X;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many unique customers placed orders in each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total value of products currently in stock?",
        "output": "SELECT SUM(UnitsInStock * UnitPrice) AS TotalStockValue FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with inventory turnover ratio below average.",
        "output": "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName HAVING SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) < (SELECT AVG(inner_query.InventoryTurnover) FROM (SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID) AS inner_query);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which country has the highest number of orders shipped to?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCountry ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the top 5 products by total sales revenue.",
        "output": "SELECT ProductID, SUM(\"Order Details\".Quantity * \"Order Details\".UnitPrice) AS TotalSales FROM \"Order Details\" GROUP BY ProductID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders were shipped after the required date?",
        "output": "SELECT COUNT(CASE WHEN ShippedDate > RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS LateDeliveryRate FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which supplier provides the most number of unique products?",
        "output": "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the Customer Lifetime Value for each customer.",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS clv FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have been discontinued, and who supplied them?",
        "output": "SELECT ProductName, suppliers.CompanyName FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the most common shipping method used?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS count FROM orders GROUP BY ShipVia ORDER BY count DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount given on each product?",
        "output": "SELECT products.ProductName, AVG([Order Details].Discount) AS AvgDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total freight cost for orders shipped last quarter?",
        "output": "SELECT SUM(Freight) AS total_freight FROM orders WHERE QUARTER(ShippedDate) = QUARTER(CURRENT_DATE) - 1 AND YEAR(ShippedDate) = YEAR(CURRENT_DATE - INTERVAL 1 QUARTER);",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the most common quantity per unit among all products.",
        "output": "SELECT QuantityPerUnit, COUNT(*) AS Frequency FROM products GROUP BY QuantityPerUnit ORDER BY Frequency DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the longest period between order date and shipped date?",
        "output": "SELECT MAX(DATEDIFF(o.ShippedDate, o.OrderDate)) AS LongestPeriod FROM orders o",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have a stock level below 10 units?",
        "output": "SELECT COUNT(*) FROM products WHERE UnitsInStock < 10;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for each customer segment?",
        "output": "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the month with the highest product returns.",
        "output": "SELECT EXTRACT(YEAR FROM orders.OrderDate) AS year, EXTRACT(MONTH FROM orders.OrderDate) AS month, COUNT(orders.OrderID) AS returns FROM orders WHERE orders.ShippedDate > orders.RequiredDate GROUP BY year, month ORDER BY returns DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have been discontinued?",
        "output": "SELECT COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total number of units sold by each product in 2023?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_units_sold FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY products.ProductName",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers have the most products in stock?",
        "output": "SELECT SupplierID, SUM(UnitsInStock) AS TotalUnitsInStock FROM products GROUP BY SupplierID ORDER BY TotalUnitsInStock DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which region has the highest total sales value?",
        "output": "SELECT c.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Region ORDER BY TotalSales DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the total inventory value for each product category.",
        "output": "SELECT CategoryID, SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated each month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time for each supplier on a monthly basis?",
        "output": "SELECT p.SupplierID, DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID, Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total sales revenue generated by each product?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the top 5 employees with the highest salary.",
        "output": "SELECT e.FirstName, e.LastName FROM employees e ORDER BY e.Salary DESC LIMIT 5",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Find the average shipping cost per order for each shipping method.",
        "output": "SELECT orders.ShipVia, AVG(orders.Freight) AS avg_shipping_cost FROM orders GROUP BY orders.ShipVia",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How does the reorder level compare to the average monthly sales for each product?",
        "output": "SELECT products.ProductID, (SUM([Order Details].Quantity) / 12) AS AverageMonthlySales, products.ReorderLevel FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the trend in the average shipping cost over the past six months?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '5 months' GROUP BY Month ORDER BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for this year?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average number of units ordered per product in 2023?",
        "output": "SELECT [Order Details].ProductID, AVG([Order Details].Quantity) AS avg_units_ordered FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY [Order Details].ProductID",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average discount given by each employee?",
        "output": "SELECT e.FirstName, e.LastName, AVG(od.Discount) AS AverageDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount per order across all orders each month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, AVG(order_discount.TotalDiscount / order_count.OrderTotal) AS AvgDiscount FROM (SELECT OrderID, SUM(Discount) AS TotalDiscount FROM [Order Details] GROUP BY OrderID) AS order_discount JOIN (SELECT OrderID, COUNT(*) AS OrderTotal FROM [Order Details] GROUP BY OrderID) AS order_count ON order_discount.OrderID = order_count.OrderID JOIN orders ON order_discount.OrderID = orders.OrderID GROUP BY DATE_TRUNC('month', orders.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the number of orders handled by each employee in each quarter of the year.",
        "output": "SELECT employees.EmployeeID, QUARTER(orders.OrderDate) AS OrderQuarter, COUNT(orders.OrderID) AS NumberOfOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, OrderQuarter",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers are from each country?",
        "output": "SELECT c.Country, COUNT(DISTINCT c.CustomerID) AS CustomerCount FROM customers c GROUP BY c.Country",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of units ordered for each product?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalUnitsOrdered FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product categories have the best sales performance?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity) AS quantity_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY quantity_sold DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Who are the contact persons for suppliers with pending orders?",
        "output": "SELECT DISTINCT s.ContactName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.ShippedDate IS NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method has the highest freight cost on average?",
        "output": "SELECT ShipVia, AVG(Freight) AS AverageFreightCost FROM orders GROUP BY ShipVia ORDER BY AverageFreightCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method had the fastest average delivery time in the last quarter?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgDeliveryTime FROM orders WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '3 months') AND OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY ShipVia ORDER BY AvgDeliveryTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the average discount applied to the orders for each product category.",
        "output": "SELECT categories.CategoryID, AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Categorize products into high, medium, and low performers based on sales volume.",
        "output": "SELECT ProductID, CASE WHEN SUM(Quantity) > 100 THEN 'High' WHEN SUM(Quantity) > 50 THEN 'Medium' ELSE 'Low' END AS PerformanceLevel FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total discount given for each order.",
        "output": "SELECT OrderID, SUM(Quantity * UnitPrice * Discount) AS TotalDiscount FROM [Order Details] GROUP BY OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products that have not been ordered in the last six months.",
        "output": "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details] WHERE OrderDate >= DATEADD(month, -6, CURRENT_DATE));",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders does each employee handle on average per month?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) / NULLIF(COUNT(DISTINCT YEAR(o.OrderDate) * 100 + MONTH(o.OrderDate)), 0) AS AverageOrdersPerMonth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the difference in average order values between two specific cities?",
        "output": "SELECT (SELECT AVG(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE O.ShipCity = 'CityA') - (SELECT AVG(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE O.ShipCity = 'CityB') AS AvgOrderValueDifference;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the trend of product performance over the past three months?",
        "output": "SELECT p.ProductName, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -3, CURRENT_DATE) GROUP BY p.ProductName, EXTRACT(MONTH FROM o.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does the customer retention rate change over the past year?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, (COUNT(DISTINCT CASE WHEN OrderDate BETWEEN DATE_FORMAT(OrderDate, '%Y-%m-01') AND LAST_DAY(OrderDate) THEN CustomerID END) / NULLIF(COUNT(DISTINCT CASE WHEN OrderDate < DATE_FORMAT(OrderDate, '%Y-%m-01') THEN CustomerID END), 0)) AS retention_rate FROM orders WHERE OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE() GROUP BY month",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the sales volume for each category?",
        "output": "SELECT c.CategoryID, SUM(od.Quantity) AS SalesVolume FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products that yield the highest revenue per unit.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / SUM(od.Quantity) AS RevenuePerUnit FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY RevenuePerUnit DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products are supplied by each supplier?",
        "output": "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS product_count FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the on-time delivery rate by country?",
        "output": "SELECT ShipCountry, COUNT(OrderID) * 1.0 / COUNT(*) AS OnTimeDeliveryRate FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city has the highest number of shipped orders?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS ShippedOrders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipCity ORDER BY ShippedOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total quantity sold for each product in the last year.",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalQuantitySold FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY [Order Details].ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time taken to fulfill an order?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue generated from orders involving more than ten units of any product?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od INNER JOIN orders o ON o.OrderID = od.OrderID WHERE od.Quantity > 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue for each month in 2023?",
        "output": "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE EXTRACT(YEAR FROM orders.OrderDate) = 2023 GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM')",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which country has the most suppliers, and what is the count?",
        "output": "SELECT Country, COUNT(*) AS supplier_count FROM suppliers GROUP BY Country ORDER BY supplier_count DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the performance of each product based on total sales?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalSales FROM products p INNER JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Determine the percentage of orders delivered late each month.",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, COUNT(CASE WHEN orders.ShippedDate > orders.RequiredDate THEN 1 END)::FLOAT / COUNT(*) AS LateDeliveryPercentage FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were delivered on time last quarter?",
        "output": "SELECT COUNT(orders.OrderID) AS on_time_deliveries FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND QUARTER(orders.OrderDate) = QUARTER(CURRENT_DATE - INTERVAL 3 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 3 MONTH);",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the highest and lowest order value in each month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, MAX(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MaxOrderValue, MIN(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MinOrderValue FROM [Order Details] od JOIN orders ON od.OrderID = orders.OrderID GROUP BY DATE_TRUNC('month', orders.OrderDate)",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time for orders that were delivered on time?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time FROM orders WHERE ShippedDate <= RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee's customer orders required the highest average freight?",
        "output": "SELECT e.EmployeeID, AVG(o.Freight) AS AvgFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY AvgFreight DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product categories are sourcing products from more than one supplier?",
        "output": "SELECT CategoryID FROM products GROUP BY CategoryID HAVING COUNT(DISTINCT SupplierID) > 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top 3 cities by order volume.",
        "output": "SELECT o.ShipCity, COUNT(o.OrderID) AS OrderVolume FROM orders o GROUP BY o.ShipCity ORDER BY OrderVolume DESC LIMIT 3",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for each shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee has the highest sales performance in January 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine relationships between employee title and average sales performance.",
        "output": "SELECT e.Title, AVG(SaleAmount) AS AverageSales FROM (SELECT e.EmployeeID, e.Title, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS SaleAmount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.Title) AS EmployeeSales GROUP BY e.Title",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which city has the most suppliers?",
        "output": "SELECT City, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY City ORDER BY SupplierCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which city receives the highest number of shipments?",
        "output": "SELECT o.ShipCity, COUNT(*) AS ShipCount FROM orders o GROUP BY o.ShipCity ORDER BY ShipCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Who are the top 10 customers by total sales?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY total_sales DESC LIMIT 10",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which month experienced the highest number of orders placed?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, COUNT(*) AS order_count FROM orders GROUP BY month ORDER BY order_count DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average number of products ordered per order?",
        "output": "SELECT AVG(TotalQuantity) AS AverageProductsOrdered FROM (SELECT OrderID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY OrderID) AS OrderSums;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees were hired in the last five years?",
        "output": "SELECT COUNT(e.EmployeeID) AS NumberOfHires FROM employees e WHERE e.HireDate >= CURRENT_DATE - INTERVAL '5' YEAR",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier provides the highest variety of products?",
        "output": "SELECT s.SupplierID, COUNT(DISTINCT p.ProductID) AS ProductVariety FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY ProductVariety DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer's orders contribute the most to total freight costs?",
        "output": "SELECT c.CustomerID, SUM(o.Freight) AS TotalFreight FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY TotalFreight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "In which region were the most orders shipped last year?",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS orders_count FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY ShipRegion ORDER BY orders_count DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have both low stock and low reorder levels?",
        "output": "SELECT COUNT(*) FROM products WHERE UnitsInStock < Y AND ReorderLevel < Z;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were delivered on time last quarter?",
        "output": "SELECT COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate AND QUARTER(OrderDate) = QUARTER(CURRENT_DATE - INTERVAL 1 QUARTER) AND YEAR(OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 QUARTER);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the inventory turnover ratio for each product category.",
        "output": "SELECT categories.CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the month with the longest average order fulfillment time.",
        "output": "SELECT TO_CHAR(o.OrderDate, 'YYYY-MM') AS Month, AVG(DATE_PART('day', o.ShippedDate - o.OrderDate)) AS AvgFulfillmentTime FROM orders o WHERE o.ShippedDate IS NOT NULL GROUP BY TO_CHAR(o.OrderDate, 'YYYY-MM') ORDER BY AvgFulfillmentTime DESC FETCH FIRST 1 ROW ONLY;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have zero units on order?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsOnOrder = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total sales generated by each employee in the previous month.",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(OrderDate) = YEAR(CURDATE() - INTERVAL 1 MONTH) AND MONTH(OrderDate) = MONTH(CURDATE() - INTERVAL 1 MONTH) GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average fulfillment time for orders shipped via each method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "For orders shipped via method 1, what is the on-time delivery rate?",
        "output": "SELECT COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) AS on_time_delivery_rate FROM orders WHERE ShipVia = 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have a discount greater than 10%?",
        "output": "SELECT COUNT(DISTINCT p.ProductID) FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0.10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have never been ordered?",
        "output": "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue generated by each supplier?",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Revenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID, suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which category of products generated the highest revenue?",
        "output": "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the sum of sales for orders shipped to each country?",
        "output": "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer had the earliest order date?",
        "output": "SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID ORDER BY o.OrderDate LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest unit prices, and how do they perform in sales?",
        "output": "SELECT p.ProductName, p.UnitPrice, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName, p.UnitPrice ORDER BY p.UnitPrice DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders have missing ShippedDate?",
        "output": "SELECT COUNT(OrderID) * 100.0 / (SELECT COUNT(OrderID) FROM orders) AS MissingShippedDatePercentage FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have never been ordered?",
        "output": "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How did the on-time delivery rate change over the previous quarter?",
        "output": "SELECT TO_CHAR(o.OrderDate, 'YYYY-MM') AS Month, COUNT(CASE WHEN o.ShippedDate <= o.RequiredDate THEN 1 END) * 100.0 / COUNT(o.OrderID) AS OnTimeDeliveryRate FROM orders o WHERE o.OrderDate BETWEEN ADD_MONTHS(TRUNC(SYSDATE, 'Q'), -3) AND TRUNC(SYSDATE, 'Q') - 1 GROUP BY TO_CHAR(o.OrderDate, 'YYYY-MM') ORDER BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the most common shipping recipient name?",
        "output": "SELECT ShipName, COUNT(OrderID) AS Frequency FROM orders GROUP BY ShipName ORDER BY Frequency DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the top 5 best-selling products based on total quantity sold.",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantitySold FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantitySold DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of products by each supplier?",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average order size per employee?",
        "output": "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderSize FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest average unit price for their products?",
        "output": "SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS avg_unit_price FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY avg_unit_price DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who are the top 3 employees in terms of sales in the previous quarter?",
        "output": "SELECT e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' AND DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 day' GROUP BY e.FirstName, e.LastName ORDER BY TotalSales DESC LIMIT 3",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the average age of the employees.",
        "output": "SELECT AVG(DATEDIFF(CURDATE(), e.BirthDate) / 365.25) AS AverageAge FROM employees e;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the on-time delivery rate for each quarter?",
        "output": "SELECT DATE_TRUNC('quarter', OrderDate) AS Quarter, SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Quarter;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee has handled the most number of orders?",
        "output": "SELECT orders.EmployeeID, COUNT(orders.OrderID) AS EmployeeOrderCount FROM orders GROUP BY orders.EmployeeID ORDER BY EmployeeOrderCount DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method is used most frequently?",
        "output": "SELECT ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What percentage of all products are currently discontinued?",
        "output": "SELECT (COUNT(*) FILTER (WHERE Discontinued = 1) * 100.0 / COUNT(*)) AS DiscontinuedPercentage FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which region has the highest average order value?",
        "output": "SELECT ShipRegion, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion ORDER BY AvgOrderValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee generated the most sales in the last year?",
        "output": "SELECT e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY e.FirstName, e.LastName ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the monthly trend in average freight cost over the last year?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS year, EXTRACT(MONTH FROM OrderDate) AS month, AVG(Freight) AS avg_freight_cost FROM orders WHERE OrderDate >= DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '1 year' GROUP BY year, month ORDER BY year, month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers have placed orders in both 2022 and 2023?",
        "output": "SELECT COUNT(DISTINCT c.CustomerID) AS CustomerCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE YEAR(o.OrderDate) = 2022 INTERSECT SELECT DISTINCT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE YEAR(o.OrderDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average quantity per unit for all products?",
        "output": "SELECT AVG(CAST(SUBSTRING_INDEX(QuantityPerUnit, ' ', 1) AS DECIMAL)) AS AvgQuantityPerUnit FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the ratio of discontinued products to the total product range?",
        "output": "SELECT COUNT(*) * 1.0 / (SELECT COUNT(*) FROM products) AS DiscontinuedRatio FROM products WHERE Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method is most commonly used?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time taken to fulfill an order each month?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS year, EXTRACT(MONTH FROM OrderDate) AS month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY year, month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city receives the highest number of shipped orders?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total inventory value of all products currently in stock?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the correlation between freight cost and product discount given?",
        "output": "SELECT AVG(orders.Freight) AS avg_freight, AVG([Order Details].Discount) AS avg_discount, COUNT(orders.OrderID) AS order_count FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipVia ORDER BY avg_discount DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue generated last year?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total discount given across all orders in the past month?",
        "output": "SELECT SUM(OD.UnitPrice * OD.Quantity * OD.Discount) AS TotalDiscount FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE O.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products with the most frequent reorder occurrences.",
        "output": "SELECT ProductID, COUNT(*) AS ReorderCount FROM products WHERE UnitsOnOrder > 0 GROUP BY ProductID ORDER BY ReorderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have stock levels below their reorder levels?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total discount given on each product?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer has the highest total sales this month?",
        "output": "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY o.CustomerID ORDER BY TotalSales DESC FETCH FIRST 1 ROW ONLY;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How effective is the reorder level by comparing units on order with units in stock?",
        "output": "SELECT p.ProductName, p.ReorderLevel, p.UnitsInStock, p.UnitsOnOrder FROM products p WHERE p.UnitsOnOrder > 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of units sold per category?",
        "output": "SELECT p.CategoryID, SUM(od.Quantity) AS TotalUnitsSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales contribution of each employee title?",
        "output": "SELECT e.Title, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Title",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the customer satisfaction levels through shipping delays.",
        "output": "SELECT c.CustomerID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingDelay FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.ShippedDate > o.RequiredDate GROUP BY c.CustomerID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "For each product, what is the total quantity ordered in the last year?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)) GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average salary of employees and how does it impact their sales performance?",
        "output": "SELECT AVG(employees.Salary) AS avg_salary, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales, employees.EmployeeID FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the top 5 most expensive products?",
        "output": "SELECT ProductName, UnitPrice FROM products ORDER BY UnitPrice DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the sales performance in different sales territories?",
        "output": "SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employeeTerritories ON orders.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryDescription",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the lowest sales performance?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID HAVING SUM(od.Quantity) = (SELECT MIN(TotalSales) FROM (SELECT ProductID, SUM(Quantity) AS TotalSales FROM [Order Details] GROUP BY ProductID) subquery);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find products with discounts exceeding 20%.",
        "output": "SELECT DISTINCT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0.2;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products have the highest sales performance based on quantity sold in the last month?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY products.ProductName ORDER BY total_quantity DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have the highest number of discontinued products?",
        "output": "SELECT s.SupplierID, s.CompanyName, COUNT(p.ProductID) AS DiscontinuedCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1 GROUP BY s.SupplierID ORDER BY DiscontinuedCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the most common shipping method used by customers?",
        "output": "SELECT orders.ShipVia, COUNT(orders.OrderID) AS usage_count FROM orders GROUP BY orders.ShipVia ORDER BY usage_count DESC LIMIT 1",
        "difficulty": "easy"
    }
]