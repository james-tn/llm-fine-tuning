{
    "Order Analysis": {
        "questions": [
            "What is the total sales revenue for each month?",
            "How many orders were placed each month?",
            "What is the average order value for each month?",
            "Which customer placed the most orders?",
            "What is the average fulfillment time for orders each month?",
            "How many orders were delivered on time each month?",
            "Which shipping method is used most frequently?",
            "What is the total discount given each month?",
            "Which employee processed the most orders?",
            "What is the most frequently ordered product?",
            "Which country receives the most orders?",
            "Calculate the total freight cost for each month.",
            "Find the top 5 cities with the highest total sales.",
            "Determine the percentage of orders delivered late each month.",
            "Identify the month with the highest average order value.",
            "How many distinct products are ordered each month?",
            "What is the average discount applied to orders each month?",
            "Which region has the highest on-time delivery rate?",
            "Find the product with the highest total sales revenue.",
            "Calculate the total number of units sold each month.",
            "What is the total sales revenue generated by each city?",
            "How many orders were placed by each customer last month?",
            "Which employee handled the most orders this year?",
            "What is the average order fulfillment time per shipping method?",
            "How many orders were delivered on time last quarter?",
            "Identify the city with the highest average order value.",
            "What is the total discount given across all orders in the past month?",
            "For each product, what is the total quantity ordered in the last year?",
            "Which month had the highest total sales this year?",
            "What is the on-time delivery rate by country?",
            "How many orders have a discount applied to them?",
            "Determine the average freight cost per order.",
            "List all orders that were fulfilled within 3 days.",
            "What is the total sales generated by each employee?",
            "How many distinct products are ordered by customers in the last month?",
            "Identify the top 3 customers based on total sales in the last quarter.",
            "What percentage of orders were shipped after the required date?",
            "For each employee, what is their average order value?",
            "Calculate the monthly growth rate of total sales.",
            "What is the difference in average order values between two specific cities?",
            "What is the total sales revenue for the last month?",
            "How many orders were placed by each customer in the last quarter?",
            "What is the average order value for this year?",
            "Identify the fastest shipping method by average order fulfillment time.",
            "Which customer has the highest total sales this month?",
            "What is the percentage of orders shipped on or before the required date last year?",
            "Find the product with the highest total sales revenue for the current quarter.",
            "Calculate the average discount applied to all orders during the holiday season.",
            "Determine the top 5 cities with the most orders last month.",
            "What is the monthly trend of total sales over the past year?",
            "How many orders were shipped to each country in the last month?",
            "Which employee processed the highest number of orders this year?",
            "Identify the month with the longest average order fulfillment time.",
            "Calculate the total freight cost for orders shipped via each shipping method this year.",
            "What is the average order value for each customer segment?",
            "Discover the top-selling product in each region.",
            "How did the on-time delivery rate change over the previous quarter?",
            "What is the highest discount given on any order item this year?",
            "Determine the number of orders having more than 10 items.",
            "What is the total sales revenue from repeat customers in the last year?",
            "What is the total sales revenue generated each month?",
            "What is the average order fulfillment time across all orders?",
            "What percentage of orders were delivered on or before the required date each month?",
            "Which customer has placed the most orders and what is their total order value?",
            "Which product has contributed the most to total sales revenue?",
            "What is the total freight cost incurred for each shipping method?",
            "What is the monthly sales trend for each country?",
            "What is the most common shipping city and how many orders were shipped there?",
            "How many orders were shipped after their required dates?",
            "Which employee has handled the most number of orders?",
            "What is the average discount per order across all orders each month?",
            "How many different products were ordered in each month?",
            "What is the total sales by region?",
            "What is the highest and lowest order value in each month?",
            "How many orders have zero discounts applied?",
            "Which month had the highest total sales revenue?",
            "What is the total number of orders with a freight cost greater than the average freight cost?",
            "What is the average order value for the top 10% of orders by sales value each month?"
        ],
        "sql_queries": [
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, COUNT(*) AS NumberOfOrders FROM orders GROUP BY DATE_TRUNC('month', orders.OrderDate);",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
            "SELECT CustomerID, COUNT(*) AS NumberOfOrders FROM orders GROUP BY CustomerID ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, AVG(DATE_PART('day', age(orders.ShippedDate, orders.OrderDate))) AS AverageFulfillmentTime FROM orders GROUP BY Month;",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, COUNT(orders.OrderID) AS OnTimeOrders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY Month;",
            "SELECT ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
            "SELECT EmployeeID, COUNT(*) AS OrdersProcessed FROM orders GROUP BY EmployeeID ORDER BY OrdersProcessed DESC LIMIT 1;",
            "SELECT ProductID, COUNT(*) AS TimesOrdered FROM [Order Details] GROUP BY ProductID ORDER BY TimesOrdered DESC FETCH FIRST 1 ROW ONLY;",
            "SELECT ShipCountry, COUNT(*) AS NumberOfOrders FROM orders GROUP BY ShipCountry ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(Freight) AS TotalFreight FROM orders GROUP BY Month;",
            "SELECT ShipCity, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCity ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, COUNT(CASE WHEN orders.ShippedDate > orders.RequiredDate THEN 1 END)::FLOAT / COUNT(*) AS LateDeliveryPercentage FROM orders GROUP BY Month;",
            "SELECT Month, SUM(MonthTotal) / COUNT(DISTINCT OrderID) AS AverageOrderValue FROM (SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, orders.OrderID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthTotal FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month, orders.OrderID) AS MonthlyTot GROUP BY Month ORDER BY AverageOrderValue DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, COUNT(DISTINCT [Order Details].ProductID) AS DistinctProducts FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, AVG([Order Details].Discount) AS AverageDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
            "SELECT ShipRegion, (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 1.0 / COUNT(*)) AS OnTimeDeliveryRate FROM orders GROUP BY ShipRegion ORDER BY OnTimeDeliveryRate DESC LIMIT 1;",
            "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalRevenue FROM [Order Details] GROUP BY ProductID ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].Quantity) AS TotalUnitsSold FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
            "SELECT ShipCity, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCity;",
            "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND OrderDate < DATE_TRUNC('month', CURRENT_DATE) GROUP BY CustomerID;",
            "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia;",
            "SELECT COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate AND QUARTER(OrderDate) = QUARTER(CURRENT_DATE - INTERVAL 1 QUARTER) AND YEAR(OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 QUARTER);",
            "SELECT ShipCity, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) / COUNT(DISTINCT O.OrderID) AS AvgOrderValue FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY ShipCity ORDER BY AvgOrderValue DESC LIMIT 1;",
            "SELECT SUM(OD.UnitPrice * OD.Quantity * OD.Discount) AS TotalDiscount FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE O.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)) GROUP BY ProductID;",
            "SELECT MONTH(O.OrderDate) AS OrderMonth, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE YEAR(O.OrderDate) = YEAR(CURRENT_DATE) GROUP BY OrderMonth ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT ShipCountry, COUNT(OrderID) * 1.0 / COUNT(*) AS OnTimeDeliveryRate FROM orders GROUP BY ShipCountry;",
            "SELECT COUNT(DISTINCT OrderID) AS DiscountedOrders FROM [Order Details] WHERE Discount > 0;",
            "SELECT AVG(Freight) AS AvgFreightCost FROM orders;",
            "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTime FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) <= 3;",
            "SELECT EmployeeID, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY EmployeeID;",
            "SELECT COUNT(DISTINCT ProductID) AS DistinctProductsOrdered FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE));",
            "SELECT CustomerID, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE QUARTER(OrderDate) = QUARTER(CURRENT_DATE) - 1 AND YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY CustomerID ORDER BY TotalSales DESC LIMIT 3;",
            "SELECT COUNT(CASE WHEN ShippedDate > RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS LateDeliveryRate FROM orders;",
            "SELECT EmployeeID, AVG((OD.UnitPrice * OD.Quantity * (1 - OD.Discount))) AS AvgOrderValue FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY EmployeeID;",
            "SELECT EXTRACT(YEAR FROM O.OrderDate) AS OrderYear, EXTRACT(MONTH FROM O.OrderDate) AS OrderMonth, 100 * (SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) - LAG(SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)), 1) OVER (ORDER BY EXTRACT(YEAR FROM O.OrderDate), EXTRACT(MONTH FROM O.OrderDate))) / LAG(SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)), 1) OVER (ORDER BY EXTRACT(YEAR FROM O.OrderDate), EXTRACT(MONTH FROM O.OrderDate))) AS GrowthRate FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY OrderYear, OrderMonth;",
            "SELECT (SELECT AVG(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE O.ShipCity = 'CityA') - (SELECT AVG(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE O.ShipCity = 'CityB') AS AvgOrderValueDifference;",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(month, -1, CURRENT_DATE) AND o.OrderDate < CURRENT_DATE;",
            "SELECT o.CustomerID, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE o.OrderDate >= DATEADD(quarter, -1, CURRENT_DATE) GROUP BY o.CustomerID;",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE);",
            "SELECT o.ShipVia, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgFulfillmentTime FROM orders o WHERE o.ShippedDate IS NOT NULL GROUP BY o.ShipVia ORDER BY AvgFulfillmentTime ASC;",
            "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY o.CustomerID ORDER BY TotalSales DESC FETCH FIRST 1 ROW ONLY;",
            "SELECT COUNT(CASE WHEN o.ShippedDate <= o.RequiredDate THEN 1 ELSE NULL END) * 100.0 / COUNT(o.OrderID) AS OnTimeDeliveryRate FROM orders o WHERE YEAR(o.OrderDate) = YEAR(GETDATE()) - 1;",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE QUARTER(o.OrderDate) = QUARTER(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY od.ProductID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT AVG(od.Discount) AS AverageDiscount FROM orders o JOIN \"Order Details\" od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) IN (11, 12);",
            "SELECT o.ShipCity, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE) GROUP BY o.ShipCity ORDER BY OrderCount DESC FETCH FIRST 5 ROWS ONLY;",
            "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH) GROUP BY DATE_FORMAT(o.OrderDate, '%Y-%m');",
            "SELECT o.ShipCountry, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE o.OrderDate >= DATEADD(month, -1, CURRENT_DATE) GROUP BY o.ShipCountry;",
            "SELECT o.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY o.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT TO_CHAR(o.OrderDate, 'YYYY-MM') AS Month, AVG(DATE_PART('day', o.ShippedDate - o.OrderDate)) AS AvgFulfillmentTime FROM orders o WHERE o.ShippedDate IS NOT NULL GROUP BY TO_CHAR(o.OrderDate, 'YYYY-MM') ORDER BY AvgFulfillmentTime DESC FETCH FIRST 1 ROW ONLY;",
            "SELECT o.ShipVia, SUM(o.Freight) AS TotalFreight FROM orders o WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY o.ShipVia;",
            "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID;",
            "SELECT o.ShipRegion, od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipRegion, od.ProductID ORDER BY o.ShipRegion, TotalSales DESC;",
            "SELECT TO_CHAR(o.OrderDate, 'YYYY-MM') AS Month, COUNT(CASE WHEN o.ShippedDate <= o.RequiredDate THEN 1 END) * 100.0 / COUNT(o.OrderID) AS OnTimeDeliveryRate FROM orders o WHERE o.OrderDate BETWEEN ADD_MONTHS(TRUNC(SYSDATE, 'Q'), -3) AND TRUNC(SYSDATE, 'Q') - 1 GROUP BY TO_CHAR(o.OrderDate, 'YYYY-MM') ORDER BY Month;",
            "SELECT MAX(od.Discount) AS HighestDiscount FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE);",
            "SELECT COUNT(*) AS LargeOrdersCount FROM (SELECT o.OrderID FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID HAVING SUM(od.Quantity) > 10) AS large_orders;",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.CustomerID IN (SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 1) AND YEAR(o.OrderDate) = YEAR(CURDATE()) - 1;",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month",
            "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgFulfillmentTime FROM orders",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0) / COUNT(orders.OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_TRUNC('month', orders.OrderDate)",
            "SELECT orders.CustomerID, COUNT(orders.OrderID) AS TotalOrders, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.CustomerID ORDER BY TotalOrders DESC, TotalOrderValue DESC LIMIT 1",
            "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS ProductSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY ProductSales DESC LIMIT 1",
            "SELECT orders.ShipVia, SUM(orders.Freight) AS TotalFreight FROM orders GROUP BY orders.ShipVia",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CountrySales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_TRUNC('month', orders.OrderDate), orders.ShipCountry",
            "SELECT ShipCity, COUNT(OrderID) AS CityOrderCount FROM orders GROUP BY ShipCity ORDER BY CityOrderCount DESC LIMIT 1",
            "SELECT COUNT(orders.OrderID) AS LateOrders FROM orders WHERE orders.ShippedDate > orders.RequiredDate;",
            "SELECT orders.EmployeeID, COUNT(orders.OrderID) AS EmployeeOrderCount FROM orders GROUP BY orders.EmployeeID ORDER BY EmployeeOrderCount DESC LIMIT 1",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, AVG(order_discount.TotalDiscount / order_count.OrderTotal) AS AvgDiscount FROM (SELECT OrderID, SUM(Discount) AS TotalDiscount FROM [Order Details] GROUP BY OrderID) AS order_discount JOIN (SELECT OrderID, COUNT(*) AS OrderTotal FROM [Order Details] GROUP BY OrderID) AS order_count ON order_discount.OrderID = order_count.OrderID JOIN orders ON order_discount.OrderID = orders.OrderID GROUP BY DATE_TRUNC('month', orders.OrderDate);",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, COUNT(DISTINCT [Order Details].ProductID) AS UniqueProducts FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY Month",
            "SELECT orders.ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS RegionSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipRegion",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, MAX(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MaxOrderValue, MIN(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MinOrderValue FROM [Order Details] od JOIN orders ON od.OrderID = orders.OrderID GROUP BY DATE_TRUNC('month', orders.OrderDate)",
            "SELECT COUNT(DISTINCT orders.OrderID) AS ZeroDiscountOrders FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE [Order Details].Discount = 0",
            "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month ORDER BY TotalSales DESC LIMIT 1",
            "SELECT COUNT(orders.OrderID) AS OrdersAboveAvgFreight FROM orders WHERE orders.Freight > (SELECT AVG(Freight) FROM orders);",
            "WITH OrderValues AS (SELECT orders.OrderID, DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS OrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID, DATE_TRUNC('month', orders.OrderDate)), RankedOrders AS (SELECT OrderID, Month, OrderValue, ROW_NUMBER() OVER (PARTITION BY Month ORDER BY OrderValue DESC) AS RowNum, COUNT(*) OVER (PARTITION BY Month) AS TotalOrders FROM OrderValues) SELECT AVG(OrderValue) AS AvgTopOrderValue FROM RankedOrders WHERE RowNum <= TotalOrders / 10"
        ],
        "reviews": [
            "The SQL query is correct and follows the metric definition for Total Sales. It correctly calculates total sales revenue for each month by using DATE_TRUNC on OrderDate and aggregating with SUM. The join between 'orders' and '[Order Details]' tables is accurately performed using OrderID as the key, and the grouping by Month ensures monthly granularity.",
            "The original query is almost correct, but to ensure accurate grouping, GROUP BY should explicitly use DATE_TRUNC('month', orders.OrderDate).",
            "The SQL query is correct for calculating the average order value per month, considering the use of DATE_TRUNC to aggregate by month, the join between 'orders' and '[Order Details]' tables, the sum formula calculation, and grouping results by month.",
            "The SQL query is correct. It selects the CustomerID and the count of their orders, groups by CustomerID, orders by the number of orders in descending order, and limits the result to 1 to find the customer who placed the most orders.",
            "The query correctly addresses the business question but needs to use DATE_PART with age to calculate the DATEDIFF for PostgreSQL compatibility.",
            "The query correctly identifies orders delivered on time monthly using DATE_TRUNC for month and a WHERE clause to filter for on-time deliveries. The COUNT function correctly counts the number of orders, but specifying COUNT(orders.OrderID) is slightly more explicit than COUNT(*).",
            "The provided SQL query correctly identifies the most frequently used shipping method by counting the occurrences of each 'ShipVia' value in the 'orders' table, ordering them in descending order by count, and selecting the most used method using the 'LIMIT 1' clause. It is accurate and meets the requirements of the question.",
            "The SQL query is correct for calculating the total discount given each month. It accurately calculates the total discount by multiplying the unit price, quantity, and the discount for each order detail, and then sums it up after grouping by month.",
            "The SQL query correctly finds the employee who processed the most orders by using COUNT on the EmployeeID, grouping by EmployeeID, and ordering by the count in descending order. The use of LIMIT 1 ensures that only the top result is returned. The query is correct according to the business question.",
            "The original query is almost correct. However, the 'LIMIT 1' clause is not standard ANSI SQL. It should be replaced with 'FETCH FIRST 1 ROW ONLY' to comply with ANSI SQL standards.",
            "The SQL query correctly identifies the country that receives the most orders by counting the number of orders per country and ordering in descending order, then limiting the result to one. The query is accurate and requires no changes.",
            "The SQL query is correct. It accurately calculates the total freight cost for each month by truncating the OrderDate to month and grouping by this Month.",
            "The query is correct. It accurately calculates total sales per city by joining the orders and [Order Details] tables, and then groups the results by ShipCity, ordering by TotalSales in descending order and limiting the result to the top 5.",
            "The original query incorrectly calculates the count of late deliveries. The correct approach is to count only the orders where ShippedDate is greater than RequiredDate, which indicates a late delivery.",
            "The original query incorrectly used an aggregate function nested inside another without proper grouping, and the logic for calculating the average order value needed to be based on distinct orders per month. The corrected query fixes these issues.",
            "The original query is mostly correct but lacks table name prefix for 'ProductID'. I've added it to ensure clarity and correctness. The use of DATE_TRUNC and the JOIN are appropriate.",
            "The query is correct. It calculates the average discount applied to orders each month by joining the 'orders' and 'Order Details' tables and using DATE_TRUNC to group the data by month. The AVG function is correctly applied to the 'Discount' column from the '[Order Details]' table, and the result is grouped by Month.",
            "The original SQL query is mostly correct, but the use of '::FLOAT' for type casting is specific to certain SQL dialects like PostgreSQL. Instead, multiplying by 1.0 is a more ANSI-compliant way to ensure floating-point division.",
            "The original SQL query is correct and follows the given schema. It computes total sales revenue for each product, orders them in descending order, and selects the product with the highest revenue.",
            "The SQL query correctly calculates the total number of units sold each month by truncating the order date to months and summing up the quantities of all orders. The JOIN operation between the 'orders' and '[Order Details]' tables is also accurate. No corrections are needed.",
            "The query is correct. It joins the 'orders' and '[Order Details]' tables, calculates the total sales, and groups the results by 'ShipCity'.",
            "The original query uses DATE_SUB with CURRENT_DATE to filter orders from the last month, which may inadvertently include partial months. The corrected query uses DATE_TRUNC to ensure only orders from the full previous month are counted.",
            "The query correctly identifies the employee who handled the most orders in the current year by counting orders per employee and ordering the results descending by order count. It limits the result to the top employee.",
            "The SQL query is correct. It accurately calculates the average order fulfillment time grouped by the shipping method using the DATEDIFF function to find the difference between the ShippedDate and OrderDate, and then taking the average grouped by ShipVia.",
            "The original query failed to account for the year, which could lead to incorrect results if the current date is in January. The query now includes a year check and correctly calculates the last quarter date.",
            "The original query incorrectly uses AVG without considering the proper calculation for average order value. The corrected query uses SUM divided by COUNT(DISTINCT O.OrderID) to calculate the average order value.",
            "The SQL query is mostly correct. The correction is to ensure the table alias 'O' is used in the WHERE clause to refer to 'OrderDate'. The modified query is now correct.",
            "The SQL query is mostly correct. However, we should use CURDATE() instead of CURRENT_DATE for the current date in the DATE_SUB function. Everything else is correctly structured.",
            "The SQL query is mostly correct, but it is best practice to prefix table aliases consistently, such as O.OrderDate.",
            "The initial query did not calculate the on-time delivery rate correctly as it should be a ratio of on-time orders to total orders. This corrected query calculates the percentage of on-time orders by dividing the count of on-time orders by the total count of orders for each country.",
            "The SQL query accurately counts the number of orders with a discount applied. The query correctly uses COUNT(DISTINCT OrderID) to ensure each order is counted only once if it has a discount.",
            "The SQL query is correct. It calculates the average freight cost per order using the AVG function on the Freight column of the orders table.",
            "The SQL query correctly computes the difference between the ShippedDate and OrderDate to find orders fulfilled within 3 days. The use of DATEDIFF and the WHERE clause conditions are appropriate as per the schema provided.",
            "The SQL query correctly calculates the total sales generated by each employee using the provided formula for Total Sales.",
            "The original query uses `DATE_SUB`, which is typically used in MySQL. For ANSI SQL compliance, `DATEADD` function is used instead.",
            "The initial query did not account for the year when filtering by quarters, which could lead to incorrect results if the last quarter is in the previous year. The review adds a condition to ensure the query considers the current year for quarter calculation.",
            "The original query is incorrect because it uses the COUNT function improperly with a WHERE clause inside the function. The correct approach is to use a CASE statement to conditionally count orders where the ShippedDate is greater than the RequiredDate.",
            "The query correctly calculates the average order value by employee using the correct formula. The join and aggregation by EmployeeID are appropriate for the business question.",
            "The original query had an error in handling the LAG function, which should consider both year and month to ensure correct sequential ordering. Additionally, extracting both year and month prevents mixing data across different years. The extraction of the year was added, and calculations were adjusted to prevent division by zero by ensuring there is a valid previous value for sales.",
            "The original query correctly calculates the difference in average order values between 'CityA' and 'CityB'. The query structure and logic are correct, with the use of subqueries calculating the average order value for each city, and then subtracting these values to find the difference. No changes were required.",
            "The original query uses `GETDATE()`, which is SQL Server specific. Replaced it with `CURRENT_DATE` to adhere to ANSI SQL standards.",
            "The SQL query uses GETDATE(), which is not part of the ANSI SQL standard. Replaced with CURRENT_DATE for ANSI compliance.",
            "Corrected the use of the date function from GETDATE() to CURRENT_DATE() for ANSI SQL compliance.",
            "The SQL query is correct except for the use of the `DATEDIFF` function. In ANSI SQL, the `DATEDIFF` function does not require the unit specification like 'day'. Therefore, the correct use should be `DATEDIFF(o.ShippedDate, o.OrderDate)`.",
            "Replaced GETDATE() with CURRENT_DATE for ANSI SQL compliance and used FETCH FIRST 1 ROW ONLY instead of LIMIT 1 for correct syntax.",
            "The SQL query is correct. It calculates the percentage of orders shipped on or before the required date by using conditional counting, and filters orders from the previous year based on the order date.",
            "The original query incorrectly calculates last quarter instead of the current quarter. Adjusted to check the current quarter using the QUARTER and YEAR functions.",
            "The SQL query is mostly correct. It correctly calculates the average discount for orders in November and December. However, ensure that the table name '[Order Details]' is used in double quotes as it includes spaces. Additionally, confirm if your SQL environment supports the MONTH function as specified.",
            "Replaced DATEADD and GETDATE with DATE_TRUNC and CURRENT_DATE to align with ANSI SQL for date handling and corrected date range logic.",
            "The original query used non-standard SQL functions like FORMAT and DATEADD. Updated to use DATE_FORMAT and DATE_SUB which are more standard across databases.",
            "Corrected the function from GETDATE() to CURRENT_DATE for ANSI SQL compliance. Also, the query should check against the shipped date for orders shipped last month, not the order date. Use `WHERE o.ShippedDate >= DATEADD(month, -1, CURRENT_DATE)`.",
            "The original query used GETDATE(), which is not standard ANSI SQL. It should be replaced with CURRENT_DATE for ANSI compliance. Also, using LIMIT 1 is not standard; however, if the SQL dialect of the DBMS used allows it, you can use it; otherwise, consider using FETCH FIRST 1 ROW ONLY.",
            "Corrected the SQL query to use 'TO_CHAR' for formatting dates and 'DATE_PART' for calculating the difference in days. Adjusted 'LIMIT' to 'FETCH FIRST 1 ROW ONLY' to match ANSI SQL standard.",
            "The query is mostly correct, but `GETDATE()` is not part of the ANSI SQL standard. Replacing it with `CURRENT_DATE` which is standard-compliant.",
            "The original SQL query incorrectly divides by COUNT(o.OrderID); it should be COUNT(DISTINCT o.OrderID) to accurately calculate the average order value per unique order.",
            "The query calculates total sales by region and product but doesn't identify the top-selling product in each region. To find the top-selling product, use a subquery or window function to filter or rank the products per region.",
            "The original query has some issues: 1) Use `TO_CHAR` for date formatting in standard SQL. 2) Use `ADD_MONTHS` in combination with `TRUNC` to correctly calculate the previous quarter's date range. 3) Added `ORDER BY` to ensure chronological order in results.",
            "The original query uses GETDATE(), which is SQL Server-specific. The correct function in ANSI SQL is CURRENT_DATE.",
            "The original query was nearly correct but missed the final aggregation needed to count the number of orders fitting the criteria. The corrected query uses a subquery to identify orders with more than 10 items and then counts these orders.",
            "The original query selects all distinct customers rather than repeat customers. The corrected query identifies repeat customers using a subquery that groups by CustomerID and checks if they have more than one order.",
            "The query correctly calculates the total sales revenue by month. It joins the 'orders' and '[Order Details]' tables, uses DATE_TRUNC to aggregate by month, and correctly applies the sales formula. The use of DATE_TRUNC is appropriate for monthly granularity. It also properly groups by the calculated 'Month' column.",
            "The SQL query correctly calculates the average order fulfillment time by computing the difference in days between the order's shipped date and order date for each order, and then averaging these differences. The query aligns with the provided metric definition and is accurate according to the ANSI SQL standard.",
            "The SQL query correctly calculates the percentage of on-time deliveries each month by grouping the data by month and dividing the count of on-time orders by the total orders, then multiplying by 100 for percentage. The key adjustment is ensuring the multiplication by 100 is correctly applied inside the COUNT division.",
            "The original query sorts by TotalOrderValue, but the question asks for the customer with the most orders. The ORDER BY clause should prioritize TotalOrders first.",
            "The SQL query is correct. It calculates the total sales for each product by summing the revenue generated from each order item, then orders by the highest sales and limits the result to one product, which answers the business question of identifying the top contributing product to total sales revenue.",
            "The SQL query correctly calculates the total freight cost for each shipping method by grouping the orders table by ShipVia and summing the Freight column. The query is accurate and aligns with the business question.",
            "The query is mostly correct, but the `GROUP BY` clause needs to explicitly include the expression used in the `SELECT` clause for month aggregation, i.e., `DATE_TRUNC('month', orders.OrderDate)`. The corrected query includes this fix.",
            "The provided SQL query correctly answers the question by selecting the shipping city and counting the number of orders shipped to each city. It groups the data by ShipCity and orders the results in descending order of CityOrderCount, finally limiting the output to the top result.",
            "The SQL query is correct and accurately returns the number of orders shipped after their required dates.",
            "The SQL query is correct. It selects the EmployeeID and counts the number of orders handled by each employee. It then sorts the results in descending order of the count and limits the output to one record, effectively giving the employee who handled the most orders.",
            "The original query was incorrectly calculating the average discount per order without considering the quantity of each item in the order. The correction involves calculating the total discount per order and dividing it by the number of items in the order.",
            "The query is correct. It counts the distinct products ordered each month by joining the 'Order Details' and 'orders' tables and grouping by the month extracted from the order date.",
            "The SQL query is correct. It correctly calculates the total sales by region using the defined formula for Total Sales and groups the results by the 'ShipRegion' field.",
            "The initial query was mostly correct but did not use standard table aliases for clarity. Also, the GROUP BY clause was not matching the column alias in the SELECT clause. Corrected by using 'od' as an alias for '[Order Details]' and ensuring the GROUP BY clause uses the DATE_TRUNC function directly.",
            "The original query may overcount orders if there are multiple order details with zero discounts for the same order. Using COUNT(DISTINCT orders.OrderID) ensures each order is counted only once.",
            "The query correctly calculates the total sales revenue per month using the formula provided for 'Total Sales.' It uses DATE_TRUNC to aggregate the data monthly, joins the 'orders' and '[Order Details]' tables correctly, and sorts the results in descending order to find the month with the highest sales. The LIMIT 1 ensures only the top month is returned. The query seems correct and well-structured.",
            "The query is correct and accurately answers the business question.",
            "The original query did not consider partitioning by month for calculating the top 10% of orders each month. The corrected query uses window functions to partition by month and appropriately calculates the average order value for the top 10% of orders by sales value each month."
        ],
        "difficulty": [
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "easy",
            "easy",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced"
        ]
    },
    "Customer Analysis": {
        "questions": [
            "What is the total Customer Lifetime Value for each customer?",
            "Which customers have placed the most orders?",
            "What is the average freight cost per order in each country?",
            "Identify the top 5 most frequently ordered products.",
            "Which region has the highest total sales value?",
            "How many customers have placed orders in both 2022 and 2023?",
            "Which shipping method is most commonly used?",
            "What is the average order value for each customer?",
            "Identify customers who have not placed an order in the last year.",
            "What is the total discount given in each month of 2023?",
            "Calculate the Customer Retention Rate for 2023 compared to 2022.",
            "What is the average number of orders per customer per year?",
            "Identify the customer with the highest total freight cost.",
            "Which products have never been ordered?",
            "How many orders were shipped before the required date?",
            "What percentage of customers are located in the USA?",
            "Identify the top 3 cities by order volume.",
            "What is the longest period between order date and shipped date?",
            "Which employee handled the most orders?",
            "Calculate the monthly revenue trend for the current year.",
            "How many unique customers are there in the database?",
            "Calculate the total revenue generated by each customer.",
            "Find the top 5 products ordered by quantity.",
            "What is the average order value per customer?",
            "Identify customers who have not placed any orders.",
            "Find the average discount applied to products.",
            "List all orders that have not been shipped yet.",
            "What is the most common shipping method used?",
            "Calculate the Customer Lifetime Value for each customer.",
            "Determine the Customer Retention Rate for the last year.",
            "Which customer is associated with the highest freight cost?",
            "Find the city with the highest number of customers.",
            "What is the average number of orders per customer from the USA?",
            "Identify the customers with orders exceeding $500 in total value.",
            "How many orders were placed in the last month?",
            "What is the average shipping time for orders?",
            "Determine the proportion of orders with discounts applied.",
            "List the countries and the number of customers from each.",
            "Find the month with the highest revenue from orders.",
            "What is the total revenue generated by each customer over their lifetime?",
            "What is the average discount provided to customers?",
            "How many unique customers have placed orders in the last month?",
            "Which product generated the most revenue?",
            "Which country has the highest number of customers?",
            "What is the average order value?",
            "How many orders were not shipped on time?",
            "Which city has the highest number of shipped orders?",
            "What is the customer retention rate over the last six months?",
            "Which customer's orders contribute the most to total freight costs?",
            "What is the average number of products ordered per order?",
            "Which customer had the earliest order date?",
            "What is the total quantity sold for each product?",
            "How many customers have never placed an order?",
            "Which region has the highest total order value?",
            "What is the average order frequency for each customer?",
            "Which orders received the highest discount?",
            "Which customers have placed more than five orders?",
            "What is the average order value across all orders?",
            "How many customers are from each country?",
            "Which product has the highest total sales revenue?",
            "What is the average number of products per order?",
            "Identify the top three regions with the highest number of orders.",
            "Determine the customer satisfaction levels through shipping delays.",
            "How many orders were not shipped on the required date?",
            "What is the total quantity of products sold per month?",
            "Calculate the total discount given to each customer.",
            "Find the average freight cost for orders shipped to the USA.",
            "Which employee has handled the most orders?",
            "Identify orders that have unusually high discount rates.",
            "Determine the average time taken to ship orders from the order date.",
            "List the five customers with the highest lifetime value.",
            "Find customers who haven't placed an order in the last year.",
            "Compare the number of orders from returning vs new customers each month.",
            "Identify products that are often sold together in orders.",
            "Calculate the overall customer retention rate for the past year."
        ],
        "sql_queries": [
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerLifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID",
            "SELECT c.CustomerID, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY OrderCount DESC",
            "SELECT o.ShipCountry, AVG(o.Freight) AS AverageFreight FROM orders o GROUP BY o.ShipCountry",
            "SELECT od.ProductID, COUNT(od.OrderID) AS OrderCount FROM [Order Details] od GROUP BY od.ProductID ORDER BY OrderCount DESC LIMIT 5",
            "SELECT c.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Region ORDER BY TotalSales DESC",
            "SELECT COUNT(DISTINCT c.CustomerID) AS CustomerCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE YEAR(o.OrderDate) = 2022 INTERSECT SELECT DISTINCT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE YEAR(o.OrderDate) = 2023;",
            "SELECT o.ShipVia, COUNT(o.OrderID) AS ShipMethodCount FROM orders o GROUP BY o.ShipVia ORDER BY ShipMethodCount DESC",
            "SELECT c.CustomerID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID",
            "SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate IS NULL OR o.OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
            "SELECT MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2023 GROUP BY MONTH(o.OrderDate)",
            "SELECT (COUNT(DISTINCT CASE WHEN YEAR(orders.OrderDate) = 2023 THEN orders.CustomerID END) / COUNT(DISTINCT CASE WHEN YEAR(orders.OrderDate) = 2022 THEN orders.CustomerID END)) * 100 AS RetentionRate2023 FROM orders WHERE YEAR(orders.OrderDate) IN (2022, 2023)",
            "SELECT c.CustomerID, COUNT(o.OrderID) / COUNT(DISTINCT EXTRACT(YEAR FROM o.OrderDate)) AS AvgOrdersPerYear FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID;",
            "SELECT c.CustomerID, SUM(o.Freight) AS TotalFreight FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY TotalFreight DESC LIMIT 1",
            "SELECT p.ProductID FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL",
            "SELECT COUNT(o.OrderID) AS EarlyShippedOrders FROM orders o WHERE o.ShippedDate < o.RequiredDate;",
            "SELECT (COUNT(DISTINCT c.CustomerID) * 100.0 / (SELECT COUNT(*) FROM customers)) AS PercentageOfUSCustomers FROM customers c WHERE c.Country = 'USA'",
            "SELECT o.ShipCity, COUNT(o.OrderID) AS OrderVolume FROM orders o GROUP BY o.ShipCity ORDER BY OrderVolume DESC LIMIT 3",
            "SELECT MAX(DATEDIFF(o.ShippedDate, o.OrderDate)) AS LongestPeriod FROM orders o",
            "SELECT o.EmployeeID, COUNT(o.OrderID) AS OrdersHandled FROM orders o GROUP BY o.EmployeeID ORDER BY OrdersHandled DESC",
            "SELECT MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY MONTH(o.OrderDate)",
            "SELECT COUNT(DISTINCT CustomerID) FROM customers;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS total_revenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
            "SELECT ProductID, SUM(Quantity) AS total_quantity FROM [Order Details] GROUP BY ProductID ORDER BY total_quantity DESC LIMIT 5;",
            "SELECT c.CustomerID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS avg_order_value FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
            "SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderID IS NULL;",
            "SELECT AVG(Discount) FROM [Order Details];",
            "SELECT OrderID FROM orders WHERE ShippedDate IS NULL;",
            "SELECT ShipVia, COUNT(OrderID) AS count FROM orders GROUP BY ShipVia ORDER BY count DESC LIMIT 1;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS clv FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
            "SELECT COUNT(DISTINCT CASE WHEN o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' THEN o.CustomerID END) / NULLIF(COUNT(DISTINCT CASE WHEN o.OrderDate < '2022-01-01' THEN o.CustomerID END), 0) AS retention_rate FROM orders o;",
            "SELECT o.CustomerID, o.Freight AS max_freight FROM orders o WHERE o.Freight = (SELECT MAX(Freight) FROM orders) LIMIT 1;",
            "SELECT City, COUNT(CustomerID) AS total_customers FROM customers GROUP BY City ORDER BY total_customers DESC LIMIT 1;",
            "SELECT AVG(order_count) FROM (SELECT COUNT(OrderID) AS order_count FROM orders o JOIN customers c ON o.CustomerID = c.CustomerID WHERE c.Country = 'USA' GROUP BY c.CustomerID) AS subquery;",
            "SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 500;",
            "SELECT COUNT(OrderID) FROM orders WHERE OrderDate >= DATEADD(month, -1, GETDATE());",
            "SELECT AVG(DATEDIFF(day, OrderDate, ShippedDate)) AS avg_shipping_time FROM orders WHERE ShippedDate IS NOT NULL;",
            "SELECT COUNT(DISTINCT od.OrderID) * 1.0 / (SELECT COUNT(OrderID) FROM orders) AS discount_rate FROM [Order Details] od WHERE od.Discount > 0;",
            "SELECT Country, COUNT(CustomerID) AS total_customers FROM customers GROUP BY Country;",
            "SELECT EXTRACT(MONTH FROM OrderDate) AS month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS total_revenue FROM orders o JOIN \"Order Details\" od ON o.OrderID = od.OrderID GROUP BY EXTRACT(MONTH FROM OrderDate) ORDER BY total_revenue DESC LIMIT 1;",
            "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
            "SELECT AVG(od.Discount) AS AverageDiscount FROM [Order Details] od;",
            "SELECT COUNT(DISTINCT o.CustomerID) FROM orders o WHERE o.OrderDate BETWEEN CURRENT_DATE - INTERVAL '1 month' AND CURRENT_DATE;",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT c.Country, COUNT(c.CustomerID) AS CustomerCount FROM customers c GROUP BY c.Country ORDER BY CustomerCount DESC LIMIT 1;",
            "SELECT AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID;",
            "SELECT COUNT(o.OrderID) FROM orders o WHERE o.ShippedDate > o.RequiredDate;",
            "SELECT o.ShipCity, COUNT(o.OrderID) AS ShippedOrders FROM orders o WHERE o.ShippedDate IS NOT NULL GROUP BY o.ShipCity ORDER BY ShippedOrders DESC LIMIT 1;",
            "SELECT (COUNT(DISTINCT CASE WHEN o.OrderDate BETWEEN DATEADD(month, -6, CURRENT_DATE) AND CURRENT_DATE THEN o.CustomerID END) / NULLIF(COUNT(DISTINCT CASE WHEN o.OrderDate < DATEADD(month, -6, CURRENT_DATE) THEN o.CustomerID END), 0)) * 100 AS RetentionRate FROM orders o;",
            "SELECT c.CustomerID, SUM(o.Freight) AS TotalFreight FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY TotalFreight DESC LIMIT 1;",
            "SELECT AVG(TotalQuantity) AS AverageProductsOrdered FROM (SELECT OrderID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY OrderID) AS OrderSums;",
            "SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID ORDER BY o.OrderDate LIMIT 1;",
            "SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalQuantity DESC;",
            "SELECT COUNT(c.CustomerID) FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderID IS NULL;",
            "SELECT c.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Region ORDER BY TotalOrderValue DESC LIMIT 1;",
            "SELECT c.CustomerID, (COUNT(o.OrderID) / DATEDIFF(year, MIN(o.OrderDate), MAX(o.OrderDate))) AS OrderFrequency FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID;",
            "SELECT o.OrderID, od.Discount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount = (SELECT MAX(od2.Discount) FROM [Order Details] od2) ORDER BY o.OrderID;",
            "SELECT c.CustomerID, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID HAVING COUNT(o.OrderID) > 5",
            "SELECT AVG(OrderValue) AS AverageOrderValue FROM (SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID) subquery",
            "SELECT c.Country, COUNT(DISTINCT c.CustomerID) AS CustomerCount FROM customers c GROUP BY c.Country",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalSales DESC LIMIT 1",
            "SELECT AVG(ProductCount) FROM (SELECT COUNT(od.ProductID) AS ProductCount FROM [Order Details] od GROUP BY od.OrderID) AS OrderProductCounts",
            "SELECT o.ShipRegion, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipRegion ORDER BY OrderCount DESC LIMIT 3;",
            "SELECT c.CustomerID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingDelay FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.ShippedDate > o.RequiredDate GROUP BY c.CustomerID",
            "SELECT COUNT(o.OrderID) FROM orders o WHERE o.ShippedDate > o.RequiredDate",
            "SELECT EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY OrderMonth",
            "SELECT c.CustomerID, SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID",
            "SELECT AVG(o.Freight) AS AverageFreight FROM orders o WHERE o.ShipCountry = 'USA';",
            "SELECT o.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.EmployeeID ORDER BY OrderCount DESC LIMIT 1",
            "SELECT o.OrderID, od.ProductID, od.Discount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0.25;",
            "SELECT AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingTime FROM orders o",
            "SELECT LifetimeCustomer.CustomerID, LifetimeCustomer.LifetimeValue FROM (SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID) AS LifetimeCustomer ORDER BY LifetimeCustomer.LifetimeValue DESC LIMIT 5",
            "SELECT c.CustomerID FROM customers c WHERE NOT EXISTS (SELECT 1 FROM orders o WHERE c.CustomerID = o.CustomerID AND o.OrderDate > DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR));",
            "SELECT DISTINCT MONTH(o.OrderDate) AS OrderMonth, COUNT(DISTINCT ReturningCustomers.CustomerID) AS ReturningCount, COUNT(DISTINCT NewCustomers.CustomerID) AS NewCount FROM orders o LEFT JOIN (SELECT DISTINCT o1.CustomerID FROM orders o1 WHERE EXISTS (SELECT 1 FROM orders o2 WHERE o2.CustomerID = o1.CustomerID AND o2.OrderDate < o1.OrderDate)) AS ReturningCustomers ON o.CustomerID = ReturningCustomers.CustomerID AND MONTH(o.OrderDate) = MONTH(o.OrderDate) LEFT JOIN (SELECT DISTINCT o3.CustomerID FROM orders o3 WHERE NOT EXISTS (SELECT 1 FROM orders o4 WHERE o4.CustomerID = o3.CustomerID AND o4.OrderDate < o3.OrderDate)) AS NewCustomers ON o.CustomerID = NewCustomers.CustomerID AND MONTH(o.OrderDate) = MONTH(o.OrderDate) GROUP BY OrderMonth;",
            "SELECT od1.ProductID AS ProductID1, od2.ProductID AS ProductID2, COUNT(*) AS CoOccurrence FROM [Order Details] od1 JOIN [Order Details] od2 ON od1.OrderID = od2.OrderID AND od1.ProductID < od2.ProductID GROUP BY od1.ProductID, od2.ProductID ORDER BY CoOccurrence DESC LIMIT 10;",
            "SELECT (COUNT(DISTINCT o2.CustomerID) / COUNT(DISTINCT o1.CustomerID)) * 100 AS RetentionRate FROM orders o1 LEFT JOIN orders o2 ON o1.CustomerID = o2.CustomerID WHERE o1.OrderDate < DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND o2.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND CURRENT_DATE;"
        ],
        "reviews": [
            "The SQL query correctly calculates the total Customer Lifetime Value for each customer by joining the customers, orders, and [Order Details] tables and grouping by CustomerID. The formula aligns with the business metric definition provided.",
            "The provided SQL query correctly answers the business question by joining the 'customers' and 'orders' tables on 'CustomerID', counting the orders for each customer, and ordering the result by the order count in descending order. No corrections are needed.",
            "The SQL query is correct. It selects the ShipCountry and calculates the average freight cost per order, grouping results by ShipCountry.",
            "The SQL query is correct. It accurately retrieves the top 5 most frequently ordered products by counting the occurrences of each ProductID in the [Order Details] table and ordering the results in descending order by the count.",
            "The SQL query correctly calculates the total sales value for each region by joining the customers, orders, and Order Details tables. The calculation of sales as UnitPrice multiplied by Quantity and adjusted for Discount is also accurate. The results are grouped by Region and ordered in descending order by total sales, which answers the question accurately. No corrections are needed.",
            "The original query correctly uses INTERSECT to find customers who placed orders in both years. However, to count the distinct customers, wrap the INTERSECT result in a subquery and apply COUNT.",
            "The SQL query is correct. It correctly groups the orders by the 'ShipVia' column, counts the occurrences of each shipping method, and orders the result in descending order to identify the most commonly used shipping method.",
            "The SQL query correctly calculates the average order value for each customer by joining the customers, orders, and order details tables and computing the average of the order value, considering any discounts applied. The query groups by customer, which aligns with the business question.",
            "The original query has a logical error. It should return customers who have not placed any orders in the last year, meaning 'IS NULL' or no order after one year ago. Therefore, filtering should be at the customer level.",
            "The original query is almost correct, but the GROUP BY clause should use the full expression MONTH(o.OrderDate) to avoid potential alias issues.",
            "The original query uses two versions of the orders table (o2022, o2023) with no correlation, which can produce incorrect results. The corrected query uses a single aggregated view with conditional aggregation to ensure accuracy.",
            "The original query uses COUNT(DISTINCT YEAR(o.OrderDate)), which may not be supported in all SQL dialects. Using EXTRACT(YEAR FROM o.OrderDate) is more standard and should work across different systems.",
            "The SQL query is correct. It joins the 'customers' and 'orders' tables on 'CustomerID', calculates the total freight cost per customer, groups by 'CustomerID', and orders by 'TotalFreight' in descending order. It then limits the result to the top customer.",
            "The SQL query correctly identifies products that have never been ordered by performing a LEFT JOIN between the products table and the [Order Details] table, and then filtering for rows where the OrderID in [Order Details] is NULL. This accurately captures products that don't exist in any order detail, suggesting they haven't been ordered.",
            "The SQL query is correct. It accurately counts the number of orders where the ShippedDate is earlier than the RequiredDate.",
            "The SQL query is correct and accurately calculates the percentage of customers located in the USA by dividing the number of unique customers in the USA by the total number of customers and multiplying by 100.",
            "The SQL query is correctly written and aligns with the business question. It correctly counts the number of orders per shipping city, orders them in descending order by volume, and limits the result to the top 3 cities. No changes are needed.",
            "The SQL query is mostly correct, but DATEDIFF function does not exist in ANSI SQL. Use a subtraction operation between the dates instead. Correct query: SELECT MAX(o.ShippedDate - o.OrderDate) AS LongestPeriod FROM orders o",
            "The provided SQL query is correct. It selects the EmployeeID from the orders table, counts the number of orders handled by each employee, groups the results by EmployeeID, and orders the results in descending order based on the count of orders. No changes are needed.",
            "The query is mostly correct but needs to ensure that 'MONTH(o.OrderDate)' is used in both the SELECT and GROUP BY clauses to maintain consistency.",
            "The SQL query is correct. It accurately counts the number of unique customers by using COUNT with DISTINCT on the CustomerID column from the customers table.",
            "The SQL query is correct. It properly calculates the total revenue by summing the product of UnitPrice, Quantity, and (1 - Discount) for each customer's orders, grouping by CustomerID.",
            "The SQL query is correct and aligns with the business question. It selects the ProductID and the total quantity ordered for each product, groups the results by ProductID, and orders by total quantity in descending order. Finally, it limits the results to the top 5 products.",
            "The SQL query correctly calculates the average order value per customer by joining the customers, orders, and [Order Details] tables and using the AVG function on the calculated order value. The use of GROUP BY on CustomerID ensures that the average is calculated per customer. The query is correct and consistent with the business question.",
            "The SQL query is correct. It uses a LEFT JOIN to find customers who do not have any matching orders in the orders table, filtering those with a NULL OrderID.",
            "The SQL query correctly calculates the average discount applied to products by using the AVG function on the Discount column in the [Order Details] table.",
            "The query is correct. It accurately retrieves all orders where the 'ShippedDate' is NULL, indicating they have not been shipped.",
            "The SQL query correctly identifies the most common shipping method by counting the number of orders for each shipping method, ordering them in descending order, and selecting the top one.",
            "The SQL query correctly calculates the Customer Lifetime Value for each customer by joining the customers, orders, and [Order Details] tables and using the provided formula. No corrections needed.",
            "The original query uses incorrect syntax for conditional aggregation. Updated the query to use CASE expressions within COUNT for proper filtering. Added NULLIF to avoid division by zero.",
            "The original query calculates the highest freight for each customer rather than finding the customer with the single highest freight cost overall. The corrected query finds the order with the maximum freight cost and retrieves the associated customer.",
            "The SQL query correctly finds the city with the highest number of customers by counting CustomerID for each city, grouping by City, and ordering by the count in descending order, then limiting the result to the top one. The query is correct.",
            "The SQL query correctly calculates the average number of orders per customer from the USA. It first calculates the order count for each customer from the USA and then takes the average of these counts. The use of a subquery with GROUP BY and COUNT is appropriate here.",
            "The SQL query is correct. It accurately calculates the total value of orders for each customer and filters those whose order value exceeds $500 using the HAVING clause.",
            "The SQL query uses DATEADD and GETDATE(), which are not part of ANSI SQL. To use ANSI SQL, consider using CURRENT_DATE and INTERVAL instead.",
            "The query is correct; it calculates the average shipping time for orders by using DATEDIFF to find the difference between the OrderDate and the ShippedDate, excluding orders where the ShippedDate is NULL.",
            "The original query correctly calculates the proportion of orders with discounts, but it might be safer to multiply by 1.0 to ensure decimal division.",
            "The SQL query is correct. It selects the Country and counts the number of CustomerID from the customers table, grouping by Country to get the desired number of customers from each country.",
            "The original query is mostly correct, but it lacks syntax for handling table names with spaces. The table '[Order Details]' should be enclosed in double quotes. Also, ensure that all references to this table use the correct name with quotes.",
            "The SQL query is correct and in line with the business question. It selects each customer's ID and calculates the lifetime value by summing the revenue from all orders associated with that customer, accounting for the discount. The JOIN operations and GROUP BY clause are appropriately used to aggregate the data by CustomerID.",
            "The SQL query correctly calculates the average discount provided to customers by averaging the 'Discount' column from the '[Order Details]' table. The query is correct as it matches the business question and uses the appropriate table and column.",
            "The SQL query is almost correct, but the use of 'INTERVAL' should be followed by an appropriate syntax for the specific SQL dialect. In ANSI SQL, the proper way to express the date range for the last month is to use 'CURRENT_DATE - INTERVAL '1' MONTH'. Therefore, the corrected query should be: SELECT COUNT(DISTINCT o.CustomerID) FROM orders o WHERE o.OrderDate BETWEEN CURRENT_DATE - INTERVAL '1' MONTH AND CURRENT_DATE;",
            "The SQL query is almost correct, but it misses the discount factor in calculating the total revenue. It should apply the discount to the calculation: 'SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))'.",
            "The SQL query is correct. It selects countries and counts customers per country, orders them by the highest count, and limits the result to the top 1 country.",
            "The SQL query is correct. It properly calculates the average order value by joining the 'orders' and '[Order Details]' tables and using the correct formula.",
            "The original query checks if the 'RequiredDate' is earlier than 'ShippedDate'. To find orders not shipped on time, we need to reverse the comparison to 'ShippedDate' greater than 'RequiredDate', which captures orders shipped after the required date.",
            "The original query did not account for ensuring the orders were actually shipped. Adding 'WHERE o.ShippedDate IS NOT NULL' fixes this by filtering only orders that have been shipped.",
            "The original SQL query uses incorrect syntax for conditional counting within the SELECT clause. The revised query uses CASE WHEN to apply conditions for counting distinct CustomerIDs. NULLIF is added to prevent division by zero if there are no customers before the specified date.",
            "The query correctly calculates the total freight cost per customer and orders them to find the customer with the highest total freight cost, limited to one result. The SQL query is correct.",
            "The original query calculates the average quantity per line item, not per order. To find the average number of products per order, we need to first summarize the total quantity per order, then calculate the average of these totals.",
            "The original query grouped by CustomerID and sorted the earliest order date for each customer, but we need only the customer with the overall earliest order. The corrected query orders orders by OrderDate and limits the result to the first, achieving this directly.",
            "The SQL query correctly calculates the total quantity sold for each product by grouping the data by ProductID and summing the Quantity. The result is sorted in descending order of TotalQuantity. No corrections are needed.",
            "The original SQL query correctly finds customers who have never placed an order by using a LEFT JOIN and filtering for NULL OrderIDs. However, it doesn't count them. The corrected query now counts these customers using the COUNT function.",
            "The query is correct. It correctly calculates the total order value by summing the adjusted unit prices across regions, groups by region, and orders the results to return the region with the highest total order value. No errors are present.",
            "The query uses DATEDIFF with 'year', which is not valid in ANSI SQL for calculating the difference in years. Instead, we can calculate the difference in days and then divide by 365 to approximate the 'year' difference. Here is the corrected query:\n\nSELECT c.CustomerID, (COUNT(o.OrderID) / (DATEDIFF(DAY, MIN(o.OrderDate), MAX(o.OrderDate)) / 365.0)) AS OrderFrequency FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID;",
            "The original query incorrectly uses MAX() without filtering for the highest discount across all orders. The corrected query identifies the order(s) with the maximum discount by using a subquery to find the highest discount value and filters based on that.",
            "The original query is correct in logic, but the HAVING clause should directly use COUNT(o.OrderID) instead of the alias 'OrderCount'. Both versions work, but the corrected version aligns with best practices.",
            "The original query incorrectly uses AVG with SUM in the same aggregation, which is not valid without a subquery. The corrected query calculates the sum of order details per order and then averages those sums.",
            "The SQL query is correct and accurately retrieves the number of customers from each country by counting distinct CustomerID values in the customers table and grouping the results by country.",
            "The SQL query is correct. It calculates the total sales revenue for each product by multiplying the unit price, quantity, and applying the discount, groups by ProductID, and orders by total sales in descending order, limiting the result to the top product.",
            "The query is correct. It calculates the average number of products per order by first counting the products per order in the subquery and then averaging those counts.",
            "The SQL query is correct. It selects the regions and counts the number of orders per region, groups them, orders by the highest count, and limits the result to the top three regions.",
            "The SQL query correctly calculates the average shipping delay for customers whose orders were shipped after the required date. It joins the 'customers' and 'orders' tables on 'CustomerID', filters for orders that have a shipping delay, and groups the results by customer ID to calculate the average delay.",
            "The SQL query is mostly correct, but it does not account for orders where the ShippedDate is NULL. These orders should also be considered as not shipped on the required date. The query should be modified to include checking for NULL values in the ShippedDate column.",
            "The original query uses the function MONTH() which may not be supported in ANSI SQL. The correction uses the EXTRACT() function to adhere to ANSI SQL standards.",
            "The query is correct as it calculates the total discount given to each customer by summing the discounted amount (UnitPrice * Quantity * Discount) for each order detail associated with that customer, and groups the results by CustomerID.",
            "The SQL query is correct. It correctly calculates the average freight cost for orders where the ShipCountry is 'USA' using the AVG function on the Freight column.",
            "The SQL query is correct. It correctly sums the orders by EmployeeID, orders them by OrderCount in descending order, and limits the output to the top result.",
            "The SQL query correctly identifies orders with a discount greater than 0.25. It joins the 'orders' table with the '[Order Details]' table using the OrderID and filters for discounts greater than 0.25. The query is accurate based on the business question.",
            "The query is incorrect because the DATEDIFF function is not a part of ANSI SQL. Instead, we should use an equivalent expression such as calculating the difference directly by subtracting dates in the database that supports it, like using the DAYS function. However, not all databases support direct date subtraction similar to other programming languages. Adjust according to the SQL dialect being used, such as using functions available for date difference calculations.",
            "The SQL query is correctly structured to calculate the lifetime value for each customer and then select the top five customers with the highest values. The use of JOINs between the 'customers', 'orders', and '[Order Details]' tables is appropriate, and the formula for calculating the lifetime value matches the provided metric definition. No corrections are needed.",
            "The SQL query is mostly correct but needs a slight adjustment to comply with ANSI SQL standard. The DATE_SUB function is not ANSI standard. We can use CURRENT_DATE - INTERVAL '1 year' instead. Also, I've added semicolon at the end for completion.",
            "The original query is incorrect in logic and execution. First, both subqueries are incorrect. The usage of DATE_SUB with incorrect logic for customer distinction creates issues, as it doesn't properly check previous orders. Instead, we need subqueries to distinguish between customers with previous orders (returning) and those without (new) by using EXISTS and NOT EXISTS conditions. Correctly join on the OrderMonth and handle LEFT JOIN properly. Ensure that these conditions align with checking for existence of previous orders within the full orders data, rather than relying on hardcoded intervals or disregarding correct conditions.",
            "The query is mostly correct. It properly joins the [Order Details] table on itself to find pairs of ProductIDs within the same order, ensuring that od1.ProductID is less than od2.ProductID to prevent duplicate pairs. The GROUP BY clause is also correct, using the aliases 'ProductID1' and 'ProductID2' to group the products. The ORDER BY clause correctly sorts by the calculated CoOccurrence in descending order. No changes are necessary.",
            "The original query incorrectly used a LEFT JOIN that counted all customers rather than distinct ones only within the specified date ranges. The condition on dates must be part of the WHERE clause for both tables."
        ],
        "difficulty": [
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "easy",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "advanced",
            "medium",
            "easy",
            "easy",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "easy",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "advanced"
        ]
    },
    "Product Analysis": {
        "questions": [
            "What are the top 5 best-selling products by total quantity sold in the last month?",
            "Which supplier provides the most number of products?",
            "How many discontinued products do we have?",
            "What is the average unit price of products within each category?",
            "Identify products with inventory levels below the reorder level.",
            "Which products have the highest inventory turnover ratio?",
            "How many products have a discount greater than 10%?",
            "What is the total sales revenue generated by each product?",
            "List products that have not been ordered in the last six months.",
            "Determine the most popular product category.",
            "Find the products with the highest number of units on order.",
            "What is the total discount given on each product?",
            "Identify suppliers with discontinued products.",
            "Calculate the total revenue loss due to discounts for each product.",
            "Which products have the largest difference between units in stock and units on order?",
            "What is the average quantity per unit for all products?",
            "Identify products that yield the highest revenue per unit.",
            "How often do products need reordering based on current inventory and sales data?",
            "Find the total inventory value for each product category.",
            "Which products have the lowest sales performance?",
            "What is the total sales quantity for each product?",
            "Which products have stock levels below their reorder levels?",
            "What is the average unit price of products by each supplier?",
            "Identify the top 5 products with the highest sales revenue.",
            "How many units of discontinued products are still in stock?",
            "What is the total discount given for each product?",
            "Calculate the monthly performance of each product.",
            "Find the product with the highest inventory turnover ratio.",
            "Which supplier provides the most diverse range of products?",
            "Determine units on order for each product category.",
            "What is the average discount applied to each category?",
            "Identify products with inventory turnover ratio below average.",
            "Which products have never been ordered?",
            "What is the total revenue generated from each product?",
            "Find the most frequently ordered product.",
            "What is the difference between units on order and units in stock for each product?",
            "Calculate total sales revenue for products from each category.",
            "What is the inventory value of products supplied by each supplier?",
            "Determine the category with the highest average unit price.",
            "Find products with discounts exceeding 20%.",
            "What are the top 5 best-selling products by quantity?",
            "Which products have a stock level below the reorder level?",
            "What is the total revenue generated by each supplier?",
            "What is the average discount applied across all orders?",
            "Which products have been ordered but are currently out of stock?",
            "What is the total value of products currently in stock?",
            "How does the performance of each product vary on a monthly basis?",
            "What products have the highest inventory turnover ratio?",
            "Which products have the highest unit prices, and how do they perform in sales?",
            "What is the total revenue loss due to discounts per product?",
            "Which suppliers provide the most number of different products?",
            "How many units are on order for products by category?",
            "What is the sales volume for each category?",
            "What is the trend of product performance over the past three months?",
            "Which categories have the highest average pricing?",
            "How does the number of units ordered relate to the number of units in stock?",
            "What is the stock status for each product category?",
            "How effective is the reorder level by comparing units on order with units in stock?",
            "What is the distribution of discounts across all products?",
            "What is the total revenue generated by each product?",
            "Which suppliers provide the highest number of products?",
            "What is the average unit price of products supplied by each supplier?",
            "How many units of each product are currently on order?",
            "Identify products that are below their reorder level.",
            "Which product categories have the highest inventory levels?",
            "What is the performance of each product based on total sales?",
            "Calculate the inventory turnover ratio for the entire product catalog.",
            "Which products have the highest discount applied in orders?",
            "What is the monthly trend in product discontinuation rates?",
            "Find the top 5 products by sales quantity.",
            "Determine the least performing products based on sales.",
            "Are there any discontinued products that are still on order?",
            "What is the total discount given for each product category?",
            "Which products have exceeded their reorder levels in past months?",
            "How does the average reorder level compare across suppliers?",
            "Identify products with stock levels less than 10 units.",
            "Which suppliers have the highest average product pricing?",
            "Find products that have more units on order than in stock.",
            "What is the average sales quantity per product, grouped by month?"
        ],
        "sql_queries": [
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) GROUP BY p.ProductID, p.ProductName ORDER BY TotalSold DESC LIMIT 5;",
            "SELECT SupplierID, COUNT(ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID ORDER BY NumberOfProducts DESC LIMIT 1;",
            "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
            "SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY InventoryTurnover DESC;",
            "SELECT COUNT(DISTINCT p.ProductID) FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0.10;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
            "SELECT p.ProductName FROM products p WHERE p.ProductID NOT IN (SELECT DISTINCT od.ProductID FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_ADD(CURDATE(), INTERVAL -6 MONTH));",
            "SELECT CategoryID, COUNT(ProductID) AS NumberOfProducts FROM products GROUP BY CategoryID ORDER BY NumberOfProducts DESC LIMIT 1;",
            "SELECT ProductName FROM products WHERE UnitsOnOrder = (SELECT MAX(UnitsOnOrder) FROM products);",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
            "SELECT DISTINCT SupplierID FROM products WHERE Discontinued = 1;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * od.Discount) AS RevenueLoss FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
            "SELECT ProductName, (UnitsInStock - UnitsOnOrder) AS Difference FROM products ORDER BY Difference DESC;",
            "SELECT AVG(CAST(SUBSTRING_INDEX(QuantityPerUnit, ' ', 1) AS DECIMAL)) AS AvgQuantityPerUnit FROM products;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / SUM(od.Quantity) AS RevenuePerUnit FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY RevenuePerUnit DESC;",
            "SELECT ProductName, (UnitsInStock / SUM(od.Quantity)) AS ReorderFrequency FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY ProductName, UnitsInStock ORDER BY ReorderFrequency;",
            "SELECT CategoryID, SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products GROUP BY CategoryID;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID HAVING SUM(od.Quantity) = (SELECT MIN(TotalSales) FROM (SELECT ProductID, SUM(Quantity) AS TotalSales FROM [Order Details] GROUP BY ProductID) subquery);",
            "SELECT p.ProductID, SUM(od.Quantity) AS TotalSalesQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT SupplierID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY SupplierID;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS SalesRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SalesRevenue DESC LIMIT 5;",
            "SELECT SUM(UnitsInStock) AS TotalUnitsInStock FROM products WHERE Discontinued = 1;",
            "SELECT p.ProductName, SUM(od.Discount * od.Quantity) AS TotalDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
            "SELECT p.ProductID, YEAR(o.OrderDate) AS Year, MONTH(o.OrderDate) AS Month, SUM(od.Quantity) AS MonthlyPerformance FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, YEAR(o.OrderDate), MONTH(o.OrderDate);",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(NULLIF(p.UnitsInStock, 0)), 0) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY InventoryTurnoverRatio DESC LIMIT 1;",
            "SELECT SupplierID, COUNT(DISTINCT CategoryID) AS ProductVariety FROM products GROUP BY SupplierID ORDER BY ProductVariety DESC LIMIT 1;",
            "SELECT p.CategoryID, SUM(p.UnitsOnOrder) AS TotalUnitsOnOrder FROM products p GROUP BY p.CategoryID;",
            "SELECT c.CategoryID, AVG(od.Discount) AS AvgDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
            "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName HAVING SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) < (SELECT AVG(inner_query.InventoryTurnover) FROM (SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID) AS inner_query);",
            "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT p.ProductName, SUM(od.Quantity * (od.UnitPrice - (od.UnitPrice * od.Discount))) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
            "SELECT p.ProductName, COUNT(od.OrderID) AS OrderFrequency FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY OrderFrequency DESC LIMIT 1;",
            "SELECT ProductName, UnitsOnOrder - UnitsInStock AS StockDifference FROM products;",
            "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSalesRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
            "SELECT s.SupplierID, SUM(p.UnitPrice * p.UnitsInStock) AS InventoryValue FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID;",
            "SELECT CategoryID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY CategoryID ORDER BY AvgUnitPrice DESC LIMIT 1;",
            "SELECT DISTINCT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0.2;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 0;",
            "SELECT p.SupplierID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT p.ProductName FROM products p INNER JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.UnitsInStock = 0;",
            "SELECT SUM(UnitsInStock * UnitPrice) AS TotalStockValue FROM products;",
            "SELECT p.ProductName, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, EXTRACT(MONTH FROM o.OrderDate);",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY InventoryTurnover DESC;",
            "SELECT p.ProductName, p.UnitPrice, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName, p.UnitPrice ORDER BY p.UnitPrice DESC;",
            "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * od.Discount) AS RevenueLoss FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
            "SELECT s.SupplierID, COUNT(DISTINCT p.ProductID) AS NumberOfProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY NumberOfProducts DESC;",
            "SELECT p.CategoryID, SUM(p.UnitsOnOrder) AS UnitsOnOrder FROM products p GROUP BY p.CategoryID;",
            "SELECT c.CategoryID, SUM(od.Quantity) AS SalesVolume FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryID;",
            "SELECT p.ProductName, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -3, CURRENT_DATE) GROUP BY p.ProductName, EXTRACT(MONTH FROM o.OrderDate);",
            "SELECT c.CategoryID, AVG(p.UnitPrice) AS AveragePrice FROM categories c JOIN products p ON c.CategoryID = p.CategoryID GROUP BY c.CategoryID ORDER BY AveragePrice DESC;",
            "SELECT p.ProductName, p.UnitsInStock, SUM(od.Quantity) AS TotalUnitsOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
            "SELECT c.CategoryID, SUM(p.UnitsInStock) AS InStock FROM categories c JOIN products p ON c.CategoryID = p.CategoryID GROUP BY c.CategoryID;",
            "SELECT p.ProductName, p.ReorderLevel, p.UnitsInStock, p.UnitsOnOrder FROM products p WHERE p.UnitsOnOrder > 0;",
            "SELECT Discount, COUNT(*) AS NumberOfOccurrences FROM [Order Details] GROUP BY Discount ORDER BY NumberOfOccurrences DESC;",
            "SELECT p.ProductName, SUM(od.Quantity * (od.UnitPrice * (1 - od.Discount))) AS TotalRevenue FROM products p INNER JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
            "SELECT s.SupplierID, COUNT(p.ProductID) AS NumProducts FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID ORDER BY NumProducts DESC;",
            "SELECT p.SupplierID, AVG(p.UnitPrice) AS AvgPrice FROM products p GROUP BY p.SupplierID;",
            "SELECT p.ProductName, p.UnitsOnOrder FROM products p;",
            "SELECT p.ProductName FROM products p WHERE p.UnitsInStock < p.ReorderLevel;",
            "SELECT c.CategoryID, SUM(p.UnitsInStock) AS TotalInventory FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID ORDER BY TotalInventory DESC;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalSales FROM products p INNER JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
            "SELECT SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS InventoryTurnoverRatio FROM products p INNER JOIN [Order Details] od ON p.ProductID = od.ProductID;",
            "SELECT p.ProductName, MAX(od.Discount) AS MaxDiscount FROM products p INNER JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY MaxDiscount DESC;",
            "SELECT MONTH(o.OrderDate) AS Month, COUNT(p.ProductID) AS DiscontinuedProducts FROM orders o INNER JOIN products p ON o.ProductID = p.ProductID WHERE p.Discontinued = 1 GROUP BY MONTH(o.OrderDate);",
            "SELECT p.ProductName, SUM(od.Quantity) AS SalesQuantity FROM products p INNER JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SalesQuantity DESC LIMIT 5;",
            "SELECT p.ProductName, SUM(od.Quantity) AS TotalSales FROM products p INNER JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSales ASC;",
            "SELECT p.ProductName FROM products p WHERE p.Discontinued = 1 AND p.UnitsOnOrder > 0;",
            "SELECT c.CategoryID, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM products p INNER JOIN [Order Details] od ON p.ProductID = od.ProductID INNER JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
            "SELECT p.ProductName FROM products p WHERE p.UnitsInStock < p.ReorderLevel;",
            "SELECT p.SupplierID, AVG(p.ReorderLevel) AS AvgReorderLevel FROM products p GROUP BY p.SupplierID;",
            "SELECT p.ProductName FROM products p WHERE p.UnitsInStock < 10;",
            "SELECT s.SupplierID, AVG(p.UnitPrice) AS AvgPrice FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID ORDER BY AvgPrice DESC;",
            "SELECT p.ProductName FROM products p WHERE p.UnitsOnOrder > p.UnitsInStock;",
            "SELECT MONTH(o.OrderDate) AS Month, p.ProductName, AVG(od.Quantity) AS AvgSalesQuantity FROM orders o INNER JOIN [Order Details] od ON o.OrderID = od.OrderID INNER JOIN products p ON od.ProductID = p.ProductID GROUP BY MONTH(o.OrderDate), p.ProductName;"
        ],
        "reviews": [
            "The original query is incorrect because the 'OrderDate' column does not exist in the '[Order Details]' table as per the provided schema. To correct this, assuming the 'OrderDate' should be from a table not mentioned (like 'orders'), we must join that table if needed, otherwise the query cannot filter on dates correctly. Additionally, 'DATE_SUB' is not ANSI SQL. Changed to 'DATEADD' for correcting to ANSI SQL.",
            "The query is correct. It groups products by SupplierID, counts the products for each supplier, and orders the result in descending order to find the supplier with the most products, limiting the result to one.",
            "The SQL query is correct and accurately counts the number of discontinued products in the 'products' table, where the 'Discontinued' column is set to 1.",
            "The SQL query is correct. It calculates the average unit price for each category by using the AVG function on the UnitPrice column and grouping the results by CategoryID.",
            "The provided SQL query is correct. It selects products where the UnitsInStock are below the ReorderLevel, which answers the business question accurately.",
            "The SQL query correctly calculates the inventory turnover ratio by using the SUM of the cost of goods sold and dividing it by the AVG units in stock. However, the GROUP BY clause was originally using p.ProductID, whereas it should use p.ProductName to match the SELECT statement. Otherwise, the query performs as expected.",
            "The original query selects distinct product names instead of counting them. To answer the question, we need to count the distinct ProductID values where the discount is greater than 10%.",
            "The query correctly calculates the total sales revenue by multiplying quantity and unit price and summing it. However, it groups by ProductID but selects ProductName. To align the SELECT and GROUP BY clauses, the query should group by ProductName instead of ProductID.",
            "The original query assumes there is an OrderDate column in the [Order Details] table, but typically the OrderDate belongs to the orders table. The correction involves joining the [Order Details] table with the orders table on OrderID to access the OrderDate column.",
            "The current query determines the category with the most products. However, the business question requires determining popularity based on sales. The query should join the 'products' and '[Order Details]' tables to sum product sales by category.",
            "The SQL query is correct. It selects product names from the 'products' table where the number of units on order is equal to the maximum number of units on order.",
            "The query is mostly correct but the GROUP BY clause should include p.ProductName to match the SELECT clause. The corrected query is: SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
            "The SQL query correctly identifies suppliers with discontinued products by selecting distinct SupplierID from the products table where the Discontinued flag is set to 1. This query appropriately addresses the business question.",
            "The SQL query correctly calculates the revenue loss due to discounts for each product by multiplying the quantity, unit price, and discount for each product in the 'Order Details' table, grouped by the 'ProductID'. However, the 'GROUP BY' clause should include 'p.ProductName' as it is being selected as well. The correct query should be: SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * od.Discount) AS RevenueLoss FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
            "The SQL query is correct. It selects the products and calculates the difference between units in stock and units on order, ordering them in descending order to identify the largest differences.",
            "The query seems correct assuming QuantityPerUnit always has a number followed by a space and other text. If the format varies, this approach may not work consistently.",
            "The query correctly calculates revenue per unit by dividing the total revenue by the total quantity. It joins the products and [Order Details] tables on ProductID and groups by ProductID. It correctly orders results by RevenuePerUnit descending. Consider calculating revenue per product within product sales context (net of discounts) if business logic requires it; otherwise, this query is accurate.",
            "The original query did not group by UnitsInStock, which is needed because it is used in the SELECT clause. Also, the query should group by ProductName to ensure proper aggregation.",
            "The SQL query is correct. It calculates the total inventory value for each product category by multiplying the unit price by the units in stock and grouping the results by CategoryID.",
            "The original query's HAVING clause was incorrect because it compared a SUM with MIN(SUM()). This review fixes that by using a subquery to determine the correct minimum sales value.",
            "The SQL query correctly calculates the total sales quantity for each product by joining the 'products' table with the '[Order Details]' table on 'ProductID'. It uses the SUM() function to aggregate the 'Quantity' from '[Order Details]' and groups the result by 'ProductID'. The query is accurate as per the business question.",
            "The SQL query is correct. It selects product names where the units in stock are below the reorder level, as required by the business question.",
            "The SQL query is correct. It calculates the average unit price of products by each supplier by grouping the results by SupplierID.",
            "The original query used 'TOP 5', which is not ANSI SQL compliant. Replaced 'TOP 5' with 'LIMIT 5' to conform to ANSI SQL standards.",
            "The original query lists the product names and their units in stock, but it should return the total number of units in stock for discontinued products. The corrected query uses SUM to achieve this.",
            "The SQL query correctly calculates the total discount given for each product by multiplying the discount by the quantity and summing it up, grouped by product name. The query is correct and aligned with the business question.",
            "The provided SQL query is mostly correct. Ensure that the 'orders' table is part of the schema, as it's used in the query. If the table exists and contains the 'OrderDate' column, then the query will correctly calculate the monthly product performance based on sales quantities. No changes needed if these conditions are met.",
            "The original query doesn't handle division by zero when calculating the inventory turnover ratio. The corrected query uses NULLIF to prevent division by zero by treating zero stock as NULL.",
            "The SQL query correctly identifies the supplier with the most diverse range of product categories by counting distinct CategoryIDs per SupplierID and ordering them in descending order to get the top result.",
            "The original query attempts to join a 'categories' table, but it is not included in the schema provided. Assuming 'CategoryID' is a direct column in the 'products' table, the correct query groups by 'CategoryID' without the join.",
            "The SQL query is correct and accurately answers the business question by calculating the average discount for each category.",
            "The original query incorrectly calculates the average inventory turnover ratio. The correct query should first calculate the Inventory Turnover Ratio for each product, and then use it to compare against the overall average turnover ratio.",
            "The SQL query correctly identifies products that have never been ordered by checking for ProductIDs in the 'products' table that do not exist in the 'Order Details' table. The use of DISTINCT is appropriate to ensure unique ProductIDs are considered. The query is correct as written.",
            "The original query correctly calculates the total revenue by multiplying the quantity by the unit price for each product. However, it does not account for the discount that might be applied to each order. The corrected query includes the discount in the total revenue calculation.",
            "The SQL query is mostly correct. It appropriately joins the \"products\" and \"[Order Details]\" tables on ProductID, groups by ProductName, and orders by the count of OrderID to find the most frequently ordered product. LIMIT 1 is used correctly to return only the most frequent product. No corrections needed.",
            "The SQL query correctly calculates the difference between units on order and units in stock for each product using the fields 'UnitsOnOrder' and 'UnitsInStock' from the 'products' table.",
            "The query is mostly correct, however, the 'categories' table is not included in the provided schema definition. If you need to include categories, it must be defined in the schema. Without it, the query cannot be validated further. If 'categories' is intended to be part of another defined table, adjust the query accordingly.",
            "There is no 'suppliers' table in the provided schema. Remove the join with the 'suppliers' table and correct the query by selecting only from the 'products' table. Since the SupplierID is available in the products table, the corrected query should be: SELECT p.SupplierID, SUM(p.UnitPrice * p.UnitsInStock) AS InventoryValue FROM products p GROUP BY p.SupplierID;",
            "The SQL query correctly calculates the average unit price for each category and identifies the category with the highest average unit price using ORDER BY and LIMIT 1. No changes are necessary.",
            "The original SQL query uses GROUP BY without any aggregation, which is unnecessary for this task. Instead, DISTINCT is utilized to obtain unique product names.",
            "The SQL query is correct. It joins the 'products' table with '[Order Details]' on 'ProductID', calculates the total quantity for each product, groups by 'ProductName', and selects the top 5 products by total quantity in descending order.",
            "The query correctly selects products where the stock level is below the reorder level and the product is not discontinued. This query is correct.",
            "The original query mistakenly used 's.SupplierID' instead of 'p.SupplierID' in the SELECT and GROUP BY clauses. The correct alias for the 'SupplierID' should refer to the table 'products' as 'p', since 's' was not defined. The revised query corrects this error.",
            "The SQL query is correct. It calculates the average discount applied across all orders using the AVG function on the Discount column from the [Order Details] table.",
            "The original query used a LEFT JOIN, which would include all products even if they haven't been ordered. An INNER JOIN ensures that only products that have been ordered (appear in [Order Details]) are considered, making the query align with the question requirements.",
            "The SQL query correctly calculates the total value of products currently in stock by multiplying UnitsInStock with UnitPrice and summing the result. There are no errors in the query.",
            "The SQL query is almost correct. However, the use of 'Month' in the GROUP BY clause without repeating the calculation could lead to errors. It's corrected by ensuring that we group using 'EXTRACT(MONTH FROM o.OrderDate)' directly.",
            "The SQL query correctly calculates the inventory turnover ratio by dividing the total sales value of the product by the average units in stock, grouping by the product name, and then ordering by the inventory turnover in descending order. The use of NULLIF avoids division by zero. The query is correct and aligns with the business metrics definition.",
            "The original query was mostly correct but it was missing 'p.UnitPrice' in the GROUP BY clause, which is necessary to avoid errors when selecting columns that are not aggregated. The corrected query adds 'p.UnitPrice' in the GROUP BY clause.",
            "The SQL query correctly calculates the total revenue loss due to discounts per product by multiplying the quantity, unit price, and discount for each product and summing the results. It joins the products and [Order Details] tables on ProductID and groups by ProductName to aggregate the revenue loss per product.",
            "The SQL query is correct and accurately retrieves the supplier IDs along with the count of distinct products they provide, ordered by the number of products in descending order.",
            "The original query attempts to join the 'categories' table, but 'categories' was not defined in the schema provided. Therefore, this correction assumes 'CategoryID' is directly obtainable from the 'products' table, making the JOIN unnecessary.",
            "The query correctly calculates the sales volume for each category by joining the categories, products, and order details tables. The columns used in the joins and the aggregation function SUM(od.Quantity) are appropriate for the question asked. The GROUP BY clause properly groups results by CategoryID, providing the sales volume for each category. No corrections are necessary.",
            "The provided query used a non-standard INTERVAL subtraction which may not be supported by all databases. I corrected it using DATEADD for better compatibility. Additionally, I ensured the grouping is done properly without alias ambiguity.",
            "The provided query is correct based on the given schema. It accurately calculates the average unit price for each category and orders the results in descending order.",
            "The SQL query is mostly correct for the question, but to ensure clarity in relation, it should also consider dividing the total units ordered by units in stock to show the relationship. Additionally, it's good practice to include handling for products with zero units in stock to avoid division by zero errors.",
            "The query is incomplete because the 'categories' table is not defined in the provided schema. Assuming 'CategoryID' is already in 'products', the JOIN is unnecessary. Correct SQL would be removing references to non-existent table 'categories'. If categories require further information, its schema must be provided.",
            "The SQL query fetches products where units are on order, but it doesn't directly compare with units in stock to assess the effectiveness of the reorder level. To evaluate effectiveness, consider including logic to compare UnitsInStock and ReorderLevel against UnitsOnOrder. For example, you might check if 'UnitsOnOrder' exceeds 'UnitsInStock' or 'ReorderLevel'.",
            "The SQL query correctly addresses the business question by selecting the Discount from the [Order Details] table, counting the number of occurrences for each discount value, and ordering the results in descending order by the number of occurrences. No corrections are necessary.",
            "The original query did not account for discounts. The corrected query includes the discount adjustment in the total revenue calculation by multiplying the unit price with (1 - Discount).",
            "The SQL query is correct. It joins the products table with the suppliers table on the SupplierID, counts the number of products for each supplier, and orders the results by the number of products in descending order.",
            "The SQL query correctly calculates the average unit price of products supplied by each supplier by grouping on SupplierID and using the AVG function on UnitPrice. The query is correct and does not require any changes.",
            "The SQL query correctly retrieves the product names and units on order from the products table. It answers the question accurately without needing to join with any other tables.",
            "The SQL query correctly identifies products that are below their reorder level by comparing UnitsInStock with ReorderLevel.",
            "The query references a 'categories' table which is not defined in the schema. To correct this, the query should only involve tables defined in the schema. Since the schema provided does not mention a 'categories' table, revise or add the necessary schema element if applicable. However, based on the current schema, the query cannot be deemed correct as-is.",
            "The SQL query correctly retrieves the total sales per product by summing the quantities from the [Order Details] table and grouping by the product name. The query is accurate and aligns with the business question.",
            "The original query does not handle the division by zero if the average UnitsInStock is zero. A NULLIF function is used to prevent division by zero errors in the corrected query.",
            "The query correctly joins the 'products' and '[Order Details]' tables using ProductID. It groups by ProductName to find the maximum discount for each product and orders the results by MaxDiscount in descending order. The query is correct as per the requirement.",
            "The query is incorrect as it references a non-existent 'orders' table and uses 'o.OrderDate' which is not defined in the schema. The product discontinuation rate does not require joining with orders. Instead, we should focus on the 'products' table. Here is the corrected query: SELECT EXTRACT(MONTH FROM p.DiscontinuedDate) AS Month, COUNT(p.ProductID) AS DiscontinuedProducts FROM products p WHERE p.Discontinued = 1 GROUP BY EXTRACT(MONTH FROM p.DiscontinuedDate); Assuming a 'DiscontinuedDate' column exists to determine the month of discontinuation.",
            "The SQL query is correct. It joins the 'products' and '[Order Details]' tables on 'ProductID', sums the 'Quantity' for each product, groups by 'ProductName', sorts by 'SalesQuantity' in descending order, and limits the result to the top 5 products. The use of 'LIMIT 5' is ANSI SQL standard compliant.",
            "The SQL query correctly calculates the total sales for each product by summing the quantities from the 'Order Details' table and orders them in ascending order to identify least performing products. The query is accurate given the schema and business metrics provided.",
            "The SQL query correctly answers the business question by filtering products that are discontinued and have units on order. No changes are needed.",
            "The original query incorrectly sums the 'Discount' column directly. The discount should be calculated as (od.Discount * od.Quantity * od.UnitPrice) to get the total monetary discount value, as 'Discount' represents a percentage.",
            "The original query used SUM and a conditional case, which is unnecessary for identifying products that have exceeded their reorder levels. The corrected query returns products where UnitsInStock is less than ReorderLevel directly without aggregation.",
            "The original query is mostly correct but assumes the existence of a 'suppliers' table, which isn't defined in the provided schema. The correction removes the join and directly queries the 'products' table since 'SupplierID' is already a column in the 'products' table.",
            "The SQL query is correct. It selects the product names from the products table where the units in stock are less than 10.",
            "The query structure is correct based on the provided schema. It correctly calculates the average UnitPrice of products for each supplier and orders them in descending order to find the highest averages. Ensure that the 'suppliers' table exists in the schema definition, as it's mentioned in the query but not in the provided schema details.",
            "The SQL query accurately answers the business question by selecting the product names from the 'products' table where the 'UnitsOnOrder' are greater than 'UnitsInStock'. There are no errors in the query.",
            "The query is mostly correct, but there's an assumption that the 'orders' table exists. If 'orders' table isn't defined in the given schema, it needs to be added. Also, there should be a check for the existence of OrderDate in orders table schema. Given the provided schema, either correct this or verify the existence of 'orders' and 'OrderDate' columns."
        ],
        "difficulty": [
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced"
        ]
    },
    "Employee Performance": {
        "questions": [
            "What is the total sales revenue generated by each employee?",
            "Which employee was hired most recently?",
            "What is the average salary of employees grouped by their title?",
            "How many orders were placed by each employee in the last year?",
            "Which employee has the highest number of orders associated with them?",
            "What is the total freight cost for all orders handled by each employee?",
            "Find the top five employees who generated the highest sales revenue.",
            "Which employees have a birthday this month?",
            "What is the total number of orders that have not been shipped yet?",
            "Find the average discount given per order by each employee.",
            "How many employees are reporting to each manager?",
            "Which city has the most employees?",
            "How many orders contain products with a discount greater than 15%?",
            "What is the sum of sales for orders shipped to each country?",
            "Calculate the time duration between order placed and shipped for each order.",
            "List the top three employees who have the most sales in the current year.",
            "What is the total number of products sold by each employee?",
            "Calculate the total sales generated by each employee in the previous month.",
            "Find the number of orders handled by each employee in each quarter of the year.",
            "Which employee generates the most profit after applying discounts?",
            "Which employee generated the most sales in the last year?",
            "How many orders were processed by each employee last month?",
            "What is the average discount given by each employee?",
            "Which product had the highest total sales volume?",
            "What was the total freight cost incurred for all orders?",
            "How many employees were hired in the last five years?",
            "What is the average order value processed by each employee?",
            "Identify the employee with the highest average order value.",
            "Get the total number of orders shipped for each shipping method.",
            "Find the total sales generated by employees in each country.",
            "Which employee has the most orders associated with overdue shipment?",
            "What is the total number of unique customers served by each employee?",
            "Determine the top 5 employees with the highest salary.",
            "Find employees who have worked for more than 10 years.",
            "List the number of orders placed in each city.",
            "Calculate the average age of the employees.",
            "Which employee has achieved the highest sales growth rate?",
            "What is the total sales contribution of each employee title?",
            "Who are the top 3 employees in terms of sales in the previous quarter?",
            "How many orders were shipped late in the last month?",
            "What is the total sales amount generated by each employee?",
            "Which employee has achieved the highest total sales?",
            "What is the average order size per employee?",
            "List the top five employees who have secured the highest number of orders.",
            "Calculate the total freight cost associated with each employee's orders.",
            "Find the employee(s) with the longest tenure in the company.",
            "What are the sales figures for each employee, broken down by year?",
            "Identify employees whose orders have never been shipped late.",
            "Determine the average discount given by each employee across all their orders.",
            "Which employees manage other employees and how many do they manage?",
            "Identify the employee whose orders generate the most revenue from discounts.",
            "Analyze the monthly sales trend for a specific employee.",
            "Which city has the highest concentration of employee orders?",
            "Calculate the difference in sales between the highest and lowest performing employees.",
            "Find the percentage contribution of each employee to the total company sales.",
            "How many orders does each employee handle on average per month?",
            "Identify the top employees contributing to sales in a specific region.",
            "Which employees have placed orders with no freight cost?",
            "List all employees who have started within the last year and their total sales.",
            "Determine relationships between employee title and average sales performance.",
            "What is the total sales generated by each employee during the last quarter?",
            "Which employee has the highest total sales this year?",
            "How many orders were placed by each employee in the last month?",
            "What is the average order size for each employee?",
            "Identify the employee with the most number of orders shipped late.",
            "Determine the monthly sales trend for each employee over the last year.",
            "What is the most common shipping region for orders handled by each employee?",
            "What is the distribution of employee titles within the sales team?",
            "How much freight cost is associated with each employee on average?",
            "Which employee handles the highest number of unique products?",
            "List employees who have achieved more than a specified sales target.",
            "Identify correlations between employee\u2019s region and total sales.",
            "Which employees have completed orders with the highest discount rates?",
            "Calculate the average customer order turnaround time per employee.",
            "What's the proportion of total sales attributable to each employee?",
            "Identify trends in hiring dates and order volume among employees.",
            "Which employee's customer orders required the highest average freight?",
            "How does employee tenure relate to average sales performance?",
            "What is the variance in order quantities handled by employees?",
            "Identify the seasonal patterns in order quantities for top-performing employees."
        ],
        "sql_queries": [
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
            "SELECT FirstName, LastName, HireDate FROM employees ORDER BY HireDate DESC LIMIT 1",
            "SELECT Title, AVG(Salary) AS AverageSalary FROM employees GROUP BY Title",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS NumberOfOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY employees.EmployeeID;",
            "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS NumberOfOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1",
            "SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 5",
            "SELECT FirstName, LastName FROM employees WHERE MONTH(BirthDate) = MONTH(CURDATE())",
            "SELECT COUNT(OrderID) AS UnshippedOrders FROM orders WHERE ShippedDate IS NULL",
            "SELECT employees.EmployeeID, AVG([Order Details].Discount) AS AverageDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
            "SELECT ReportsTo, COUNT(EmployeeID) AS NumberOfReports FROM employees GROUP BY ReportsTo",
            "SELECT City, COUNT(EmployeeID) AS NumberOfEmployees FROM employees GROUP BY City ORDER BY NumberOfEmployees DESC LIMIT 1",
            "SELECT COUNT(DISTINCT OrderID) AS LargeDiscountOrders FROM [Order Details] WHERE Discount > 0.15",
            "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry",
            "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS DaysToShip FROM orders;",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 3;",
            "SELECT employees.EmployeeID, SUM([Order Details].Quantity) AS TotalProductsSold FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(OrderDate) = YEAR(CURDATE() - INTERVAL 1 MONTH) AND MONTH(OrderDate) = MONTH(CURDATE() - INTERVAL 1 MONTH) GROUP BY employees.EmployeeID",
            "SELECT employees.EmployeeID, QUARTER(orders.OrderDate) AS OrderQuarter, COUNT(orders.OrderID) AS NumberOfOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, OrderQuarter",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Profit FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY Profit DESC LIMIT 1",
            "SELECT e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY e.FirstName, e.LastName ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT e.FirstName, e.LastName, COUNT(o.OrderID) AS NumberOfOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE EXTRACT(MONTH FROM o.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE - INTERVAL '1' MONTH) AND EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '1' MONTH) GROUP BY e.EmployeeID, e.FirstName, e.LastName",
            "SELECT e.FirstName, e.LastName, AVG(od.Discount) AS AverageDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
            "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalSales DESC LIMIT 1",
            "SELECT SUM(o.Freight) AS TotalFreight FROM orders o;",
            "SELECT COUNT(e.EmployeeID) AS NumberOfHires FROM employees e WHERE e.HireDate >= CURRENT_DATE - INTERVAL '5' YEAR",
            "SELECT e.FirstName, e.LastName, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName",
            "SELECT e.FirstName, e.LastName FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) DESC LIMIT 1;",
            "SELECT o.ShipVia, COUNT(o.OrderID) AS NumberOfOrders FROM orders o GROUP BY o.ShipVia",
            "SELECT e.Country, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Country",
            "SELECT e.FirstName, e.LastName, COUNT(o.OrderID) AS OverdueOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.RequiredDate < o.ShippedDate GROUP BY e.FirstName, e.LastName ORDER BY OverdueOrders DESC LIMIT 1",
            "SELECT e.FirstName, e.LastName, COUNT(DISTINCT o.CustomerID) AS UniqueCustomers FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID",
            "SELECT e.FirstName, e.LastName FROM employees e ORDER BY e.Salary DESC LIMIT 5",
            "SELECT e.FirstName, e.LastName FROM employees e WHERE TIMESTAMPDIFF(YEAR, e.HireDate, CURDATE()) > 10;",
            "SELECT o.ShipCity, COUNT(o.OrderID) AS NumberOfOrders FROM orders o GROUP BY o.ShipCity",
            "SELECT AVG(DATEDIFF(CURDATE(), e.BirthDate) / 365.25) AS AverageAge FROM employees e;",
            "SELECT e.FirstName, e.LastName, (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / SUM(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) OVER()) AS SalesGrowthRate FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN CURRENT_DATE - INTERVAL '1 year' AND CURRENT_DATE GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY SalesGrowthRate DESC LIMIT 1;",
            "SELECT e.Title, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Title",
            "SELECT e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' AND DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 day' GROUP BY e.FirstName, e.LastName ORDER BY TotalSales DESC LIMIT 3",
            "SELECT COUNT(o.OrderID) AS LateOrders FROM orders o WHERE o.RequiredDate < o.ShippedDate AND EXTRACT(MONTH FROM o.ShippedDate) = EXTRACT(MONTH FROM CURRENT_DATE - INTERVAL '1' MONTH) AND EXTRACT(YEAR FROM o.ShippedDate) = EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '1' MONTH)",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1",
            "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderSize FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS NumberOfOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY NumberOfOrders DESC LIMIT 5",
            "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreightCost FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID, e.FirstName, e.LastName, DATEDIFF(CURDATE(), e.HireDate) AS Tenure FROM employees e ORDER BY Tenure DESC LIMIT 1",
            "SELECT e.EmployeeID, YEAR(o.OrderDate) AS Year, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS YearlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, Year",
            "SELECT e.EmployeeID FROM employees e WHERE NOT EXISTS (SELECT 1 FROM orders o WHERE o.EmployeeID = e.EmployeeID AND o.RequiredDate < o.ShippedDate);",
            "SELECT e.EmployeeID, AVG(od.Discount) AS AverageDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID, COUNT(r.EmployeeID) AS Reports FROM employees e LEFT JOIN employees r ON e.EmployeeID = r.ReportsTo GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS DiscountRevenue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY DiscountRevenue DESC LIMIT 1",
            "SELECT e.EmployeeID, YEAR(o.OrderDate) AS Year, MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE e.EmployeeID = ? GROUP BY e.EmployeeID, Year, Month",
            "SELECT e.City, COUNT(*) AS OrderCount FROM orders o JOIN employees e ON o.EmployeeID = e.EmployeeID GROUP BY e.City ORDER BY OrderCount DESC LIMIT 1",
            "SELECT MAX(TotalSales) - MIN(TotalSales) AS SalesDifference FROM (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID) AS SalesData",
            "SELECT e.EmployeeID, (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / (SELECT SUM(od2.UnitPrice * od2.Quantity * (1 - od2.Discount)) FROM [Order Details] od2 JOIN orders o2 ON od2.OrderID = o2.OrderID)) * 100 AS ContributionPercentage FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID, COUNT(o.OrderID) / NULLIF(COUNT(DISTINCT YEAR(o.OrderDate) * 100 + MONTH(o.OrderDate)), 0) AS AverageOrdersPerMonth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.ShipRegion = ? GROUP BY e.EmployeeID ORDER BY TotalSales DESC",
            "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.Freight = 0 GROUP BY e.EmployeeID",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE e.HireDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY e.EmployeeID",
            "SELECT e.Title, AVG(SaleAmount) AS AverageSales FROM (SELECT e.EmployeeID, e.Title, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS SaleAmount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.Title) AS EmployeeSales GROUP BY e.Title",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE() GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS NumberOfOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATE_TRUNC('MONTH', CURRENT_DATE) AND o.OrderDate < DATE_TRUNC('MONTH', CURRENT_DATE) + INTERVAL '1 MONTH' GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderSize FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, COUNT(o.OrderID) AS LateShipments FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.RequiredDate < o.ShippedDate GROUP BY e.EmployeeID ORDER BY LateShipments DESC LIMIT 1;",
            "SELECT YEAR(o.OrderDate) AS Year, MONTH(o.OrderDate) AS Month, e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY Year, Month, e.EmployeeID;",
            "SELECT e.EmployeeID, o.ShipRegion FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, o.ShipRegion HAVING COUNT(o.OrderID) = (SELECT MAX(sub.OrdersCount) FROM (SELECT COUNT(o2.OrderID) AS OrdersCount FROM orders o2 WHERE o2.EmployeeID = e.EmployeeID GROUP BY o2.ShipRegion) sub);",
            "SELECT e.Title, COUNT(e.EmployeeID) AS TitleCount FROM employees e GROUP BY e.Title;",
            "SELECT e.EmployeeID, AVG(o.Freight) AS AverageFreightCost FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, COUNT(DISTINCT od.ProductID) AS UniqueProducts FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY UniqueProducts DESC;",
            "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING TotalSales > 100000;",
            "SELECT e.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Region;",
            "SELECT e.EmployeeID, MAX(od.Discount) AS HighestDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY HighestDiscount DESC;",
            "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgTurnaroundTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NOT NULL GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / (SELECT SUM(UnitPrice * Quantity * (1 - Discount)) FROM [Order Details])) * 100 AS SalesProportion FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.HireDate, COUNT(o.OrderID) AS OrderVolume FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.HireDate;",
            "SELECT e.EmployeeID, AVG(o.Freight) AS AvgFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY AvgFreight DESC;",
            "SELECT e.EmployeeID, TIMESTAMPDIFF(YEAR, e.HireDate, CURDATE()) AS Tenure, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, VARIANCE(od.Quantity) AS OrderQuantityVariance FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
            "SELECT e.EmployeeID, MONTH(o.OrderDate) AS Month, SUM(od.Quantity) AS Quantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, Month ORDER BY Quantity DESC;"
        ],
        "reviews": [
            "The SQL query is correct as it calculates the total sales revenue for each employee by joining the employees, orders, and [Order Details] tables and applying the correct formula for sales. It correctly uses GROUP BY on EmployeeID to aggregate the results by employee.",
            "The SQL query correctly retrieves the most recently hired employee by ordering the employees by HireDate in descending order and selecting the top result. No changes needed.",
            "The SQL query is correct. It selects the title of employees and calculates the average salary for each title by grouping the results accordingly.",
            "The query is mostly correct. However, for better compatibility, use DATE_SUB instead of subtracting directly from CURDATE().",
            "The query is correct. It selects EmployeeID and counts the number of associated orders for each employee. It then orders the results by the count of orders in descending order and limits the results to the top entry, identifying the employee with the highest number of orders.",
            "The SQL query is correct. It joins the 'employees' and 'orders' tables on 'EmployeeID' and calculates the total freight cost for each employee by summing the 'Freight' column, grouped by 'EmployeeID'.",
            "The SQL query is correct. It joins the employees, orders, and [Order Details] tables to calculate the total sales for each employee using the formula provided. It then groups by EmployeeID, orders by TotalSales in descending order, and limits the result to the top five employees.",
            "The query correctly selects the first and last names of employees whose birthday is in the current month. It uses the MONTH function to match the month part of the BirthDate with the current date.",
            "The SQL query is correct. It accurately counts the number of orders where the ShippedDate is NULL, indicating that they have not yet been shipped.",
            "The SQL query correctly calculates the average discount given per order by each employee. The query joins the employees, orders, and [Order Details] tables appropriately and uses AVG to calculate the average discount for each employee. The GROUP BY clause correctly groups the results by employees.EmployeeID. The query is correct as per the business question.",
            "The query correctly calculates the number of employees reporting to each manager by grouping the results based on the 'ReportsTo' column and counting the 'EmployeeID'. No corrections needed.",
            "The SQL query correctly calculates which city has the most employees by counting EmployeeID for each city, grouping by City, ordering by the descending count, and limiting to the top result. The query is correctly formatted and follows the business question requirements.",
            "The original query did not account for counting distinct orders. Using COUNT(DISTINCT OrderID) ensures that each order is only counted once, regardless of how many products in that order have discounts greater than 15%.",
            "The SQL query is correct. It correctly joins the `orders` and `[Order Details]` tables using `OrderID` and calculates the total sales for each `ShipCountry` using the provided formula: SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)). It groups the results by `ShipCountry` to provide the sum of sales for each country.",
            "The SQL query is correct. It calculates the difference in days between the 'ShippedDate' and 'OrderDate' for each order, which answers the business question.",
            "The original query was almost correct. Added table prefix to OrderDate for clarity and ensured consistency in referencing columns.",
            "The SQL query correctly calculates the total number of products sold by each employee by summing the 'Quantity' from the '[Order Details]' table after joining the 'employees', 'orders', and '[Order Details]' tables. The query groups the results by 'EmployeeID', as required by the business question.",
            "The original query does not correctly handle the transition between years when subtracting the month. The corrected query accounts for year changes by adjusting both the year and month conditions.",
            "The SQL query is correct. It selects the EmployeeID and the quarter in which orders were placed, counts the number of orders, and groups by EmployeeID and OrderQuarter.",
            "The original SQL query had an unnecessary subtraction calculation for the Profit. The discount is already accounted for in the expression (UnitPrice * Quantity * (1 - Discount)). The corrected query correctly calculates the profit and orders by it in descending order to find the employee with the highest profit.",
            "The original query correctly calculates the total sales generated by each employee in the last year. However, it should group by both e.FirstName and e.LastName to work properly. The use of EXTRACT(YEAR FROM NOW()) is non-standard; it should be CURRENT_DATE to adhere to the ANSI SQL standard.",
            "The original query incorrectly groups only by e.EmployeeID without including e.FirstName and e.LastName in the GROUP BY clause. Additionally, it doesn't account for orders across different years, which can incorrectly include other months from previous years. The corrected query fixes these issues by adjusting the GROUP BY clause and the conditions for the date check.",
            "The SQL query is correct for calculating the average discount given by each employee.",
            "The SQL query correctly calculates the total sales for each product by summing the adjusted unit price and quantity, and then groups by ProductID. It sorts the results in descending order of total sales and limits the output to the top result, which correctly identifies the product with the highest total sales volume. No corrections are needed.",
            "The SQL query correctly calculates the total freight cost incurred for all orders by using the SUM function on the Freight column of the orders table. The query is correct and follows the ANSI SQL standards.",
            "Corrected the query to use CURRENT_DATE for compatibility and to ensure calculation is from today's date. The original usage of NOW() is not ANSI SQL standard for current date retrieval.",
            "The original query correctly computes the average order value processed by each employee. However, when using GROUP BY, all selected fields that are not part of an aggregate function should be included in the GROUP BY clause. The query needs to include e.FirstName and e.LastName in the GROUP BY clause. The corrected query reflects this addition.",
            "The query accurately computes the average order value per employee by correctly joining the tables and calculating the average based on order details. The ORDER BY clause is used correctly to sort in descending order and LIMIT 1 ensures only the highest is returned. The SQL syntax and logic are correct.",
            "The SQL query is correct and returns the total number of orders shipped for each shipping method. It accurately groups the orders by 'ShipVia' and counts the 'OrderID' for each group.",
            "The SQL query correctly calculates the total sales generated by employees in each country by joining the 'employees', 'orders', and '[Order Details]' tables. It accurately groups the results by the 'Country' column in the 'employees' table and calculates the sum of sales using the provided formula. The query is correct and adheres to the business requirements.",
            "The original query correctly identifies overdue orders and counts them per employee, but there is a potential issue with the grouping. The GROUP BY clause should include all non-aggregated columns from the SELECT clause, which in this case are e.FirstName and e.LastName.",
            "The SQL query correctly answers the business question by joining the 'employees' table with the 'orders' table on 'EmployeeID' and counting distinct 'CustomerID' values for each employee. The query is grouped by 'EmployeeID', which matches the intent of counting unique customers served by each employee. The output includes the first and last names of each employee along with the count of unique customers. The query is correct.",
            "The provided SQL query is correct. It selects the first and last names of employees from the 'employees' table, orders the results by salary in descending order, and limits the output to the top 5 entries.",
            "The original query uses incorrect subtraction and interval syntax for calculating the years worked. `NOW() - e.HireDate > INTERVAL '10 years'` is incorrect. Instead, use the `TIMESTAMPDIFF` function to compute the difference in years directly.",
            "The SQL query correctly lists the number of orders placed in each city by grouping based on the 'ShipCity' field and counting the 'OrderID's. The query is accurate and aligns with the business question.",
            "The original query assumes NOW() returns a date and uses integer division. Using DATEDIFF with CURDATE() ensures proper calculation of the days difference, and dividing by 365.25 accounts for leap years.",
            "The original query incorrectly calculates 'SalesGrowthRate' by dividing total sales by the count of orders, which does not measure growth rate. The corrected query calculates each employee's proportion of total sales over the last year as their 'SalesGrowthRate'.",
            "The SQL query is correct. It selects the Title of each employee and calculates the total sales by summing the product of UnitPrice, Quantity, and the discount factor from the [Order Details] table, grouping by the Title from the employees table.",
            "The original query does not correctly capture the previous quarter's date range. It should use DATE_TRUNC to determine the start of the current quarter and adjust for the previous quarter. The GROUP BY should include e.FirstName and e.LastName to match the SELECT clause.",
            "Corrected the query to account for the year when extracting the month from the date. This ensures accuracy when the query is run in January.",
            "The SQL query is correct. It properly calculates the total sales for each employee using the formula specified in the business metrics definition.",
            "The SQL query correctly calculates the total sales per employee and selects the employee with the highest total sales using ORDER BY and LIMIT 1. The query joins the relevant tables correctly and applies the correct formula as per the business metrics definition. No corrections are needed.",
            "The SQL query is correct. It calculates the average order size for each employee by joining the 'employees', 'orders', and '[Order Details]' tables, and grouping the results by EmployeeID.",
            "The query is correct. It selects EmployeeID and counts the number of orders each employee has, groups by EmployeeID, orders the results in descending order by the count, and limits the result to the top five employees.",
            "The SQL query is correct. It accurately joins the 'employees' table with the 'orders' table on 'EmployeeID' and calculates the total freight cost using SUM on the 'Freight' column, grouping by 'EmployeeID'.",
            "The SQL query is syntactically correct and accurately answers the business question by calculating the tenure of each employee and sorting by the longest tenure. However, if multiple employees have the same tenure, they will not all be returned. Consider removing the LIMIT 1 if you need all employees with the top tenure.",
            "The query is correct. It calculates the total sales per employee per year by joining the relevant tables and grouping by EmployeeID and Year.",
            "The query is correct. It selects employees whose orders have never been shipped later than the required date by using a subquery with NOT EXISTS.",
            "The SQL query correctly determines the average discount given by each employee by joining the employees, orders, and [Order Details] tables on their respective keys and grouping the results by e.EmployeeID.",
            "The original query incorrectly included a WHERE clause filtering for r.ReportsTo IS NOT NULL, which is unnecessary as the LEFT JOIN naturally handles the cases where an employee does not manage anyone. Removing this WHERE clause aligns the query correctly with the business question.",
            "The SQL query correctly calculates the discount revenue for each employee and returns the employee with the highest total discount revenue. The use of JOINs, aggregation, and ordering is appropriate. The query is correct.",
            "The provided SQL query accurately captures the business question. It calculates the monthly sales for a specific employee by aggregating the sales data by year and month. It correctly joins the employees, orders, and order details tables and applies the appropriate grouping and aggregation to obtain the monthly sales for the specified employee.",
            "The original query was not evaluating employee orders by city but rather orders by shipping city. The corrected query joins the orders with employees to ensure counting is based on the city of the employee who placed the order.",
            "The SQL query correctly calculates the difference in total sales between the highest and lowest performing employees by using a subquery to calculate total sales for each employee and then applying MAX and MIN functions to find the sales difference.",
            "The query correctly calculates the percentage contribution of each employee to the total company sales. It uses the appropriate joins and calculates the total sales for the company as a subquery to find the contribution of each employee as a percentage. The use of JOIN operations to connect 'employees', 'orders', and '[Order Details]' tables is correct, and the aggregation function SUM along with GROUP BY ensures that employee sales are correctly summed and grouped by EmployeeID.",
            "The original query correctly counts orders and distinct months, but should handle division by zero with NULLIF to avoid potential errors when there are no orders.",
            "The SQL query is correct. It joins the employees, orders, and [Order Details] tables to calculate the total sales for employees in a specified region and orders the results by TotalSales in descending order.",
            "The provided SQL query is correct. It selects EmployeeID from the employees table and joins it with the orders table on EmployeeID. It filters the results for orders with Freight equal to 0 and groups by EmployeeID to ensure no duplicates.",
            "The SQL query is correct and follows the business question requirements. It accurately filters employees hired within the last year and computes their total sales.",
            "The original query was missing e.Title in the inner SELECT's GROUP BY clause. It has been added to correctly group by both EmployeeID and Title.",
            "The query is mostly correct, but using NOW() can include time, which is not relevant for date comparisons. Replace NOW() with CURDATE() to ensure accuracy when filtering by dates.",
            "The SQL query correctly calculates the total sales for each employee for the current year and returns the employee with the highest total sales. The use of JOINs and the calculation formula match the schema and metrics definitions, and it correctly filters for the current year.",
            "The original query used DATE_SUB with CURDATE() which is not ANSI SQL standard. It also considered the last 30 days instead of the last calendar month. I've corrected it to use DATE_TRUNC and considered the exact last month period.",
            "The query is correct. It calculates the average order size for each employee by joining the necessary tables and computing the average of the order size formula. The grouping by EmployeeID ensures the average is calculated for each employee separately.",
            "The SQL query correctly identifies the employee with the most late shipments by joining 'employees' and 'orders', grouping by EmployeeID, and ordering the count of late shipments in descending order. The use of LIMIT 1 fetches the employee with the highest count. The query is correct.",
            "The original query does not filter for the last year. Adding a WHERE clause to filter orders within the last year solves this issue.",
            "The original query correctly joins employees with orders and counts the number of orders per region for each employee. However, it doesn't select the most common shipping region per employee. The corrected query uses a subquery to find the maximum count for each employee, then filters to regions with that count using HAVING and a correlated subquery.",
            "The query correctly retrieves the distribution of employee titles by counting the number of employees for each title. However, it does not filter specifically for the sales team, as the business question implies. If there is a specific condition that defines the sales team in the 'Title' column, a WHERE clause should be added to filter those titles. For example, if titles like 'Sales Representative' or 'Sales Manager' belong to the sales team, the query should be modified to: SELECT e.Title, COUNT(e.EmployeeID) AS TitleCount FROM employees e WHERE e.Title IN ('Sales Representative', 'Sales Manager') GROUP BY e.Title;",
            "The SQL query is correct. It correctly joins the employees and orders tables on the EmployeeID and calculates the average freight cost per employee with a GROUP BY clause.",
            "The SQL query correctly identifies the employee who handles the highest number of unique products by counting distinct ProductID values for each employee. No corrections are necessary.",
            "The SQL query is correct. It calculates the total sales for each employee and filters the results to only include those with sales greater than 100,000. The joins between employees, orders, and [Order Details] tables are correctly applied, and the calculation aligns with the defined business metric for employee sales.",
            "The SQL query correctly calculates the total sales by summing up the product of `UnitPrice`, `Quantity`, and `(1 - Discount)`. The query joins the `employees`, `orders`, and `[Order Details]` tables appropriately using the `EmployeeID` and `OrderID`. The query also groups the results by `Region`, which aligns with the business question to identify correlations between region and total sales. Therefore, the query is correct.",
            "The SQL query is correct. It joins the 'employees', 'orders', and '[Order Details]' tables to find the highest discount rate for each employee using the MAX() function, groups the results by EmployeeID, and orders them by the highest discount in descending order.",
            "The SQL query correctly calculates the average turnaround time for orders per employee. It joins the employees and orders tables on the EmployeeID, filters out orders without a ShippedDate, and groups by EmployeeID to calculate the average difference between ShippedDate and OrderDate. The query is correct and aligns with the business question.",
            "The original query is generally correct. However, I replaced 'SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) FROM [Order Details] od' with 'SELECT SUM(UnitPrice * Quantity * (1 - Discount)) FROM [Order Details]' to remove the redundant alias 'od' and improve readability.",
            "The original query uses an INNER JOIN, which excludes employees without orders. A LEFT JOIN should be used to include all employees, even those without orders, to properly identify trends in hiring dates.",
            "The original query correctly calculates the average freight for each employee's orders. However, joining with the 'Order Details' table is unnecessary for this calculation as we only need data from 'orders' and 'employees'. Removing the join on '[Order Details]' makes it more efficient.",
            "The SQL query is correct. It calculates the tenure by subtracting the hire date from the current date. It also averages the sales figures correctly for each employee using the formula provided.",
            "The SQL query correctly calculates the variance in order quantities handled by employees by joining the employees, orders, and [Order Details] tables and grouping by EmployeeID. The use of the VARIANCE function is appropriate for the specified business question, and the GROUP BY is correctly applied on EmployeeID.",
            "The current query calculates order quantities by month for each employee and orders the results by Quantity in descending order. However, it doesn't specifically filter for 'top-performing employees'. To address this, you would first need to define a criterion for 'top-performing', for example, by using Employee Sales. As the definition of 'top-performing' isn't specified, the query itself cannot be accurately corrected until such criteria are provided. It may be necessary to calculate total sales or other performance metrics to define 'top-performing'. Once defined, an additional subquery or CTE could be used to filter for these employees."
        ],
        "difficulty": [
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "easy",
            "advanced",
            "advanced",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced"
        ]
    },
    "Supplier Analysis": {
        "questions": [
            "What is the average lead time for each supplier separating by month?",
            "Which supplier has the highest total sales volume?",
            "List the top 5 most expensive products?",
            "Find the total number of orders that included discontinued products.",
            "Which suppliers have shipped at least 100 orders?",
            "What is the most frequently ordered product per supplier?",
            "Determine the monthly total sales?",
            "Which supplier has the fastest average lead time in delivery?",
            "List all suppliers that have provided products with zero discount applied in any order.",
            "How many products are out of stock from each supplier?",
            "Which product has received the highest discount rate?",
            "What percentage of all products are currently discontinued?",
            "List all suppliers that provide products which are never back-ordered (UnitsOnOrder = 0).",
            "Find the total freight costs incurred per supplier.",
            "How many unique products are provided by suppliers located in each country?",
            "Find the city with the highest number of suppliers.",
            "What is the average reorder level per category?",
            "Which supplier's products have contributed the most to total sales revenue?",
            "List products that have never been ordered.",
            "Determine the average unit price of products per supplier.",
            "What is the average lead time for each supplier on a monthly basis?",
            "What are the total sales for each month across all products?",
            "Which suppliers have the highest number of discontinued products?",
            "Which supplier has the shortest average lead time for deliveries?",
            "What is the total revenue generated from orders involving more than ten units of any product?",
            "What is the total number of units on order from each supplier?",
            "What are the top 5 most frequently ordered products?",
            "Which city receives the highest number of shipments?",
            "What is the average discount given on orders by each supplier?",
            "Which products are currently out of stock?",
            "What is the total freight cost incurred for each supplier?",
            "Which suppliers are located in the same city?",
            "How many orders are placed per month?",
            "Who are the contact persons for suppliers with pending orders?",
            "What is the average order value across all orders?",
            "Which supplier provides the highest variety of products?",
            "What percentage of orders are shipped late?",
            "Which products have never been ordered?",
            "What is the total number of units sold per category?",
            "What is the total value of sales for orders shipped within 3 days?",
            "What is the average lead time for suppliers to deliver orders each month?",
            "Which suppliers have delivered the highest total value of products?",
            "How many products are supplied by each supplier?",
            "Which country has the most suppliers, and what is the count?",
            "Identify suppliers whose products are most often on reorder.",
            "What is the total sales revenue generated last year?",
            "Which product had the highest sales volume last month?",
            "What is the average order value for each month this year?",
            "Which supplier has the highest average unit price for their products?",
            "Find the total number of orders placed for each category of products.",
            "Which month experienced the highest number of orders placed?",
            "What is the average discount given across all order details?",
            "Which supplier offers the largest number of distinct products?",
            "Identify the product with the most significant number of units on order currently.",
            "What is the total number of orders that have not been shipped yet?",
            "Which products have been discontinued, and who supplied them?",
            "Find suppliers that are located in the same city.",
            "What is the total freight cost for orders shipped last quarter?",
            "Which products have the lowest units in stock?",
            "How many days on average does it take for orders to be required after they are placed?",
            "What is the average supplier lead time for each supplier?",
            "Which products have the highest total sales?",
            "What is the total sales revenue for each month?",
            "Who are the top 5 suppliers based on total sales of their products?",
            "How many products from each supplier are currently out of stock?",
            "What is the average discount given on each product?",
            "Which city has the most suppliers?",
            "What is the total number of units ordered for each product?",
            "Which orders had the highest discount applied?",
            "What is the total freight cost for orders shipped to a specific country?",
            "Which supplier has the most number of discontinued products?",
            "What is the average unit price per category of products?",
            "How many orders were shipped late?",
            "What is the total revenue generated by each supplier?",
            "What is the average number of products per order?",
            "Which product has the highest reorder level?",
            "What is the ratio of units in stock to units on order for each product?",
            "How many unique customers placed orders in each month?",
            "Which region has the highest average order value?",
            "What is the total number of products ordered that are discontinued?"
        ],
        "sql_queries": [
            "SELECT suppliers.SupplierID, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID, OrderMonth;",
            "SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID, suppliers.CompanyName ORDER BY TotalSales DESC LIMIT 1;",
            "SELECT ProductName, UnitPrice FROM products ORDER BY UnitPrice DESC LIMIT 5;",
            "SELECT COUNT(DISTINCT [Order Details].OrderID) AS NumOrders FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1;",
            "SELECT suppliers.SupplierID, suppliers.CompanyName, COUNT(DISTINCT orders.OrderID) AS NumOrders FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID, suppliers.CompanyName HAVING COUNT(DISTINCT orders.OrderID) >= 100;",
            "SELECT products.SupplierID, suppliers.CompanyName, [Order Details].ProductID, products.ProductName, COUNT([Order Details].ProductID) AS OrderFrequency FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON suppliers.SupplierID = products.SupplierID GROUP BY products.SupplierID, [Order Details].ProductID, products.ProductName, suppliers.CompanyName ORDER BY products.SupplierID, OrderFrequency DESC;",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY OrderMonth;",
            "SELECT suppliers.SupplierID, suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID ORDER BY AvgLeadTime ASC LIMIT 1;",
            "SELECT DISTINCT suppliers.SupplierID, suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount = 0;",
            "SELECT suppliers.SupplierID, suppliers.CompanyName, COUNT(products.ProductID) AS OutOfStockProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsInStock = 0 GROUP BY suppliers.SupplierID, suppliers.CompanyName;",
            "SELECT products.ProductID, products.ProductName FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID ORDER BY [Order Details].Discount DESC LIMIT 1;",
            "SELECT (COUNT(*) FILTER (WHERE Discontinued = 1) * 100.0 / COUNT(*)) AS DiscontinuedPercentage FROM products;",
            "SELECT suppliers.SupplierID, suppliers.CompanyName FROM suppliers WHERE NOT EXISTS (SELECT 1 FROM products WHERE products.SupplierID = suppliers.SupplierID AND products.UnitsOnOrder > 0);",
            "SELECT suppliers.SupplierID, suppliers.CompanyName, SUM(orders.Freight) AS TotalFreightCost FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID, suppliers.CompanyName;",
            "SELECT suppliers.Country, COUNT(DISTINCT products.ProductID) AS UniqueProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.Country;",
            "SELECT City, COUNT(SupplierID) AS NumSuppliers FROM suppliers GROUP BY City ORDER BY NumSuppliers DESC LIMIT 1;",
            "SELECT products.CategoryID, AVG(products.ReorderLevel) AS AvgReorderLevel FROM products GROUP BY products.CategoryID;",
            "SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS ProductSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID, suppliers.CompanyName ORDER BY ProductSales DESC LIMIT 1;",
            "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT suppliers.SupplierID, suppliers.CompanyName, AVG(products.UnitPrice) AS AvgUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID, suppliers.CompanyName;",
            "SELECT p.SupplierID, DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID, Month;",
            "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;",
            "SELECT s.SupplierID, s.CompanyName, COUNT(p.ProductID) AS DiscontinuedCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1 GROUP BY s.SupplierID ORDER BY DiscontinuedCount DESC;",
            "SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID ORDER BY AvgLeadTime ASC LIMIT 1;",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od INNER JOIN orders o ON o.OrderID = od.OrderID WHERE od.Quantity > 10;",
            "SELECT s.SupplierID, s.CompanyName, SUM(p.UnitsOnOrder) AS TotalUnitsOnOrder FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID, s.CompanyName;",
            "SELECT p.ProductName, COUNT(od.OrderID) AS OrderCount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY OrderCount DESC LIMIT 5;",
            "SELECT o.ShipCity, COUNT(*) AS ShipCount FROM orders o GROUP BY o.ShipCity ORDER BY ShipCount DESC LIMIT 1;",
            "SELECT s.SupplierID, AVG(od.Discount) AS AvgDiscount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock = 0;",
            "SELECT s.SupplierID, SUM(o.Freight) AS TotalFreight FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID;",
            "SELECT s1.SupplierID, s1.CompanyName FROM suppliers s1 JOIN suppliers s2 ON s1.City = s2.City AND s1.SupplierID <> s2.SupplierID;",
            "SELECT EXTRACT(YEAR_MONTH FROM OrderDate) AS YearMonth, COUNT(OrderID) AS OrderCount FROM orders GROUP BY YearMonth;",
            "SELECT DISTINCT s.ContactName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.ShippedDate IS NULL;",
            "SELECT AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM [Order Details] od;",
            "SELECT s.SupplierID, COUNT(DISTINCT p.ProductID) AS ProductVariety FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY ProductVariety DESC LIMIT 1;",
            "SELECT (COUNT(CASE WHEN o.ShippedDate > o.RequiredDate THEN 1 END) * 100.0 / COUNT(*)) AS LateShipPercentage FROM orders o;",
            "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT p.CategoryID, SUM(od.Quantity) AS TotalUnitsSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID;",
            "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE DATEDIFF(o.ShippedDate, o.OrderDate) <= 3;",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY month, products.SupplierID;",
            "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_value FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY total_value DESC;",
            "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS product_count FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
            "SELECT Country, COUNT(*) AS supplier_count FROM suppliers GROUP BY Country ORDER BY supplier_count DESC LIMIT 1;",
            "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS reorder_count FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsOnOrder > 0 AND products.UnitsOnOrder >= products.ReorderLevel GROUP BY suppliers.CompanyName ORDER BY reorder_count DESC;",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1;",
            "SELECT ProductName, SUM([Order Details].Quantity) AS total_quantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE DATE_FORMAT(orders.OrderDate, '%Y-%m') = DATE_FORMAT(CURRENT_DATE - INTERVAL 1 MONTH, '%Y-%m') GROUP BY ProductName ORDER BY total_quantity DESC LIMIT 1;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS avg_order_value FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE()) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS avg_unit_price FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY avg_unit_price DESC LIMIT 1;",
            "SELECT CategoryID, COUNT(DISTINCT orders.OrderID) AS order_count FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY CategoryID;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, COUNT(*) AS order_count FROM orders GROUP BY month ORDER BY order_count DESC LIMIT 1;",
            "SELECT AVG(Discount) AS avg_discount FROM [Order Details];",
            "SELECT suppliers.CompanyName, COUNT(DISTINCT products.ProductID) AS distinct_product_count FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY distinct_product_count DESC LIMIT 1;",
            "SELECT ProductName, UnitsOnOrder FROM products ORDER BY UnitsOnOrder DESC LIMIT 1;",
            "SELECT COUNT(*) AS unshipped_orders FROM orders WHERE ShippedDate IS NULL;",
            "SELECT ProductName, suppliers.CompanyName FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE Discontinued = 1;",
            "SELECT City, GROUP_CONCAT(DISTINCT CompanyName) AS suppliers FROM suppliers GROUP BY City HAVING COUNT(DISTINCT SupplierID) > 1;",
            "SELECT SUM(Freight) AS total_freight FROM orders WHERE QUARTER(ShippedDate) = QUARTER(CURRENT_DATE) - 1 AND YEAR(ShippedDate) = YEAR(CURRENT_DATE - INTERVAL 1 QUARTER);",
            "SELECT ProductName, UnitsInStock FROM products ORDER BY UnitsInStock ASC LIMIT 1;",
            "SELECT AVG(DATEDIFF(RequiredDate, OrderDate)) AS avg_days_to_required FROM orders;",
            "SELECT suppliers.SupplierID, suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID, suppliers.CompanyName;",
            "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY TotalSales DESC;",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m');",
            "SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID, suppliers.CompanyName ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT suppliers.SupplierID, suppliers.CompanyName, COUNT(products.ProductID) AS OutOfStockProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsInStock = 0 GROUP BY suppliers.SupplierID, suppliers.CompanyName;",
            "SELECT products.ProductName, AVG([Order Details].Discount) AS AvgDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName;",
            "SELECT City, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY City ORDER BY SupplierCount DESC LIMIT 1;",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalUnitsOrdered FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName;",
            "SELECT orders.OrderID, SUM([Order Details].Discount) AS TotalDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID ORDER BY TotalDiscount DESC LIMIT 10;",
            "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders WHERE ShipCountry = ? GROUP BY ShipCountry ORDER BY TotalFreight DESC;",
            "SELECT suppliers.SupplierID, suppliers.CompanyName, COUNT(products.ProductID) AS DiscontinuedProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.Discontinued = 1 GROUP BY suppliers.SupplierID ORDER BY DiscontinuedProducts DESC LIMIT 1;",
            "SELECT categories.CategoryID, AVG(products.UnitPrice) AS AvgUnitPrice FROM products JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID;",
            "SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Revenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID, suppliers.CompanyName;",
            "SELECT AVG(ProductsCount) FROM (SELECT OrderID, COUNT(ProductID) AS ProductsCount FROM [Order Details] GROUP BY OrderID) AS OrderProductCounts;",
            "SELECT ProductName, ReorderLevel FROM products ORDER BY ReorderLevel DESC LIMIT 1;",
            "SELECT ProductName, UnitsInStock, UnitsOnOrder, (UnitsInStock/NULLIF(UnitsOnOrder, 0)) AS StockToOrderRatio FROM products;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT ShipRegion, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion ORDER BY AvgOrderValue DESC LIMIT 1;",
            "SELECT COUNT([Order Details].ProductID) AS DiscontinuedOrdered FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1;"
        ],
        "reviews": [
            "The query is mostly correct but needs to include the [Order Details] table to join products and orders accurately.",
            "The original query is mostly correct, but it missed grouping by 'suppliers.CompanyName'. Added it to the GROUP BY clause to fix the issue.",
            "The SQL query is correct. It selects the 'ProductName' and 'UnitPrice' from the 'products' table, orders them by 'UnitPrice' in descending order, and limits the result to the top 5 records, which matches the business question.",
            "The query is correct. It finds the count of distinct OrderIDs from the Order Details table where the products are discontinued.",
            "The original query correctly joins the tables to find suppliers with at least 100 shipped orders. However, it needs to include suppliers.CompanyName in the GROUP BY clause as it is selected but not aggregated.",
            "The query needs to first group by SupplierID, and then find the most frequently ordered product. A subquery or window function can be used to achieve this.",
            "The SQL query correctly calculates the monthly total sales using the provided formula for Total Sales. The query formats the order date to a monthly format and groups the result by OrderMonth, which aligns with the requirements.",
            "The query was incorrect in joining the 'products' and 'orders' tables directly by ProductID, which doesn't exist in the 'orders' table. The correct join should involve the 'Order Details' table with products and orders.",
            "The provided SQL query correctly implements the question's requirement to list all suppliers whose products had zero discount in any order. It uses the correct JOIN operations to link suppliers to their products and to the order details, and the WHERE clause appropriately filters for a discount of zero.",
            "The query is almost correct but needs to include suppliers.CompanyName in the GROUP BY clause to prevent SQL errors.",
            "The original query incorrectly uses MAX function in combination with GROUP BY, which would return the highest discount per product instead of the single highest discount overall. The corrected query orders by the discount and limits the result to 1 to find the product with the highest discount rate.",
            "The original query used DISTINCT unnecessarily. Since ProductID is a primary key, DISTINCT is not needed. Corrected by removing DISTINCT from COUNT.",
            "The original query incorrectly selects suppliers with any product having 0 units on order. It should return suppliers only if none of their products are back-ordered. Therefore, a subquery with NOT EXISTS is required to ensure no products with UnitsOnOrder > 0.",
            "The original query is almost correct but lacks 'suppliers.CompanyName' in the GROUP BY clause. It should be added to ensure proper grouping and avoid SQL errors.",
            "The SQL query correctly joins the suppliers and products tables on SupplierID, groups the results by suppliers' country, and counts the distinct products provided by suppliers in each country. The query is correct as per the given business question.",
            "The SQL query is correct. It correctly groups the suppliers by city, counts them, and orders the results in descending order to find the city with the highest number of suppliers.",
            "The SQL query is correct and accurately answers the business question by calculating the average reorder level for each category, grouped by CategoryID.",
            "The original query did not include 'suppliers.CompanyName' in the GROUP BY clause, which is necessary for valid SQL syntax. Added 'suppliers.CompanyName' to the GROUP BY clause.",
            "The SQL query correctly identifies products that have never been ordered. It selects ProductID and ProductName from the products table, filtering out ProductIDs that appear in the Order Details table, which accurately captures products never involved in any order. The use of DISTINCT in the subquery further ensures that all ordered products are considered, avoiding any unnecessary duplicates.",
            "The original query is mostly correct but should also group by CompanyName for correct aggregation since it is being selected.",
            "The original query incorrectly joins orders with products using OrderID and ProductID. It should join orders with [Order Details] using OrderID, and then [Order Details] with products using ProductID to correctly calculate the average lead time for each supplier.",
            "The query correctly calculates the total sales for each month across all products by joining the orders with the [Order Details] table and grouping by the formatted order date. The DATE_FORMAT function is specific to MySQL, so for ANSI SQL compliance, consider using EXTRACT(YEAR FROM o.OrderDate) || '-' || EXTRACT(MONTH FROM o.OrderDate) AS Month in databases that support standard SQL without date formatting functions.",
            "The SQL query correctly retrieves suppliers with the highest number of discontinued products by joining the 'suppliers' and 'products' tables and filtering for discontinued products. It then groups by SupplierID to count the number of discontinued products per supplier and orders the result by DiscontinuedCount in descending order. No change is necessary.",
            "The original query incorrectly joins orders and products directly on OrderID and ProductID, which is not appropriate based on the schema. The corrected query properly joins orders with the [Order Details] table and then with products on the correct keys.",
            "The SQL query is correct. It accurately calculates the total revenue generated from orders where more than ten units of any product were ordered by correctly joining the orders and order details tables and applying the appropriate conditions and calculations for total revenue.",
            "The original query is mostly correct but misses grouping by s.CompanyName. Added s.CompanyName to the GROUP BY clause.",
            "The SQL query is correct. It joins the 'products' table with the '[Order Details]' table on 'ProductID', counts the number of orders for each product, groups the results by 'ProductName', orders them in descending order based on 'OrderCount', and limits the results to the top 5 products. The use of COUNT, GROUP BY, and ORDER BY is suitable for this question.",
            "The SQL query correctly calculates the city receiving the highest number of shipments by grouping the 'orders' table data by 'ShipCity', counting the occurrences, ordering by the count in descending order, and then using `LIMIT 1` to get the city with the maximum shipments. The query appears to be correct.",
            "The SQL query correctly calculates the average discount given on orders by each supplier. It correctly joins the suppliers, products, and order details tables, and computes the average discount using the AVG function, grouping by supplier.",
            "The SQL query is correct. It selects the ProductID and ProductName from the products table where UnitsInStock is 0, indicating that the products are currently out of stock.",
            "The original query incorrectly joins 'products' to 'orders' using 'ProductID' and 'OrderID', which is not correct. The correct relationship is through the '[Order Details]' table, using 'ProductID' in 'products' to 'ProductID' in '[Order Details]' and 'OrderID' in '[Order Details]' to 'OrderID' in 'orders'.",
            "The query is correct. It joins the suppliers table with itself to find suppliers located in the same city, ensuring they are not the same supplier by using the condition s1.SupplierID <> s2.SupplierID.",
            "The original query uses DATE_FORMAT specific to certain SQL dialects and not ANSI SQL. Instead, EXTRACT with YEAR_MONTH is used to maintain compatibility with ANSI SQL standards.",
            "The original query checks for orders with quantity greater than zero, which does not necessarily mean they are pending. Instead, we should check if the ShippedDate is NULL to identify pending orders. Also, using DISTINCT avoids duplicate contact names.",
            "The query is correct and calculates the average order value by using the formula for Total Sales adjusted for discounts.",
            "The original query correctly joins the suppliers and products tables, counts the products per supplier, and orders the results to find the supplier with the highest variety. However, to ensure the count reflects distinct products, 'COUNT(DISTINCT p.ProductID)' should be used instead of 'COUNT(p.ProductID)'.",
            "The query is mostly correct, but it needs a slight adjustment for division to handle floating-point precision. Adding multiplication by 100.0 ensures the division is treated as a floating-point operation.",
            "The provided SQL query is correct. It selects ProductID and ProductName from the products table where the ProductID is not found in the [Order Details] table, effectively identifying products that have never been ordered.",
            "The SQL query is mostly correct but doesn't correctly use the 'categories' table. If there is a separate 'categories' table not mentioned in the schema, ensure it is considered. Assuming 'categories' should be included, the query matches the given schema, but without clarity on a 'categories' table, the corrected query focuses on 'products'.",
            "The SQL query is correctly structured for the given question. It appropriately calculates the total sales by multiplying unit price, quantity, and applying the discount, then filters for orders shipped within 3 days using DATEDIFF.",
            "The original query incorrectly joined the orders and products tables. The corrected query includes a join between 'orders', '[Order Details]', and 'products' tables, and groups by both the month and SupplierID.",
            "The SQL query appears to be correct for the given question. It correctly calculates the total value of products delivered by each supplier, joins the suppliers, products, and order details tables, groups by supplier company name, and orders the results by the total value in descending order. No changes are needed.",
            "The SQL query is correct. It correctly joins the suppliers and products tables using SupplierID and counts the number of ProductIDs per supplier, grouping by CompanyName.",
            "The SQL query is correct. It selects the Country and counts the suppliers for each country, then orders the result in descending order based on the count and limits the result to one, thereby correctly identifying the country with the most suppliers.",
            "The original query is mostly correct, but to specifically track only products that are actively on reorder, it is important to ensure there are actually units on order. The condition 'products.UnitsOnOrder > 0' is added to emphasize products must have units on order to be counted.",
            "The original query is mostly correct, but using the EXTRACT function is a more standard way to get the year part of a date in ANSI SQL.",
            "The initial query is missing a JOIN with the orders table to access the OrderDate. Added the JOIN with the orders table to filter OrderDetails based on the OrderDate.",
            "The given query is mostly correct but should group by the expression used in the SELECT clause for clarity. I've modified the GROUP BY clause to ensure it matches the SELECT clause.",
            "The provided query correctly joins the 'suppliers' and 'products' tables, calculates the average unit price grouped by supplier, and orders the result in descending order of the average unit price. However, to find the supplier with the highest average, it should limit the result to 1 to return only the top supplier.",
            "The original query does not take into account that multiple products from the same category could be in a single order. Therefore, using COUNT(DISTINCT orders.OrderID) ensures that each order is counted only once per category.",
            "The query is correct and follows ANSI SQL standards. However, DATE_FORMAT is not a standard SQL function; it should be replaced with the standard SQL equivalent. Here's the revised query:\n\nSELECT TO_CHAR(OrderDate, 'YYYY-MM') AS month, COUNT(*) AS order_count FROM orders GROUP BY month ORDER BY order_count DESC FETCH FIRST 1 ROW ONLY;",
            "The SQL query correctly calculates the average discount from the [Order Details] table.",
            "The original query correctly finds the suppliers and counts the distinct products, but it doesn't limit the result to the supplier with the largest count. Adding 'LIMIT 1' will ensure only the top result is returned, which answers the question.",
            "The query is correct. It retrieves the product with the highest number of units on order by ordering the 'UnitsOnOrder' column in descending order and limiting the result to one record.",
            "The SQL query is correct. It accurately counts the orders where ShippedDate is null, indicating orders that have not been shipped yet.",
            "The SQL query is correct. It retrieves the names of discontinued products along with the names of the corresponding suppliers by joining the products and suppliers tables and filtering for discontinued products.",
            "The original query correctly uses GROUP_CONCAT to list suppliers in each city but should ensure distinct SupplierIDs are counted in the HAVING clause to precisely identify cities with more than one supplier.",
            "The initial query fails to account for the year when comparing quarters. Adding a condition to ensure the year matches the correct quarter fixes this.",
            "The query correctly retrieves the product with the lowest units in stock by ordering them in ascending order and limiting the result to one row.",
            "The query correctly calculates the average number of days between when orders are placed and when they are required, using the DATEDIFF function on RequiredDate and OrderDate in the orders table.",
            "The original query incorrectly joined 'products' with 'orders' using 'ProductID' and 'OrderID'. The correct join should involve 'Order Details' to connect products and orders.",
            "The SQL query correctly calculates the total sales for each product and orders them in descending order. It joins the 'Order Details' table with the 'products' table using ProductID and applies the correct formula for total sales. The grouping and ordering are appropriate for the question asked.",
            "The SQL query is nearly correct. The only issue is with the GROUP BY clause; it should explicitly group by the same expression used in the SELECT clause, i.e., DATE_FORMAT(orders.OrderDate, '%Y-%m').",
            "The original query is mostly correct, but it is missing the 'suppliers.CompanyName' in the GROUP BY clause. Adding 'suppliers.CompanyName' ensures we group by all non-aggregated columns in the SELECT clause to comply with SQL standards.",
            "The SQL query is mostly correct. However, in the GROUP BY clause, it should include 'suppliers.CompanyName' to match the selected columns.",
            "The SQL query correctly calculates the average discount for each product by joining the 'Order Details' table with the 'products' table on 'ProductID'. It groups the results by 'ProductName', which is appropriate for this question.",
            "The query correctly calculates the city with the most suppliers by counting the number of suppliers in each city, grouping by city, ordering by the supplier count in descending order, and finally limiting the result to the top city. The SQL query is correct.",
            "The SQL query correctly calculates the total number of units ordered for each product by joining the 'Order Details' table with the 'products' table on 'ProductID' and summing up the 'Quantity'. The GROUP BY clause groups the results by 'ProductName'. The query is accurate given the schema and the question.",
            "The query incorrectly calculates the total discount by summing the discount rates directly. The discount should be calculated as a product-based reduction. Correct calculation: SELECT orders.OrderID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID ORDER BY TotalDiscount DESC LIMIT 10;",
            "The original query does not filter for a specific country. Added a WHERE clause to filter the results for a specific ShipCountry.",
            "The original query is correct in finding the number of discontinued products per supplier. However, to find the supplier with the most discontinued products, we need to order the results in descending order by 'DiscontinuedProducts' and limit the result to 1.",
            "The SQL query is incorrect because the 'categories' table is not present in the given schema. To calculate the average unit price per category, ensure that the 'categories' table is defined. As per the given schema, you cannot execute this query.",
            "The SQL query correctly counts the number of orders where the ShippedDate is later than the RequiredDate. No corrections are needed.",
            "The original query is almost correct; however, 'suppliers.CompanyName' should be included in the GROUP BY clause to ensure that the query adheres to SQL standards. The corrected query adds 'suppliers.CompanyName' to the GROUP BY clause.",
            "The SQL query is correct. It calculates the average number of products per order correctly by first grouping the 'Order Details' table by OrderID to count the number of products per order, and then taking the average of these counts.",
            "The original query incorrectly used GROUP BY with MAX function in this context, which was unnecessary as there is only one product with the highest reorder level. The corrected version orders by ReorderLevel in descending order and limits the result to 1 to find the product with the highest reorder level.",
            "The SQL query correctly computes the ratio of 'UnitsInStock' to 'UnitsOnOrder' for each product using 'NULLIF' to prevent division by zero errors. The query is accurate and needs no correction.",
            "The original query is mostly correct. However, for ANSI SQL compliance, use `TO_CHAR(OrderDate, 'YYYY-MM')` or an equivalent function depending on the SQL dialect instead of `DATE_FORMAT`. Also, ensure consistent grouping by the expression used in the SELECT clause.",
            "The SQL query is correct. It correctly calculates the average order value per region and orders the result to find the highest value.",
            "The SQL query is correct. It joins the [Order Details] table with the products table on ProductID, then filters for products marked as discontinued (Discontinued = 1), and counts the number of discontinued products ordered."
        ],
        "difficulty": [
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "advanced",
            "medium",
            "easy",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "easy",
            "advanced",
            "medium",
            "advanced",
            "medium"
        ]
    },
    "Shipping Analysis": {
        "questions": [
            "What is the average shipping cost per order for each month?",
            "What percentage of orders were delivered on or before the required date each month?",
            "What is the average time taken to fulfill an order each month?",
            "How many orders were shipped each month?",
            "What is the total freight cost incurred each month?",
            "Which shipping method was used most frequently each month?",
            "What is the average shipping time for orders shipped using each shipping method?",
            "How many orders were shipped using each shipping method per month?",
            "What is the average shipping cost for orders shipped to each country?",
            "Which country had the highest number of shipments this year?",
            "List the top five customers based on the number of orders placed this year.",
            "What is the average order fulfillment time for orders that were delivered on time?",
            "Which shipping company had the lowest average shipping cost last month?",
            "What is the average delay in shipping (if any) across all orders?",
            "What is the total number of orders that were not delivered on time each month?",
            "In which region were the most orders shipped last year?",
            "What are the top three cities based on the total freight cost for deliveries?",
            "How many orders were shipped with the highest freight each month?",
            "For orders shipped via method 1, what is the on-time delivery rate?",
            "What is the monthly trend in average freight cost over the last year?",
            "What is the average shipping cost per order?",
            "What percentage of orders are delivered on or before the required date?",
            "What is the average time taken to fulfill an order?",
            "How many orders are shipped via each shipping method?",
            "Which shipping company delivers the most orders?",
            "What is the total freight cost for each month?",
            "Which city has the highest number of shipments?",
            "What is the average freight cost for orders shipped to each country?",
            "How many orders have a shipping time longer than 10 days?",
            "What is the on-time delivery rate for each shipping method?",
            "Which day of the week are most orders shipped?",
            "What is the shipping cost trend over the past six months?",
            "Which regions have the highest delay in shipping?",
            "How does the shipping time vary across different countries?",
            "What is the freight cost percentage of the total order value for each order?",
            "What is the average shipping delay for late shipments?",
            "How many orders have yet to be shipped?",
            "What is the average order fulfillment time for each employee?",
            "Which month has the highest average order value?",
            "What is the relationship between order volume and shipping costs?",
            "What is the average shipping cost per order each month?",
            "What percentage of orders are delivered on or before the required date each month?",
            "What is the average order fulfillment time each month?",
            "Which shipping method has the highest freight cost on average?",
            "How many orders have been delayed beyond their required date?",
            "What is the total freight cost for each shipping method?",
            "Which country has the highest number of orders shipped to?",
            "What is the average fulfillment time for orders shipped via each method?",
            "Which shipping method is most commonly used?",
            "What is the maximum, minimum, and average shipping cost per month?",
            "How many orders were shipped in each quarter of the year?",
            "What is the total number of orders per employee?",
            "How many orders were shipped but still delayed beyond their required date?",
            "What is the most common shipping recipient name?",
            "Which city receives the highest number of shipped orders?",
            "How many orders were placed and shipped on the same day?",
            "What is the distribution of orders by shipping region?",
            "Which month had the longest average order fulfillment time?",
            "How often does the shipping date match the required date?",
            "What is the average shipping cost for orders with the same shipping recipient name?",
            "What percentage of orders were delivered on or before the required date?",
            "What is the average order fulfillment time?",
            "How many orders were shipped by each shipping method?",
            "Which shipping method has the highest average freight cost?",
            "What is the total freight cost for all orders within this year?",
            "Which city has the highest number of shipped orders?",
            "How many late deliveries occurred last month?",
            "What is the trend in the average shipping cost over the past six months?",
            "What is the on-time delivery rate for each quarter?",
            "What is the average number of days between OrderDate and RequiredDate?",
            "Which country has the most expensive average freight cost?",
            "What is the distribution of freight costs across different regions?",
            "How many orders were placed by each customer each month?",
            "Which day of the week has the highest number of shipped orders?",
            "What is the correlation between freight cost and order fulfillment time?",
            "Which shipping method had the fastest average delivery time in the last quarter?",
            "What is the average delay for late orders over the past year?",
            "Which employee has handled the most orders?",
            "What percentage of orders have missing ShippedDate?"
        ],
        "sql_queries": [
            "SELECT EXTRACT(YEAR FROM OrderDate) AS year, EXTRACT(MONTH FROM OrderDate) AS month, AVG(Freight) AS avg_shipping_cost FROM orders GROUP BY year, month;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS year, EXTRACT(MONTH FROM OrderDate) AS month, COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) AS on_time_delivery_rate FROM orders GROUP BY year, month;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS year, EXTRACT(MONTH FROM OrderDate) AS month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY year, month;",
            "SELECT EXTRACT(YEAR FROM ShippedDate) AS year, EXTRACT(MONTH FROM ShippedDate) AS month, COUNT(OrderID) AS total_orders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY year, month;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS year, EXTRACT(MONTH FROM OrderDate) AS month, SUM(Freight) AS total_freight_cost FROM orders GROUP BY year, month;",
            "SELECT year, month, ShipVia FROM (SELECT EXTRACT(YEAR FROM OrderDate) AS year, EXTRACT(MONTH FROM OrderDate) AS month, ShipVia, COUNT(OrderID) AS method_count, RANK() OVER (PARTITION BY EXTRACT(YEAR FROM OrderDate), EXTRACT(MONTH FROM OrderDate) ORDER BY COUNT(OrderID) DESC) AS rank FROM orders GROUP BY year, month, ShipVia) WHERE rank = 1;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_shipping_time FROM orders GROUP BY ShipVia;",
            "SELECT EXTRACT(YEAR FROM ShippedDate) AS year, EXTRACT(MONTH FROM ShippedDate) AS month, ShipVia, COUNT(OrderID) AS method_count FROM orders GROUP BY year, month, ShipVia;",
            "SELECT ShipCountry, AVG(Freight) AS avg_shipping_cost FROM orders GROUP BY ShipCountry;",
            "SELECT ShipCountry, COUNT(OrderID) AS orders_count FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY ShipCountry ORDER BY orders_count DESC LIMIT 1;",
            "SELECT CustomerID, COUNT(OrderID) AS order_count FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY CustomerID ORDER BY order_count DESC LIMIT 5;",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time FROM orders WHERE ShippedDate <= RequiredDate;",
            "SELECT ShipVia, AVG(Freight) AS avg_shipping_cost FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '1 month') AND EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE - INTERVAL '1 month') GROUP BY ShipVia ORDER BY avg_shipping_cost ASC LIMIT 1;",
            "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS avg_delay FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT EXTRACT(YEAR FROM ShippedDate) AS year, EXTRACT(MONTH FROM ShippedDate) AS month, COUNT(OrderID) AS late_orders FROM orders WHERE ShippedDate > RequiredDate GROUP BY year, month;",
            "SELECT ShipRegion, COUNT(OrderID) AS orders_count FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY ShipRegion ORDER BY orders_count DESC LIMIT 1;",
            "SELECT ShipCity, SUM(Freight) AS total_freight_cost FROM orders GROUP BY ShipCity ORDER BY total_freight_cost DESC LIMIT 3;",
            "SELECT year, month, COUNT(OrderID) AS order_count FROM (SELECT EXTRACT(YEAR FROM OrderDate) AS year, EXTRACT(MONTH FROM OrderDate) AS month, Freight, OrderID, RANK() OVER (PARTITION BY EXTRACT(YEAR FROM OrderDate), EXTRACT(MONTH FROM OrderDate) ORDER BY Freight DESC) AS rank FROM orders) ranked_orders WHERE rank = 1 GROUP BY year, month;",
            "SELECT COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) AS on_time_delivery_rate FROM orders WHERE ShipVia = 1;",
            "SELECT EXTRACT(YEAR FROM OrderDate) AS year, EXTRACT(MONTH FROM OrderDate) AS month, AVG(Freight) AS avg_freight_cost FROM orders WHERE OrderDate >= DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '1 year' GROUP BY year, month ORDER BY year, month;",
            "SELECT AVG(Freight) FROM orders;",
            "SELECT COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryPercentage FROM orders;",
            "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) FROM orders;",
            "SELECT ShipVia, COUNT(OrderID) FROM orders GROUP BY ShipVia;",
            "SELECT ShipName, COUNT(OrderID) FROM orders GROUP BY ShipName ORDER BY COUNT(OrderID) DESC LIMIT 1;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(Freight) AS TotalFreight FROM orders GROUP BY Month;",
            "SELECT ShipCity, COUNT(OrderID) FROM orders GROUP BY ShipCity ORDER BY COUNT(OrderID) DESC LIMIT 1;",
            "SELECT ShipCountry, AVG(Freight) FROM orders GROUP BY ShipCountry;",
            "SELECT COUNT(OrderID) FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) > 10;",
            "SELECT ShipVia, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipVia;",
            "SELECT DAYNAME(ShippedDate) AS Day, COUNT(OrderID) FROM orders GROUP BY Day ORDER BY COUNT(OrderID) DESC LIMIT 1;",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, AVG(Freight) AS AverageFreight FROM orders WHERE OrderDate >= ADD_MONTHS(CURRENT_DATE, -6) GROUP BY Month ORDER BY Month DESC;",
            "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AverageDelay FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipRegion;",
            "SELECT ShipCountry, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders GROUP BY ShipCountry;",
            "SELECT OrderID, (Freight / (SELECT SUM(Freight) OVER()) * 100.0) AS FreightPercentage FROM orders;",
            "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate IS NULL;",
            "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) FROM orders GROUP BY EmployeeID;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(OrderValue) FROM orders GROUP BY Month ORDER BY AVG(OrderValue) DESC LIMIT 1;",
            "SELECT COUNT(OrderID) / SUM(Freight) AS OrderVolumeToCostRatio FROM orders;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY Month;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY Month;",
            "SELECT ShipVia, AVG(Freight) AS AverageFreightCost FROM orders GROUP BY ShipVia ORDER BY AverageFreightCost DESC LIMIT 1;",
            "SELECT COUNT(OrderID) AS DelayedOrders FROM orders WHERE ShippedDate > RequiredDate;",
            "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
            "SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCountry ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY ShipVia;",
            "SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, MAX(Freight) AS MaxShippingCost, MIN(Freight) AS MinShippingCost, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
            "SELECT QUARTER(ShippedDate) AS Quarter, COUNT(OrderID) AS OrdersInQuarter FROM orders GROUP BY QUARTER(ShippedDate);",
            "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID;",
            "SELECT COUNT(OrderID) AS DelayedOrders FROM orders WHERE ShippedDate > RequiredDate AND ShippedDate IS NOT NULL;",
            "SELECT ShipName, COUNT(OrderID) AS Frequency FROM orders GROUP BY ShipName ORDER BY Frequency DESC LIMIT 1;",
            "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 1;",
            "SELECT COUNT(OrderID) AS SameDayOrders FROM orders WHERE OrderDate = ShippedDate;",
            "SELECT ShipRegion, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipRegion;",
            "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY Month ORDER BY AverageFulfillmentTime DESC FETCH FIRST 1 ROW ONLY;",
            "SELECT COUNT(OrderID) AS ExactMatchCount FROM orders WHERE ShippedDate = RequiredDate;",
            "SELECT ShipName, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY ShipName;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
            "SELECT DATE_TRUNC('month', OrderDate), AVG(DATEDIFF(ShippedDate, OrderDate)) FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
            "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia;",
            "SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipVia ORDER BY AvgFreight DESC LIMIT 1;",
            "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE);",
            "SELECT ShipCity, COUNT(OrderID) AS ShippedOrders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipCity ORDER BY ShippedOrders DESC LIMIT 1;",
            "SELECT COUNT(OrderID) AS LateDeliveries FROM orders WHERE ShippedDate > RequiredDate AND EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) AND EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) - 1;",
            "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '5 months' GROUP BY Month ORDER BY Month;",
            "SELECT DATE_TRUNC('quarter', OrderDate) AS Quarter, SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Quarter;",
            "SELECT AVG(RequiredDate - OrderDate) AS AvgDays FROM orders;",
            "SELECT ShipCountry, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipCountry ORDER BY AvgFreightCost DESC LIMIT 1;",
            "SELECT ShipRegion, COUNT(OrderID) AS NumOrders, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipRegion;",
            "SELECT CustomerID, DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS NumOrders FROM orders GROUP BY CustomerID, Month;",
            "SELECT EXTRACT(DOW FROM ShippedDate) AS DayOfWeek, COUNT(OrderID) AS NumOrders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY DayOfWeek ORDER BY NumOrders DESC LIMIT 1;",
            "SELECT CORR(Freight, DATEDIFF(ShippedDate, OrderDate)) AS Correlation FROM orders;",
            "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgDeliveryTime FROM orders WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '3 months') AND OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY ShipVia ORDER BY AvgDeliveryTime ASC LIMIT 1;",
            "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgDelay FROM orders WHERE ShippedDate > RequiredDate AND OrderDate >= (CURRENT_DATE - INTERVAL '1 year');",
            "SELECT EmployeeID, COUNT(OrderID) AS NumOrders FROM orders GROUP BY EmployeeID ORDER BY NumOrders DESC LIMIT 1;",
            "SELECT COUNT(OrderID) * 100.0 / (SELECT COUNT(OrderID) FROM orders) AS MissingShippedDatePercentage FROM orders WHERE ShippedDate IS NULL;"
        ],
        "reviews": [
            "The SQL query correctly extracts the year and month from the OrderDate and calculates the average shipping cost per month. The query aligns with the 'Shipping Cost per Order' metric and its monthly granularity. No changes necessary.",
            "The SQL query correctly implements the metric for On-time Delivery Rate based on the business question. It uses 'FILTER' to count only the orders with ShippedDate on or before RequiredDate, calculates the percentage, and groups the results by year and month from OrderDate.",
            "The SQL query correctly calculates the average time taken to fulfill an order each month by extracting the year and month from the OrderDate and grouping the results. The use of DATEDIFF to calculate the number of days between ShippedDate and OrderDate aligns with the defined metric for 'Order Fulfillment Time'. No changes are needed.",
            "The original query incorrectly calculates based on the OrderDate instead of the ShippedDate. The corrected query uses ShippedDate to count the orders actually shipped each month and includes a condition to exclude null ShippedDate values.",
            "The provided SQL query correctly calculates the total freight cost incurred each month by extracting the year and month from the OrderDate and grouping the results by these values.",
            "The original query correctly identifies the frequency of shipping methods but does not determine the most frequently used one. Adding a ranking and filtering by rank = 1 will ensure we get the most frequent method each month.",
            "The query correctly calculates the average shipping time for orders grouped by the shipping method. The use of DATEDIFF to calculate the difference between 'ShippedDate' and 'OrderDate', followed by the AVG aggregation, is appropriate for this question. The query adheres to the required output specification.",
            "The original query incorrectly uses OrderDate instead of ShippedDate to group the data by the shipping methods per month. The corrected query groups by ShippedDate, which indicates when the orders were actually shipped, aligning with the question.",
            "The SQL query is correct. It calculates the average shipping cost for each country by using AVG(Freight) and grouping results by ShipCountry.",
            "The SQL query is correct for the given question. It calculates the number of shipments per country for orders placed this year and limits the result to the country with the highest count.",
            "The query is correct and matches the business question. It selects customers based on order count within the current year, orders them in descending order, and limits the result to the top five customers.",
            "The SQL query correctly calculates the average fulfillment time for orders delivered on or before the required date using the given schema and business metrics definitions.",
            "The original query incorrectly calculates the year and month based on the current date rather than the previous month. The correct query adjusts for both year and month using 'CURRENT_DATE - INTERVAL '1 month' correctly.",
            "The SQL query is correct for the question. It calculates the average delay by using DATEDIFF to find the difference between ShippedDate and RequiredDate only for orders where ShippedDate is greater than RequiredDate. This correctly captures the average delay across orders that are shipped later than required.",
            "Corrected the query to use ShippedDate for extracting year and month, aligning it with the date of delivery to accurately reflect late orders.",
            "The SQL query correctly retrieves the region with the most orders shipped last year by counting the number of orders per region and sorting them in descending order. It uses the correct method for extracting the year and employs the LIMIT 1 to fetch the top region.",
            "The SQL query correctly answers the business question. It calculates the total freight cost per city, orders the results in descending order, and limits the output to the top three cities.",
            "The original query retrieves only the max freight value but doesn't count the number of orders with that max freight each month. The corrected version first ranks freights for each month and year, then counts orders with the highest freight using a subquery and window function.",
            "The query correctly calculates the on-time delivery rate by filtering orders where ShipVia is 1 and using FILTER to count orders delivered on or before the required date. The use of 'FILTER' is valid in this context and achieves the desired outcome.",
            "The original query checks for orders within the current year only. It should instead filter for orders within the last year to track monthly trends, hence 'OrderDate >= DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '1 year' was added to the WHERE clause.",
            "The SQL query correctly calculates the average shipping cost per order using the provided formula AVG(orders.Freight). It aligns with the business metric definition.",
            "The original query had a syntax error due to incorrect placement of the WHERE clause. The corrected query uses a CASE WHEN statement to conditionally count only those orders that meet the on-time delivery condition.",
            "The SQL query is correct as it calculates the average difference between the ShippedDate and OrderDate, which aligns with the business metric definition for Order Fulfillment Time.",
            "The SQL query is correct. It accurately counts the number of orders for each shipping method as specified in the business question by grouping on the 'ShipVia' column and counting the 'OrderID'.",
            "The SQL query is correct. It counts the number of orders per shipping company (ShipName) and selects the company with the highest count. The ORDER BY clause is used with COUNT(OrderID) in descending order, combined with LIMIT 1 to get the shipping company that delivers the most orders.",
            "The original query used the incorrect function DATE_FORMAT, which is not standard in ANSI SQL. DATE_TRUNC is used to extract the month part for grouping. The query sums the freight costs correctly and groups by month.",
            "The SQL query correctly finds the city with the highest number of shipments by counting the OrderID per city, grouping by ShipCity, and ordering the results in descending order by the count. The LIMIT 1 clause appropriately restricts the result to the city with the highest count. Therefore, the query is correct.",
            "The SQL query is correct and accurately computes the average freight cost for orders grouped by each country.",
            "The SQL query is correct. It calculates the number of orders with a shipping time greater than 10 days using the DATEDIFF function.",
            "The original query syntax is incorrect. The COUNT syntax used in the condition was incorrect. Instead, a CASE statement should be used to count only the orders where ShippedDate is on or before RequiredDate.",
            "The SQL query correctly selects the day of the week with the most shipped orders. It uses DAYNAME to extract the day from ShippedDate, groups by Day, and orders by the count of OrderID in descending order. LIMIT 1 ensures only the top day is returned. The query is correct for the given question.",
            "The original query used DATE_FORMAT and LIMIT which are not part of the ANSI SQL standard. The query has been corrected to use TO_CHAR for formatting the date and ADD_MONTHS for calculating the date range, ensuring it checks only the last six months of data.",
            "The original query is mostly correct. It correctly calculates the average delay for shipments that were shipped late (i.e., where ShippedDate is greater than RequiredDate) and groups results by region. Adding an alias for the AVG result (e.g., AS AverageDelay) improves readability when analyzing results.",
            "The query correctly calculates the average shipping time across different countries by using the DATEDIFF function and grouping by ShipCountry. No changes are needed, but it's a good practice to alias the AVG function for clarity.",
            "The original query is incorrect because it uses SUM(OrderValueColumn), which is not defined in the schema. Assuming the intent is to find the freight percentage out of total freight costs, the corrected query calculates the percentage of the freight cost of each order from the total freight using a window function.",
            "The SQL query correctly calculates the average delay for shipments that were shipped later than the required date by taking the difference between ShippedDate and RequiredDate only for orders where ShippedDate is greater than RequiredDate.",
            "The SQL query is correct. It accurately counts the number of orders where the 'ShippedDate' is NULL, indicating they have not been shipped yet.",
            "The SQL query correctly calculates the average order fulfillment time for each employee by using the DATEDIFF function to find the difference between ShippedDate and OrderDate. It then groups the results by EmployeeID to provide the average for each employee.",
            "The provided SQL query references a non-existent column 'OrderValueColumn'. Assuming 'OrderValue' should be calculated, we need more information to determine how to compute it from the given schema. Please clarify or provide details on how 'OrderValue' is derived to correct the query.",
            "The query needed corrections. 'OrderValueColumn' does not exist. To evaluate the relationship between order volume and shipping costs, 'COUNT(OrderID)' can be used to determine order volume.",
            "The query is almost correct. However, to adhere to ANSI SQL standard, the DATE_FORMAT function isn't available. Thus, we should use EXTRACT for year and month, or format accordingly in a supported way.",
            "The original SQL query contains an incorrect use of the FILTER clause, which is not universally supported by ANSI SQL. The corrected query uses a CASE WHEN expression within COUNT to achieve the same effect. The use of DATE_FORMAT also needs to be replaced if the DATE_FORMAT function is not supported, but assuming proper support, this solution is valid.",
            "The SQL query correctly computes the average order fulfillment time per month by using DATE_FORMAT to extract the monthly period from OrderDate and applying AVG on the difference between ShippedDate and OrderDate. The query aligns with the formula provided for 'Order Fulfillment Time' in the business metrics definitions.",
            "The SQL query is correct. It calculates the average freight cost for each shipping method and orders them in descending order, returning the top result, which corresponds to the shipping method with the highest average cost.",
            "The SQL query is correct and accurately counts the number of orders where the ShippedDate is later than the RequiredDate, indicating delay.",
            "The SQL query is correct. It calculates the total freight cost for each shipping method by grouping the orders by the ShipVia column and summing up the Freight values for each group.",
            "The SQL query correctly addresses the business question by counting the number of orders for each country, grouping by ShipCountry, and ordering by the count in descending order to find the country with the highest number of orders. The LIMIT 1 is used appropriately to return only the top country.",
            "The SQL query is correct. It selects the shipping method and calculates the average fulfillment time by computing the difference between the shipped date and the order date, grouping by the shipping method.",
            "The SQL query is correct for the business question. It selects the shipping method 'ShipVia' and counts the number of orders 'OrderID' for each method, grouping by 'ShipVia'. It then orders the results by 'UsageCount' in descending order and limits the output to the top result, giving the most commonly used shipping method.",
            "The original query is almost correct, but it makes a mistake by using the alias 'Month' in the GROUP BY clause. Instead, the same expression used for aliasing should be repeated in the GROUP BY clause. The corrected query explicitly repeats the DATE_FORMAT expression in the GROUP BY section.",
            "Changed the column in the QUARTER function from OrderDate to ShippedDate as the business question specifies shipped orders.",
            "The SQL query is correct. It selects the EmployeeID and counts the number of OrderIDs grouped by EmployeeID, providing the total number of orders per employee.",
            "The SQL query correctly counts orders that were shipped after the required date while ensuring the shipped date is not null. The query accurately answers the business question, so no correction is needed.",
            "The query is correct in finding the most common shipping recipient name. It groups the orders by ShipName, counts the number of orders for each name, and orders the result in descending order of frequency, limiting the result to the top one.",
            "The original query did not account for only shipped orders. Adding WHERE ShippedDate IS NOT NULL ensures we count only orders that have been shipped.",
            "The SQL query correctly calculates the number of orders where the OrderDate is the same as the ShippedDate. It accurately answers the business question.",
            "The provided SQL query is correct. It correctly aggregates the number of orders per shipping region using COUNT(OrderID) and groups the results by ShipRegion.",
            "Corrected DATE_FORMAT to TO_CHAR for ANSI SQL compliance, and used FETCH FIRST 1 ROW ONLY instead of LIMIT 1.",
            "The SQL query accurately answers the question by counting the orders where the shipping date matches the required date. No corrections are needed.",
            "The SQL query correctly calculates the average shipping cost for orders with the same shipping recipient name. The query groups the data by 'ShipName' and computes the average of 'Freight' for each group, which matches the business question.",
            "The query correctly calculates the percentage of on-time deliveries monthly by using DATE_TRUNC to aggregate by month. The formula SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) correctly counts on-time orders, and dividing by COUNT(OrderID) gives the percentage. The usage of 100.0 ensures a float division for the percentage calculation. The query is accurate and adheres to the business metric definition.",
            "The query is mostly correct, but the ORDER BY should explicitly match the SELECT clause for consistency in terms of syntax. Additionally, the extracted month should match exactly the AVG function granularity.",
            "The SQL query is correct. It counts the number of orders for each shipping method by grouping on the 'ShipVia' column.",
            "The query correctly calculates the average freight cost for each shipping method and returns the one with the highest average. It uses GROUP BY to aggregate freight costs by ShipVia, and ORDER BY DESC with LIMIT 1 to get the highest value. The query is correct as per the business question.",
            "The query is correctly written to calculate the total freight cost for orders within the current year using the 'EXTRACT(YEAR FROM ...)' function, which is ANSI SQL compliant.",
            "The original query does not check whether the orders have actually been shipped, which is necessary to ensure only shipped orders are counted. Adding a condition WHERE ShippedDate IS NOT NULL resolves this issue.",
            "The original query does not account for the year, which may lead to incorrect results across year boundaries. Added year check to ensure accurate retrieval of last month's data.",
            "The original query calculates the trend over the past seven months (inclusive of the current month). Adjusting the interval subtraction to '5 months' correctly computes the last six months including the current month.",
            "The query correctly calculates the on-time delivery rate for each quarter by grouping orders by the quarter derived from OrderDate. It uses a CASE statement to count orders shipped on or before the required date and divides by the total count to get the percentage.",
            "The original SQL query is almost correct. The DATEDIFF function isn't universally supported in ANSI SQL. However, subtracting dates directly is often sufficient and generally supported. The rest of the query correctly calculates the average difference between OrderDate and RequiredDate.",
            "The SQL query correctly calculates the average freight cost per country and orders the result to find the country with the highest average freight cost. It appropriately uses the LIMIT clause to return only the top result, which aligns with the business question.",
            "The SQL query accurately answers the business question by grouping the orders based on the ShipRegion and providing the count of orders and average freight per region. No corrections are needed.",
            "The SQL query correctly answers the stated business question. It uses DATE_TRUNC to extract the monthly component from 'OrderDate' and groups the results by 'CustomerID' and the computed 'Month' to calculate the count of orders for each customer per month.",
            "The original query was incorrectly using OrderDate instead of ShippedDate. The corrected query uses ShippedDate to determine the day on which orders were actually shipped.",
            "The query is correct. It computes the correlation between the freight cost and the order fulfillment time by using the CORR function on the Freight column and the date difference between ShippedDate and OrderDate.",
            "The original query incorrectly uses DATE_TRUNC to filter the current quarter minus three months, which can lead to inaccurate results if not corrected. The revised query ensures the correct range for the last quarter by using DATE_TRUNC to delineate the quarter starting and ending dates.",
            "The original query attempts to find the average delay for late orders but mistakenly uses DATE_TRUNC to calculate the past year. The corrected query uses (CURRENT_DATE - INTERVAL '1 year') to correctly denote one year back from today.",
            "The SQL query correctly identifies the employee who has handled the most orders. The query uses COUNT() to tally the number of orders per employee and sorts them in descending order to find the employee with the highest count.",
            "The SQL query correctly calculates the percentage of orders with a missing ShippedDate by dividing the count of such orders by the total count of orders."
        ],
        "difficulty": [
            "easy",
            "easy",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "advanced"
        ]
    },
    "Inventory Management": {
        "questions": [
            "What is the current stock level of each product?",
            "Which products need to be reordered based on the current stock and reorder level?",
            "What is the average unit price of all products in the inventory?",
            "How many products have been discontinued?",
            "Calculate the Inventory Turnover Ratio for the last month.",
            "What is the total sales revenue generated from each product?",
            "Which product has the highest number of units on order?",
            "What is the total discount provided for each order?",
            "List the products with a unit price higher than the average unit price.",
            "Which supplier provides the most number of unique products?",
            "What is the performance of each product over the last quarter?",
            "How many products have a stock level below 10 units?",
            "Identify the top 5 products with the highest sales quantity.",
            "What is the total value of inventory currently in stock?",
            "Which category of products generated the highest revenue?",
            "What is the average reorder level for each product category?",
            "How many products have never been ordered?",
            "Determine the product with the highest discount applied on average.",
            "What is the ratio of discontinued products to the total product range?",
            "Which product categories are sourcing products from more than one supplier?",
            "What is the current stock value for each product?",
            "Which products are below their reorder level?",
            "What is the average discount offered on products?",
            "Identify the top 5 products by total sales revenue.",
            "What is the inventory turnover ratio for the current month?",
            "Which suppliers have the most products in stock?",
            "What is the total sales revenue per category?",
            "Which products have zero units on order?",
            "Calculate the total quantity sold for each product in the last year.",
            "What is the performance rating of each product based on sales quantity?",
            "Which products are frequently ordered with a discount?",
            "How many units of each product are currently on order?",
            "Identify the products with the highest unit price.",
            "Calculate the average units in stock for each category.",
            "What is the total revenue generated by discontinued products?",
            "How does the reorder level compare to the average monthly sales for each product?",
            "Which products have the highest inventory levels relative to sales?",
            "What is the most frequently ordered product in the last quarter?",
            "Determine the monthly trend in inventory turnover ratio.",
            "What is the total inventory value of all products currently in stock?",
            "Which products are currently below their reorder level?",
            "Identify the top 5 best-selling products based on total quantity sold.",
            "Find the average discount applied to the orders for each product category.",
            "Determine the current stock levels for each supplier's products.",
            "List all discontinued products and their last order date.",
            "What is the revenue generated by each product in the last quarter?",
            "Identify products that have not been ordered in the last six months.",
            "Calculate the average number of units in stock for each product category.",
            "Find the most common quantity per unit among all products.",
            "Which products have seen an increase in orders compared to the previous month?",
            "Categorize products into high, medium, and low performers based on sales volume.",
            "Determine the average order size for each supplier.",
            "Find the product with the highest unit price that is not discontinued.",
            "Identify the top 3 products by revenue in each category for the current year.",
            "Calculate the monthly increase or decrease in inventory levels for each product.",
            "Which products have the highest amount of units on order compared to units in stock?",
            "Determine which suppliers provide the widest variety of products.",
            "Identify products with the most frequent reorder occurrences.",
            "What is the total inventory value for each supplier?",
            "Which products have stock levels below their reorder point?",
            "What is the average discount applied to orders for each product?",
            "Find the top 5 products by sales volume.",
            "Which categories have the highest average inventory turnover ratio?",
            "List the products that have never been ordered.",
            "What is the monthly sales trend for each product?",
            "How many discontinued products are in stock?",
            "What is the total number of units ordered for each category?",
            "Calculate the revenue generated by each product after discount.",
            "What products have more units on order than in stock?",
            "Identify products with a high inventory turnover ratio.",
            "What is the average unit price of products in each category?",
            "Find the top 5 suppliers by order volume.",
            "Determine the percentage of products discontinued.",
            "Which products have the largest discrepancy between their ordered and in-stock quantities?",
            "Calculate the total discount given for each order.",
            "What is the monthly inventory turnover ratio for all products?",
            "How many products have both low stock and low reorder levels?",
            "Which product categories have the most products discontinued?"
        ],
        "sql_queries": [
            "SELECT ProductID, ProductName, UnitsInStock FROM products;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
            "SELECT AVG(UnitPrice) AS AverageUnitPrice FROM products;",
            "SELECT COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1;",
            "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].OrderID IN (SELECT DISTINCT OrderID FROM SomeOrderTable WHERE ORDERDATE BETWEEN '2023-09-01' AND '2023-09-30');",
            "SELECT ProductID, SUM(Quantity * UnitPrice) AS TotalRevenue FROM [Order Details] GROUP BY ProductID;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsOnOrder = (SELECT MAX(UnitsOnOrder) FROM products);",
            "SELECT OrderID, SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details] GROUP BY OrderID;",
            "SELECT ProductID, ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
            "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1;",
            "SELECT p.ProductID, SUM(od.Quantity) AS Performance FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate >= DATEADD(QUARTER, -1, CURRENT_DATE) AND od.OrderDate < CURRENT_DATE GROUP BY p.ProductID HAVING SUM(od.Quantity) > 0;",
            "SELECT COUNT(*) FROM products WHERE UnitsInStock < 10;",
            "SELECT ProductID, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 5;",
            "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
            "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID ORDER BY TotalRevenue DESC LIMIT 1;",
            "SELECT CategoryID, AVG(ReorderLevel) AS AverageReorderLevel FROM products GROUP BY CategoryID;",
            "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
            "SELECT ProductID, AVG(Discount) AS AverageDiscount FROM [Order Details] GROUP BY ProductID ORDER BY AverageDiscount DESC LIMIT 1;",
            "SELECT COUNT(*) * 1.0 / (SELECT COUNT(*) FROM products) AS DiscontinuedRatio FROM products WHERE Discontinued = 1;",
            "SELECT CategoryID FROM products GROUP BY CategoryID HAVING COUNT(DISTINCT SupplierID) > 1;",
            "SELECT ProductID, (UnitPrice * UnitsInStock) AS StockValue FROM products;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
            "SELECT ProductID, SUM(\"Order Details\".Quantity * \"Order Details\".UnitPrice) AS TotalSales FROM \"Order Details\" GROUP BY ProductID ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT EXTRACT(MONTH FROM CURRENT_DATE) AS Month, (SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock)) AS InventoryTurnoverRatio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE EXTRACT(MONTH FROM CURRENT_DATE) = EXTRACT(MONTH FROM CURRENT_DATE) GROUP BY Month;",
            "SELECT SupplierID, SUM(UnitsInStock) AS TotalUnitsInStock FROM products GROUP BY SupplierID ORDER BY TotalUnitsInStock DESC;",
            "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSalesRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY CategoryID;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsOnOrder = 0;",
            "SELECT [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalQuantitySold FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY [Order Details].ProductID;",
            "SELECT ProductID, SUM(Quantity) AS TotalSales FROM [Order Details] GROUP BY ProductID;",
            "SELECT ProductID, COUNT(*) AS DiscountedOrders FROM [Order Details] WHERE Discount > 0 GROUP BY ProductID ORDER BY DiscountedOrders DESC;",
            "SELECT ProductID, UnitsOnOrder FROM products;",
            "SELECT ProductID, UnitPrice FROM products ORDER BY UnitPrice DESC LIMIT 10;",
            "SELECT CategoryID, AVG(UnitsInStock) AS AverageUnitsInStock FROM products GROUP BY CategoryID;",
            "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1;",
            "SELECT products.ProductID, (SUM([Order Details].Quantity) / 12) AS AverageMonthlySales, products.ReorderLevel FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID;",
            "SELECT products.ProductID, products.ProductName, (products.UnitsInStock / SUM([Order Details].Quantity)) AS InventoryToSalesRatio FROM products JOIN [Order Details] ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID, products.ProductName ORDER BY InventoryToSalesRatio DESC;",
            "SELECT ProductID, COUNT(OrderID) AS OrderCount FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) AND QUARTER(orders.OrderDate) = QUARTER(CURRENT_DATE) - 1 GROUP BY ProductID ORDER BY OrderCount DESC LIMIT 1;",
            "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) AS MonthlyInventoryTurnoverRatio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY EXTRACT(MONTH FROM OrderDate);",
            "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 0;",
            "SELECT ProductID, SUM(Quantity) AS TotalQuantitySold FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantitySold DESC LIMIT 5;",
            "SELECT categories.CategoryID, AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID;",
            "SELECT suppliers.SupplierID, SUM(products.UnitsInStock) AS TotalStock FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID;",
            "SELECT products.ProductID, products.ProductName, MAX(orders.OrderDate) AS LastOrderDate FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID LEFT JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE products.Discontinued = 1 GROUP BY products.ProductID, products.ProductName;",
            "SELECT [Order Details].ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS Revenue FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN DATEADD(quarter, -1, CURRENT_DATE) AND CURRENT_DATE GROUP BY [Order Details].ProductID;",
            "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details] WHERE OrderDate >= DATEADD(month, -6, CURRENT_DATE));",
            "SELECT categories.CategoryID, AVG(products.UnitsInStock) AS AverageUnitsInStock FROM products JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID;",
            "SELECT QuantityPerUnit, COUNT(*) AS Frequency FROM products GROUP BY QuantityPerUnit ORDER BY Frequency DESC LIMIT 1;",
            "SELECT p.ProductID, p.ProductName FROM (SELECT ProductID, SUM(Quantity) AS CurrentMonthSales FROM [Order Details] WHERE OrderDate BETWEEN DATEADD(month, -1, CAST(GETDATE() AS DATE)) AND CAST(GETDATE() AS DATE) GROUP BY ProductID) AS current JOIN (SELECT ProductID, SUM(Quantity) AS PrevMonthSales FROM [Order Details] WHERE OrderDate BETWEEN DATEADD(month, -2, CAST(GETDATE() AS DATE)) AND DATEADD(month, -1, CAST(GETDATE() AS DATE)) GROUP BY ProductID) AS previous ON current.ProductID = previous.ProductID JOIN products p ON current.ProductID = p.ProductID WHERE CurrentMonthSales > PrevMonthSales;",
            "SELECT ProductID, CASE WHEN SUM(Quantity) > 100 THEN 'High' WHEN SUM(Quantity) > 50 THEN 'Medium' ELSE 'Low' END AS PerformanceLevel FROM [Order Details] GROUP BY ProductID;",
            "SELECT products.SupplierID, AVG([Order Details].Quantity) AS AverageOrderSize FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID;",
            "SELECT ProductID, ProductName FROM products WHERE Discontinued = 0 ORDER BY UnitPrice DESC LIMIT 1;",
            "SELECT categories.CategoryID, products.ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity) AS Revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID WHERE YEAR([Order Details].OrderDate) = YEAR(CURRENT_DATE) GROUP BY categories.CategoryID, products.ProductID ORDER BY categories.CategoryID, Revenue DESC;",
            "SELECT ProductID, EXTRACT(MONTH FROM OrderDate) AS Month, SUM(Quantity) AS TotalOrdered FROM [Order Details] GROUP BY ProductID, EXTRACT(MONTH FROM OrderDate);",
            "SELECT ProductID, ProductName, UnitsOnOrder, UnitsInStock FROM products WHERE UnitsOnOrder > UnitsInStock;",
            "SELECT suppliers.SupplierID, COUNT(DISTINCT products.ProductID) AS NumberOfProducts FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY NumberOfProducts DESC;",
            "SELECT ProductID, COUNT(*) AS ReorderCount FROM products WHERE UnitsOnOrder > 0 GROUP BY ProductID ORDER BY ReorderCount DESC;",
            "SELECT SupplierID, SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products GROUP BY SupplierID;",
            "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
            "SELECT ProductID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY ProductID;",
            "SELECT ProductID, SUM(Quantity) AS TotalSales FROM [Order Details] GROUP BY ProductID ORDER BY TotalSales DESC LIMIT 5;",
            "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnover FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID ORDER BY InventoryTurnover DESC;",
            "SELECT ProductName FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].ProductID IS NULL;",
            "SELECT ProductID, EXTRACT(MONTH FROM orders.OrderDate) AS Month, SUM([Order Details].Quantity) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ProductID, EXTRACT(MONTH FROM orders.OrderDate);",
            "SELECT COUNT(*) AS DiscontinuedInStock FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
            "SELECT CategoryID, SUM(Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID;",
            "SELECT ProductID, SUM(Quantity * UnitPrice * (1 - Discount)) AS Revenue FROM [Order Details] GROUP BY ProductID;",
            "SELECT ProductID, ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;",
            "SELECT ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnover FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductID HAVING InventoryTurnover > X;",
            "SELECT CategoryID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY CategoryID;",
            "SELECT SupplierID, SUM([Order Details].Quantity) AS OrderVolume FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID ORDER BY OrderVolume DESC LIMIT 5;",
            "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM products) AS DiscontinuedPercentage FROM products WHERE Discontinued = 1;",
            "SELECT ProductID, ABS(UnitsOnOrder - UnitsInStock) AS Discrepancy FROM products ORDER BY Discrepancy DESC LIMIT X;",
            "SELECT OrderID, SUM(Quantity * UnitPrice * Discount) AS TotalDiscount FROM [Order Details] GROUP BY OrderID;",
            "SELECT EXTRACT(MONTH FROM orders.OrderDate) AS Month, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnover FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY EXTRACT(MONTH FROM orders.OrderDate);",
            "SELECT COUNT(*) FROM products WHERE UnitsInStock < Y AND ReorderLevel < Z;",
            "SELECT CategoryID, COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1 GROUP BY CategoryID ORDER BY DiscontinuedProducts DESC;"
        ],
        "reviews": [
            "The SQL query is correct. It correctly selects the ProductID, ProductName, and UnitsInStock columns from the products table to show the current stock level of each product.",
            "The SQL query correctly identifies products that need to be reordered by checking if the units in stock are less than or equal to the reorder level. The syntax and logic are accurate. No corrections are needed.",
            "The SQL query is correct. It calculates the average UnitPrice from the products table, which answers the question.",
            "The SQL query is correct. It accurately counts the number of products where the Discontinued field is set to 1.",
            "The SQL query is mostly correct but it is missing the inclusion of the Order Details table in the WHERE clause. It assumes an 'OrderDate' column exists in the referenced SomeOrderTable, which needs clarification or proper table reference. Additionally, ensure the date is correctly formatted as 'YYYY-MM-DD'. The query correctly calculates the Ratio, but the WHERE clause might need adjustment if SomeOrderTable is not defined in the schema. If the order date should be within the 'Order Details' table, you need to ensure the correct table is being referenced. Here's a revised query assuming correct reference:\n\nSELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) \nFROM products \nINNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID \nWHERE [Order Details].OrderID IN (SELECT DISTINCT OrderID FROM Orders WHERE OrderDate BETWEEN '2023-09-01' AND '2023-09-30');",
            "The query correctly calculates the total sales revenue for each product by multiplying the quantity by the unit price and grouping by ProductID. The schema and business metrics definitions confirm this logic.",
            "The SQL query is correct as it accurately selects the product with the highest number of units on order by comparing each product's UnitsOnOrder to the maximum UnitsOnOrder value in the products table.",
            "The SQL query is correct and accurately calculates the total discount for each order by multiplying the unit price, quantity, and discount for each product in the order, then summing it for each OrderID.",
            "The SQL query is correct. It accurately retrieves products with a unit price higher than the average unit price by comparing each product's unit price within the 'products' table.",
            "The SQL query correctly answers the question by counting the distinct ProductID for each SupplierID and ordering the result to find the supplier with the most unique products. The use of LIMIT 1 ensures only the top supplier is returned.",
            "The original query did not consider the timeframe of the last quarter. Added a JOIN to the products table to ensure correct grouping and included a WHERE clause to filter orders from the last quarter. Assumed the existence of OrderDate in the [Order Details] table to filter by date.",
            "The original query lists the product IDs and names, but the question asks for the count of such products. Therefore, the query should use COUNT(*) to return the number of products with a stock level below 10 units.",
            "The query correctly identifies the top 5 products with the highest sales quantity by summing the quantities from '[Order Details]' and ordering them in descending order. It uses LIMIT 5 to select the top 5, which is appropriate for ANSI SQL.",
            "The SQL query correctly calculates the total value of inventory in stock by multiplying the unit price with units in stock and summing the results for all products.",
            "The SQL query is correct. It calculates the total revenue for each category by joining the products table and the [Order Details] table on ProductID, grouping the results by CategoryID, and ordering by TotalRevenue in descending order to find the highest revenue category.",
            "The SQL query is correct. It retrieves the average reorder level for each product category by grouping the products by CategoryID and calculating the average of the ReorderLevel.",
            "The query correctly identifies products that have never been ordered by checking for ProductIDs in the products table that are not present in the 'Order Details' table. The logic and SQL syntax are correct. No changes needed.",
            "The SQL query is correct. It calculates the average discount for each product by grouping the data based on ProductID and then orders the result to find the product with the highest average discount.",
            "The SQL query correctly calculates the ratio of discontinued products to the total product range by counting the discontinued products and dividing by the total number of products. The usage of COUNT(*) and subquery is appropriate for achieving this calculation. Therefore, the query is correct.",
            "The SQL query correctly identifies categories with products sourced from more than one supplier by grouping the products by CategoryID and checking if the number of distinct SupplierIDs is greater than one.",
            "The SQL query correctly calculates the current stock value for each product by multiplying the UnitPrice with UnitsInStock. The schema definitions support these columns and the logic is consistent with the business question.",
            "The SQL query is correct. It selects ProductID and ProductName from the products table where UnitsInStock is less than ReorderLevel, accurately answering the business question.",
            "The SQL query is correct for the question asked. It calculates the average of the Discount column from the [Order Details] table, which aligns with the business question.",
            "The SQL query is correct, but table names with spaces should be enclosed in double quotes to follow the ANSI SQL standard.",
            "The query is mostly correct. However, to calculate the inventory turnover ratio for the current month, we should ensure that we're only considering the current month's orders. This means adding a condition to filter orders to those placed in the current month. However, the current schema doesn't have a date column in the '[Order Details]' table to filter by month. Assuming there was a date column to filter, the query formatting should correctly reflect this filtering. Nonetheless, since filtering logically in the schema provided is not possible due to the missing date field, the query contains a logical error.",
            "The SQL query correctly addresses the business question by grouping the products by SupplierID, summing the UnitsInStock for each supplier, and ordering the results in descending order to show which suppliers have the most units in stock. No correction is needed.",
            "The query correctly calculates the total sales revenue per category. It uses a JOIN between the 'Order Details' and 'products' tables on ProductID and correctly groups the results by CategoryID. It accurately sums the revenue by multiplying quantity and unit price.",
            "The SQL query correctly selects products with zero units on order by checking 'UnitsOnOrder = 0' in the 'products' table. The query aligns with the question and database schema.",
            "The original query missed joining the [Order Details] table with the orders table to access the OrderDate.",
            "The SQL query correctly calculates the total sales quantity for each product based on the given schema. It correctly uses the 'SUM(Quantity)' to find the total sales and groups by 'ProductID'. The query aligns with the business question and schema specifications. No changes are needed.",
            "The SQL query correctly identifies products that have been ordered with a discount by filtering for `Discount > 0`. It groups the results by `ProductID` and counts the number of discounted orders, ordering them in descending order. The query is accurate and aligned with the business question.",
            "The SQL query correctly retrieves the number of units on order for each product by selecting the ProductID and UnitsOnOrder columns from the products table. The query is accurate for the business question.",
            "The SQL query is correct. It selects the ProductID and UnitPrice from the products table, orders the results by UnitPrice in descending order, and limits the output to the top 10 products with the highest UnitPrice.",
            "The SQL query is correct. It selects the CategoryID and calculates the average of UnitsInStock, grouping by CategoryID, which aligns perfectly with the business question.",
            "Remove GROUP BY ProductID, as we are interested in total revenue, not revenue by each product.",
            "The query is mostly correct, but there's a logical assumption that sales data is for a full year to derive the average monthly sales. Ensure that the data covers that period, or adjust the divisor. Additionally, checking whether `products.ProductID` is the intended level of granularity is important. Assuming monthly data, the query should work as expected.",
            "The original query does not include the product name, which can be helpful for understanding the results. Additionally, the query should group by both ProductID and ProductName for clarity, as ProductName is a non-aggregated attribute. The corrected query includes these adjustments.",
            "The SQL query needed correction to include an INNER JOIN with the 'orders' table to reference the 'OrderDate' field, which wasn't initially accounted for.",
            "The query is incorrect because it is missing the OrderDate column in the [Order Details] table assumption, which is necessary to determine the monthly trend. The corrected query includes the EXTRACT function for proper grouping by month and handles potential division by zero with the NULLIF function.",
            "The query correctly calculates the total inventory value by multiplying UnitPrice and UnitsInStock for each product and summing them up. No corrections are needed.",
            "The SQL query is correct. It accurately selects products that have UnitsInStock less than ReorderLevel and are not discontinued (Discontinued = 0).",
            "The SQL query correctly identifies the top 5 best-selling products by summing the quantity sold for each ProductID and ordering the results in descending order of the total quantity before limiting the output to 5. The query is correct and follows the ANSI SQL standard.",
            "The query is mostly correct, but the schema does not actually define a 'categories' table. If such a table is present with a 'CategoryID', the query is fine. Otherwise, verify the existence and structure of the 'categories' table within your database.",
            "The SQL query assumes there is a 'suppliers' table, which is not defined in the schema provided. To correct it, ensure the 'suppliers' table exists and the query correctly joins on available tables. Additionally, the initial query syntax is correct if the 'suppliers' table is present.",
            "The original query is missing a join with the 'orders' table to access the 'OrderDate'. The corrected query includes this join to accurately retrieve the last order date.",
            "The original query is incorrect because it does not join with the 'orders' table where the 'OrderDate' column resides. The corrected version includes an INNER JOIN with the 'orders' table and uses 'CURRENT_DATE' instead of 'GETDATE()' for ANSI SQL compliance.",
            "The original query uses GETDATE(), which is a SQL Server function. The ANSI SQL standard doesn't provide GETDATE(); instead, we can use CURRENT_DATE to get the current date. The rest of the query logic is correct.",
            "The SQL query references a 'categories' table, but it is not part of the provided schema. If assuming a missing 'categories' table with a structure containing 'CategoryID', the query is correct. Otherwise, the query cannot be evaluated with the provided schema.",
            "The SQL query correctly finds the most common 'QuantityPerUnit' by grouping all products, counting occurrences, and ordering by frequency in descending order. The LIMIT 1 ensures only the most common quantity is returned. No changes needed.",
            "The original query omitted the JOIN with the 'products' table to retrieve 'ProductName'. Additionally, GETDATE() should be cast to DATE to avoid time issues. The corrected query includes these fixes.",
            "The SQL query correctly categorizes products into performance levels based on sales volume, but it lacks a join with the products table. It should include a join to provide product names or additional product information if needed.",
            "Corrected the SQL query by removing the reference to the 'suppliers' table since it is not part of the provided schema. The 'SupplierID' is directly available through the 'products' table.",
            "The SQL query is correct. It selects the product ID and name for the product with the highest unit price that is not discontinued.",
            "The original query attempts to find the top 3 products overall, not per category. Instead of using ORDER BY Revenue DESC LIMIT 3, it should use a window function to rank products within each category and then filter for the top 3 per category. Also, ensure that OrderDate is available in the [Order Details] table, as it's not defined in the given schema.",
            "The original query attempts to determine the monthly order quantities per product, but it doesn't directly address inventory level changes. To evaluate inventory changes, we would likely need to reference changes in stock levels (UnitsInStock and UnitsOnOrder in the 'products' table) over time, potentially involving previous and current month's inventory data, which isn't directly addressed in the provided schema. The SQL needs to reflect calculations involving changes in the 'UnitsInStock' or calculate monthly stock level changes.",
            "The SQL query accurately selects products where the units on order exceed the units in stock, which aligns with the business question. No corrections needed.",
            "The SQL query references a 'suppliers' table that doesn't exist in the provided schema. To correct this, ensure the 'suppliers' table exists in schema or adjust the query to fit the available schema.",
            "The original query calculates reorder occurrences from '[Order Details]', but reorders relate to 'UnitsOnOrder' in 'products'. Adjusted query to use 'products' table.",
            "The SQL query is correct. It calculates the total inventory value for each supplier by multiplying the UnitPrice by UnitsInStock and summarizing these values grouped by SupplierID.",
            "The query is correct. It appropriately selects products with UnitsInStock below the ReorderLevel. No changes needed.",
            "The provided SQL query is correct. It selects the ProductID and calculates the average discount for each product, grouping by ProductID to ensure the average is computed per product.",
            "The SQL query correctly calculates the total sales volume for each product and retrieves the top 5 products. The use of GROUP BY, ORDER BY, and LIMIT is appropriate for the question.",
            "The query is mostly correct, but there is an assumption that the UnitsInStock field is always available for average calculation without considering time or data per month as specified by the granularity. Additionally, proper handling of zeros in inventory to avoid division by zero should be considered. Ensure data filtering to reflect accurate period analysis is also needed for the monthly granularity.",
            "The query correctly identifies products that have never been ordered by performing a LEFT JOIN and checking for NULLs in the [Order Details] table. No changes are necessary.",
            "The original query is missing the reference to the orders table for the OrderDate column. I added it in the SELECT and GROUP BY clauses for clarity.",
            "The SQL query is correct. It accurately counts the number of discontinued products that have units in stock by filtering with 'Discontinued = 1' and 'UnitsInStock > 0'.",
            "The SQL query is correct. It correctly joins the 'products' and '[Order Details]' tables on 'ProductID' and sums the 'Quantity' grouped by 'CategoryID', which matches the business question.",
            "The SQL query is correct. It calculates the revenue generated by each product after discount by grouping the orders based on ProductID and then aggregating the revenue using the formula Quantity * UnitPrice * (1 - Discount). The query addresses the business question accurately.",
            "The original query is correct in logic, but it would be more informative to also select the ProductName for clarity.",
            "The query is mostly correct, but it should use the alias for SUM and AVG aggregated values separately before computing the division, which can help with clarity in more complex calculations. Also, 'X' should be replaced with an actual numeric threshold for high inventory turnover. Here is the corrected query:\n\nSELECT products.ProductID, \n(SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0)) AS InventoryTurnover\nFROM products\nJOIN [Order Details] ON products.ProductID = [Order Details].ProductID\nGROUP BY products.ProductID\nHAVING InventoryTurnover > {threshold};\n\nMake sure to replace {threshold} with the specific numeric value for 'high' inventory turnover. The NULLIF function helps prevent division by zero errors.",
            "The query is correct and accurately calculates the average unit price of products in each category.",
            "The original query incorrectly uses COUNT(ProductID) to calculate order volume. It should use SUM([Order Details].Quantity) to calculate the total quantity ordered for each SupplierID.",
            "The SQL query is correct. It calculates the percentage of products that are discontinued by dividing the count of discontinued products by the total count of products and multiplying by 100.",
            "The SQL query correctly calculates the discrepancy between ordered and in-stock quantities using the ABS function and orders the results in descending order by Discrepancy. However, 'LIMIT X' should be replaced with an appropriate number, such as 'LIMIT 10', to specify the number of results to return.",
            "The SQL query correctly calculates the total discount by multiplying Quantity, UnitPrice, and Discount, then summing it for each OrderID. No corrections needed.",
            "The original query was missing a join between '[Order Details]' and 'products'. I added 'JOIN products ON [Order Details].ProductID = products.ProductID' to ensure the query includes the necessary 'UnitsInStock' from the 'products' table.",
            "The query is syntactically correct but it's missing the definition for what 'low' means in terms of stock (Y) and reorder level (Z). Ensure that Y and Z are replaced with actual numerical thresholds for low stock and low reorder levels.",
            "The SQL query is correct. It selects the CategoryID and counts the number of discontinued products, grouping by CategoryID. It also orders the results in descending order of the count, which satisfies the business question requirements."
        ],
        "difficulty": [
            "easy",
            "easy",
            "easy",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "medium",
            "easy",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "easy",
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "easy",
            "medium",
            "medium",
            "advanced",
            "medium",
            "advanced",
            "medium",
            "advanced"
        ]
    },
    "cross_scenario": {
        "questions": [
            "What is the total sales revenue for the year 2023?",
            "Calculate the average order value for each month in 2023.",
            "Identify the top 5 customers based on lifetime value.",
            "Which products have the highest sales performance in each month?",
            "List the total sales generated by each employee in 2023.",
            "What is the average time taken to fulfill orders each month?",
            "Determine the customer retention rate for the first quarter of 2023.",
            "What is the average supplier lead time for each supplier?",
            "Calculate the inventory turnover ratio for each product category.",
            "Find the average shipping cost per order for each shipping method.",
            "What is the on-time delivery rate for each month in 2023?",
            "Which employees have the highest sales impact in their respective territories?",
            "Identify the product with the highest inventory on order.",
            "Which supplier offers the fastest delivery time on average?",
            "What is the trend in monthly sales revenue for the past two years?",
            "Calculate the average discount per order for each month.",
            "Determine the top 3 products by sales volume in 2023.",
            "Identify the most frequently ordered product by customers in 2023.",
            "Calculate the total freight cost incurred for orders delivered by each shipping company.",
            "What is the average number of units ordered per product in 2023?",
            "What is the total sales revenue generated in the first quarter of 2023?",
            "Which product has the highest sales volume in 2023?",
            "What is the average order value for the month of January 2023?",
            "Who are the top 5 customers by revenue generated in 2023?",
            "Which employee has the highest sales performance in January 2023?",
            "What is the average time taken to fulfill an order in the first half of 2023?",
            "What percentage of orders were delivered on time in 2023?",
            "What is the customer retention rate in the second quarter of 2023?",
            "Which supplier has the shortest lead time for deliveries in 2023?",
            "What is the most frequent product category ordered in 2023?",
            "What is the inventory turnover ratio for each product in the first quarter of 2023?",
            "What is the shipping cost per order in March 2023?",
            "How many distinct customers have placed orders in the year 2023?",
            "What are the top 3 cities with the highest order volume in 2023?",
            "What is the total number of units sold by each product in 2023?",
            "Which country has the highest number of customers?",
            "What is the total discount given on orders in February 2023?",
            "Which suppliers provide discontinued products?",
            "What is the revenue contribution of each region in 2023?",
            "What is the average salary of employees and how does it impact their sales performance?",
            "What is the total sales revenue generated in 2023?",
            "Which product generated the highest sales this year?",
            "How many unique customers made purchases last month?",
            "What is the average order fulfillment time by month?",
            "Which supplier has the shortest lead time?",
            "How many orders were delivered on time last quarter?",
            "What is the total sales revenue for each employee?",
            "What is the average shipping cost per order by shipping company?",
            "List the top 5 customers by lifetime value.",
            "What is the inventory turnover ratio for electronic products?",
            "Which product categories have the best sales performance?",
            "What percentage of customers placed repeat orders this year?",
            "Calculate the total discounts given on orders last year.",
            "Determine the employee with the highest average order value.",
            "What is the most common shipping method used by customers?",
            "How does average order value vary by customer country?",
            "Identify the month with the highest product returns.",
            "Calculate the employee turnover rate.",
            "What is the sales performance in different sales territories?",
            "How does the sales performance compare before and after a major product launch?",
            "What is the total sales revenue for each month in 2023?",
            "Which products have the highest sales performance based on quantity sold in the last month?",
            "What is the average order value for each customer?",
            "Identify customers with the highest lifetime value.",
            "How do employee sales compare on a monthly basis?",
            "What is the average order fulfillment time each month?",
            "How does the customer retention rate change over the past year?",
            "Which supplier has the quickest lead time for product delivery?",
            "What is the total shipping cost per shipper in 2023?",
            "Determine the on-time delivery rate for each month.",
            "List the top-performing products based on inventory turnover ratio.",
            "How does the average salary of employees impact their total sales?",
            "What are the regions with the highest order count?",
            "Which months have the highest average shipping costs?",
            "Identify the most common shipping method for orders.",
            "What is the correlation between freight cost and product discount given?",
            "Who are the top 10 customers by total sales?",
            "Determine the average number of products per order.",
            "Analyze the sales trend per product category over the last year.",
            "Which employees have the highest sales in each department?"
        ],
        "sql_queries": [
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM')",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC LIMIT 5",
            "SELECT products.ProductID, TO_CHAR(orders.OrderDate, 'YYYY-MM') AS month, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductID, TO_CHAR(orders.OrderDate, 'YYYY-MM')",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID",
            "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM')",
            "SELECT ((SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-01-01')) AS customer_retention_rate",
            "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.SupplierID",
            "SELECT categories.CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID",
            "SELECT orders.ShipVia, AVG(orders.Freight) AS avg_shipping_cost FROM orders GROUP BY orders.ShipVia",
            "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS month, COUNT(orders.OrderID) FILTER (WHERE orders.ShippedDate <= orders.RequiredDate) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM')",
            "SELECT employees.EmployeeID, territories.TerritoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales_impact FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY employees.EmployeeID, territories.TerritoryID",
            "SELECT ProductID, UnitsOnOrder FROM products ORDER BY UnitsOnOrder DESC LIMIT 1",
            "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS delivery_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY delivery_time ASC LIMIT 1",
            "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS monthly_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2023-12-31' GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM') ORDER BY month",
            "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS month, AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM')",
            "SELECT [Order Details].ProductID, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY [Order Details].ProductID ORDER BY sales_volume DESC LIMIT 3",
            "SELECT [Order Details].ProductID, COUNT([Order Details].OrderID) AS frequency FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY [Order Details].ProductID ORDER BY frequency DESC LIMIT 1",
            "SELECT shippers.CompanyName, SUM(orders.Freight) AS total_freight_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
            "SELECT [Order Details].ProductID, AVG([Order Details].Quantity) AS avg_units_ordered FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY [Order Details].ProductID",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductName ORDER BY sales_volume DESC LIMIT 1",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31'",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.CustomerID ORDER BY revenue DESC LIMIT 5",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1",
            "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'",
            "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN orders.OrderID END) * 100.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
            "(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-04-01') AS retention_rate",
            "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.SupplierID ORDER BY avg_lead_time ASC LIMIT 1",
            "SELECT categories.CategoryName, COUNT([Order Details].ProductID) AS order_count FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY categories.CategoryName ORDER BY order_count DESC LIMIT 1;",
            "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY products.ProductID",
            "SELECT AVG(orders.Freight) AS shipping_cost_per_order FROM orders WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31'",
            "SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT orders.ShipCity, COUNT(orders.OrderID) AS order_volume FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY orders.ShipCity ORDER BY order_volume DESC LIMIT 3",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_units_sold FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY products.ProductName",
            "SELECT customers.Country, COUNT(customers.CustomerID) AS number_of_customers FROM customers GROUP BY customers.Country ORDER BY number_of_customers DESC LIMIT 1",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS total_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28'",
            "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.Discontinued = 1",
            "SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN employeeTerritories ON orders.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY region.RegionDescription",
            "SELECT AVG(employees.Salary) AS avg_salary, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales, employees.EmployeeID FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS product_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductName ORDER BY product_sales DESC LIMIT 1",
            "SELECT COUNT(DISTINCT orders.CustomerID) AS unique_customers FROM orders WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH)",
            "SELECT EXTRACT(YEAR FROM orders.OrderDate) AS year, EXTRACT(MONTH FROM orders.OrderDate) AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY year, month",
            "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID ORDER BY avg_lead_time ASC LIMIT 1",
            "SELECT COUNT(orders.OrderID) AS on_time_deliveries FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND QUARTER(orders.OrderDate) = QUARTER(CURRENT_DATE - INTERVAL 3 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 3 MONTH);",
            "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID",
            "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY lifetime_value DESC LIMIT 5",
            "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID WHERE categories.CategoryName LIKE '%Electronics%' GROUP BY categories.CategoryName",
            "SELECT categories.CategoryName, SUM([Order Details].Quantity) AS quantity_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY quantity_sold DESC",
            "SELECT (COUNT(DISTINCT c1.CustomerID) / COUNT(DISTINCT c2.CustomerID)) * 100 AS retention_rate FROM orders c1 JOIN orders c2 ON c1.CustomerID = c2.CustomerID WHERE c1.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND c2.OrderDate < '2023-01-01'",
            "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS total_discounts FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1",
            "SELECT employees.EmployeeID, AVG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID ORDER BY avg_order_value DESC LIMIT 1",
            "SELECT orders.ShipVia, COUNT(orders.OrderID) AS usage_count FROM orders GROUP BY orders.ShipVia ORDER BY usage_count DESC LIMIT 1",
            "SELECT customers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.Country",
            "SELECT EXTRACT(YEAR FROM orders.OrderDate) AS year, EXTRACT(MONTH FROM orders.OrderDate) AS month, COUNT(orders.OrderID) AS returns FROM orders WHERE orders.ShippedDate > orders.RequiredDate GROUP BY year, month ORDER BY returns DESC LIMIT 1",
            "SELECT COUNT(*) / (SELECT COUNT(*) FROM employees WHERE employees.HireDate BETWEEN '2023-01-01' AND '2023-12-31') AS turnover_rate FROM employees WHERE employees.HireDate NOT BETWEEN '2023-01-01' AND '2023-12-31'",
            "SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employeeTerritories ON orders.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryDescription",
            "SELECT EXTRACT(YEAR FROM orders.OrderDate) AS year, EXTRACT(MONTH FROM orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY year, month ORDER BY sales DESC LIMIT 1",
            "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE EXTRACT(YEAR FROM orders.OrderDate) = 2023 GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM')",
            "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY products.ProductName ORDER BY total_quantity DESC LIMIT 5",
            "SELECT customers.CustomerID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS average_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY lifetime_value DESC LIMIT 10",
            "SELECT employees.EmployeeID, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID, DATE_FORMAT(orders.OrderDate, '%Y-%m')",
            "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, (COUNT(DISTINCT CASE WHEN OrderDate BETWEEN DATE_FORMAT(OrderDate, '%Y-%m-01') AND LAST_DAY(OrderDate) THEN CustomerID END) / NULLIF(COUNT(DISTINCT CASE WHEN OrderDate < DATE_FORMAT(OrderDate, '%Y-%m-01') THEN CustomerID END), 0)) AS retention_rate FROM orders WHERE OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE() GROUP BY month",
            "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID ORDER BY avg_lead_time ASC LIMIT 1",
            "SELECT shippers.CompanyName, SUM(orders.Freight) AS total_freight FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY shippers.CompanyName",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID) AS on_time_rate FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')",
            "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID ORDER BY turnover_ratio DESC LIMIT 5",
            "SELECT employees.EmployeeID, employees.Salary, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, employees.Salary",
            "SELECT region.RegionDescription, COUNT(orders.OrderID) AS order_count FROM orders JOIN employeeTerritories ON orders.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID GROUP BY region.RegionDescription ORDER BY order_count DESC",
            "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, AVG(Freight) AS avg_freight FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY avg_freight DESC LIMIT 3",
            "SELECT orders.ShipVia, COUNT(orders.OrderID) AS order_count, shippers.CompanyName FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY orders.ShipVia, shippers.CompanyName ORDER BY order_count DESC LIMIT 1",
            "SELECT AVG(orders.Freight) AS avg_freight, AVG([Order Details].Discount) AS avg_discount, COUNT(orders.OrderID) AS order_count FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipVia ORDER BY avg_discount DESC",
            "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY total_sales DESC LIMIT 10",
            "SELECT AVG(product_count) AS avg_product_count FROM (SELECT [Order Details].OrderID, COUNT([Order Details].ProductID) AS product_count FROM [Order Details] GROUP BY [Order Details].OrderID) AS order_product_count;",
            "SELECT categories.CategoryName, DATE_FORMAT(OrderDate, '%Y-%m') AS month, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(OrderDate) = 2023 GROUP BY categories.CategoryName, month ORDER BY total_sales DESC",
            "SELECT departments.DepartmentID, employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN departments ON employees.DepartmentID = departments.DepartmentID GROUP BY departments.DepartmentID, employees.EmployeeID ORDER BY departments.DepartmentID, total_sales DESC;"
        ],
        "reviews": [
            "The original SQL query is correct and follows the defined formula for calculating total sales revenue. The query accurately selects the total sales within the specified date range.",
            "The query is mostly correct. However, TO_CHAR is typically used in Oracle databases for date formatting. In ANSI SQL, DATE_FORMAT can be used in MySQL, FORMAT in SQL Server, or an equivalent function depending on the SQL dialect. If using a standard implementation, you need to adapt this part for your specific SQL environment.",
            "The SQL query is correct. It calculates the customer lifetime value for each customer, groups by CustomerID, sorts by lifetime value in descending order, and limits the result to the top 5 customers.",
            "The query correctly calculates the sales performance of each product for each month by summing the quantities sold, grouping by product and month. There are no issues with the current query for the business question provided.",
            "The query correctly calculates the total sales generated by each employee in 2023 by joining the necessary tables and filtering the orders within the specified date range. The GROUP BY clause ensures that sales are aggregated by employee.",
            "The SQL query correctly calculates the average order fulfillment time per month. It groups by the month extracted from the OrderDate and applies the AVG function on the difference between ShippedDate and OrderDate using DATEDIFF.",
            "The SQL query correctly calculates the customer retention rate by dividing the number of distinct customers who placed orders in the first quarter of 2023 by the number of distinct customers who placed orders before 2023.",
            "The original query incorrectly joined the orders and products tables. The correct join should be with the [Order Details] table to access both orders and products data.",
            "The SQL query is correct. It correctly calculates the inventory turnover ratio for each product category by joining the necessary tables and applying the appropriate formula. The query aggregates by CategoryID as required for the task.",
            "The SQL query correctly calculates the average shipping cost per order for each shipping method by grouping on the ShipVia column and averaging the Freight.",
            "The query is mostly correct but missing a WHERE clause to filter the orders within 2023. Adding a WHERE clause with a date range filter for 2023 is needed.",
            "The query correctly calculates the sales impact per employee per territory. However, to determine which employees have the highest sales impact in their respective territories, an additional step is needed to find the maximum sales impact per territory. Consider using a rank or subquery to filter the top performers.",
            "The SQL query is correct. It selects ProductID and UnitsOnOrder from products, orders by UnitsOnOrder in descending order, and limits the result to one, which identifies the product with the highest inventory on order.",
            "The original query had an issue with the JOIN clause. The [Order Details] table should be joined using the OrderID field first. Correct the JOIN sequence to ensure proper data linkage.",
            "The SQL query correctly calculates the monthly sales revenue for the past two years by joining the 'Order Details' and 'orders' tables, aggregating by the month in 'YYYY-MM' format, and ordering the results by month. The query focuses on the correct date range from '2022-01-01' to '2023-12-31'. Ensure that the SQL environment supports the TO_CHAR function as used here, as TO_CHAR is typically associated with Oracle SQL and may need similar functions like DATE_FORMAT in other SQL dialects such as MySQL.",
            "The query correctly calculates the average discount per order for each month, grouping by the month extracted from the order date, and is correctly filtering based on the date range specified. The use of TO_CHAR to format the date is appropriate.",
            "The query is correct. It calculates the total sales volume for each product in 2023 and orders them in descending order, returning the top 3 products.",
            "The query correctly finds the most frequently ordered product in 2023 by joining 'Order Details' with 'orders', filtering for the date range, grouping by ProductID, and ordering by count in descending order. The LIMIT 1 ensures only the top product is returned. The query is correct.",
            "The provided SQL query correctly calculates the total freight cost by grouping by orders.ShipVia, but we should join with the shippers table to show the shipping company's name instead of the ID.",
            "The query is correct. It calculates the average number of units ordered per product in 2023 by joining the '[Order Details]' and 'orders' tables, filtering for orders in the specified date range, and then grouping by ProductID.",
            "The SQL query correctly calculates the total sales revenue for the first quarter of 2023 by summing up the revenue from the Order Details and Orders tables, considering the discount. The date range is properly set to cover January to March 2023.",
            "The original query does not filter for the year 2023. Added a join with the orders table and a date filter to ensure only 2023 orders are considered.",
            "The SQL query correctly calculates the average order value for January 2023 by summing the order values and dividing by the count of distinct orders within the specified date range.",
            "The original query did not include a filter for the year 2023. I added a WHERE clause to filter orders within the year 2023.",
            "The SQL query is correct. It joins the [Order Details], orders, and employees tables to calculate the total sales for each employee. It filters the results for orders made in January 2023 and orders the employees by sales in descending order, finally limiting the results to the top employee.",
            "The SQL query accurately calculates the average fulfillment time for orders placed in the first half of 2023 using the correct date range.",
            "The original query used `COUNT()` incorrectly with a condition. It has been corrected by using `COUNT(CASE WHEN ...)` to properly filter and count on-time orders for the specified date range.",
            "The SQL query is correct. It calculates the customer retention rate for Q2 2023 by dividing the number of distinct customers who made orders in Q2 2023 by the number of distinct customers who made orders before Q2 2023.",
            "The original query incorrectly referenced the join between orders and products. The correct join should involve the [Order Details] table to connect orders and products. Additionally, a WHERE clause was added to filter results for the year 2023.",
            "The original query did not filter the orders based on the year 2023. Adding a JOIN with the orders table and including a WHERE clause to filter the OrderDate between '2023-01-01' and '2023-12-31' corrects this mistake.",
            "The original query was missing a JOIN with the orders table, which is necessary to filter by OrderDate. The corrected query includes this JOIN.",
            "The SQL query correctly calculates the average shipping cost per order for March 2023. It filters the orders by the OrderDate within the specified range and calculates the average Freight value. No corrections are needed.",
            "The query is correct. It counts the distinct CustomerID values from the orders table where the OrderDate falls within the year 2023, which accurately answers the business question.",
            "The original query was missing a date filter for 2023. The corrected query includes a WHERE clause to limit the results to orders placed in 2023.",
            "The original query is missing a join with the orders table and should include a WHERE clause for filtering orders from 2023.",
            "The SQL query is correct. It selects the country with the highest number of customers by counting customers per country, grouping by country, ordering by the count in descending order, and limiting the result to one record.",
            "The SQL query correctly calculates the total discount by multiplying the unit price, quantity, and discount rate for each order detail within February 2023. The query is accurate and matches the business question.",
            "The SQL query correctly identifies suppliers that provide discontinued products by joining the 'suppliers' and 'products' tables on 'SupplierID' and filtering where 'products.Discontinued' equals 1. No corrections are needed.",
            "The original query incorrectly joined 'customers' with 'territories'. The join should be through 'employeeTerritories'. Also, a WHERE clause to filter the date range for 2023 is missing.",
            "The original query calculates the average salary for each employee individually, which is incorrect according to the question. Instead, calculate overall average salary and sum of sales per employee to evaluate the impact.",
            "The SQL query is correct. It calculates the total sales revenue for 2023 by summing the product of unit price, quantity, and discount for all orders within the specified date range.",
            "The original query is missing a filter for the current year. Added a JOIN with the 'orders' table and a WHERE clause to filter orders from this year.",
            "The SQL query is correctly constructed to count the number of unique customers who made purchases in the last month by filtering on the OrderDate using MONTH and YEAR functions.",
            "The query is mostly correct. However, instead of using 'EXTRACT' for both year and month, use 'TO_CHAR' for better readability and proper grouping. Also, ensure any NULL values in ShippedDate are handled if necessary. Here's the corrected query:\n\nSELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS year_month, AVG(DATE_PART('day', orders.ShippedDate - orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.ShippedDate IS NOT NULL GROUP BY year_month",
            "The original query incorrectly joins 'orders' with 'products' directly. The correct approach is to join 'orders' with '[Order Details]' and then join '[Order Details]' with 'products', since 'OrderID' is in both 'orders' and '[Order Details]' and 'ProductID' connects '[Order Details]' with 'products'.",
            "The original query attempts to filter orders by the last quarter using month ranges, which is incorrect. The correct approach is to use the QUARTER() function to identify the last quarter and adjust the YEAR() function to account for the change in the quarter interval. The provided correction uses these functions properly.",
            "The SQL query is correct. It calculates the total sales revenue for each employee by summing the revenue of order details joined with orders and employees, grouping by EmployeeID.",
            "The SQL query is correct. It correctly calculates the average shipping cost per order for each shipping company by joining the 'orders' and 'shippers' tables on the 'ShipVia' and 'ShipperID' columns and grouping by 'CompanyName'. The query is aligned with the provided business question, so no changes are needed.",
            "The SQL query correctly calculates the lifetime value for each customer by joining the 'Order Details' and 'orders' tables on 'OrderID', and then joining with 'customers' on 'CustomerID'. The calculation of lifetime value is done using the formula provided, and the results are grouped and ordered correctly to list the top 5 customers by their lifetime value. The query is accurate and adheres to the business question requirements.",
            "The query correctly selects the inventory turnover ratio for electronic products by filtering categories with 'Electronics' in their name. It utilizes the correct formula to compute the turnover ratio by dividing total sales by average inventory. The query also groups by CategoryName, which is necessary in the context of categorizing electronic products.",
            "The SQL query is correct. It properly joins the relevant tables and aggregates the quantity sold by category, ordering the results in descending order of sales performance.",
            "The original query is incorrect because it uses WHERE directly in COUNT, which is syntactically incorrect. Also, it should calculate customers who placed orders both before and during the specified year to find repeat customers. The corrected query uses a self-join to calculate the retention rate properly.",
            "The query is correct, assuming that the SQL dialect supports the subtraction operation used for date manipulation. The condition for last year's orders uses 'YEAR(CURRENT_DATE) - 1', which should work if the database supports this function as specified.",
            "The original query uses incorrect aggregation. To calculate the average order value per employee, we should first calculate the total sales per order and then calculate the average for each employee. The corrected query is: SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID ORDER BY avg_order_value DESC LIMIT 1.",
            "The SQL query is correct and will return the most common shipping method used by counting the number of orders per shipping method, then ordering by the count in descending order and limiting the result to the first one.",
            "The original query incorrectly uses AVG over an expression involving SUM and COUNT inside it. The correct approach is to determine the total sales and divide by the number of orders directly. The revised query calculates total sales per country and divides this by the distinct order count per country, returning the average order value for each customer country.",
            "The query seems to be based on calculating late shipments rather than product returns. If 'returns' mean products returned by customers, additional logic or columns reflecting product returns would be necessary. Without details on how 'returns' are tracked, it's unclear if this logic is correct. Verify data handling for returns.",
            "The SQL query is incorrectly structured for calculating the employee turnover rate. Turnover rate typically involves counting employees who left (not who were hired) during a specific period compared to the total number of employees at the start of that period. The current query counts hires and uses a wrong comparison. It should ideally involve a column indicating employees who have left or an end date for employment, which is not present in the provided schema.",
            "The SQL query is correct as per the business question. It accurately calculates the sales performance in different sales territories by joining the orders, employee territories, and territories tables and aggregating the sales data.",
            "The SQL query calculates monthly sales for 2023. However, it does not compare sales before and after a major product launch. To address the business question, the query should distinguish between pre-launch and post-launch periods. Additional information, such as the launch date, is needed to refine the query.",
            "The initial query uses DATE_FORMAT, which is not part of ANSI SQL. It's replaced with TO_CHAR and EXTRACT functions which are more standard.",
            "The original query correctly calculates the products with the highest sales performance based on quantity sold, using a GROUP BY to aggregate quantities. However, it is missing a condition to ensure the year is also considered when filtering the last month. The correction includes adding a YEAR condition to correctly identify the previous month from the current year.",
            "The SQL query is incorrect because it calculates the average of the order item values, not the average order value per customer. Instead, you should first calculate the total value of each order, and then average these values for each customer.",
            "The query correctly calculates the lifetime value for each customer using the provided business metric definition for 'Customer Lifetime Value'. It includes the necessary joins, correct formula, and orders the results to limit the top 10 customers by lifetime value. The SQL query is correct and aligns with the given business question.",
            "The original query is mostly correct. The only necessary change is to specify the table alias or table name when using 'OrderDate' in the GROUP BY clause to prevent ambiguity.",
            "The SQL query is mostly correct, but to ensure the grouping aligns precisely with the column alias in the SELECT clause, the GROUP BY should use the same expression: DATE_FORMAT(orders.OrderDate, '%Y-%m').",
            "The original query had issues with subqueries and did not handle division by zero. The corrected query calculates retention rates month by month, considers the past year, and prevents division by zero with NULLIF.",
            "Corrected JOIN clauses to appropriately connect the 'Order Details' and 'products' tables to the 'orders' table. The initial query incorrectly joined 'orders' and 'products' on 'OrderID' and 'ProductID', which is not appropriate. The correction connects 'orders' with 'Order Details' on 'OrderID' first, then 'Order Details' to 'products' on 'ProductID'.",
            "The original SQL query is mostly correct. However, ensure that the 'OrderDate' column is correctly referenced as 'orders.OrderDate' within the YEAR function.",
            "Corrected the query by using SUM with CASE to count orders shipped on time and ensuring group by uses the correct date format.",
            "The SQL query is correct. It calculates the inventory turnover ratio for each product and returns the top 5 products with the highest turnover ratio. The join between [Order Details] and products is appropriate, and the use of GROUP BY, ORDER BY, and LIMIT is correct.",
            "The original query mistakenly attempts to compute an average salary within the SELECT clause. However, each employee has a single salary value. Thus, there's no need to use AVG. The query should simply select the salary directly and include it in the GROUP BY clause.",
            "The SQL query is correct. It selects regions and counts orders, joining required tables to relate orders to regions through employees and territories. The grouping and ordering are appropriately applied to determine regions with the highest order count.",
            "The query was mostly correct. The GROUP BY clause should use the same expression used in the SELECT clause: DATE_FORMAT(OrderDate, '%Y-%m') instead of 'month'.",
            "The original query was mostly correct, but the GROUP BY clause should include 'shippers.CompanyName' to align with the SELECT clause.",
            "The query does not truly address the correlation between freight cost and product discount. It summarizes the average freight and discount per shipping method (ShipVia) but does not calculate a correlation. A statistical correlation function like Pearson's R is needed, which is not directly supported by SQL. Additional processing in a statistical tool would be required.",
            "The query correctly calculates the total sales for each customer by summing the product of unit price, quantity, and discount, then orders the results in descending order, and limits the output to the top 10 customers. There are no errors in this query.",
            "The initial query incorrectly averaged quantities of products instead of counting products per order. The corrected query calculates the average number of distinct products per order.",
            "The query correctly joins the necessary tables to calculate total sales per product category on a monthly basis for the year 2023. The use of DATE_FORMAT to extract the month and grouping by category name and month are appropriate steps for trend analysis. The ORDER BY clause sorts the results in descending order of total_sales, which is consistent with analyzing trends. No corrections needed.",
            "The current query calculates total sales per employee within each department but does not filter for the highest sales per department. You need a subquery or appropriate window function to achieve that. Since the schema does not define a `departments` table or a `DepartmentID` column for employees, there might be an error in your query or schema."
        ],
        "difficulty": [
            "easy",
            "medium",
            "advanced",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "easy",
            "advanced",
            "medium",
            "medium",
            "medium",
            "easy",
            "medium",
            "easy",
            "easy",
            "easy",
            "easy",
            "medium",
            "medium",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "easy",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "medium",
            "advanced",
            "easy",
            "medium",
            "easy",
            "advanced",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "medium",
            "easy",
            "medium",
            "medium",
            "medium",
            "advanced",
            "advanced",
            "easy",
            "easy",
            "advanced",
            "advanced",
            "medium",
            "medium",
            "easy",
            "advanced",
            "easy",
            "medium",
            "advanced",
            "advanced"
        ]
    }
}