[
    {
        "scenario": "Employee Performance",
        "input": "What is the total revenue generated per region by employees?",
        "output": "SELECT employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Region;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have a unit price higher than the average unit price of all products?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the highest unit price for products in each category?",
        "output": "SELECT p.CategoryID, MAX(p.UnitPrice) as MaxUnitPrice FROM products p GROUP BY p.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of units purchased for each category?",
        "output": "SELECT categories.CategoryID, SUM([Order Details].Quantity) AS TotalUnits FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the supplier with the shortest average lead time in 2023.",
        "output": "SELECT products.SupplierID, suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY products.SupplierID, suppliers.CompanyName ORDER BY avg_lead_time ASC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the sales revenue per category for the last year.",
        "output": "SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= CURDATE() - INTERVAL 1 YEAR GROUP BY p.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which city has the most orders placed in the last year?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS order_count FROM orders WHERE OrderDate BETWEEN DATE_FORMAT(CURRENT_DATE - INTERVAL 1 YEAR, '%Y-01-01') AND DATE_FORMAT(CURRENT_DATE, '%Y-12-31') GROUP BY ShipCity ORDER BY order_count DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time per supplier for delivery of products?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many customers placed orders in 2023?",
        "output": "SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has processed the largest order by value?",
        "output": "SELECT o.EmployeeID, o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID, o.OrderID ORDER BY OrderValue DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Find the region with the highest number of orders shipped.",
        "output": "SELECT region.RegionDescription, COUNT(orders.OrderID) AS order_count FROM orders JOIN employeeTerritories ON orders.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID GROUP BY region.RegionDescription ORDER BY order_count DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the correlation between employee tenure and sales amount.",
        "output": "SELECT employees.EmployeeID, DATEDIFF(CURRENT_DATE, employees.HireDate) AS Tenure, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount offered across all products?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method is used most frequently each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, ShipVia, COUNT(ShipVia) AS Count FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m'), ShipVia ORDER BY Month, Count DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of all orders were shipped using the least expensive delivery method in 2023?",
        "output": "SELECT COUNT(*) * 100.0 / total_orders AS percentage_least_expensive FROM (SELECT COUNT(orders.OrderID) AS count_orders FROM orders WHERE ShipVia = (SELECT ShipVia FROM orders WHERE OrderDate LIKE '2023-%' ORDER BY Freight LIMIT 1) AND YEAR(OrderDate) = 2023) AS least_expensive, (SELECT COUNT(OrderID) AS total_orders FROM orders WHERE YEAR(OrderDate) = 2023) AS total_orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped to each country?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue for the current year?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total quantity of each product ordered?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] GROUP BY [Order Details].ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average number of products per order?",
        "output": "SELECT AVG(ProductCount) AS AverageProductsPerOrder FROM (SELECT OrderID, COUNT(ProductID) AS ProductCount FROM [Order Details] GROUP BY OrderID) AS OrderProductCounts;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees are handling orders with a higher average discount?",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].Discount) AS AverageDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID HAVING AVG([Order Details].Discount) > (SELECT AVG([Order Details].Discount) FROM [Order Details]);",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales contributed by each employee this month?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were shipped within the same region as the shipping recipient?",
        "output": "SELECT COUNT(CASE WHEN ShipRegion = ShipRegion THEN 1 END) * 100.0 / COUNT(OrderID) AS SameRegionShippingRate FROM orders WHERE ShipRegion IS NOT NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 5 cities with the highest number of distinct customers.",
        "output": "SELECT City, COUNT(DISTINCT CustomerID) AS NumCustomers FROM customers GROUP BY City ORDER BY NumCustomers DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of shipped orders were returned?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, (COUNT(CASE WHEN orders.RequiredDate < orders.ShippedDate THEN orders.OrderID ELSE NULL END) / COUNT(orders.OrderID)) * 100 AS return_rate FROM orders GROUP BY month",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average unit price for products across all orders?",
        "output": "SELECT AVG(UnitPrice) AS AvgUnitPrice FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Display the performance of each product based on sales for last month.",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND OrderDate < CURDATE() GROUP BY products.ProductID, products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employee with the longest tenure and their total sales.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY e.HireDate ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders have been shipped but not yet delivered by country?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS ShippedNotDelivered FROM orders WHERE ShippedDate IS NOT NULL AND RequiredDate > ShippedDate GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average order value for each employee?",
        "output": "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find customers with more than one order in a single month.",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID, EXTRACT(YEAR FROM OrderDate), EXTRACT(MONTH FROM OrderDate) HAVING COUNT(OrderID) > 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the most expensive product supplied by 'Supplier X'?",
        "output": "SELECT ProductName FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE suppliers.CompanyName = 'Supplier X' ORDER BY UnitPrice DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers have provided products that are currently out of stock?",
        "output": "SELECT DISTINCT p.SupplierID FROM products p WHERE p.UnitsInStock = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month had the highest number of orders shipped?",
        "output": "SELECT MONTH(ShippedDate) AS month, COUNT(OrderID) AS order_count FROM orders WHERE ShippedDate IS NOT NULL GROUP BY month ORDER BY order_count DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the average time between order placements for each product.",
        "output": "SELECT ProductName, AVG(DATE_PART('day', OrderDate - LAG(OrderDate) OVER (PARTITION BY ProductID ORDER BY OrderDate))) AS AvgDaysBetweenOrders FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product has the highest number of units ordered historically?",
        "output": "SELECT ProductName, SUM([Order Details].Quantity) AS TotalUnits FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, ProductName ORDER BY TotalUnits DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List customers with the highest total discounted revenue.",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS DiscountedRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY DiscountedRevenue DESC LIMIT 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which employee handled the most orders?",
        "output": "SELECT o.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the average units on order for active (non-discontinued) products.",
        "output": "SELECT AVG(UnitsOnOrder) as AverageUnitsOnOrder FROM products WHERE Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the monthly growth rate in total sales.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, (SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) - LAG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) OVER (ORDER BY DATE_FORMAT(OrderDate, '%Y-%m'))) / LAG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) OVER (ORDER BY DATE_FORMAT(OrderDate, '%Y-%m')) AS MonthlyGrowthRate FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the customer lifetime value for each customer.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units are currently in stock for each product?",
        "output": "SELECT ProductID, UnitsInStock FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Determine the customer with the highest average order value.",
        "output": "SELECT CustomerID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY CustomerID ORDER BY AvgOrderValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "List products with a unit price higher than the average unit price of all products.",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time between the order date and the required date?",
        "output": "SELECT AVG(DATEDIFF(RequiredDate, OrderDate)) AS avg_time FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount given per order?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the average discount provided by each employee.",
        "output": "SELECT e.EmployeeID, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which supplier supplies the most number of products?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID ORDER BY NumberOfProducts DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the proportion of orders with zero discount applied?",
        "output": "SELECT COUNT(CASE WHEN Discount = 0 THEN 1 END) / COUNT(*) AS ZeroDiscountProportion FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the most common title among contact persons.",
        "output": "SELECT ContactTitle, COUNT(*) AS Frequency FROM customers GROUP BY ContactTitle ORDER BY Frequency DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total freight cost for orders shipped to Germany?",
        "output": "SELECT SUM(orders.Freight) FROM orders WHERE orders.ShipCountry = 'Germany'",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers provide the most products by unit?",
        "output": "SELECT p.SupplierID, SUM(p.UnitsInStock + p.UnitsOnOrder) AS TotalUnits FROM products p GROUP BY p.SupplierID ORDER BY TotalUnits DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the monthly inventory turnover ratio for the past year.",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS OrderMonth, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE OrderDate >= '2022-10-01' AND OrderDate < '2023-10-01' GROUP BY OrderMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average supplier lead time for each supplier?",
        "output": "SELECT s.SupplierID, s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID, s.CompanyName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which are the top 5 customers based on total order value?",
        "output": "SELECT customers.CustomerID, CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalOrderValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID, CompanyName ORDER BY TotalOrderValue DESC FETCH FIRST 5 ROWS ONLY;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders were delivered on or before the required date?",
        "output": "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / COUNT(orders.OrderID) * 100.0 AS OnTimeDeliveryRate FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the top 3 employees with the highest sales-to-salary ratio.",
        "output": "SELECT employees.EmployeeID, (SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / employees.Salary) AS SalesToSalaryRatio FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY SalesToSalaryRatio DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Determine whether any products are close to their reorder level.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee has the highest sales in their territory this year?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS territory_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID ORDER BY territory_sales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated by each employee this month?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which customers have placed the most orders by total revenue?",
        "output": "SELECT orders.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSpent FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.CustomerID ORDER BY TotalSpent DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total freight cost incurred for orders over the past year?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers who have placed orders in more than three distinct months.",
        "output": "SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(DISTINCT EXTRACT(YEAR FROM OrderDate) || '-' || EXTRACT(MONTH FROM OrderDate)) > 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find employees who managed at least one order with a freight cost greater than $100.",
        "output": "SELECT DISTINCT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.Freight > 100;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How does the performance of products vary during holiday seasons?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE MONTH(od.OrderDate) IN (11, 12) AND YEAR(od.OrderDate) = YEAR(CURRENT_DATE) GROUP BY p.ProductID, p.ProductName ORDER BY TotalSales DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many different products do the top 3 orders by value contain?",
        "output": "SELECT COUNT(DISTINCT ProductID) FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM (SELECT OrderID, SUM(Quantity * UnitPrice) AS OrderValue FROM [Order Details] GROUP BY OrderID ORDER BY OrderValue DESC LIMIT 3) AS TopOrders);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many orders include products with a discount greater than 20%?",
        "output": "SELECT COUNT(DISTINCT OrderID) FROM [Order Details] WHERE Discount > 0.2;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total sales for each month.",
        "output": "SELECT MONTH(o.OrderDate) AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY MONTH(o.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the regions with the highest number of suppliers.",
        "output": "SELECT Region, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY Region ORDER BY SupplierCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product has the highest number of units on order?",
        "output": "SELECT ProductName, UnitsOnOrder FROM products ORDER BY UnitsOnOrder DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have inventory levels below their reorder points?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average units per order for each product?",
        "output": "SELECT ProductName, AVG(Quantity) AS AverageUnitsPerOrder FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier provides the most diverse range of products?",
        "output": "SELECT SupplierID, COUNT(DISTINCT ProductID) as ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products are currently out of stock?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many units of each product are currently in stock?",
        "output": "SELECT ProductName, UnitsInStock FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find suppliers who have not shipped any products in the last month.",
        "output": "SELECT suppliers.CompanyName FROM suppliers LEFT JOIN products ON suppliers.SupplierID = products.SupplierID LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID LEFT JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.ShippedDate IS NULL OR orders.ShippedDate < DATEADD(MONTH, -1, CURRENT_DATE);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the most common contact title among customers?",
        "output": "SELECT ContactTitle, COUNT(*) AS NumContacts FROM customers GROUP BY ContactTitle ORDER BY NumContacts DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the average unit price of products supplied by each supplier.",
        "output": "SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AverageUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have been ordered the most in the past year?",
        "output": "SELECT ProductName, SUM(d.Quantity) AS TotalOrdered FROM [Order Details] d JOIN products p ON d.ProductID = p.ProductID JOIN orders o ON d.OrderID = o.OrderID WHERE o.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND CURRENT_DATE GROUP BY ProductName ORDER BY TotalOrdered DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the top three products by total sales quantity.",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalQuantity DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the average units on order for each product category?",
        "output": "SELECT c.CategoryID, AVG(p.UnitsOnOrder) AS AvgUnitsOnOrder FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the total sales amount for each city.",
        "output": "SELECT ShipCity, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCity;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average discount applied to the orders processed by each employee?",
        "output": "SELECT e.EmployeeID, AVG(od.Discount) AS AverageDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have a reorder level higher than 100?",
        "output": "SELECT ProductName FROM products WHERE ReorderLevel > 100;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total sales revenue in the past month.",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURDATE() - INTERVAL 1 MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time for each supplier in the last year?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate > DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY products.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has been with the company the longest?",
        "output": "SELECT e.EmployeeID, e.HireDate FROM employees e ORDER BY e.HireDate ASC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the most common shipping method used by customers?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipVia ORDER BY NumberOfOrders DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products are currently discontinued?",
        "output": "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time for the past quarter?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time FROM orders WHERE QUARTER(OrderDate) = QUARTER(CURRENT_DATE) AND YEAR(OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many categories of products are currently in stock?",
        "output": "SELECT COUNT(DISTINCT CategoryID) FROM products WHERE UnitsInStock > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many unique products have received orders each year?",
        "output": "SELECT YEAR(o.OrderDate) as OrderYear, COUNT(DISTINCT od.ProductID) as UniqueProductsOrdered FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY YEAR(o.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all suppliers who are located in 'USA' and have at least one discontinued product.",
        "output": "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE suppliers.Country = 'USA' AND products.Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which country has the highest number of suppliers?",
        "output": "SELECT Country, COUNT(*) AS SupplierCount FROM suppliers GROUP BY Country ORDER BY SupplierCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How does the average shipping cost compare between two different shipping methods?",
        "output": "SELECT ShipVia, AVG(Freight) FROM orders GROUP BY ShipVia ORDER BY AVG(Freight);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders include products with a discount greater than 20%?",
        "output": "SELECT COUNT(DISTINCT o.OrderID) AS orders_with_large_discount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0.2;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the order IDs where the total discount applied was more than $100.",
        "output": "SELECT OrderID FROM [Order Details] GROUP BY OrderID HAVING SUM(UnitPrice * Quantity * Discount) > 100;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue generated for each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find customers who have placed orders in multiple regions.",
        "output": "SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID HAVING COUNT(DISTINCT o.ShipRegion) > 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the retention rate of customers from the previous quarter?",
        "output": "SELECT (COUNT(DISTINCT o1.CustomerID) * 1.0 / COUNT(DISTINCT o2.CustomerID)) * 100 AS RetentionRate FROM orders o1, orders o2 WHERE o1.OrderDate BETWEEN (CURRENT_DATE - INTERVAL '6 months') AND (CURRENT_DATE - INTERVAL '3 months') AND o2.OrderDate BETWEEN (CURRENT_DATE - INTERVAL '9 months') AND (CURRENT_DATE - INTERVAL '6 months') AND o1.CustomerID = o2.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which regions have the highest customer retention rates?",
        "output": "SELECT region.RegionDescription, (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' THEN orders.CustomerID END) / NULLIF(COUNT(DISTINCT CASE WHEN orders.OrderDate < '2023-01-01' THEN orders.CustomerID END), 0)) AS retention_rate FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID JOIN region ON customers.Region = region.RegionID GROUP BY region.RegionDescription;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the trend of inventory turnover ratio over the past 6 months?",
        "output": "SELECT MONTH(OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY MONTH(OrderDate) ORDER BY Month DESC LIMIT 6",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the most ordered products for each employee?",
        "output": "SELECT od.ProductID, e.EmployeeID, COUNT(od.ProductID) AS ProductOrderCount FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID JOIN employees e ON o.EmployeeID = e.EmployeeID GROUP BY od.ProductID, e.EmployeeID ORDER BY e.EmployeeID, ProductOrderCount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the total units ordered for each product category?",
        "output": "SELECT c.CategoryID, SUM(od.Quantity) AS TotalUnits FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers who have not placed any orders in the last year.",
        "output": "SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderID IS NULL OR o.CustomerID IS NULL OR o.OrderDate < CURRENT_DATE - INTERVAL '1 year';",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the longest tenure in the company?",
        "output": "SELECT EmployeeID, DATEDIFF(CURDATE(), HireDate) AS Tenure FROM employees ORDER BY Tenure DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List products that have never been ordered.",
        "output": "SELECT products.ProductName FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].OrderID IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers are from each country?",
        "output": "SELECT Country, COUNT(DISTINCT CustomerID) AS NumberOfCustomers FROM customers GROUP BY Country;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders had a delivery delay?",
        "output": "SELECT COUNT(OrderID) AS DelayedOrders FROM orders WHERE ShippedDate IS NOT NULL AND DATEDIFF(ShippedDate, RequiredDate) > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How does the sales performance of employees vary across different countries?",
        "output": "SELECT e.Country, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Country;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which categories have the highest average sales discount?",
        "output": "SELECT c.CategoryID, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID ORDER BY AverageDiscount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time for each supplier in delivering products?",
        "output": "SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many products are ordered per order on average?",
        "output": "SELECT AVG(t.QuantityPerOrder) FROM (SELECT OrderID, SUM(Quantity) AS QuantityPerOrder FROM [Order Details] GROUP BY OrderID) t;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Assess products based on both stock levels and historical sales performance.",
        "output": "SELECT ProductName, (SUM(d.Quantity) - AVG(p.UnitsInStock)) AS PerformanceMetric FROM [Order Details] d JOIN products p ON d.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName HAVING PerformanceMetric > 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost per country?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month had the highest average order fulfillment time?",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS FulfillmentTime FROM orders GROUP BY EXTRACT(YEAR FROM OrderDate), EXTRACT(MONTH FROM OrderDate) ORDER BY FulfillmentTime DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which products are frequently ordered together?",
        "output": "SELECT od1.ProductID AS ProductID1, od2.ProductID AS ProductID2, COUNT(*) AS TimesOrderedTogether FROM [Order Details] od1 JOIN [Order Details] od2 ON od1.OrderID = od2.OrderID AND od1.ProductID < od2.ProductID GROUP BY od1.ProductID, od2.ProductID ORDER BY TimesOrderedTogether DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the number of distinct products ordered by each customer.",
        "output": "SELECT o.CustomerID, COUNT(DISTINCT od.ProductID) AS NumberOfDistinctProducts FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees have a salary higher than the average salary?",
        "output": "SELECT COUNT(e.EmployeeID) AS EmployeeCount FROM employees e WHERE e.Salary > (SELECT AVG(Salary) FROM employees);",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the percentage of orders that were delivered on time?",
        "output": "SELECT 100.0 * COUNT(CASE WHEN o.ShippedDate <= o.RequiredDate THEN 1 END) / COUNT(o.OrderID) AS OnTimePercentage FROM orders o;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which city has the most customers?",
        "output": "SELECT City, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY City ORDER BY NumberOfCustomers DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the total number of orders placed by each customer.",
        "output": "SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What are the top 5 customers by number of orders placed?",
        "output": "SELECT o.CustomerID, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.CustomerID ORDER BY OrderCount DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product has the highest amount in sales revenue?",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales amount generated by each employee?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the city with the most suppliers.",
        "output": "SELECT City, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY City ORDER BY SupplierCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average freight cost per shipment?",
        "output": "SELECT AVG(o.Freight) AS AverageFreightCost FROM orders o;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the most common shipping country and its associated suppliers.",
        "output": "SELECT o.ShipCountry, COUNT(DISTINCT s.SupplierID) AS SupplierCount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY o.ShipCountry ORDER BY COUNT(o.OrderID) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all suppliers located in the same country as the company.",
        "output": "SELECT * FROM suppliers WHERE Country = 'USA';",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest total sales this year?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What's the percentage of orders that included discontinued products?",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN p.Discontinued = 1 THEN d.OrderID END) / COUNT(DISTINCT d.OrderID)) * 100 AS Percentage FROM [Order Details] d JOIN products p ON d.ProductID = p.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How often is each shipping method used on weekends?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS WeekendFrequency FROM orders WHERE EXTRACT(DOW FROM OrderDate) IN (0, 6) GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "In which month was the highest total revenue earned?",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee managed the most orders above $200?",
        "output": "SELECT e.EmployeeID, COUNT(DISTINCT o.OrderID) AS OrdersAbove200 FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 200 ORDER BY OrdersAbove200 DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the suppliers who have at least one product exceeding its reorder level.",
        "output": "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsInStock < products.ReorderLevel;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employees whose orders tend to have higher shipping delays.",
        "output": "SELECT employees.EmployeeID, AVG(CAST(orders.RequiredDate AS DATE) - CAST(orders.ShippedDate AS DATE)) AS AverageDelay FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate IS NOT NULL GROUP BY employees.EmployeeID HAVING AVG(CAST(orders.RequiredDate AS DATE) - CAST(orders.ShippedDate AS DATE)) > (SELECT AVG(CAST(orders.RequiredDate AS DATE) - CAST(orders.ShippedDate AS DATE)) FROM orders WHERE orders.ShippedDate IS NOT NULL);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order for each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS month, AVG(Freight) AS avg_shipping_cost FROM orders GROUP BY month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have placed more than 10 orders?",
        "output": "SELECT c.CustomerID, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID HAVING COUNT(o.OrderID) > 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders have been shipped using each shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) * 100.0 / (SELECT COUNT(OrderID) FROM orders) AS Percentage FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total revenue contribution of each customer?",
        "output": "SELECT orders.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.CustomerID ORDER BY TotalRevenue DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city has the highest number of orders shipped?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the highest discount ever applied on any product?",
        "output": "SELECT MAX(Discount) AS MaxDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the Customer Retention Rate for the last month?",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN o.OrderDate BETWEEN DATEADD(month, -1, GETDATE()) AND GETDATE() THEN o.CustomerID END) * 1.0) / NULLIF(COUNT(DISTINCT CASE WHEN o.OrderDate < DATEADD(month, -1, GETDATE()) THEN o.CustomerID END), 0) AS RetentionRate FROM orders o;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List all customers who have not placed any orders.",
        "output": "SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderID IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed by each customer in 2023?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Compute the inventory turnover ratio for each product category.",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) AS inventory_turnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average order value?",
        "output": "SELECT AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount applied to products per supplier?",
        "output": "SELECT suppliers.CompanyName, AVG([Order Details].Discount) AS AverageDiscount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average quantity of products sold per order by each employee?",
        "output": "SELECT e.EmployeeID, AVG(od.Quantity) AS AvgQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all products that are low in stock but have outstanding orders.",
        "output": "SELECT products.ProductName FROM products WHERE UnitsInStock < ReorderLevel AND UnitsOnOrder > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity sold for each category of products?",
        "output": "SELECT CategoryID, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount applied to orders of products supplied by each supplier?",
        "output": "SELECT suppliers.CompanyName, AVG([Order Details].Discount) AS AverageDiscount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest inventory turnover ratio?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID ORDER BY InventoryTurnover DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value every month?",
        "output": "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM');",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Determine the most popular product category among customers.",
        "output": "SELECT categories.CategoryName, COUNT([Order Details].ProductID) AS popularity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY popularity DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product is the top-selling item based on quantity sold?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY total_quantity DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has achieved the highest sales in the last month?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) AND MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the difference in units between current stock and reorder level for products?",
        "output": "SELECT ProductName, (UnitsInStock - ReorderLevel) AS StockDifference FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total number of units sold for each supplier?",
        "output": "SELECT SupplierID, SUM([Order Details].Quantity) AS TotalUnits FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders has each employee handled?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products are discontinued by each supplier?",
        "output": "SELECT s.SupplierID, COUNT(*) AS DiscontinuedProducts FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.Discontinued = 1 GROUP BY s.SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of orders that include a discount?",
        "output": "SELECT AVG(UnitPrice) FROM [Order Details] WHERE Discount > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Rank countries by their total number of orders.",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCountry ORDER BY NumberOfOrders DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the sales contributions of different employee titles?",
        "output": "SELECT employees.Title, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS title_sales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Title ORDER BY title_sales DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest turnover ratio?",
        "output": "SELECT ProductName, (SUM(od.Quantity * od.UnitPrice) / AVG(UnitsInStock)) AS TurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TurnoverRatio DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many discontinued products does each supplier have?",
        "output": "SELECT s.SupplierID, s.CompanyName, COUNT(p.ProductID) AS DiscontinuedProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1 GROUP BY s.SupplierID, s.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the top 10 products with the largest quantity on order.",
        "output": "SELECT ProductName, UnitsOnOrder FROM products ORDER BY UnitsOnOrder DESC LIMIT 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were fulfilled on time each month?",
        "output": "SELECT DATE_FORMAT(orders.ShippedDate, '%Y-%m') AS month, COUNT(orders.OrderID) AS on_time_orders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY month",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of orders processed by each employee?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS TotalOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the average time from order placement to shipment, by employee.",
        "output": "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the percentage of discontinued products?",
        "output": "SELECT (COUNT(*)*1.0 / (SELECT COUNT(*) FROM products)) * 100 AS DiscontinuedPercentage FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average order size for each product?",
        "output": "SELECT ProductName, AVG([Order Details].Quantity) AS AvgOrderSize FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers provide products to the most regions?",
        "output": "SELECT suppliers.CompanyName, COUNT(DISTINCT orders.ShipRegion) AS RegionCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName ORDER BY RegionCount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee handled the most orders in the last year?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders WHERE OrderDate >= DATE_ADD(CURDATE(), INTERVAL -1 YEAR) GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity ordered for each category?",
        "output": "SELECT c.CategoryID, SUM(od.Quantity) as TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have a discount greater than 10%?",
        "output": "SELECT COUNT(DISTINCT ProductID) FROM [Order Details] WHERE Discount > 0.1",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were delivered on or before the required date each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(*)) AS OnTimePercentage FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products are supplied by each supplier and what is the average price?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS NumberOfProducts, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY SupplierID",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped before the required date in February 2023?",
        "output": "SELECT COUNT(o.OrderID) FROM orders o WHERE o.ShippedDate < o.RequiredDate AND MONTH(o.ShippedDate) = 2 AND YEAR(o.ShippedDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many discontinued products are still in stock?",
        "output": "SELECT COUNT(*) FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed by each region?",
        "output": "SELECT Region, COUNT(OrderID) AS Number_of_Orders FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY Region;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which day of the week has the highest number of orders placed?",
        "output": "SELECT EXTRACT(DOW FROM OrderDate) AS DayOfWeek, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EXTRACT(DOW FROM OrderDate) ORDER BY NumberOfOrders DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers are there in each country?",
        "output": "SELECT c.Country, COUNT(c.CustomerID) AS CustomerCount FROM customers c GROUP BY c.Country;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped via each shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total inventory value based on the current unit price and units in stock?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the quickest average delivery time?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS QuickestDeliveryTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN orders ON products.ProductID = orders.ProductID GROUP BY suppliers.CompanyName ORDER BY QuickestDeliveryTime ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped on or before the required date each month?",
        "output": "SELECT DATE_TRUNC('month', ShippedDate) AS Month, COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY DATE_TRUNC('month', ShippedDate);",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have reached their reorder level and need replenishment?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue for each month in 2023?",
        "output": "SELECT MONTH(orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY MONTH(orders.OrderDate)",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the median fulfillment time for orders placed last year?",
        "output": "SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DATEDIFF(ShippedDate, OrderDate)) AS MedianFulfillmentTime FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List all employees who report directly to the employee with the highest sales.",
        "output": "SELECT e.EmployeeID FROM employees e WHERE ReportsTo = (SELECT TOP 1 e2.EmployeeID FROM employees e2 JOIN orders o ON e2.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e2.EmployeeID ORDER BY SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) DESC)",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average time taken to fulfill orders each month?",
        "output": "SELECT MONTH(orders.ShippedDate) AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY MONTH(orders.ShippedDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average order value processed by each employee?",
        "output": "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped late for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the average unit price of all products supplied by each supplier.",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many unique shipping addresses are there?",
        "output": "SELECT COUNT(DISTINCT ShipAddress) AS UniqueAddresses FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which orders had the highest freight costs?",
        "output": "SELECT OrderID, Freight FROM orders WHERE Freight = (SELECT MAX(Freight) FROM orders);",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees who shipped orders faster than the company average.",
        "output": "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE DATEDIFF(o.ShippedDate, o.OrderDate) < (SELECT AVG(DATEDIFF(o2.ShippedDate, o2.OrderDate)) FROM orders o2);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the shipping cost trend over the past year?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS month, SUM(Freight) AS total_freight FROM orders WHERE OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY month ORDER BY month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee had the longest gap between an order's required date and shipped date?",
        "output": "SELECT e.EmployeeID, DATEDIFF(o.RequiredDate, o.ShippedDate) AS Gap FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NOT NULL AND o.RequiredDate IS NOT NULL ORDER BY Gap DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the average units in stock for each category?",
        "output": "SELECT CategoryID, AVG(UnitsInStock) AS AverageStock FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which orders have a shipping delay beyond the required date?",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total revenue generated by each product?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the correlation between order size and discount level?",
        "output": "SELECT Discount, AVG([Order Details].Quantity) AS avg_quantity FROM [Order Details] GROUP BY Discount;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the sales details for employees who have generated sales above a specified threshold.",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 10000;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the total sales generated by each employee in the last month?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND orders.OrderDate < DATE_TRUNC('month', CURRENT_DATE) GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which country has the highest number of orders?",
        "output": "SELECT customers.Country, COUNT(orders.OrderID) AS NumberOfOrders FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.Country ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per country?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped to each postal code for each month?",
        "output": "SELECT ShipPostalCode, EXTRACT(MONTH FROM ShippedDate) AS Month, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipPostalCode, EXTRACT(MONTH FROM ShippedDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all orders that include products from more than one supplier.",
        "output": "SELECT o.OrderID, COUNT(DISTINCT p.SupplierID) AS SupplierCount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY o.OrderID HAVING SupplierCount > 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the monthly sales trends for each employee in 2022.",
        "output": "SELECT e.EmployeeID, MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2022 GROUP BY e.EmployeeID, MONTH(o.OrderDate)",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Determine the average quantity of items ordered per order.",
        "output": "SELECT AVG(SUM([Order Details].Quantity)) AS AvgQuantityPerOrder FROM [Order Details] GROUP BY OrderID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customer placed the most orders?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many unique products are sold by each supplier?",
        "output": "SELECT SupplierID, COUNT(DISTINCT [Order Details].ProductID) AS UniqueProductsSold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product category contributes the most to sales revenue?",
        "output": "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS CategoryRevenue FROM products p JOIN categories c ON p.CategoryID = c.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryID ORDER BY CategoryRevenue DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate monthly freight costs.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Freight) AS TotalFreight FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average freight cost for orders shipped via each shipping method?",
        "output": "SELECT ShipVia, AVG(Freight) AS average_freight FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the total number of unique products sold by each employee.",
        "output": "SELECT e.EmployeeID, COUNT(DISTINCT od.ProductID) AS UniqueProductsSold FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "List the top 5 countries by total sales amount.",
        "output": "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN \"Order Details\" ON orders.OrderID = \"Order Details\".OrderID GROUP BY ShipCountry ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total value of products currently in stock?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the average salary of employees whose sales exceed $5000 per month.",
        "output": "SELECT AVG(e.Salary) AS AvgSalary FROM employees e JOIN (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE + INTERVAL '1 month') GROUP BY e.EmployeeID) s ON e.EmployeeID = s.EmployeeID WHERE s.MonthlySales > 5000;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total number of orders for each product?",
        "output": "SELECT ProductID, COUNT(DISTINCT OrderID) AS TotalOrders FROM [Order Details] GROUP BY ProductID",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have not been ordered in the past six months?",
        "output": "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT ProductID FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE orderDate BETWEEN CURRENT_DATE - INTERVAL '6 months' AND CURRENT_DATE));",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee has managed the most orders?",
        "output": "SELECT o.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How does employee performance vary across different countries?",
        "output": "SELECT e.Country, e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Country, e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How does the performance of employees vary by region?",
        "output": "SELECT e.Region, e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Region, e.EmployeeID ORDER BY TotalSales DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have no units on order?",
        "output": "SELECT COUNT(*) FROM products WHERE UnitsOnOrder = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total value of the current stock for each product category?",
        "output": "SELECT CategoryID, SUM(UnitsInStock * UnitPrice) AS StockValue FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders have been shipped to each country?",
        "output": "SELECT o.ShipCountry, COUNT(o.OrderID) AS order_count FROM orders o GROUP BY o.ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount applied per order?",
        "output": "SELECT AVG(t.discount_per_order) AS avg_discount FROM (SELECT OrderID, AVG([Order Details].Discount) AS discount_per_order FROM [Order Details] GROUP BY OrderID) t;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have not been assigned any orders?",
        "output": "SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.EmployeeID IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales amount grouped by supplier?",
        "output": "SELECT s.SupplierID, s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSupplierSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID, s.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which supplier provides the most number of different products?",
        "output": "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest inventory turnover ratio for the past month?",
        "output": "SELECT products.ProductID, products.ProductName, (SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock)) AS InventoryTurnover FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) GROUP BY products.ProductID, products.ProductName ORDER BY InventoryTurnover DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the maximum shipping cost recorded for any order?",
        "output": "SELECT MAX(Freight) FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have not received any orders?",
        "output": "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details])",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the most products with low stock (below reorder level)?",
        "output": "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS LowStockProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsInStock < products.ReorderLevel GROUP BY suppliers.CompanyName ORDER BY LowStockProducts DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for orders placed in February 2023?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = 2 AND YEAR(o.OrderDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product generated the highest sales revenue last month?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductSales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1' month) AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE) GROUP BY od.ProductID ORDER BY ProductSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the current stock level of all products?",
        "output": "SELECT products.ProductName, products.UnitsInStock FROM products ORDER BY products.ProductID",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount applied across all orders?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify suppliers with more than 50 units on order across all their products.",
        "output": "SELECT SupplierID FROM products WHERE UnitsOnOrder > 50;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employees have generated the most sales revenue this quarter?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN DATE_TRUNC('quarter', CURRENT_DATE) AND CURRENT_DATE GROUP BY employees.EmployeeID ORDER BY total_sales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the products with zero stock and orders pending.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock = 0 AND UnitsOnOrder > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount applied to orders in March 2023?",
        "output": "SELECT AVG(od.Discount) AS AvgDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(MONTH FROM o.OrderDate) = 3 AND EXTRACT(YEAR FROM o.OrderDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Analyze the impact of shipping method on order delivery time.",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgDeliveryTime FROM orders GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 5 products by sales volume?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) as TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders have been handled by each employee?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the top three cities with the highest number of suppliers.",
        "output": "SELECT suppliers.City, COUNT(DISTINCT suppliers.SupplierID) AS SupplierCount FROM suppliers GROUP BY suppliers.City ORDER BY SupplierCount DESC LIMIT 3;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have stock levels below the reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount given on products across all orders?",
        "output": "SELECT AVG(Discount) FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customers have incurred the most in shipping costs?",
        "output": "SELECT CustomerID, SUM(Freight) AS total_shipping_cost FROM orders GROUP BY CustomerID ORDER BY total_shipping_cost DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product has the highest sales revenue in the last month?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) as TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE EXTRACT(MONTH FROM od.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) - 1 AND EXTRACT(YEAR FROM od.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY p.ProductName ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the order with the highest total value.",
        "output": "SELECT orders.OrderID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS OrderTotal FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID ORDER BY OrderTotal DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the on-time delivery rate for each region?",
        "output": "SELECT ShipRegion, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 1.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What percentage of products have a unit price above $50?",
        "output": "SELECT (COUNT(*) FILTER (WHERE UnitPrice > 50) * 100.0) / COUNT(*) as PriceAbove50Percentage FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders include discontinued products?",
        "output": "SELECT COUNT(DISTINCT orders.OrderID) FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee processed the most orders?",
        "output": "SELECT o.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the most common shipping region.",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS Frequency FROM orders GROUP BY ShipRegion ORDER BY Frequency DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders are shipped on the same day they are ordered?",
        "output": "SELECT COUNT(OrderID) * 100.0 / (SELECT COUNT(*) FROM orders) AS SameDayShipPercentage FROM orders WHERE ShippedDate = OrderDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping time per country?",
        "output": "SELECT ShipCountry, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_shipping_time FROM orders GROUP BY ShipCountry;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders are delivered on or before the required date, on a monthly basis?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS OrderMonth, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees are responsible for orders that were shipped late?",
        "output": "SELECT DISTINCT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.RequiredDate < o.ShippedDate",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the total sales generated by each employee?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 5 most stocked products currently available?",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 0 ORDER BY UnitsInStock DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue generated from orders that included a discount?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS RevenueWithDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE [Order Details].Discount > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the inventory turnover ratio for each product.",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which regions have the highest average freight costs?",
        "output": "SELECT ShipRegion, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipRegion ORDER BY AvgFreight DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How does the shipping cost vary by shipping region?",
        "output": "SELECT ShipRegion, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which categories have the most units in stock?",
        "output": "SELECT CategoryID, SUM(UnitsInStock) AS TotalStock FROM products GROUP BY CategoryID ORDER BY TotalStock DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the top 5 cities with the most orders.",
        "output": "SELECT ShipCity, COUNT(OrderID) AS order_count FROM orders GROUP BY ShipCity ORDER BY order_count DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which region generates the most revenue?",
        "output": "SELECT Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Region ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the percentage of orders that included a discount.",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN Discount > 0 THEN OrderID END) / COUNT(DISTINCT OrderID)) * 100 as DiscountedOrdersPercentage FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total freight cost per employee for shipped orders in 2022.",
        "output": "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE YEAR(o.ShippedDate) = 2022 GROUP BY e.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify orders with a greater than 20% discount.",
        "output": "SELECT OrderID FROM [Order Details] WHERE Discount > 0.20;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many distinct customers placed orders in the last year?",
        "output": "SELECT COUNT(DISTINCT CustomerID) AS distinct_customers FROM orders WHERE OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE();",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the weekly trend in total sales over the past year?",
        "output": "SELECT EXTRACT(WEEK FROM orders.OrderDate) AS Week, EXTRACT(YEAR FROM orders.OrderDate) AS Year, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS WeeklySales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY Year, Week ORDER BY Year, Week;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the longest time taken to fulfill an order?",
        "output": "SELECT MAX(DATEDIFF(ShippedDate, OrderDate)) AS LongestFulfillmentTime FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have inventory levels below their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the correlation between order size and freight cost?",
        "output": "SELECT CORR(order_size_column, Freight) AS correlation FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify which city has the highest number of customers.",
        "output": "SELECT customers.City, COUNT(customers.CustomerID) AS num_customers FROM customers GROUP BY customers.City ORDER BY num_customers DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest total sales value?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount given per product?",
        "output": "SELECT ProductID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which city has the most active customers based on order count?",
        "output": "SELECT customers.City, COUNT(orders.OrderID) AS order_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.City ORDER BY order_count DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the total sales amount for each product.",
        "output": "SELECT ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the names of products that are currently discontinued?",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the monthly inventory turnover ratio for each product?",
        "output": "SELECT od.ProductID, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) as InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY od.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the supplier with the shortest lead time.",
        "output": "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders have been shipped late?",
        "output": "SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the overall product performance trend for each product over the last six months?",
        "output": "SELECT products.ProductID, products.ProductName, DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '6 months' GROUP BY products.ProductID, products.ProductName, Month ORDER BY Month DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "For each employee, what is the average number of days between order date and shipped date?",
        "output": "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgDays FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NOT NULL GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated for each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m');",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total order quantity for each supplier?",
        "output": "SELECT SupplierID, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order for each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have unit price greater than the average unit price?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product categories have the highest sales volumes?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID ORDER BY sales_volume DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the top 5 products by sales quantity.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find products with the highest inventory turnover ratio.",
        "output": "SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders did each employee process in Q1 2023?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY e.EmployeeID",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the monthly trend in the number of orders shipped on time?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) AS OnTimeCount FROM orders GROUP BY Month ORDER BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders have been shipped but not yet delivered?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate IS NOT NULL AND ShippedDate < RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost for orders handled by each employee?",
        "output": "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List the products with the highest reorder level.",
        "output": "SELECT ProductID, ProductName FROM products WHERE Discontinued = 0 ORDER BY ReorderLevel DESC LIMIT 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average number of orders placed per customer per month?",
        "output": "SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, EXTRACT(YEAR FROM o.OrderDate) AS Year, COUNT(o.OrderID) / COUNT(DISTINCT o.CustomerID) AS AvgOrdersPerCustomer FROM orders o GROUP BY Year, Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer has received the highest discount on an order?",
        "output": "SELECT customers.CustomerID, MAX([Order Details].Discount) AS HighestDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the city with the highest sales under each employee.",
        "output": "SELECT EmployeeID, ShipCity, CitySales FROM (SELECT employees.EmployeeID, orders.ShipCity, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CitySales, ROW_NUMBER() OVER (PARTITION BY employees.EmployeeID ORDER BY SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) DESC) AS rn FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, orders.ShipCity) AS ranked_sales WHERE rn = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the retention rate of customers from last year?",
        "output": "SELECT COUNT(DISTINCT o1.CustomerID) * 1.0 / NULLIF(COUNT(DISTINCT o2.CustomerID), 0) AS RetentionRate FROM orders o1 LEFT JOIN orders o2 ON o1.CustomerID = o2.CustomerID WHERE o1.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' AND o2.OrderDate < '2022-01-01';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping country has the highest average order value?",
        "output": "SELECT o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry ORDER BY AvgOrderValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many distinct products are ordered each month?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS OrderMonth, COUNT(DISTINCT [Order Details].ProductID) AS DistinctProducts FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees report to each manager?",
        "output": "SELECT e.ReportsTo, COUNT(e.EmployeeID) AS NumberOfReports FROM employees e GROUP BY e.ReportsTo;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the total sales for each product?",
        "output": "SELECT ProductID, SUM(Quantity * UnitPrice) AS TotalSales FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product contributed the most to total sales?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] GROUP BY ProductID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the average order value for each month.",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped late for each shipping method?",
        "output": "SELECT ShipVia, SUM(CASE WHEN ShippedDate > RequiredDate THEN 1 ELSE 0 END) AS LateOrders FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What's the variance in order fulfillment time across different shipping methods?",
        "output": "SELECT ShipVia, VAR_SAMP(DATEDIFF(ShippedDate, OrderDate)) AS variance_fulfillment_time FROM orders GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total value of all products currently in stock?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) AS TotalStockValue FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for each product category?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time per shipping method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which orders have the highest discount applied?",
        "output": "SELECT OrderID, Discount FROM [Order Details] ORDER BY Discount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which month had the highest number of orders placed?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS order_month, COUNT(*) AS number_of_orders FROM orders GROUP BY order_month ORDER BY number_of_orders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated each month?",
        "output": "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM');",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost for orders shipped to different countries?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time for each supplier when delivering products?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the products that need to be reordered based on reorder level and units in stock.",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average shipment date variance from the required date?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgDateVariance FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average quantity per unit for products that have never been ordered?",
        "output": "SELECT AVG(CAST(SUBSTRING_INDEX(p.QuantityPerUnit, ' ', 1) AS DECIMAL)) as AvgQuantityPerUnit FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Analyze the order trend for the last quarter of 2023 compared to the previous year.",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS month, COUNT(orders.OrderID) AS order_count, '2023' AS year FROM orders WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-12-31' GROUP BY DATE_TRUNC('month', orders.OrderDate) UNION ALL SELECT DATE_TRUNC('month', orders.OrderDate) AS month, COUNT(orders.OrderID) AS order_count, '2022' AS year FROM orders WHERE orders.OrderDate BETWEEN '2022-10-01' AND '2022-12-31' GROUP BY DATE_TRUNC('month', orders.OrderDate)",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Determine the average discount applied on orders each month.",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, AVG([Order Details].Discount) AS AvgDiscount FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of shipping costs over different countries?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipCountry ORDER BY AvgShippingCost;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier provided the fastest delivery on average?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_delivery_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY avg_delivery_time ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the top performing territories based on sales?",
        "output": "SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS territory_sales FROM orders JOIN employeeTerritories ON orders.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY territories.TerritoryID ORDER BY territory_sales DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products have contributed the most to total sales?",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS product_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY product_sales DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the distribution of orders across different months?",
        "output": "SELECT MONTH(orders.OrderDate) AS month, COUNT(orders.OrderID) AS number_of_orders FROM orders GROUP BY MONTH(orders.OrderDate);",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were handled by each employee?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS TotalOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the inventory turnover ratio for each month?",
        "output": "SELECT MONTH(OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY MONTH(OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the top five products sold by each employee?",
        "output": "SELECT e.EmployeeID, od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, od.ProductID HAVING ROW_NUMBER() OVER (PARTITION BY e.EmployeeID ORDER BY SUM(od.Quantity) DESC) <= 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the sales trend for the top selling product over time?",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.ProductID = (SELECT od.ProductID FROM [Order Details] od GROUP BY od.ProductID ORDER BY SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) DESC FETCH FIRST 1 ROWS ONLY) GROUP BY DATE_FORMAT(o.OrderDate, '%Y-%m');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the average discount given on all orders.",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the correlation between shipping costs and order fulfillment time?",
        "output": "SELECT o1.Freight, DATEDIFF(o1.ShippedDate, o1.OrderDate) AS days_to_fulfill FROM orders o1 WHERE YEAR(o1.OrderDate) = 2023",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have never been ordered?",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which products have the highest total sales?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY TotalSales DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier provides the maximum number of different products?",
        "output": "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many unique products are ordered each month?",
        "output": "SELECT EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, COUNT(DISTINCT od.ProductID) AS UniqueProducts FROM Orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY OrderMonth",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the correlation between employee tenure and total sales?",
        "output": "SELECT e.EmployeeID, e.HireDate, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.HireDate ORDER BY ((CURRENT_DATE - e.HireDate) / INTERVAL '1 day') * SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have a reorder level above 100?",
        "output": "SELECT COUNT(*) AS ProductCount FROM products WHERE ReorderLevel > 100;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city received the most shipments?",
        "output": "SELECT orders.ShipCity, COUNT(orders.OrderID) AS NumberOfShipments FROM orders GROUP BY orders.ShipCity ORDER BY NumberOfShipments DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find out which product had the maximum discount applied.",
        "output": "SELECT p.ProductID, p.ProductName, od.Discount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID ORDER BY od.Discount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for each customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of order dates across different months?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which category has the most products reaching the reorder level?",
        "output": "SELECT p.CategoryID, COUNT(p.ProductID) AS ProductsToReorder FROM products p WHERE p.UnitsInStock <= p.ReorderLevel GROUP BY p.CategoryID ORDER BY ProductsToReorder DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How much revenue was generated in Europe last month?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE ShipCountry IN ('France', 'Germany', 'Spain', 'Italy') AND EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) AND EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) - 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Compare the sales performance of top 5 suppliers.",
        "output": "SELECT s.SupplierID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which orders were delivered after the required date?",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average time taken to fulfill an order in March 2023?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE MONTH(OrderDate) = 3 AND YEAR(OrderDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How does the average order value vary across different months?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS order_month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY order_month;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which month in 2023 had the highest average order value?",
        "output": "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE EXTRACT(YEAR FROM orders.OrderDate) = 2023 GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM') ORDER BY avg_order_value DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have a higher reorder level than their units in stock?",
        "output": "SELECT ProductID, ProductName FROM products WHERE ReorderLevel > UnitsInStock;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who are the employees with the highest discounts on products?",
        "output": "SELECT e.EmployeeID, MAX(od.Discount) AS MaxDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY MaxDiscount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total quantity ordered for each product?",
        "output": "SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od GROUP BY od.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the average sales per month for each product?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / COUNT(DISTINCT EXTRACT(YEAR_MONTH FROM orders.OrderDate)) AS AvgMonthlySales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How do sales figures compare between different ship methods?",
        "output": "SELECT orders.ShipVia, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipVia ORDER BY sales DESC",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total number of units ordered for products in each supplier group?",
        "output": "SELECT p.SupplierID, SUM(od.Quantity) AS TotalUnitsOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount given on all orders?",
        "output": "SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customer has placed the most orders this year?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS order_count FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY CustomerID ORDER BY order_count DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders have been shipped late over the past year?",
        "output": "SELECT COUNT(orders.OrderID) AS late_orders FROM orders WHERE orders.ShippedDate > orders.RequiredDate AND orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE();",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employees have the best sales performance in specific territories?",
        "output": "SELECT employees.EmployeeID, territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY employees.EmployeeID, territories.TerritoryDescription",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products are close to their reorder level (less than 10 units above)?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock - ReorderLevel < 10;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales by employees in each region?",
        "output": "SELECT e.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Region;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify customers who have not placed an order in the last year.",
        "output": "SELECT customers.CustomerID FROM customers LEFT JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderID IS NULL OR orders.OrderDate < CURRENT_DATE - INTERVAL '1 YEAR'",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the on-time delivery rate for each month?",
        "output": "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS Month, COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE NULL END) * 1.0 / COUNT(orders.OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the top 5 suppliers based on the number of different products they offer.",
        "output": "SELECT s.SupplierID, COUNT(DISTINCT p.ProductID) AS ProductCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY ProductCount DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Determine the age distribution of employees and their impact on sales.",
        "output": "SELECT e.EmployeeID, e.BirthDate, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] ON [Order Details].OrderID = o.OrderID GROUP BY e.EmployeeID, e.BirthDate",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the difference in total sales between the most and least successful employees in Q4 2022?",
        "output": "SELECT ABS(MAX(TotalSales) - MIN(TotalSales)) AS SalesDifference FROM (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE QUARTER(o.OrderDate) = 4 AND YEAR(o.OrderDate) = 2022 GROUP BY e.EmployeeID) AS sales_rank",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total sales quantity for each product?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalSalesQuantity FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the relationship between freight cost and order fulfillment time.",
        "output": "SELECT CORR(CAST(DATEDIFF(ShippedDate, OrderDate) AS DECIMAL), Freight) AS Correlation FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity and revenue generated for each supplier?",
        "output": "SELECT s.SupplierID, SUM(od.Quantity) as TotalQuantity, SUM(od.Quantity * (od.UnitPrice - (od.UnitPrice * od.Discount))) as TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the products with the highest margin between price and reorder level?",
        "output": "SELECT ProductName, UnitPrice - ReorderLevel AS Margin FROM products ORDER BY Margin DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine which employees have the lowest cancellation (orders not shipped) rates.",
        "output": "SELECT employees.EmployeeID, COALESCE(1.0 * SUM(CASE WHEN orders.ShippedDate IS NULL THEN 1 ELSE 0 END) / COUNT(orders.OrderID), 0) AS CancellationRate FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY CancellationRate ASC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have a higher selling price than the average selling price?",
        "output": "SELECT COUNT(*) FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders had a fulfillment time greater than 7 days?",
        "output": "SELECT COUNT(*) FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) > 7;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What percentage of orders were shipped within the required date?",
        "output": "SELECT ROUND((COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID)) * 100, 2) AS PercentageOnTime FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which shipping country has the highest average freight cost?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipCountry ORDER BY AvgFreight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the sales trends based on product categories monthly?",
        "output": "SELECT categories.CategoryName, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName, month ORDER BY month",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the monthly breakdown of sales per employee for the current year?",
        "output": "SELECT employees.EmployeeID, EXTRACT(MONTH FROM orders.OrderDate) AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE EXTRACT(YEAR FROM orders.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY employees.EmployeeID, OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue generated this year?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What are the five cities with the most orders shipped?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the average quantity ordered per order.",
        "output": "SELECT SUM([Order Details].Quantity) / COUNT(DISTINCT orders.OrderID) AS AverageQuantityPerOrder FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers from each city have made a purchase?",
        "output": "SELECT customers.City, COUNT(DISTINCT customers.CustomerID) FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.City;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the Customer Lifetime Value for each customer.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CustomerLifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the most common shipping region?",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS Frequency FROM orders GROUP BY ShipRegion ORDER BY Frequency DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the month with the highest number of new customers acquired in 2023.",
        "output": "SELECT MONTH(o.OrderDate) AS month, COUNT(DISTINCT o.CustomerID) AS new_customers FROM orders o LEFT JOIN (SELECT CustomerID FROM orders WHERE OrderDate < '2023-01-01') historical ON o.CustomerID = historical.CustomerID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND historical.CustomerID IS NULL GROUP BY MONTH(o.OrderDate) ORDER BY new_customers DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue generated in the last quarter?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the average discount offered per order.",
        "output": "SELECT AVG(od.Discount) AS average_discount FROM [Order Details] od;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have a unit price greater than the average unit price of all products?",
        "output": "SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a discount greater than 10%?",
        "output": "SELECT DISTINCT p.ProductID, p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.Discount > 0.10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which country has the highest freight cost in total?",
        "output": "SELECT o.ShipCountry, SUM(o.Freight) AS total_freight FROM orders o GROUP BY o.ShipCountry ORDER BY total_freight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipping method has the highest cost per order?",
        "output": "SELECT orders.ShipVia, AVG(orders.Freight) AS avg_shipping_cost FROM orders GROUP BY orders.ShipVia ORDER BY avg_shipping_cost DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the inventory turnover ratio for each product category.",
        "output": "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the top 5 countries with the most customers?",
        "output": "SELECT Country, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY Country ORDER BY NumberOfCustomers DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees who have generated sales above $100,000.",
        "output": "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 100000;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which category of products has the most units on order?",
        "output": "SELECT CategoryID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products WHERE UnitsOnOrder > 0 GROUP BY CategoryID ORDER BY TotalUnitsOnOrder DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of products by supplier?",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AverageUnitPrice FROM products GROUP BY SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the percentage of orders with a discount?",
        "output": "SELECT COUNT(OrderID) * 100.0 / NULLIF(COUNT(*), 0) AS DiscountedOrderPercentage FROM [Order Details] WHERE Discount > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 3 categories with the highest sales by quantity?",
        "output": "SELECT p.CategoryID, SUM(od.Quantity) AS TotalQuantitySold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.CategoryID ORDER BY TotalQuantitySold DESC LIMIT 3",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of unique customers placing orders in each quarter?",
        "output": "SELECT CONCAT(YEAR(OrderDate), '-Q', QUARTER(OrderDate)) AS OrderQuarter, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders GROUP BY CONCAT(YEAR(OrderDate), '-Q', QUARTER(OrderDate));",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 5 best-selling products by quantity?",
        "output": "SELECT ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the proportion of products that are discontinued.",
        "output": "SELECT COUNT(ProductID) * 1.0 / (SELECT COUNT(*) FROM products) AS ProportionDiscontinued FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How does the average order value change over different months?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the month with the highest on-time delivery rate.",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(*)) AS OnTimeRate FROM orders GROUP BY Month ORDER BY OnTimeRate DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have sold more units than they have in stock?",
        "output": "SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName HAVING SUM(od.Quantity) > MAX(p.UnitsInStock)",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order this year?",
        "output": "SELECT AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which countries have the highest number of customers?",
        "output": "SELECT Country, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY Country ORDER BY NumberOfCustomers DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total discounts offered by each employee this year.",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which city has the most customers based on the total number of orders in 2023?",
        "output": "SELECT customers.City, COUNT(DISTINCT customers.CustomerID) AS total_customers FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY customers.City ORDER BY total_customers DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average order quantity per supplier?",
        "output": "SELECT SupplierID, AVG(od.Quantity) AS AverageOrderQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of shipping times (in days) for all orders?",
        "output": "SELECT DATEDIFF(ShippedDate, OrderDate) AS ShippingTimeDays, COUNT(*) AS OrderCount FROM orders GROUP BY ShippingTimeDays ORDER BY ShippingTimeDays;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many products were ordered on the first order of each customer?",
        "output": "SELECT o.CustomerID, COUNT(od.ProductID) AS product_count FROM (SELECT CustomerID, OrderID, ROW_NUMBER() OVER (PARTITION BY CustomerID ORDER BY OrderDate) AS rn FROM orders) AS first_orders JOIN [Order Details] od ON first_orders.OrderID = od.OrderID WHERE first_orders.rn = 1 GROUP BY o.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the total sales for each employee by product category.",
        "output": "SELECT employees.EmployeeID, [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, [Order Details].ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which shipping method is most frequently used?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS NumOrders FROM orders GROUP BY ShipVia ORDER BY NumOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost by shipping company for the last year?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total quantity of products ordered in 2023?",
        "output": "SELECT SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total quantity of products on order?",
        "output": "SELECT SUM(UnitsOnOrder) FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have a stock level below their reorder level?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier had the fastest average delivery time this year?",
        "output": "SELECT p.SupplierID, s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS FastestDeliveryTime FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE YEAR(o.ShippedDate) = YEAR(CURDATE()) GROUP BY p.SupplierID, s.CompanyName ORDER BY FastestDeliveryTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed by each customer in January 2023?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What month had the highest total sales and what was the amount?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN \"Order Details\" ON orders.OrderID = \"Order Details\".OrderID GROUP BY TO_CHAR(OrderDate, 'YYYY-MM') ORDER BY TotalSales DESC FETCH FIRST 1 ROW ONLY;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List all orders that have not been shipped yet.",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the total sales for each product category?",
        "output": "SELECT products.CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the distribution of orders placed in each month of 2022?",
        "output": "SELECT EXTRACT(MONTH FROM o.OrderDate) AS order_month, COUNT(o.OrderID) AS order_count FROM orders o WHERE EXTRACT(YEAR FROM o.OrderDate) = 2022 GROUP BY order_month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How much freight cost was incurred for each shipping method?",
        "output": "SELECT orders.ShipVia, SUM(orders.Freight) AS total_freight FROM orders GROUP BY orders.ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many shipments were completed on weekends?",
        "output": "SELECT COUNT(OrderID) AS weekend_shipments FROM orders WHERE DAYOFWEEK(ShippedDate) IN (7, 1);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a reorder level higher than 50?",
        "output": "SELECT ProductName FROM products WHERE ReorderLevel > 50;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How does the inventory turnover ratio vary by product category?",
        "output": "SELECT CategoryID, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS CategoryInventoryTurnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the on-time delivery rate for the year 2023?",
        "output": "SELECT COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS on_time_delivery_rate FROM orders WHERE YEAR(OrderDate) = 2023;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have achieved sales above a specific threshold?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID HAVING TotalSales > 10000;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products are supplied by each supplier?",
        "output": "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS ProductCount FROM suppliers LEFT JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the trend of total sales over each quarter in the last two years?",
        "output": "SELECT CONCAT(YEAR(orders.OrderDate), '-Q', QUARTER(orders.OrderDate)) as quarter, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN DATE_SUB(NOW(), INTERVAL 2 YEAR) AND NOW() GROUP BY YEAR(orders.OrderDate), QUARTER(orders.OrderDate) ORDER BY YEAR(orders.OrderDate), QUARTER(orders.OrderDate)",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue for the current month?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What proportion of total sales is contributed by discontinued products?",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice) / (SELECT SUM(Quantity * UnitPrice) FROM [Order Details]) AS Proportion FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the sales contribution percentage of each employee to the total sales.",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / (SELECT SUM(od2.UnitPrice * od2.Quantity * (1 - od2.Discount)) FROM [Order Details] od2) * 100 AS SalesContribution FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the revenue generated for each product category?",
        "output": "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS CategoryRevenue FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "In which region do we see the highest average shipping cost?",
        "output": "SELECT ShipRegion, AVG(Freight) AS avg_shipping_cost FROM orders GROUP BY ShipRegion ORDER BY avg_shipping_cost DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What are the top 3 regions based on the number of orders placed?",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipRegion ORDER BY OrderCount DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the most common shipping method used?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipVia ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average unit price of products for each supplier?",
        "output": "SELECT suppliers.SupplierID, AVG(products.UnitPrice) AS AverageUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the top 5 best-selling products in 2023.",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY products.ProductID ORDER BY total_quantity DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which city has the most suppliers located?",
        "output": "SELECT City, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY City ORDER BY SupplierCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the monthly sales trend for each employee over the last year.",
        "output": "SELECT e.EmployeeID, DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY e.EmployeeID, DATE_FORMAT(o.OrderDate, '%Y-%m');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a reorder level higher than the units in stock?",
        "output": "SELECT ProductID, ProductName FROM products WHERE ReorderLevel > UnitsInStock;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the top 3 suppliers based on the number of products supplied.",
        "output": "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who are the top 3 employees with the highest sales in a given month?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many discontinued products are there in the inventory?",
        "output": "SELECT COUNT(ProductID) FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated by each customer?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the revenue distribution by order for each customer?",
        "output": "SELECT customers.CustomerID, orders.OrderID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS RevenuePerOrder FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID, orders.OrderID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total revenue generated by each shipping method?",
        "output": "SELECT ShipVia, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest difference between units in stock and reorder level?",
        "output": "SELECT ProductName, (UnitsInStock - ReorderLevel) AS StockDifference FROM products ORDER BY StockDifference DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have been ordered with a discount, and what is the total discount amount?",
        "output": "SELECT products.ProductName, SUM([Order Details].Discount * [Order Details].Quantity * [Order Details].UnitPrice) AS TotalDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount > 0 GROUP BY products.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue for each month?",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping recipient has the most orders?",
        "output": "SELECT ShipName, COUNT(OrderID) AS num_orders FROM orders GROUP BY ShipName ORDER BY num_orders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the average discount given on all product sales.",
        "output": "SELECT AVG(Discount) as AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average shipping time?",
        "output": "SELECT AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageShippingTime FROM orders o;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the relationship between order fulfillment time and freight cost?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime, AVG(Freight) AS AvgFreightCost FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Determine which customer placed the most orders.",
        "output": "SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipping company offers the lowest average cost per order?",
        "output": "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName ORDER BY avg_cost ASC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the customer retention rate for the last year.",
        "output": "SELECT COUNT(DISTINCT o.CustomerID) * 100.0 / (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR)) AS RetentionRate FROM orders o WHERE OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE();",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the average unit price of products per supplier.",
        "output": "SELECT s.SupplierID, s.CompanyName, AVG(p.UnitPrice) AS AvgUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total number of discontinued products?",
        "output": "SELECT COUNT(*) AS total_discontinued_products FROM products WHERE Discontinued = 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount given on orders?",
        "output": "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which country placed the most orders?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCountry ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products are below their reorder level?",
        "output": "SELECT COUNT(ProductID) FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the highest recorded order quantity for any product?",
        "output": "SELECT MAX(Quantity) AS MaxQuantity FROM [Order Details]",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the customer with the most orders that were shipped before the required date.",
        "output": "SELECT CustomerID, COUNT(OrderID) AS EarlyOrders FROM orders WHERE ShippedDate < RequiredDate GROUP BY CustomerID ORDER BY EarlyOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top-performing products by sales quantity?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalOrdered FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalOrdered DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders did each employee process?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrdersProcessed FROM orders GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees report directly to each manager?",
        "output": "SELECT e.ReportsTo, COUNT(e.EmployeeID) AS Reportees FROM employees e GROUP BY e.ReportsTo",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the on-time delivery rate over the past six months?",
        "output": "SELECT MONTH(orders.ShippedDate) AS month, SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.ShippedDate >= DATEADD(MONTH, -6, CURRENT_DATE) GROUP BY MONTH(orders.ShippedDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify orders where shipping cost exceeds the cost of goods.",
        "output": "SELECT OrderID FROM orders WHERE Freight > cost_of_goods_function(OrderID);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated by each product?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS product_sales FROM [Order Details] GROUP BY [Order Details].ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the on-time delivery rate for 2023?",
        "output": "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE NULL END) * 1.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total sales revenue for each product, including discounts?",
        "output": "SELECT [Order Details].ProductID, SUM(([Order Details].UnitPrice * [Order Details].Quantity) * (1 - Discount)) AS TotalRevenue FROM [Order Details] GROUP BY [Order Details].ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total stock value for each product?",
        "output": "SELECT p.ProductName, (p.UnitsInStock * p.UnitPrice) AS StockValue FROM products p;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customer has the highest lifetime value?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY lifetime_value DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "List the top five employees based on total sales generated.",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 5",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for each month in 2023?",
        "output": "SELECT MONTH(orders.OrderDate) AS order_month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY MONTH(orders.OrderDate)",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest sales in the last month?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average freight cost per order for each employee?",
        "output": "SELECT employees.EmployeeID, AVG(orders.Freight) AS AverageFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the most orders with over $1000 in sales value?",
        "output": "SELECT e.EmployeeID, COUNT(*) AS HighValueOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, o.OrderID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 1000 ORDER BY HighValueOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the inventory turnover ratio for each product in 2023.",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY products.ProductID",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How does the turnover ratio vary by category?",
        "output": "SELECT CategoryID, (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) AS TurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers placed orders during a specific quarterly period?",
        "output": "SELECT COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-03-31';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have been discontinued?",
        "output": "SELECT ProductID, ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many distinct products were ordered in the first quarter of 2023?",
        "output": "SELECT COUNT(DISTINCT ProductID) FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-03-31';",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the customers who spent more than $5000 in total.",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSpent FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID HAVING TotalSpent > 5000;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with sales revenue exceeding $10,000.",
        "output": "SELECT ProductName FROM (SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName) AS sub_query WHERE TotalRevenue > 10000;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find all orders where the shipping address is in London.",
        "output": "SELECT * FROM orders WHERE ShipCity = 'London';",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the top 5 customers with the highest lifetime value.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY LifetimeValue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were delivered on or before the required date for each month?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY EXTRACT(YEAR FROM OrderDate), EXTRACT(MONTH FROM OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total revenue for orders shipped after their required date.",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS DelayedRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales for each employee grouped by country?",
        "output": "SELECT employees.EmployeeID, orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, orders.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List suppliers with an average product unit price higher than $20.",
        "output": "SELECT SupplierID FROM products GROUP BY SupplierID HAVING AVG(UnitPrice) > 20;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were fulfilled on time in Q1 2023?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate <= RequiredDate AND EXTRACT(QUARTER FROM OrderDate) = 1 AND EXTRACT(YEAR FROM OrderDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers have the lowest average product price?",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY SupplierID ORDER BY AveragePrice ASC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many returning customers do we have this year compared to the last?",
        "output": "SELECT (SELECT COUNT(DISTINCT o1.CustomerID) FROM orders o1 WHERE o1.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND o1.CustomerID IN (SELECT o2.CustomerID FROM orders o2 WHERE o2.OrderDate < '2023-01-01')) AS returning_customers;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the month with the highest sales volume for each product.",
        "output": "SELECT ProductID, OrderMonth, TotalMonthlySales FROM (SELECT od.ProductID, EXTRACT(MONTH FROM o.OrderDate) as OrderMonth, SUM(od.Quantity) as TotalMonthlySales, RANK() OVER (PARTITION BY od.ProductID ORDER BY SUM(od.Quantity) DESC) as sales_rank FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY od.ProductID, OrderMonth) ranked_sales WHERE sales_rank = 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customers have placed orders in every month of 2023?",
        "output": "SELECT customers.CustomerID, customers.CompanyName FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY customers.CustomerID HAVING COUNT(DISTINCT MONTH(orders.OrderDate)) = 12",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products are currently out of stock?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders were delivered on time last month?",
        "output": "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) - 1 AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders have a fulfillment time greater than the average?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) > (SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) FROM orders);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the products with the largest discrepancy between units in stock and units on order.",
        "output": "SELECT ProductID, ProductName, (UnitsInStock - UnitsOnOrder) AS StockDiscrepancy FROM products ORDER BY StockDiscrepancy DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the cumulative stock level for each supplier?",
        "output": "SELECT SupplierID, SUM(UnitsInStock) AS TotalStock FROM products GROUP BY SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month had the highest total freight costs?",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS month, SUM(Freight) AS total_freight FROM orders GROUP BY month ORDER BY total_freight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the lead time variability for each supplier.",
        "output": "SELECT s.SupplierID, STDDEV(DATEDIFF(o.ShippedDate, o.OrderDate)) AS LeadTimeVariability FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated by each customer over their lifetime?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which territory has the highest sales revenue this year?",
        "output": "SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS territory_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employeeTerritories ON orders.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY territories.TerritoryDescription ORDER BY territory_sales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What products have been ordered more than 100 times?",
        "output": "SELECT products.ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName HAVING SUM([Order Details].Quantity) > 100;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the supplier with the most products on order.",
        "output": "SELECT s.SupplierID, s.CompanyName, SUM(p.UnitsOnOrder) AS TotalUnitsOnOrder FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID, s.CompanyName ORDER BY TotalUnitsOnOrder DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders had a discount applied?",
        "output": "SELECT COUNT(DISTINCT od.OrderID) FROM [Order Details] od WHERE od.Discount > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the most frequently ordered product?",
        "output": "SELECT od.ProductID, COUNT(od.ProductID) AS Frequency FROM [Order Details] od GROUP BY od.ProductID ORDER BY Frequency DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What percentage of total stock is made up by discontinued products?",
        "output": "SELECT (SUM(CASE WHEN Discontinued = 1 THEN UnitsInStock ELSE 0 END) / SUM(UnitsInStock) * 100.0) AS DiscontinuedStockPercentage FROM products;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the top 5 products by total sales quantity.",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product category has the most units on order?",
        "output": "SELECT CategoryID, SUM(UnitsOnOrder) AS TotalOnOrder FROM products GROUP BY CategoryID ORDER BY TotalOnOrder DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order fulfillment time for the past year?",
        "output": "SELECT AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgFulfillmentTime FROM orders o WHERE o.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the correlation between freight cost and order fulfillment time?",
        "output": "SELECT CORR(Freight, DATEDIFF(ShippedDate, OrderDate)) AS Correlation FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time taken to fulfill an order for each month?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY EXTRACT(YEAR FROM OrderDate), EXTRACT(MONTH FROM OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for each month?",
        "output": "SELECT MONTH(orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY MONTH(orders.OrderDate);",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total quantity of each product ordered?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantityOrdered FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the top three cities with the most orders handled by employees?",
        "output": "SELECT o.ShipCity, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipCity ORDER BY OrderCount DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the customers who have not placed any orders in the last year.",
        "output": "SELECT c.CustomerID, c.CompanyName FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderID IS NULL OR o.OrderDate < CURRENT_DATE - INTERVAL '1 year';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the average discount given per order.",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers that have products with no stock and no units on order.",
        "output": "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsInStock = 0 AND products.UnitsOnOrder = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List all employees who have not placed any orders in the last quarter.",
        "output": "SELECT employees.EmployeeID FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.EmployeeID IS NULL OR (orders.OrderDate < DATEADD(QUARTER, -1, CURRENT_DATE) OR orders.OrderDate >= CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the average discount applied to orders by month.",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS month, AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY DATE_TRUNC('month', orders.OrderDate)",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the top 3 cities based on total sales revenue in 2023?",
        "output": "SELECT customers.City, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY customers.City ORDER BY total_sales DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee has the highest number of orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product categories have the highest average unit price?",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID ORDER BY AveragePrice DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total sales revenue for each supplier?",
        "output": "SELECT SupplierID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Determine if there's a peak shipping season based on order fulfillment.",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS month, COUNT(OrderID) AS order_count FROM orders GROUP BY month ORDER BY order_count DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of distinct products provided by each supplier?",
        "output": "SELECT suppliers.CompanyName, COUNT(DISTINCT products.ProductID) AS DistinctProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which month had the highest total order value in the last year?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS YearMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY YearMonth ORDER BY TotalValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time for the first half of 2023?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average inventory turnover ratio on a monthly basis?",
        "output": "SELECT MONTH(o.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY MONTH(o.OrderDate)",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 5 best-selling products?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) as TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSold DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest total sales?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the product with the highest revenue generated in 2023?",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY products.ProductID, products.ProductName ORDER BY total_revenue DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the top 5 cities by number of customers?",
        "output": "SELECT City, COUNT(CustomerID) AS CustomerCount FROM customers GROUP BY City ORDER BY CustomerCount DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the product categories with the highest average stock value.",
        "output": "SELECT c.CategoryID, AVG(p.UnitsInStock * p.UnitPrice) AS AvgStockValue FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID ORDER BY AvgStockValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "For which city were the most orders shipped last month?",
        "output": "SELECT ShipCity, COUNT(*) AS OrderCount FROM orders WHERE OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product had the highest sales in terms of quantity?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC FETCH FIRST 1 ROW ONLY;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total discount given across all orders.",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Determine the month with the highest average customer retention rate.",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS month, (COUNT(DISTINCT CASE WHEN OrderDate BETWEEN '2023-01-01' AND '2023-12-31' THEN CustomerID END) * 1.0 / NULLIF(COUNT(DISTINCT CASE WHEN OrderDate < '2023-01-01' THEN CustomerID END), 0)) AS customer_retention_rate FROM orders GROUP BY month ORDER BY customer_retention_rate DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the trend in inventory levels over the past three months for each product?",
        "output": "SELECT ProductName, UnitsInStock FROM products WHERE DATE_SUB(CURDATE(), INTERVAL 3 MONTH) < NOW() ORDER BY ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the employee who fulfilled the most orders.",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS FulfilledOrders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY EmployeeID ORDER BY FulfilledOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average salary of employees by their title?",
        "output": "SELECT e.Title, AVG(e.Salary) AS AvgSalary FROM employees e GROUP BY e.Title;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the most frequently used shipping country.",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCountry ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders have missing shipping dates?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find suppliers who have shipped products most quickly on average.",
        "output": "SELECT s.SupplierID, s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID, s.CompanyName ORDER BY AvgShippingTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were shipped late?",
        "output": "SELECT (1.0 * COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) / COUNT(OrderID)) * 100 AS late_percentage FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the top 3 cities with the most orders placed.",
        "output": "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many suppliers are delivering products in less than 7 days?",
        "output": "SELECT COUNT(DISTINCT SupplierID) FROM (SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID HAVING lead_time < 7) AS supplier_lead_times",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product has the highest discount rate applied?",
        "output": "SELECT p.ProductID, p.ProductName, od.Discount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID ORDER BY od.Discount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products are performing best in terms of quantity sold?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS quantity_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY quantity_sold DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product has the highest sales volume in the last quarter?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE QUARTER(orders.OrderDate) = 4 GROUP BY products.ProductName ORDER BY total_quantity DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue generated from orders in the last month?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost for all orders shipped in 2022?",
        "output": "SELECT SUM(o.Freight) AS TotalFreightCost FROM orders o WHERE YEAR(o.ShippedDate) = 2022;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the supplier providing the most diverse range of products.",
        "output": "SELECT suppliers.CompanyName, COUNT(DISTINCT products.ProductID) AS ProductVariety FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID ORDER BY ProductVariety DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees whose total sales have increased each quarter in 2022.",
        "output": "SELECT e.EmployeeID FROM employees e JOIN (SELECT o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, QUARTER(o.OrderDate) AS Quarter FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2022 GROUP BY o.EmployeeID, QUARTER(o.OrderDate)) AS sales_trend ON e.EmployeeID = sales_trend.EmployeeID GROUP BY e.EmployeeID HAVING SUM(CASE WHEN Quarter = 1 THEN TotalSales ELSE 0 END) < SUM(CASE WHEN Quarter = 2 THEN TotalSales ELSE 0 END) AND SUM(CASE WHEN Quarter = 2 THEN TotalSales ELSE 0 END) < SUM(CASE WHEN Quarter = 3 THEN TotalSales ELSE 0 END) AND SUM(CASE WHEN Quarter = 3 THEN TotalSales ELSE 0 END) < SUM(CASE WHEN Quarter = 4 THEN TotalSales ELSE 0 END)",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount given on products?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders did each employee handle monthly?",
        "output": "SELECT EmployeeID, DATE_TRUNC('month', OrderDate) AS month, COUNT(OrderID) AS num_orders FROM orders GROUP BY EmployeeID, month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the number of orders shipped to each region?",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipRegion;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee's orders have incurred the highest freight charges?",
        "output": "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY TotalFreight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders include products with a discount applied?",
        "output": "SELECT COUNT(DISTINCT orders.OrderID) AS discount_orders FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE [Order Details].Discount > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the top 5 customers by total revenue.",
        "output": "SELECT orders.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.CustomerID ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How much revenue has been generated from products on sale during the last month?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) as Revenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0 AND od.OrderDate >= DATEADD(month, -1, CAST(GETDATE() AS DATE)) GROUP BY p.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for each quarter in 2023?",
        "output": "SELECT QUARTER(orders.OrderDate) AS quarter, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY QUARTER(orders.OrderDate)",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees who have not placed any orders in the current year.",
        "output": "SELECT employees.FirstName, employees.LastName FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) WHERE orders.OrderID IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What percentage of products is currently in stock versus on order?",
        "output": "SELECT SUM(UnitsInStock) * 100.0 / NULLIF(SUM(UnitsInStock + UnitsOnOrder), 0) AS InStockPercentage FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest number of different products in their orders?",
        "output": "SELECT e.EmployeeID, COUNT(DISTINCT od.ProductID) AS ProductCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY ProductCount DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products with the highest price fluctuation orders (Order UnitPrice vs. product UnitPrice).",
        "output": "SELECT p.ProductID, p.ProductName, od.UnitPrice AS OrderUnitPrice, p.UnitPrice AS ProductUnitPrice FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.UnitPrice != p.UnitPrice",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the average discount given per supplier.",
        "output": "SELECT s.SupplierID, s.CompanyName, AVG(od.Discount) AS AverageDiscount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID, s.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the reorder frequency of products over the last six months?",
        "output": "SELECT ProductID, COUNT(*) AS ReorderCount FROM products WHERE UnitsInStock < ReorderLevel GROUP BY ProductID ORDER BY ReorderCount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the average unit price of products by each supplier.",
        "output": "SELECT s.SupplierID, s.CompanyName, AVG(p.UnitPrice) AS AverageUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID, s.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Find the average discount given per order in 2023.",
        "output": "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has shipped orders the fastest, on average?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgShippingTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON suppliers.SupplierID = products.SupplierID WHERE orders.ShippedDate IS NOT NULL GROUP BY suppliers.CompanyName ORDER BY AvgShippingTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products are below their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees are assigned to each sales territory?",
        "output": "SELECT e.Region, COUNT(DISTINCT e.EmployeeID) AS EmployeeCount FROM employees e GROUP BY e.Region",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time this quarter?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE QUARTER(orders.OrderDate) = QUARTER(CURRENT_DATE) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the proportion of orders shipped on time by each employee?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OnTimeOrders, COUNT(*) AS TotalOrders, COUNT(o.OrderID) * 1.0 / COUNT(*) AS ProportionOnTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many unique customers placed orders in the last quarter?",
        "output": "SELECT COUNT(DISTINCT CustomerID) AS unique_customers FROM orders WHERE QUARTER(OrderDate) = QUARTER(CURRENT_DATE()) - 1 AND YEAR(OrderDate) = YEAR(CURRENT_DATE());",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employees with no sales recorded in the last month.",
        "output": "SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND o.OrderDate < CURDATE() WHERE o.OrderID IS NULL",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 5 products with the highest reorder level?",
        "output": "SELECT ProductID, ProductName, ReorderLevel FROM products ORDER BY ReorderLevel DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product has the highest number of units on order?",
        "output": "SELECT ProductName FROM products WHERE UnitsOnOrder = (SELECT MAX(UnitsOnOrder) FROM products);",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the customer retention rate for this year?",
        "output": "(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE)) / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR));",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total sales revenue for each product.",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average unit price of products provided by each supplier?",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AverageUnitPrice FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were delivered on or before their required date in the last year?",
        "output": "SELECT ROUND(SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(OrderID), 2) AS on_time_rate FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city had the highest number of shipped orders?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS NumShippedOrders FROM orders GROUP BY ShipCity ORDER BY NumShippedOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the most popular shipping method by number of orders?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS order_count FROM orders GROUP BY ShipVia ORDER BY order_count DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have delivered products with an average lead time exceeding 15 days?",
        "output": "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID HAVING AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) > 15;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the trend in average shipping cost over the last six months?",
        "output": "SELECT MONTH(OrderDate) AS month, AVG(Freight) AS avg_cost FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '6 month' GROUP BY MONTH(OrderDate) ORDER BY MONTH(OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find which region has the highest average freight cost.",
        "output": "SELECT ShipRegion, AVG(Freight) AS AverageFreightCost FROM orders GROUP BY ShipRegion ORDER BY AverageFreightCost DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the customer retention rate for the last year?",
        "output": "SELECT (COUNT(DISTINCT CustomerID) FILTER (WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31')) / NULLIF(COUNT(DISTINCT CustomerID) FILTER (WHERE OrderDate < '2022-01-01'), 0) AS RetentionRate FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which country has the highest percentage of on-time deliveries?",
        "output": "SELECT ShipCountry, ROUND(SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(OrderID), 2) AS on_time_rate FROM orders GROUP BY ShipCountry ORDER BY on_time_rate DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have a unit price above the average unit price?",
        "output": "SELECT COUNT(*) FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the retention rate of customers over the last year?",
        "output": "SELECT COUNT(DISTINCT CASE WHEN OrderDate BETWEEN '2022-01-01' AND '2022-12-31' THEN CustomerID END) / NULLIF(COUNT(DISTINCT CASE WHEN OrderDate < '2022-01-01' THEN CustomerID END), 0) AS RetentionRate FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method has the most orders?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipVia ORDER BY NumberOfOrders DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product has the highest inventory turnover ratio for the last month?",
        "output": "SELECT od.ProductID, (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID -- Assuming there is an OrderDate column; it's missing in schema WHERE MONTH(od.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(od.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY od.ProductID ORDER BY InventoryTurnoverRatio DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee fulfilled the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrdersFulfilled FROM orders GROUP BY EmployeeID ORDER BY OrdersFulfilled DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders shipped by each shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed each month in 2022?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = 2022 GROUP BY Year, Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees who have a sales growth of more than 10% compared to last year.",
        "output": "SELECT employees.EmployeeID, ((SUM(CASE WHEN YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END) / COALESCE(SUM(CASE WHEN YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END), 1)) - 1) * 100 AS SalesGrowth FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID HAVING SalesGrowth > 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 5 customers by lifetime value.",
        "output": "SELECT customers.CustomerID, SUM(\"Order Details\".UnitPrice * \"Order Details\".Quantity * (1 - \"Order Details\".Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN \"Order Details\" ON orders.OrderID = \"Order Details\".OrderID GROUP BY customers.CustomerID ORDER BY LifetimeValue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order value for each customer?",
        "output": "SELECT c.CustomerID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average freight cost per shipment method?",
        "output": "SELECT ShipVia, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost per shipping method?",
        "output": "SELECT ShipVia, AVG(Freight) AS avg_freight_cost FROM orders GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have a growth in sales month over month?",
        "output": "SELECT e.EmployeeID, DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, DATE_FORMAT(o.OrderDate, '%Y-%m') HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)), 1) OVER (PARTITION BY e.EmployeeID ORDER BY DATE_FORMAT(o.OrderDate, '%Y-%m'))",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the best average lead time?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY lead_time ASC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the percentage of orders with a discount greater than 10%?",
        "output": "SELECT (COUNT(*) FILTER (WHERE Discount > 0.1) * 100.0 / COUNT(*)) AS DiscountedOrderPercentage FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest number of currently discontinued products?",
        "output": "SELECT s.SupplierID, s.CompanyName, COUNT(p.ProductID) AS DiscontinuedCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1 GROUP BY s.SupplierID, s.CompanyName ORDER BY DiscontinuedCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the total number of distinct customers handled by each employee.",
        "output": "SELECT e.EmployeeID, COUNT(DISTINCT o.CustomerID) AS DistinctCustomers FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the percentage of returning customers in 2023?",
        "output": "SELECT (COUNT(DISTINCT new_orders.CustomerID) * 100.0 / NULLIF(COUNT(DISTINCT old_orders.CustomerID), 0)) AS retention_rate FROM orders new_orders JOIN orders old_orders ON new_orders.CustomerID = old_orders.CustomerID WHERE new_orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND old_orders.OrderDate < '2023-01-01'",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost incurred by each country each month?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM'), ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the products with the highest discount rates and their total sales.",
        "output": "SELECT ProductName, MAX(Discount) AS MaxDiscount, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY MaxDiscount DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products are generating the most revenue?",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID ORDER BY revenue DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for each shipping company?",
        "output": "SELECT ShipVia, SUM(Freight) AS total_freight_cost FROM orders GROUP BY ShipVia ORDER BY total_freight_cost DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the cities with the highest average shipping cost.",
        "output": "SELECT ShipCity, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipCity ORDER BY AvgShippingCost DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "For each employee, what is the average time taken to ship an order?",
        "output": "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employees handled the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product had the highest sales in the last month?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) - 1 AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY products.ProductID ORDER BY total_sales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees who have not managed any orders this year.",
        "output": "SELECT e.EmployeeID, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) WHERE o.OrderID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total discount given by each employee over the last quarter?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE QUARTER(o.OrderDate) = QUARTER(CURRENT_DATE) - 1 AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Determine the inventory turnover ratio for each product category.",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How does inventory turnover ratio change quarterly for each category?",
        "output": "SELECT c.CategoryID, EXTRACT(QUARTER FROM o.order_date) as Quarter, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) as InventoryTurnover FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY c.CategoryID, Quarter ORDER BY c.CategoryID, Quarter;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for each shipping country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders handled by each shipping method?",
        "output": "SELECT ShipVia, COUNT(*) AS TotalOrders FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the lowest average delivery lead time?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName ORDER BY AverageLeadTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier has the highest average unit price for their products?",
        "output": "SELECT s.SupplierID, AVG(p.UnitPrice) AS AvgUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY AvgUnitPrice DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have placed more than five orders?",
        "output": "SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the orders that were shipped late (after the required date).",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product has the highest turnover ratio?",
        "output": "SELECT p.ProductID, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS TurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY TurnoverRatio DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for orders shipped to the USA?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShipCountry = 'USA';",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the overall lead time for all orders for each supplier.",
        "output": "SELECT suppliers.CompanyName, SUM(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS TotalLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY suppliers.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers with the highest lifetime value.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY LifetimeValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which orders were shipped late?",
        "output": "SELECT o.OrderID FROM orders o WHERE o.ShippedDate > o.RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the products with sales above the average sales-revenue.",
        "output": "SELECT products.ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName HAVING SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) > (SELECT AVG(total_sales) FROM (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID) AS subquery);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier offers the highest average unit price for their products?",
        "output": "SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AverageUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY AverageUnitPrice DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the longest fulfillment time recorded?",
        "output": "SELECT MAX(DATEDIFF(ShippedDate, OrderDate)) AS LongestFulfillmentTime FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which month had the highest freight cost and what was the cost?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Freight) AS TotalFreight FROM orders GROUP BY Month ORDER BY TotalFreight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order fulfillment time for each month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY DATE_TRUNC('month', orders.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers placed the highest number of orders?",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) AS NumberOfOrders FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID ORDER BY NumberOfOrders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average number of days between order and shipment?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShipTime FROM orders WHERE ShippedDate IS NOT NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the total number of orders delayed beyond the required date.",
        "output": "SELECT COUNT(o.OrderID) AS delayed_orders FROM orders o WHERE o.ShippedDate > o.RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders shipped to each country?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS total_orders FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders did not ship by the required date?",
        "output": "SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate OR ShippedDate IS NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the maximum order value recorded?",
        "output": "SELECT MAX([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MaxOrderValue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost per shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average time taken to fulfill an order each month?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Year, Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "List the orders that were shipped late regardless of the reason.",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier provides the most number of products?",
        "output": "SELECT SupplierID, COUNT(*) AS NumberOfProducts FROM products GROUP BY SupplierID ORDER BY NumberOfProducts DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers who have placed more than 10 orders.",
        "output": "SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the highest quantity ordered by an employee in any single order?",
        "output": "SELECT o.EmployeeID, MAX(od.Quantity) AS MaxQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee handled the most shipments last year?",
        "output": "SELECT EmployeeID, COUNT(*) AS ShipmentsHandled FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY EmployeeID ORDER BY ShipmentsHandled DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time by region?",
        "output": "SELECT regions.RegionDescription, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders JOIN employeeTerritories ON orders.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region regions ON territories.RegionID = regions.RegionID GROUP BY regions.RegionDescription",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee with the most delayed orders.",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS DelayedOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate > o.RequiredDate GROUP BY e.EmployeeID ORDER BY DelayedOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost for orders shipped to each region?",
        "output": "SELECT ShipRegion, AVG(Freight) AS avg_freight_cost FROM orders GROUP BY ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed and completed within the same month?",
        "output": "SELECT COUNT(orders.OrderID) FROM orders WHERE EXTRACT(YEAR FROM orders.OrderDate) = EXTRACT(YEAR FROM orders.ShippedDate) AND EXTRACT(MONTH FROM orders.OrderDate) = EXTRACT(MONTH FROM orders.ShippedDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest average lead time and what is that time?",
        "output": "SELECT s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.CompanyName ORDER BY AvgLeadTime DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers provide the most different products?",
        "output": "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Determine the on-time delivery rate for March 2023.",
        "output": "SELECT COUNT(o.OrderID) / (SELECT COUNT(OrderID) FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = 2023 AND EXTRACT(MONTH FROM OrderDate) = 3) AS OnTimeRate FROM orders o WHERE o.ShippedDate <= o.RequiredDate AND EXTRACT(YEAR FROM o.OrderDate) = 2023 AND EXTRACT(MONTH FROM o.OrderDate) = 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have inventory levels below the reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the shipping method most used for orders in April 2023.",
        "output": "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = 2023 AND EXTRACT(MONTH FROM OrderDate) = 4 GROUP BY ShipVia ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the Unit Price trend for products over time?",
        "output": "SELECT OrderDate, AVG([Order Details].UnitPrice) FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY OrderDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have been discontinued?",
        "output": "SELECT COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which countries have the most suppliers?",
        "output": "SELECT Country, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY Country ORDER BY SupplierCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the products that have never been ordered.",
        "output": "SELECT p.ProductID, p.ProductName FROM products p WHERE NOT EXISTS (SELECT 1 FROM [Order Details] od WHERE p.ProductID = od.ProductID);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have never been ordered?",
        "output": "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the sales performance of each product over the last month?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantitySold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IN (SELECT OrderID FROM orders WHERE orderDate BETWEEN '2023-09-01' AND '2023-09-30') GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 5 products by total sales revenue?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for the most recent month?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE()) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE())",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Find the average discount rate applied to all orders in 2023.",
        "output": "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products that are both low in stock and have high sales.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel AND ProductID IN (SELECT ProductID FROM [Order Details] GROUP BY ProductID HAVING SUM(Quantity) > 10);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a discount applied more than 10 times?",
        "output": "SELECT products.ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount > 0 GROUP BY products.ProductID, products.ProductName HAVING COUNT([Order Details].Discount) > 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What are the top 10 highest revenue-generating products?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalRevenue FROM [Order Details] GROUP BY ProductID ORDER BY TotalRevenue DESC LIMIT 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the average quantity ordered per product.",
        "output": "SELECT ProductID, AVG(Quantity) AS AvgQuantity FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order value per customer?",
        "output": "SELECT customers.CustomerID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products are close to or below their reorder level?",
        "output": "SELECT products.ProductName, products.UnitsInStock, products.ReorderLevel FROM products WHERE products.UnitsInStock <= products.ReorderLevel ORDER BY products.UnitsInStock ASC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products that have never been ordered.",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employees have shipped the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS num_orders FROM orders GROUP BY EmployeeID ORDER BY num_orders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total value of current inventory?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the monthly average order value for 2023?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Who are the top 5 suppliers by total sales revenue?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed by each customer?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products generate the highest revenue after discounts?",
        "output": "SELECT products.ProductID, products.ProductName, SUM(([Order Details].Quantity * [Order Details].UnitPrice) - ([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount)) AS NetRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName ORDER BY NetRevenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost incurred for orders processed by each employee?",
        "output": "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue generated for each month in 2023?",
        "output": "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE EXTRACT(YEAR FROM orders.OrderDate) = 2023 GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM')",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders include more than three products?",
        "output": "SELECT COUNT(OrderID) AS NumberOfOrders FROM (SELECT OrderID FROM [Order Details] GROUP BY OrderID HAVING COUNT(ProductID) > 3) AS Subquery;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the trend in total sales by quarter for the year 2023?",
        "output": "SELECT QUARTER(orders.OrderDate) AS order_quarter, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY QUARTER(orders.OrderDate)",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How does the on-time delivery rate vary by shipping method?",
        "output": "SELECT ShipVia, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 1.0 / COUNT(OrderID)) * 100 AS on_time_rate FROM orders GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total value of all inventory held?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method is used most frequently?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS UsageFrequency FROM orders GROUP BY ShipVia ORDER BY UsageFrequency DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of orders processed by each shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue generated from orders per supplier?",
        "output": "SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were late each month?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped after the required date?",
        "output": "SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total salary expenditure by region?",
        "output": "SELECT e.Region, SUM(e.Salary) AS TotalSalaryExpenditure FROM employees e GROUP BY e.Region",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders did each employee handle?",
        "output": "SELECT orders.EmployeeID, COUNT(*) AS orders_handled FROM orders GROUP BY orders.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the cumulative discount given on all orders?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many unique products have been ordered in total?",
        "output": "SELECT COUNT(DISTINCT ProductID) AS UniqueProductsOrdered FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the shortest lead time?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID ORDER BY lead_time ASC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which category has the highest sales quantity?",
        "output": "SELECT p.CategoryID, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 5 most frequently ordered products.",
        "output": "SELECT od.ProductID, COUNT(od.ProductID) AS Frequency FROM [Order Details] od GROUP BY od.ProductID ORDER BY Frequency DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which region has the highest average shipping cost?",
        "output": "SELECT ShipRegion, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY ShipRegion ORDER BY AverageShippingCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of units ordered for each product last month?",
        "output": "SELECT p.ProductID, SUM(od.Quantity) FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.orderDate BETWEEN YOUR_START_DATE AND YOUR_END_DATE GROUP BY p.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the sales trend over the last six months for each employee?",
        "output": "SELECT e.EmployeeID, MONTH(o.OrderDate) AS OrderMonth, YEAR(o.OrderDate) AS OrderYear, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS SalesAmount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -6, CURRENT_DATE) GROUP BY e.EmployeeID, OrderYear, OrderMonth",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the product with the highest discount given in any order detail.",
        "output": "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID ORDER BY od.Discount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost for orders with a fulfillment time under 2 days?",
        "output": "SELECT AVG(Freight) AS AvgFreight FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) < 2;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the percentage of orders shipped on time.",
        "output": "SELECT (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0) / COUNT(OrderID) AS OnTimeOrderPercentage FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the product with the most units on order.",
        "output": "SELECT ProductName FROM products ORDER BY UnitsOnOrder DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers are shipping products with a discount greater than 10%?",
        "output": "SELECT DISTINCT s.SupplierID, s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0.10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have not been ordered in the last 6 months?",
        "output": "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details] WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH));",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed in the last year?",
        "output": "SELECT COUNT(o.OrderID) FROM orders o WHERE o.OrderDate >= DATEADD(year, -1, GETDATE());",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Find out which product categories have the highest average discount in 2023.",
        "output": "SELECT c.CategoryID, AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN products p ON [Order Details].ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID JOIN orders o ON [Order Details].OrderID = o.OrderID WHERE YEAR(o.OrderDate) = 2023 GROUP BY c.CategoryID ORDER BY avg_discount DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the top 5 customers by total sales revenue.",
        "output": "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customer placed the highest number of orders?",
        "output": "SELECT CustomerID, COUNT(*) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the most delayed shipments?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS DelayedShipments FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate > o.RequiredDate GROUP BY e.EmployeeID ORDER BY DelayedShipments DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How much revenue is generated per employee monthly?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT DATE_FORMAT(orders.OrderDate, '%Y-%m')) AS revenue_per_employee FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the top 5 products in terms of unit price.",
        "output": "SELECT ProductID, ProductName, UnitPrice FROM products ORDER BY UnitPrice DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products are below the reorder level, and what are they?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the monthly total sales for the year 2023?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the current total inventory value by product?",
        "output": "SELECT ProductID, ProductName, UnitsInStock * UnitPrice AS InventoryValue FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated by each employee in 2023?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2023 GROUP BY e.EmployeeID",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How often do customers place repeat orders?",
        "output": "SELECT CustomerID, COUNT(OrderID) - 1 AS RepeatOrderCount FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders have been shipped late?",
        "output": "SELECT COUNT(*) AS late_orders FROM orders WHERE orders.ShippedDate > orders.RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What are the top 5 highest freight costs for a single order?",
        "output": "SELECT OrderID, Freight FROM orders ORDER BY Freight DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average freight cost per order?",
        "output": "SELECT AVG(Freight) AS AvgFreight FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time for the year 2023?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE YEAR(orders.OrderDate) = 2023",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated in January 2023?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(MONTH FROM o.OrderDate) = 1 AND EXTRACT(YEAR FROM o.OrderDate) = 2023;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the shipping methods with the highest number of deliveries.",
        "output": "SELECT ShipVia, COUNT(OrderID) AS DeliveryCount FROM orders GROUP BY ShipVia ORDER BY DeliveryCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee with the highest average discount on their orders.",
        "output": "SELECT e.EmployeeID, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AvgDiscount DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How has the total sales changed over the last year for each employee?",
        "output": "SELECT e.EmployeeID, EXTRACT(YEAR FROM o.OrderDate) AS Year, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY e.EmployeeID, Year ORDER BY Year DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the product with the highest average discount.",
        "output": "SELECT od.ProductID, AVG(od.Discount) AS AvgDiscount FROM [Order Details] od GROUP BY od.ProductID ORDER BY AvgDiscount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the trend in sales for products over time?",
        "output": "SELECT p.ProductID, EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, SUM(od.Quantity) AS MonthlySales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, OrderMonth ORDER BY OrderMonth",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which employees have handled the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the most popular product category based on the number of orders?",
        "output": "SELECT CategoryID, COUNT(DISTINCT [Order Details].OrderID) AS OrderCount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time taken to fulfill an order each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS month, AVG(DATE_PART('day', ShippedDate - OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the Inventory Turnover Ratio for the last month?",
        "output": "SELECT SUM(d.Quantity * d.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnover FROM [Order Details] d JOIN products p ON d.ProductID = p.ProductID WHERE d.OrderID IN (SELECT OrderID FROM orders WHERE OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE());",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customer had the highest shipping cost in the last quarter?",
        "output": "SELECT CustomerID, SUM(Freight) AS total_shipping_cost FROM orders WHERE OrderDate >= DATE_SUB(DATE_FORMAT(CURRENT_DATE, '%Y-%m-01'), INTERVAL 3 MONTH) AND OrderDate < DATE_FORMAT(CURRENT_DATE, '%Y-%m-01') GROUP BY CustomerID ORDER BY total_shipping_cost DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product has the highest average discount?",
        "output": "SELECT od.ProductID, AVG(od.Discount) AS AverageDiscount FROM [Order Details] od GROUP BY od.ProductID ORDER BY AverageDiscount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have been ordered more than 1000 times?",
        "output": "SELECT products.ProductID, products.ProductName FROM [Order Details] INNER JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID, products.ProductName HAVING SUM([Order Details].Quantity) > 1000;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a discount applied in their order details, and what is the total discounted amount?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscountedAmount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0 GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average fulfillment time for each employee?",
        "output": "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the correlation between employee hire date and their sales contribution?",
        "output": "SELECT employees.EmployeeID, employees.HireDate, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID, employees.HireDate ORDER BY employees.HireDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the supplier that has the most units in stock for their products.",
        "output": "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID, suppliers.CompanyName ORDER BY SUM(products.UnitsInStock) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier's products generate the most revenue?",
        "output": "SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY Revenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many distinct products are ordered per customer?",
        "output": "SELECT customers.CustomerID, COUNT(DISTINCT [Order Details].ProductID) AS DistinctProductCount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 5 products by revenue.",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS revenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY revenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average reorder level for products in each category?",
        "output": "SELECT CategoryID, AVG(ReorderLevel) AS AverageReorderLevel FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city had the highest average order value in 2022?",
        "output": "SELECT o.ShipCity, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2022 GROUP BY o.ShipCity ORDER BY AvgOrderValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the percentage increase in shipping cost year-over-year.",
        "output": "SELECT year, annual_freight_cost, (annual_freight_cost - prev_annual_freight_cost) * 100.0 / prev_annual_freight_cost AS percent_increase FROM (SELECT EXTRACT(YEAR FROM OrderDate) AS year, SUM(Freight) AS annual_freight_cost, LAG(SUM(Freight)) OVER (ORDER BY EXTRACT(YEAR FROM OrderDate)) AS prev_annual_freight_cost FROM orders GROUP BY year) AS yearly_costs;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total revenue generated in freight charges per shipping company?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreightRevenue FROM orders GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping recipient has received the most shipments?",
        "output": "SELECT orders.ShipName, COUNT(*) AS shipments_received FROM orders GROUP BY orders.ShipName ORDER BY shipments_received DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee generated the most sales in Q1 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE QUARTER(orders.OrderDate) = 1 AND YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total freight cost for all shipped orders?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShippedDate IS NOT NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the Customer Lifetime Value for each customer?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerLifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Detect any seasonal patterns in the shipping cost per order.",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS OrderMonth, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY OrderMonth ORDER BY OrderMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find out which products have been consistently ordered every month for the past year.",
        "output": "SELECT ProductName FROM products WHERE ProductID IN (SELECT ProductID FROM [Order Details] GROUP BY ProductID HAVING COUNT(DISTINCT DATE_TRUNC('month', OrderDate)) = 12);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month had the highest number of shipments?",
        "output": "SELECT DATE_TRUNC('month', ShippedDate) AS month, COUNT(OrderID) AS num_shipments FROM orders WHERE ShippedDate IS NOT NULL GROUP BY month ORDER BY num_shipments DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many discontinued products are still in stock?",
        "output": "SELECT ProductID, ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the total number of products sold by each employee.",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].Quantity) AS TotalProducts FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which region has the longest average shipping time?",
        "output": "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_shipping_time FROM orders GROUP BY ShipRegion ORDER BY avg_shipping_time DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were shipped late?",
        "output": "SELECT COUNT(o.OrderID) AS LateOrders FROM orders o WHERE o.ShippedDate > o.RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the top 5 products by units sold this month?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS units_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY products.ProductName ORDER BY units_sold DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the revenue generated from orders that were shipped within 5 days of the order date.",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Revenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE DATEDIFF(orders.ShippedDate, orders.OrderDate) <= 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which cities have the highest number of orders?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue each month?",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_FORMAT(o.OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order in the last month?",
        "output": "SELECT AVG(Freight) AS avg_shipping_cost FROM orders WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE - INTERVAL '1' MONTH) AND YEAR(OrderDate) = YEAR(CURRENT_DATE - INTERVAL '1' MONTH);",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue from orders for each supplier?",
        "output": "SELECT s.SupplierID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the most ordered product in terms of quantity?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalOrdered FROM [Order Details] GROUP BY ProductID ORDER BY TotalOrdered DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of products?",
        "output": "SELECT AVG(UnitPrice) AS AverageUnitPrice FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all products below their reorder level and their respective supplier names.",
        "output": "SELECT p.ProductName, s.CompanyName FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.UnitsInStock < p.ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total quantity of each product sold?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantitySold FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify products that have a higher unit price than the average unit price of all products.",
        "output": "SELECT p.ProductID, p.ProductName FROM products p WHERE p.UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the total sales for each category in the last quarter?",
        "output": "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have a quantity per unit greater than 10?",
        "output": "SELECT COUNT(ProductID) AS ProductCount FROM products WHERE CAST(SUBSTRING_INDEX(QuantityPerUnit, ' ', 1) AS UNSIGNED) > 10;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the reorder points for the top-selling products?",
        "output": "SELECT ProductName, ReorderLevel FROM products WHERE ProductID IN (SELECT ProductID FROM [Order Details] GROUP BY ProductID ORDER BY SUM(Quantity) DESC LIMIT 5);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue from orders that received a discount?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalDiscountedSales FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE [Order Details].Discount > 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many units of discontinued products are still in stock?",
        "output": "SELECT SUM(UnitsInStock) AS TotalUnitsInStock FROM products WHERE Discontinued = 1",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the trend of total sales revenue over the past 12 months?",
        "output": "SELECT MONTH(orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY MONTH(orders.OrderDate) ORDER BY month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the monthly inventory turnover ratio for each product.",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IN (SELECT OrderID FROM orders WHERE orderDate BETWEEN 'YOUR_START_DATE' AND 'YOUR_END_DATE') GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the employee distribution by city and the total sales from each city?",
        "output": "SELECT e.City, COUNT(DISTINCT e.EmployeeID) AS EmployeeCount, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.City ORDER BY TotalSales DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost for each shipping method?",
        "output": "SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Determine the customer with the highest lifetime value.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY lifetime_value DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Who is the contact person for the supplier with the most orders?",
        "output": "SELECT suppliers.CompanyName, suppliers.ContactName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName, suppliers.ContactName ORDER BY COUNT([Order Details].OrderID) DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped after the required date?",
        "output": "SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product has generated the highest revenue?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS product_revenue FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY product_revenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers provide more than 5 different products?",
        "output": "SELECT SupplierID, COUNT(DISTINCT ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID HAVING COUNT(DISTINCT ProductID) > 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total sales revenue for each product?",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue for each product category last month?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN categories ON products.CategoryID = categories.CategoryID WHERE [Order Details].OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= '2023-09-01' AND OrderDate < '2023-10-01') GROUP BY categories.CategoryName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the average discount provided on products per category.",
        "output": "SELECT products.CategoryID, AVG([Order Details].Discount) AS AverageDiscount FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the average order value for each employee.",
        "output": "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "List the top 5 countries with the greatest number of delayed shipments.",
        "output": "SELECT ShipCountry, COUNT(*) AS DelayedShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipCountry ORDER BY DelayedShipments DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many different products does each supplier offer?",
        "output": "SELECT suppliers.CompanyName, COUNT(DISTINCT products.ProductID) AS ProductCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product has been ordered by the most unique customers?",
        "output": "SELECT [Order Details].ProductID, COUNT(DISTINCT orders.CustomerID) AS UniqueCustomers FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY [Order Details].ProductID ORDER BY UniqueCustomers DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the total freight costs incurred by each employee's orders?",
        "output": "SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time per month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS month, AVG(DATE_PART('day', orders.ShippedDate - orders.OrderDate)) AS order_fulfillment_time FROM orders GROUP BY month",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier provides the most products?",
        "output": "SELECT suppliers.SupplierID, COUNT(products.ProductID) AS ProductCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID ORDER BY ProductCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the shortest average lead time?",
        "output": "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the month with the highest number of orders.",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY Month ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value by month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many unique products are ordered each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, COUNT(DISTINCT [Order Details].ProductID) AS UniqueProducts FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total freight cost for each supplier?",
        "output": "SELECT suppliers.CompanyName, SUM(orders.Freight) AS TotalFreight FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped late in the last quarter?",
        "output": "SELECT COUNT(OrderID) AS late_orders FROM orders WHERE ShippedDate > RequiredDate AND OrderDate >= DATE '2023-07-01' AND OrderDate < DATE '2023-10-01';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have been ordered with a discount greater than 20%?",
        "output": "SELECT COUNT(DISTINCT od.ProductID) FROM [Order Details] od WHERE od.Discount > 0.2;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate overall product performance for the last quarter.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalPerformance FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE QUARTER(OrderDate) = QUARTER(DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)) AND YEAR(OrderDate) = YEAR(DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)) GROUP BY p.ProductID ORDER BY TotalPerformance DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier supplies the most diverse range of products?",
        "output": "SELECT s.SupplierID, s.CompanyName, COUNT(DISTINCT p.ProductID) AS ProductVariety FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY ProductVariety DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which employees have managed the highest number of distinct customers?",
        "output": "SELECT o.EmployeeID, COUNT(DISTINCT o.CustomerID) AS NumCustomers FROM orders o GROUP BY o.EmployeeID ORDER BY NumCustomers DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average quantity of products ordered per order?",
        "output": "SELECT AVG(SUM(Quantity)) AS AvgQuantity FROM [Order Details] GROUP BY OrderID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of units on order for products supplied by each supplier?",
        "output": "SELECT products.SupplierID, SUM(products.UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY products.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product categories have the lowest average unit price?",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AverageUnitPrice FROM products GROUP BY CategoryID ORDER BY AverageUnitPrice ASC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total unit price of products currently on order?",
        "output": "SELECT SUM(UnitPrice * UnitsOnOrder) FROM products WHERE UnitsOnOrder > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order fulfillment time by month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount given on product sales?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the total revenue generated by each supplier in 2023.",
        "output": "SELECT suppliers.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY suppliers.SupplierID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which city has the highest number of unique customers?",
        "output": "SELECT c.City, COUNT(DISTINCT c.CustomerID) AS unique_customers FROM customers c GROUP BY c.City ORDER BY unique_customers DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the shipping company that delivers the most orders on time.",
        "output": "SELECT ShipVia, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS on_time_count FROM orders GROUP BY ShipVia ORDER BY on_time_count DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the fastest average delivery time?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageDeliveryTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName ORDER BY AverageDeliveryTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who are the newly hired employees and their sales contribution within their first 6 months?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN e.HireDate AND DATEADD(MONTH, 6, e.HireDate) GROUP BY e.EmployeeID",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "List the top 3 regions with the highest total sales in 2023.",
        "output": "SELECT regions.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region regions ON territories.RegionID = regions.RegionID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY regions.RegionDescription ORDER BY total_sales DESC LIMIT 3",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have the highest units on order?",
        "output": "SELECT ProductName, UnitsOnOrder FROM products ORDER BY UnitsOnOrder DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the trend of sales performance by each employee over the past six months?",
        "output": "SELECT e.EmployeeID, DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_ADD(CURDATE(), INTERVAL -6 MONTH) GROUP BY e.EmployeeID, DATE_FORMAT(o.OrderDate, '%Y-%m') ORDER BY Month ASC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate and compare monthly on-time delivery rates over a year.",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS OrderMonth, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY OrderMonth ORDER BY OrderMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders had missing required ship dates?",
        "output": "SELECT COUNT(o.OrderID) FROM orders o WHERE o.RequiredDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the revenue generated by each supplier's products.",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SupplierRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier provides the highest number of products?",
        "output": "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS ProductCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List orders with a freight cost higher than the average freight cost.",
        "output": "SELECT orders.OrderID FROM orders WHERE orders.Freight > (SELECT AVG(Freight) FROM orders);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the most orders with discounts over 10%?",
        "output": "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount > 0.1 GROUP BY suppliers.SupplierID ORDER BY COUNT([Order Details].OrderID) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost per shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a stock level below the reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average time taken to ship an order?",
        "output": "SELECT AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageShippingTime FROM orders o WHERE o.ShippedDate IS NOT NULL",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Determine the customer retention rate for 2022.",
        "output": "(SELECT COUNT(DISTINCT o1.CustomerID) FROM orders o1 WHERE o1.OrderDate BETWEEN '2022-01-01' AND '2022-12-31') / (SELECT COUNT(DISTINCT o2.CustomerID) FROM orders o2 WHERE o2.OrderDate < '2022-01-01') AS customer_retention_rate",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the monthly average shipping cost per order?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AvgFreight FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the top 5 products with the highest total sales revenue.",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer has spent the most on orders?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSpent FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY TotalSpent DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount given per product category?",
        "output": "SELECT c.CategoryID, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city has the highest average order value?",
        "output": "SELECT ShipCity, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCity ORDER BY AvgOrderValue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated from each product?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) as TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many distinct products were sold each month in 2023?",
        "output": "SELECT MONTH(orders.OrderDate), COUNT(DISTINCT [Order Details].ProductID) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY MONTH(orders.OrderDate)",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which suppliers have the shortest lead time on deliveries?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY lead_time",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the average Order-to-Shipment time in days.",
        "output": "SELECT AVG(EXTRACT(DAY FROM ShippedDate - OrderDate)) AS AvgOrderToShipmentTime FROM orders WHERE ShippedDate IS NOT NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the top 3 most frequent shipping methods.",
        "output": "SELECT ShipVia, COUNT(ShipVia) AS method_count FROM orders GROUP BY ShipVia ORDER BY method_count DESC LIMIT 3",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order for each shipping method?",
        "output": "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the most popular product based on total order quantity?",
        "output": "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SUM(od.Quantity) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total quantity of each product ordered in 2022?",
        "output": "SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = 2022 GROUP BY od.ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the number of orders shipped using each shipping method.",
        "output": "SELECT ShipVia, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which cities have the highest number of orders placed?",
        "output": "SELECT customers.City, COUNT(orders.OrderID) AS number_of_orders FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.City ORDER BY number_of_orders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost for orders that were shipped late?",
        "output": "SELECT AVG(Freight) FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier provides the most products?",
        "output": "SELECT SupplierID, COUNT(*) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees have a title of 'Sales Representative'?",
        "output": "SELECT COUNT(*) FROM employees WHERE Title = 'Sales Representative';",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest average order value?",
        "output": "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AvgOrderValue DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the correlation between an employee's tenure and their sales performance?",
        "output": "SELECT e.EmployeeID, (DATEDIFF(CURDATE(), e.HireDate)/365) AS TenureYears, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the difference in sales generated by each employee compared to their direct manager.",
        "output": "SELECT e1.EmployeeID, \n       (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) - IFNULL(e2.TotalSales, 0)) AS SalesDifference \nFROM employees e1 \nLEFT JOIN (\n    SELECT e2.EmployeeID AS ManagerID, \n           SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales \n    FROM employees e2 \n    JOIN orders o ON e2.EmployeeID = o.EmployeeID \n    JOIN [Order Details] od ON o.OrderID = od.OrderID \n    GROUP BY e2.EmployeeID\n) e2 ON e1.ReportsTo = e2.ManagerID \nJOIN orders o ON e1.EmployeeID = o.EmployeeID \nJOIN [Order Details] od ON o.OrderID = od.OrderID \nGROUP BY e1.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products are currently discontinued?",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales amount for each month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_TRUNC('month', orders.OrderDate);",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which region has the highest average lead time for suppliers?",
        "output": "SELECT Region, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY Region ORDER BY AverageLeadTime DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total number of orders placed by each customer?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product has generated the highest total sales?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top 5 most frequently ordered products?",
        "output": "SELECT ProductName, COUNT([Order Details].OrderID) AS OrderFrequency FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY OrderFrequency DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the regions with the highest sales performance in 2023.",
        "output": "SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN region ON customers.Region = region.RegionID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY region.RegionDescription ORDER BY total_sales DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were placed by returning customers in 2023?",
        "output": "SELECT COUNT(DISTINCT orders.OrderID) FROM orders WHERE orders.CustomerID IN (SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 1) AND YEAR(OrderDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Find the on-time delivery rate for each month in 2023.",
        "output": "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS month, SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE EXTRACT(YEAR FROM orders.OrderDate) = 2023 GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM')",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "List orders that were shipped later than required date along with the delay in days.",
        "output": "SELECT OrderID, DATEDIFF(ShippedDate, RequiredDate) AS DelayDays FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "For each category, what is the total number of units sold?",
        "output": "SELECT CategoryID, SUM([Order Details].Quantity) AS TotalUnitsSold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify which categories have products that are all discontinued.",
        "output": "SELECT CategoryID FROM products GROUP BY CategoryID HAVING COUNT(*) = SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders have a discount applied?",
        "output": "SELECT COUNT(DISTINCT OrderID) FROM [Order Details] WHERE Discount > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the trend of order fulfillment time over the months?",
        "output": "SELECT DATE_TRUNC('month', orders.ShippedDate) AS order_month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY order_month ORDER BY order_month ASC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders were delivered on time each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID)) AS OnTimeRate FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost accumulated by each employee?",
        "output": "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee who handled the most orders last quarter.",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderDate BETWEEN DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' AND DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 day' GROUP BY employees.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How does the average order value vary by shipping country?",
        "output": "SELECT ShipCountry, AVG(TotalOrderValue) AS AverageOrderValue FROM (SELECT orders.OrderID, ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID, ShipCountry) AS Subquery GROUP BY ShipCountry;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Are there any trends in shipping delays over months?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS month, AVG(DATEDIFF(ShippedDate, RequiredDate)) AS avg_delay FROM orders GROUP BY month ORDER BY month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders have been handled by each employee this year?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS TotalOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have sold at least 1000 units in total?",
        "output": "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity) >= 1000;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price for each product category?",
        "output": "SELECT c.CategoryID, AVG(p.UnitPrice) AS AvgUnitPrice FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of units ordered per product?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalUnitsOrdered FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total discount given for each product?",
        "output": "SELECT p.ProductName, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the top 5 cities with the highest number of orders.",
        "output": "SELECT ShipCity, COUNT(OrderID) AS num_orders FROM orders GROUP BY ShipCity ORDER BY num_orders DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How much freight cost is associated with orders handled by each employee?",
        "output": "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreightCost FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have not supplied any products in the last six months?",
        "output": "SELECT suppliers.CompanyName FROM suppliers LEFT JOIN products ON suppliers.SupplierID = products.SupplierID LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID LEFT JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderID IS NULL OR orders.OrderDate < DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount rate provided on all products?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many units of each product are on order?",
        "output": "SELECT ProductName, UnitsOnOrder FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the most frequently ordered product.",
        "output": "SELECT ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY COUNT(od.OrderID) DESC FETCH FIRST 1 ROW ONLY;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the most ordered product.",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC FETCH FIRST 1 ROW ONLY;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average price of all products?",
        "output": "SELECT AVG(UnitPrice) FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "List the employees who have not made any sales in the last six months.",
        "output": "SELECT employees.EmployeeID FROM employees WHERE employees.EmployeeID NOT IN (SELECT DISTINCT orders.EmployeeID FROM orders WHERE orders.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH));",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the 3 most frequently ordered products.",
        "output": "SELECT ProductID, COUNT(ProductID) AS OrderFrequency FROM [Order Details] GROUP BY ProductID ORDER BY OrderFrequency DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the correlation between employee age and sales performance.",
        "output": "SELECT e.EmployeeID, (YEAR(CURRENT_DATE) - YEAR(e.BirthDate)) AS Age, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which supplier provides the most products?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the monthly sales per region by each employee.",
        "output": "SELECT e.Region, e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = YEAR(CURRENT_DATE) AND EXTRACT(MONTH FROM o.OrderDate) = MONTH(CURRENT_DATE) GROUP BY e.Region, e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average unit price for products in each category?",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AverageUnitPrice FROM products GROUP BY CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the reorder level for each active product?",
        "output": "SELECT ProductName, ReorderLevel FROM products WHERE Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which orders have a discount greater than 10%?",
        "output": "SELECT OrderID FROM [Order Details] WHERE Discount > 0.10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the year-over-year change in average shipping cost.",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, AVG(Freight) AS AverageCost, LAG(AVG(Freight), 1) OVER (ORDER BY EXTRACT(YEAR FROM OrderDate)) AS PreviousYearCost, (AVG(Freight) - LAG(AVG(Freight), 1) OVER (ORDER BY EXTRACT(YEAR FROM OrderDate))) / LAG(AVG(Freight), 1) OVER (ORDER BY EXTRACT(YEAR FROM OrderDate)) AS YearOverYearChange FROM orders GROUP BY Year;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of units sold per month?",
        "output": "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS OrderMonth, SUM([Order Details].Quantity) AS TotalUnits FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the inventory turnover ratio for the last month.",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What was the average order value for each month in 2023?",
        "output": "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE EXTRACT(YEAR FROM orders.OrderDate) = 2023 GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM');",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which city has the highest number of orders?",
        "output": "SELECT o.ShipCity, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipCity ORDER BY OrderCount DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the monthly increase or decrease in stock levels for each product.",
        "output": "SELECT ProductID, ProductName, (UnitsInStock - (SELECT UnitsInStock FROM products AS pp WHERE pp.ProductID = p.ProductID AND pp.OrderDate < DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH))) AS StockChange FROM products AS p;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest sales in December 2022?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2022 AND MONTH(o.OrderDate) = 12 GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost for orders shipped to each country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount given across all orders?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with the highest increase in order quantity compared to the previous month.",
        "output": "SELECT ProductName, (SUM(CASE WHEN DATE_TRUNC('month', OrderDate) = DATE '2023-09-01' THEN [Order Details].Quantity ELSE 0 END) - SUM(CASE WHEN DATE_TRUNC('month', OrderDate) = DATE '2023-08-01' THEN [Order Details].Quantity ELSE 0 END)) AS Increase FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ProductName ORDER BY Increase DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped to each country?",
        "output": "SELECT ShipCountry, COUNT(*) AS orders_shipped FROM orders GROUP BY ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees are reporting to each manager?",
        "output": "SELECT e.ReportsTo, COUNT(e.EmployeeID) AS NumberOfReportees FROM employees e GROUP BY e.ReportsTo;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the customer lifetime value for each customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer received the highest number of shipments?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS ShipmentsReceived FROM orders WHERE ShippedDate IS NOT NULL GROUP BY CustomerID ORDER BY ShipmentsReceived DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product has the highest total sales revenue?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which country has the lowest average shipping cost?",
        "output": "SELECT ShipCountry, AVG(Freight) AS avg_shipping_cost FROM orders GROUP BY ShipCountry ORDER BY avg_shipping_cost ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee has the most efficient order processing time?",
        "output": "SELECT employees.EmployeeID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS processing_time FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID ORDER BY processing_time ASC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the monthly sales performance for each product.",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS MonthlySales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have both high inventory levels and high sales?",
        "output": "SELECT p.ProductID FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID HAVING AVG(p.UnitsInStock) > 100 AND SUM(od.Quantity) > 1000;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Retrieve all orders that were delivered past their required date.",
        "output": "SELECT orders.OrderID FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the top 3 products sold by each employee based on quantity.",
        "output": "SELECT e.EmployeeID, od.ProductID, TotalQuantity FROM (SELECT e.EmployeeID, od.ProductID, SUM(od.Quantity) AS TotalQuantity, ROW_NUMBER() OVER (PARTITION BY e.EmployeeID ORDER BY SUM(od.Quantity) DESC) as rn FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, od.ProductID) subquery WHERE rn <= 3 ORDER BY e.EmployeeID, TotalQuantity DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average discount applied to orders in 2023?",
        "output": "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer has the longest duration between order date and shipped date?",
        "output": "SELECT customers.CustomerID, (ShippedDate - OrderDate) AS Duration FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE ShippedDate IS NOT NULL ORDER BY Duration DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales for each month in 2023?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were fulfilled on time in the last quarter?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate <= RequiredDate AND OrderDate BETWEEN '2023-07-01' AND '2023-09-30'",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products consistently sell above the reorder level?",
        "output": "SELECT p.ProductName FROM products p WHERE p.UnitsInStock > p.ReorderLevel AND p.ProductID IN (SELECT od.ProductID FROM [Order Details] od GROUP BY od.ProductID HAVING SUM(od.Quantity) > 100);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales generated by each employee last month?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) - 1 AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find out which employee has handled the most orders.",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the top 5 employees with the highest number of orders.",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY OrderCount DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped late each month?",
        "output": "SELECT TO_CHAR(ShippedDate, 'YYYY-MM') AS Month, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY TO_CHAR(ShippedDate, 'YYYY-MM');",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which months have the highest and lowest total sales?",
        "output": "SELECT Month, MAX(TotalSales) AS TotalSales FROM (SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month) AS MonthlySales GROUP BY Month ORDER BY TotalSales DESC LIMIT 1 UNION SELECT Month, MIN(TotalSales) AS TotalSales FROM (SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month) AS MonthlySales GROUP BY Month ORDER BY TotalSales ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month had the highest total freight cost?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS OrderMonth, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY OrderMonth ORDER BY TotalFreightCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of all products?",
        "output": "SELECT AVG(UnitPrice) FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have generated sales above the company average?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING TotalSales > (SELECT AVG(TotalSales) FROM (SELECT EmployeeID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY EmployeeID) AS subquery)",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total quantity of discontinued products sold last year?",
        "output": "SELECT SUM(od.Quantity) AS QuantitySold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1 AND od.OrderID IN (SELECT OrderID FROM orders WHERE orderDate BETWEEN '2022-01-01' AND '2022-12-31');",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products are below their reorder level?",
        "output": "SELECT COUNT(ProductID) FROM products WHERE UnitsInStock < ReorderLevel",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total number of customers from each country?",
        "output": "SELECT Country, COUNT(CustomerID) AS Number_of_Customers FROM customers GROUP BY Country;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Compare the total sales by country for the last quarter.",
        "output": "SELECT ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' GROUP BY ShipCountry;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the product with the maximum price-to-stock ratio.",
        "output": "SELECT ProductID, ProductName, (UnitPrice / UnitsInStock) AS PriceToStockRatio FROM products WHERE UnitsInStock > 0 ORDER BY PriceToStockRatio DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average freight cost per order by shipping country?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products with high stock levels but low sales orders.",
        "output": "SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName HAVING p.UnitsInStock > YOUR_HIGH_THRESHOLD AND COALESCE(SUM(od.Quantity), 0) < YOUR_LOW_THRESHOLD;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average time taken to ship an order?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total number of discontinued products?",
        "output": "SELECT COUNT(*) AS TotalDiscontinued FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost by shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which country had the highest number of orders placed?",
        "output": "SELECT o.ShipCountry, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipCountry ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped in the last month?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the average sales per month for each product?",
        "output": "SELECT ProductName, AVG(SUM_Monthly.Quantity) AS AvgMonthlySales FROM products JOIN (SELECT ProductID, SUM(Quantity) AS Quantity, EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month FROM [Order Details] GROUP BY ProductID, Year, Month) AS SUM_Monthly ON products.ProductID = SUM_Monthly.ProductID GROUP BY ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers with zero products on order.",
        "output": "SELECT s.SupplierID, s.CompanyName FROM suppliers s WHERE NOT EXISTS (SELECT * FROM products p WHERE p.SupplierID = s.SupplierID AND p.UnitsOnOrder > 0);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders has each employee processed?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which orders had shipping delays beyond the required date?",
        "output": "SELECT orders.OrderID FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products are currently discontinued?",
        "output": "SELECT COUNT(ProductID) AS DiscontinuedCount FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were shipped within 5 days of being placed?",
        "output": "SELECT CAST(COUNT(OrderID) FILTER (WHERE DATEDIFF(ShippedDate, OrderDate) <= 5) AS DECIMAL) / COUNT(OrderID) AS PercentWithin5Days FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders have been shipped to the USA?",
        "output": "SELECT COUNT(*) FROM orders WHERE ShipCountry = 'USA';",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest total sales?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of discontinued products?",
        "output": "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 5 products with the highest units in stock?",
        "output": "SELECT ProductID, ProductName, UnitsInStock FROM products ORDER BY UnitsInStock DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total number of products ordered by each customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].Quantity) AS TotalProducts FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average sales per order for each employee?",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the monthly inventory turnover ratio?",
        "output": "SELECT MONTH(OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY MONTH(OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which employees have processed the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrdersProcessed FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrdersProcessed DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the average order fulfillment time for each month in 2023.",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE YEAR(orders.OrderDate) = 2023 GROUP BY month",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the on-time delivery rate for each month?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total sales per year for each employee.",
        "output": "SELECT e.EmployeeID, YEAR(o.OrderDate) AS Year, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS YearlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, YEAR(o.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average number of days between order date and shipped date?",
        "output": "SELECT AVG(DATEDIFF(day, OrderDate, ShippedDate)) AS AvgDaysToShip FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total quantity ordered for each product across all orders?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped late in the first half of this year?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate AND ShippedDate BETWEEN '2023-01-01' AND '2023-06-30';",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products need to be reordered based on their reorder level and current stock?",
        "output": "SELECT p.ProductName FROM products p WHERE p.UnitsInStock < p.ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products are currently discontinued?",
        "output": "SELECT COUNT(*) FROM products WHERE Discontinued = 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue for each supplier?",
        "output": "SELECT p.SupplierID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalSupplierRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total discount given each month?",
        "output": "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers are there in each region?",
        "output": "SELECT Region, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY Region;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method has the highest on-time delivery rate?",
        "output": "SELECT ShipVia, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS on_time_delivery_rate FROM orders GROUP BY ShipVia ORDER BY on_time_delivery_rate DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "List the top 5 products by sales revenue.",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS SalesRevenue FROM [Order Details] GROUP BY ProductID ORDER BY SalesRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time for each supplier?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total inventory value for each product?",
        "output": "SELECT p.ProductID, (p.UnitsInStock * p.UnitPrice) AS InventoryValue FROM products p",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the product with the highest average discount applied.",
        "output": "SELECT products.ProductName, AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY avg_discount DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the names of products with stock levels below their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time difference between the required and shipped dates?",
        "output": "SELECT AVG(DATEDIFF(RequiredDate, ShippedDate)) AS AvgDaysDiff FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount given per order?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the top 3 regions with the longest average order fulfillment time.",
        "output": "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipRegion ORDER BY AvgFulfillmentTime DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 5 customers by the order count.",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the relationship between employee age and sales performance?",
        "output": "SELECT e.EmployeeID, (YEAR(CURDATE()) - YEAR(e.BirthDate)) AS Age, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY Age DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many shipments were delivered on time monthly?",
        "output": "SELECT DATE_TRUNC('month', ShippedDate) AS month, COUNT(OrderID) AS on_time_shipments FROM orders WHERE ShippedDate <= RequiredDate GROUP BY month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the monthly sales performance for each product for the past year?",
        "output": "SELECT p.ProductName, MONTH(o.OrderDate) AS Month, YEAR(o.OrderDate) AS Year, SUM(od.Quantity) AS MonthlySales FROM [Order Details] od JOIN Orders o ON od.OrderID = o.OrderID JOIN products p ON od.ProductID = p.ProductID WHERE o.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY p.ProductName, YEAR(o.OrderDate), MONTH(o.OrderDate) ORDER BY YEAR(o.OrderDate) DESC, MONTH(o.OrderDate) DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest total sales in the last year?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Determine the monthly trend in the number of orders placed.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "easy"
    }
]