[
    {
        "scenario": "Inventory Management",
        "input": "List the products with a unit price higher than the average unit price.",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify correlations between employee\u2019s region and total sales.",
        "output": "SELECT e.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Region;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the quickest lead time for product delivery?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID ORDER BY avg_lead_time ASC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify products that are often sold together in orders.",
        "output": "SELECT od1.ProductID AS ProductID1, od2.ProductID AS ProductID2, COUNT(*) AS CoOccurrence FROM [Order Details] od1 JOIN [Order Details] od2 ON od1.OrderID = od2.OrderID AND od1.ProductID < od2.ProductID GROUP BY od1.ProductID, od2.ProductID ORDER BY CoOccurrence DESC LIMIT 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the variance in order quantities handled by employees?",
        "output": "SELECT e.EmployeeID, VARIANCE(od.Quantity) AS OrderQuantityVariance FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the total number of orders placed for each category of products.",
        "output": "SELECT CategoryID, COUNT(DISTINCT orders.OrderID) AS order_count FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the monthly sales trend for each employee over the last year.",
        "output": "SELECT YEAR(o.OrderDate) AS Year, MONTH(o.OrderDate) AS Month, e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY Year, Month, e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time by month?",
        "output": "SELECT EXTRACT(YEAR FROM orders.OrderDate) AS year, EXTRACT(MONTH FROM orders.OrderDate) AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY year, month",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which region has the highest on-time delivery rate?",
        "output": "SELECT ShipRegion, (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 1.0 / COUNT(*)) AS OnTimeDeliveryRate FROM orders GROUP BY ShipRegion ORDER BY OnTimeDeliveryRate DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average time taken to fulfill an order in the first half of 2023?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales by region?",
        "output": "SELECT orders.ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS RegionSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipRegion",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of products supplied by each supplier?",
        "output": "SELECT p.SupplierID, AVG(p.UnitPrice) AS AvgPrice FROM products p GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order frequency for each customer?",
        "output": "SELECT c.CustomerID, (COUNT(o.OrderID) / DATEDIFF(year, MIN(o.OrderDate), MAX(o.OrderDate))) AS OrderFrequency FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units of discontinued products are still in stock?",
        "output": "SELECT SUM(UnitsInStock) AS TotalUnitsInStock FROM products WHERE Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost incurred each month?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS year, EXTRACT(MONTH FROM OrderDate) AS month, SUM(Freight) AS total_freight_cost FROM orders GROUP BY year, month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which orders received the highest discount?",
        "output": "SELECT o.OrderID, od.Discount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount = (SELECT MAX(od2.Discount) FROM [Order Details] od2) ORDER BY o.OrderID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How does the performance of each product vary on a monthly basis?",
        "output": "SELECT p.ProductName, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, EXTRACT(MONTH FROM o.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the most frequently ordered product per supplier?",
        "output": "SELECT products.SupplierID, suppliers.CompanyName, [Order Details].ProductID, products.ProductName, COUNT([Order Details].ProductID) AS OrderFrequency FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON suppliers.SupplierID = products.SupplierID GROUP BY products.SupplierID, [Order Details].ProductID, products.ProductName, suppliers.CompanyName ORDER BY products.SupplierID, OrderFrequency DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Determine the employee with the highest average order value.",
        "output": "SELECT employees.EmployeeID, AVG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID ORDER BY avg_order_value DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the top 3 customers based on total sales in the last quarter.",
        "output": "SELECT CustomerID, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE QUARTER(OrderDate) = QUARTER(CURRENT_DATE) - 1 AND YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY CustomerID ORDER BY TotalSales DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed by each customer in the last quarter?",
        "output": "SELECT o.CustomerID, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE o.OrderDate >= DATEADD(quarter, -1, CURRENT_DATE) GROUP BY o.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total discount provided for each order?",
        "output": "SELECT OrderID, SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details] GROUP BY OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which day of the week has the highest number of shipped orders?",
        "output": "SELECT EXTRACT(DOW FROM ShippedDate) AS DayOfWeek, COUNT(OrderID) AS NumOrders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY DayOfWeek ORDER BY NumOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with stock levels less than 10 units.",
        "output": "SELECT p.ProductName FROM products p WHERE p.UnitsInStock < 10;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the product with the highest discount applied on average.",
        "output": "SELECT ProductID, AVG(Discount) AS AverageDiscount FROM [Order Details] GROUP BY ProductID ORDER BY AverageDiscount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee handles the highest number of unique products?",
        "output": "SELECT e.EmployeeID, COUNT(DISTINCT od.ProductID) AS UniqueProducts FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY UniqueProducts DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "List the top-performing products based on inventory turnover ratio.",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID ORDER BY turnover_ratio DESC LIMIT 5",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount given across all order details?",
        "output": "SELECT AVG(Discount) AS avg_discount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the most common shipping region for orders handled by each employee?",
        "output": "SELECT e.EmployeeID, o.ShipRegion FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, o.ShipRegion HAVING COUNT(o.OrderID) = (SELECT MAX(sub.OrdersCount) FROM (SELECT COUNT(o2.OrderID) AS OrdersCount FROM orders o2 WHERE o2.EmployeeID = e.EmployeeID GROUP BY o2.ShipRegion) sub);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time for suppliers to deliver orders each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY month, products.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the difference between units on order and units in stock for each product?",
        "output": "SELECT ProductName, UnitsOnOrder - UnitsInStock AS StockDifference FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the average discount given by each employee across all their orders.",
        "output": "SELECT e.EmployeeID, AVG(od.Discount) AS AverageDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the revenue contribution of each region in 2023?",
        "output": "SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN employeeTerritories ON orders.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY region.RegionDescription",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated by each city?",
        "output": "SELECT ShipCity, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCity;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped with the highest freight each month?",
        "output": "SELECT year, month, COUNT(OrderID) AS order_count FROM (SELECT EXTRACT(YEAR FROM OrderDate) AS year, EXTRACT(MONTH FROM OrderDate) AS month, Freight, OrderID, RANK() OVER (PARTITION BY EXTRACT(YEAR FROM OrderDate), EXTRACT(MONTH FROM OrderDate) ORDER BY Freight DESC) AS rank FROM orders) ranked_orders WHERE rank = 1 GROUP BY year, month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What are the top three cities based on the total freight cost for deliveries?",
        "output": "SELECT ShipCity, SUM(Freight) AS total_freight_cost FROM orders GROUP BY ShipCity ORDER BY total_freight_cost DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which month had the highest total sales revenue?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month ORDER BY TotalSales DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the average discount given per order by each employee.",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].Discount) AS AverageDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the shipping cost per order in March 2023?",
        "output": "SELECT AVG(orders.Freight) AS shipping_cost_per_order FROM orders WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders have zero discounts applied?",
        "output": "SELECT COUNT(DISTINCT orders.OrderID) AS ZeroDiscountOrders FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE [Order Details].Discount = 0",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products are currently below their reorder level?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the most frequently ordered product.",
        "output": "SELECT p.ProductName, COUNT(od.OrderID) AS OrderFrequency FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY OrderFrequency DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top three regions with the highest number of orders.",
        "output": "SELECT o.ShipRegion, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipRegion ORDER BY OrderCount DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of products within each category?",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were not shipped on the required date?",
        "output": "SELECT COUNT(o.OrderID) FROM orders o WHERE o.ShippedDate > o.RequiredDate",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which months have the highest average shipping costs?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, AVG(Freight) AS avg_freight FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY avg_freight DESC LIMIT 3",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products need to be reordered based on the current stock and reorder level?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total revenue generated by discontinued products?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What percentage of orders are shipped late?",
        "output": "SELECT (COUNT(CASE WHEN o.ShippedDate > o.RequiredDate THEN 1 END) * 100.0 / COUNT(*)) AS LateShipPercentage FROM orders o;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost for all orders handled by each employee?",
        "output": "SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the city with the highest number of customers.",
        "output": "SELECT City, COUNT(CustomerID) AS total_customers FROM customers GROUP BY City ORDER BY total_customers DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List all employees who have started within the last year and their total sales.",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE e.HireDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY e.EmployeeID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the percentage contribution of each employee to the total company sales.",
        "output": "SELECT e.EmployeeID, (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / (SELECT SUM(od2.UnitPrice * od2.Quantity * (1 - od2.Discount)) FROM [Order Details] od2 JOIN orders o2 ON od2.OrderID = o2.OrderID)) * 100 AS ContributionPercentage FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the product with the highest inventory on order.",
        "output": "SELECT ProductID, UnitsOnOrder FROM products ORDER BY UnitsOnOrder DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have placed the most orders?",
        "output": "SELECT c.CustomerID, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY OrderCount DESC",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed by each customer last month?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND OrderDate < DATE_TRUNC('month', CURRENT_DATE) GROUP BY CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products from each supplier are currently out of stock?",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, COUNT(products.ProductID) AS OutOfStockProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsInStock = 0 GROUP BY suppliers.SupplierID, suppliers.CompanyName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount provided to customers?",
        "output": "SELECT AVG(od.Discount) AS AverageDiscount FROM [Order Details] od;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest total sales volume?",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID, suppliers.CompanyName ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the current stock level of each product?",
        "output": "SELECT ProductID, ProductName, UnitsInStock FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average delay for late orders over the past year?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgDelay FROM orders WHERE ShippedDate > RequiredDate AND OrderDate >= (CURRENT_DATE - INTERVAL '1 year');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which country receives the most orders?",
        "output": "SELECT ShipCountry, COUNT(*) AS NumberOfOrders FROM orders GROUP BY ShipCountry ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee processed the most orders?",
        "output": "SELECT EmployeeID, COUNT(*) AS OrdersProcessed FROM orders GROUP BY EmployeeID ORDER BY OrdersProcessed DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What products have more units on order than in stock?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does average order value vary by customer country?",
        "output": "SELECT customers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.Country",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were delivered on or before the required date each month?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS year, EXTRACT(MONTH FROM OrderDate) AS month, COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) AS on_time_delivery_rate FROM orders GROUP BY year, month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of orders that have not been shipped yet?",
        "output": "SELECT COUNT(*) AS unshipped_orders FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders are placed per month?",
        "output": "SELECT EXTRACT(YEAR_MONTH FROM OrderDate) AS YearMonth, COUNT(OrderID) AS OrderCount FROM orders GROUP BY YearMonth;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which categories have the highest average inventory turnover ratio?",
        "output": "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnover FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID ORDER BY InventoryTurnover DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the top 5 cities with the highest total sales.",
        "output": "SELECT ShipCity, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCity ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "List products that have not been ordered in the last six months.",
        "output": "SELECT p.ProductName FROM products p WHERE p.ProductID NOT IN (SELECT DISTINCT od.ProductID FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_ADD(CURDATE(), INTERVAL -6 MONTH));",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total inventory value for each supplier?",
        "output": "SELECT SupplierID, SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products GROUP BY SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total Customer Lifetime Value for each customer?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerLifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers whose products are most often on reorder.",
        "output": "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS reorder_count FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsOnOrder > 0 AND products.UnitsOnOrder >= products.ReorderLevel GROUP BY suppliers.CompanyName ORDER BY reorder_count DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have placed orders with no freight cost?",
        "output": "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.Freight = 0 GROUP BY e.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount applied to orders for each product?",
        "output": "SELECT ProductID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest inventory turnover ratio?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY InventoryTurnover DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped using each shipping method per month?",
        "output": "SELECT EXTRACT(YEAR FROM ShippedDate) AS year, EXTRACT(MONTH FROM ShippedDate) AS month, ShipVia, COUNT(OrderID) AS method_count FROM orders GROUP BY year, month, ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How does the average reorder level compare across suppliers?",
        "output": "SELECT p.SupplierID, AVG(p.ReorderLevel) AS AvgReorderLevel FROM products p GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products have the highest sales performance in each month?",
        "output": "SELECT products.ProductID, TO_CHAR(orders.OrderDate, 'YYYY-MM') AS month, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductID, TO_CHAR(orders.OrderDate, 'YYYY-MM')",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount given on orders by each supplier?",
        "output": "SELECT s.SupplierID, AVG(od.Discount) AS AvgDiscount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product has the highest total sales revenue?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalSales DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount applied to each category?",
        "output": "SELECT c.CategoryID, AVG(od.Discount) AS AvgDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine units on order for each product category.",
        "output": "SELECT p.CategoryID, SUM(p.UnitsOnOrder) AS TotalUnitsOnOrder FROM products p GROUP BY p.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the five customers with the highest lifetime value.",
        "output": "SELECT LifetimeCustomer.CustomerID, LifetimeCustomer.LifetimeValue FROM (SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID) AS LifetimeCustomer ORDER BY LifetimeCustomer.LifetimeValue DESC LIMIT 5",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders are delivered on or before the required date each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Who are the top 5 suppliers based on total sales of their products?",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID, suppliers.CompanyName ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many discontinued products are in stock?",
        "output": "SELECT COUNT(*) AS DiscontinuedInStock FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers provide the most number of different products?",
        "output": "SELECT s.SupplierID, COUNT(DISTINCT p.ProductID) AS NumberOfProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY NumberOfProducts DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed in the last month?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE OrderDate >= DATEADD(month, -1, GETDATE());",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have stock levels below their reorder point?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the top five employees who have secured the highest number of orders.",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS NumberOfOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY NumberOfOrders DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Discover the top-selling product in each region.",
        "output": "SELECT o.ShipRegion, od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipRegion, od.ProductID ORDER BY o.ShipRegion, TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier offers the fastest delivery time on average?",
        "output": "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS delivery_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY delivery_time ASC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier's products have contributed the most to total sales revenue?",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS ProductSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID, suppliers.CompanyName ORDER BY ProductSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders are delivered on or before the required date?",
        "output": "SELECT COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryPercentage FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were delivered on or before the required date?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the average unit price of products per supplier.",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, AVG(products.UnitPrice) AS AvgUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID, suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time for each employee?",
        "output": "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) FROM orders GROUP BY EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for each product in the first quarter of 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY products.ProductID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the top 5 products ordered by quantity.",
        "output": "SELECT ProductID, SUM(Quantity) AS total_quantity FROM [Order Details] GROUP BY ProductID ORDER BY total_quantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine which suppliers provide the widest variety of products.",
        "output": "SELECT suppliers.SupplierID, COUNT(DISTINCT products.ProductID) AS NumberOfProducts FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY NumberOfProducts DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products are below their reorder level?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders were delivered on time in 2023?",
        "output": "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN orders.OrderID END) * 100.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company delivers the most orders?",
        "output": "SELECT ShipName, COUNT(OrderID) FROM orders GROUP BY ShipName ORDER BY COUNT(OrderID) DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How does employee tenure relate to average sales performance?",
        "output": "SELECT e.EmployeeID, TIMESTAMPDIFF(YEAR, e.HireDate, CURDATE()) AS Tenure, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have a birthday this month?",
        "output": "SELECT FirstName, LastName FROM employees WHERE MONTH(BirthDate) = MONTH(CURDATE())",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify trends in hiring dates and order volume among employees.",
        "output": "SELECT e.HireDate, COUNT(o.OrderID) AS OrderVolume FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.HireDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed and shipped on the same day?",
        "output": "SELECT COUNT(OrderID) AS SameDayOrders FROM orders WHERE OrderDate = ShippedDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the employee turnover rate.",
        "output": "SELECT COUNT(*) / (SELECT COUNT(*) FROM employees WHERE employees.HireDate BETWEEN '2023-01-01' AND '2023-12-31') AS turnover_rate FROM employees WHERE employees.HireDate NOT BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order value per customer?",
        "output": "SELECT c.CustomerID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS avg_order_value FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which suppliers provide discontinued products?",
        "output": "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.Discontinued = 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which orders had the highest discount applied?",
        "output": "SELECT orders.OrderID, SUM([Order Details].Discount) AS TotalDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID ORDER BY TotalDiscount DESC LIMIT 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount applied to orders each month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, AVG([Order Details].Discount) AS AverageDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the average units in stock for each category.",
        "output": "SELECT CategoryID, AVG(UnitsInStock) AS AverageUnitsInStock FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped but still delayed beyond their required date?",
        "output": "SELECT COUNT(OrderID) AS DelayedOrders FROM orders WHERE ShippedDate > RequiredDate AND ShippedDate IS NOT NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped before the required date?",
        "output": "SELECT COUNT(o.OrderID) AS EarlyShippedOrders FROM orders o WHERE o.ShippedDate < o.RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the sales figures for each employee, broken down by year?",
        "output": "SELECT e.EmployeeID, YEAR(o.OrderDate) AS Year, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS YearlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, Year",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List products that have never been ordered.",
        "output": "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest discount applied in orders?",
        "output": "SELECT p.ProductName, MAX(od.Discount) AS MaxDiscount FROM products p INNER JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY MaxDiscount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the most frequently ordered product?",
        "output": "SELECT ProductID, COUNT(*) AS TimesOrdered FROM [Order Details] GROUP BY ProductID ORDER BY TimesOrdered DESC FETCH FIRST 1 ROW ONLY;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a stock level below the reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were delivered on time each month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, COUNT(orders.OrderID) AS OnTimeOrders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the products with the highest number of units on order.",
        "output": "SELECT ProductName FROM products WHERE UnitsOnOrder = (SELECT MAX(UnitsOnOrder) FROM products);",
        "difficulty": "medium"
    }
]